//----------------------------------------------------------------------------
// cScript
// (C) Copyright 1995 by Borland International, All Rights Reserved
//
// OPENFILE.SPP
//    Opens a file.
//
// $Revision:   1.13  $
//
//----------------------------------------------------------------------------

import editor;
import IDE;

// mark this module as being a library module
library;

//
// This function is tied to the Editor's local menu command "Open Source"
// There should be a file name at/near the current cursor location.  Fetch it
// into an edit buffer.
//
LoadFileAtCursor(){
   declare bracketedFlag = true;
   declare String wholeLine(editor.GetLine());

   wholeLine = wholeLine.Compress();

   declare incPos = wholeLine.Index("include");
   if(incPos){
      // we have a #include line
      declare startPos = incPos + 7;     // since strlen("include") is 7
      declare endPos = startPos;
      switch(wholeLine.SubString(startPos, 1).Text){
         case "<":
            endPos = wholeLine.Index(">");
            bracketedFlag = true;
            break;
         case "\"":
            bracketedFlag = false;
            declare String remainder(wholeLine.SubString(startPos + 1).Text);
            endPos = startPos + 1 + remainder.Index("\"");
            break;
      }

      declare ripLength = endPos - startPos;
      ripLength -= 2;                  // we don't want either end character
      if(ripLength > 0){
         declare String fileName(wholeLine.SubString(startPos + 1, ripLength).Text);
         fileName = fileName.Compress();
         fileName = fileName.Trim();
         fileName = fileName.Trim(TRUE);

         // The new ANSI style header notation allows system header files to be
         // specified without extension.  As in:
         //   #include <stdio>
         // if we detect an extensionless header file in angle brackets we'll
         // append a .h so we can find them
         if(bracketedFlag){
            if(fileName.Index(".") == 0){
               fileName = new String(fileName.Text + ".h");
            }
         }

         SmartFileLoad(fileName.Text, editor.TopBuffer.FullName, !bracketedFlag);
         return;
      }
   }

   IDE.StatusBar = "no file detected at current position";
}


// Search the specified path for the file
FindFileOnPath(fileName, path){

   if(fileName == NULL || fileName == "")
      return NULL;

   if(path == NULL || path == "")
      return NULL;

   declare String fullPath(path);
   declare String matchPath;
   declare endPos = 0;
   do{
      endPos = fullPath.Index(";");
      if(endPos){
         matchPath = fullPath.SubString(0, endPos - 1);
         fullPath = fullPath.SubString(endPos);
      }else{
         matchPath = fullPath;
      }

      declare checkThis = matchPath.Text + "\\" + fileName;
      if(IDE.FileExists(checkThis)){
         return checkThis;
      }

   }while(endPos);

   return NULL;
}

SmartFileLoad(declare fileToLoad, declare origFile, declare bQuotedFlag){
   declare foundName = NULL;

   // first, see if we can find a matching node in the current project
   declare prjNode = new ProjectNode(fileToLoad);
   if(prjNode.IsValid){
      foundName = prjNode.InputName;
   }

   // second, look in the current directory first if filename enclosed in quotes
   if (bQuotedFlag) {
      if(foundName == NULL){
         foundName = FindFileOnPath(fileToLoad, ".");
      }
   }

   // find a project node to use as a base
   declare ProjectNode srcFile(origFile);
   if(!srcFile.IsValid){
      srcFile = new ProjectNode();
   }

   // third, see if we can find it along the include path
   if(foundName == NULL){
      foundName = FindFileOnPath(fileToLoad, srcFile.IncludePath);
   }

   // fourth, try the source path
   if(foundName == NULL){
      foundName = FindFileOnPath(fileToLoad, srcFile.SourcePath);
   }

   // last chance, look in the current directory if we haven't already
   if (!bQuotedFlag) {
      if(foundName == NULL){
         foundName = FindFileOnPath(fileToLoad, ".");
      }
   }

   if(foundName == NULL){
      // still can't find it - see if user knows
      IDE.FileOpen(fileToLoad);
   }else{
      // open it 
      IDE.DoFileOpen(foundName);
   }
}
