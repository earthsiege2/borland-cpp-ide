ObjectWindows 5.0

This file contains a list of the new features for Borland's
ObjectWindows for C++ version 5.0 and information about the
product that is not included in the documentation. The online
Help contains updated information not found in the printed
documentation. For the latest information about Borland C++ and
for information about how to contact Borland, see the README.TXT
file included with your distribution disks.
 
TABLE OF CONTENTS
 1. New features
 2. API, implementation and organization changes
 3. ObjectWindows examples directory structure
 4. Rebuilding ObjectWindows Library
 5. Known problems

1. New features 
ObjectWindows 5.0 includes the following new features:
 -  Complete encapsulation of Windows Common Controls
	Common Control			            ObjectWindows Class(es)
	Animation 				            TAnimateCtrl
	Column Header 			            TColumnHeader
	Progress Indicator			        TGauge
	Hotkey				                THotKey
	Track Bar				            TSlider
	List View				            TListWindow
	Tree View				            TTreeWindow
	PropertySheet & Property Pages		TPropertySheet/TPropertyPage
	Tab 				                TTabControl
	Tooltip				                TTooltip
	UpDown				                TUpDown
	RichEdit				            TRichEdit
	Drag Listbox				        TDragList

 -  Additional ObjectWindows Controls such as glyph buttons, check listboxes 
    and notetabs 
 -  Improved toolbar and statusbar implementation with docking support and 
    new gadgets (See the DOCKING and GADGETS examples under EXAMPLES\OWL\CLASSES)
 -  OCX Container support: OWL's TOleWindow can now host OCX controls. The 
    TOleDialog class provides a mechanism whereby OLE controls are 
    dynamically instantiated when a dialog is created. The OCXDIALOG example 
    illustrates. OWL and OCF also provides methods to catch events and invoke 
    the properties and methods of the controls.

 -  New classes that manage UI drawing
	    UI Helper Class			Draws
	    TUIHandle				Manipulators for on-screen objects
	    TUIBorder				Border styles
	    TUIPart				    Frame and parts of controls
	    TUIFace				    Bitmap in various states (eg. disabled)

 -  Support classes for OS extensions such as WinG, Winsock and MAPI
 -  Improved routing of WM_COMMAND messages
 -  Encapsulation of the Win95 Shell Namespace with easy methods to browse 
    through the hierarchy of objects (files, storage devices, printers, 
    networks etc) on the desktop. 

2. API, implementation and organization changes
This section describes changes that have been made to ObjectWindows
-  Several methods have been updated to use the intrinsic 'bool' type 
   supported by the compiler
-  The virtual method 'Error' of TValidator now takes a 'TWindow*' as 
   parameter
-  TBitmapGadget takes two additonal, optional parameters: 'index' of image 
   and 'flag' indicating whether the image is from the shared TCelArray 
   instance
-  Several methods of TDC which expected a TColor by value now take a 
   'const TColor&' instead
-  Several methods of TEdit are now virtual so they may be overriden by the 
   new TRichEdit class
-  TGadget is now derived from TStreameableBase when compiled in an 
   environment which does not support RTTI
-  TGadgetWindow no longer relies on the WM_SIZE message to layout its 
   gadgets; the WM_WINDOWPOSCHANGING message is used instead
-  The 'margin' paramter of the TGauge constructor now defaults to 1
-  TModule is no longer derived from TEventHandler
-  The 'size' parameter of the TSeparatorGadget now defaults to 0, allowing 
   the gadget to dynamically compute the proper value based on the 
   environment settings.
-  The constructor of TTextGadget now takes an additional, optional TFont* 
   as parameter
-  TWindow's GetParent now returns a 'TWindow*'. The 'GetParentH' returns 
   the parent's window handle
-  TControlGadget no longer defines the 'void Invalidate(bool = true' method
-  TTextGadgets now uses the 'tmMaxCharWidth' data member of the TEXTMETRICS 
   structure to determine its size [instead of 
   ((tmMaxCharWidth+tmAveCharWidth)/2)]
-  TWindow's IdleAction now invokes the 'IdleAction' method of its children.

3. New examples directory structure
The directorires containing ObjectWindows examples have been restructured

Directory structure             Contains
+ BC5
   + Examples		
      + OWL
          + Apps		        Samples using multiple OWL classes
          + Classes		        Smaller samples illustrating one or two classes
          + Experts             Some standard AppExpert-generated applications
          + Games		        Sample Games written with OWL
          + OCF		            OLE Container/Server samples
          + Tasks		        Tasks-oriented samples
          + Tools		        Tools written with ObjectWindows
          + Tutorial		    Examples accompanying OWL Tutorial manual
          + WinAPI		        Examples exploring various Windows API

4. Rebuilding ObjectWindows Library 
The batch file BUILDOWL.BAT located in the SOURCE\OWL directory
illustrates the MAKE options used to build the various versions
of the ObjectWindows Library.  The batch file only utilizes the
basic options. You may run the batch file with additional
parameters such as DIAGS=1 or CODEGUARD=2 to create the
diagnostic or codeguarded versions of the library respectively.
NOTE: The ObjectWindows library now contains two assembly
modules (DIBBLT16.ASM & DIBBLT32.ASM) which require TASM when
rebuilding the library


5. Known problems Some methods of the TUIxxxx helper objects do
not have proper emulation support when running under Windows 3.1.
Subsequently, some classes, such as TSeparatorGadget may not
behave correctly under Windows 3.1.
