[Version]

;version number is recognized as two integer numbers (Major.Minor)
VersionNumber=2.45

[System]

Helpfile=C:\BC5\help\together.hlp

[Notations]

Coad=1
OMT=2
Unified=3

[View]

; Format:
;
; MapXX=Type, Filter, Active, "FilterTitle", "Query", "Command", "Argument"[, "Notation"]
;
; Type ::=Class | Member | Attribute | Link | Operation
; Filter ::=0 | 1
;   determines whether view statement is included in Filter dialog
; Active ::=0 | 1
;   determines whether view is active
; FilterTitle...
;   is the title of corresponding Filter check
; Query ::=...see table of queries...
;   Query is one of the queries that are available for the Type
;   The result of the Query can be true or false.
;   To negate the query result, precede it by "!".
; Command ::=...see table of commands...
;   Command is a graphical-property command which is executed if the Query is true.
;   This command accepts "Argument" as argument.
; Argument ::=...see table of arguments...
;   Additional argument for the Command.
; Notation ::=Coad | OMT | Unified
;   optional parameter determines the notation to which the view is applied.
;   If ommited, the view is applied to any notation

; ------------------------------------------------------------------------

; Queries supported by Types:
; ^^^^^^^

; Query         Applied to:         What is?
;               Class
;                   Member
;                       Attribute
;                           Link
;                               Operation
;
; Equal(Name)   x   x   x   x   x   true if the identifier matches Name
; HasTag(Name)  x   x   x   x   x   true if the identifier has the tag Name in the comment
; HasTagValue(Name,Value)	
;               x   x   x   x   x   true if the identifier has the tag Name with the value Value
; IsClass()     x                   true if class
; IsStruct()    x                   true if structure
; IsTemplate()  x                   true if the class or the member is a template class
; IsNested()    x                   true if the class is nested into another class
; IsExport()    x                   true if the class has the export keyword
; IsObject()    x                   true if the class is an object
; IsAbstract()  x                   true if the class is pure virtual
; IsPublic()        x   x   x   x   true if the member is public
; IsPrivate()       x   x   x   x   true if the member is private
; IsProtected()     x   x   x   x   true if the member is protected
; IsStatic()        x   x   x   x   true if the member is static
; IsConst()         x   x   x   x   true if the member is const
; IsVolatile()      x   x   x   x   true if the member is volatile
; IsAttribute()     x   x   x   x   true if the member is an  attribute
; IsOperation()     x   x   x   x   true if the member is an operation
; IsLink()          x   x   x   x   true if the member is a link
; IsLinkType(Type)  x   x   x   x   true if the member is a link of the specified type
; IsLinkCategory(Type)
;                   x   x   x   x   true if the member is a link of the specified category
; IsRegister()          x           true if the attribute has the register keyword
; IsInline()                    x   true if the operation is inline
; IsConstructorOrDestructor()
;                               x   true if the operation is a constructor or a destructor
; IsConstructor()               x   true if the operation is a constructor
; IsDestructor()                x   true if the operation is a destructor
; IsOperator()                  x   true if the operation is an operator
; IsVirtual()                   x   true if the operation is virtual
; IsPureVirtual()               x   true if the operation is pure virtual
; IsOverloaded()                x   true if the operation is overloaded
; IsInitiator()                 x   true if the operation is an initiator of a scenario
; ------------------------------------------------------------------------

; Commands supported by OME
; ^^^^^^^^
; (Optional command argument is written to the 8th parameter)

; Command            Argument        Comment
;
; Orthogonal         -               Makes link "orthogonal" (as in Coad notation)
; Vertical           -               Makes link "vertical" (as inheritance link)
; Icon               IconArg         Inserts icon to a link
; Role               RoleArg         Inserts role to a link
; Color              ColorSpec       Changes the foreground color
; Background         ColorSpec       Changes the background color
; LineStyle          LineStyleArg    Changes the line style
; Width              Width           Changes the width of line
; FontStyle          FontStyleArg    Changes the font style
; Font               FontSpec        Changes the font
; Hilite             -               Displays the element as highlighted
; Hide               -               Hides the diagram element
; NodeShape          ShapeArg        Defines the shape of node (usually class)
; RoleLabels         CardArg         Inserts Role labels to a link
; Qualifiers         CardArg         Inserts Qualifier labels within rectangles at link edges
; Prefix             symbol          Prefixes the member name with given symbol
; PropertyInBraces   TagName         Insert label "TagName" in { } below the class name
; PropertyIndented   TagName         Insert label "TagName" indented and in italic below the class name
; PropertyInBracesValue
;                    TagName         Insert label "TagName=Value" in { } below the class name
; PropertyIndentedValue
;                    TagName         Insert label "TagName=Value" indented and in italic below the class name
; CardinalityDashed  CardArg         Inserts Coad-style cardinality using CardArg
; CardinalityAsIcons CardArg         Inserts OMT-style cardinality using CardArg
; CardinalityDotsReverse
;                    CardArg         Inserts Unified-style cardinality using CardArg
; ------------------------------------------------------------------------

; Many commands: RoleLabels, Cardinality*, Qualifiers, Prop* specially process its argument.
; If argument is identifier it extract the value of corresponding tag.
; Otherwise, it accepts the argument as directly passed value.
; For the commands effective on links:
;   Given one of 2 ways value is separeted onto 2 parts by slash sign ('/').
;   Each part is the string label to place at one of 2 edges of the link.
;   The place and the order is determined by the command:
;   Cardinality* : above link line.
;   RoleLabels:    below link line
;   Qualifiers:    in the rectangle squeezed to a class.

;
; Argument formats accepted by Commands
; ^^^^^^^^

; Argument      Format                              Examples

; FontSpec      % FontName - Size - Style           "%times-12-i". May be "default"
; FontStyleArg  [b][i][u]                           "i" (italic),
;                                                   "u" (underline),
;                                                   "b" (bold),
;                                                   "ub" (underline bold)
; ColorSpec     [rXXX][gXXX][bXXX]
;               where XXX is in the range 0-255     "r255", "r99g99"
; Width         Number in the range 1-99            "3"
; LineStyleArg  solid | dash | dashdot | dot        "dot"
; IconArg       {S|C|D}{O|A|U}#<StandardIconName>   "CO#Triangle" (for Aggregation)
; RoleArg       {S|D}[G]#<StandardIconName>         "DBG#HalfCircle" (for Inheritance)
; CardArg	the name of cardinality label tag   "Cardinalities"
;               or directly passed string           "0..1/n"
;		(in special format)
; ------------------------------------------------------------------------
; ShapeArg is the parameter for NodeShape command. It can be:
; ^^^^^^^^
; DefaultType
; Note
; RoundRectangle
; RoundRectangleDoubleBorder
; Rectangle
; ShadowedRectangle
; RectangleWithoutOperations
; RectangleImpacted
; StructuredCloud
; ShadowedRectangleImpacted

; ------------------------------------------------------------------------
; IconArg is the parameter for Icon command. It has the following format:
; ^^^^^^^
; {Source|Center|Destination}{Online|Aboveline|Underline}#<StandardIconName>
;
; Only first (capitalized) characters can be specified for icon position.

; <StandardIconName> is a standard icon names from:
; ^^^^^^^^^^^^^^^^^^
;
; Empty
; Triangle
; HalfCircle
; Arrow
; HalfArrow
; Circle
; FilledCircle
; Box
; FilledBox
; BackArrow
; Timeout
; Sync
; Rhomb

; RoleArg is the parameter for Role command. It has the following format:
; ^^^^^^^
; {Source|Destination}[Grouping]#<StandardIconName>
;
; Only first (capitalized) characters can be specified for icon position.

; CardArg is the parameter for CardLabels command.
; ^^^^^^^
; It is the tag name from which cardinality labels will be constructed.
; The format of the value of this tag should be:
; "k..l/m..n", where k, l, m, n can be a digit, 'n', or 'm'
; The contents of the tag value before the slash will be used for label
; at the source node, and contents after the slash will be used for label
; at the destination node.
;========================================================================

; ------------------------------------------------------------------------
; Filters shown in the Filter dialog

; ------------------------------------------------------------------------
; Attribute filters
; Show/Hide all attributes:
Map00=Attribute, 1, 0, "All attributes", "IsAttribute ()", "Hide", ""

; Show/Hide public attributes:
Map01=Attribute, 1, 0, "Private attributes", "IsPrivate()", "Hide", ""

; Show/Hide all operations:
Map10=Operation, 1, 0, "All operations", "IsOperation ()", "Hide", ""

; Show/Hide public operations:
Map11=Operation, 1, 0, "Public operations", "IsPublic()", "Hide", ""

; Show/Hide virtual, inline, static, constant operations:
Map20=Operation, 1, 0, "Virtual operations", "IsVirtual()", "Hide", ""
Map22=Operation, 1, 0, "Static operations", "IsStatic()", "Hide", ""
Map23=Operation, 1, 0, "Constant operations", "IsConst()", "Hide", ""

; Show/Hide Inheritance links:
Map30=Link, 1, 0, "Inheritance links", "IsLinkType (Inheritance)", "Hide", ""

; Show/Hide Aggregation links:
Map31=Link, 1, 0, "Aggregation links", "IsLinkCategory (Aggregation)", "Hide", ""

; Show/Hide Association links:
Map33=Link, 1, 0, "Association links", "IsLinkCategory (Association)", "Hide", ""

; ------------------------------------------------------------------------
; highlighting...

; ------------------------------------------------------------------------
; Class
Map40C=Class, 0, 1, "", "IsClass()", "Background", "r255g255b255"
Map40S=Class, 0, 1, "", "IsStruct()", "Background", "r255g255b255"

; Display user-defined properties
MapProp0=Class, 0, 1, "", "HasTag (Property)", "PropertyInBracesValue", "Property", OMT
MapProp1=Class, 0, 1, "", "HasTag (Property)", "PropertyIndentedValue", "Property", Unified

; Display classnames in bold
Map42=Class, 0, 1, "", "IsStruct()", "Font", "%Arial-11-b"
Map43=Class, 0, 1, "", "IsClass ()", "Font", "%Arial-11-b"
; Display member names in plain
Map44=Attribute, 0, 1, "", "IsAttribute()", "Font", "%Arial-11-"
Map45=Operation, 0, 1, "", "IsOperation ()", "Font", "%Arial-11-"

; Display structures with green border:
Map41g=Class, 0, 1, "", "IsStruct()", "Color", "g99"

; ----------------------------------
; Notation specific nodes

MapCoad45=Class, 0, 1, "", "IsAbstract ()", "NodeShape", "RoundRectangle", Coad
MapCoad46=Class, 0, 1, "", "!IsAbstract ()", "NodeShape", "RoundRectangleDoubleBorder", Coad
MapCoad47=Class, 0, 1, "", "IsStruct ()", "NodeShape", "RoundRectangleDoubleBorder", Coad

MapOMT47=Class, 0, 1, "", "IsClass()", "NodeShape", "Rectangle", OMT
MapOMT48=Class, 0, 1, "", "HasTag (Object)", "NodeShape", "RectangleWithoutOperations", OMT

MapUnified47=Class, 0, 1, "", "IsClass()", "NodeShape", "RectangleImpacted", Unified
MapUnified48=Class, 0, 1, "", "HasTag (Object)", "NodeShape", "StructuredCloud", Unified
MapUnified50=Class, 0, 1, "", "HasTag (Utility)", "NodeShape", "ShadowedRectangleImpacted", Unified

; ------------------------------------------------------------------------
; Members

; Private attributes black, others dark cyan
Map51A=Attribute, 0, 1, "", "!IsPrivate()", "Color", "r0g128b128"

; Private operations black, others dark green
Map51O=Operation, 0, 1, "", "!IsPrivate()", "Color", "r0g128b0"

; Display const members bold
Map52=Member, 0, 1, "", "IsConst()", "FontStyle", "b"

; Display labels of virtual operations with italic font:
Map53=Operation, 0, 1, "", "IsVirtual()", "FontStyle", "i"

; Display operations with scenario underlined
Map55=Operation, 0, 1, "", "IsInitiator()", "FontStyle", "u"

; Display visibility symbols of members in OMT and Unified
;X Map56=Member, 0, 1, "", "IsPublic ()", "Prefix", "+", OMT
Map57=Member, 0, 1, "", "IsPublic ()", "Prefix", "+", Unified

;X Map58=Member, 0, 1, "", "IsProtected ()", "Prefix", "#", OMT
Map59=Member, 0, 1, "", "IsProtected ()", "Prefix", "#", Unified

;X Map60=Member, 0, 1, "", "IsPrivate ()", "Prefix", "-", OMT
Map61=Member, 0, 1, "", "IsPrivate ()", "Prefix", "-", Unified

; Display leading '$' for static members in OMT and Unified
;X Map62=Member, 0, 1, "", "IsStatic ()", "Prefix", "$", OMT
Map63=Member, 0, 1, "", "IsStatic ()", "Prefix", "$", Unified

; ------------------------------------------------------------------------
; Links
; ------------------------------------------------------------------------

; ------------------------------------------------------------------------

; Display association links in blue:
MapLnkCol01=Link, 0, 1, "", "IsLinkCategory (Association)", "Color", "r0g0b255"

; Display aggregation links in dark blue:
MapLnkCol02=Link, 0, 1, "", "IsLinkCategory (Aggregation)", "Color", "r0g0b130"

; Display inheritance links in dark magenta:
MapLnkCol03=Link, 0, 1, "", "IsLinkType (Inheritance)", "Color", "r128g0b128"

; ------------------------------------------------------------------------
; General

; MapLnk00=Link, 0, 1, "", "IsLink ()", "Font", "default"
MapLnk01=Link, 0, 1, "", "IsLink ()", "Width", "2"
MapLnk02=Link, 0, 1, "", "IsLink ()", "Orthogonal", ""

MapLnk03=Link, 0, 1, "", "HasTag (Qualifiers)", "Qualifiers", "Qualifiers", OMT
MapLnk04=Link, 0, 1, "", "HasTag (Qualifiers)", "Qualifiers", "Qualifiers", Unified
MapLnk05=Link, 0, 1, "", "HasTag (Roles)", "RoleLabels", "Roles", Coad
MapLnk06=Link, 0, 1, "", "HasTag (Roles)", "RoleLabels", "Roles", OMT
MapLnk07=Link, 0, 1, "", "HasTag (Roles)", "RoleLabels", "Roles", Unified

; ------------------------------------------------------------------------
; Blueprint specific
; Don't change the order of groups of commands

; default pointer association cardinality: 0..1
MapAsoPtr04=Link, 0, 1, "", "IsLinkType (AssociationPtr)", "CardinalityDashed", "0..1/", Coad
MapAsoPtr03=Link, 0, 1, "", "IsLinkType (AssociationPtr)", "CardinalityAsIcons", "0..1/", OMT
MapAsoPtr05=Link, 0, 1, "", "IsLinkType (AssociationPtr)", "CardinalityDotsReverse", "0..1/", Unified

; default template association cardinality: 0..n
MapAsoMem04=Link, 0, 1, "", "IsLinkType (AssociationTmpl)", "CardinalityDashed", "0..n/", Coad
MapAsoMem03=Link, 0, 1, "", "IsLinkType (AssociationTmpl)", "CardinalityAsIcons", "0..n/", OMT
MapAsoMem05=Link, 0, 1, "", "IsLinkType (AssociationTmpl)", "CardinalityDotsReverse", "0..n/", Unified


; default template aggregation cardinality: 0..n
MapAggMem04=Link, 0, 1, "", "IsLinkType (AggregationTmpl)", "CardinalityDashed", "1..n/", Coad
MapAggMem03=Link, 0, 1, "", "IsLinkType (AggregationTmpl)", "CardinalityAsIcons", "1..n/", OMT
MapAggMem05=Link, 0, 1, "", "IsLinkType (AggregationTmpl)", "CardinalityDotsReverse", "1..n/", Unified


; Display cardinality labels on links, that has tag "Cardinalities". Take a label from the tag value.
MapCardCoad=Link, 0, 1, "", "HasTag (Cardinalities)", "CardinalityDashed", "Cardinalities", Coad
MapCardOMT=Link, 0, 1, "", "HasTag (Cardinalities)", "CardinalityAsIcons", "Cardinalities", OMT
MapCardUnified=Link, 0, 1, "", "HasTag (Cardinalities)", "CardinalityDotsReverse", "Cardinalities", Unified

; Display Inheritance with Vertical lines, and
; HalfCircle icon below line near Destination class:
MapInh01=Link, 0, 1, "", "IsLinkType (Inheritance)", "Vertical", ""
MapInh02=Link, 0, 1, "", "IsLinkType (Inheritance)", "Role", "DBG#HalfCircle", Coad
MapInh04=Link, 0, 1, "", "IsLinkType (Inheritance)", "Role", "DBG#Triangle", OMT
MapInh05=Link, 0, 1, "", "IsLinkType (Inheritance)", "Role", "DBG#", Unified
MapInh06=Link, 0, 1, "", "IsLinkType (Inheritance)", "Icon", "DO#ThickArrow", Unified


; display aggregation links with notation specific icons...
; Triangle icon On line in the Center between classes
MapAgg00=Link, 0, 1, "", "IsLinkCategory (Aggregation)", "Vertical", ""
MapAgg01=Link, 0, 1, "", "IsLinkCategory (Aggregation)", "Icon", "CO#Triangle", Coad
MapAgg02=Link, 0, 1, "", "IsLinkCategory (Aggregation)", "Icon", "SO#Rhomb", OMT
MapAgg03=Link, 0, 1, "", "IsLinkCategory (Aggregation)", "Icon", "DO#FilledCircle", OMT
MapAgg04=Link, 0, 1, "", "IsLinkCategory (Aggregation)", "Icon", "SO#Rhomb", Unified

[Blueprints]

; Format:
;
; BlueprintXX=Type, "MenuName", "DeclarationTemplate", "DefinitionTemplate", LinkKind, LinkCategory, "IconId", "IconLabel", "ToolTip"
;
; Type ::=Class | Attribute | Operation
;   determines the type of model object
; MenuName ...
;   ...is displayed in Code Editor's dialogs in the field 'Blueprint'
; DeclarationTemplate ...
;   ...is used for generating the declaration source code of the model object
; DefinitionTemplate ...
;   ...is used for generating the definition source code of the model object
;   about templates see below
; LinkKind ::=<user-defined-identifier>
;   determines the kind of link corresponding to the model object (attribute)
;   LinkKind is in correspondence to the attribute due to Parser recognizing.
; LinkCategory ::=Aggregation | Association | <user-defined-identifier>
;   determines the category of link corresponding to the model object (attribute)
;   LinkCategory is in correspondence to the attribute due to Parser recognizing.
; IconId ::=<Signature> | <ColorPallete>
;   ...is the mnemonic identifier to determine one of the predefined icons to place into the Icon tool bar
;   <ColorPallete> is the number from 0 to 5.
;   <Signature> ::=<ObjectId> | <LinkId>
;     <ObjectId> ::=C | B | A | O
;     ... which means: Class, aBstract, Attribute, Operation
;     <LinkId> ::=<LinkCategory><MultiPlicity>
;     <LinkCategory> ::=I | S | G
;     ... which means: Inheritance, aSsociation, aGgregation
;     <MultiPlicity> ::=O | _ | Z | N
;     ... which means: Optional (0..1), Only (1..1), Zero to N (0..n), maNy (1..n)
; IconLabel
;   ..is the string labelled the icon in the Icon ToolBar
; ToolTip
;   ...si the string shown in status bar when the mouse comes onto the toolbar-icon

; Templates are the C-strings in quotes. They consist of constant text and Code-Editor variables.
; ^^^^^^^^^
; Variables         Expanded to
; ^^^^^^^^^
; %Name%            name of the object
; %ClassName%       name of the class (usually used for members)
; %Type%            type (for attributes and operations)
; %Dst%             name of the destination class (for links)
; %Dimension%       dimension (for attributes)
; %Arguments%       arguments within '()' (for operations)
; %PostArguments%   modifiers, or initialization list after ')' (for operations)
; %Body%            body of operation
; %FILEMACRO%       macro identifier=%ClassName%_HPP (for classes)
; %IncludeStm%      include statement #include "HeaderFileName" (for classes)
; %ClassId%         unique class identifier (for classes)
; %Comment%         design comment
; %Declaration%     contents of Declaration field of the dialog quotably (for attributes & operations)
; %Any%             <none>
;
; %Any% is a special variable for Parser to recognize links. It matches any C++ token.
; It is not used in creative Code Editor blueprints

; ------------------------------------------------------------------------
; Classes

; Abstract class - the class with pure virtual operation

Class00=Class, "Abstract", "#ifndef %FILEMACRO%\n#define %FILEMACRO%\n//-----------------------------------------------------------------\n//\n//-----------------------------------------------------------------\n\t%Comment%\nclass %ClassName%\n{\npublic:\n\tvirtual ~%ClassName%() = 0; \n};\n#endif\n", "%IncludeStm%\n\n/**# implementation %ClassName%:: id(%ClassId%) \n*/", "B0", "", "Abstract class - class with pure virtual operation"

; Class

Class01=Class, "Class",     "#ifndef %FILEMACRO%\n#define %FILEMACRO%\n//-----------------------------------------------------------------\n//\n//-----------------------------------------------------------------\n\t%Comment%\nclass %ClassName%\n{\npublic:\n};\n#endif\n", "%IncludeStm%\n\n/**# implementation %ClassName%:: id(%ClassId%) \n*/", "C0", "", "Class"

; ------------------------------------------------------------------------
; Members

; Generic attribute

Attribute00=Attribute, "Attribute", "%Comment%\n\t%Type% %Name%%Dimension%", "%Type% %ClassName%::%Name%%Dimension%", "A0", "", "Default attribute"

; Generic operation

Operation00=Operation, "Operation", "%Comment%\n\t%Type% %Name%%Arguments% %PostArguments%", "%Type% %ClassName%::%Name% %Arguments% %PostArguments%\n{\n%Body%\n}", "O0", "", "Default operation"

; ------------------------------------------------------------------------
; Attribute-as-Links, Associations
; uncomment for additional associations

; association 0..1
; p=Attribute, "Association 0..1", "%Comment%\n\t%Dst% * %Name%", "",,, "SO0", "", "Association, 0 to 1, implemented as pointer to destination class"

; association 1..1
; po=Attribute, "Association 1..1", "/**#: [Cardinalities = \"1..1/\"]*/\n\t%Dst% * %Name%", "",,, "S_0", "", "Association, 1 to 1, implemented as annotated pointer to destination class"

; association 0..n
vp=Attribute, "Association 0..n", "%Comment%\n\tvector <%Dst% *> %Name%", "",,, "SZ0", "", "Association, 0 to n, implemented as vector of pointers"

; association 1..n
; vp1n=Attribute, "Association 1..n", "/**#: [Cardinalities = \"1..n/\"]*/\n\tvector <%Dst% *> %Name%", "",,, "SN0", "", "Association, 1 to n, implemented as annotated vector of pointers"

; ------------------------------------------------------------------------
; Attribute-as-Links, Aggregations
; uncomment for additional aggregations

; aggregation 0..1
; v01=Attribute, "Aggregation 0..1", "/**#: [Cardinalities = \"0..1/\"]*/\n\tvector <%Dst%> %Name%", "",,, "GO0", "", "Aggregation, 0 to 1, implemented as annotated vector"

; aggregation 1..1
; v11=Attribute, "Aggregation 1..1", "/**#: [Cardinalities = \"1..1/\"]*/\n\tvector <%Dst%> %Name%", "",,, "G_0", "", "Aggregation, 1 to 1, implemented as annotated vector"

; aggregation 0..n
; v1n=Attribute, "Aggregation 0..n", "/**#: [Cardinalities = \"0..n/\"]*/\n\tvector <%Dst%> %Name%", "",,, "GZ0", "", "Aggregation, 0 to n, implemented as annotated vector"

; aggregation 1..n
v=Attribute, "Aggregation 1..n", "%Comment%\n\tvector <%Dst%> %Name%", "",,, "GN0", "", "Aggregation, 1 to n, implemented as vector"

; ------------------------------------------------------------------------
; Parser only

; pointers to destination class -- parser only
match_p=Attribute, "", "%Dst% * %Name%", "", AssociationPtr, Association

; pointers as template argument -- parser only
match_tp=Attribute, "", "%Any% <%Dst% *> %Name%", "", AssociationTmpl, Association

; members as template argument -- parser only
match_tm=Attribute, "", "%Any% <%Dst%> %Name%", "", AggregationTmpl, Aggregation

[Tags]

; Format:
;
; TagXX=Type, "TagName", "TagFormat" [, <InitialValue>]
;
; Type ::=Ident | Class | Member | Attribute | Operation
;   determines to which Type of model object the tag may be applied
;   Ident referred to any object, including Class, Attribute and Operation
;   Member referred to Attribute and Operation
; TagName is displayed in Code Editor dialogs as the title of tag,
;   and is inserted as lvalue in design comment:
;   /**#: [TagName=TagValue] */
;   where symbols /, #, :, , [,=and ] is typed quotly
;   and TagValue format is determined by TagFormat.
; TagFormat ::=%s | %s<Length> | %sw | %sm | %b | %#<List> | %f | %m | %r
;   where: <Length> is the integer number
;          <List> ::=Ident1[,Ident2]...
; ------------------------------------------------------------------------

; TagFormat     Value                       Control element in dialog
;
; %s            C-string in quotes          Edit box: single line
; %s<Length>    -"- at least <Length>       Edit box: validating length
;               characters
; %sw           One word in quotes          Edit box: validating for single word
; %sm           C-string in quotes          Edit box + Edit button to invoke multiline editbox
; %b            [TagName] for true          Check box
;               <empty> for false
; %#<List>      Identifier from List        Drop-down combobox
; %f            File name in quotes         Edit box + Browse button to invoke File dialog
;                                           Also, double-click opens the file
; %m            "k..l/m..n"                 2 edit boxes, switching by press '/', validating format.
;               k,l,m,n is a digit or 'n'
; %r            "string1/string2"           2 edit boxes, switching by press '/'.
;
;========================================================================

; Some tags has predefined sense and affect on how to diaplay the model object
; ------------------------------------------------------------------------
; Commenting any object

; Alias name is displayed instead identifier
Tag01=Ident, "Alias", "%s"

; Description is free multi line comment
Tag02=Ident, "Description", "%sm"

; Note is displayed as label in rectangle (for classes)
Tag03=Ident, "Note", "%sm"

; Level of development phase
Tag04=Ident, "Level","%#Analysis,Design,Implementation"

; ------------------------------------------------------------------------
; Commenting classes
TagCl01=Class, "Stereotype", "%s"
TagCl02=Class, "Utility", "%b"
TagCl03=Class, "Object", "%b"
TagCl14=Class, "Document", "%f"
TagCl15=Class, "Property", "%s"

; ------------------------------------------------------------------------
; Commenting attributes
TagAt01=Attribute, "Label", "%s"

; Cardinalities is the cardinality label
TagAt02=Attribute, "Cardinalities", "%m"
TagAt03=Attribute, "Roles", "%r"
TagAt04=Attribute, "Qualifiers", "%r"

; ------------------------------------------------------------------------
; Commenting operations
TagOp01=Operation, "Inputs", "%s"
TagOp02=Operation, "Output", "%s"

[ScenarioEditor]

; DefaultFont ::=%fontName-fontSize-fontStyle
;   fontName  ::=helvetica | courier | times
;   fontStyle ::=[b][i][u]
;   b - bold, i -italic, u - underline
DefaultFont=%Arial-11-

; if ConfirmCopy, user is asked to confirm copying
ConfirmCopy=Yes

; if ConfirmMove, user is asked to confirm moving
ConfirmMove=Yes

; if ConfirmDelete, user is asked to confirm deletion
ConfirmDelete=Yes

; if ConfirmHide, user is asked to confirm removing (hiding) from scenario
ConfirmHide=Yes

; if KeyDeclarationInStatusLine, the declaration of a focused operation
; is displayed in status bar of Borland IDE
KeyDeclarationInStatusLine=Yes

; MemberDisplayType ::=None | Cpp | Unified
;  None -       member type is not displayed
;  Cpp  -       member type is displayed in C++ format: <Type> <Name>
;  Unified -    member type is displayed in the Unified format: <Name>:<Type>
;  (applied to operations only, of course)
MemberDisplayType=None

; Zoom ratio in % for printing
PrintZoom=100

; if ShowPrintGrid, the grid lines between print pages is displayed on the screen
ShowPrintGrid=No

[CodeEditor]

; SourcePrologue defines the string inserted in the beginning of each Source file
; when it is created.
SourcePrologue="// -----------------\n#include <vector>  \nusing namespace std;\n//  ----------------\n\n"

; HeaderPrologue defines the string inserted in the beginning of each Header file
; when it is created.
HeaderPrologue=""

;FileNameLengthLimit ::=0 | 1 | <n>, where <n> is in the range from 8 to 255
;   0 - use standard DOS file names (8 - names + 3 - extension)
;   1 - use long file names, supported in Windows/NT and Windows 95
;   <n> - is the user-defined length limit for file names
; FileNameLengthLimit determines initial state of the check "Use long file name"
; and maximum length of automatically constructed file name in the Class dialog.
FileNameLengthLimit=255

; set default extension for "Header file" name of the Class dialog
DefaultHeaderExtension=.h

; set default extension for "Source file" name of the Class dialog
DefaultSourceExtension=.cpp

; if DefaultRemoveFromProject, check box "Remove file from project" is
; initially checked in the Delete class dialog
DefaultRemoveFromProject=Yes

; if DefaultRemoveFile, check box "Remove file from disk" is
; initially checked in the Delete class dialog
DefaultRemoveFile=Yes

; if DisplayDefaultType=No, the Attribute and Operation dialogs
; shows only member name instead of full declaration in the "Declaration" field
; for default member types: "int xxxxxxx;" and "void xxxxxxx();".
DisplayDefaultType=No

; String delimiters, inserted between similar source code construction.
; The format is C-string in quotes.

;  between declarations of classes (1 empty line between)
BlanksBetweenClassDecl="\n\n"

;  between declarations of members (from new line and indented 1 tab)
BlanksBetweenDecls="\n\t"

;  between definitions of members (1 empty line between)
BlanksBetweenDefs="\n\n"

;  between items in declaration list via comma. (like list base classes)
;  ( 1 space after comma before next item)
BlanksBetweenCommaList=" "

; if ReformatAfterCodeEditor, source Code Reformatter is automatically called
; after each Code Editor action.
; Manual call: Shift-Ctrl-F on the project node or in the Text Editor
ReformatAfterCodeEditor=0

; Allow Code Editor to modify source files located outside project subdirectory.
ModifyFilesOutsideProject=0

[PrintServer]

; Header and Footer are the strings (without quotes) printed in corresponding positions
; A string may contain variables:
;   %P - page number
;   %D - expanded to current date
;   %F - expanded to View node file name
Header=%F
Footer=Page %P

; Margin offsets from the corresponding page edge.
;  " - inches
; cm - centimeters
; mm - millimeters
LeftMargin=1"
RightMargin=1"
TopMargin=1"
BottomMargin=1"

; if PrintEmpty, empty pages are printed (not supported)
PrintEmpty=1

; if Border, the thin border is printed around the page
Border=1

; Header and footer fonts
; Format:
; HeaderFont ::="FaceName", <Height>, <Width>, <Escapement>, <Orientation> , <Weight>, <PitchAndFamily>, <Italic>, <Underline>, <Strikeout>
; Missed parameters mean default values (leave comma within the string)
HeaderFont="Times New Roman",20,0,0,0,700,18,0,0,0
FooterFont="Times New Roman",17,0,0,0,700,18,255,1,0

[Parser]

; if SkipStandardDirectories, the include files placed in the standard include directories
; are not processed, and therefore the classes declared in them are not included into Object Model
; Standard include directories are defined in Options | Project | Include path
SkipStandardDirectories=YES

; Explicit list of directories to be excluded from processing include files.
; Actually it is more significant for Parser then SkipStandardDirectories.
SkipDirectories=C:\BC5\include

; if SkipStructs, structures are not included into Object Model
SkipStructs=NO

; if SkipEnums, enumerated types are not processed
SkipEnums=YES

; if SubstituteMacros, macro variables are substituted in the processed source code
SubstituteMacros=NO

[InformationExport]

; Default Inforamtion Export templates directory
TemplateDir=..\TOGETHER\IE

; Custom execute values
Custom1=hcw /a /c /e /m %helpproject%; #helpview %fullpath(output)%\%name(output)%.hlp
Custom2=winword %output%
LastTemplate=
LastOutput=
LastOptions=4
LastSave=0

[ObjectModelEditor]

; DefaultFont ::=%fontName-fontSize-fontStyle
;   fontName  ::=helvetica | courier | times
;   fontStyle ::=[b][i][u]
;   b - bold, i -italic, u - underline
DefaultFont=%Arial-9-

; if LayoutSemiAutomatic, dragging an object is followed by layouting
;  to make sure links looks good
LayoutSemiAutomatic=1

; if ShowModelComponents, the name of the subtarget of a class is displayed below the class name
ShowModelComponents=1

; if ShowLinkAttributes, the Attributes-as-Links is displayed among attributes
ShowLinkAttributes=0

; if ShowTemplateArgs, the arguments of a template class is displayed at the right upper corner of the class
ShowTemplateArgs=1

; if ShowTypeAsLinkLabel, the type of Attribute-as-Link is displayed as a label on the link near the source
ShowTypeAsLinkLabel=0

; if ShowForward option is on, the only forward reffered but not declared classes are displayed gray,
; otherwise they are not displayed.
ShowForward=1

; if JoinLinks, a number of same kind links between the same two classes are joined into one link.
JoinLinks=1

; MemberDisplayType ::=Auto | None | Cpp | Unified
;  Auto -       member type is dependent on notation: Coad=> None, OMT and Unified => Unified
;  None -       member type is not displayed
;  Cpp  -       member type is displayed in C++ format: <Type> <Name>
;  Unified -    member type is displayed in the Unified format: <Name>:<Type>
MemberDisplayType=Auto

; Zoom ratio in % for printing
PrintZoom=100

; if ShowPrintGrid, the grid lines between print pages is displayed on the screen
ShowPrintGrid=0

; if KeyDeclarationInStatusLine, the declaration of a focused element
; is displayed in status bar of Borland IDE
KeyDeclarationInStatusLine=Yes

; if ConfirmCopy, user is asked to confirm copying
ConfirmCopy=1

; if ConfirmMove, user is asked to confirm moving
ConfirmMove=1

; if ConfirmDelete, user is asked to confirm deletion
ConfirmDelete=1

; if ShowOperationParameters option is on, the operations are displayed along with their parameters.
ShowOperationParameters=Auto

; The maximum number of characters in class labels
MaximumClassLabelLength=20;

[Formatter]

; Typename options are accomodative. They define the identifiers which are enforced to be a type.
Typename=string
Typename=DEFINE_RESPONSE_TABLE
Typename=DECLARE_RESPONSE_TABLE
Typename=HWND
Typename=vector
;       End of user type names
BracesAlignType2=Yes
BracesAlignType3=Yes
CodeLineCommentColumn=41
DeclarationIndent=8
DeclLineCommentColumn=41
IndentationSpaces=4
MaximumLineLength=132
PreprocessorElseEndifCommentColumn=41
SpacesAfterCaseCode=4
TabSize=8
UseTabsForSpaces=No

[FindDialog]
LastText=
LastOptions=3d52

