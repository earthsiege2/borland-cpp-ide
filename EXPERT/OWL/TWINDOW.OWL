<<[H]TWindow [[TWindow]]
##{hheader.snp}
##<<TApplication QUERY_FILENAME_CPP [[Filename]]
#include "[[Filename]].rh"            // Definition of all resources.


//{{TWindow = [[TWindow]]}}
class [[TWindow]] : public TWindow {
  public:
    [[TWindow]](TWindow* parent, const char far* title = 0, TModule* module = 0);
    virtual ~[[TWindow]]();
##--BEGIN-- @OPT_APPL_PRINTING

//{{[[TWindow]]VIRTUAL_BEGIN}}
  public:
    virtual void Paint(TDC& dc, bool erase, TRect& rect);
##:DBVirtual(\\"[[TWindow]]", "Paint")
//{{[[TWindow]]VIRTUAL_END}}
//{{[[TWindow]]RSP_TBL_BEGIN}}
  protected:
    void EvGetMinMaxInfo(MINMAXINFO far& minmaxinfo);
//{{[[TWindow]]RSP_TBL_END}}
DECLARE_RESPONSE_TABLE([[TWindow]]);
##--END-- @OPT_APPL_PRINTING
};    //{{[[TWindow]]}}
##{hfooter.snp}
>>[H]TWindow [[TWindow]]


<<[CPP]TWindow [[TWindow]]
##{cheader.snp}
#include <owl/pch.h>

##<<TApplication QUERY_FILE_H [[FileName]]
#include "[[FileName]]"
##--BEGIN-- !@OPT_APPL_DOCVIEW
##  --BEGIN-- @QUERY_APPL_MODEL == VALUE_MDI
##:     <<TMDIChild QUERY_WIND_CLIENT [[Client]]
##:     <<*Client QUERY_FILE_H [[FileName]]
#include "[[FileName]]"
##  --END-- @QUERY_APPL_MODEL == VALUE_MDI
##  --BEGIN-- @QUERY_APPL_MODEL == VALUE_SDI

##  --END-- @QUERY_APPL_MODEL == VALUE_SDI
##--END-- !@OPT_APPL_DOCVIEW
##QUERY_FILE_H [[FileName]]
#include "[[FileName]]"

#include <stdio.h>


//{{[[TWindow]] Implementation}}


##--BEGIN-- @OPT_APPL_PRINTING
##@QUERY_APPL_COMMENT == VALUE_VERBOSE 4
//
// Build a response table for all messages/commands handled
// by [[TWindow]] derived from TWindow.
//
DEFINE_RESPONSE_TABLE1([[TWindow]], TWindow)
//{{[[TWindow]]RSP_TBL_BEGIN}}
##:DBResponse(\\"[[TWindow]]", "", "", "WM_GETMINMAXINFO", "")
  EV_WM_GETMINMAXINFO,
//{{[[TWindow]]RSP_TBL_END}}
END_RESPONSE_TABLE;


##--END-- @OPT_APPL_PRINTING
##--BEGIN-- @QUERY_APPL_COMMENT == VALUE_VERBOSE
//--------------------------------------------------------
// [[TWindow]]
// ~~~~~~~~~~
// Construction/Destruction handling.
//
##--END-- @QUERY_APPL_COMMENT == VALUE_VERBOSE
[[TWindow]]::[[TWindow]](TWindow* parent, const char far* title, TModule* module)
:
  TWindow(parent, title, module)
{
##QUERY_WIND_STYLE [[StyleAttributes]]
##StyleAttributes != "" 3
  // Override the default window style for TWindow.
[[StyleAttributes]]

##{wndbkgd.snp}
  // INSERT>> Your constructor code here.

}


[[TWindow]]::~[[TWindow]]()
{
  Destroy();

  // INSERT>> Your destructor code here.

}
##--BEGIN-- @OPT_APPL_PRINTING == TRUE


##@QUERY_APPL_COMMENT == VALUE_VERBOSE 3
//
// Paint routine for Window, Printer, and PrintPreview for an TWindow client.
//
void [[TWindow]]::Paint(TDC&, bool, TRect& rect)
{
##<<TApplication QUERY_CLASS_NAME [[TApplication]]
  [[TApplication]]* theApp = TYPESAFE_DOWNCAST(GetApplication(), [[TApplication]]);
  if (theApp) {
##:@QUERY_APPL_COMMENT == VALUE_VERBOSE 2
    // Only paint if we're printing and we have something to paint, otherwise do nothing.
    //
    if (theApp->Printing && theApp->Printer && !rect.IsEmpty()) {
##:@QUERY_APPL_COMMENT == VALUE_VERBOSE 3
      // Use pageSize to get the size of the window to render into.  For a Window it's the client area,
      // for a printer it's the printer DC dimensions and for print preview it's the layout window.
      //
      TSize   pageSize(rect.right - rect.left, rect.bottom - rect.top);

      TPrintDialog::TData& printerData = theApp->Printer->GetSetup();

##:@QUERY_APPL_COMMENT == VALUE_VERBOSE 2
      // Compute the number of pages to print.
      //
      printerData.MinPage = 1;
      printerData.MaxPage = 1;

      // INSERT>> Special printing code goes here.

    }
    else {
      // INSERT>> Normal painting code goes here.

    }
  }
}


void [[TWindow]]::EvGetMinMaxInfo(MINMAXINFO far& minmaxinfo)
{
##<<TApplication QUERY_CLASS_NAME [[TApplication]]
  [[TApplication]]* theApp = TYPESAFE_DOWNCAST(GetApplication(), [[TApplication]]);
  if (theApp) {
    if (theApp->Printing) {
      minmaxinfo.ptMaxSize = TPoint(32000, 32000);
      minmaxinfo.ptMaxTrackSize = TPoint(32000, 32000);
      return;
    }
  }
  TWindow::EvGetMinMaxInfo(minmaxinfo);
}
##--END-- @OPT_APPL_PRINTING == TRUE
>>[CPP]TWindow [[TWindow]]
