'////////////////////////////////////////////////////////////////////////////////////   
'   Expert PROJECT
'   Expert - (C) Copyright 1993 by Borland International, Inc. All Rights Reserved.
'
'   SUBSYSTEM:    OWL code template
'   FILE:         TMDIChild.OWL
'
'
'   OVERVIEW
'   ========
'   Definition of all OWL classes when can be generated by  the CODEGEN phase of
'   AppGen and ClassExpert.  AppGen generates when all options have been selected
'   and multiple classes are generated.  ClassExpert uses the CODEGEN phase when
'   a new class is generated.
'////////////////////////////////////////////////////////////////////////////////////   


<<[H]TMDIChild [[TMDIChild]]
##{hheader.snp}
#include <owl\owlpch.h>
#pragma hdrstop

#include <owl\editfile.h>
#include <owl\listbox.h>

##<<TApplication QUERY_FILENAME_CPP [[Filename]]
#include "[[Filename]].rh"            // Definition of all resources.


//{{TMDIChild = [[TMDIChild]]}}
class [[TMDIChild]] : public TMDIChild {
public:
    [[TMDIChild]] (TMDIClient &parent, const char far *title, TWindow *clientWnd, BOOL shrinkToClient = FALSE, TModule* module = 0);
    virtual ~[[TMDIChild]] ();
##--BEGIN-- @OPT_APPL_PRINTING

//{{[[TMDIChild]]VIRTUAL_BEGIN}}
public:
    virtual void Paint (TDC& dc, BOOL erase, TRect& rect);
##:DBVirtual(\\"[[TMDIChild]]", "Paint")
//{{[[TMDIChild]]VIRTUAL_END}}
//{{[[TMDIChild]]RSP_TBL_BEGIN}}
protected:
    void EvGetMinMaxInfo (MINMAXINFO far& minmaxinfo);
//{{[[TMDIChild]]RSP_TBL_END}}
DECLARE_RESPONSE_TABLE([[TMDIChild]]);
##--END-- @OPT_APPL_PRINTING
};    //{{[[TMDIChild]]}}
##{hfooter.snp}
>>[H]TMDIChild [[TMDIChild]]


'
' TMDIChild CPP file.
'
<<[CPP]TMDIChild [[TMDIChild]]
##{cheader.snp}
#include <owl\owlpch.h>
#pragma hdrstop

##<<TApplication QUERY_FILE_H [[FileName]]
#include "[[FileName]]"
##QUERY_FILE_H [[FileName]]
#include "[[FileName]]"

#include <stdio.h>


//{{[[TMDIChild]] Implementation}}


##--BEGIN-- @OPT_APPL_PRINTING
##--BEGIN-- @QUERY_APPL_COMMENT == VALUE_VERBOSE
//
// Build a response table for all messages/commands handled
// by [[TMDIChild]] derived from TMDIChild.
//
##--END-- @QUERY_APPL_COMMENT == VALUE_VERBOSE
DEFINE_RESPONSE_TABLE1([[TMDIChild]], TMDIChild)
//{{[[TMDIChild]]RSP_TBL_BEGIN}}
##:DBResponse(\\"[[TMDIChild]]", "", "", "WM_GETMINMAXINFO", "")
    EV_WM_GETMINMAXINFO,
//{{[[TMDIChild]]RSP_TBL_END}}
END_RESPONSE_TABLE;


##--END-- @OPT_APPL_PRINTING
##--BEGIN-- @QUERY_APPL_COMMENT == VALUE_VERBOSE
//////////////////////////////////////////////////////////
// [[TMDIChild]]
// ==========
// Construction/Destruction handling.
##--END-- @QUERY_APPL_COMMENT == VALUE_VERBOSE
[[TMDIChild]]::[[TMDIChild]] (TMDIClient &parent, const char far *title, TWindow *clientWnd, BOOL shrinkToClient, TModule *module)
##QUERY_WIND_CLIENT [[Client]]
##--BEGIN-- !@OPT_APPL_DOCVIEW
##Client == "TEditFile"
    : TMDIChild (parent, title, clientWnd == 0 ? new TEditFile(0, 0, 0) : clientWnd, shrinkToClient, module)
##Client == "TListBox"
    : TMDIChild (parent, title, clientWnd == 0 ? new TListBox(0, 0, 0, 0, 100, 100) : clientWnd, shrinkToClient, module)
##Client == "TWindow"
    : TMDIChild (parent, title, clientWnd == 0 ? new TWindow(0, "") : clientWnd, shrinkToClient, module)
##--END-- !@OPT_APPL_DOCVIEW
##@OPT_APPL_DOCVIEW
    : TMDIChild (parent, title, clientWnd, shrinkToClient, module)
{
##QUERY_WIND_STYLE [[StyleAttributes]]
##StyleAttributes != "" 3
    // Override the default window style for TMDIChild.
[[StyleAttributes]]

##QUERY_WIND_BACKGRND [[BackgroundColor]]
##BackgroundColor != "" 3
    // Change the window's background color
    SetBkgndColor([[BackgroundColor]]);

    // INSERT>> Your constructor code here.

}


[[TMDIChild]]::~[[TMDIChild]] ()
{
    Destroy();

    // INSERT>> Your destructor code here.

}
##--BEGIN-- @OPT_APPL_PRINTING == TRUE


##--BEGIN-- @QUERY_APPL_COMMENT == VALUE_VERBOSE
//
// Paint routine for Window, Printer, and PrintPreview for an TEdit client.
//
##--END-- @QUERY_APPL_COMMENT == VALUE_VERBOSE
##QUERY_WIND_CLIENT [[WindowClient]] 2
##WindowClient != "TWindow"
void [[TMDIChild]]::Paint (TDC& dc, BOOL, TRect& rect)
##WindowClient == "TWindow"
void [[TMDIChild]]::Paint (TDC&, BOOL, TRect& rect)
{
##<<TApplication QUERY_CLASS_NAME [[TApplication]]
    [[TApplication]] *theApp = TYPESAFE_DOWNCAST(GetApplication(), [[TApplication]]);
    if (theApp) {
##:@QUERY_APPL_COMMENT == VALUE_VERBOSE
        // Only paint if we're printing and we have something to paint, otherwise do nothing.
        if (theApp->Printing && theApp->Printer && !rect.IsEmpty()) {
##:@QUERY_APPL_COMMENT == VALUE_VERBOSE 2
            // Use pageSize to get the size of the window to render into.  For a Window it's the client area,
            // for a printer it's the printer DC dimensions and for print preview it's the layout window.
            TSize   pageSize(rect.right - rect.left, rect.bottom - rect.top);

##QUERY_WIND_CLIENT [[WindowClient]]
##--BEGIN-- TRUE
##--BEGIN-- @OPT_APPL_DOCVIEW
##:     OPT_DV_RESET
##:     OPT_DV_NEXT
##:     QUERY_DV_TVIEW WindowClient
##*
##--END-- @OPT_APPL_DOCVIEW
##--BEGIN-- (WindowClient == "TEditFile") || (WindowClient == "TListBox") || (WindowClient == "TEditView") || (WindowClient == "TListView")
            HFONT   hFont = (HFONT)GetClientWindow()->GetWindowFont();
            TFont   font("Arial", -12);
            if (hFont == 0)
              dc.SelectObject(font);
            else
              dc.SelectObject(TFont(hFont));
    
            TEXTMETRIC  tm;
            int fHeight = (dc.GetTextMetrics(tm) == TRUE) ? tm.tmHeight + tm.tmExternalLeading : 10;
    
##:@QUERY_APPL_COMMENT == VALUE_VERBOSE
            // How many lines of this font can we fit on a page.
            int linesPerPage = MulDiv(pageSize.cy, 1, fHeight);
            if (linesPerPage) {    
                TPrintDialog::TData &printerData = theApp->Printer->GetSetup();

                int maxPg = 1;

##:@QUERY_APPL_COMMENT == VALUE_VERBOSE
                // Get the client class window (this is the contents we're going to print).
                TEdit *clientEditWindow = 0;
                TListBox *clientListWindow = 0;

                clientEditWindow = TYPESAFE_DOWNCAST(GetClientWindow(), TEdit);
                if (clientEditWindow)
                    maxPg = ((clientEditWindow->GetNumLines() / linesPerPage) + 1.0);
                else {
                    clientListWindow = TYPESAFE_DOWNCAST(GetClientWindow(), TListBox);
                    if (clientListWindow)
                        maxPg = ((clientListWindow->GetCount() / linesPerPage) + 1.0);
                }

##:@QUERY_APPL_COMMENT == VALUE_VERBOSE
                // Compute the number of pages to print.
                printerData.MinPage = 1;
                printerData.MaxPage = maxPg;

##:@QUERY_APPL_COMMENT == VALUE_VERBOSE
                // Do the text stuff:
                int     fromPage = printerData.FromPage == -1 ? 1 : printerData.FromPage;
                int     toPage = printerData.ToPage == -1 ? 1 : printerData.ToPage;
                char    buffer[255];
                int     currentPage = fromPage;

                while (currentPage <= toPage) {
                    int startLine = (currentPage - 1) * linesPerPage;
                    int lineIdx = 0;
                    while (lineIdx < linesPerPage) {
##:@QUERY_APPL_COMMENT == VALUE_VERBOSE
                        // If the string is no longer valid then there's nothing more to display.
                        if (clientEditWindow) {
                            if (!clientEditWindow->GetLine(buffer, sizeof(buffer), startLine + lineIdx))
                                break;
                        }
                        if (clientListWindow) {
                            if (clientListWindow->GetString(buffer, startLine + lineIdx) < 0)
                                break;
                        }
                        dc.TabbedTextOut(TPoint(0, lineIdx * fHeight), buffer, lstrlen(buffer), 0, NULL, 0);
                        lineIdx++;
                    }
                    currentPage++;
                }
            }
##--END-- (WindowClient == "TEditFile") || (WindowClient == "TListBox") || (WindowClient == "TEditView") || (WindowClient == "TListView")
##--END-- TRUE
        }
    }
}


void [[TMDIChild]]::EvGetMinMaxInfo (MINMAXINFO far& minmaxinfo)
{
##<<TApplication QUERY_CLASS_NAME [[TApplication]]
    [[TApplication]] *theApp = TYPESAFE_DOWNCAST(GetApplication(), [[TApplication]]);
    if (theApp) {
        if (theApp->Printing) {
            minmaxinfo.ptMaxSize = TPoint(32000, 32000);
            minmaxinfo.ptMaxTrackSize = TPoint(32000, 32000);
            return;
        }
    }
    TMDIChild::EvGetMinMaxInfo(minmaxinfo);
}
##--END-- @OPT_APPL_PRINTING == TRUE
>>[CPP]TMDIChild [[TMDIChild]]
