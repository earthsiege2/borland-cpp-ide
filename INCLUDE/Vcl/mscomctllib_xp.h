// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.0.1.2  $
// File generated on 1/29/2002 1:27:43 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\WINNT\System32\MSCOMCTL.OCX (1)
// LIBID: {831FDD16-0C5C-11D2-A9FC-0000F8754DA1}
// LCID: 0
// Helpfile: C:\WINNT\System32\cmctl198.chm
// HelpString: Microsoft Windows Common Controls 6.0
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
// Parent TypeLibrary:
//   (0) v9.0 Access, (c:\program files\microsoft office\office10\msacc.olb)
// ************************************************************************ //
#ifndef   MSComctlLib_XPH
#define   MSComctlLib_XPH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Mscomctllib_xp
{

// *********************************************************************//
// HelpString: Microsoft Windows Common Controls 6.0
// Version:    2.0
// *********************************************************************//

/*   **********************************************************

  Type Library Options: 
  Generate C++ Import file
  Expose namespace with 'using'.
  Generate files for dependant type libraries
  Map HRESULT to safecall on dual interfaces
  Place warnings in imported files
  Generate IDE registration for component wrappers
  Generate dispinterfaces
  Generate CoClassCreator wrappers
  Generate C++Builder 4.0 event wrappers for servers
  Generate VCL component wrappers for servers
  Force use of a _TLB file
  Ignore [PreDefined] flag
  Ignore Standard Type Libraries
  Show Debug Output
  Place comments in imported files
   ******************************************************** */

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_MSComctlLib;
extern __declspec (package) const GUID IID_IVBDataObject;
extern __declspec (package) const GUID CLSID_DataObject;
extern __declspec (package) const GUID IID_IVBDataObjectFiles;
extern __declspec (package) const GUID CLSID_DataObjectFiles;
extern __declspec (package) const GUID GUID_BorderStyleConstants;
extern __declspec (package) const GUID GUID_MousePointerConstants;
extern __declspec (package) const GUID GUID_AppearanceConstants;
extern __declspec (package) const GUID GUID_VB4AppearanceConstants;
extern __declspec (package) const GUID GUID_ScrollingConstants;
extern __declspec (package) const GUID GUID_OrientationConstants;
extern __declspec (package) const GUID GUID_OLEDragConstants;
extern __declspec (package) const GUID GUID_OLEDropConstants;
extern __declspec (package) const GUID GUID_DragOverConstants;
extern __declspec (package) const GUID GUID_ClipBoardConstants;
extern __declspec (package) const GUID GUID_OLEDropEffectConstants;
extern __declspec (package) const GUID GUID_ErrorConstants;
extern __declspec (package) const GUID GUID_TabWidthStyleConstants;
extern __declspec (package) const GUID GUID_TabStyleConstants;
extern __declspec (package) const GUID GUID_PlacementConstants;
extern __declspec (package) const GUID GUID_TabSelStyleConstants;
extern __declspec (package) const GUID IID_ITabStrip;
extern __declspec (package) const GUID DIID_ITabStripEvents;
extern __declspec (package) const GUID CLSID_TabStrip;
extern __declspec (package) const GUID IID_ITabs;
extern __declspec (package) const GUID CLSID_Tabs;
extern __declspec (package) const GUID IID_ITab;
extern __declspec (package) const GUID CLSID_Tab;
extern __declspec (package) const GUID GUID_ButtonStyleConstants;
extern __declspec (package) const GUID GUID_ValueConstants;
extern __declspec (package) const GUID GUID_ToolbarStyleConstants;
extern __declspec (package) const GUID GUID_ToolbarTextAlignConstants;
extern __declspec (package) const GUID IID_IToolbar;
extern __declspec (package) const GUID DIID_IToolbarEvents;
extern __declspec (package) const GUID CLSID_Toolbar;
extern __declspec (package) const GUID IID_IButtons;
extern __declspec (package) const GUID CLSID_Buttons;
extern __declspec (package) const GUID IID_IButton;
extern __declspec (package) const GUID CLSID_Button;
extern __declspec (package) const GUID IID_IButtonMenus;
extern __declspec (package) const GUID CLSID_ButtonMenus;
extern __declspec (package) const GUID IID_IButtonMenu;
extern __declspec (package) const GUID CLSID_ButtonMenu;
extern __declspec (package) const GUID GUID_SbarStyleConstants;
extern __declspec (package) const GUID IID_IStatusBar;
extern __declspec (package) const GUID DIID_IStatusBarEvents;
extern __declspec (package) const GUID CLSID_StatusBar;
extern __declspec (package) const GUID IID_IPanels;
extern __declspec (package) const GUID CLSID_Panels;
extern __declspec (package) const GUID GUID_PanelAlignmentConstants;
extern __declspec (package) const GUID GUID_PanelAutoSizeConstants;
extern __declspec (package) const GUID GUID_PanelBevelConstants;
extern __declspec (package) const GUID GUID_PanelStyleConstants;
extern __declspec (package) const GUID IID_IPanel;
extern __declspec (package) const GUID CLSID_Panel;
extern __declspec (package) const GUID IID_IProgressBar;
extern __declspec (package) const GUID DIID_IProgressBarEvents;
extern __declspec (package) const GUID CLSID_ProgressBar;
extern __declspec (package) const GUID GUID_LabelEditConstants;
extern __declspec (package) const GUID GUID_TreeLineStyleConstants;
extern __declspec (package) const GUID GUID_TreeStyleConstants;
extern __declspec (package) const GUID GUID_TreeRelationshipConstants;
extern __declspec (package) const GUID IID_ITreeView;
extern __declspec (package) const GUID DIID_ITreeViewEvents;
extern __declspec (package) const GUID CLSID_TreeView;
extern __declspec (package) const GUID IID_INodes;
extern __declspec (package) const GUID CLSID_Nodes;
extern __declspec (package) const GUID IID_INode;
extern __declspec (package) const GUID CLSID_Node;
extern __declspec (package) const GUID GUID_ListTextBackgroundConstants;
extern __declspec (package) const GUID GUID_ListArrangeConstants;
extern __declspec (package) const GUID GUID_ListPictureAlignmentConstants;
extern __declspec (package) const GUID GUID_ListLabelEditConstants;
extern __declspec (package) const GUID GUID_ListSortOrderConstants;
extern __declspec (package) const GUID GUID_ListViewConstants;
extern __declspec (package) const GUID GUID_ListColumnAlignmentConstants;
extern __declspec (package) const GUID GUID_ListFindItemWhereConstants;
extern __declspec (package) const GUID GUID_ListFindItemHowConstants;
extern __declspec (package) const GUID IID_IListView;
extern __declspec (package) const GUID DIID_ListViewEvents;
extern __declspec (package) const GUID CLSID_ListView;
extern __declspec (package) const GUID IID_IListItems;
extern __declspec (package) const GUID CLSID_ListItems;
extern __declspec (package) const GUID IID_IListItem;
extern __declspec (package) const GUID CLSID_ListItem;
extern __declspec (package) const GUID IID_IColumnHeaders;
extern __declspec (package) const GUID CLSID_ColumnHeaders;
extern __declspec (package) const GUID IID_IColumnHeader;
extern __declspec (package) const GUID CLSID_ColumnHeader;
extern __declspec (package) const GUID IID_IListSubItems;
extern __declspec (package) const GUID CLSID_ListSubItems;
extern __declspec (package) const GUID IID_IListSubItem;
extern __declspec (package) const GUID CLSID_ListSubItem;
extern __declspec (package) const GUID GUID_ImageDrawConstants;
extern __declspec (package) const GUID IID_IImageList;
extern __declspec (package) const GUID DIID_ImageListEvents;
extern __declspec (package) const GUID CLSID_ImageList;
extern __declspec (package) const GUID IID_IImages;
extern __declspec (package) const GUID CLSID_ListImages;
extern __declspec (package) const GUID IID_IImage;
extern __declspec (package) const GUID CLSID_ListImage;
extern __declspec (package) const GUID GUID_TickStyleConstants;
extern __declspec (package) const GUID GUID_TextPositionConstants;
extern __declspec (package) const GUID IID_ISlider;
extern __declspec (package) const GUID DIID_ISliderEvents;
extern __declspec (package) const GUID CLSID_Slider;
extern __declspec (package) const GUID IID_IControls;
extern __declspec (package) const GUID CLSID_Controls_;
extern __declspec (package) const GUID IID_IComboItem;
extern __declspec (package) const GUID CLSID_ComboItem;
extern __declspec (package) const GUID IID_IComboItems;
extern __declspec (package) const GUID CLSID_ComboItems;
extern __declspec (package) const GUID GUID_ImageComboStyleConstants;
extern __declspec (package) const GUID IID_IImageCombo;
extern __declspec (package) const GUID DIID_DImageComboEvents;
extern __declspec (package) const GUID CLSID_ImageCombo;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      BorderStyleConstants;
enum      MousePointerConstants;
enum      AppearanceConstants;
enum      VB4AppearanceConstants;
enum      ScrollingConstants;
enum      OrientationConstants;
enum      OLEDragConstants;
enum      OLEDropConstants;
enum      DragOverConstants;
enum      ClipBoardConstants;
enum      OLEDropEffectConstants;
enum      ErrorConstants;
enum      TabWidthStyleConstants;
enum      TabStyleConstants;
enum      PlacementConstants;
enum      TabSelStyleConstants;
enum      ButtonStyleConstants;
enum      ValueConstants;
enum      ToolbarStyleConstants;
enum      ToolbarTextAlignConstants;
enum      SbarStyleConstants;
enum      PanelAlignmentConstants;
enum      PanelAutoSizeConstants;
enum      PanelBevelConstants;
enum      PanelStyleConstants;
enum      LabelEditConstants;
enum      TreeLineStyleConstants;
enum      TreeStyleConstants;
enum      TreeRelationshipConstants;
enum      ListTextBackgroundConstants;
enum      ListArrangeConstants;
enum      ListPictureAlignmentConstants;
enum      ListLabelEditConstants;
enum      ListSortOrderConstants;
enum      ListViewConstants;
enum      ListColumnAlignmentConstants;
enum      ListFindItemWhereConstants;
enum      ListFindItemHowConstants;
enum      ImageDrawConstants;
enum      TickStyleConstants;
enum      TextPositionConstants;
enum      ImageComboStyleConstants;
interface DECLSPEC_UUID("{2334D2B1-713E-11CF-8AE5-00AA00C00905}") IVBDataObject;
typedef TComInterface<IVBDataObject, &IID_IVBDataObject> IVBDataObjectPtr;

interface DECLSPEC_UUID("{2334D2B3-713E-11CF-8AE5-00AA00C00905}") IVBDataObjectFiles;
typedef TComInterface<IVBDataObjectFiles, &IID_IVBDataObjectFiles> IVBDataObjectFilesPtr;

interface DECLSPEC_UUID("{1EFB6594-857C-11D1-B16A-00C0F0283628}") ITabStrip;
typedef TComInterface<ITabStrip, &IID_ITabStrip> ITabStripPtr;

interface DECLSPEC_UUID("{1EFB6595-857C-11D1-B16A-00C0F0283628}") ITabStripEvents;
typedef TComInterface<ITabStripEvents, &DIID_ITabStripEvents> ITabStripEventsPtr;

interface DECLSPEC_UUID("{1EFB6597-857C-11D1-B16A-00C0F0283628}") ITabs;
typedef TComInterface<ITabs, &IID_ITabs> ITabsPtr;

interface DECLSPEC_UUID("{1EFB6599-857C-11D1-B16A-00C0F0283628}") ITab;
typedef TComInterface<ITab, &IID_ITab> ITabPtr;

interface DECLSPEC_UUID("{66833FE4-8583-11D1-B16A-00C0F0283628}") IToolbar;
typedef TComInterface<IToolbar, &IID_IToolbar> IToolbarPtr;

interface DECLSPEC_UUID("{66833FE5-8583-11D1-B16A-00C0F0283628}") IToolbarEvents;
typedef TComInterface<IToolbarEvents, &DIID_IToolbarEvents> IToolbarEventsPtr;

interface DECLSPEC_UUID("{66833FE7-8583-11D1-B16A-00C0F0283628}") IButtons;
typedef TComInterface<IButtons, &IID_IButtons> IButtonsPtr;

interface DECLSPEC_UUID("{66833FE9-8583-11D1-B16A-00C0F0283628}") IButton;
typedef TComInterface<IButton, &IID_IButton> IButtonPtr;

interface DECLSPEC_UUID("{66833FEB-8583-11D1-B16A-00C0F0283628}") IButtonMenus;
typedef TComInterface<IButtonMenus, &IID_IButtonMenus> IButtonMenusPtr;

interface DECLSPEC_UUID("{66833FED-8583-11D1-B16A-00C0F0283628}") IButtonMenu;
typedef TComInterface<IButtonMenu, &IID_IButtonMenu> IButtonMenuPtr;

interface DECLSPEC_UUID("{8E3867A1-8586-11D1-B16A-00C0F0283628}") IStatusBar;
typedef TComInterface<IStatusBar, &IID_IStatusBar> IStatusBarPtr;

interface DECLSPEC_UUID("{8E3867A2-8586-11D1-B16A-00C0F0283628}") IStatusBarEvents;
typedef TComInterface<IStatusBarEvents, &DIID_IStatusBarEvents> IStatusBarEventsPtr;

interface DECLSPEC_UUID("{8E3867A4-8586-11D1-B16A-00C0F0283628}") IPanels;
typedef TComInterface<IPanels, &IID_IPanels> IPanelsPtr;

interface DECLSPEC_UUID("{8E3867AA-8586-11D1-B16A-00C0F0283628}") IPanel;
typedef TComInterface<IPanel, &IID_IPanel> IPanelPtr;

interface DECLSPEC_UUID("{35053A20-8589-11D1-B16A-00C0F0283628}") IProgressBar;
typedef TComInterface<IProgressBar, &IID_IProgressBar> IProgressBarPtr;

interface DECLSPEC_UUID("{35053A21-8589-11D1-B16A-00C0F0283628}") IProgressBarEvents;
typedef TComInterface<IProgressBarEvents, &DIID_IProgressBarEvents> IProgressBarEventsPtr;

interface DECLSPEC_UUID("{C74190B4-8589-11D1-B16A-00C0F0283628}") ITreeView;
typedef TComInterface<ITreeView, &IID_ITreeView> ITreeViewPtr;

interface DECLSPEC_UUID("{C74190B5-8589-11D1-B16A-00C0F0283628}") ITreeViewEvents;
typedef TComInterface<ITreeViewEvents, &DIID_ITreeViewEvents> ITreeViewEventsPtr;

interface DECLSPEC_UUID("{C74190B7-8589-11D1-B16A-00C0F0283628}") INodes;
typedef TComInterface<INodes, &IID_INodes> INodesPtr;

interface DECLSPEC_UUID("{C74190B8-8589-11D1-B16A-00C0F0283628}") INode;
typedef TComInterface<INode, &IID_INode> INodePtr;

interface DECLSPEC_UUID("{BDD1F049-858B-11D1-B16A-00C0F0283628}") IListView;
typedef TComInterface<IListView, &IID_IListView> IListViewPtr;

interface DECLSPEC_UUID("{BDD1F04A-858B-11D1-B16A-00C0F0283628}") ListViewEvents;
typedef TComInterface<ListViewEvents, &DIID_ListViewEvents> ListViewEventsPtr;

interface DECLSPEC_UUID("{BDD1F04C-858B-11D1-B16A-00C0F0283628}") IListItems;
typedef TComInterface<IListItems, &IID_IListItems> IListItemsPtr;

interface DECLSPEC_UUID("{BDD1F04E-858B-11D1-B16A-00C0F0283628}") IListItem;
typedef TComInterface<IListItem, &IID_IListItem> IListItemPtr;

interface DECLSPEC_UUID("{BDD1F050-858B-11D1-B16A-00C0F0283628}") IColumnHeaders;
typedef TComInterface<IColumnHeaders, &IID_IColumnHeaders> IColumnHeadersPtr;

interface DECLSPEC_UUID("{BDD1F051-858B-11D1-B16A-00C0F0283628}") IColumnHeader;
typedef TComInterface<IColumnHeader, &IID_IColumnHeader> IColumnHeaderPtr;

interface DECLSPEC_UUID("{BDD1F053-858B-11D1-B16A-00C0F0283628}") IListSubItems;
typedef TComInterface<IListSubItems, &IID_IListSubItems> IListSubItemsPtr;

interface DECLSPEC_UUID("{BDD1F055-858B-11D1-B16A-00C0F0283628}") IListSubItem;
typedef TComInterface<IListSubItem, &IID_IListSubItem> IListSubItemPtr;

interface DECLSPEC_UUID("{2C247F21-8591-11D1-B16A-00C0F0283628}") IImageList;
typedef TComInterface<IImageList, &IID_IImageList> IImageListPtr;

interface DECLSPEC_UUID("{2C247F22-8591-11D1-B16A-00C0F0283628}") ImageListEvents;
typedef TComInterface<ImageListEvents, &DIID_ImageListEvents> ImageListEventsPtr;

interface DECLSPEC_UUID("{2C247F24-8591-11D1-B16A-00C0F0283628}") IImages;
typedef TComInterface<IImages, &IID_IImages> IImagesPtr;

interface DECLSPEC_UUID("{2C247F26-8591-11D1-B16A-00C0F0283628}") IImage;
typedef TComInterface<IImage, &IID_IImage> IImagePtr;

interface DECLSPEC_UUID("{F08DF952-8592-11D1-B16A-00C0F0283628}") ISlider;
typedef TComInterface<ISlider, &IID_ISlider> ISliderPtr;

interface DECLSPEC_UUID("{F08DF953-8592-11D1-B16A-00C0F0283628}") ISliderEvents;
typedef TComInterface<ISliderEvents, &DIID_ISliderEvents> ISliderEventsPtr;

interface DECLSPEC_UUID("{C8A3DC00-8593-11D1-B16A-00C0F0283628}") IControls;
typedef TComInterface<IControls, &IID_IControls> IControlsPtr;

interface DECLSPEC_UUID("{DD9DA660-8594-11D1-B16A-00C0F0283628}") IComboItem;
typedef TComInterface<IComboItem, &IID_IComboItem> IComboItemPtr;

interface DECLSPEC_UUID("{DD9DA662-8594-11D1-B16A-00C0F0283628}") IComboItems;
typedef TComInterface<IComboItems, &IID_IComboItems> IComboItemsPtr;

interface DECLSPEC_UUID("{DD9DA664-8594-11D1-B16A-00C0F0283628}") IImageCombo;
typedef TComInterface<IImageCombo, &IID_IImageCombo> IImageComboPtr;

interface DECLSPEC_UUID("{DD9DA665-8594-11D1-B16A-00C0F0283628}") DImageComboEvents;
typedef TComInterface<DImageComboEvents, &DIID_DImageComboEvents> DImageComboEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IVBDataObject DataObject;
typedef IVBDataObjectPtr DataObjectPtr;
typedef IVBDataObjectFiles DataObjectFiles;
typedef IVBDataObjectFilesPtr DataObjectFilesPtr;
typedef ITabStrip TabStrip;
typedef ITabStripPtr TabStripPtr;
typedef ITabs Tabs;
typedef ITabsPtr TabsPtr;
typedef ITab Tab;
typedef ITabPtr TabPtr;
typedef IToolbar Toolbar;
typedef IToolbarPtr ToolbarPtr;
typedef IButtons Buttons;
typedef IButtonsPtr ButtonsPtr;
typedef IButton Button;
typedef IButtonPtr ButtonPtr;
typedef IButtonMenus ButtonMenus;
typedef IButtonMenusPtr ButtonMenusPtr;
typedef IButtonMenu ButtonMenu;
typedef IButtonMenuPtr ButtonMenuPtr;
typedef IStatusBar StatusBar;
typedef IStatusBarPtr StatusBarPtr;
typedef IPanels Panels;
typedef IPanelsPtr PanelsPtr;
typedef IPanel Panel;
typedef IPanelPtr PanelPtr;
typedef IProgressBar ProgressBar;
typedef IProgressBarPtr ProgressBarPtr;
typedef ITreeView TreeView;
typedef ITreeViewPtr TreeViewPtr;
typedef INodes Nodes;
typedef INodesPtr NodesPtr;
typedef INode Node;
typedef INodePtr NodePtr;
typedef IListView ListView;
typedef IListViewPtr ListViewPtr;
typedef IListItems ListItems;
typedef IListItemsPtr ListItemsPtr;
typedef IListItem ListItem;
typedef IListItemPtr ListItemPtr;
typedef IColumnHeaders ColumnHeaders;
typedef IColumnHeadersPtr ColumnHeadersPtr;
typedef IColumnHeader ColumnHeader;
typedef IColumnHeaderPtr ColumnHeaderPtr;
typedef IListSubItems ListSubItems;
typedef IListSubItemsPtr ListSubItemsPtr;
typedef IListSubItem ListSubItem;
typedef IListSubItemPtr ListSubItemPtr;
typedef IImageList ImageList;
typedef IImageListPtr ImageListPtr;
typedef IImages ListImages;
typedef IImagesPtr ListImagesPtr;
typedef IImage ListImage;
typedef IImagePtr ListImagePtr;
typedef ISlider Slider;
typedef ISliderPtr SliderPtr;
typedef IControls Controls_;
typedef IControlsPtr Controls_Ptr;
typedef IComboItem ComboItem;
typedef IComboItemPtr ComboItemPtr;
typedef IComboItems ComboItems;
typedef IComboItemsPtr ComboItemsPtr;
typedef IImageCombo ImageCombo;
typedef IImageComboPtr ImageComboPtr;

#define LIBID_OF_DataObject (&LIBID_MSComctlLib)
#define LIBID_OF_DataObjectFiles (&LIBID_MSComctlLib)
#define LIBID_OF_TabStrip (&LIBID_MSComctlLib)
#define LIBID_OF_Tabs (&LIBID_MSComctlLib)
#define LIBID_OF_Tab (&LIBID_MSComctlLib)
#define LIBID_OF_Toolbar (&LIBID_MSComctlLib)
#define LIBID_OF_Buttons (&LIBID_MSComctlLib)
#define LIBID_OF_Button (&LIBID_MSComctlLib)
#define LIBID_OF_ButtonMenus (&LIBID_MSComctlLib)
#define LIBID_OF_ButtonMenu (&LIBID_MSComctlLib)
#define LIBID_OF_StatusBar (&LIBID_MSComctlLib)
#define LIBID_OF_Panels (&LIBID_MSComctlLib)
#define LIBID_OF_Panel (&LIBID_MSComctlLib)
#define LIBID_OF_ProgressBar (&LIBID_MSComctlLib)
#define LIBID_OF_TreeView (&LIBID_MSComctlLib)
#define LIBID_OF_Nodes (&LIBID_MSComctlLib)
#define LIBID_OF_Node (&LIBID_MSComctlLib)
#define LIBID_OF_ListView (&LIBID_MSComctlLib)
#define LIBID_OF_ListItems (&LIBID_MSComctlLib)
#define LIBID_OF_ListItem (&LIBID_MSComctlLib)
#define LIBID_OF_ColumnHeaders (&LIBID_MSComctlLib)
#define LIBID_OF_ColumnHeader (&LIBID_MSComctlLib)
#define LIBID_OF_ListSubItems (&LIBID_MSComctlLib)
#define LIBID_OF_ListSubItem (&LIBID_MSComctlLib)
#define LIBID_OF_ImageList (&LIBID_MSComctlLib)
#define LIBID_OF_ListImages (&LIBID_MSComctlLib)
#define LIBID_OF_ListImage (&LIBID_MSComctlLib)
#define LIBID_OF_Slider (&LIBID_MSComctlLib)
#define LIBID_OF_Controls_ (&LIBID_MSComctlLib)
#define LIBID_OF_ComboItem (&LIBID_MSComctlLib)
#define LIBID_OF_ComboItems (&LIBID_MSComctlLib)
#define LIBID_OF_ImageCombo (&LIBID_MSComctlLib)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum BorderStyleConstants
{
  ccNone = 0, 
  ccFixedSingle = 1
} BorderStyleConstants;

typedef enum MousePointerConstants
{
  ccDefault = 0, 
  ccArrow = 1, 
  ccCross = 2, 
  ccIBeam = 3, 
  ccIcon = 4, 
  ccSize = 5, 
  ccSizeNESW = 6, 
  ccSizeNS = 7, 
  ccSizeNWSE = 8, 
  ccSizeEW = 9, 
  ccUpArrow = 10, 
  ccHourglass = 11, 
  ccNoDrop = 12, 
  ccArrowHourglass = 13, 
  ccArrowQuestion = 14, 
  ccSizeAll = 15, 
  ccCustom = 99
} MousePointerConstants;

typedef enum AppearanceConstants
{
  ccFlat = 0, 
  cc3D = 1
} AppearanceConstants;

typedef enum VB4AppearanceConstants
{
  vbFlat = 0, 
  vb3D = 1
} VB4AppearanceConstants;

typedef enum ScrollingConstants
{
  ccScrollingStandard = 0, 
  ccScrollingSmooth = 1
} ScrollingConstants;

typedef enum OrientationConstants
{
  ccOrientationHorizontal = 0, 
  ccOrientationVertical = 1
} OrientationConstants;

typedef enum OLEDragConstants
{
  ccOLEDragManual = 0, 
  ccOLEDragAutomatic = 1
} OLEDragConstants;

typedef enum OLEDropConstants
{
  ccOLEDropNone = 0, 
  ccOLEDropManual = 1
} OLEDropConstants;

typedef enum DragOverConstants
{
  ccEnter = 0, 
  ccLeave = 1, 
  ccOver = 2
} DragOverConstants;

typedef enum ClipBoardConstants
{
  ccCFText = 1, 
  ccCFBitmap = 2, 
  ccCFMetafile = 3, 
  ccCFDIB = 8, 
  ccCFPalette = 9, 
  ccCFEMetafile = 14, 
  ccCFFiles = 15, 
  ccCFRTF = 0xFFFFBF01
} ClipBoardConstants;

typedef enum OLEDropEffectConstants
{
  ccOLEDropEffectNone = 0, 
  ccOLEDropEffectCopy = 1, 
  ccOLEDropEffectMove = 2, 
  ccOLEDropEffectScroll = 0x80000000
} OLEDropEffectConstants;

typedef enum ErrorConstants
{
  ccInvalidProcedureCall = 5, 
  ccOutOfMemory = 7, 
  ccTypeMismatch = 13, 
  ccObjectVariableNotSet = 91, 
  ccInvalidPropertyValue = 380, 
  ccSetNotSupportedAtRuntime = 382, 
  ccSetNotSupported = 383, 
  ccSetNotPermitted = 387, 
  ccGetNotSupported = 394, 
  ccInvalidPicture = 481, 
  ccInvalidObjectUse = 425, 
  ccWrongClipboardFormat = 461, 
  ccDataObjectLocked = 672, 
  ccExpectedAnArgument = 673, 
  ccRecursiveOleDrag = 674, 
  ccFormatNotByteArray = 675, 
  ccDataNotSetForFormat = 676, 
  ccIndexOutOfBounds = 35600, 
  ccElemNotFound = 35601, 
  ccNonUniqueKey = 35602, 
  ccInvalidKey = 35603, 
  ccElemNotPartOfCollection = 35605, 
  ccCollectionChangedDuringEnum = 35606, 
  ccWouldIntroduceCycle = 35614, 
  ccMissingRequiredArg = 35607, 
  ccBadObjectReference = 35610, 
  ccCircularReference = 35700, 
  ccCol1MustBeLeftAligned = 35604, 
  ccReadOnlyIfHasImages = 35611, 
  ccImageListMustBeInitialized = 35613, 
  ccNotSameSize = 35615, 
  ccImageListLocked = 35617, 
  ccMaxPanelsExceeded = 35616, 
  ccMaxButtonsExceeded = 35619, 
  ccInvalidSafeModeProcCall = 680
} ErrorConstants;

typedef enum TabWidthStyleConstants
{
  tabJustified = 0, 
  tabNonJustified = 1, 
  tabFixed = 2
} TabWidthStyleConstants;

typedef enum TabStyleConstants
{
  tabTabs = 0, 
  tabButtons = 1, 
  tabFlatButtons = 2
} TabStyleConstants;

typedef enum PlacementConstants
{
  tabPlacementTop = 0, 
  tabPlacementBottom = 1, 
  tabPlacementLeft = 2, 
  tabPlacementRight = 3
} PlacementConstants;

typedef enum TabSelStyleConstants
{
  tabTabStandard = 0, 
  tabTabOpposite = 1
} TabSelStyleConstants;

typedef enum ButtonStyleConstants
{
  tbrDefault = 0, 
  tbrCheck = 1, 
  tbrButtonGroup = 2, 
  tbrSeparator = 3, 
  tbrPlaceholder = 4, 
  tbrDropdown = 5
} ButtonStyleConstants;

typedef enum ValueConstants
{
  tbrUnpressed = 0, 
  tbrPressed = 1
} ValueConstants;

typedef enum ToolbarStyleConstants
{
  tbrStandard = 0, 
  tbrFlat = 1
} ToolbarStyleConstants;

typedef enum ToolbarTextAlignConstants
{
  tbrTextAlignBottom = 0, 
  tbrTextAlignRight = 1
} ToolbarTextAlignConstants;

typedef enum SbarStyleConstants
{
  sbrNormal = 0, 
  sbrSimple = 1
} SbarStyleConstants;

typedef enum PanelAlignmentConstants
{
  sbrLeft = 0, 
  sbrCenter = 1, 
  sbrRight = 2
} PanelAlignmentConstants;

typedef enum PanelAutoSizeConstants
{
  sbrNoAutoSize = 0, 
  sbrSpring = 1, 
  sbrContents = 2
} PanelAutoSizeConstants;

typedef enum PanelBevelConstants
{
  sbrNoBevel = 0, 
  sbrInset = 1, 
  sbrRaised = 2
} PanelBevelConstants;

typedef enum PanelStyleConstants
{
  sbrText = 0, 
  sbrCaps = 1, 
  sbrNum = 2, 
  sbrIns = 3, 
  sbrScrl = 4, 
  sbrTime = 5, 
  sbrDate = 6, 
  sbrKana = 7
} PanelStyleConstants;

typedef enum LabelEditConstants
{
  tvwAutomatic = 0, 
  tvwManual = 1
} LabelEditConstants;

typedef enum TreeLineStyleConstants
{
  tvwTreeLines = 0, 
  tvwRootLines = 1
} TreeLineStyleConstants;

typedef enum TreeStyleConstants
{
  tvwTextOnly = 0, 
  tvwPictureText = 1, 
  tvwPlusMinusText = 2, 
  tvwPlusPictureText = 3, 
  tvwTreelinesText = 4, 
  tvwTreelinesPictureText = 5, 
  tvwTreelinesPlusMinusText = 6, 
  tvwTreelinesPlusMinusPictureText = 7
} TreeStyleConstants;

typedef enum TreeRelationshipConstants
{
  tvwFirst = 0, 
  tvwLast = 1, 
  tvwNext = 2, 
  tvwPrevious = 3, 
  tvwChild = 4
} TreeRelationshipConstants;

typedef enum ListTextBackgroundConstants
{
  lvwTransparent = 0, 
  lvwOpaque = 1
} ListTextBackgroundConstants;

typedef enum ListArrangeConstants
{
  lvwNone = 0, 
  lvwAutoLeft = 1, 
  lvwAutoTop = 2
} ListArrangeConstants;

typedef enum ListPictureAlignmentConstants
{
  lvwTopLeft = 0, 
  lvwTopRight = 1, 
  lvwBottomLeft = 2, 
  lvwBottomRight = 3, 
  lvwCenter = 4, 
  lvwTile = 5
} ListPictureAlignmentConstants;

typedef enum ListLabelEditConstants
{
  lvwAutomatic = 0, 
  lvwManual = 1
} ListLabelEditConstants;

typedef enum ListSortOrderConstants
{
  lvwAscending = 0, 
  lvwDescending = 1
} ListSortOrderConstants;

typedef enum ListViewConstants
{
  lvwIcon = 0, 
  lvwSmallIcon = 1, 
  lvwList = 2, 
  lvwReport = 3
} ListViewConstants;

typedef enum ListColumnAlignmentConstants
{
  lvwColumnLeft = 0, 
  lvwColumnRight = 1, 
  lvwColumnCenter = 2
} ListColumnAlignmentConstants;

typedef enum ListFindItemWhereConstants
{
  lvwText = 0, 
  lvwSubItem = 1, 
  lvwTag = 2
} ListFindItemWhereConstants;

typedef enum ListFindItemHowConstants
{
  lvwWhole = 0, 
  lvwPartial = 1
} ListFindItemHowConstants;

typedef enum ImageDrawConstants
{
  imlNormal = 0, 
  imlTransparent = 1, 
  imlSelected = 2, 
  imlFocus = 3
} ImageDrawConstants;

typedef enum TickStyleConstants
{
  sldBottomRight = 0, 
  sldTopLeft = 1, 
  sldBoth = 2, 
  sldNoTicks = 3
} TickStyleConstants;

typedef enum TextPositionConstants
{
  sldAboveLeft = 0, 
  sldBelowRight = 1
} TextPositionConstants;

typedef enum ImageComboStyleConstants
{
  ImgCboDropdownCombo = 0, 
  ImgCboSimpleCombo = 1, 
  ImgCboDropdownList = 2
} ImageComboStyleConstants;

// *********************************************************************//
// Interface: IVBDataObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2334D2B1-713E-11CF-8AE5-00AA00C00905}
// *********************************************************************//
interface IVBDataObject  : public IDispatch
{
public:
  // [1] Clears all data and formats in a DataObject object.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [2] Retrieves data of a specified format from a DataObject object.
  virtual HRESULT STDMETHODCALLTYPE GetData(short sFormat/*[in]*/, VARIANT* pvData/*[out,retval]*/) = 0;
  // [3] Determines if a specified clipboard format is supported by the DataObject object.
  virtual HRESULT STDMETHODCALLTYPE GetFormat(short sFormat/*[in]*/, 
                                              VARIANT_BOOL* pbFormatSupported/*[out,retval]*/) = 0;
  // [4] Adds a supported format and possibly its data to a DataObject object.
  virtual HRESULT STDMETHODCALLTYPE SetData(VARIANT vValue/*[in,opt]*/= TNoParam(), 
                                            VARIANT vFormat/*[in,opt]*/= TNoParam()) = 0;
  // [5] A collection of filenames used by the vbCFFiles format.
  virtual HRESULT STDMETHODCALLTYPE get_Files(Mscomctllib_xp::IVBDataObjectFiles** pFiles/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall GetData(short sFormat/*[in]*/)
  {
    VARIANT pvData;
    OLECHECK(this->GetData(sFormat, (VARIANT*)&pvData));
    return pvData;
  }

  VARIANT_BOOL __fastcall GetFormat(short sFormat/*[in]*/)
  {
    VARIANT_BOOL pbFormatSupported;
    OLECHECK(this->GetFormat(sFormat, (VARIANT_BOOL*)&pbFormatSupported));
    return pbFormatSupported;
  }

  Mscomctllib_xp::IVBDataObjectFiles* __fastcall get_Files(void)
  {
    Mscomctllib_xp::IVBDataObjectFiles* pFiles;
    OLECHECK(this->get_Files((Mscomctllib_xp::IVBDataObjectFiles**)&pFiles));
    return pFiles;
  }


  __property   Mscomctllib_xp::IVBDataObjectFiles* Files = {read = get_Files};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVBDataObjectFiles
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2334D2B3-713E-11CF-8AE5-00AA00C00905}
// *********************************************************************//
interface IVBDataObjectFiles  : public IDispatch
{
public:
  // [0] Returns a specific filename by index from the Files collection of a DataObject object (vbCFFiles format only).
  virtual HRESULT STDMETHODCALLTYPE get_Item(long lIndex/*[in]*/, BSTR* bstrItem/*[out,retval]*/) = 0;
  // [1] Returns the number of filenames in the Files collection of a DataObject object (vbCFFiles format only).
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* plCount/*[out,retval]*/) = 0;
  // [2] Adds a filename to the Files collection of a DataObject object (vbCFFiles format only).
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR bstrFilename/*[in]*/, 
                                        VARIANT vIndex/*[in,opt]*/= TNoParam()) = 0;
  // [3] Clears all filenames stored in the Files collection of a DataObject object (vbCFFiles format only).
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [4] Removes a filename from the Files collection of a DataObject object (vbCFFiles format only).
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT vIndex/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Item(long lIndex/*[in]*/)
  {
    BSTR bstrItem = 0;
    OLECHECK(this->get_Item(lIndex, (BSTR*)&bstrItem));
    return bstrItem;
  }

  long __fastcall get_Count(void)
  {
    long plCount;
    OLECHECK(this->get_Count((long*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITabStrip
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1EFB6594-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface ITabStrip  : public IDispatch
{
public:
  // [4] Returns a reference to a collection of Tab objects in the TabStrip control.
  virtual HRESULT STDMETHODCALLTYPE get_Tabs(Mscomctllib_xp::ITabs** ppTabs/*[out,retval]*/) = 0;
  // [4] Returns a reference to a collection of Tab objects in the TabStrip control.
  virtual HRESULT STDMETHODCALLTYPE _set_Tabs(Mscomctllib_xp::ITabs* ppTabs/*[in]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** ppFontDisp/*[out,retval]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp* ppFontDisp/*[in]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE set_hWnd(OLE_HANDLE phWnd/*[in]*/) = 0;
  // [5] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/) = 0;
  // [5] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [5] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [1] Returns/sets a value indicating whether the control can display more than one row of tabs.
  virtual HRESULT STDMETHODCALLTYPE get_MultiRow(VARIANT_BOOL* pbMultiRow/*[out,retval]*/) = 0;
  // [1] Returns/sets a value indicating whether the control can display more than one row of tabs.
  virtual HRESULT STDMETHODCALLTYPE set_MultiRow(VARIANT_BOOL pbMultiRow/*[in]*/) = 0;
  // [6] Returns/sets the style appearance (tab or button) of a TabStrip control.
  virtual HRESULT STDMETHODCALLTYPE get_Style(Mscomctllib_xp::TabStyleConstants* psStyle/*[out,retval]*/) = 0;
  // [6] Returns/sets the style appearance (tab or button) of a TabStrip control.
  virtual HRESULT STDMETHODCALLTYPE set_Style(Mscomctllib_xp::TabStyleConstants psStyle/*[in]*/) = 0;
  // [7] Returns/sets a fixed height of a TabStrip control, but only if the TabWidthStyle is set to tabFixed.
  virtual HRESULT STDMETHODCALLTYPE get_TabFixedWidth(short* psTabFixedWidth/*[out,retval]*/) = 0;
  // [7] Returns/sets a fixed height of a TabStrip control, but only if the TabWidthStyle is set to tabFixed.
  virtual HRESULT STDMETHODCALLTYPE set_TabFixedWidth(short psTabFixedWidth/*[in]*/) = 0;
  // [8] Returns/sets the width and justification of all tabs in a TabStrip control.
  virtual HRESULT STDMETHODCALLTYPE get_TabWidthStyle(Mscomctllib_xp::TabWidthStyleConstants* psTabWidthStyle/*[out,retval]*/) = 0;
  // [8] Returns/sets the width and justification of all tabs in a TabStrip control.
  virtual HRESULT STDMETHODCALLTYPE set_TabWidthStyle(Mscomctllib_xp::TabWidthStyleConstants psTabWidthStyle/*[in]*/) = 0;
  // [9] Returns the top coordinate of the internal area of the control.
  virtual HRESULT STDMETHODCALLTYPE get_ClientTop(float* pfClientTop/*[out,retval]*/) = 0;
  // [9] Returns the top coordinate of the internal area of the control.
  virtual HRESULT STDMETHODCALLTYPE set_ClientTop(float pfClientTop/*[in]*/) = 0;
  // [10] Returns the left coordinate of the internal area of the control.
  virtual HRESULT STDMETHODCALLTYPE get_ClientLeft(float* pfClientLeft/*[out,retval]*/) = 0;
  // [10] Returns the left coordinate of the internal area of the control.
  virtual HRESULT STDMETHODCALLTYPE set_ClientLeft(float pfClientLeft/*[in]*/) = 0;
  // [11] Returns the height of the internal area of the control.
  virtual HRESULT STDMETHODCALLTYPE get_ClientHeight(float* pfClientHeight/*[out,retval]*/) = 0;
  // [11] Returns the height of the internal area of the control.
  virtual HRESULT STDMETHODCALLTYPE set_ClientHeight(float pfClientHeight/*[in]*/) = 0;
  // [12] Returns the width of the internal area of the control.
  virtual HRESULT STDMETHODCALLTYPE get_ClientWidth(float* pfClientWidth/*[out,retval]*/) = 0;
  // [12] Returns the width of the internal area of the control.
  virtual HRESULT STDMETHODCALLTYPE set_ClientWidth(float pfClientWidth/*[in]*/) = 0;
  // [2] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/) = 0;
  // [2] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/) = 0;
  // [13] Returns/sets the ImageList control to be used.
  virtual HRESULT STDMETHODCALLTYPE get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/) = 0;
  // [13] Returns/sets the ImageList control to be used.
  virtual HRESULT STDMETHODCALLTYPE set_ImageList(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [13] Returns/sets the ImageList control to be used.
  virtual HRESULT STDMETHODCALLTYPE _set_ImageList(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [14] Returns/sets a fixed height of a TabStrip control, but only if the TabWidthStyle is set to tabFixed.
  virtual HRESULT STDMETHODCALLTYPE get_TabFixedHeight(short* psTabFixedHeight/*[out,retval]*/) = 0;
  // [14] Returns/sets a fixed height of a TabStrip control, but only if the TabWidthStyle is set to tabFixed.
  virtual HRESULT STDMETHODCALLTYPE set_TabFixedHeight(short psTabFixedHeight/*[in]*/) = 0;
  // [3] Enables/disables the Tooltip text
  virtual HRESULT STDMETHODCALLTYPE get_ShowTips(VARIANT_BOOL* pbShowTips/*[out,retval]*/) = 0;
  // [3] Enables/disables the Tooltip text
  virtual HRESULT STDMETHODCALLTYPE set_ShowTips(VARIANT_BOOL pbShowTips/*[in]*/) = 0;
  // [15] Returns/sets the selected Tab
  virtual HRESULT STDMETHODCALLTYPE get_SelectedItem(Mscomctllib_xp::ITab** ppSelectedItem/*[out,retval]*/) = 0;
  // [15] Returns/sets the selected Tab
  virtual HRESULT STDMETHODCALLTYPE _set_SelectedItem(Mscomctllib_xp::ITab* ppSelectedItem/*[in]*/) = 0;
  // [15] Returns/sets the selected Tab
  virtual HRESULT STDMETHODCALLTYPE set_SelectedItem(VARIANT* ppSelectedItem/*[in]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/) = 0;
  // [-550] Forces a complete repaint of a form or control.
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0;
  // [1552] Starts an OLE drag/drop event with the given control as the source.
  virtual HRESULT STDMETHODCALLTYPE OLEDrag(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]
  // [16] Returns/sets a value that determines whether the tab under the cursor is highlighted.
  virtual HRESULT STDMETHODCALLTYPE get_HotTracking(VARIANT_BOOL* pbHotTracking/*[out,retval]*/) = 0;
  // [16] Returns/sets a value that determines whether the tab under the cursor is highlighted.
  virtual HRESULT STDMETHODCALLTYPE set_HotTracking(VARIANT_BOOL pbHotTracking/*[in]*/) = 0;
  // [17] Returns/sets a value that determines whether multiple tabs can be selected while holding down the CTRL key.
  virtual HRESULT STDMETHODCALLTYPE get_MultiSelect(VARIANT_BOOL* pbMultiSelect/*[out,retval]*/) = 0;
  // [17] Returns/sets a value that determines whether multiple tabs can be selected while holding down the CTRL key.
  virtual HRESULT STDMETHODCALLTYPE set_MultiSelect(VARIANT_BOOL pbMultiSelect/*[in]*/) = 0;
  // [18] Returns/sets a value that indicates on which side of the control the tabs will be displayed.
  virtual HRESULT STDMETHODCALLTYPE get_Placement(Mscomctllib_xp::PlacementConstants* penumPlacement/*[out,retval]*/) = 0;
  // [18] Returns/sets a value that indicates on which side of the control the tabs will be displayed.
  virtual HRESULT STDMETHODCALLTYPE set_Placement(Mscomctllib_xp::PlacementConstants penumPlacement/*[in]*/) = 0;
  // [19] Returns/sets a value that determines whether separators are drawn between buttons on a tabstrip that has the tabButton or tabFlatButton styles.
  virtual HRESULT STDMETHODCALLTYPE get_Separators(VARIANT_BOOL* pbSeparators/*[out,retval]*/) = 0;
  // [19] Returns/sets a value that determines whether separators are drawn between buttons on a tabstrip that has the tabButton or tabFlatButton styles.
  virtual HRESULT STDMETHODCALLTYPE set_Separators(VARIANT_BOOL pbSeparators/*[in]*/) = 0;
  // [20] Returns/sets a value that determines the minimum width of a tab.
  virtual HRESULT STDMETHODCALLTYPE get_TabMinWidth(float* pflTabMinWidth/*[out,retval]*/) = 0;
  // [20] Returns/sets a value that determines the minimum width of a tab.
  virtual HRESULT STDMETHODCALLTYPE set_TabMinWidth(float pflTabMinWidth/*[in]*/) = 0;
  // [21] Returns/sets a value that determines how remaining tabs are positioned when a new tab is selected.
  virtual HRESULT STDMETHODCALLTYPE get_TabStyle(Mscomctllib_xp::TabSelStyleConstants* penumTabStyle/*[out,retval]*/) = 0;
  // [21] Returns/sets a value that determines how remaining tabs are positioned when a new tab is selected.
  virtual HRESULT STDMETHODCALLTYPE set_TabStyle(Mscomctllib_xp::TabSelStyleConstants penumTabStyle/*[in]*/) = 0;
  // [22] Deselects all currently selected tabs.
  virtual HRESULT STDMETHODCALLTYPE DeselectAll(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mscomctllib_xp::ITabs* __fastcall get_Tabs(void)
  {
    Mscomctllib_xp::ITabs* ppTabs;
    OLECHECK(this->get_Tabs((Mscomctllib_xp::ITabs**)&ppTabs));
    return ppTabs;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  IFontDisp* __fastcall get_Font(void)
  {
    IFontDisp* ppFontDisp;
    OLECHECK(this->get_Font((IFontDisp**)&ppFontDisp));
    return ppFontDisp;
  }

  OLE_HANDLE __fastcall get_hWnd(void)
  {
    OLE_HANDLE phWnd;
    OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
    return phWnd;
  }

  IPictureDisp* __fastcall get_MouseIcon(void)
  {
    IPictureDisp* ppMouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
    return ppMouseIcon;
  }

  VARIANT_BOOL __fastcall get_MultiRow(void)
  {
    VARIANT_BOOL pbMultiRow;
    OLECHECK(this->get_MultiRow((VARIANT_BOOL*)&pbMultiRow));
    return pbMultiRow;
  }

  Mscomctllib_xp::TabStyleConstants __fastcall get_Style(void)
  {
    Mscomctllib_xp::TabStyleConstants psStyle;
    OLECHECK(this->get_Style((Mscomctllib_xp::TabStyleConstants*)&psStyle));
    return psStyle;
  }

  short __fastcall get_TabFixedWidth(void)
  {
    short psTabFixedWidth;
    OLECHECK(this->get_TabFixedWidth((short*)&psTabFixedWidth));
    return psTabFixedWidth;
  }

  Mscomctllib_xp::TabWidthStyleConstants __fastcall get_TabWidthStyle(void)
  {
    Mscomctllib_xp::TabWidthStyleConstants psTabWidthStyle;
    OLECHECK(this->get_TabWidthStyle((Mscomctllib_xp::TabWidthStyleConstants*)&psTabWidthStyle));
    return psTabWidthStyle;
  }

  float __fastcall get_ClientTop(void)
  {
    float pfClientTop;
    OLECHECK(this->get_ClientTop((float*)&pfClientTop));
    return pfClientTop;
  }

  float __fastcall get_ClientLeft(void)
  {
    float pfClientLeft;
    OLECHECK(this->get_ClientLeft((float*)&pfClientLeft));
    return pfClientLeft;
  }

  float __fastcall get_ClientHeight(void)
  {
    float pfClientHeight;
    OLECHECK(this->get_ClientHeight((float*)&pfClientHeight));
    return pfClientHeight;
  }

  float __fastcall get_ClientWidth(void)
  {
    float pfClientWidth;
    OLECHECK(this->get_ClientWidth((float*)&pfClientWidth));
    return pfClientWidth;
  }

  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void)
  {
    Mscomctllib_xp::MousePointerConstants psMousePointer;
    OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer));
    return psMousePointer;
  }

  LPDISPATCH __fastcall get_ImageList(void)
  {
    LPDISPATCH ppImageList;
    OLECHECK(this->get_ImageList((LPDISPATCH*)&ppImageList));
    return ppImageList;
  }

  short __fastcall get_TabFixedHeight(void)
  {
    short psTabFixedHeight;
    OLECHECK(this->get_TabFixedHeight((short*)&psTabFixedHeight));
    return psTabFixedHeight;
  }

  VARIANT_BOOL __fastcall get_ShowTips(void)
  {
    VARIANT_BOOL pbShowTips;
    OLECHECK(this->get_ShowTips((VARIANT_BOOL*)&pbShowTips));
    return pbShowTips;
  }

  Mscomctllib_xp::ITab* __fastcall get_SelectedItem(void)
  {
    Mscomctllib_xp::ITab* ppSelectedItem;
    OLECHECK(this->get_SelectedItem((Mscomctllib_xp::ITab**)&ppSelectedItem));
    return ppSelectedItem;
  }

  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void)
  {
    Mscomctllib_xp::OLEDropConstants psOLEDropMode;
    OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
    return psOLEDropMode;
  }

  VARIANT_BOOL __fastcall get_HotTracking(void)
  {
    VARIANT_BOOL pbHotTracking;
    OLECHECK(this->get_HotTracking((VARIANT_BOOL*)&pbHotTracking));
    return pbHotTracking;
  }

  VARIANT_BOOL __fastcall get_MultiSelect(void)
  {
    VARIANT_BOOL pbMultiSelect;
    OLECHECK(this->get_MultiSelect((VARIANT_BOOL*)&pbMultiSelect));
    return pbMultiSelect;
  }

  Mscomctllib_xp::PlacementConstants __fastcall get_Placement(void)
  {
    Mscomctllib_xp::PlacementConstants penumPlacement;
    OLECHECK(this->get_Placement((Mscomctllib_xp::PlacementConstants*)&penumPlacement));
    return penumPlacement;
  }

  VARIANT_BOOL __fastcall get_Separators(void)
  {
    VARIANT_BOOL pbSeparators;
    OLECHECK(this->get_Separators((VARIANT_BOOL*)&pbSeparators));
    return pbSeparators;
  }

  float __fastcall get_TabMinWidth(void)
  {
    float pflTabMinWidth;
    OLECHECK(this->get_TabMinWidth((float*)&pflTabMinWidth));
    return pflTabMinWidth;
  }

  Mscomctllib_xp::TabSelStyleConstants __fastcall get_TabStyle(void)
  {
    Mscomctllib_xp::TabSelStyleConstants penumTabStyle;
    OLECHECK(this->get_TabStyle((Mscomctllib_xp::TabSelStyleConstants*)&penumTabStyle));
    return penumTabStyle;
  }


  __property   Mscomctllib_xp::ITabs* Tabs = {read = get_Tabs, write = _set_Tabs};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = _set_Font};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   VARIANT_BOOL    MultiRow = {read = get_MultiRow, write = set_MultiRow};
  __property   Mscomctllib_xp::TabStyleConstants Style = {read = get_Style, write = set_Style};
  __property   short           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   Mscomctllib_xp::TabWidthStyleConstants TabWidthStyle = {read = get_TabWidthStyle, write = set_TabWidthStyle};
  __property   float           ClientTop = {read = get_ClientTop, write = set_ClientTop};
  __property   float           ClientLeft = {read = get_ClientLeft, write = set_ClientLeft};
  __property   float           ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   float           ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   short           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   VARIANT_BOOL    ShowTips = {read = get_ShowTips, write = set_ShowTips};
  __property   Mscomctllib_xp::ITab* SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   VARIANT_BOOL    HotTracking = {read = get_HotTracking, write = set_HotTracking};
  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Mscomctllib_xp::PlacementConstants Placement = {read = get_Placement, write = set_Placement};
  __property   VARIANT_BOOL    Separators = {read = get_Separators, write = set_Separators};
  __property   float           TabMinWidth = {read = get_TabMinWidth, write = set_TabMinWidth};
  __property   Mscomctllib_xp::TabSelStyleConstants TabStyle = {read = get_TabStyle, write = set_TabStyle};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITabStripEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {1EFB6595-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface ITabStripEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(short* KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(short* KeyAscii)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = KeyAscii /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(short* KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall BeforeClick(short* Cancel)
  {
    _TDispID _dispid(/* BeforeClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Cancel /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = AllowedEffects /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
    TAutoArgs<2> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/)
  {
    _TDispID _dispid(/* OLESetData */ DISPID(1552));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = DataFormat /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/)
  {
    _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
    TAutoArgs<1> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    _args[7] = State /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
    TAutoArgs<6> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ITabs
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1EFB6597-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface ITabs  : public IDispatch
{
public:
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Count(short* psCount/*[out,retval]*/) = 0;
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Count(short psCount/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_ControlDefault(VARIANT* pvIndex/*[in]*/, 
                                                       Mscomctllib_xp::ITab** ppTab/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE _set_ControlDefault(VARIANT* pvIndex/*[in]*/, 
                                                        Mscomctllib_xp::ITab* ppTab/*[in]*/) = 0; // [0]
  // [2] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* pvIndex/*[in]*/, 
                                             Mscomctllib_xp::ITab** ppTab/*[out,retval]*/) = 0;
  // [2] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE _set_Item(VARIANT* pvIndex/*[in]*/, 
                                              Mscomctllib_xp::ITab* ppTab/*[in]*/) = 0;
  // [3] Removes a specific member from a collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* pvIndex/*[in]*/) = 0;
  // [4] Removes all objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [5] Adds a Tab object to a Tabs collection.
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT* pvIndex/*[in,opt]*/, VARIANT* pvKey/*[in,opt]*/, 
                                        VARIANT* pvCaption/*[in,opt]*/, VARIANT* pvImage/*[in,opt]*/, 
                                        Mscomctllib_xp::ITab** ppTab/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  short __fastcall get_Count(void)
  {
    short psCount;
    OLECHECK(this->get_Count((short*)&psCount));
    return psCount;
  }

  Mscomctllib_xp::ITab* __fastcall get_ControlDefault(VARIANT* pvIndex/*[in]*/)
  {
    Mscomctllib_xp::ITab* ppTab;
    OLECHECK(this->get_ControlDefault(pvIndex, (Mscomctllib_xp::ITab**)&ppTab));
    return ppTab;
  }

  Mscomctllib_xp::ITab* __fastcall get_Item(VARIANT* pvIndex/*[in]*/)
  {
    Mscomctllib_xp::ITab* ppTab;
    OLECHECK(this->get_Item(pvIndex, (Mscomctllib_xp::ITab**)&ppTab));
    return ppTab;
  }

  Mscomctllib_xp::ITab* __fastcall Add(VARIANT* pvIndex/*[in,opt]*/= TNoParam(), 
                                       VARIANT* pvKey/*[in,opt]*/= TNoParam(), 
                                       VARIANT* pvCaption/*[in,opt]*/= TNoParam(), 
                                       VARIANT* pvImage/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::ITab* ppTab;
    OLECHECK(this->Add(pvIndex, pvKey, pvCaption, pvImage, (Mscomctllib_xp::ITab**)&ppTab));
    return ppTab;
  }

  LPDISPATCH __fastcall _NewEnum(void)
  {
    LPDISPATCH ppNewEnum;
    OLECHECK(this->_NewEnum((LPDISPATCH*)&ppNewEnum));
    return ppNewEnum;
  }


  __property   short           Count = {read = get_Count, write = set_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITab
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1EFB6599-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface ITab  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__ObjectDefault(BSTR* pbstrCaption/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set__ObjectDefault(BSTR pbstrCaption/*[in]*/) = 0; // [0]
  // [2] Returns/sets the text displayed in an object's title bar or below an object's icon.
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pbstrCaption/*[out,retval]*/) = 0;
  // [2] Returns/sets the text displayed in an object's title bar or below an object's icon.
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pbstrCaption/*[in]*/) = 0;
  // [1] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE get_Tag(VARIANT* pvTag/*[out,retval]*/) = 0;
  // [1] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [3] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE get_Index(short* psIndex/*[out,retval]*/) = 0;
  // [3] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE set_Index(short psIndex/*[in]*/) = 0;
  // [4] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Key(BSTR* pbstrKey/*[out,retval]*/) = 0;
  // [4] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Key(BSTR pbstrKey/*[in]*/) = 0;
  // [5] Returns/sets the string displayed when a cursor hovers over an object.
  virtual HRESULT STDMETHODCALLTYPE get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/) = 0;
  // [5] Returns/sets the string displayed when a cursor hovers over an object.
  virtual HRESULT STDMETHODCALLTYPE set_ToolTipText(BSTR pbstrToolTipText/*[in]*/) = 0;
  // [6] Returns/sets the width of an object.
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* pfWidth/*[out,retval]*/) = 0;
  // [6] Returns/sets the width of an object.
  virtual HRESULT STDMETHODCALLTYPE set_Width(float pfWidth/*[in]*/) = 0;
  // [7] Returns/sets the height of an object.
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* pfHeight/*[out,retval]*/) = 0;
  // [7] Returns/sets the height of an object.
  virtual HRESULT STDMETHODCALLTYPE set_Height(float pfHeight/*[in]*/) = 0;
  // [8] Returns/sets the distance between the internal top edge of an object and the top edge of its container.
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* pfTop/*[out,retval]*/) = 0;
  // [8] Returns/sets the distance between the internal top edge of an object and the top edge of its container.
  virtual HRESULT STDMETHODCALLTYPE set_Top(float pfTop/*[in]*/) = 0;
  // [9] Returns/sets the distance between the internal left edge of an object and the left edge of its container.
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* pfLeft/*[out,retval]*/) = 0;
  // [9] Returns/sets the distance between the internal left edge of an object and the left edge of its container.
  virtual HRESULT STDMETHODCALLTYPE set_Left(float pfLeft/*[in]*/) = 0;
  // [10] Returns/sets a value which determines if a ListItem or Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/) = 0;
  // [10] Returns/sets a value which determines if a ListItem or Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE set_Selected(VARIANT_BOOL pbSelected/*[in]*/) = 0;
  // [11] Returns/sets the index or key of a ListImage object to be used.
  virtual HRESULT STDMETHODCALLTYPE get_Image(VARIANT* pvImage/*[out,retval]*/) = 0;
  // [11] Returns/sets the index or key of a ListImage object to be used.
  virtual HRESULT STDMETHODCALLTYPE set_Image(VARIANT pvImage/*[in]*/) = 0;
  // [12] Returns/sets a value that indicates whether the Tab is highlighted..
  virtual HRESULT STDMETHODCALLTYPE get_HighLighted(VARIANT_BOOL* pbHighLighted/*[out,retval]*/) = 0;
  // [12] Returns/sets a value that indicates whether the Tab is highlighted..
  virtual HRESULT STDMETHODCALLTYPE set_HighLighted(VARIANT_BOOL pbHighLighted/*[in]*/) = 0;
  // [1] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE _set_Tag(VARIANT pvTag/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get__ObjectDefault(void)
  {
    BSTR pbstrCaption = 0;
    OLECHECK(this->get__ObjectDefault((BSTR*)&pbstrCaption));
    return pbstrCaption;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pbstrCaption = 0;
    OLECHECK(this->get_Caption((BSTR*)&pbstrCaption));
    return pbstrCaption;
  }

  VARIANT __fastcall get_Tag(void)
  {
    VARIANT pvTag;
    OLECHECK(this->get_Tag((VARIANT*)&pvTag));
    return pvTag;
  }

  short __fastcall get_Index(void)
  {
    short psIndex;
    OLECHECK(this->get_Index((short*)&psIndex));
    return psIndex;
  }

  BSTR __fastcall get_Key(void)
  {
    BSTR pbstrKey = 0;
    OLECHECK(this->get_Key((BSTR*)&pbstrKey));
    return pbstrKey;
  }

  BSTR __fastcall get_ToolTipText(void)
  {
    BSTR pbstrToolTipText = 0;
    OLECHECK(this->get_ToolTipText((BSTR*)&pbstrToolTipText));
    return pbstrToolTipText;
  }

  float __fastcall get_Width(void)
  {
    float pfWidth;
    OLECHECK(this->get_Width((float*)&pfWidth));
    return pfWidth;
  }

  float __fastcall get_Height(void)
  {
    float pfHeight;
    OLECHECK(this->get_Height((float*)&pfHeight));
    return pfHeight;
  }

  float __fastcall get_Top(void)
  {
    float pfTop;
    OLECHECK(this->get_Top((float*)&pfTop));
    return pfTop;
  }

  float __fastcall get_Left(void)
  {
    float pfLeft;
    OLECHECK(this->get_Left((float*)&pfLeft));
    return pfLeft;
  }

  VARIANT_BOOL __fastcall get_Selected(void)
  {
    VARIANT_BOOL pbSelected;
    OLECHECK(this->get_Selected((VARIANT_BOOL*)&pbSelected));
    return pbSelected;
  }

  VARIANT __fastcall get_Image(void)
  {
    VARIANT pvImage;
    OLECHECK(this->get_Image((VARIANT*)&pvImage));
    return pvImage;
  }

  VARIANT_BOOL __fastcall get_HighLighted(void)
  {
    VARIANT_BOOL pbHighLighted;
    OLECHECK(this->get_HighLighted((VARIANT_BOOL*)&pbHighLighted));
    return pbHighLighted;
  }


  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   BSTR            Caption = {read = get_Caption};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   VARIANT_BOOL    HighLighted = {read = get_HighLighted, write = set_HighLighted};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IToolbar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FE4-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IToolbar  : public IDispatch
{
public:
  // [-520] Returns/sets whether or not controls, Forms or an MDIForm are painted at run time with 3-D effects.
  virtual HRESULT STDMETHODCALLTYPE get_Appearance(Mscomctllib_xp::AppearanceConstants* pnAppearance/*[out,retval]*/) = 0;
  // [-520] Returns/sets whether or not controls, Forms or an MDIForm are painted at run time with 3-D effects.
  virtual HRESULT STDMETHODCALLTYPE set_Appearance(Mscomctllib_xp::AppearanceConstants pnAppearance/*[in]*/) = 0;
  // [2] Returns/sets a value which determines if users can customize the Toolbar.
  virtual HRESULT STDMETHODCALLTYPE get_AllowCustomize(VARIANT_BOOL* pbAllowCustomize/*[out,retval]*/) = 0;
  // [2] Returns/sets a value which determines if users can customize the Toolbar.
  virtual HRESULT STDMETHODCALLTYPE set_AllowCustomize(VARIANT_BOOL pbAllowCustomize/*[in]*/) = 0;
  // [3] Returns a reference to a Toolbar control's collection of Button objects.
  virtual HRESULT STDMETHODCALLTYPE get_Buttons(Mscomctllib_xp::IButtons** ppButtons/*[out,retval]*/) = 0;
  // [3] Returns a reference to a Toolbar control's collection of Button objects.
  virtual HRESULT STDMETHODCALLTYPE _set_Buttons(Mscomctllib_xp::IButtons* ppButtons/*[in]*/) = 0;
  // [15] ToolBar Controls Collection
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Mscomctllib_xp::IControls** ppControls/*[out,retval]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE set_hWnd(OLE_HANDLE phWnd/*[in]*/) = 0;
  // [4] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/) = 0;
  // [4] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [4] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [1] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/) = 0;
  // [1] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/) = 0;
  // [5] Returns/sets the ImageList control to be used for storing normal images.
  virtual HRESULT STDMETHODCALLTYPE get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/) = 0;
  // [5] Returns/sets the ImageList control to be used for storing normal images.
  virtual HRESULT STDMETHODCALLTYPE set_ImageList(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [5] Returns/sets the ImageList control to be used for storing normal images.
  virtual HRESULT STDMETHODCALLTYPE _set_ImageList(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [6] Enables/disables ToolTips for tool buttons
  virtual HRESULT STDMETHODCALLTYPE get_ShowTips(VARIANT_BOOL* bShowTips/*[out,retval]*/) = 0;
  // [6] Enables/disables ToolTips for tool buttons
  virtual HRESULT STDMETHODCALLTYPE set_ShowTips(VARIANT_BOOL bShowTips/*[in]*/) = 0;
  // [-504] Returns/sets the border style
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/) = 0;
  // [-504] Returns/sets the border style
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/) = 0;
  // [7] Returns/sets whether buttons can be wrapped or not
  virtual HRESULT STDMETHODCALLTYPE get_Wrappable(VARIANT_BOOL* pbWrappable/*[out,retval]*/) = 0;
  // [7] Returns/sets whether buttons can be wrapped or not
  virtual HRESULT STDMETHODCALLTYPE set_Wrappable(VARIANT_BOOL pbWrappable/*[in]*/) = 0;
  // [8] Returns/sets the height of the buttons
  virtual HRESULT STDMETHODCALLTYPE get_ButtonHeight(float* pfButtonHeight/*[out,retval]*/) = 0;
  // [8] Returns/sets the height of the buttons
  virtual HRESULT STDMETHODCALLTYPE set_ButtonHeight(float pfButtonHeight/*[in]*/) = 0;
  // [9] Returns/sets the width of the buttons
  virtual HRESULT STDMETHODCALLTYPE get_ButtonWidth(float* pfButtonWidth/*[out,retval]*/) = 0;
  // [9] Returns/sets the width of the buttons
  virtual HRESULT STDMETHODCALLTYPE set_ButtonWidth(float pfButtonWidth/*[in]*/) = 0;
  // [13] Help context of topic to be displayed when inquiring help from Toolbar Customize dialog.
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextID(long* plHelpContextID/*[out,retval]*/) = 0;
  // [13] Help context of topic to be displayed when inquiring help from Toolbar Customize dialog.
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextID(long plHelpContextID/*[in]*/) = 0;
  // [14] Help file to be used when inquiring help from Toolbar Customize dialog.
  virtual HRESULT STDMETHODCALLTYPE get_HelpFile(BSTR* pbstrHelpFile/*[out,retval]*/) = 0;
  // [14] Help file to be used when inquiring help from Toolbar Customize dialog.
  virtual HRESULT STDMETHODCALLTYPE set_HelpFile(BSTR pbstrHelpFile/*[in]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/) = 0;
  // [-550] Forces a complete repaint of a form or control.
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0;
  // [10] Invokes the Customize Toolbar dialog box when the user double-clicks on a Toolbar control.
  virtual HRESULT STDMETHODCALLTYPE Customize(void) = 0;
  // [11] Saves a Toolbar configuration in an initialization (.ini) file.
  virtual HRESULT STDMETHODCALLTYPE SaveToolbar(BSTR Key/*[in]*/, BSTR Subkey/*[in]*/, 
                                                BSTR Value/*[in]*/) = 0;
  // [12] Restores a toolbar, created with a Toolbar control, to its original state after being customized.
  virtual HRESULT STDMETHODCALLTYPE RestoreToolbar(BSTR Key/*[in]*/, BSTR Subkey/*[in]*/, 
                                                   BSTR Value/*[in]*/) = 0;
  // [1552] Starts an OLE drag/drop event with the given control as the source.
  virtual HRESULT STDMETHODCALLTYPE OLEDrag(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]
  // [17] Returns/sets the ImageList control to be used for storing images displayed when a button is in a disabled state.
  virtual HRESULT STDMETHODCALLTYPE get_DisabledImageList(LPDISPATCH* ppDisabledImageList/*[out,retval]*/) = 0;
  // [17] Returns/sets the ImageList control to be used for storing images displayed when a button is in a disabled state.
  virtual HRESULT STDMETHODCALLTYPE set_DisabledImageList(LPDISPATCH ppDisabledImageList/*[in]*/) = 0;
  // [17] Returns/sets the ImageList control to be used for storing images displayed when a button is in a disabled state.
  virtual HRESULT STDMETHODCALLTYPE _set_DisabledImageList(LPDISPATCH ppDisabledImageList/*[in]*/) = 0;
  // [18] Returns/sets the ImageList control to be used for storing images displayed when a button is highlighted.
  virtual HRESULT STDMETHODCALLTYPE get_HotImageList(LPDISPATCH* ppHotImageList/*[out,retval]*/) = 0;
  // [18] Returns/sets the ImageList control to be used for storing images displayed when a button is highlighted.
  virtual HRESULT STDMETHODCALLTYPE set_HotImageList(LPDISPATCH ppHotImageList/*[in]*/) = 0;
  // [18] Returns/sets the ImageList control to be used for storing images displayed when a button is highlighted.
  virtual HRESULT STDMETHODCALLTYPE _set_HotImageList(LPDISPATCH ppHotImageList/*[in]*/) = 0;
  // [16] Returns/sets a value that determines how the Toolbar is drawn.
  virtual HRESULT STDMETHODCALLTYPE get_Style(Mscomctllib_xp::ToolbarStyleConstants* penumStyle/*[out,retval]*/) = 0;
  // [16] Returns/sets a value that determines how the Toolbar is drawn.
  virtual HRESULT STDMETHODCALLTYPE set_Style(Mscomctllib_xp::ToolbarStyleConstants penumStyle/*[in]*/) = 0;
  // [19] Returns/sets a value that determines whether button text is displayed below or to the right of the button image.
  virtual HRESULT STDMETHODCALLTYPE get_TextAlignment(Mscomctllib_xp::ToolbarTextAlignConstants* penumTextAlignment/*[out,retval]*/) = 0;
  // [19] Returns/sets a value that determines whether button text is displayed below or to the right of the button image.
  virtual HRESULT STDMETHODCALLTYPE set_TextAlignment(Mscomctllib_xp::ToolbarTextAlignConstants penumTextAlignment/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void)
  {
    Mscomctllib_xp::AppearanceConstants pnAppearance;
    OLECHECK(this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&pnAppearance));
    return pnAppearance;
  }

  VARIANT_BOOL __fastcall get_AllowCustomize(void)
  {
    VARIANT_BOOL pbAllowCustomize;
    OLECHECK(this->get_AllowCustomize((VARIANT_BOOL*)&pbAllowCustomize));
    return pbAllowCustomize;
  }

  Mscomctllib_xp::IButtons* __fastcall get_Buttons(void)
  {
    Mscomctllib_xp::IButtons* ppButtons;
    OLECHECK(this->get_Buttons((Mscomctllib_xp::IButtons**)&ppButtons));
    return ppButtons;
  }

  Mscomctllib_xp::IControls* __fastcall get_Controls(void)
  {
    Mscomctllib_xp::IControls* ppControls;
    OLECHECK(this->get_Controls((Mscomctllib_xp::IControls**)&ppControls));
    return ppControls;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  OLE_HANDLE __fastcall get_hWnd(void)
  {
    OLE_HANDLE phWnd;
    OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
    return phWnd;
  }

  IPictureDisp* __fastcall get_MouseIcon(void)
  {
    IPictureDisp* ppMouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
    return ppMouseIcon;
  }

  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void)
  {
    Mscomctllib_xp::MousePointerConstants psMousePointer;
    OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer));
    return psMousePointer;
  }

  LPDISPATCH __fastcall get_ImageList(void)
  {
    LPDISPATCH ppImageList;
    OLECHECK(this->get_ImageList((LPDISPATCH*)&ppImageList));
    return ppImageList;
  }

  VARIANT_BOOL __fastcall get_ShowTips(void)
  {
    VARIANT_BOOL bShowTips;
    OLECHECK(this->get_ShowTips((VARIANT_BOOL*)&bShowTips));
    return bShowTips;
  }

  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void)
  {
    Mscomctllib_xp::BorderStyleConstants psBorderStyle;
    OLECHECK(this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&psBorderStyle));
    return psBorderStyle;
  }

  VARIANT_BOOL __fastcall get_Wrappable(void)
  {
    VARIANT_BOOL pbWrappable;
    OLECHECK(this->get_Wrappable((VARIANT_BOOL*)&pbWrappable));
    return pbWrappable;
  }

  float __fastcall get_ButtonHeight(void)
  {
    float pfButtonHeight;
    OLECHECK(this->get_ButtonHeight((float*)&pfButtonHeight));
    return pfButtonHeight;
  }

  float __fastcall get_ButtonWidth(void)
  {
    float pfButtonWidth;
    OLECHECK(this->get_ButtonWidth((float*)&pfButtonWidth));
    return pfButtonWidth;
  }

  long __fastcall get_HelpContextID(void)
  {
    long plHelpContextID;
    OLECHECK(this->get_HelpContextID((long*)&plHelpContextID));
    return plHelpContextID;
  }

  BSTR __fastcall get_HelpFile(void)
  {
    BSTR pbstrHelpFile = 0;
    OLECHECK(this->get_HelpFile((BSTR*)&pbstrHelpFile));
    return pbstrHelpFile;
  }

  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void)
  {
    Mscomctllib_xp::OLEDropConstants psOLEDropMode;
    OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
    return psOLEDropMode;
  }

  LPDISPATCH __fastcall get_DisabledImageList(void)
  {
    LPDISPATCH ppDisabledImageList;
    OLECHECK(this->get_DisabledImageList((LPDISPATCH*)&ppDisabledImageList));
    return ppDisabledImageList;
  }

  LPDISPATCH __fastcall get_HotImageList(void)
  {
    LPDISPATCH ppHotImageList;
    OLECHECK(this->get_HotImageList((LPDISPATCH*)&ppHotImageList));
    return ppHotImageList;
  }

  Mscomctllib_xp::ToolbarStyleConstants __fastcall get_Style(void)
  {
    Mscomctllib_xp::ToolbarStyleConstants penumStyle;
    OLECHECK(this->get_Style((Mscomctllib_xp::ToolbarStyleConstants*)&penumStyle));
    return penumStyle;
  }

  Mscomctllib_xp::ToolbarTextAlignConstants __fastcall get_TextAlignment(void)
  {
    Mscomctllib_xp::ToolbarTextAlignConstants penumTextAlignment;
    OLECHECK(this->get_TextAlignment((Mscomctllib_xp::ToolbarTextAlignConstants*)&penumTextAlignment));
    return penumTextAlignment;
  }


  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   VARIANT_BOOL    AllowCustomize = {read = get_AllowCustomize, write = set_AllowCustomize};
  __property   Mscomctllib_xp::IButtons* Buttons = {read = get_Buttons, write = _set_Buttons};
  __property   Mscomctllib_xp::IControls* Controls = {read = get_Controls};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   VARIANT_BOOL    ShowTips = {read = get_ShowTips, write = set_ShowTips};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    Wrappable = {read = get_Wrappable, write = set_Wrappable};
  __property   float           ButtonHeight = {read = get_ButtonHeight, write = set_ButtonHeight};
  __property   float           ButtonWidth = {read = get_ButtonWidth, write = set_ButtonWidth};
  __property   long            HelpContextID = {read = get_HelpContextID, write = set_HelpContextID};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   LPDISPATCH      DisabledImageList = {read = get_DisabledImageList, write = set_DisabledImageList};
  __property   LPDISPATCH      HotImageList = {read = get_HotImageList, write = set_HotImageList};
  __property   Mscomctllib_xp::ToolbarStyleConstants Style = {read = get_Style, write = set_Style};
  __property   Mscomctllib_xp::ToolbarTextAlignConstants TextAlignment = {read = get_TextAlignment, write = set_TextAlignment};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IToolbarEvents
// Flags:     (4096) Dispatchable
// GUID:      {66833FE5-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IToolbarEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall ButtonClick(Mscomctllib_xp::Button* Button)
  {
    _TDispID _dispid(/* ButtonClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::Button*)Button /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick()
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = AllowedEffects /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
    TAutoArgs<2> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/)
  {
    _TDispID _dispid(/* OLESetData */ DISPID(1552));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = DataFormat /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/)
  {
    _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
    TAutoArgs<1> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    _args[7] = State /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
    TAutoArgs<6> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ButtonMenuClick(Mscomctllib_xp::ButtonMenu* ButtonMenu)
  {
    _TDispID _dispid(/* ButtonMenuClick */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::ButtonMenu*)ButtonMenu /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ButtonDropDown(Mscomctllib_xp::Button* Button)
  {
    _TDispID _dispid(/* ButtonDropDown */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::Button*)Button /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IButtons
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FE7-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IButtons  : public IDispatch
{
public:
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Count(short* psCount/*[out,retval]*/) = 0;
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Count(short psCount/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                       Mscomctllib_xp::IButton** ppButton/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                        Mscomctllib_xp::IButton* ppButton/*[in]*/) = 0; // [0]
  // [2] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::IButton** ppButton/*[out,retval]*/) = 0;
  // [2] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE _set_Item(VARIANT* Index/*[in]*/, 
                                              Mscomctllib_xp::IButton* ppButton/*[in]*/) = 0;
  // [3] Removes a specific member from a collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* Index/*[in]*/) = 0;
  // [4] Removes all objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [5] Adds a Button object to a Buttons collection and returns a reference to the created object.
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                        VARIANT* Caption/*[in,opt]*/, VARIANT* Style/*[in,opt]*/, 
                                        VARIANT* Image/*[in,opt]*/, 
                                        Mscomctllib_xp::IButton** ppButton/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPDISPATCH* ppDispatch/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  short __fastcall get_Count(void)
  {
    short psCount;
    OLECHECK(this->get_Count((short*)&psCount));
    return psCount;
  }

  Mscomctllib_xp::IButton* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IButton* ppButton;
    OLECHECK(this->get_ControlDefault(Index, (Mscomctllib_xp::IButton**)&ppButton));
    return ppButton;
  }

  Mscomctllib_xp::IButton* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IButton* ppButton;
    OLECHECK(this->get_Item(Index, (Mscomctllib_xp::IButton**)&ppButton));
    return ppButton;
  }

  Mscomctllib_xp::IButton* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Caption/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Style/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Image/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::IButton* ppButton;
    OLECHECK(this->Add(Index, Key, Caption, Style, Image, (Mscomctllib_xp::IButton**)&ppButton));
    return ppButton;
  }

  LPDISPATCH __fastcall _NewEnum(void)
  {
    LPDISPATCH ppDispatch;
    OLECHECK(this->_NewEnum((LPDISPATCH*)&ppDispatch));
    return ppDispatch;
  }


  __property   short           Count = {read = get_Count, write = set_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IButton
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FE9-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IButton  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__ObjectDefault(BSTR* pbstr_ObjectDefault/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set__ObjectDefault(BSTR pbstr_ObjectDefault/*[in]*/) = 0; // [0]
  // [2] Returns/sets the text displayed in an object's title bar or below an object's icon.
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pbstrCaption/*[out,retval]*/) = 0;
  // [2] Returns/sets the text displayed in an object's title bar or below an object's icon.
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pbstrCaption/*[in]*/) = 0;
  // [1] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE get_Tag(VARIANT* pvTag/*[out,retval]*/) = 0;
  // [1] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [3] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [3] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [4] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE get_Index(short* psIndex/*[out,retval]*/) = 0;
  // [4] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE set_Index(short psIndex/*[in]*/) = 0;
  // [5] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Key(BSTR* pbstrKey/*[out,retval]*/) = 0;
  // [5] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Key(BSTR pbstrKey/*[in]*/) = 0;
  // [6] Returns/sets the string displayed when a cursor hovers over an object.
  virtual HRESULT STDMETHODCALLTYPE get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/) = 0;
  // [6] Returns/sets the string displayed when a cursor hovers over an object.
  virtual HRESULT STDMETHODCALLTYPE set_ToolTipText(BSTR pbstrToolTipText/*[in]*/) = 0;
  // [7] Returns/sets a value that determines whether an object is visible or hidden.
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/) = 0;
  // [7] Returns/sets a value that determines whether an object is visible or hidden.
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pbVisible/*[in]*/) = 0;
  // [8] Returns/sets the width of an object.
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* pfWidth/*[out,retval]*/) = 0;
  // [8] Returns/sets the width of an object.
  virtual HRESULT STDMETHODCALLTYPE set_Width(float pfWidth/*[in]*/) = 0;
  // [9] Returns/sets the height of an object.
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* pfHeight/*[out,retval]*/) = 0;
  // [9] Returns/sets the height of an object.
  virtual HRESULT STDMETHODCALLTYPE set_Height(float pfHeight/*[in]*/) = 0;
  // [10] Returns/sets the distance between the internal top edge of an object and the top edge of its container.
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* pfTop/*[out,retval]*/) = 0;
  // [10] Returns/sets the distance between the internal top edge of an object and the top edge of its container.
  virtual HRESULT STDMETHODCALLTYPE set_Top(float pfTop/*[in]*/) = 0;
  // [11] Returns/sets the distance between the internal left edge of an object and the left edge of its container.
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* pfLeft/*[out,retval]*/) = 0;
  // [11] Returns/sets the distance between the internal left edge of an object and the left edge of its container.
  virtual HRESULT STDMETHODCALLTYPE set_Left(float pfLeft/*[in]*/) = 0;
  // [12] Returns/sets the value of an object.
  virtual HRESULT STDMETHODCALLTYPE get_Value(Mscomctllib_xp::ValueConstants* psValue/*[out,retval]*/) = 0;
  // [12] Returns/sets the value of an object.
  virtual HRESULT STDMETHODCALLTYPE set_Value(Mscomctllib_xp::ValueConstants psValue/*[in]*/) = 0;
  // [13] Returns/sets the button style
  virtual HRESULT STDMETHODCALLTYPE get_Style(Mscomctllib_xp::ButtonStyleConstants* psStyle/*[out,retval]*/) = 0;
  // [13] Returns/sets the button style
  virtual HRESULT STDMETHODCALLTYPE set_Style(Mscomctllib_xp::ButtonStyleConstants psStyle/*[in]*/) = 0;
  // [14] Returns/sets the description displayed when the user clicks a Button object during a customization operation.
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pbstrDescription/*[out,retval]*/) = 0;
  // [14] Returns/sets the description displayed when the user clicks a Button object during a customization operation.
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pbstrDescription/*[in]*/) = 0;
  // [15] Returns/sets the index or key of a ListImage object to be used.
  virtual HRESULT STDMETHODCALLTYPE get_Image(VARIANT* pvImage/*[out,retval]*/) = 0;
  // [15] Returns/sets the index or key of a ListImage object to be used.
  virtual HRESULT STDMETHODCALLTYPE set_Image(VARIANT pvImage/*[in]*/) = 0;
  // [16] Returns/sets the index or key of a ListImage object to be used.
  virtual HRESULT STDMETHODCALLTYPE get_MixedState(VARIANT_BOOL* pbMixedState/*[out,retval]*/) = 0;
  // [16] Returns/sets the index or key of a ListImage object to be used.
  virtual HRESULT STDMETHODCALLTYPE set_MixedState(VARIANT_BOOL pbMixedState/*[in]*/) = 0;
  // [17] Returns a reference to a Button object's collection of ButtonMenu objects.
  virtual HRESULT STDMETHODCALLTYPE get_ButtonMenus(Mscomctllib_xp::IButtonMenus** ppButtonMenus/*[out,retval]*/) = 0;
  // [17] Returns a reference to a Button object's collection of ButtonMenu objects.
  virtual HRESULT STDMETHODCALLTYPE _set_ButtonMenus(Mscomctllib_xp::IButtonMenus* ppButtonMenus/*[in]*/) = 0;
  // [1] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE _set_Tag(VARIANT pvTag/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get__ObjectDefault(void)
  {
    BSTR pbstr_ObjectDefault = 0;
    OLECHECK(this->get__ObjectDefault((BSTR*)&pbstr_ObjectDefault));
    return pbstr_ObjectDefault;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pbstrCaption = 0;
    OLECHECK(this->get_Caption((BSTR*)&pbstrCaption));
    return pbstrCaption;
  }

  VARIANT __fastcall get_Tag(void)
  {
    VARIANT pvTag;
    OLECHECK(this->get_Tag((VARIANT*)&pvTag));
    return pvTag;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  short __fastcall get_Index(void)
  {
    short psIndex;
    OLECHECK(this->get_Index((short*)&psIndex));
    return psIndex;
  }

  BSTR __fastcall get_Key(void)
  {
    BSTR pbstrKey = 0;
    OLECHECK(this->get_Key((BSTR*)&pbstrKey));
    return pbstrKey;
  }

  BSTR __fastcall get_ToolTipText(void)
  {
    BSTR pbstrToolTipText = 0;
    OLECHECK(this->get_ToolTipText((BSTR*)&pbstrToolTipText));
    return pbstrToolTipText;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pbVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pbVisible));
    return pbVisible;
  }

  float __fastcall get_Width(void)
  {
    float pfWidth;
    OLECHECK(this->get_Width((float*)&pfWidth));
    return pfWidth;
  }

  float __fastcall get_Height(void)
  {
    float pfHeight;
    OLECHECK(this->get_Height((float*)&pfHeight));
    return pfHeight;
  }

  float __fastcall get_Top(void)
  {
    float pfTop;
    OLECHECK(this->get_Top((float*)&pfTop));
    return pfTop;
  }

  float __fastcall get_Left(void)
  {
    float pfLeft;
    OLECHECK(this->get_Left((float*)&pfLeft));
    return pfLeft;
  }

  Mscomctllib_xp::ValueConstants __fastcall get_Value(void)
  {
    Mscomctllib_xp::ValueConstants psValue;
    OLECHECK(this->get_Value((Mscomctllib_xp::ValueConstants*)&psValue));
    return psValue;
  }

  Mscomctllib_xp::ButtonStyleConstants __fastcall get_Style(void)
  {
    Mscomctllib_xp::ButtonStyleConstants psStyle;
    OLECHECK(this->get_Style((Mscomctllib_xp::ButtonStyleConstants*)&psStyle));
    return psStyle;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pbstrDescription = 0;
    OLECHECK(this->get_Description((BSTR*)&pbstrDescription));
    return pbstrDescription;
  }

  VARIANT __fastcall get_Image(void)
  {
    VARIANT pvImage;
    OLECHECK(this->get_Image((VARIANT*)&pvImage));
    return pvImage;
  }

  VARIANT_BOOL __fastcall get_MixedState(void)
  {
    VARIANT_BOOL pbMixedState;
    OLECHECK(this->get_MixedState((VARIANT_BOOL*)&pbMixedState));
    return pbMixedState;
  }

  Mscomctllib_xp::IButtonMenus* __fastcall get_ButtonMenus(void)
  {
    Mscomctllib_xp::IButtonMenus* ppButtonMenus;
    OLECHECK(this->get_ButtonMenus((Mscomctllib_xp::IButtonMenus**)&ppButtonMenus));
    return ppButtonMenus;
  }


  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   BSTR            Caption = {read = get_Caption};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Mscomctllib_xp::ValueConstants Value = {read = get_Value, write = set_Value};
  __property   Mscomctllib_xp::ButtonStyleConstants Style = {read = get_Style, write = set_Style};
  __property   BSTR            Description = {read = get_Description};
  __property   VARIANT_BOOL    MixedState = {read = get_MixedState, write = set_MixedState};
  __property   Mscomctllib_xp::IButtonMenus* ButtonMenus = {read = get_ButtonMenus, write = _set_ButtonMenus};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IButtonMenus
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FEB-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IButtonMenus  : public IDispatch
{
public:
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Count(short* psCount/*[out,retval]*/) = 0;
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Count(short psCount/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                       Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                        Mscomctllib_xp::IButtonMenu* ppButtonMenu/*[in]*/) = 0; // [0]
  // [2] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/) = 0;
  // [2] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE _set_Item(VARIANT* Index/*[in]*/, 
                                              Mscomctllib_xp::IButtonMenu* ppButtonMenu/*[in]*/) = 0;
  // [3] Removes a specific member from a collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* Index/*[in]*/) = 0;
  // [4] Removes all objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [5] Adds a ButtonMenu object to a ButtonMenus collection and returns a reference to the created object.
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                        VARIANT* Text/*[in,opt]*/, 
                                        Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPDISPATCH* ppDispatch/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  short __fastcall get_Count(void)
  {
    short psCount;
    OLECHECK(this->get_Count((short*)&psCount));
    return psCount;
  }

  Mscomctllib_xp::IButtonMenu* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IButtonMenu* ppButtonMenu;
    OLECHECK(this->get_ControlDefault(Index, (Mscomctllib_xp::IButtonMenu**)&ppButtonMenu));
    return ppButtonMenu;
  }

  Mscomctllib_xp::IButtonMenu* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IButtonMenu* ppButtonMenu;
    OLECHECK(this->get_Item(Index, (Mscomctllib_xp::IButtonMenu**)&ppButtonMenu));
    return ppButtonMenu;
  }

  Mscomctllib_xp::IButtonMenu* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                              VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                              VARIANT* Text/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::IButtonMenu* ppButtonMenu;
    OLECHECK(this->Add(Index, Key, Text, (Mscomctllib_xp::IButtonMenu**)&ppButtonMenu));
    return ppButtonMenu;
  }

  LPDISPATCH __fastcall _NewEnum(void)
  {
    LPDISPATCH ppDispatch;
    OLECHECK(this->_NewEnum((LPDISPATCH*)&ppDispatch));
    return ppDispatch;
  }


  __property   short           Count = {read = get_Count, write = set_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IButtonMenu
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FED-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IButtonMenu  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__ObjectDefault(BSTR* pbstrObjectDefault/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set__ObjectDefault(BSTR pbstrObjectDefault/*[in]*/) = 0; // [0]
  // [1] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [1] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [2] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE get_Index(short* psIndex/*[out,retval]*/) = 0;
  // [2] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE set_Index(short psIndex/*[in]*/) = 0;
  // [3] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Key(BSTR* pbstrKey/*[out,retval]*/) = 0;
  // [3] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Key(BSTR pbstrKey/*[in]*/) = 0;
  // [4] Returns/sets a reference to the parent Button of a ButtonMenu object.
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Mscomctllib_xp::IButton** ppParent/*[out,retval]*/) = 0;
  // [4] Returns/sets a reference to the parent Button of a ButtonMenu object.
  virtual HRESULT STDMETHODCALLTYPE _set_Parent(Mscomctllib_xp::IButton* ppParent/*[in]*/) = 0;
  // [5] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE get_Tag(VARIANT* pvTag/*[out,retval]*/) = 0;
  // [5] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [6] Returns/sets the text displayed in the ButtonMenu item.
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstrText/*[out,retval]*/) = 0;
  // [6] Returns/sets the text displayed in the ButtonMenu item.
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstrText/*[in]*/) = 0;
  // [7] Returns/sets a value that determines whether an object is visible or hidden.
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/) = 0;
  // [7] Returns/sets a value that determines whether an object is visible or hidden.
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pbVisible/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get__ObjectDefault(void)
  {
    BSTR pbstrObjectDefault = 0;
    OLECHECK(this->get__ObjectDefault((BSTR*)&pbstrObjectDefault));
    return pbstrObjectDefault;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  short __fastcall get_Index(void)
  {
    short psIndex;
    OLECHECK(this->get_Index((short*)&psIndex));
    return psIndex;
  }

  BSTR __fastcall get_Key(void)
  {
    BSTR pbstrKey = 0;
    OLECHECK(this->get_Key((BSTR*)&pbstrKey));
    return pbstrKey;
  }

  Mscomctllib_xp::IButton* __fastcall get_Parent(void)
  {
    Mscomctllib_xp::IButton* ppParent;
    OLECHECK(this->get_Parent((Mscomctllib_xp::IButton**)&ppParent));
    return ppParent;
  }

  VARIANT __fastcall get_Tag(void)
  {
    VARIANT pvTag;
    OLECHECK(this->get_Tag((VARIANT*)&pvTag));
    return pvTag;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstrText));
    return pbstrText;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pbVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pbVisible));
    return pbVisible;
  }


  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   Mscomctllib_xp::IButton* Parent = {read = get_Parent, write = _set_Parent};
  __property   BSTR            Text = {read = get_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IStatusBar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E3867A1-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IStatusBar  : public IDispatch
{
public:
  // [1] Returns/sets the text displayed when a StatusBar control's Style property is set to Simple.
  virtual HRESULT STDMETHODCALLTYPE get_SimpleText(BSTR* pbstrSimpleText/*[out,retval]*/) = 0;
  // [1] Returns/sets the text displayed when a StatusBar control's Style property is set to Simple.
  virtual HRESULT STDMETHODCALLTYPE set_SimpleText(BSTR pbstrSimpleText/*[in]*/) = 0;
  // [2] Returns/sets the the single (simple) or multiple panel style
  virtual HRESULT STDMETHODCALLTYPE get_Style(Mscomctllib_xp::SbarStyleConstants* psStyle/*[out,retval]*/) = 0;
  // [2] Returns/sets the the single (simple) or multiple panel style
  virtual HRESULT STDMETHODCALLTYPE set_Style(Mscomctllib_xp::SbarStyleConstants psStyle/*[in]*/) = 0;
  // [3] Returns a reference to a collection of Panel objects.
  virtual HRESULT STDMETHODCALLTYPE get_Panels(Mscomctllib_xp::IPanels** ppPanels/*[out,retval]*/) = 0;
  // [3] Returns a reference to a collection of Panel objects.
  virtual HRESULT STDMETHODCALLTYPE _set_Panels(Mscomctllib_xp::IPanels* ppPanels/*[in]*/) = 0;
  // [4] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/) = 0;
  // [4] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/) = 0;
  // [5] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/) = 0;
  // [5] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [5] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [7] Enables/disables ToolTips for panels
  virtual HRESULT STDMETHODCALLTYPE get_ShowTips(VARIANT_BOOL* bShowTips/*[out,retval]*/) = 0;
  // [7] Enables/disables ToolTips for panels
  virtual HRESULT STDMETHODCALLTYPE set_ShowTips(VARIANT_BOOL bShowTips/*[in]*/) = 0;
  // [6] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE get_PanelProperties(BSTR* pbstrPanelProperties/*[out,retval]*/) = 0;
  // [6] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE set_PanelProperties(BSTR pbstrPanelProperties/*[in]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** ppFont/*[out,retval]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp* ppFont/*[in]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE set_hWnd(OLE_HANDLE phWnd/*[in]*/) = 0;
  // [-550] Forces a complete repaint of a form or control.
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0;
  // [1552] Starts an OLE drag/drop event with the given control as the source.
  virtual HRESULT STDMETHODCALLTYPE OLEDrag(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SimpleText(void)
  {
    BSTR pbstrSimpleText = 0;
    OLECHECK(this->get_SimpleText((BSTR*)&pbstrSimpleText));
    return pbstrSimpleText;
  }

  Mscomctllib_xp::SbarStyleConstants __fastcall get_Style(void)
  {
    Mscomctllib_xp::SbarStyleConstants psStyle;
    OLECHECK(this->get_Style((Mscomctllib_xp::SbarStyleConstants*)&psStyle));
    return psStyle;
  }

  Mscomctllib_xp::IPanels* __fastcall get_Panels(void)
  {
    Mscomctllib_xp::IPanels* ppPanels;
    OLECHECK(this->get_Panels((Mscomctllib_xp::IPanels**)&ppPanels));
    return ppPanels;
  }

  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void)
  {
    Mscomctllib_xp::MousePointerConstants psMousePointer;
    OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer));
    return psMousePointer;
  }

  IPictureDisp* __fastcall get_MouseIcon(void)
  {
    IPictureDisp* ppMouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
    return ppMouseIcon;
  }

  VARIANT_BOOL __fastcall get_ShowTips(void)
  {
    VARIANT_BOOL bShowTips;
    OLECHECK(this->get_ShowTips((VARIANT_BOOL*)&bShowTips));
    return bShowTips;
  }

  BSTR __fastcall get_PanelProperties(void)
  {
    BSTR pbstrPanelProperties = 0;
    OLECHECK(this->get_PanelProperties((BSTR*)&pbstrPanelProperties));
    return pbstrPanelProperties;
  }

  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void)
  {
    Mscomctllib_xp::OLEDropConstants psOLEDropMode;
    OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
    return psOLEDropMode;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  IFontDisp* __fastcall get_Font(void)
  {
    IFontDisp* ppFont;
    OLECHECK(this->get_Font((IFontDisp**)&ppFont));
    return ppFont;
  }

  OLE_HANDLE __fastcall get_hWnd(void)
  {
    OLE_HANDLE phWnd;
    OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
    return phWnd;
  }


  __property   BSTR            SimpleText = {read = get_SimpleText};
  __property   Mscomctllib_xp::SbarStyleConstants Style = {read = get_Style, write = set_Style};
  __property   Mscomctllib_xp::IPanels* Panels = {read = get_Panels, write = _set_Panels};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   VARIANT_BOOL    ShowTips = {read = get_ShowTips, write = set_ShowTips};
  __property   BSTR            PanelProperties = {read = get_PanelProperties};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = _set_Font};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IStatusBarEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {8E3867A2-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IStatusBarEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall PanelClick(Mscomctllib_xp::Panel* Panel)
  {
    _TDispID _dispid(/* PanelClick */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::Panel*)Panel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall PanelDblClick(Mscomctllib_xp::Panel* Panel)
  {
    _TDispID _dispid(/* PanelDblClick */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::Panel*)Panel /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick()
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = AllowedEffects /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
    TAutoArgs<2> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/)
  {
    _TDispID _dispid(/* OLESetData */ DISPID(1552));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = DataFormat /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/)
  {
    _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
    TAutoArgs<1> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    _args[7] = State /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
    TAutoArgs<6> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IPanels
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E3867A4-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IPanels  : public IDispatch
{
public:
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Count(short* sCount/*[out,retval]*/) = 0;
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Count(short sCount/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                       Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                        Mscomctllib_xp::IPanel* ppPanel/*[in]*/) = 0; // [0]
  // [2] Adds a Panel object to a Panels collection and returns a reference to the created Panel.
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                        VARIANT* Text/*[in,opt]*/, VARIANT* Style/*[in,opt]*/, 
                                        VARIANT* Picture/*[in,opt]*/, 
                                        Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/) = 0;
  // [3] Removes all objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [4] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/) = 0;
  // [4] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE _set_Item(VARIANT* Index/*[in]*/, 
                                              Mscomctllib_xp::IPanel* ppPanel/*[in]*/) = 0;
  // [5] Removes a specific member from a collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* Index/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  short __fastcall get_Count(void)
  {
    short sCount;
    OLECHECK(this->get_Count((short*)&sCount));
    return sCount;
  }

  Mscomctllib_xp::IPanel* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IPanel* ppPanel;
    OLECHECK(this->get_ControlDefault(Index, (Mscomctllib_xp::IPanel**)&ppPanel));
    return ppPanel;
  }

  Mscomctllib_xp::IPanel* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Style/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Picture/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::IPanel* ppPanel;
    OLECHECK(this->Add(Index, Key, Text, Style, Picture, (Mscomctllib_xp::IPanel**)&ppPanel));
    return ppPanel;
  }

  Mscomctllib_xp::IPanel* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IPanel* ppPanel;
    OLECHECK(this->get_Item(Index, (Mscomctllib_xp::IPanel**)&ppPanel));
    return ppPanel;
  }

  LPDISPATCH __fastcall _NewEnum(void)
  {
    LPDISPATCH ppNewEnum;
    OLECHECK(this->_NewEnum((LPDISPATCH*)&ppNewEnum));
    return ppNewEnum;
  }


  __property   short           Count = {read = get_Count, write = set_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IPanel
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E3867AA-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IPanel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set__ObjectDefault(BSTR pbstrText/*[in]*/) = 0; // [0]
  // [1] Returns/sets the alignment of a StatusBar control, bottom, top, left, right, or floating
  virtual HRESULT STDMETHODCALLTYPE get_Alignment(Mscomctllib_xp::PanelAlignmentConstants* psAlignment/*[out,retval]*/) = 0;
  // [1] Returns/sets the alignment of a StatusBar control, bottom, top, left, right, or floating
  virtual HRESULT STDMETHODCALLTYPE set_Alignment(Mscomctllib_xp::PanelAlignmentConstants psAlignment/*[in]*/) = 0;
  // [2] Returns/sets a value that allows the width of a Panel object to be automatically sized when the panel's contents change or the parent form resizes
  virtual HRESULT STDMETHODCALLTYPE get_AutoSize(Mscomctllib_xp::PanelAutoSizeConstants* psAutoSize/*[out,retval]*/) = 0;
  // [2] Returns/sets a value that allows the width of a Panel object to be automatically sized when the panel's contents change or the parent form resizes
  virtual HRESULT STDMETHODCALLTYPE set_AutoSize(Mscomctllib_xp::PanelAutoSizeConstants psAutoSize/*[in]*/) = 0;
  // [3] Returns/sets the bevel appearance of a Panel object, inset, raised, or none
  virtual HRESULT STDMETHODCALLTYPE get_Bevel(Mscomctllib_xp::PanelBevelConstants* psBevel/*[out,retval]*/) = 0;
  // [3] Returns/sets the bevel appearance of a Panel object, inset, raised, or none
  virtual HRESULT STDMETHODCALLTYPE set_Bevel(Mscomctllib_xp::PanelBevelConstants psBevel/*[in]*/) = 0;
  // [4] Returns/sets a value that determines whether a form or control can respond to user-generated events
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [4] Returns/sets a value that determines whether a form or control can respond to user-generated events
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [5] Returns/sets the index of an object in a collection. Read-only at run time
  virtual HRESULT STDMETHODCALLTYPE get_Index(short* sIndex/*[out,retval]*/) = 0;
  // [5] Returns/sets the index of an object in a collection. Read-only at run time
  virtual HRESULT STDMETHODCALLTYPE set_Index(short sIndex/*[in]*/) = 0;
  // [6] Returns/sets the unique string of an object in a collection
  virtual HRESULT STDMETHODCALLTYPE get_Key(BSTR* pbstrKey/*[out,retval]*/) = 0;
  // [6] Returns/sets the unique string of an object in a collection
  virtual HRESULT STDMETHODCALLTYPE set_Key(BSTR pbstrKey/*[in]*/) = 0;
  // [7] Returns/sets the distance between the internal left edge of an object and the left edge of its container
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* pfLeft/*[out,retval]*/) = 0;
  // [7] Returns/sets the distance between the internal left edge of an object and the left edge of its container
  virtual HRESULT STDMETHODCALLTYPE set_Left(float pfLeft/*[in]*/) = 0;
  // [8] Returns/sets the minimum width of a Panel object
  virtual HRESULT STDMETHODCALLTYPE get_MinWidth(float* pfMinWidth/*[out,retval]*/) = 0;
  // [8] Returns/sets the minimum width of a Panel object
  virtual HRESULT STDMETHODCALLTYPE set_MinWidth(float pfMinWidth/*[in]*/) = 0;
  // [9] Returns/sets the Picture property for a Panel object
  virtual HRESULT STDMETHODCALLTYPE get_Picture(IPictureDisp** ppPicture/*[out,retval]*/) = 0;
  // [9] Returns/sets the Picture property for a Panel object
  virtual HRESULT STDMETHODCALLTYPE _set_Picture(IPictureDisp* ppPicture/*[in]*/) = 0;
  // [10] Returns/sets the style of a StatusBar Panel object
  virtual HRESULT STDMETHODCALLTYPE get_Style(Mscomctllib_xp::PanelStyleConstants* psStyle/*[out,retval]*/) = 0;
  // [10] Returns/sets the style of a StatusBar Panel object
  virtual HRESULT STDMETHODCALLTYPE set_Style(Mscomctllib_xp::PanelStyleConstants psStyle/*[in]*/) = 0;
  // [14] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE get_Tag(VARIANT* pvTag/*[out,retval]*/) = 0;
  // [14] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [11] Returns/sets the text to be displayed in a control
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstrText/*[out,retval]*/) = 0;
  // [11] Returns/sets the text to be displayed in a control
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstrText/*[in]*/) = 0;
  // [15] Returns/sets the string displayed when a cursor hovers over an object.
  virtual HRESULT STDMETHODCALLTYPE get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/) = 0;
  // [15] Returns/sets the string displayed when a cursor hovers over an object.
  virtual HRESULT STDMETHODCALLTYPE set_ToolTipText(BSTR pbstrToolTipText/*[in]*/) = 0;
  // [12] Returns/sets a value that determines whether an object is visible or hidden
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/) = 0;
  // [12] Returns/sets a value that determines whether an object is visible or hidden
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pbVisible/*[in]*/) = 0;
  // [13] Returns/sets the width of an object
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* pfWidth/*[out,retval]*/) = 0;
  // [13] Returns/sets the width of an object
  virtual HRESULT STDMETHODCALLTYPE set_Width(float pfWidth/*[in]*/) = 0;
  // [9] Returns/sets the Picture property for a Panel object
  virtual HRESULT STDMETHODCALLTYPE set_Picture(IPictureDisp* ppPicture/*[in]*/) = 0;
  // [14] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE _set_Tag(VARIANT pvTag/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get__ObjectDefault(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get__ObjectDefault((BSTR*)&pbstrText));
    return pbstrText;
  }

  Mscomctllib_xp::PanelAlignmentConstants __fastcall get_Alignment(void)
  {
    Mscomctllib_xp::PanelAlignmentConstants psAlignment;
    OLECHECK(this->get_Alignment((Mscomctllib_xp::PanelAlignmentConstants*)&psAlignment));
    return psAlignment;
  }

  Mscomctllib_xp::PanelAutoSizeConstants __fastcall get_AutoSize(void)
  {
    Mscomctllib_xp::PanelAutoSizeConstants psAutoSize;
    OLECHECK(this->get_AutoSize((Mscomctllib_xp::PanelAutoSizeConstants*)&psAutoSize));
    return psAutoSize;
  }

  Mscomctllib_xp::PanelBevelConstants __fastcall get_Bevel(void)
  {
    Mscomctllib_xp::PanelBevelConstants psBevel;
    OLECHECK(this->get_Bevel((Mscomctllib_xp::PanelBevelConstants*)&psBevel));
    return psBevel;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  short __fastcall get_Index(void)
  {
    short sIndex;
    OLECHECK(this->get_Index((short*)&sIndex));
    return sIndex;
  }

  BSTR __fastcall get_Key(void)
  {
    BSTR pbstrKey = 0;
    OLECHECK(this->get_Key((BSTR*)&pbstrKey));
    return pbstrKey;
  }

  float __fastcall get_Left(void)
  {
    float pfLeft;
    OLECHECK(this->get_Left((float*)&pfLeft));
    return pfLeft;
  }

  float __fastcall get_MinWidth(void)
  {
    float pfMinWidth;
    OLECHECK(this->get_MinWidth((float*)&pfMinWidth));
    return pfMinWidth;
  }

  IPictureDisp* __fastcall get_Picture(void)
  {
    IPictureDisp* ppPicture;
    OLECHECK(this->get_Picture((IPictureDisp**)&ppPicture));
    return ppPicture;
  }

  Mscomctllib_xp::PanelStyleConstants __fastcall get_Style(void)
  {
    Mscomctllib_xp::PanelStyleConstants psStyle;
    OLECHECK(this->get_Style((Mscomctllib_xp::PanelStyleConstants*)&psStyle));
    return psStyle;
  }

  VARIANT __fastcall get_Tag(void)
  {
    VARIANT pvTag;
    OLECHECK(this->get_Tag((VARIANT*)&pvTag));
    return pvTag;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstrText));
    return pbstrText;
  }

  BSTR __fastcall get_ToolTipText(void)
  {
    BSTR pbstrToolTipText = 0;
    OLECHECK(this->get_ToolTipText((BSTR*)&pbstrToolTipText));
    return pbstrToolTipText;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pbVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pbVisible));
    return pbVisible;
  }

  float __fastcall get_Width(void)
  {
    float pfWidth;
    OLECHECK(this->get_Width((float*)&pfWidth));
    return pfWidth;
  }


  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   Mscomctllib_xp::PanelAlignmentConstants Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Mscomctllib_xp::PanelAutoSizeConstants AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Mscomctllib_xp::PanelBevelConstants Bevel = {read = get_Bevel, write = set_Bevel};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   IPictureDisp*   Picture = {read = get_Picture, write = set_Picture};
  __property   Mscomctllib_xp::PanelStyleConstants Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IProgressBar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {35053A20-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IProgressBar  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ControlDefault(float* pfValue/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_ControlDefault(float pfValue/*[in]*/) = 0; // [0]
  // [1] Returns/sets a control's maximum value.
  virtual HRESULT STDMETHODCALLTYPE get_Max(float* pfMax/*[out,retval]*/) = 0;
  // [1] Returns/sets a control's maximum value.
  virtual HRESULT STDMETHODCALLTYPE set_Max(float pfMax/*[in]*/) = 0;
  // [2] Returns/sets a control's minimum value.
  virtual HRESULT STDMETHODCALLTYPE get_Min(float* pfMin/*[out,retval]*/) = 0;
  // [2] Returns/sets a control's minimum value.
  virtual HRESULT STDMETHODCALLTYPE set_Min(float pfMin/*[in]*/) = 0;
  // [3] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Mscomctllib_xp::MousePointerConstants* pMousePointers/*[out,retval]*/) = 0;
  // [3] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Mscomctllib_xp::MousePointerConstants pMousePointers/*[in]*/) = 0;
  // [4] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp** ppPictureDisp/*[out,retval]*/) = 0;
  // [4] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp* ppPictureDisp/*[in]*/) = 0;
  // [4] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp* ppPictureDisp/*[in]*/) = 0;
  // [5] Returns or sets a control's current Value property.
  virtual HRESULT STDMETHODCALLTYPE get_Value(float* pfValue/*[out,retval]*/) = 0;
  // [5] Returns or sets a control's current Value property.
  virtual HRESULT STDMETHODCALLTYPE set_Value(float pfValue/*[in]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/) = 0;
  // [-520] Returns/sets whether or not controls, Forms or an MDIForm are painted at run time with 3-D effects.
  virtual HRESULT STDMETHODCALLTYPE get_Appearance(Mscomctllib_xp::AppearanceConstants* penumAppearances/*[out,retval]*/) = 0;
  // [-520] Returns/sets whether or not controls, Forms or an MDIForm are painted at run time with 3-D effects.
  virtual HRESULT STDMETHODCALLTYPE set_Appearance(Mscomctllib_xp::AppearanceConstants penumAppearances/*[in]*/) = 0;
  // [-504] Returns/sets the border style for an object.
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* penumBorderStyles/*[out,retval]*/) = 0;
  // [-504] Returns/sets the border style for an object.
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Mscomctllib_xp::BorderStyleConstants penumBorderStyles/*[in]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* bEnabled/*[out,retval]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL bEnabled/*[in]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/) = 0;
  // [1552] Starts an OLE drag/drop event with the given control as the source.
  virtual HRESULT STDMETHODCALLTYPE OLEDrag(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]
  // [6] Returns/sets a value that determines whether the Progress Bar is displayed vertically or horizontally.
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Mscomctllib_xp::OrientationConstants* penumOrientation/*[out,retval]*/) = 0;
  // [6] Returns/sets a value that determines whether the Progress Bar is displayed vertically or horizontally.
  virtual HRESULT STDMETHODCALLTYPE set_Orientation(Mscomctllib_xp::OrientationConstants penumOrientation/*[in]*/) = 0;
  // [7] Returns/sets a value that determines whether the control displays progress with a standard segmented bar or a smooth bar.
  virtual HRESULT STDMETHODCALLTYPE get_Scrolling(Mscomctllib_xp::ScrollingConstants* penumScrolling/*[out,retval]*/) = 0;
  // [7] Returns/sets a value that determines whether the control displays progress with a standard segmented bar or a smooth bar.
  virtual HRESULT STDMETHODCALLTYPE set_Scrolling(Mscomctllib_xp::ScrollingConstants penumScrolling/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0; // [-550]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  float __fastcall get_ControlDefault(void)
  {
    float pfValue;
    OLECHECK(this->get_ControlDefault((float*)&pfValue));
    return pfValue;
  }

  float __fastcall get_Max(void)
  {
    float pfMax;
    OLECHECK(this->get_Max((float*)&pfMax));
    return pfMax;
  }

  float __fastcall get_Min(void)
  {
    float pfMin;
    OLECHECK(this->get_Min((float*)&pfMin));
    return pfMin;
  }

  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void)
  {
    Mscomctllib_xp::MousePointerConstants pMousePointers;
    OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&pMousePointers));
    return pMousePointers;
  }

  IPictureDisp* __fastcall get_MouseIcon(void)
  {
    IPictureDisp* ppPictureDisp;
    OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppPictureDisp));
    return ppPictureDisp;
  }

  float __fastcall get_Value(void)
  {
    float pfValue;
    OLECHECK(this->get_Value((float*)&pfValue));
    return pfValue;
  }

  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void)
  {
    Mscomctllib_xp::OLEDropConstants psOLEDropMode;
    OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
    return psOLEDropMode;
  }

  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void)
  {
    Mscomctllib_xp::AppearanceConstants penumAppearances;
    OLECHECK(this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&penumAppearances));
    return penumAppearances;
  }

  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void)
  {
    Mscomctllib_xp::BorderStyleConstants penumBorderStyles;
    OLECHECK(this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&penumBorderStyles));
    return penumBorderStyles;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL bEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&bEnabled));
    return bEnabled;
  }

  OLE_HANDLE __fastcall get_hWnd(void)
  {
    OLE_HANDLE phWnd;
    OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
    return phWnd;
  }

  Mscomctllib_xp::OrientationConstants __fastcall get_Orientation(void)
  {
    Mscomctllib_xp::OrientationConstants penumOrientation;
    OLECHECK(this->get_Orientation((Mscomctllib_xp::OrientationConstants*)&penumOrientation));
    return penumOrientation;
  }

  Mscomctllib_xp::ScrollingConstants __fastcall get_Scrolling(void)
  {
    Mscomctllib_xp::ScrollingConstants penumScrolling;
    OLECHECK(this->get_Scrolling((Mscomctllib_xp::ScrollingConstants*)&penumScrolling));
    return penumScrolling;
  }


  __property   float           ControlDefault = {read = get_ControlDefault, write = set_ControlDefault};
  __property   float           Max = {read = get_Max, write = set_Max};
  __property   float           Min = {read = get_Min, write = set_Min};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   float           Value = {read = get_Value, write = set_Value};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd};
  __property   Mscomctllib_xp::OrientationConstants Orientation = {read = get_Orientation, write = set_Orientation};
  __property   Mscomctllib_xp::ScrollingConstants Scrolling = {read = get_Scrolling, write = set_Scrolling};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IProgressBarEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {35053A21-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IProgressBarEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = AllowedEffects /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
    TAutoArgs<2> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/)
  {
    _TDispID _dispid(/* OLESetData */ DISPID(1552));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = DataFormat /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/)
  {
    _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
    TAutoArgs<1> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    _args[7] = State /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
    TAutoArgs<6> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: ITreeView
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C74190B4-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface ITreeView  : public IDispatch
{
public:
  // [1] Returns a reference to a Node or ListItem object and highlights the object with the system highlight color.
  virtual HRESULT STDMETHODCALLTYPE get_DropHighlight(Mscomctllib_xp::INode** ppNode/*[out,retval]*/) = 0;
  // [1] Returns a reference to a Node or ListItem object and highlights the object with the system highlight color.
  virtual HRESULT STDMETHODCALLTYPE _set_DropHighlight(Mscomctllib_xp::INode* ppNode/*[in]*/) = 0;
  // [1] Returns a reference to a Node or ListItem object and highlights the object with the system highlight color.
  virtual HRESULT STDMETHODCALLTYPE set_DropHighlight(VARIANT* ppNode/*[in]*/) = 0;
  // [2] Determines whether the selected item will display as selected when the TreeView loses focus
  virtual HRESULT STDMETHODCALLTYPE get_HideSelection(VARIANT_BOOL* pbHideSelection/*[out,retval]*/) = 0;
  // [2] Determines whether the selected item will display as selected when the TreeView loses focus
  virtual HRESULT STDMETHODCALLTYPE set_HideSelection(VARIANT_BOOL pbHideSelection/*[in]*/) = 0;
  // [3] Returns/sets the ImageList control to be used.
  virtual HRESULT STDMETHODCALLTYPE get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/) = 0;
  // [3] Returns/sets the ImageList control to be used.
  virtual HRESULT STDMETHODCALLTYPE _set_ImageList(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [3] Returns/sets the ImageList control to be used.
  virtual HRESULT STDMETHODCALLTYPE set_ImageList(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [4] Returns/sets the width of the indentation for a TreeView control.
  virtual HRESULT STDMETHODCALLTYPE get_Indentation(float* pfIndentation/*[out,retval]*/) = 0;
  // [4] Returns/sets the width of the indentation for a TreeView control.
  virtual HRESULT STDMETHODCALLTYPE set_Indentation(float pfIndentation/*[in]*/) = 0;
  // [5] Returns/sets a value that determines if a user can edit the label of a ListItem or Node object.
  virtual HRESULT STDMETHODCALLTYPE get_LabelEdit(Mscomctllib_xp::LabelEditConstants* psLabelEdit/*[out,retval]*/) = 0;
  // [5] Returns/sets a value that determines if a user can edit the label of a ListItem or Node object.
  virtual HRESULT STDMETHODCALLTYPE set_LabelEdit(Mscomctllib_xp::LabelEditConstants psLabelEdit/*[in]*/) = 0;
  // [6] Returns/sets the style of lines displayed between Node objects.
  virtual HRESULT STDMETHODCALLTYPE get_LineStyle(Mscomctllib_xp::TreeLineStyleConstants* psLineStyle/*[out,retval]*/) = 0;
  // [6] Returns/sets the style of lines displayed between Node objects.
  virtual HRESULT STDMETHODCALLTYPE set_LineStyle(Mscomctllib_xp::TreeLineStyleConstants psLineStyle/*[in]*/) = 0;
  // [7] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/) = 0;
  // [7] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/) = 0;
  // [8] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/) = 0;
  // [8] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [8] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [9] Returns a reference to a collection of Node objects.
  virtual HRESULT STDMETHODCALLTYPE get_Nodes(Mscomctllib_xp::INodes** ppNode/*[out,retval]*/) = 0;
  // [9] Returns a reference to a collection of Node objects.
  virtual HRESULT STDMETHODCALLTYPE _set_Nodes(Mscomctllib_xp::INodes* ppNode/*[in]*/) = 0;
  // [10] Returns/sets the delimiter string used for the path returned by the FullPath property.
  virtual HRESULT STDMETHODCALLTYPE get_PathSeparator(BSTR* pbstrPathSeparator/*[out,retval]*/) = 0;
  // [10] Returns/sets the delimiter string used for the path returned by the FullPath property.
  virtual HRESULT STDMETHODCALLTYPE set_PathSeparator(BSTR pbstrPathSeparator/*[in]*/) = 0;
  // [11] Returns/sets a value which determines if a ListItem or Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE get_SelectedItem(Mscomctllib_xp::INode** ppNode/*[out,retval]*/) = 0;
  // [11] Returns/sets a value which determines if a ListItem or Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE _set_SelectedItem(Mscomctllib_xp::INode* ppNode/*[in]*/) = 0;
  // [11] Returns/sets a value which determines if a ListItem or Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE set_SelectedItem(VARIANT* ppNode/*[in]*/) = 0;
  // [12] Indicates whether the elements of a control are automatically sorted alphabetically.
  virtual HRESULT STDMETHODCALLTYPE get_Sorted(VARIANT_BOOL* pbSorted/*[out,retval]*/) = 0;
  // [12] Indicates whether the elements of a control are automatically sorted alphabetically.
  virtual HRESULT STDMETHODCALLTYPE set_Sorted(VARIANT_BOOL pbSorted/*[in]*/) = 0;
  // [13] Displays a hierarchical list of Node objects, each of which consists of a label and an optional bitmap.
  virtual HRESULT STDMETHODCALLTYPE get_Style(Mscomctllib_xp::TreeStyleConstants* psStyle/*[out,retval]*/) = 0;
  // [13] Displays a hierarchical list of Node objects, each of which consists of a label and an optional bitmap.
  virtual HRESULT STDMETHODCALLTYPE set_Style(Mscomctllib_xp::TreeStyleConstants psStyle/*[in]*/) = 0;
  // [1550] Returns/Sets whether this control can act as an OLE drag/drop source, and whether this process is started automatically or under programmatic control.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/) = 0;
  // [1550] Returns/Sets whether this control can act as an OLE drag/drop source, and whether this process is started automatically or under programmatic control.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/) = 0;
  // [-520] Returns/sets whether or not controls, Forms or an MDIForm are painted at run time with 3-D effects.
  virtual HRESULT STDMETHODCALLTYPE get_Appearance(Mscomctllib_xp::AppearanceConstants* psAppearance/*[out,retval]*/) = 0;
  // [-520] Returns/sets whether or not controls, Forms or an MDIForm are painted at run time with 3-D effects.
  virtual HRESULT STDMETHODCALLTYPE set_Appearance(Mscomctllib_xp::AppearanceConstants psAppearance/*[in]*/) = 0;
  // [-504] Returns/sets the border style for an object.
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/) = 0;
  // [-504] Returns/sets the border style for an object.
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** ppFont/*[out,retval]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE set_Font(IFontDisp* ppFont/*[in]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp* ppFont/*[in]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE set_hWnd(OLE_HANDLE phWnd/*[in]*/) = 0;
  // [14] Returns a reference to the ListItem object or Node object located at the coordinates of x and y. Used with drag and drop operations.
  virtual HRESULT STDMETHODCALLTYPE HitTest(float x/*[in]*/, float y/*[in]*/, 
                                            Mscomctllib_xp::INode** ppNode/*[out,retval]*/) = 0;
  // [15] Returns the number of Node objects that fit in the internal area of a TreeView control.
  virtual HRESULT STDMETHODCALLTYPE GetVisibleCount(long* plVisibleCount/*[out,retval]*/) = 0;
  // [16] Begins a label editing operation on a ListItem or Node object.
  virtual HRESULT STDMETHODCALLTYPE StartLabelEdit(void) = 0;
  // [-550] Forces a complete repaint of a form or control.
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0;
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]
  // [1552] Starts an OLE drag/drop event with the given control as the source.
  virtual HRESULT STDMETHODCALLTYPE OLEDrag(void) = 0;
  // [17] Returns/sets a value which determines if the control displays a checkbox next to each item in the tree.
  virtual HRESULT STDMETHODCALLTYPE get_Checkboxes(VARIANT_BOOL* pbCheckboxes/*[out,retval]*/) = 0;
  // [17] Returns/sets a value which determines if the control displays a checkbox next to each item in the tree.
  virtual HRESULT STDMETHODCALLTYPE set_Checkboxes(VARIANT_BOOL pbCheckboxes/*[in]*/) = 0;
  // [18] Returns/sets a value which determines if the entire row of the selected item is highlighted and clicking anywhere on an item's row causes it to be selected.
  virtual HRESULT STDMETHODCALLTYPE get_FullRowSelect(VARIANT_BOOL* pbFullRowSelect/*[out,retval]*/) = 0;
  // [18] Returns/sets a value which determines if the entire row of the selected item is highlighted and clicking anywhere on an item's row causes it to be selected.
  virtual HRESULT STDMETHODCALLTYPE set_FullRowSelect(VARIANT_BOOL pbFullRowSelect/*[in]*/) = 0;
  // [19] Returns/sets a value which determines if items are highlighted as the mousepointer passes over them.
  virtual HRESULT STDMETHODCALLTYPE get_HotTracking(VARIANT_BOOL* pbHotTracking/*[out,retval]*/) = 0;
  // [19] Returns/sets a value which determines if items are highlighted as the mousepointer passes over them.
  virtual HRESULT STDMETHODCALLTYPE set_HotTracking(VARIANT_BOOL pbHotTracking/*[in]*/) = 0;
  // [20] Returns/sets a value which determines if the TreeView displays scrollbars and allows scrolling (vertical and horizontal).
  virtual HRESULT STDMETHODCALLTYPE get_Scroll(VARIANT_BOOL* pbScroll/*[out,retval]*/) = 0;
  // [20] Returns/sets a value which determines if the TreeView displays scrollbars and allows scrolling (vertical and horizontal).
  virtual HRESULT STDMETHODCALLTYPE set_Scroll(VARIANT_BOOL pbScroll/*[in]*/) = 0;
  // [21] Returns/sets a value which determines if selecting a new item in the tree expands that item and collapses the previously selected item.
  virtual HRESULT STDMETHODCALLTYPE get_SingleSel(VARIANT_BOOL* pbSingleSel/*[out,retval]*/) = 0;
  // [21] Returns/sets a value which determines if selecting a new item in the tree expands that item and collapses the previously selected item.
  virtual HRESULT STDMETHODCALLTYPE set_SingleSel(VARIANT_BOOL pbSingleSel/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mscomctllib_xp::INode* __fastcall get_DropHighlight(void)
  {
    Mscomctllib_xp::INode* ppNode;
    OLECHECK(this->get_DropHighlight((Mscomctllib_xp::INode**)&ppNode));
    return ppNode;
  }

  VARIANT_BOOL __fastcall get_HideSelection(void)
  {
    VARIANT_BOOL pbHideSelection;
    OLECHECK(this->get_HideSelection((VARIANT_BOOL*)&pbHideSelection));
    return pbHideSelection;
  }

  LPDISPATCH __fastcall get_ImageList(void)
  {
    LPDISPATCH ppImageList;
    OLECHECK(this->get_ImageList((LPDISPATCH*)&ppImageList));
    return ppImageList;
  }

  float __fastcall get_Indentation(void)
  {
    float pfIndentation;
    OLECHECK(this->get_Indentation((float*)&pfIndentation));
    return pfIndentation;
  }

  Mscomctllib_xp::LabelEditConstants __fastcall get_LabelEdit(void)
  {
    Mscomctllib_xp::LabelEditConstants psLabelEdit;
    OLECHECK(this->get_LabelEdit((Mscomctllib_xp::LabelEditConstants*)&psLabelEdit));
    return psLabelEdit;
  }

  Mscomctllib_xp::TreeLineStyleConstants __fastcall get_LineStyle(void)
  {
    Mscomctllib_xp::TreeLineStyleConstants psLineStyle;
    OLECHECK(this->get_LineStyle((Mscomctllib_xp::TreeLineStyleConstants*)&psLineStyle));
    return psLineStyle;
  }

  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void)
  {
    Mscomctllib_xp::MousePointerConstants psMousePointer;
    OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer));
    return psMousePointer;
  }

  IPictureDisp* __fastcall get_MouseIcon(void)
  {
    IPictureDisp* ppMouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
    return ppMouseIcon;
  }

  Mscomctllib_xp::INodes* __fastcall get_Nodes(void)
  {
    Mscomctllib_xp::INodes* ppNode;
    OLECHECK(this->get_Nodes((Mscomctllib_xp::INodes**)&ppNode));
    return ppNode;
  }

  BSTR __fastcall get_PathSeparator(void)
  {
    BSTR pbstrPathSeparator = 0;
    OLECHECK(this->get_PathSeparator((BSTR*)&pbstrPathSeparator));
    return pbstrPathSeparator;
  }

  Mscomctllib_xp::INode* __fastcall get_SelectedItem(void)
  {
    Mscomctllib_xp::INode* ppNode;
    OLECHECK(this->get_SelectedItem((Mscomctllib_xp::INode**)&ppNode));
    return ppNode;
  }

  VARIANT_BOOL __fastcall get_Sorted(void)
  {
    VARIANT_BOOL pbSorted;
    OLECHECK(this->get_Sorted((VARIANT_BOOL*)&pbSorted));
    return pbSorted;
  }

  Mscomctllib_xp::TreeStyleConstants __fastcall get_Style(void)
  {
    Mscomctllib_xp::TreeStyleConstants psStyle;
    OLECHECK(this->get_Style((Mscomctllib_xp::TreeStyleConstants*)&psStyle));
    return psStyle;
  }

  Mscomctllib_xp::OLEDragConstants __fastcall get_OLEDragMode(void)
  {
    Mscomctllib_xp::OLEDragConstants psOLEDragMode;
    OLECHECK(this->get_OLEDragMode((Mscomctllib_xp::OLEDragConstants*)&psOLEDragMode));
    return psOLEDragMode;
  }

  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void)
  {
    Mscomctllib_xp::OLEDropConstants psOLEDropMode;
    OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
    return psOLEDropMode;
  }

  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void)
  {
    Mscomctllib_xp::AppearanceConstants psAppearance;
    OLECHECK(this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&psAppearance));
    return psAppearance;
  }

  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void)
  {
    Mscomctllib_xp::BorderStyleConstants psBorderStyle;
    OLECHECK(this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&psBorderStyle));
    return psBorderStyle;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  IFontDisp* __fastcall get_Font(void)
  {
    IFontDisp* ppFont;
    OLECHECK(this->get_Font((IFontDisp**)&ppFont));
    return ppFont;
  }

  OLE_HANDLE __fastcall get_hWnd(void)
  {
    OLE_HANDLE phWnd;
    OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
    return phWnd;
  }

  Mscomctllib_xp::INode* __fastcall HitTest(float x/*[in]*/, float y/*[in]*/)
  {
    Mscomctllib_xp::INode* ppNode;
    OLECHECK(this->HitTest(x, y, (Mscomctllib_xp::INode**)&ppNode));
    return ppNode;
  }

  long __fastcall GetVisibleCount(void)
  {
    long plVisibleCount;
    OLECHECK(this->GetVisibleCount((long*)&plVisibleCount));
    return plVisibleCount;
  }

  VARIANT_BOOL __fastcall get_Checkboxes(void)
  {
    VARIANT_BOOL pbCheckboxes;
    OLECHECK(this->get_Checkboxes((VARIANT_BOOL*)&pbCheckboxes));
    return pbCheckboxes;
  }

  VARIANT_BOOL __fastcall get_FullRowSelect(void)
  {
    VARIANT_BOOL pbFullRowSelect;
    OLECHECK(this->get_FullRowSelect((VARIANT_BOOL*)&pbFullRowSelect));
    return pbFullRowSelect;
  }

  VARIANT_BOOL __fastcall get_HotTracking(void)
  {
    VARIANT_BOOL pbHotTracking;
    OLECHECK(this->get_HotTracking((VARIANT_BOOL*)&pbHotTracking));
    return pbHotTracking;
  }

  VARIANT_BOOL __fastcall get_Scroll(void)
  {
    VARIANT_BOOL pbScroll;
    OLECHECK(this->get_Scroll((VARIANT_BOOL*)&pbScroll));
    return pbScroll;
  }

  VARIANT_BOOL __fastcall get_SingleSel(void)
  {
    VARIANT_BOOL pbSingleSel;
    OLECHECK(this->get_SingleSel((VARIANT_BOOL*)&pbSingleSel));
    return pbSingleSel;
  }


  __property   Mscomctllib_xp::INode* DropHighlight = {read = get_DropHighlight, write = _set_DropHighlight};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   float           Indentation = {read = get_Indentation, write = set_Indentation};
  __property   Mscomctllib_xp::LabelEditConstants LabelEdit = {read = get_LabelEdit, write = set_LabelEdit};
  __property   Mscomctllib_xp::TreeLineStyleConstants LineStyle = {read = get_LineStyle, write = set_LineStyle};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Mscomctllib_xp::INodes* Nodes = {read = get_Nodes, write = _set_Nodes};
  __property   BSTR            PathSeparator = {read = get_PathSeparator};
  __property   Mscomctllib_xp::INode* SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   VARIANT_BOOL    Sorted = {read = get_Sorted, write = set_Sorted};
  __property   Mscomctllib_xp::TreeStyleConstants Style = {read = get_Style, write = set_Style};
  __property   Mscomctllib_xp::OLEDragConstants OLEDragMode = {read = get_OLEDragMode, write = set_OLEDragMode};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   VARIANT_BOOL    Checkboxes = {read = get_Checkboxes, write = set_Checkboxes};
  __property   VARIANT_BOOL    FullRowSelect = {read = get_FullRowSelect, write = set_FullRowSelect};
  __property   VARIANT_BOOL    HotTracking = {read = get_HotTracking, write = set_HotTracking};
  __property   VARIANT_BOOL    Scroll = {read = get_Scroll, write = set_Scroll};
  __property   VARIANT_BOOL    SingleSel = {read = get_SingleSel, write = set_SingleSel};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ITreeViewEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {C74190B5-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface ITreeViewEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeLabelEdit(short* Cancel)
  {
    _TDispID _dispid(/* BeforeLabelEdit */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Cancel /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall AfterLabelEdit(short* Cancel, BSTR* NewString)
  {
    _TDispID _dispid(/* AfterLabelEdit */ DISPID(2));
    TAutoArgs<2> _args;
    _args[1] = Cancel /*[VT_I2:1]*/;
    _args[2] = NewString /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Collapse(Mscomctllib_xp::Node* Node)
  {
    _TDispID _dispid(/* Collapse */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::Node*)Node /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Expand(Mscomctllib_xp::Node* Node)
  {
    _TDispID _dispid(/* Expand */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::Node*)Node /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall NodeClick(Mscomctllib_xp::Node* Node)
  {
    _TDispID _dispid(/* NodeClick */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::Node*)Node /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(short* KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(short* KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(short* KeyAscii)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = KeyAscii /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick()
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall NodeCheck(Mscomctllib_xp::Node* Node)
  {
    _TDispID _dispid(/* NodeCheck */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::Node*)Node /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = AllowedEffects /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
    TAutoArgs<2> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/)
  {
    _TDispID _dispid(/* OLESetData */ DISPID(1552));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = DataFormat /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/)
  {
    _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
    TAutoArgs<1> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    _args[7] = State /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
    TAutoArgs<6> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: INodes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C74190B7-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface INodes  : public IDispatch
{
public:
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Count(short* psCount/*[out,retval]*/) = 0;
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Count(short psCount/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                       Mscomctllib_xp::INode** ppNode/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                       Mscomctllib_xp::INode* ppNode/*[in]*/) = 0; // [0]
  // [2] Adds a Node object to a Nodes collection and returns a reference to the created object.
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT* Relative/*[in,opt]*/, 
                                        VARIANT* Relationship/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                        VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                                        VARIANT* SelectedImage/*[in,opt]*/, 
                                        Mscomctllib_xp::INode** ppNode/*[out,retval]*/) = 0;
  // [3] Removes all objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [4] Returns a specific item of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::INode** ppNode/*[out,retval]*/) = 0;
  // [4] Returns a specific item of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE set_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::INode* ppNode/*[in]*/) = 0;
  // [5] Removes a specific member from a collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* Index/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  short __fastcall get_Count(void)
  {
    short psCount;
    OLECHECK(this->get_Count((short*)&psCount));
    return psCount;
  }

  Mscomctllib_xp::INode* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::INode* ppNode;
    OLECHECK(this->get_ControlDefault(Index, (Mscomctllib_xp::INode**)&ppNode));
    return ppNode;
  }

  Mscomctllib_xp::INode* __fastcall Add(VARIANT* Relative/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Relationship/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Image/*[in,opt]*/= TNoParam(), 
                                        VARIANT* SelectedImage/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::INode* ppNode;
    OLECHECK(this->Add(Relative, Relationship, Key, Text, Image, SelectedImage, (Mscomctllib_xp::INode**)&ppNode));
    return ppNode;
  }

  Mscomctllib_xp::INode* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::INode* ppNode;
    OLECHECK(this->get_Item(Index, (Mscomctllib_xp::INode**)&ppNode));
    return ppNode;
  }

  LPDISPATCH __fastcall _NewEnum(void)
  {
    LPDISPATCH ppNewEnum;
    OLECHECK(this->_NewEnum((LPDISPATCH*)&ppNewEnum));
    return ppNewEnum;
  }


  __property   short           Count = {read = get_Count, write = set_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: INode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C74190B8-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface INode  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set__ObjectDefault(BSTR pbstrText/*[in]*/) = 0; // [0]
  // [1] Returns a reference to the first child of a Node object.
  virtual HRESULT STDMETHODCALLTYPE get_Child(Mscomctllib_xp::INode** ppChild/*[out,retval]*/) = 0;
  // [1] Returns a reference to the first child of a Node object.
  virtual HRESULT STDMETHODCALLTYPE _set_Child(Mscomctllib_xp::INode* ppChild/*[in]*/) = 0;
  // [2] Returns the number of child nodes a Node object has.
  virtual HRESULT STDMETHODCALLTYPE get_Children(short* psChildren/*[out,retval]*/) = 0;
  // [2] Returns the number of child nodes a Node object has.
  virtual HRESULT STDMETHODCALLTYPE set_Children(short psChildren/*[in]*/) = 0;
  // [3] Returns/sets a value which specifies if a Node object is expanded.
  virtual HRESULT STDMETHODCALLTYPE get_Expanded(VARIANT_BOOL* pbExpanded/*[out,retval]*/) = 0;
  // [3] Returns/sets a value which specifies if a Node object is expanded.
  virtual HRESULT STDMETHODCALLTYPE set_Expanded(VARIANT_BOOL pbExpanded/*[in]*/) = 0;
  // [4] Returns/sets the Index or Key of an image in an ImageList control used when the Node is expanded.
  virtual HRESULT STDMETHODCALLTYPE get_ExpandedImage(VARIANT* pExpandedImage/*[out,retval]*/) = 0;
  // [4] Returns/sets the Index or Key of an image in an ImageList control used when the Node is expanded.
  virtual HRESULT STDMETHODCALLTYPE set_ExpandedImage(VARIANT pExpandedImage/*[in]*/) = 0;
  // [5] Returns a reference to the first Node object in a hierarchy level.
  virtual HRESULT STDMETHODCALLTYPE get_FirstSibling(Mscomctllib_xp::INode** ppFirstSibling/*[out,retval]*/) = 0;
  // [5] Returns a reference to the first Node object in a hierarchy level.
  virtual HRESULT STDMETHODCALLTYPE _set_FirstSibling(Mscomctllib_xp::INode* ppFirstSibling/*[in]*/) = 0;
  // [6] Returns the fully qualified name of a Node object.
  virtual HRESULT STDMETHODCALLTYPE get_FullPath(BSTR* pbstrFullPath/*[out,retval]*/) = 0;
  // [6] Returns the fully qualified name of a Node object.
  virtual HRESULT STDMETHODCALLTYPE set_FullPath(BSTR pbstrFullPath/*[in]*/) = 0;
  // [7] Returns/sets the index or key of a ListImage object to be used.
  virtual HRESULT STDMETHODCALLTYPE get_Image(VARIANT* pImage/*[out,retval]*/) = 0;
  // [7] Returns/sets the index or key of a ListImage object to be used.
  virtual HRESULT STDMETHODCALLTYPE set_Image(VARIANT pImage/*[in]*/) = 0;
  // [8] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE get_Index(short* psIndex/*[out,retval]*/) = 0;
  // [8] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE set_Index(short psIndex/*[in]*/) = 0;
  // [9] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Key(BSTR* pbstrKey/*[out,retval]*/) = 0;
  // [9] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Key(BSTR pbstrKey/*[in]*/) = 0;
  // [10] Returns a reference to the last Node object in a hierarchy level.
  virtual HRESULT STDMETHODCALLTYPE get_LastSibling(Mscomctllib_xp::INode** ppLastSibling/*[out,retval]*/) = 0;
  // [10] Returns a reference to the last Node object in a hierarchy level.
  virtual HRESULT STDMETHODCALLTYPE _set_LastSibling(Mscomctllib_xp::INode* ppLastSibling/*[in]*/) = 0;
  // [11] Returns a reference to the next Node object in a hierarchy level.
  virtual HRESULT STDMETHODCALLTYPE get_Next(Mscomctllib_xp::INode** ppNext/*[out,retval]*/) = 0;
  // [11] Returns a reference to the next Node object in a hierarchy level.
  virtual HRESULT STDMETHODCALLTYPE _set_Next(Mscomctllib_xp::INode* ppNext/*[in]*/) = 0;
  // [12] Returns/sets a reference to the parent of a Node object.
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Mscomctllib_xp::INode** ppParent/*[out,retval]*/) = 0;
  // [12] Returns/sets a reference to the parent of a Node object.
  virtual HRESULT STDMETHODCALLTYPE _set_Parent(Mscomctllib_xp::INode* ppParent/*[in]*/) = 0;
  // [13] Returns a reference to the previous Node object in a hierarchy level.
  virtual HRESULT STDMETHODCALLTYPE get_Previous(Mscomctllib_xp::INode** ppPrevious/*[out,retval]*/) = 0;
  // [13] Returns a reference to the previous Node object in a hierarchy level.
  virtual HRESULT STDMETHODCALLTYPE _set_Previous(Mscomctllib_xp::INode* ppPrevious/*[in]*/) = 0;
  // [14] Returns a reference to the root Node object of a TreeView control.
  virtual HRESULT STDMETHODCALLTYPE get_Root(Mscomctllib_xp::INode** ppRoot/*[out,retval]*/) = 0;
  // [14] Returns a reference to the root Node object of a TreeView control.
  virtual HRESULT STDMETHODCALLTYPE _set_Root(Mscomctllib_xp::INode* ppRoot/*[in]*/) = 0;
  // [15] Returns/sets a value which determines if a ListItem or Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/) = 0;
  // [15] Returns/sets a value which determines if a ListItem or Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE set_Selected(VARIANT_BOOL pbSelected/*[in]*/) = 0;
  // [16] Returns/sets the Index or Key of an image in an ImageList control which is displayed when a Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE get_SelectedImage(VARIANT* pSelectedImage/*[out,retval]*/) = 0;
  // [16] Returns/sets the Index or Key of an image in an ImageList control which is displayed when a Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE set_SelectedImage(VARIANT pSelectedImage/*[in]*/) = 0;
  // [17] Indicates whether the elements of a control are automatically sorted alphabetically.
  virtual HRESULT STDMETHODCALLTYPE get_Sorted(VARIANT_BOOL* pbSorted/*[out,retval]*/) = 0;
  // [17] Indicates whether the elements of a control are automatically sorted alphabetically.
  virtual HRESULT STDMETHODCALLTYPE set_Sorted(VARIANT_BOOL pbSorted/*[in]*/) = 0;
  // [18] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE get_Tag(VARIANT* pvTag/*[out,retval]*/) = 0;
  // [18] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [19] Returns/sets the text to be displayed in a control.
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* bstrText/*[out,retval]*/) = 0;
  // [19] Returns/sets the text to be displayed in a control.
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR bstrText/*[in]*/) = 0;
  // [20] Returns/sets a value that determines whether an object is visible or hidden.
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/) = 0;
  // [20] Returns/sets a value that determines whether an object is visible or hidden.
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pbVisible/*[in]*/) = 0;
  // [21] Creates a composite image from an icon and a caption for use in drag and drop operations.
  virtual HRESULT STDMETHODCALLTYPE CreateDragImage(IPictureDisp** ppDragImage/*[out,retval]*/) = 0;
  // [22] Ensures a ListItem or Node object is visible, scrolling or expanding the control if necessary.
  virtual HRESULT STDMETHODCALLTYPE EnsureVisible(VARIANT_BOOL* pbEnsureVisible/*[out,retval]*/) = 0;
  // [23] Returns/sets the background color used to display text for a Node object.
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(::OLE_COLOR* pocBackColor/*[out,retval]*/) = 0;
  // [23] Returns/sets the background color used to display text for a Node object.
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(::OLE_COLOR pocBackColor/*[in]*/) = 0;
  // [24] Returns/sets a value that determines whether the text for a Node object is displayed with a bold font.
  virtual HRESULT STDMETHODCALLTYPE get_Bold(VARIANT_BOOL* pbBold/*[out,retval]*/) = 0;
  // [24] Returns/sets a value that determines whether the text for a Node object is displayed with a bold font.
  virtual HRESULT STDMETHODCALLTYPE set_Bold(VARIANT_BOOL pbBold/*[in]*/) = 0;
  // [25] Returns/sets a value that determines whether a Node object is checked.
  virtual HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* pbChecked/*[out,retval]*/) = 0;
  // [25] Returns/sets a value that determines whether a Node object is checked.
  virtual HRESULT STDMETHODCALLTYPE set_Checked(VARIANT_BOOL pbChecked/*[in]*/) = 0;
  // [26] Returns/sets the foreground color used to display text for a Node object.
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(::OLE_COLOR* pocForeColor/*[out,retval]*/) = 0;
  // [26] Returns/sets the foreground color used to display text for a Node object.
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(::OLE_COLOR pocForeColor/*[in]*/) = 0;
  // [18] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE _set_Tag(VARIANT pvTag/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get__ObjectDefault(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get__ObjectDefault((BSTR*)&pbstrText));
    return pbstrText;
  }

  Mscomctllib_xp::INode* __fastcall get_Child(void)
  {
    Mscomctllib_xp::INode* ppChild;
    OLECHECK(this->get_Child((Mscomctllib_xp::INode**)&ppChild));
    return ppChild;
  }

  short __fastcall get_Children(void)
  {
    short psChildren;
    OLECHECK(this->get_Children((short*)&psChildren));
    return psChildren;
  }

  VARIANT_BOOL __fastcall get_Expanded(void)
  {
    VARIANT_BOOL pbExpanded;
    OLECHECK(this->get_Expanded((VARIANT_BOOL*)&pbExpanded));
    return pbExpanded;
  }

  VARIANT __fastcall get_ExpandedImage(void)
  {
    VARIANT pExpandedImage;
    OLECHECK(this->get_ExpandedImage((VARIANT*)&pExpandedImage));
    return pExpandedImage;
  }

  Mscomctllib_xp::INode* __fastcall get_FirstSibling(void)
  {
    Mscomctllib_xp::INode* ppFirstSibling;
    OLECHECK(this->get_FirstSibling((Mscomctllib_xp::INode**)&ppFirstSibling));
    return ppFirstSibling;
  }

  BSTR __fastcall get_FullPath(void)
  {
    BSTR pbstrFullPath = 0;
    OLECHECK(this->get_FullPath((BSTR*)&pbstrFullPath));
    return pbstrFullPath;
  }

  VARIANT __fastcall get_Image(void)
  {
    VARIANT pImage;
    OLECHECK(this->get_Image((VARIANT*)&pImage));
    return pImage;
  }

  short __fastcall get_Index(void)
  {
    short psIndex;
    OLECHECK(this->get_Index((short*)&psIndex));
    return psIndex;
  }

  BSTR __fastcall get_Key(void)
  {
    BSTR pbstrKey = 0;
    OLECHECK(this->get_Key((BSTR*)&pbstrKey));
    return pbstrKey;
  }

  Mscomctllib_xp::INode* __fastcall get_LastSibling(void)
  {
    Mscomctllib_xp::INode* ppLastSibling;
    OLECHECK(this->get_LastSibling((Mscomctllib_xp::INode**)&ppLastSibling));
    return ppLastSibling;
  }

  Mscomctllib_xp::INode* __fastcall get_Next(void)
  {
    Mscomctllib_xp::INode* ppNext;
    OLECHECK(this->get_Next((Mscomctllib_xp::INode**)&ppNext));
    return ppNext;
  }

  Mscomctllib_xp::INode* __fastcall get_Parent(void)
  {
    Mscomctllib_xp::INode* ppParent;
    OLECHECK(this->get_Parent((Mscomctllib_xp::INode**)&ppParent));
    return ppParent;
  }

  Mscomctllib_xp::INode* __fastcall get_Previous(void)
  {
    Mscomctllib_xp::INode* ppPrevious;
    OLECHECK(this->get_Previous((Mscomctllib_xp::INode**)&ppPrevious));
    return ppPrevious;
  }

  Mscomctllib_xp::INode* __fastcall get_Root(void)
  {
    Mscomctllib_xp::INode* ppRoot;
    OLECHECK(this->get_Root((Mscomctllib_xp::INode**)&ppRoot));
    return ppRoot;
  }

  VARIANT_BOOL __fastcall get_Selected(void)
  {
    VARIANT_BOOL pbSelected;
    OLECHECK(this->get_Selected((VARIANT_BOOL*)&pbSelected));
    return pbSelected;
  }

  VARIANT __fastcall get_SelectedImage(void)
  {
    VARIANT pSelectedImage;
    OLECHECK(this->get_SelectedImage((VARIANT*)&pSelectedImage));
    return pSelectedImage;
  }

  VARIANT_BOOL __fastcall get_Sorted(void)
  {
    VARIANT_BOOL pbSorted;
    OLECHECK(this->get_Sorted((VARIANT_BOOL*)&pbSorted));
    return pbSorted;
  }

  VARIANT __fastcall get_Tag(void)
  {
    VARIANT pvTag;
    OLECHECK(this->get_Tag((VARIANT*)&pvTag));
    return pvTag;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR bstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&bstrText));
    return bstrText;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pbVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pbVisible));
    return pbVisible;
  }

  IPictureDisp* __fastcall CreateDragImage(void)
  {
    IPictureDisp* ppDragImage;
    OLECHECK(this->CreateDragImage((IPictureDisp**)&ppDragImage));
    return ppDragImage;
  }

  VARIANT_BOOL __fastcall EnsureVisible(void)
  {
    VARIANT_BOOL pbEnsureVisible;
    OLECHECK(this->EnsureVisible((VARIANT_BOOL*)&pbEnsureVisible));
    return pbEnsureVisible;
  }

  ::OLE_COLOR __fastcall get_BackColor(void)
  {
    ::OLE_COLOR pocBackColor;
    OLECHECK(this->get_BackColor((::OLE_COLOR*)&pocBackColor));
    return pocBackColor;
  }

  VARIANT_BOOL __fastcall get_Bold(void)
  {
    VARIANT_BOOL pbBold;
    OLECHECK(this->get_Bold((VARIANT_BOOL*)&pbBold));
    return pbBold;
  }

  VARIANT_BOOL __fastcall get_Checked(void)
  {
    VARIANT_BOOL pbChecked;
    OLECHECK(this->get_Checked((VARIANT_BOOL*)&pbChecked));
    return pbChecked;
  }

  ::OLE_COLOR __fastcall get_ForeColor(void)
  {
    ::OLE_COLOR pocForeColor;
    OLECHECK(this->get_ForeColor((::OLE_COLOR*)&pocForeColor));
    return pocForeColor;
  }


  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   Mscomctllib_xp::INode* Child = {read = get_Child, write = _set_Child};
  __property   short           Children = {read = get_Children, write = set_Children};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   Mscomctllib_xp::INode* FirstSibling = {read = get_FirstSibling, write = _set_FirstSibling};
  __property   BSTR            FullPath = {read = get_FullPath};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   Mscomctllib_xp::INode* LastSibling = {read = get_LastSibling, write = _set_LastSibling};
  __property   Mscomctllib_xp::INode* Next = {read = get_Next, write = _set_Next};
  __property   Mscomctllib_xp::INode* Parent = {read = get_Parent, write = _set_Parent};
  __property   Mscomctllib_xp::INode* Previous = {read = get_Previous, write = _set_Previous};
  __property   Mscomctllib_xp::INode* Root = {read = get_Root, write = _set_Root};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   VARIANT_BOOL    Sorted = {read = get_Sorted, write = set_Sorted};
  __property   BSTR            Text = {read = get_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IListView
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F049-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IListView  : public IDispatch
{
public:
  // [1] Returns/sets how the icons in a ListView control's Icon or SmallIcon view are arranged.
  virtual HRESULT STDMETHODCALLTYPE get_Arrange(Mscomctllib_xp::ListArrangeConstants* pArrange/*[out,retval]*/) = 0;
  // [1] Returns/sets how the icons in a ListView control's Icon or SmallIcon view are arranged.
  virtual HRESULT STDMETHODCALLTYPE set_Arrange(Mscomctllib_xp::ListArrangeConstants pArrange/*[in]*/) = 0;
  // [2] Returns a reference to a collection of ColumnHeader objects.
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHeaders(Mscomctllib_xp::IColumnHeaders** ppIColumnHeaders/*[out,retval]*/) = 0;
  // [2] Returns a reference to a collection of ColumnHeader objects.
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHeaders(Mscomctllib_xp::IColumnHeaders* ppIColumnHeaders/*[in]*/) = 0;
  // [3] Returns a reference to a Node or ListItem object and highlights the object with the system highlight color.
  virtual HRESULT STDMETHODCALLTYPE get_DropHighlight(Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/) = 0;
  // [3] Returns a reference to a Node or ListItem object and highlights the object with the system highlight color.
  virtual HRESULT STDMETHODCALLTYPE _set_DropHighlight(Mscomctllib_xp::IListItem* ppIListItem/*[in]*/) = 0;
  // [3] Returns a reference to a Node or ListItem object and highlights the object with the system highlight color.
  virtual HRESULT STDMETHODCALLTYPE set_DropHighlight(VARIANT* ppIListItem/*[in]*/) = 0;
  // [4] Returns/sets whether or not a ListView control's column headers are hidden in Report view.
  virtual HRESULT STDMETHODCALLTYPE get_HideColumnHeaders(VARIANT_BOOL* pfHide/*[out,retval]*/) = 0;
  // [4] Returns/sets whether or not a ListView control's column headers are hidden in Report view.
  virtual HRESULT STDMETHODCALLTYPE set_HideColumnHeaders(VARIANT_BOOL pfHide/*[in]*/) = 0;
  // [5] Determines whether the selected item will display as selected when the ListView loses focus
  virtual HRESULT STDMETHODCALLTYPE get_HideSelection(VARIANT_BOOL* pfHide/*[out,retval]*/) = 0;
  // [5] Determines whether the selected item will display as selected when the ListView loses focus
  virtual HRESULT STDMETHODCALLTYPE set_HideSelection(VARIANT_BOOL pfHide/*[in]*/) = 0;
  // [6] Returns/sets the images associated with the Icon properties of a ListView control.
  virtual HRESULT STDMETHODCALLTYPE get_Icons(LPDISPATCH* ppIcons/*[out,retval]*/) = 0;
  // [6] Returns/sets the images associated with the Icon properties of a ListView control.
  virtual HRESULT STDMETHODCALLTYPE _set_Icons(LPDISPATCH ppIcons/*[in]*/) = 0;
  // [6] Returns/sets the images associated with the Icon properties of a ListView control.
  virtual HRESULT STDMETHODCALLTYPE set_Icons(LPDISPATCH ppIcons/*[in]*/) = 0;
  // [7] Returns a reference to a collection of ListItem objects in a ListView control.
  virtual HRESULT STDMETHODCALLTYPE get_ListItems(Mscomctllib_xp::IListItems** ppListItems/*[out,retval]*/) = 0;
  // [7] Returns a reference to a collection of ListItem objects in a ListView control.
  virtual HRESULT STDMETHODCALLTYPE set_ListItems(Mscomctllib_xp::IListItems* ppListItems/*[in]*/) = 0;
  // [8] Returns/sets a value that determines if a user can edit the label of a ListItem or Node object.
  virtual HRESULT STDMETHODCALLTYPE get_LabelEdit(Mscomctllib_xp::ListLabelEditConstants* pRet/*[out,retval]*/) = 0;
  // [8] Returns/sets a value that determines if a user can edit the label of a ListItem or Node object.
  virtual HRESULT STDMETHODCALLTYPE set_LabelEdit(Mscomctllib_xp::ListLabelEditConstants pRet/*[in]*/) = 0;
  // [9] Returns or sets a value that determines if labels are wrapped when the ListView is in Icon view.
  virtual HRESULT STDMETHODCALLTYPE get_LabelWrap(VARIANT_BOOL* pfOn/*[out,retval]*/) = 0;
  // [9] Returns or sets a value that determines if labels are wrapped when the ListView is in Icon view.
  virtual HRESULT STDMETHODCALLTYPE set_LabelWrap(VARIANT_BOOL pfOn/*[in]*/) = 0;
  // [10] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/) = 0;
  // [10] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [10] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [11] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Mscomctllib_xp::MousePointerConstants* pnIndex/*[out,retval]*/) = 0;
  // [11] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Mscomctllib_xp::MousePointerConstants pnIndex/*[in]*/) = 0;
  // [12] Returns/sets a value indicating whether a user can make multiple selections in the ListView control and how the multiple selections can be made.
  virtual HRESULT STDMETHODCALLTYPE get_MultiSelect(VARIANT_BOOL* pfOn/*[out,retval]*/) = 0;
  // [12] Returns/sets a value indicating whether a user can make multiple selections in the ListView control and how the multiple selections can be made.
  virtual HRESULT STDMETHODCALLTYPE set_MultiSelect(VARIANT_BOOL pfOn/*[in]*/) = 0;
  // [13] Returns a reference to the currently selected ListItem or Node object.
  virtual HRESULT STDMETHODCALLTYPE get_SelectedItem(Mscomctllib_xp::IListItem** ppListItem/*[out,retval]*/) = 0;
  // [13] Returns a reference to the currently selected ListItem or Node object.
  virtual HRESULT STDMETHODCALLTYPE _set_SelectedItem(Mscomctllib_xp::IListItem* ppListItem/*[in]*/) = 0;
  // [13] Returns a reference to the currently selected ListItem or Node object.
  virtual HRESULT STDMETHODCALLTYPE set_SelectedItem(VARIANT* ppListItem/*[in]*/) = 0;
  // [14] Returns/sets the images associated with the SmallIcons property of a ListView control.
  virtual HRESULT STDMETHODCALLTYPE get_SmallIcons(LPDISPATCH* ppImageList/*[out,retval]*/) = 0;
  // [14] Returns/sets the images associated with the SmallIcons property of a ListView control.
  virtual HRESULT STDMETHODCALLTYPE _set_SmallIcons(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [14] Returns/sets the images associated with the SmallIcons property of a ListView control.
  virtual HRESULT STDMETHODCALLTYPE set_SmallIcons(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [15] Indicates whether the elements of a control are automatically sorted alphabetically.
  virtual HRESULT STDMETHODCALLTYPE get_Sorted(VARIANT_BOOL* pfOn/*[out,retval]*/) = 0;
  // [15] Indicates whether the elements of a control are automatically sorted alphabetically.
  virtual HRESULT STDMETHODCALLTYPE set_Sorted(VARIANT_BOOL pfOn/*[in]*/) = 0;
  // [16] Returns/sets the current sort key.
  virtual HRESULT STDMETHODCALLTYPE get_SortKey(short* psKey/*[out,retval]*/) = 0;
  // [16] Returns/sets the current sort key.
  virtual HRESULT STDMETHODCALLTYPE set_SortKey(short psKey/*[in]*/) = 0;
  // [17] Returns/sets whether or not the ListItems will be sorted in ascending or descending order.
  virtual HRESULT STDMETHODCALLTYPE get_SortOrder(Mscomctllib_xp::ListSortOrderConstants* pOrder/*[out,retval]*/) = 0;
  // [17] Returns/sets whether or not the ListItems will be sorted in ascending or descending order.
  virtual HRESULT STDMETHODCALLTYPE set_SortOrder(Mscomctllib_xp::ListSortOrderConstants pOrder/*[in]*/) = 0;
  // [18] Returns/sets the current view of the ListView control.
  virtual HRESULT STDMETHODCALLTYPE get_View(Mscomctllib_xp::ListViewConstants* pnView/*[out,retval]*/) = 0;
  // [18] Returns/sets the current view of the ListView control.
  virtual HRESULT STDMETHODCALLTYPE set_View(Mscomctllib_xp::ListViewConstants pnView/*[in]*/) = 0;
  // [1550] Returns/Sets whether this control can act as an OLE drag/drop source, and whether this process is started automatically or under programmatic control.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/) = 0;
  // [1550] Returns/Sets whether this control can act as an OLE drag/drop source, and whether this process is started automatically or under programmatic control.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/) = 0;
  // [-520] Returns/sets whether or not controls, Forms or an MDIForm are painted at run time with 3-D effects.
  virtual HRESULT STDMETHODCALLTYPE get_Appearance(Mscomctllib_xp::AppearanceConstants* pnAppearance/*[out,retval]*/) = 0;
  // [-520] Returns/sets whether or not controls, Forms or an MDIForm are painted at run time with 3-D effects.
  virtual HRESULT STDMETHODCALLTYPE set_Appearance(Mscomctllib_xp::AppearanceConstants pnAppearance/*[in]*/) = 0;
  // [-501] Returns/sets the background color used to display text and graphics in an object.
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(::OLE_COLOR* pcrBack/*[out,retval]*/) = 0;
  // [-501] Returns/sets the background color used to display text and graphics in an object.
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(::OLE_COLOR pcrBack/*[in]*/) = 0;
  // [-504] Returns/sets the border style for an object.
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* pnStyle/*[out,retval]*/) = 0;
  // [-504] Returns/sets the border style for an object.
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Mscomctllib_xp::BorderStyleConstants pnStyle/*[in]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pfEnabled/*[out,retval]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pfEnabled/*[in]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** ppFontDisp/*[out,retval]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp* ppFontDisp/*[in]*/) = 0;
  // [-513] Returns/sets the background color used to display text and graphics in an object.
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/) = 0;
  // [-513] Returns/sets the background color used to display text and graphics in an object.
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(::OLE_COLOR pcrFore/*[in]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE set_hWnd(OLE_HANDLE phWnd/*[in]*/) = 0;
  // [19] Finds an item in the list and returns a reference to that item.
  virtual HRESULT STDMETHODCALLTYPE FindItem(BSTR sz/*[in]*/, VARIANT* Where/*[in,opt]*/, 
                                             VARIANT* Index/*[in,opt]*/, 
                                             VARIANT* fPartial/*[in,opt]*/, 
                                             Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/) = 0;
  // [20] Retrieves a reference of the first item visible in the client area.
  virtual HRESULT STDMETHODCALLTYPE GetFirstVisible(Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/) = 0;
  // [21] Returns a reference to the ListItem object or Node object located at the coordinates of x and y. Used with drag and drop operations.
  virtual HRESULT STDMETHODCALLTYPE HitTest(float x/*[in]*/, float y/*[in]*/, 
                                            Mscomctllib_xp::IListItem** ppListItem/*[out,retval]*/) = 0;
  // [22] Begins a label editing operation on a ListItem or Node object.
  virtual HRESULT STDMETHODCALLTYPE StartLabelEdit(void) = 0;
  // [1552] Starts an OLE drag/drop event with the given control as the source.
  virtual HRESULT STDMETHODCALLTYPE OLEDrag(void) = 0;
  // [-550] Forces a complete repaint of a form or control.
  virtual void STDMETHODCALLTYPE Refresh(void) = 0;
  virtual void STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]
  // [23] Returns/sets whether a user can reorder columns in report view.
  virtual HRESULT STDMETHODCALLTYPE get_AllowColumnReorder(VARIANT_BOOL* pfAllowColumnReorder/*[out,retval]*/) = 0;
  // [23] Returns/sets whether a user can reorder columns in report view.
  virtual HRESULT STDMETHODCALLTYPE set_AllowColumnReorder(VARIANT_BOOL pfAllowColumnReorder/*[in]*/) = 0;
  // [24] Returns/sets a value which determines if the control displays a checkbox next to each item in the list.
  virtual HRESULT STDMETHODCALLTYPE get_Checkboxes(VARIANT_BOOL* pfCheckboxes/*[out,retval]*/) = 0;
  // [24] Returns/sets a value which determines if the control displays a checkbox next to each item in the list.
  virtual HRESULT STDMETHODCALLTYPE set_Checkboxes(VARIANT_BOOL pfCheckboxes/*[in]*/) = 0;
  // [25] Returns/sets whether the scrollbars appear flat.
  virtual HRESULT STDMETHODCALLTYPE get_FlatScrollBar(VARIANT_BOOL* pfFlatScrollBar/*[out,retval]*/) = 0;
  // [25] Returns/sets whether the scrollbars appear flat.
  virtual HRESULT STDMETHODCALLTYPE set_FlatScrollBar(VARIANT_BOOL pfFlatScrollBar/*[in]*/) = 0;
  // [26] Returns/sets whether selecting a column highlights the entire row.
  virtual HRESULT STDMETHODCALLTYPE get_FullRowSelect(VARIANT_BOOL* pfFullRowSelect/*[out,retval]*/) = 0;
  // [26] Returns/sets whether selecting a column highlights the entire row.
  virtual HRESULT STDMETHODCALLTYPE set_FullRowSelect(VARIANT_BOOL pfFullRowSelect/*[in]*/) = 0;
  // [27] Returns/sets whether grid lines appear between rows and columns
  virtual HRESULT STDMETHODCALLTYPE get_GridLines(VARIANT_BOOL* pfGridLines/*[out,retval]*/) = 0;
  // [27] Returns/sets whether grid lines appear between rows and columns
  virtual HRESULT STDMETHODCALLTYPE set_GridLines(VARIANT_BOOL pfGridLines/*[in]*/) = 0;
  // [28] Returns/sets whether hot tracking is enabled.
  virtual HRESULT STDMETHODCALLTYPE get_HotTracking(VARIANT_BOOL* pfHotTracking/*[out,retval]*/) = 0;
  // [28] Returns/sets whether hot tracking is enabled.
  virtual HRESULT STDMETHODCALLTYPE set_HotTracking(VARIANT_BOOL pfHotTracking/*[in]*/) = 0;
  // [29] Returns/sets whether hover selection is enabled.
  virtual HRESULT STDMETHODCALLTYPE get_HoverSelection(VARIANT_BOOL* pfHoverSelection/*[out,retval]*/) = 0;
  // [29] Returns/sets whether hover selection is enabled.
  virtual HRESULT STDMETHODCALLTYPE set_HoverSelection(VARIANT_BOOL pfHoverSelection/*[in]*/) = 0;
  // [31] Returns/sets the background picture for the control.
  virtual HRESULT STDMETHODCALLTYPE get_Picture(IPictureDisp** ppPictureDisp/*[out,retval]*/) = 0;
  // [31] Returns/sets the background picture for the control.
  virtual HRESULT STDMETHODCALLTYPE set_Picture(IPictureDisp* ppPictureDisp/*[in]*/) = 0;
  // [31] Returns/sets the background picture for the control.
  virtual HRESULT STDMETHODCALLTYPE _set_Picture(IPictureDisp* ppPictureDisp/*[in]*/) = 0;
  // [30] Returns/sets the picture alignment.
  virtual HRESULT STDMETHODCALLTYPE get_PictureAlignment(Mscomctllib_xp::ListPictureAlignmentConstants* psAlignment/*[out,retval]*/) = 0;
  // [30] Returns/sets the picture alignment.
  virtual HRESULT STDMETHODCALLTYPE set_PictureAlignment(Mscomctllib_xp::ListPictureAlignmentConstants psAlignment/*[in]*/) = 0;
  // [32] Returns/sets the ImageList control to be used for ColumnHeader icons.
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHeaderIcons(LPDISPATCH* ppImageList/*[out,retval]*/) = 0;
  // [32] Returns/sets the ImageList control to be used for ColumnHeader icons.
  virtual HRESULT STDMETHODCALLTYPE _set_ColumnHeaderIcons(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [32] Returns/sets the ImageList control to be used for ColumnHeader icons.
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHeaderIcons(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [33] Returns/sets a value that determines if the text background is transparent or uses the ListView background color
  virtual HRESULT STDMETHODCALLTYPE get_TextBackground(Mscomctllib_xp::ListTextBackgroundConstants* penumTextBackground/*[out,retval]*/) = 0;
  // [33] Returns/sets a value that determines if the text background is transparent or uses the ListView background color
  virtual HRESULT STDMETHODCALLTYPE set_TextBackground(Mscomctllib_xp::ListTextBackgroundConstants penumTextBackground/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mscomctllib_xp::ListArrangeConstants __fastcall get_Arrange(void)
  {
    Mscomctllib_xp::ListArrangeConstants pArrange;
    OLECHECK(this->get_Arrange((Mscomctllib_xp::ListArrangeConstants*)&pArrange));
    return pArrange;
  }

  Mscomctllib_xp::IColumnHeaders* __fastcall get_ColumnHeaders(void)
  {
    Mscomctllib_xp::IColumnHeaders* ppIColumnHeaders;
    OLECHECK(this->get_ColumnHeaders((Mscomctllib_xp::IColumnHeaders**)&ppIColumnHeaders));
    return ppIColumnHeaders;
  }

  Mscomctllib_xp::IListItem* __fastcall get_DropHighlight(void)
  {
    Mscomctllib_xp::IListItem* ppIListItem;
    OLECHECK(this->get_DropHighlight((Mscomctllib_xp::IListItem**)&ppIListItem));
    return ppIListItem;
  }

  VARIANT_BOOL __fastcall get_HideColumnHeaders(void)
  {
    VARIANT_BOOL pfHide;
    OLECHECK(this->get_HideColumnHeaders((VARIANT_BOOL*)&pfHide));
    return pfHide;
  }

  VARIANT_BOOL __fastcall get_HideSelection(void)
  {
    VARIANT_BOOL pfHide;
    OLECHECK(this->get_HideSelection((VARIANT_BOOL*)&pfHide));
    return pfHide;
  }

  LPDISPATCH __fastcall get_Icons(void)
  {
    LPDISPATCH ppIcons;
    OLECHECK(this->get_Icons((LPDISPATCH*)&ppIcons));
    return ppIcons;
  }

  Mscomctllib_xp::IListItems* __fastcall get_ListItems(void)
  {
    Mscomctllib_xp::IListItems* ppListItems;
    OLECHECK(this->get_ListItems((Mscomctllib_xp::IListItems**)&ppListItems));
    return ppListItems;
  }

  Mscomctllib_xp::ListLabelEditConstants __fastcall get_LabelEdit(void)
  {
    Mscomctllib_xp::ListLabelEditConstants pRet;
    OLECHECK(this->get_LabelEdit((Mscomctllib_xp::ListLabelEditConstants*)&pRet));
    return pRet;
  }

  VARIANT_BOOL __fastcall get_LabelWrap(void)
  {
    VARIANT_BOOL pfOn;
    OLECHECK(this->get_LabelWrap((VARIANT_BOOL*)&pfOn));
    return pfOn;
  }

  IPictureDisp* __fastcall get_MouseIcon(void)
  {
    IPictureDisp* ppMouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
    return ppMouseIcon;
  }

  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void)
  {
    Mscomctllib_xp::MousePointerConstants pnIndex;
    OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&pnIndex));
    return pnIndex;
  }

  VARIANT_BOOL __fastcall get_MultiSelect(void)
  {
    VARIANT_BOOL pfOn;
    OLECHECK(this->get_MultiSelect((VARIANT_BOOL*)&pfOn));
    return pfOn;
  }

  Mscomctllib_xp::IListItem* __fastcall get_SelectedItem(void)
  {
    Mscomctllib_xp::IListItem* ppListItem;
    OLECHECK(this->get_SelectedItem((Mscomctllib_xp::IListItem**)&ppListItem));
    return ppListItem;
  }

  LPDISPATCH __fastcall get_SmallIcons(void)
  {
    LPDISPATCH ppImageList;
    OLECHECK(this->get_SmallIcons((LPDISPATCH*)&ppImageList));
    return ppImageList;
  }

  VARIANT_BOOL __fastcall get_Sorted(void)
  {
    VARIANT_BOOL pfOn;
    OLECHECK(this->get_Sorted((VARIANT_BOOL*)&pfOn));
    return pfOn;
  }

  short __fastcall get_SortKey(void)
  {
    short psKey;
    OLECHECK(this->get_SortKey((short*)&psKey));
    return psKey;
  }

  Mscomctllib_xp::ListSortOrderConstants __fastcall get_SortOrder(void)
  {
    Mscomctllib_xp::ListSortOrderConstants pOrder;
    OLECHECK(this->get_SortOrder((Mscomctllib_xp::ListSortOrderConstants*)&pOrder));
    return pOrder;
  }

  Mscomctllib_xp::ListViewConstants __fastcall get_View(void)
  {
    Mscomctllib_xp::ListViewConstants pnView;
    OLECHECK(this->get_View((Mscomctllib_xp::ListViewConstants*)&pnView));
    return pnView;
  }

  Mscomctllib_xp::OLEDragConstants __fastcall get_OLEDragMode(void)
  {
    Mscomctllib_xp::OLEDragConstants psOLEDragMode;
    OLECHECK(this->get_OLEDragMode((Mscomctllib_xp::OLEDragConstants*)&psOLEDragMode));
    return psOLEDragMode;
  }

  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void)
  {
    Mscomctllib_xp::OLEDropConstants psOLEDropMode;
    OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
    return psOLEDropMode;
  }

  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void)
  {
    Mscomctllib_xp::AppearanceConstants pnAppearance;
    OLECHECK(this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&pnAppearance));
    return pnAppearance;
  }

  ::OLE_COLOR __fastcall get_BackColor(void)
  {
    ::OLE_COLOR pcrBack;
    OLECHECK(this->get_BackColor((::OLE_COLOR*)&pcrBack));
    return pcrBack;
  }

  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void)
  {
    Mscomctllib_xp::BorderStyleConstants pnStyle;
    OLECHECK(this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&pnStyle));
    return pnStyle;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pfEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pfEnabled));
    return pfEnabled;
  }

  IFontDisp* __fastcall get_Font(void)
  {
    IFontDisp* ppFontDisp;
    OLECHECK(this->get_Font((IFontDisp**)&ppFontDisp));
    return ppFontDisp;
  }

  ::OLE_COLOR __fastcall get_ForeColor(void)
  {
    ::OLE_COLOR pcrFore;
    OLECHECK(this->get_ForeColor((::OLE_COLOR*)&pcrFore));
    return pcrFore;
  }

  OLE_HANDLE __fastcall get_hWnd(void)
  {
    OLE_HANDLE phWnd;
    OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
    return phWnd;
  }

  Mscomctllib_xp::IListItem* __fastcall FindItem(BSTR sz/*[in]*/, 
                                                 VARIANT* Where/*[in,opt]*/= TNoParam(), 
                                                 VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                                 VARIANT* fPartial/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::IListItem* ppIListItem;
    OLECHECK(this->FindItem(sz, Where, Index, fPartial, (Mscomctllib_xp::IListItem**)&ppIListItem));
    return ppIListItem;
  }

  Mscomctllib_xp::IListItem* __fastcall GetFirstVisible(void)
  {
    Mscomctllib_xp::IListItem* ppIListItem;
    OLECHECK(this->GetFirstVisible((Mscomctllib_xp::IListItem**)&ppIListItem));
    return ppIListItem;
  }

  Mscomctllib_xp::IListItem* __fastcall HitTest(float x/*[in]*/, float y/*[in]*/)
  {
    Mscomctllib_xp::IListItem* ppListItem;
    OLECHECK(this->HitTest(x, y, (Mscomctllib_xp::IListItem**)&ppListItem));
    return ppListItem;
  }

  VARIANT_BOOL __fastcall get_AllowColumnReorder(void)
  {
    VARIANT_BOOL pfAllowColumnReorder;
    OLECHECK(this->get_AllowColumnReorder((VARIANT_BOOL*)&pfAllowColumnReorder));
    return pfAllowColumnReorder;
  }

  VARIANT_BOOL __fastcall get_Checkboxes(void)
  {
    VARIANT_BOOL pfCheckboxes;
    OLECHECK(this->get_Checkboxes((VARIANT_BOOL*)&pfCheckboxes));
    return pfCheckboxes;
  }

  VARIANT_BOOL __fastcall get_FlatScrollBar(void)
  {
    VARIANT_BOOL pfFlatScrollBar;
    OLECHECK(this->get_FlatScrollBar((VARIANT_BOOL*)&pfFlatScrollBar));
    return pfFlatScrollBar;
  }

  VARIANT_BOOL __fastcall get_FullRowSelect(void)
  {
    VARIANT_BOOL pfFullRowSelect;
    OLECHECK(this->get_FullRowSelect((VARIANT_BOOL*)&pfFullRowSelect));
    return pfFullRowSelect;
  }

  VARIANT_BOOL __fastcall get_GridLines(void)
  {
    VARIANT_BOOL pfGridLines;
    OLECHECK(this->get_GridLines((VARIANT_BOOL*)&pfGridLines));
    return pfGridLines;
  }

  VARIANT_BOOL __fastcall get_HotTracking(void)
  {
    VARIANT_BOOL pfHotTracking;
    OLECHECK(this->get_HotTracking((VARIANT_BOOL*)&pfHotTracking));
    return pfHotTracking;
  }

  VARIANT_BOOL __fastcall get_HoverSelection(void)
  {
    VARIANT_BOOL pfHoverSelection;
    OLECHECK(this->get_HoverSelection((VARIANT_BOOL*)&pfHoverSelection));
    return pfHoverSelection;
  }

  IPictureDisp* __fastcall get_Picture(void)
  {
    IPictureDisp* ppPictureDisp;
    OLECHECK(this->get_Picture((IPictureDisp**)&ppPictureDisp));
    return ppPictureDisp;
  }

  Mscomctllib_xp::ListPictureAlignmentConstants __fastcall get_PictureAlignment(void)
  {
    Mscomctllib_xp::ListPictureAlignmentConstants psAlignment;
    OLECHECK(this->get_PictureAlignment((Mscomctllib_xp::ListPictureAlignmentConstants*)&psAlignment));
    return psAlignment;
  }

  LPDISPATCH __fastcall get_ColumnHeaderIcons(void)
  {
    LPDISPATCH ppImageList;
    OLECHECK(this->get_ColumnHeaderIcons((LPDISPATCH*)&ppImageList));
    return ppImageList;
  }

  Mscomctllib_xp::ListTextBackgroundConstants __fastcall get_TextBackground(void)
  {
    Mscomctllib_xp::ListTextBackgroundConstants penumTextBackground;
    OLECHECK(this->get_TextBackground((Mscomctllib_xp::ListTextBackgroundConstants*)&penumTextBackground));
    return penumTextBackground;
  }


  __property   Mscomctllib_xp::ListArrangeConstants Arrange = {read = get_Arrange, write = set_Arrange};
  __property   Mscomctllib_xp::IColumnHeaders* ColumnHeaders = {read = get_ColumnHeaders, write = set_ColumnHeaders};
  __property   Mscomctllib_xp::IListItem* DropHighlight = {read = get_DropHighlight, write = _set_DropHighlight};
  __property   VARIANT_BOOL    HideColumnHeaders = {read = get_HideColumnHeaders, write = set_HideColumnHeaders};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   LPDISPATCH      Icons = {read = get_Icons, write = set_Icons};
  __property   Mscomctllib_xp::IListItems* ListItems = {read = get_ListItems, write = set_ListItems};
  __property   Mscomctllib_xp::ListLabelEditConstants LabelEdit = {read = get_LabelEdit, write = set_LabelEdit};
  __property   VARIANT_BOOL    LabelWrap = {read = get_LabelWrap, write = set_LabelWrap};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Mscomctllib_xp::IListItem* SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   LPDISPATCH      SmallIcons = {read = get_SmallIcons, write = set_SmallIcons};
  __property   VARIANT_BOOL    Sorted = {read = get_Sorted, write = set_Sorted};
  __property   short           SortKey = {read = get_SortKey, write = set_SortKey};
  __property   Mscomctllib_xp::ListSortOrderConstants SortOrder = {read = get_SortOrder, write = set_SortOrder};
  __property   Mscomctllib_xp::ListViewConstants View = {read = get_View, write = set_View};
  __property   Mscomctllib_xp::OLEDragConstants OLEDragMode = {read = get_OLEDragMode, write = set_OLEDragMode};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = _set_Font};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   VARIANT_BOOL    AllowColumnReorder = {read = get_AllowColumnReorder, write = set_AllowColumnReorder};
  __property   VARIANT_BOOL    Checkboxes = {read = get_Checkboxes, write = set_Checkboxes};
  __property   VARIANT_BOOL    FlatScrollBar = {read = get_FlatScrollBar, write = set_FlatScrollBar};
  __property   VARIANT_BOOL    FullRowSelect = {read = get_FullRowSelect, write = set_FullRowSelect};
  __property   VARIANT_BOOL    GridLines = {read = get_GridLines, write = set_GridLines};
  __property   VARIANT_BOOL    HotTracking = {read = get_HotTracking, write = set_HotTracking};
  __property   VARIANT_BOOL    HoverSelection = {read = get_HoverSelection, write = set_HoverSelection};
  __property   IPictureDisp*   Picture = {read = get_Picture, write = set_Picture};
  __property   Mscomctllib_xp::ListPictureAlignmentConstants PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   LPDISPATCH      ColumnHeaderIcons = {read = get_ColumnHeaderIcons, write = set_ColumnHeaderIcons};
  __property   Mscomctllib_xp::ListTextBackgroundConstants TextBackground = {read = get_TextBackground, write = set_TextBackground};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ListViewEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {BDD1F04A-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface ListViewEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall BeforeLabelEdit(short* Cancel)
  {
    _TDispID _dispid(/* BeforeLabelEdit */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Cancel /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall AfterLabelEdit(short* Cancel, BSTR* NewString)
  {
    _TDispID _dispid(/* AfterLabelEdit */ DISPID(2));
    TAutoArgs<2> _args;
    _args[1] = Cancel /*[VT_I2:1]*/;
    _args[2] = NewString /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ColumnClick(Mscomctllib_xp::ColumnHeader* ColumnHeader)
  {
    _TDispID _dispid(/* ColumnClick */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::ColumnHeader*)ColumnHeader /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemClick(Mscomctllib_xp::ListItem* Item)
  {
    _TDispID _dispid(/* ItemClick */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::ListItem*)Item /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(short* KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(short* KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(short* KeyAscii)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = KeyAscii /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall DblClick()
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = AllowedEffects /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
    TAutoArgs<2> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/)
  {
    _TDispID _dispid(/* OLESetData */ DISPID(1552));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = DataFormat /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/)
  {
    _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
    TAutoArgs<1> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    _args[7] = State /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
    TAutoArgs<6> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemCheck(Mscomctllib_xp::ListItem* Item)
  {
    _TDispID _dispid(/* ItemCheck */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Mscomctllib_xp::ListItem*)Item /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IListItems
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F04C-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IListItems  : public IDispatch
{
public:
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* plCount/*[out,retval]*/) = 0;
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Count(long plCount/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                       Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/) = 0; // [0]
  // [2] Adds a ListItem object to a ListItems collection only at run time.
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                        VARIANT* Text/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                                        VARIANT* SmallIcon/*[in,opt]*/, 
                                        Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/) = 0;
  // [3] Removes all objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [4] Returns a specific item of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/) = 0;
  // [5] Removes a specific member from a collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* Index/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppNewEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long plCount;
    OLECHECK(this->get_Count((long*)&plCount));
    return plCount;
  }

  Mscomctllib_xp::IListItem* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IListItem* ppIListItem;
    OLECHECK(this->get_ControlDefault(Index, (Mscomctllib_xp::IListItem**)&ppIListItem));
    return ppIListItem;
  }

  Mscomctllib_xp::IListItem* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Icon/*[in,opt]*/= TNoParam(), 
                                            VARIANT* SmallIcon/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::IListItem* ppIListItem;
    OLECHECK(this->Add(Index, Key, Text, Icon, SmallIcon, (Mscomctllib_xp::IListItem**)&ppIListItem));
    return ppIListItem;
  }

  Mscomctllib_xp::IListItem* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IListItem* ppIListItem;
    OLECHECK(this->get_Item(Index, (Mscomctllib_xp::IListItem**)&ppIListItem));
    return ppIListItem;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppNewEnum;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppNewEnum));
    return ppNewEnum;
  }


  __property   long            Count = {read = get_Count, write = set_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IListItem
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F04E-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IListItem  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Default(BSTR* pbstrText/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Default(BSTR pbstrText/*[in]*/) = 0; // [0]
  // [10] Returns/sets the text to be displayed in a control.
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstrText/*[out,retval]*/) = 0;
  // [10] Returns/sets the text to be displayed in a control.
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstrText/*[in]*/) = 0;
  // [1] Returns/sets the state of a ListView control Object item.
  virtual HRESULT STDMETHODCALLTYPE get_Ghosted(VARIANT_BOOL* pfOn/*[out,retval]*/) = 0;
  // [1] Returns/sets the state of a ListView control Object item.
  virtual HRESULT STDMETHODCALLTYPE set_Ghosted(VARIANT_BOOL pfOn/*[in]*/) = 0;
  // [2] Returns/sets the height of an object.
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* pflHeight/*[out,retval]*/) = 0;
  // [2] Returns/sets the height of an object.
  virtual HRESULT STDMETHODCALLTYPE set_Height(float pflHeight/*[in]*/) = 0;
  // [3] Returns/sets the index of an icon in an associated ImageList control.
  virtual HRESULT STDMETHODCALLTYPE get_Icon(VARIANT* pnIndex/*[out,retval]*/) = 0;
  // [3] Returns/sets the index of an icon in an associated ImageList control.
  virtual HRESULT STDMETHODCALLTYPE set_Icon(VARIANT pnIndex/*[in]*/) = 0;
  // [4] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* plIndex/*[out,retval]*/) = 0;
  // [4] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE set_Index(long plIndex/*[in]*/) = 0;
  // [5] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Key(BSTR* pbstrKey/*[out,retval]*/) = 0;
  // [5] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Key(BSTR pbstrKey/*[in]*/) = 0;
  // [6] Returns/sets the distance between the internal left edge of an object and the left edge of its container.
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* pflLeft/*[out,retval]*/) = 0;
  // [6] Returns/sets the distance between the internal left edge of an object and the left edge of its container.
  virtual HRESULT STDMETHODCALLTYPE set_Left(float pflLeft/*[in]*/) = 0;
  // [7] Returns/sets a value which determines if a ListItem or Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE get_Selected(VARIANT_BOOL* pfOn/*[out,retval]*/) = 0;
  // [7] Returns/sets a value which determines if a ListItem or Node object is selected.
  virtual HRESULT STDMETHODCALLTYPE set_Selected(VARIANT_BOOL pfOn/*[in]*/) = 0;
  // [8] Returns/sets the index of an small icon in an associated ImageList control.
  virtual HRESULT STDMETHODCALLTYPE get_SmallIcon(VARIANT* pnIndex/*[out,retval]*/) = 0;
  // [8] Returns/sets the index of an small icon in an associated ImageList control.
  virtual HRESULT STDMETHODCALLTYPE set_SmallIcon(VARIANT pnIndex/*[in]*/) = 0;
  // [9] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE get_Tag(VARIANT* pvTag/*[out,retval]*/) = 0;
  // [9] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [11] Returns/sets the distance between the internal top edge of an object and the top edge of its container.
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* pflTop/*[out,retval]*/) = 0;
  // [11] Returns/sets the distance between the internal top edge of an object and the top edge of its container.
  virtual HRESULT STDMETHODCALLTYPE set_Top(float pflTop/*[in]*/) = 0;
  // [12] Returns/sets the width of an object.
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* pflWidth/*[out,retval]*/) = 0;
  // [12] Returns/sets the width of an object.
  virtual HRESULT STDMETHODCALLTYPE set_Width(float pflWidth/*[in]*/) = 0;
  // [13] Returns/sets an array of strings representing the ListIitem's data.
  virtual HRESULT STDMETHODCALLTYPE get_SubItems(short Index/*[in]*/, 
                                                 BSTR* pbstrItem/*[out,retval]*/) = 0;
  // [13] Returns/sets an array of strings representing the ListIitem's data.
  virtual HRESULT STDMETHODCALLTYPE set_SubItems(short Index/*[in]*/, BSTR pbstrItem/*[in]*/) = 0;
  // [14] Creates a composite image from an icon and a caption for use in drag and drop operations.
  virtual HRESULT STDMETHODCALLTYPE CreateDragImage(IPictureDisp** ppImage/*[out,retval]*/) = 0;
  // [15] Ensures a ListItem or Node object is visible, scrolling or expanding the control if necessary.
  virtual HRESULT STDMETHODCALLTYPE EnsureVisible(VARIANT_BOOL* pfVisible/*[out,retval]*/) = 0;
  // [9] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE _set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [16] Returns/sets a collection of ListSubItems belonging to the ListItem.
  virtual HRESULT STDMETHODCALLTYPE get_ListSubItems(Mscomctllib_xp::IListSubItems** ppSubItems/*[out,retval]*/) = 0;
  // [16] Returns/sets a collection of ListSubItems belonging to the ListItem.
  virtual HRESULT STDMETHODCALLTYPE set_ListSubItems(Mscomctllib_xp::IListSubItems* ppSubItems/*[in]*/) = 0;
  // [17] Returns/sets a value that determines whether a ListSubItem object is checked.
  virtual HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* pfChecked/*[out,retval]*/) = 0;
  // [17] Returns/sets a value that determines whether a ListSubItem object is checked.
  virtual HRESULT STDMETHODCALLTYPE set_Checked(VARIANT_BOOL pfChecked/*[in]*/) = 0;
  // [-513] Returns/sets the background color used to display text and graphics in an object.
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/) = 0;
  // [-513] Returns/sets the background color used to display text and graphics in an object.
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(::OLE_COLOR pcrFore/*[in]*/) = 0;
  // [18] Returns/sets the text for the subitem tooltip
  virtual HRESULT STDMETHODCALLTYPE get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/) = 0;
  // [18] Returns/sets the text for the subitem tooltip
  virtual HRESULT STDMETHODCALLTYPE set_ToolTipText(BSTR pbstrToolTipText/*[in]*/) = 0;
  // [19] Returns/sets a value that determines whether the text for a ListItem object is displayed with a bold font.
  virtual HRESULT STDMETHODCALLTYPE get_Bold(VARIANT_BOOL* pfBold/*[out,retval]*/) = 0;
  // [19] Returns/sets a value that determines whether the text for a ListItem object is displayed with a bold font.
  virtual HRESULT STDMETHODCALLTYPE set_Bold(VARIANT_BOOL pfBold/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Default(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Default((BSTR*)&pbstrText));
    return pbstrText;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstrText));
    return pbstrText;
  }

  VARIANT_BOOL __fastcall get_Ghosted(void)
  {
    VARIANT_BOOL pfOn;
    OLECHECK(this->get_Ghosted((VARIANT_BOOL*)&pfOn));
    return pfOn;
  }

  float __fastcall get_Height(void)
  {
    float pflHeight;
    OLECHECK(this->get_Height((float*)&pflHeight));
    return pflHeight;
  }

  VARIANT __fastcall get_Icon(void)
  {
    VARIANT pnIndex;
    OLECHECK(this->get_Icon((VARIANT*)&pnIndex));
    return pnIndex;
  }

  long __fastcall get_Index(void)
  {
    long plIndex;
    OLECHECK(this->get_Index((long*)&plIndex));
    return plIndex;
  }

  BSTR __fastcall get_Key(void)
  {
    BSTR pbstrKey = 0;
    OLECHECK(this->get_Key((BSTR*)&pbstrKey));
    return pbstrKey;
  }

  float __fastcall get_Left(void)
  {
    float pflLeft;
    OLECHECK(this->get_Left((float*)&pflLeft));
    return pflLeft;
  }

  VARIANT_BOOL __fastcall get_Selected(void)
  {
    VARIANT_BOOL pfOn;
    OLECHECK(this->get_Selected((VARIANT_BOOL*)&pfOn));
    return pfOn;
  }

  VARIANT __fastcall get_SmallIcon(void)
  {
    VARIANT pnIndex;
    OLECHECK(this->get_SmallIcon((VARIANT*)&pnIndex));
    return pnIndex;
  }

  VARIANT __fastcall get_Tag(void)
  {
    VARIANT pvTag;
    OLECHECK(this->get_Tag((VARIANT*)&pvTag));
    return pvTag;
  }

  float __fastcall get_Top(void)
  {
    float pflTop;
    OLECHECK(this->get_Top((float*)&pflTop));
    return pflTop;
  }

  float __fastcall get_Width(void)
  {
    float pflWidth;
    OLECHECK(this->get_Width((float*)&pflWidth));
    return pflWidth;
  }

  BSTR __fastcall get_SubItems(short Index/*[in]*/)
  {
    BSTR pbstrItem = 0;
    OLECHECK(this->get_SubItems(Index, (BSTR*)&pbstrItem));
    return pbstrItem;
  }

  IPictureDisp* __fastcall CreateDragImage(void)
  {
    IPictureDisp* ppImage;
    OLECHECK(this->CreateDragImage((IPictureDisp**)&ppImage));
    return ppImage;
  }

  VARIANT_BOOL __fastcall EnsureVisible(void)
  {
    VARIANT_BOOL pfVisible;
    OLECHECK(this->EnsureVisible((VARIANT_BOOL*)&pfVisible));
    return pfVisible;
  }

  Mscomctllib_xp::IListSubItems* __fastcall get_ListSubItems(void)
  {
    Mscomctllib_xp::IListSubItems* ppSubItems;
    OLECHECK(this->get_ListSubItems((Mscomctllib_xp::IListSubItems**)&ppSubItems));
    return ppSubItems;
  }

  VARIANT_BOOL __fastcall get_Checked(void)
  {
    VARIANT_BOOL pfChecked;
    OLECHECK(this->get_Checked((VARIANT_BOOL*)&pfChecked));
    return pfChecked;
  }

  ::OLE_COLOR __fastcall get_ForeColor(void)
  {
    ::OLE_COLOR pcrFore;
    OLECHECK(this->get_ForeColor((::OLE_COLOR*)&pcrFore));
    return pcrFore;
  }

  BSTR __fastcall get_ToolTipText(void)
  {
    BSTR pbstrToolTipText = 0;
    OLECHECK(this->get_ToolTipText((BSTR*)&pbstrToolTipText));
    return pbstrToolTipText;
  }

  VARIANT_BOOL __fastcall get_Bold(void)
  {
    VARIANT_BOOL pfBold;
    OLECHECK(this->get_Bold((VARIANT_BOOL*)&pfBold));
    return pfBold;
  }


  __property   BSTR            Default = {read = get_Default};
  __property   BSTR            Text = {read = get_Text};
  __property   VARIANT_BOOL    Ghosted = {read = get_Ghosted, write = set_Ghosted};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   Mscomctllib_xp::IListSubItems* ListSubItems = {read = get_ListSubItems, write = set_ListSubItems};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IColumnHeaders
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F050-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IColumnHeaders  : public IDispatch
{
public:
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* plCount/*[out,retval]*/) = 0;
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Count(long plCount/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                       Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/) = 0; // [0]
  // [2] Adds a ColumnHeader object to a ColumnHeaders collection at both design time and run time.
  virtual HRESULT STDMETHODCALLTYPE Add_PreVB98(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                                VARIANT* Text/*[in,opt]*/, 
                                                VARIANT* Width/*[in,opt]*/, 
                                                VARIANT* Alignment/*[in,opt]*/, 
                                                Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/) = 0;
  // [3] Removes all objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [4] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/) = 0;
  // [5] Removes a specific member from a collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* Index/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppUnknown/*[out,retval]*/) = 0; // [-4]
  // [6] Adds a ColumnHeader object to a ColumnHeaders collection at both design time and run time.
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                        VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                                        VARIANT* Alignment/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                                        Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long plCount;
    OLECHECK(this->get_Count((long*)&plCount));
    return plCount;
  }

  Mscomctllib_xp::IColumnHeader* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
    OLECHECK(this->get_ControlDefault(Index, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader));
    return ppIColumnHeader;
  }

  Mscomctllib_xp::IColumnHeader* __fastcall Add_PreVB98(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Width/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Alignment/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
    OLECHECK(this->Add_PreVB98(Index, Key, Text, Width, Alignment, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader));
    return ppIColumnHeader;
  }

  Mscomctllib_xp::IColumnHeader* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
    OLECHECK(this->get_Item(Index, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader));
    return ppIColumnHeader;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppUnknown;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppUnknown));
    return ppUnknown;
  }

  Mscomctllib_xp::IColumnHeader* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Width/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Alignment/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Icon/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
    OLECHECK(this->Add(Index, Key, Text, Width, Alignment, Icon, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader));
    return ppIColumnHeader;
  }


  __property   long            Count = {read = get_Count, write = set_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IColumnHeader
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F051-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IColumnHeader  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Default(BSTR* pbstrText/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Default(BSTR pbstrText/*[in]*/) = 0; // [0]
  // [7] Returns/sets the text to be displayed in a control.
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstrText/*[out,retval]*/) = 0;
  // [7] Returns/sets the text to be displayed in a control.
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstrText/*[in]*/) = 0;
  // [1] Returns/sets a value that determines where an object is displayed on a form.
  virtual HRESULT STDMETHODCALLTYPE get_Alignment(Mscomctllib_xp::ListColumnAlignmentConstants* pnAlignment/*[out,retval]*/) = 0;
  // [1] Returns/sets a value that determines where an object is displayed on a form.
  virtual HRESULT STDMETHODCALLTYPE set_Alignment(Mscomctllib_xp::ListColumnAlignmentConstants pnAlignment/*[in]*/) = 0;
  // [2] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* plIndex/*[out,retval]*/) = 0;
  // [2] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE set_Index(long plIndex/*[in]*/) = 0;
  // [3] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Key(BSTR* pbstrKey/*[out,retval]*/) = 0;
  // [3] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Key(BSTR pbstrKey/*[in]*/) = 0;
  // [4] Returns/sets the distance between the internal left edge of an object and the left edge of its container.
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* pflLeft/*[out,retval]*/) = 0;
  // [4] Returns/sets the distance between the internal left edge of an object and the left edge of its container.
  virtual HRESULT STDMETHODCALLTYPE set_Left(float pflLeft/*[in]*/) = 0;
  // [5] Returns the index of the subitem associated with a ColumnHeader object in a ListView control.
  virtual HRESULT STDMETHODCALLTYPE get_SubItemIndex(short* psIndex/*[out,retval]*/) = 0;
  // [5] Returns the index of the subitem associated with a ColumnHeader object in a ListView control.
  virtual HRESULT STDMETHODCALLTYPE set_SubItemIndex(short psIndex/*[in]*/) = 0;
  // [6] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE get_Tag(VARIANT* pvTag/*[out,retval]*/) = 0;
  // [6] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [8] Returns/sets the width of an object.
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* pflWidth/*[out,retval]*/) = 0;
  // [8] Returns/sets the width of an object.
  virtual HRESULT STDMETHODCALLTYPE set_Width(float pflWidth/*[in]*/) = 0;
  // [6] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE _set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [9] Returns/sets the index of an icon in an associated ImageList control.
  virtual HRESULT STDMETHODCALLTYPE get_Icon(VARIANT* pnIndex/*[out,retval]*/) = 0;
  // [9] Returns/sets the index of an icon in an associated ImageList control.
  virtual HRESULT STDMETHODCALLTYPE set_Icon(VARIANT pnIndex/*[in]*/) = 0;
  // [10] Returns current position of column.
  virtual HRESULT STDMETHODCALLTYPE get_Position(short* piPosition/*[out,retval]*/) = 0;
  // [10] Returns current position of column.
  virtual HRESULT STDMETHODCALLTYPE set_Position(short piPosition/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Default(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Default((BSTR*)&pbstrText));
    return pbstrText;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstrText));
    return pbstrText;
  }

  Mscomctllib_xp::ListColumnAlignmentConstants __fastcall get_Alignment(void)
  {
    Mscomctllib_xp::ListColumnAlignmentConstants pnAlignment;
    OLECHECK(this->get_Alignment((Mscomctllib_xp::ListColumnAlignmentConstants*)&pnAlignment));
    return pnAlignment;
  }

  long __fastcall get_Index(void)
  {
    long plIndex;
    OLECHECK(this->get_Index((long*)&plIndex));
    return plIndex;
  }

  BSTR __fastcall get_Key(void)
  {
    BSTR pbstrKey = 0;
    OLECHECK(this->get_Key((BSTR*)&pbstrKey));
    return pbstrKey;
  }

  float __fastcall get_Left(void)
  {
    float pflLeft;
    OLECHECK(this->get_Left((float*)&pflLeft));
    return pflLeft;
  }

  short __fastcall get_SubItemIndex(void)
  {
    short psIndex;
    OLECHECK(this->get_SubItemIndex((short*)&psIndex));
    return psIndex;
  }

  VARIANT __fastcall get_Tag(void)
  {
    VARIANT pvTag;
    OLECHECK(this->get_Tag((VARIANT*)&pvTag));
    return pvTag;
  }

  float __fastcall get_Width(void)
  {
    float pflWidth;
    OLECHECK(this->get_Width((float*)&pflWidth));
    return pflWidth;
  }

  VARIANT __fastcall get_Icon(void)
  {
    VARIANT pnIndex;
    OLECHECK(this->get_Icon((VARIANT*)&pnIndex));
    return pnIndex;
  }

  short __fastcall get_Position(void)
  {
    short piPosition;
    OLECHECK(this->get_Position((short*)&piPosition));
    return piPosition;
  }


  __property   BSTR            Default = {read = get_Default};
  __property   BSTR            Text = {read = get_Text};
  __property   Mscomctllib_xp::ListColumnAlignmentConstants Alignment = {read = get_Alignment, write = set_Alignment};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   short           SubItemIndex = {read = get_SubItemIndex, write = set_SubItemIndex};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   short           Position = {read = get_Position, write = set_Position};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IListSubItems
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F053-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IListSubItems  : public IDispatch
{
public:
  // [1] Returns the number of SubItems in the collection.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* plCount/*[out,retval]*/) = 0;
  // [1] Returns the number of SubItems in the collection.
  virtual HRESULT STDMETHODCALLTYPE set_Count(long plCount/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                       Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/) = 0; // [0]
  // [2] Adds a ListSubItem object to a ListSubItems collection only at run time.
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                        VARIANT* Text/*[in,opt]*/, VARIANT* ReportIcon/*[in,opt]*/, 
                                        VARIANT* ToolTipText/*[in,opt]*/, 
                                        Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/) = 0;
  // [3] Removes all objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [4] Returns a specific item of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/) = 0;
  // [5] Removes a specific member from a collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* Index/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppNewEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long plCount;
    OLECHECK(this->get_Count((long*)&plCount));
    return plCount;
  }

  Mscomctllib_xp::IListSubItem* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IListSubItem* ppIListSubItem;
    OLECHECK(this->get_ControlDefault(Index, (Mscomctllib_xp::IListSubItem**)&ppIListSubItem));
    return ppIListSubItem;
  }

  Mscomctllib_xp::IListSubItem* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                               VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                               VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                               VARIANT* ReportIcon/*[in,opt]*/= TNoParam(), 
                                               VARIANT* ToolTipText/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::IListSubItem* ppIListSubItem;
    OLECHECK(this->Add(Index, Key, Text, ReportIcon, ToolTipText, (Mscomctllib_xp::IListSubItem**)&ppIListSubItem));
    return ppIListSubItem;
  }

  Mscomctllib_xp::IListSubItem* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IListSubItem* ppIListSubItem;
    OLECHECK(this->get_Item(Index, (Mscomctllib_xp::IListSubItem**)&ppIListSubItem));
    return ppIListSubItem;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppNewEnum;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppNewEnum));
    return ppNewEnum;
  }


  __property   long            Count = {read = get_Count, write = set_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IListSubItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F055-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IListSubItem  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Default(BSTR* pbstrText/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Default(BSTR pbstrText/*[in]*/) = 0; // [0]
  // [1] Returns/sets the text to display text for a ListSubItem object.
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstrText/*[out,retval]*/) = 0;
  // [1] Returns/sets the text to display text for a ListSubItem object.
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstrText/*[in]*/) = 0;
  // [-513] Returns/sets the foreground color used to display text for a ListSubItem object.
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/) = 0;
  // [-513] Returns/sets the foreground color used to display text for a ListSubItem object.
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(::OLE_COLOR pcrFore/*[in]*/) = 0;
  // [2] Returns/sets a value that determines whether the text for a ListSubItem object is displayed with a bold font.
  virtual HRESULT STDMETHODCALLTYPE get_Bold(VARIANT_BOOL* pfBold/*[out,retval]*/) = 0;
  // [2] Returns/sets a value that determines whether the text for a ListSubItem object is displayed with a bold font.
  virtual HRESULT STDMETHODCALLTYPE set_Bold(VARIANT_BOOL pfBold/*[in]*/) = 0;
  // [4] Returns/sets the subitem's report view icon
  virtual HRESULT STDMETHODCALLTYPE get_ReportIcon(VARIANT* pnIndex/*[out,retval]*/) = 0;
  // [4] Returns/sets the subitem's report view icon
  virtual HRESULT STDMETHODCALLTYPE set_ReportIcon(VARIANT pnIndex/*[in]*/) = 0;
  // [5] Returns/sets the text for the subitem tooltip
  virtual HRESULT STDMETHODCALLTYPE get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/) = 0;
  // [5] Returns/sets the text for the subitem tooltip
  virtual HRESULT STDMETHODCALLTYPE set_ToolTipText(BSTR pbstrToolTipText/*[in]*/) = 0;
  // [6] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* plIndex/*[out,retval]*/) = 0;
  // [6] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE set_Index(long plIndex/*[in]*/) = 0;
  // [7] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Key(BSTR* pbstrKey/*[out,retval]*/) = 0;
  // [7] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Key(BSTR pbstrKey/*[in]*/) = 0;
  // [8] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE get_Tag(VARIANT* pvTag/*[out,retval]*/) = 0;
  // [8] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [8] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE _set_Tag(VARIANT pvTag/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Default(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Default((BSTR*)&pbstrText));
    return pbstrText;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstrText));
    return pbstrText;
  }

  ::OLE_COLOR __fastcall get_ForeColor(void)
  {
    ::OLE_COLOR pcrFore;
    OLECHECK(this->get_ForeColor((::OLE_COLOR*)&pcrFore));
    return pcrFore;
  }

  VARIANT_BOOL __fastcall get_Bold(void)
  {
    VARIANT_BOOL pfBold;
    OLECHECK(this->get_Bold((VARIANT_BOOL*)&pfBold));
    return pfBold;
  }

  VARIANT __fastcall get_ReportIcon(void)
  {
    VARIANT pnIndex;
    OLECHECK(this->get_ReportIcon((VARIANT*)&pnIndex));
    return pnIndex;
  }

  BSTR __fastcall get_ToolTipText(void)
  {
    BSTR pbstrToolTipText = 0;
    OLECHECK(this->get_ToolTipText((BSTR*)&pbstrToolTipText));
    return pbstrToolTipText;
  }

  long __fastcall get_Index(void)
  {
    long plIndex;
    OLECHECK(this->get_Index((long*)&plIndex));
    return plIndex;
  }

  BSTR __fastcall get_Key(void)
  {
    BSTR pbstrKey = 0;
    OLECHECK(this->get_Key((BSTR*)&pbstrKey));
    return pbstrKey;
  }

  VARIANT __fastcall get_Tag(void)
  {
    VARIANT pvTag;
    OLECHECK(this->get_Tag((VARIANT*)&pvTag));
    return pvTag;
  }


  __property   BSTR            Default = {read = get_Default};
  __property   BSTR            Text = {read = get_Text};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IImageList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C247F21-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IImageList  : public IDispatch
{
public:
  // [1] Returns/sets the height of a ListImage object.
  virtual HRESULT STDMETHODCALLTYPE get_ImageHeight(short* psImageHeight/*[out,retval]*/) = 0;
  // [1] Returns/sets the height of a ListImage object.
  virtual HRESULT STDMETHODCALLTYPE set_ImageHeight(short psImageHeight/*[in]*/) = 0;
  // [2] Returns/sets the width of ListImage objects in an ImageList control.
  virtual HRESULT STDMETHODCALLTYPE get_ImageWidth(short* psImageWidth/*[out,retval]*/) = 0;
  // [2] Returns/sets the width of ListImage objects in an ImageList control.
  virtual HRESULT STDMETHODCALLTYPE set_ImageWidth(short psImageWidth/*[in]*/) = 0;
  // [3] Returns/sets a value which determines the color to be transparent in ImageList graphical operations.
  virtual HRESULT STDMETHODCALLTYPE get_MaskColor(::OLE_COLOR* pclrMaskColor/*[out,retval]*/) = 0;
  // [3] Returns/sets a value which determines the color to be transparent in ImageList graphical operations.
  virtual HRESULT STDMETHODCALLTYPE set_MaskColor(::OLE_COLOR pclrMaskColor/*[in]*/) = 0;
  // [7] Returns/sets a value which determines if the ImageList control will use the MaskColor property.
  virtual HRESULT STDMETHODCALLTYPE get_UseMaskColor(VARIANT_BOOL* pbState/*[out,retval]*/) = 0;
  // [7] Returns/sets a value which determines if the ImageList control will use the MaskColor property.
  virtual HRESULT STDMETHODCALLTYPE set_UseMaskColor(VARIANT_BOOL pbState/*[in]*/) = 0;
  // [4] Returns a reference to a collection of ListImage objects in an ImageList control.
  virtual HRESULT STDMETHODCALLTYPE get_ListImages(Mscomctllib_xp::IImages** ppListImages/*[out,retval]*/) = 0;
  // [4] Returns a reference to a collection of ListImage objects in an ImageList control.
  virtual HRESULT STDMETHODCALLTYPE _set_ListImages(Mscomctllib_xp::IImages* ppListImages/*[in]*/) = 0;
  // [5] Returns a handle to an ImageList control.
  virtual HRESULT STDMETHODCALLTYPE get_hImageList(OLE_HANDLE* phImageList/*[out,retval]*/) = 0;
  // [5] Returns a handle to an ImageList control.
  virtual HRESULT STDMETHODCALLTYPE set_hImageList(OLE_HANDLE phImageList/*[in]*/) = 0;
  // [-501] Returns/sets the background color used to display text and graphics in an object.
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(::OLE_COLOR* pclrBackColor/*[out,retval]*/) = 0;
  // [-501] Returns/sets the background color used to display text and graphics in an object.
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(::OLE_COLOR pclrBackColor/*[in]*/) = 0;
  // [6] Creates a composite third image out of two ListImage objects and returns a reference to the new object.
  virtual HRESULT STDMETHODCALLTYPE Overlay(VARIANT* Key1/*[in]*/, VARIANT* Key2/*[in]*/, 
                                            IPictureDisp** ppPictureDisp/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  short __fastcall get_ImageHeight(void)
  {
    short psImageHeight;
    OLECHECK(this->get_ImageHeight((short*)&psImageHeight));
    return psImageHeight;
  }

  short __fastcall get_ImageWidth(void)
  {
    short psImageWidth;
    OLECHECK(this->get_ImageWidth((short*)&psImageWidth));
    return psImageWidth;
  }

  ::OLE_COLOR __fastcall get_MaskColor(void)
  {
    ::OLE_COLOR pclrMaskColor;
    OLECHECK(this->get_MaskColor((::OLE_COLOR*)&pclrMaskColor));
    return pclrMaskColor;
  }

  VARIANT_BOOL __fastcall get_UseMaskColor(void)
  {
    VARIANT_BOOL pbState;
    OLECHECK(this->get_UseMaskColor((VARIANT_BOOL*)&pbState));
    return pbState;
  }

  Mscomctllib_xp::IImages* __fastcall get_ListImages(void)
  {
    Mscomctllib_xp::IImages* ppListImages;
    OLECHECK(this->get_ListImages((Mscomctllib_xp::IImages**)&ppListImages));
    return ppListImages;
  }

  OLE_HANDLE __fastcall get_hImageList(void)
  {
    OLE_HANDLE phImageList;
    OLECHECK(this->get_hImageList((OLE_HANDLE*)&phImageList));
    return phImageList;
  }

  ::OLE_COLOR __fastcall get_BackColor(void)
  {
    ::OLE_COLOR pclrBackColor;
    OLECHECK(this->get_BackColor((::OLE_COLOR*)&pclrBackColor));
    return pclrBackColor;
  }

  IPictureDisp* __fastcall Overlay(VARIANT* Key1/*[in]*/, VARIANT* Key2/*[in]*/)
  {
    IPictureDisp* ppPictureDisp;
    OLECHECK(this->Overlay(Key1, Key2, (IPictureDisp**)&ppPictureDisp));
    return ppPictureDisp;
  }


  __property   short           ImageHeight = {read = get_ImageHeight, write = set_ImageHeight};
  __property   short           ImageWidth = {read = get_ImageWidth, write = set_ImageWidth};
  __property   ::OLE_COLOR     MaskColor = {read = get_MaskColor, write = set_MaskColor};
  __property   VARIANT_BOOL    UseMaskColor = {read = get_UseMaskColor, write = set_UseMaskColor};
  __property   Mscomctllib_xp::IImages* ListImages = {read = get_ListImages, write = _set_ListImages};
  __property   OLE_HANDLE      hImageList = {read = get_hImageList, write = set_hImageList};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ImageListEvents
// Flags:     (4096) Dispatchable
// GUID:      {2C247F22-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface ImageListEvents : public TDispWrapper<IDispatch>
{

};
// *********************************************************************//
// Interface: IImages
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C247F24-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IImages  : public IDispatch
{
public:
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Count(short* psCount/*[out,retval]*/) = 0;
  // [1] Returns the number of objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Count(short psCount/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                       Mscomctllib_xp::IImage** ppListImage/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                        Mscomctllib_xp::IImage* ppListImage/*[in]*/) = 0; // [0]
  // [2] Adds a ListImage object to a ListImages collection and returns a reference to the created object.
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                        VARIANT* Picture/*[in,opt]*/, 
                                        Mscomctllib_xp::IImage** ppListImage/*[out,retval]*/) = 0;
  // [3] Removes all objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [4] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::IImage** Item/*[out,retval]*/) = 0;
  // [4] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE _set_Item(VARIANT* Index/*[in]*/, 
                                              Mscomctllib_xp::IImage* Item/*[in]*/) = 0;
  // [5] Removes a specific member from a collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* Index/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  short __fastcall get_Count(void)
  {
    short psCount;
    OLECHECK(this->get_Count((short*)&psCount));
    return psCount;
  }

  Mscomctllib_xp::IImage* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IImage* ppListImage;
    OLECHECK(this->get_ControlDefault(Index, (Mscomctllib_xp::IImage**)&ppListImage));
    return ppListImage;
  }

  Mscomctllib_xp::IImage* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Picture/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::IImage* ppListImage;
    OLECHECK(this->Add(Index, Key, Picture, (Mscomctllib_xp::IImage**)&ppListImage));
    return ppListImage;
  }

  Mscomctllib_xp::IImage* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IImage* Item;
    OLECHECK(this->get_Item(Index, (Mscomctllib_xp::IImage**)&Item));
    return Item;
  }

  LPDISPATCH __fastcall _NewEnum(void)
  {
    LPDISPATCH ppNewEnum;
    OLECHECK(this->_NewEnum((LPDISPATCH*)&ppNewEnum));
    return ppNewEnum;
  }


  __property   short           Count = {read = get_Count, write = set_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IImage
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C247F26-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IImage  : public IDispatch
{
public:
  // [1] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE get_Index(short* psIndex/*[out,retval]*/) = 0;
  // [1] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE set_Index(short psIndex/*[in]*/) = 0;
  // [2] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Key(BSTR* pbstrKey/*[out,retval]*/) = 0;
  // [2] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Key(BSTR pbstrKey/*[in]*/) = 0;
  // [6] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE get_Tag(VARIANT* pvTag/*[out,retval]*/) = 0;
  // [6] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [3] Returns/sets the image Picture
  virtual HRESULT STDMETHODCALLTYPE get_Picture(IPictureDisp** ppPictureDisp/*[out,retval]*/) = 0;
  // [3] Returns/sets the image Picture
  virtual HRESULT STDMETHODCALLTYPE _set_Picture(IPictureDisp* ppPictureDisp/*[in]*/) = 0;
  // [4] Draws the image to a given device context (DC) at a specified location using a specified style
  virtual HRESULT STDMETHODCALLTYPE Draw(OLE_HANDLE hDC/*[in]*/, VARIANT* x/*[in,opt]*/= TNoParam(), 
                                         VARIANT* y/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Style/*[in,opt]*/= TNoParam()) = 0;
  // [5] Creates an icon from a ListImage object in an ImageList control
  virtual HRESULT STDMETHODCALLTYPE ExtractIcon(IPictureDisp** ppIconDisp/*[out,retval]*/) = 0;
  // [6] Stores any extra data needed for your program.
  virtual HRESULT STDMETHODCALLTYPE _set_Tag(VARIANT pvTag/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  short __fastcall get_Index(void)
  {
    short psIndex;
    OLECHECK(this->get_Index((short*)&psIndex));
    return psIndex;
  }

  BSTR __fastcall get_Key(void)
  {
    BSTR pbstrKey = 0;
    OLECHECK(this->get_Key((BSTR*)&pbstrKey));
    return pbstrKey;
  }

  VARIANT __fastcall get_Tag(void)
  {
    VARIANT pvTag;
    OLECHECK(this->get_Tag((VARIANT*)&pvTag));
    return pvTag;
  }

  IPictureDisp* __fastcall get_Picture(void)
  {
    IPictureDisp* ppPictureDisp;
    OLECHECK(this->get_Picture((IPictureDisp**)&ppPictureDisp));
    return ppPictureDisp;
  }

  IPictureDisp* __fastcall ExtractIcon(void)
  {
    IPictureDisp* ppIconDisp;
    OLECHECK(this->ExtractIcon((IPictureDisp**)&ppIconDisp));
    return ppIconDisp;
  }


  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   IPictureDisp*   Picture = {read = get_Picture, write = _set_Picture};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISlider
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F08DF952-8592-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface ISlider  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__Value(long* plValue/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set__Value(long plValue/*[in]*/) = 0; // [0]
  // [1] Returns/sets the increment value when the PageDown or PageUp key is pressed.
  virtual HRESULT STDMETHODCALLTYPE get_LargeChange(long* plLargeChange/*[out,retval]*/) = 0;
  // [1] Returns/sets the increment value when the PageDown or PageUp key is pressed.
  virtual HRESULT STDMETHODCALLTYPE set_LargeChange(long plLargeChange/*[in]*/) = 0;
  // [2] Returns/sets the increment value when the left or right arrow key is pressed.
  virtual HRESULT STDMETHODCALLTYPE get_SmallChange(long* plSmallChange/*[out,retval]*/) = 0;
  // [2] Returns/sets the increment value when the left or right arrow key is pressed.
  virtual HRESULT STDMETHODCALLTYPE set_SmallChange(long plSmallChange/*[in]*/) = 0;
  // [3] Returns/sets the maximum value of a control.
  virtual HRESULT STDMETHODCALLTYPE get_Max(long* plMax/*[out,retval]*/) = 0;
  // [3] Returns/sets the maximum value of a control.
  virtual HRESULT STDMETHODCALLTYPE set_Max(long plMax/*[in]*/) = 0;
  // [4] Returns/sets the minimum value of a control.
  virtual HRESULT STDMETHODCALLTYPE get_Min(long* plMin/*[out,retval]*/) = 0;
  // [4] Returns/sets the minimum value of a control.
  virtual HRESULT STDMETHODCALLTYPE set_Min(long plMin/*[in]*/) = 0;
  // [5] Returns/sets the orientation of a Slider control, horizontal or vertical.
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Mscomctllib_xp::OrientationConstants* pOrientation/*[out,retval]*/) = 0;
  // [5] Returns/sets the orientation of a Slider control, horizontal or vertical.
  virtual HRESULT STDMETHODCALLTYPE set_Orientation(Mscomctllib_xp::OrientationConstants pOrientation/*[in]*/) = 0;
  // [6] Returns/sets whether or not a Slider control can have a select range.
  virtual HRESULT STDMETHODCALLTYPE get_SelectRange(VARIANT_BOOL* pbSelectRange/*[out,retval]*/) = 0;
  // [6] Returns/sets whether or not a Slider control can have a select range.
  virtual HRESULT STDMETHODCALLTYPE set_SelectRange(VARIANT_BOOL pbSelectRange/*[in]*/) = 0;
  // [7] Returns/sets the value where a selection starts.
  virtual HRESULT STDMETHODCALLTYPE get_SelStart(long* plSelStart/*[out,retval]*/) = 0;
  // [7] Returns/sets the value where a selection starts.
  virtual HRESULT STDMETHODCALLTYPE set_SelStart(long plSelStart/*[in]*/) = 0;
  // [8] Returns/sets the length of a selection.
  virtual HRESULT STDMETHODCALLTYPE get_SelLength(long* plSelLength/*[out,retval]*/) = 0;
  // [8] Returns/sets the length of a selection.
  virtual HRESULT STDMETHODCALLTYPE set_SelLength(long plSelLength/*[in]*/) = 0;
  // [9] Returns/sets where ticks appear on a Slider control.
  virtual HRESULT STDMETHODCALLTYPE get_TickStyle(Mscomctllib_xp::TickStyleConstants* pTickStyle/*[out,retval]*/) = 0;
  // [9] Returns/sets where ticks appear on a Slider control.
  virtual HRESULT STDMETHODCALLTYPE set_TickStyle(Mscomctllib_xp::TickStyleConstants pTickStyle/*[in]*/) = 0;
  // [10] Returns/sets the ratio of ticks on a Slider control; 1tick every n increments.
  virtual HRESULT STDMETHODCALLTYPE get_TickFrequency(long* plTickFrequency/*[out,retval]*/) = 0;
  // [10] Returns/sets the ratio of ticks on a Slider control; 1tick every n increments.
  virtual HRESULT STDMETHODCALLTYPE set_TickFrequency(long plTickFrequency/*[in]*/) = 0;
  // [11] Returns/sets the value of an object.
  virtual HRESULT STDMETHODCALLTYPE get_Value(long* plValue/*[out,retval]*/) = 0;
  // [11] Returns/sets the value of an object.
  virtual HRESULT STDMETHODCALLTYPE set_Value(long plValue/*[in]*/) = 0;
  // [12] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/) = 0;
  // [12] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [12] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [13] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/) = 0;
  // [13] Returns/sets the type of mouse pointer displayed when over part of an object.
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [-514] Returns/sets a value that determines whether a form or control can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/) = 0;
  // [-515] Returns a handle to a form or control.
  virtual HRESULT STDMETHODCALLTYPE set_hWnd(OLE_HANDLE phWnd/*[in]*/) = 0;
  // [-504] Returns/sets the border style for an object.
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/) = 0;
  // [-504] Returns/sets the border style for an object.
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/) = 0;
  // [-550] Forces a complete repaint of a form or control.
  virtual void STDMETHODCALLTYPE Refresh(void) = 0;
  // [14] Sets the SelLength to 0.
  virtual void STDMETHODCALLTYPE ClearSel(void) = 0;
  // [-551] Hidden method that can be used to invoke the Click event
  virtual void STDMETHODCALLTYPE DoClick(void) = 0;
  // [15] Returns the number of visible ticks on a Slider control.
  virtual HRESULT STDMETHODCALLTYPE get_GetNumTicks(long* plNumTicks/*[out,retval]*/) = 0;
  // [1552] Starts an OLE drag/drop event with the given control as the source.
  virtual HRESULT STDMETHODCALLTYPE OLEDrag(void) = 0;
  virtual void STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]
  // [16] Returns/sets the string displayed in the ToolTip as the slider's position changes.
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstrText/*[out,retval]*/) = 0;
  // [16] Returns/sets the string displayed in the ToolTip as the slider's position changes.
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstrText/*[in]*/) = 0;
  // [17] Returns/sets a value that determines where the tooltip displaying the Slider's changing position is displayed.
  virtual HRESULT STDMETHODCALLTYPE get_TextPosition(Mscomctllib_xp::TextPositionConstants* penumTextPosition/*[out,retval]*/) = 0;
  // [17] Returns/sets a value that determines where the tooltip displaying the Slider's changing position is displayed.
  virtual HRESULT STDMETHODCALLTYPE set_TextPosition(Mscomctllib_xp::TextPositionConstants penumTextPosition/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get__Value(void)
  {
    long plValue;
    OLECHECK(this->get__Value((long*)&plValue));
    return plValue;
  }

  long __fastcall get_LargeChange(void)
  {
    long plLargeChange;
    OLECHECK(this->get_LargeChange((long*)&plLargeChange));
    return plLargeChange;
  }

  long __fastcall get_SmallChange(void)
  {
    long plSmallChange;
    OLECHECK(this->get_SmallChange((long*)&plSmallChange));
    return plSmallChange;
  }

  long __fastcall get_Max(void)
  {
    long plMax;
    OLECHECK(this->get_Max((long*)&plMax));
    return plMax;
  }

  long __fastcall get_Min(void)
  {
    long plMin;
    OLECHECK(this->get_Min((long*)&plMin));
    return plMin;
  }

  Mscomctllib_xp::OrientationConstants __fastcall get_Orientation(void)
  {
    Mscomctllib_xp::OrientationConstants pOrientation;
    OLECHECK(this->get_Orientation((Mscomctllib_xp::OrientationConstants*)&pOrientation));
    return pOrientation;
  }

  VARIANT_BOOL __fastcall get_SelectRange(void)
  {
    VARIANT_BOOL pbSelectRange;
    OLECHECK(this->get_SelectRange((VARIANT_BOOL*)&pbSelectRange));
    return pbSelectRange;
  }

  long __fastcall get_SelStart(void)
  {
    long plSelStart;
    OLECHECK(this->get_SelStart((long*)&plSelStart));
    return plSelStart;
  }

  long __fastcall get_SelLength(void)
  {
    long plSelLength;
    OLECHECK(this->get_SelLength((long*)&plSelLength));
    return plSelLength;
  }

  Mscomctllib_xp::TickStyleConstants __fastcall get_TickStyle(void)
  {
    Mscomctllib_xp::TickStyleConstants pTickStyle;
    OLECHECK(this->get_TickStyle((Mscomctllib_xp::TickStyleConstants*)&pTickStyle));
    return pTickStyle;
  }

  long __fastcall get_TickFrequency(void)
  {
    long plTickFrequency;
    OLECHECK(this->get_TickFrequency((long*)&plTickFrequency));
    return plTickFrequency;
  }

  long __fastcall get_Value(void)
  {
    long plValue;
    OLECHECK(this->get_Value((long*)&plValue));
    return plValue;
  }

  IPictureDisp* __fastcall get_MouseIcon(void)
  {
    IPictureDisp* ppMouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
    return ppMouseIcon;
  }

  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void)
  {
    Mscomctllib_xp::MousePointerConstants psMousePointer;
    OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer));
    return psMousePointer;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  OLE_HANDLE __fastcall get_hWnd(void)
  {
    OLE_HANDLE phWnd;
    OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
    return phWnd;
  }

  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void)
  {
    Mscomctllib_xp::BorderStyleConstants psBorderStyle;
    OLECHECK(this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&psBorderStyle));
    return psBorderStyle;
  }

  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void)
  {
    Mscomctllib_xp::OLEDropConstants psOLEDropMode;
    OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
    return psOLEDropMode;
  }

  long __fastcall get_GetNumTicks(void)
  {
    long plNumTicks;
    OLECHECK(this->get_GetNumTicks((long*)&plNumTicks));
    return plNumTicks;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstrText));
    return pbstrText;
  }

  Mscomctllib_xp::TextPositionConstants __fastcall get_TextPosition(void)
  {
    Mscomctllib_xp::TextPositionConstants penumTextPosition;
    OLECHECK(this->get_TextPosition((Mscomctllib_xp::TextPositionConstants*)&penumTextPosition));
    return penumTextPosition;
  }


  __property   long            _Value = {read = get__Value, write = set__Value};
  __property   long            LargeChange = {read = get_LargeChange, write = set_LargeChange};
  __property   long            SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            Min = {read = get_Min, write = set_Min};
  __property   Mscomctllib_xp::OrientationConstants Orientation = {read = get_Orientation, write = set_Orientation};
  __property   VARIANT_BOOL    SelectRange = {read = get_SelectRange, write = set_SelectRange};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   Mscomctllib_xp::TickStyleConstants TickStyle = {read = get_TickStyle, write = set_TickStyle};
  __property   long            TickFrequency = {read = get_TickFrequency, write = set_TickFrequency};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   long            GetNumTicks = {read = get_GetNumTicks};
  __property   BSTR            Text = {read = get_Text};
  __property   Mscomctllib_xp::TextPositionConstants TextPosition = {read = get_TextPosition, write = set_TextPosition};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISliderEvents
// Flags:     (4096) Dispatchable
// GUID:      {F08DF953-8592-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface ISliderEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(short* KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(short* KeyAscii)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = KeyAscii /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(short* KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall Scroll()
  {
    _TDispID _dispid(/* Scroll */ DISPID(1));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = AllowedEffects /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
    TAutoArgs<2> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/)
  {
    _TDispID _dispid(/* OLESetData */ DISPID(1552));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = DataFormat /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/)
  {
    _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
    TAutoArgs<1> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    _args[7] = State /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
    TAutoArgs<6> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IControls
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8A3DC00-8593-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IControls  : public IDispatch
{
public:
  // [1] Returns the number of members in a collection
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* plCount/*[out,retval]*/) = 0;
  // [0] Returns a specific member of a Collection object either by position or by key
  virtual HRESULT STDMETHODCALLTYPE get_Item(long Index/*[in]*/, LPDISPATCH* ppDisp/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long plCount;
    OLECHECK(this->get_Count((long*)&plCount));
    return plCount;
  }

  LPDISPATCH __fastcall get_Item(long Index/*[in]*/)
  {
    LPDISPATCH ppDisp;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&ppDisp));
    return ppDisp;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppUnk;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppUnk));
    return ppUnk;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IComboItem
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD9DA660-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IComboItem  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set__ObjectDefault(BSTR pbstrText/*[in]*/) = 0; // [0]
  // [2] Index into ImageList control where the normal image for this item can be found.
  virtual HRESULT STDMETHODCALLTYPE get_Image(VARIANT* pvImage/*[out,retval]*/) = 0;
  // [2] Index into ImageList control where the normal image for this item can be found.
  virtual HRESULT STDMETHODCALLTYPE set_Image(VARIANT pvImage/*[in]*/) = 0;
  // [5] Number of spaces to indent the text for the item.  Each indent is equal to 10 pixels.
  virtual HRESULT STDMETHODCALLTYPE get_Indentation(short* psIndent/*[out,retval]*/) = 0;
  // [5] Number of spaces to indent the text for the item.  Each indent is equal to 10 pixels.
  virtual HRESULT STDMETHODCALLTYPE set_Indentation(short psIndent/*[in]*/) = 0;
  // [6] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE get_Index(long* plIndex/*[out,retval]*/) = 0;
  // [6] Returns/sets the index of an object in a collection. Read-only at run time.
  virtual HRESULT STDMETHODCALLTYPE set_Index(long plIndex/*[in]*/) = 0;
  // [8] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE get_Key(BSTR* pbstrKey/*[out,retval]*/) = 0;
  // [8] Returns/sets the unique string of an object in a collection.
  virtual HRESULT STDMETHODCALLTYPE set_Key(BSTR pbstrKey/*[in]*/) = 0;
  // [13] Returns/sets a value which determines if a ComboItem is selected.
  virtual HRESULT STDMETHODCALLTYPE get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/) = 0;
  // [13] Returns/sets a value which determines if a ComboItem is selected.
  virtual HRESULT STDMETHODCALLTYPE set_Selected(VARIANT_BOOL pbSelected/*[in]*/) = 0;
  // [15] Index into ImageList control where the selected image for this item can be found.
  virtual HRESULT STDMETHODCALLTYPE get_SelImage(VARIANT* pvImage/*[out,retval]*/) = 0;
  // [15] Index into ImageList control where the selected image for this item can be found.
  virtual HRESULT STDMETHODCALLTYPE set_SelImage(VARIANT pvImage/*[in]*/) = 0;
  // [21] Returns/sets a specific number for each item in an ImageCombo.
  virtual HRESULT STDMETHODCALLTYPE get_Tag(VARIANT* pvTag/*[out,retval]*/) = 0;
  // [21] Returns/sets a specific number for each item in an ImageCombo.
  virtual HRESULT STDMETHODCALLTYPE set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [21] Returns/sets a specific number for each item in an ImageCombo.
  virtual HRESULT STDMETHODCALLTYPE _set_Tag(VARIANT pvTag/*[in]*/) = 0;
  // [23] Text label for this item.
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstrText/*[out,retval]*/) = 0;
  // [23] Text label for this item.
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstrText/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get__ObjectDefault(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get__ObjectDefault((BSTR*)&pbstrText));
    return pbstrText;
  }

  VARIANT __fastcall get_Image(void)
  {
    VARIANT pvImage;
    OLECHECK(this->get_Image((VARIANT*)&pvImage));
    return pvImage;
  }

  short __fastcall get_Indentation(void)
  {
    short psIndent;
    OLECHECK(this->get_Indentation((short*)&psIndent));
    return psIndent;
  }

  long __fastcall get_Index(void)
  {
    long plIndex;
    OLECHECK(this->get_Index((long*)&plIndex));
    return plIndex;
  }

  BSTR __fastcall get_Key(void)
  {
    BSTR pbstrKey = 0;
    OLECHECK(this->get_Key((BSTR*)&pbstrKey));
    return pbstrKey;
  }

  VARIANT_BOOL __fastcall get_Selected(void)
  {
    VARIANT_BOOL pbSelected;
    OLECHECK(this->get_Selected((VARIANT_BOOL*)&pbSelected));
    return pbSelected;
  }

  VARIANT __fastcall get_SelImage(void)
  {
    VARIANT pvImage;
    OLECHECK(this->get_SelImage((VARIANT*)&pvImage));
    return pvImage;
  }

  VARIANT __fastcall get_Tag(void)
  {
    VARIANT pvTag;
    OLECHECK(this->get_Tag((VARIANT*)&pvTag));
    return pvTag;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstrText));
    return pbstrText;
  }


  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   short           Indentation = {read = get_Indentation, write = set_Indentation};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   BSTR            Text = {read = get_Text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IComboItems
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD9DA662-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IComboItems  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__CollectionDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set__CollectionDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::IComboItem* ppComboItem/*[in]*/) = 0; // [0]
  // [27] Returns the number of members currently in the collection.
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* plCount/*[out,retval]*/) = 0;
  // [27] Returns the number of members currently in the collection.
  virtual HRESULT STDMETHODCALLTYPE set_Count(long plCount/*[in]*/) = 0;
  // [28] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/) = 0;
  // [28] Returns a specific member of a Collection object either by position or by key.
  virtual HRESULT STDMETHODCALLTYPE set_Item(VARIANT* Index/*[in]*/, 
                                             Mscomctllib_xp::IComboItem* ppComboItem/*[in]*/) = 0;
  // [25] Adds an object to a collection and returns a reference to the created object.
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                        VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                                        VARIANT* SelImage/*[in,opt]*/, 
                                        VARIANT* Indentation/*[in,opt]*/, 
                                        Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/) = 0;
  // [26] Removes all objects in a collection.
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0;
  // [29] Removes the item at the given index from the collection.
  virtual HRESULT STDMETHODCALLTYPE Remove(VARIANT* Index/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Mscomctllib_xp::IComboItem* __fastcall get__CollectionDefault(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IComboItem* ppComboItem;
    OLECHECK(this->get__CollectionDefault(Index, (Mscomctllib_xp::IComboItem**)&ppComboItem));
    return ppComboItem;
  }

  long __fastcall get_Count(void)
  {
    long plCount;
    OLECHECK(this->get_Count((long*)&plCount));
    return plCount;
  }

  Mscomctllib_xp::IComboItem* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Mscomctllib_xp::IComboItem* ppComboItem;
    OLECHECK(this->get_Item(Index, (Mscomctllib_xp::IComboItem**)&ppComboItem));
    return ppComboItem;
  }

  Mscomctllib_xp::IComboItem* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Image/*[in,opt]*/= TNoParam(), 
                                             VARIANT* SelImage/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Indentation/*[in,opt]*/= TNoParam())
  {
    Mscomctllib_xp::IComboItem* ppComboItem;
    OLECHECK(this->Add(Index, Key, Text, Image, SelImage, Indentation, (Mscomctllib_xp::IComboItem**)&ppComboItem));
    return ppComboItem;
  }

  LPDISPATCH __fastcall _NewEnum(void)
  {
    LPDISPATCH ppNewEnum;
    OLECHECK(this->_NewEnum((LPDISPATCH*)&ppNewEnum));
    return ppNewEnum;
  }


  __property   long            Count = {read = get_Count, write = set_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IImageCombo
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD9DA664-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface IImageCombo  : public IDispatch
{
public:
  // [-517] Returns/sets the text contained in an object.
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstrText/*[out,retval]*/) = 0;
  // [-517] Returns/sets the text contained in an object.
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstrText/*[in]*/) = 0;
  // [-501] Returns/sets the background color of an object.
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(::OLE_COLOR* pocBackColor/*[out,retval]*/) = 0;
  // [-501] Returns/sets the background color of an object.
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(::OLE_COLOR pocBackColor/*[in]*/) = 0;
  // [-514] Returns/sets a value that determines whether an object can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/) = 0;
  // [-514] Returns/sets a value that determines whether an object can respond to user-generated events.
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** ppFont/*[out,retval]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE set_Font(IFontDisp* ppFont/*[in]*/) = 0;
  // [-512] Returns a Font object.
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp* ppFont/*[in]*/) = 0;
  // [-513] Returns/sets the foreground color used to display text and graphics in an object.
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(::OLE_COLOR* pocForeColor/*[out,retval]*/) = 0;
  // [-513] Returns/sets the foreground color used to display text and graphics in an object.
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(::OLE_COLOR pocForeColor/*[in]*/) = 0;
  // [-515] Returns a handle to the control.
  virtual HRESULT STDMETHODCALLTYPE get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/) = 0;
  // [-515] Returns a handle to the control.
  virtual HRESULT STDMETHODCALLTYPE set_hWnd(OLE_HANDLE phWnd/*[in]*/) = 0;
  // [3] Returns/sets the ImageList control to be used.
  virtual HRESULT STDMETHODCALLTYPE get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/) = 0;
  // [3] Returns/sets the ImageList control to be used.
  virtual HRESULT STDMETHODCALLTYPE _set_ImageList(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [3] Returns/sets the ImageList control to be used.
  virtual HRESULT STDMETHODCALLTYPE set_ImageList(LPDISPATCH ppImageList/*[in]*/) = 0;
  // [4] The default number of spaces to indent the text for newly added items.  Each indent is equal to 10 pixels.
  virtual HRESULT STDMETHODCALLTYPE get_Indentation(short* psIndent/*[out,retval]*/) = 0;
  // [4] The default number of spaces to indent the text for newly added items.  Each indent is equal to 10 pixels.
  virtual HRESULT STDMETHODCALLTYPE set_Indentation(short psIndent/*[in]*/) = 0;
  // [7] The ComboItems Collection.
  virtual HRESULT STDMETHODCALLTYPE get_ComboItems(Mscomctllib_xp::IComboItems** ppComboItems/*[out,retval]*/) = 0;
  // [7] The ComboItems Collection.
  virtual HRESULT STDMETHODCALLTYPE _set_ComboItems(Mscomctllib_xp::IComboItems* ppComboItems/*[in]*/) = 0;
  // [9] Returns/sets a value indicating whether the contents in an Image Combo control can be edited.
  virtual HRESULT STDMETHODCALLTYPE get_Locked(VARIANT_BOOL* pbLocked/*[out,retval]*/) = 0;
  // [9] Returns/sets a value indicating whether the contents in an Image Combo control can be edited.
  virtual HRESULT STDMETHODCALLTYPE set_Locked(VARIANT_BOOL pbLocked/*[in]*/) = 0;
  // [10] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/) = 0;
  // [10] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [10] Sets a custom mouse icon.
  virtual HRESULT STDMETHODCALLTYPE _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/) = 0;
  // [11] Returns/sets a value indicating the type of mouse pointer displayed when the mouse is over the control at run time.
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(Mscomctllib_xp::MousePointerConstants* penumMousePointer/*[out,retval]*/) = 0;
  // [11] Returns/sets a value indicating the type of mouse pointer displayed when the mouse is over the control at run time.
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(Mscomctllib_xp::MousePointerConstants penumMousePointer/*[in]*/) = 0;
  // [1550] Returns/Sets whether this control can act as an OLE drag/drop source, and whether this process is started automatically or under programmatic control.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/) = 0;
  // [1550] Returns/Sets whether this control can act as an OLE drag/drop source, and whether this process is started automatically or under programmatic control.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/) = 0;
  // [1551] Returns/Sets whether this control can act as an OLE drop target.
  virtual HRESULT STDMETHODCALLTYPE set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/) = 0;
  // [14] Returns a reference to the currently selected ComboItem.
  virtual HRESULT STDMETHODCALLTYPE get_SelectedItem(Mscomctllib_xp::IComboItem** ppIComboItem/*[out,retval]*/) = 0;
  // [14] Returns a reference to the currently selected ComboItem.
  virtual HRESULT STDMETHODCALLTYPE _set_SelectedItem(Mscomctllib_xp::IComboItem* ppIComboItem/*[in]*/) = 0;
  // [14] Returns a reference to the currently selected ComboItem.
  virtual HRESULT STDMETHODCALLTYPE set_SelectedItem(VARIANT* ppIComboItem/*[in]*/) = 0;
  // [16] Returns/sets the number of characters selected.
  virtual HRESULT STDMETHODCALLTYPE get_SelLength(long* plSelLength/*[out,retval]*/) = 0;
  // [16] Returns/sets the number of characters selected.
  virtual HRESULT STDMETHODCALLTYPE set_SelLength(long plSelLength/*[in]*/) = 0;
  // [17] Returns/sets the starting point of text selected; indicates the position of the insertion point if no text is selected.
  virtual HRESULT STDMETHODCALLTYPE get_SelStart(long* plSelStart/*[out,retval]*/) = 0;
  // [17] Returns/sets the starting point of text selected; indicates the position of the insertion point if no text is selected.
  virtual HRESULT STDMETHODCALLTYPE set_SelStart(long plSelStart/*[in]*/) = 0;
  // [18] Returns/sets the string containing the currently selected text; consists of a zero-length string if no characters are selected.
  virtual HRESULT STDMETHODCALLTYPE get_SelText(BSTR* pbstrText/*[out,retval]*/) = 0;
  // [18] Returns/sets the string containing the currently selected text; consists of a zero-length string if no characters are selected.
  virtual HRESULT STDMETHODCALLTYPE set_SelText(BSTR pbstrText/*[in]*/) = 0;
  // [20] Returns/sets the style for an Image Combobox control.
  virtual HRESULT STDMETHODCALLTYPE get_Style(Mscomctllib_xp::ImageComboStyleConstants* penumStyle/*[out,retval]*/) = 0;
  // [20] Returns/sets the style for an Image Combobox control.
  virtual HRESULT STDMETHODCALLTYPE set_Style(Mscomctllib_xp::ImageComboStyleConstants penumStyle/*[in]*/) = 0;
  // [24] (Windows NT Only) Returns/sets a value that determines whether the edit box uses the slash ('/'), backslash ('') and period ('.') characters as word delimiters.
  virtual HRESULT STDMETHODCALLTYPE get_UsePathSep(VARIANT_BOOL* pbUsePathSep/*[out,retval]*/) = 0;
  // [24] (Windows NT Only) Returns/sets a value that determines whether the edit box uses the slash ('/'), backslash ('') and period ('.') characters as word delimiters.
  virtual HRESULT STDMETHODCALLTYPE set_UsePathSep(VARIANT_BOOL pbUsePathSep/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE AboutBox(void) = 0; // [-552]
  // [30] Retrieves a reference of the first item visible in the list portion of the control.
  virtual HRESULT STDMETHODCALLTYPE GetFirstVisible(Mscomctllib_xp::IComboItem** ppIComboItem/*[out,retval]*/) = 0;
  // [-550] Forces a complete repaint of a control.
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0;
  // [1552] Starts an OLE drag/drop event with the given control as the source.
  virtual HRESULT STDMETHODCALLTYPE OLEDrag(void) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstrText));
    return pbstrText;
  }

  ::OLE_COLOR __fastcall get_BackColor(void)
  {
    ::OLE_COLOR pocBackColor;
    OLECHECK(this->get_BackColor((::OLE_COLOR*)&pocBackColor));
    return pocBackColor;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pbEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
    return pbEnabled;
  }

  IFontDisp* __fastcall get_Font(void)
  {
    IFontDisp* ppFont;
    OLECHECK(this->get_Font((IFontDisp**)&ppFont));
    return ppFont;
  }

  ::OLE_COLOR __fastcall get_ForeColor(void)
  {
    ::OLE_COLOR pocForeColor;
    OLECHECK(this->get_ForeColor((::OLE_COLOR*)&pocForeColor));
    return pocForeColor;
  }

  OLE_HANDLE __fastcall get_hWnd(void)
  {
    OLE_HANDLE phWnd;
    OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
    return phWnd;
  }

  LPDISPATCH __fastcall get_ImageList(void)
  {
    LPDISPATCH ppImageList;
    OLECHECK(this->get_ImageList((LPDISPATCH*)&ppImageList));
    return ppImageList;
  }

  short __fastcall get_Indentation(void)
  {
    short psIndent;
    OLECHECK(this->get_Indentation((short*)&psIndent));
    return psIndent;
  }

  Mscomctllib_xp::IComboItems* __fastcall get_ComboItems(void)
  {
    Mscomctllib_xp::IComboItems* ppComboItems;
    OLECHECK(this->get_ComboItems((Mscomctllib_xp::IComboItems**)&ppComboItems));
    return ppComboItems;
  }

  VARIANT_BOOL __fastcall get_Locked(void)
  {
    VARIANT_BOOL pbLocked;
    OLECHECK(this->get_Locked((VARIANT_BOOL*)&pbLocked));
    return pbLocked;
  }

  IPictureDisp* __fastcall get_MouseIcon(void)
  {
    IPictureDisp* ppMouseIcon;
    OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
    return ppMouseIcon;
  }

  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void)
  {
    Mscomctllib_xp::MousePointerConstants penumMousePointer;
    OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&penumMousePointer));
    return penumMousePointer;
  }

  Mscomctllib_xp::OLEDragConstants __fastcall get_OLEDragMode(void)
  {
    Mscomctllib_xp::OLEDragConstants psOLEDragMode;
    OLECHECK(this->get_OLEDragMode((Mscomctllib_xp::OLEDragConstants*)&psOLEDragMode));
    return psOLEDragMode;
  }

  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void)
  {
    Mscomctllib_xp::OLEDropConstants psOLEDropMode;
    OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
    return psOLEDropMode;
  }

  Mscomctllib_xp::IComboItem* __fastcall get_SelectedItem(void)
  {
    Mscomctllib_xp::IComboItem* ppIComboItem;
    OLECHECK(this->get_SelectedItem((Mscomctllib_xp::IComboItem**)&ppIComboItem));
    return ppIComboItem;
  }

  long __fastcall get_SelLength(void)
  {
    long plSelLength;
    OLECHECK(this->get_SelLength((long*)&plSelLength));
    return plSelLength;
  }

  long __fastcall get_SelStart(void)
  {
    long plSelStart;
    OLECHECK(this->get_SelStart((long*)&plSelStart));
    return plSelStart;
  }

  BSTR __fastcall get_SelText(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_SelText((BSTR*)&pbstrText));
    return pbstrText;
  }

  Mscomctllib_xp::ImageComboStyleConstants __fastcall get_Style(void)
  {
    Mscomctllib_xp::ImageComboStyleConstants penumStyle;
    OLECHECK(this->get_Style((Mscomctllib_xp::ImageComboStyleConstants*)&penumStyle));
    return penumStyle;
  }

  VARIANT_BOOL __fastcall get_UsePathSep(void)
  {
    VARIANT_BOOL pbUsePathSep;
    OLECHECK(this->get_UsePathSep((VARIANT_BOOL*)&pbUsePathSep));
    return pbUsePathSep;
  }

  Mscomctllib_xp::IComboItem* __fastcall GetFirstVisible(void)
  {
    Mscomctllib_xp::IComboItem* ppIComboItem;
    OLECHECK(this->GetFirstVisible((Mscomctllib_xp::IComboItem**)&ppIComboItem));
    return ppIComboItem;
  }


  __property   BSTR            Text = {read = get_Text};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   short           Indentation = {read = get_Indentation, write = set_Indentation};
  __property   Mscomctllib_xp::IComboItems* ComboItems = {read = get_ComboItems, write = _set_ComboItems};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Mscomctllib_xp::OLEDragConstants OLEDragMode = {read = get_OLEDragMode, write = set_OLEDragMode};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::IComboItem* SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   BSTR            SelText = {read = get_SelText};
  __property   Mscomctllib_xp::ImageComboStyleConstants Style = {read = get_Style, write = set_Style};
  __property   VARIANT_BOOL    UsePathSep = {read = get_UsePathSep, write = set_UsePathSep};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DImageComboEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {DD9DA665-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
interface DImageComboEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Change()
  {
    _TDispID _dispid(/* Change */ DISPID(1));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Dropdown()
  {
    _TDispID _dispid(/* Dropdown */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyDown(short KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyUp(short KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall KeyPress(short* KeyAscii)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = KeyAscii /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = AllowedEffects /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
    TAutoArgs<2> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/)
  {
    _TDispID _dispid(/* OLESetData */ DISPID(1552));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = DataFormat /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/)
  {
    _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
    TAutoArgs<1> _args;
    _args[1] = Effect /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
    TAutoArgs<7> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    _args[7] = State /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/)
  {
    _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
    TAutoArgs<6> _args;
    _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
    _args[2] = Effect /*[VT_I4:1]*/;
    _args[3] = Button /*[VT_I2:1]*/;
    _args[4] = Shift /*[VT_I2:1]*/;
    _args[5] = x /*[VT_R4:1]*/;
    _args[6] = y /*[VT_R4:1]*/;
    OleProcedure(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIVBDataObject
// Interface: IVBDataObject
// *********************************************************************//
template <class T /* IVBDataObject */ >
class TCOMIVBDataObjectT : public TComInterface<IVBDataObject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIVBDataObjectT() {}
  TCOMIVBDataObjectT(IVBDataObject *intf, bool addRef = false) : TComInterface<IVBDataObject>(intf, addRef) {}
  TCOMIVBDataObjectT(const TCOMIVBDataObjectT& src) : TComInterface<IVBDataObject>(src) {}
  TCOMIVBDataObjectT& operator=(const TCOMIVBDataObjectT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall GetData(short sFormat/*[in]*/, VARIANT* pvData/*[out,retval]*/);
  VARIANT         __fastcall GetData(short sFormat/*[in]*/);
  HRESULT         __fastcall GetFormat(short sFormat/*[in]*/, 
                                       VARIANT_BOOL* pbFormatSupported/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetFormat(short sFormat/*[in]*/);
  HRESULT         __fastcall SetData(VARIANT vValue/*[in,opt]*/= TNoParam(), 
                                     VARIANT vFormat/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Files(Mscomctllib_xp::IVBDataObjectFiles** pFiles/*[out,retval]*/);
  HRESULT         __fastcall get_Files(Mscomctllib_xp::IVBDataObjectFilesPtr* pFiles/*[out,retval]*/);
  Mscomctllib_xp::IVBDataObjectFilesPtr __fastcall get_Files(void);

  __property   Mscomctllib_xp::IVBDataObjectFilesPtr Files = {read = get_Files};
};
typedef TCOMIVBDataObjectT<IVBDataObject> TCOMIVBDataObject;

// *********************************************************************//
// DispIntf:  IVBDataObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2334D2B1-713E-11CF-8AE5-00AA00C00905}
// *********************************************************************//
template<class T>
class IVBDataObjectDispT : public TAutoDriver<IVBDataObject>
{
public:
  IVBDataObjectDispT(){}

  IVBDataObjectDispT(IVBDataObject *pintf)
  {
    TAutoDriver<IVBDataObject>::Bind(pintf, false);
  }

  IVBDataObjectDispT(IVBDataObjectPtr pintf)
  {
    TAutoDriver<IVBDataObject>::Bind(pintf, true);
  }

  IVBDataObjectDispT& operator=(IVBDataObject *pintf)
  {
    TAutoDriver<IVBDataObject>::Bind(pintf, false);
    return *this;
  }

  IVBDataObjectDispT& operator=(IVBDataObjectPtr pintf)
  {
    TAutoDriver<IVBDataObject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DataObject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DataObject);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetData(short sFormat/*[in]*/, 
                                                VARIANT* pvData/*[out,retval]*/);
  VARIANT         __fastcall GetData(short sFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetFormat(short sFormat/*[in]*/, 
                                                  VARIANT_BOOL* pbFormatSupported/*[out,retval]*/);
  VARIANT_BOOL    __fastcall GetFormat(short sFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetData(VARIANT vValue/*[in,opt]*/= TNoParam(), 
                                                VARIANT vFormat/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Files(Mscomctllib_xp::IVBDataObjectFiles** pFiles/*[out,retval]*/);
  Mscomctllib_xp::IVBDataObjectFiles* __fastcall get_Files(void);

  __property   Mscomctllib_xp::IVBDataObjectFiles* Files = {read = get_Files};
};
typedef IVBDataObjectDispT<IVBDataObject> IVBDataObjectDisp;

// *********************************************************************//
// SmartIntf: TCOMIVBDataObjectFiles
// Interface: IVBDataObjectFiles
// *********************************************************************//
template <class T /* IVBDataObjectFiles */ >
class TCOMIVBDataObjectFilesT : public TComInterface<IVBDataObjectFiles>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIVBDataObjectFilesT() {}
  TCOMIVBDataObjectFilesT(IVBDataObjectFiles *intf, bool addRef = false) : TComInterface<IVBDataObjectFiles>(intf, addRef) {}
  TCOMIVBDataObjectFilesT(const TCOMIVBDataObjectFilesT& src) : TComInterface<IVBDataObjectFiles>(src) {}
  TCOMIVBDataObjectFilesT& operator=(const TCOMIVBDataObjectFilesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Item(long lIndex/*[in]*/, BSTR* bstrItem/*[out,retval]*/);
  BSTR            __fastcall get_Item(long lIndex/*[in]*/);
  HRESULT         __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall Add(BSTR bstrFilename/*[in]*/, VARIANT vIndex/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall Remove(VARIANT vIndex/*[in]*/);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count};
};
typedef TCOMIVBDataObjectFilesT<IVBDataObjectFiles> TCOMIVBDataObjectFiles;

// *********************************************************************//
// DispIntf:  IVBDataObjectFiles
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2334D2B3-713E-11CF-8AE5-00AA00C00905}
// *********************************************************************//
template<class T>
class IVBDataObjectFilesDispT : public TAutoDriver<IVBDataObjectFiles>
{
public:
  IVBDataObjectFilesDispT(){}

  IVBDataObjectFilesDispT(IVBDataObjectFiles *pintf)
  {
    TAutoDriver<IVBDataObjectFiles>::Bind(pintf, false);
  }

  IVBDataObjectFilesDispT(IVBDataObjectFilesPtr pintf)
  {
    TAutoDriver<IVBDataObjectFiles>::Bind(pintf, true);
  }

  IVBDataObjectFilesDispT& operator=(IVBDataObjectFiles *pintf)
  {
    TAutoDriver<IVBDataObjectFiles>::Bind(pintf, false);
    return *this;
  }

  IVBDataObjectFilesDispT& operator=(IVBDataObjectFilesPtr pintf)
  {
    TAutoDriver<IVBDataObjectFiles>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DataObjectFiles));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DataObjectFiles);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long lIndex/*[in]*/, BSTR* bstrItem/*[out,retval]*/);
  BSTR            __fastcall get_Item(long lIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR bstrFilename/*[in]*/, 
                                            VARIANT vIndex/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT vIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count};
};
typedef IVBDataObjectFilesDispT<IVBDataObjectFiles> IVBDataObjectFilesDisp;

// *********************************************************************//
// SmartIntf: TCOMITabStrip
// Interface: ITabStrip
// *********************************************************************//
template <class T /* ITabStrip */ >
class TCOMITabStripT : public TComInterface<ITabStrip>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITabStripT() {}
  TCOMITabStripT(ITabStrip *intf, bool addRef = false) : TComInterface<ITabStrip>(intf, addRef) {}
  TCOMITabStripT(const TCOMITabStripT& src) : TComInterface<ITabStrip>(src) {}
  TCOMITabStripT& operator=(const TCOMITabStripT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Tabs(Mscomctllib_xp::ITabs** ppTabs/*[out,retval]*/);
  HRESULT         __fastcall get_Tabs(Mscomctllib_xp::ITabsPtr* ppTabs/*[out,retval]*/);
  Mscomctllib_xp::ITabsPtr __fastcall get_Tabs(void);
  HRESULT         __fastcall _set_Tabs(Mscomctllib_xp::ITabs* ppTabs/*[in]*/);
  HRESULT         __fastcall _set_Tabs(Mscomctllib_xp::ITabsPtr ppTabs/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** ppFontDisp/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall _set_Font(IFontDisp* ppFontDisp/*[in]*/);
  HRESULT         __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT         __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall get_MultiRow(VARIANT_BOOL* pbMultiRow/*[out,retval]*/);
  HRESULT         __fastcall get_MultiRow(TOLEBOOL* pbMultiRow/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MultiRow(void);
  HRESULT         __fastcall set_MultiRow(VARIANT_BOOL pbMultiRow/*[in]*/);
  HRESULT         __fastcall set_MultiRow(TOLEBOOL pbMultiRow/*[in]*/);
  HRESULT         __fastcall get_Style(Mscomctllib_xp::TabStyleConstants* psStyle/*[out,retval]*/);
  Mscomctllib_xp::TabStyleConstants __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(Mscomctllib_xp::TabStyleConstants psStyle/*[in]*/);
  HRESULT         __fastcall get_TabFixedWidth(short* psTabFixedWidth/*[out,retval]*/);
  short           __fastcall get_TabFixedWidth(void);
  HRESULT         __fastcall set_TabFixedWidth(short psTabFixedWidth/*[in]*/);
  HRESULT         __fastcall get_TabWidthStyle(Mscomctllib_xp::TabWidthStyleConstants* psTabWidthStyle/*[out,retval]*/);
  Mscomctllib_xp::TabWidthStyleConstants __fastcall get_TabWidthStyle(void);
  HRESULT         __fastcall set_TabWidthStyle(Mscomctllib_xp::TabWidthStyleConstants psTabWidthStyle/*[in]*/);
  HRESULT         __fastcall get_ClientTop(float* pfClientTop/*[out,retval]*/);
  float           __fastcall get_ClientTop(void);
  HRESULT         __fastcall set_ClientTop(float pfClientTop/*[in]*/);
  HRESULT         __fastcall get_ClientLeft(float* pfClientLeft/*[out,retval]*/);
  float           __fastcall get_ClientLeft(void);
  HRESULT         __fastcall set_ClientLeft(float pfClientLeft/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(float* pfClientHeight/*[out,retval]*/);
  float           __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(float pfClientHeight/*[in]*/);
  HRESULT         __fastcall get_ClientWidth(float* pfClientWidth/*[out,retval]*/);
  float           __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(float pfClientWidth/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/);
  HRESULT         __fastcall get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ImageList(void);
  HRESULT         __fastcall set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall _set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall get_TabFixedHeight(short* psTabFixedHeight/*[out,retval]*/);
  short           __fastcall get_TabFixedHeight(void);
  HRESULT         __fastcall set_TabFixedHeight(short psTabFixedHeight/*[in]*/);
  HRESULT         __fastcall get_ShowTips(VARIANT_BOOL* pbShowTips/*[out,retval]*/);
  HRESULT         __fastcall get_ShowTips(TOLEBOOL* pbShowTips/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowTips(void);
  HRESULT         __fastcall set_ShowTips(VARIANT_BOOL pbShowTips/*[in]*/);
  HRESULT         __fastcall set_ShowTips(TOLEBOOL pbShowTips/*[in]*/);
  HRESULT         __fastcall get_SelectedItem(Mscomctllib_xp::ITab** ppSelectedItem/*[out,retval]*/);
  HRESULT         __fastcall get_SelectedItem(Mscomctllib_xp::ITabPtr* ppSelectedItem/*[out,retval]*/);
  Mscomctllib_xp::ITabPtr __fastcall get_SelectedItem(void);
  HRESULT         __fastcall _set_SelectedItem(Mscomctllib_xp::ITab* ppSelectedItem/*[in]*/);
  HRESULT         __fastcall _set_SelectedItem(Mscomctllib_xp::ITabPtr ppSelectedItem/*[in]*/);
  HRESULT         __fastcall set_SelectedItem(VARIANT* ppSelectedItem/*[in]*/);
  HRESULT         __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT         __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT         __fastcall Refresh(void);
  HRESULT         __fastcall OLEDrag(void);
  HRESULT         __fastcall AboutBox(void);
  HRESULT         __fastcall get_HotTracking(VARIANT_BOOL* pbHotTracking/*[out,retval]*/);
  HRESULT         __fastcall get_HotTracking(TOLEBOOL* pbHotTracking/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HotTracking(void);
  HRESULT         __fastcall set_HotTracking(VARIANT_BOOL pbHotTracking/*[in]*/);
  HRESULT         __fastcall set_HotTracking(TOLEBOOL pbHotTracking/*[in]*/);
  HRESULT         __fastcall get_MultiSelect(VARIANT_BOOL* pbMultiSelect/*[out,retval]*/);
  HRESULT         __fastcall get_MultiSelect(TOLEBOOL* pbMultiSelect/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MultiSelect(void);
  HRESULT         __fastcall set_MultiSelect(VARIANT_BOOL pbMultiSelect/*[in]*/);
  HRESULT         __fastcall set_MultiSelect(TOLEBOOL pbMultiSelect/*[in]*/);
  HRESULT         __fastcall get_Placement(Mscomctllib_xp::PlacementConstants* penumPlacement/*[out,retval]*/);
  Mscomctllib_xp::PlacementConstants __fastcall get_Placement(void);
  HRESULT         __fastcall set_Placement(Mscomctllib_xp::PlacementConstants penumPlacement/*[in]*/);
  HRESULT         __fastcall get_Separators(VARIANT_BOOL* pbSeparators/*[out,retval]*/);
  HRESULT         __fastcall get_Separators(TOLEBOOL* pbSeparators/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Separators(void);
  HRESULT         __fastcall set_Separators(VARIANT_BOOL pbSeparators/*[in]*/);
  HRESULT         __fastcall set_Separators(TOLEBOOL pbSeparators/*[in]*/);
  HRESULT         __fastcall get_TabMinWidth(float* pflTabMinWidth/*[out,retval]*/);
  float           __fastcall get_TabMinWidth(void);
  HRESULT         __fastcall set_TabMinWidth(float pflTabMinWidth/*[in]*/);
  HRESULT         __fastcall get_TabStyle(Mscomctllib_xp::TabSelStyleConstants* penumTabStyle/*[out,retval]*/);
  Mscomctllib_xp::TabSelStyleConstants __fastcall get_TabStyle(void);
  HRESULT         __fastcall set_TabStyle(Mscomctllib_xp::TabSelStyleConstants penumTabStyle/*[in]*/);
  HRESULT         __fastcall DeselectAll(void);

  __property   Mscomctllib_xp::ITabsPtr Tabs = {read = get_Tabs, write = _set_Tabs};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon};
  __property   TOLEBOOL        MultiRow = {read = get_MultiRow, write = set_MultiRow};
  __property   Mscomctllib_xp::TabStyleConstants Style = {read = get_Style, write = set_Style};
  __property   short           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   Mscomctllib_xp::TabWidthStyleConstants TabWidthStyle = {read = get_TabWidthStyle, write = set_TabWidthStyle};
  __property   float           ClientTop = {read = get_ClientTop, write = set_ClientTop};
  __property   float           ClientLeft = {read = get_ClientLeft, write = set_ClientLeft};
  __property   float           ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   float           ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   short           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   TOLEBOOL        ShowTips = {read = get_ShowTips, write = set_ShowTips};
  __property   Mscomctllib_xp::ITabPtr SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   TOLEBOOL        HotTracking = {read = get_HotTracking, write = set_HotTracking};
  __property   TOLEBOOL        MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Mscomctllib_xp::PlacementConstants Placement = {read = get_Placement, write = set_Placement};
  __property   TOLEBOOL        Separators = {read = get_Separators, write = set_Separators};
  __property   float           TabMinWidth = {read = get_TabMinWidth, write = set_TabMinWidth};
  __property   Mscomctllib_xp::TabSelStyleConstants TabStyle = {read = get_TabStyle, write = set_TabStyle};
};
typedef TCOMITabStripT<ITabStrip> TCOMITabStrip;

// *********************************************************************//
// DispIntf:  ITabStrip
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1EFB6594-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class ITabStripDispT : public TAutoDriver<ITabStrip>
{
public:
  ITabStripDispT(){}

  ITabStripDispT(ITabStrip *pintf)
  {
    TAutoDriver<ITabStrip>::Bind(pintf, false);
  }

  ITabStripDispT(ITabStripPtr pintf)
  {
    TAutoDriver<ITabStrip>::Bind(pintf, true);
  }

  ITabStripDispT& operator=(ITabStrip *pintf)
  {
    TAutoDriver<ITabStrip>::Bind(pintf, false);
    return *this;
  }

  ITabStripDispT& operator=(ITabStripPtr pintf)
  {
    TAutoDriver<ITabStrip>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TabStrip));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TabStrip);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tabs(Mscomctllib_xp::ITabs** ppTabs/*[out,retval]*/);
  Mscomctllib_xp::ITabs* __fastcall get_Tabs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Tabs(Mscomctllib_xp::ITabs* ppTabs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp** ppFontDisp/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp* ppFontDisp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiRow(VARIANT_BOOL* pbMultiRow/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiRow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiRow(VARIANT_BOOL pbMultiRow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Mscomctllib_xp::TabStyleConstants* psStyle/*[out,retval]*/);
  Mscomctllib_xp::TabStyleConstants __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Mscomctllib_xp::TabStyleConstants psStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabFixedWidth(short* psTabFixedWidth/*[out,retval]*/);
  short           __fastcall get_TabFixedWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabFixedWidth(short psTabFixedWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabWidthStyle(Mscomctllib_xp::TabWidthStyleConstants* psTabWidthStyle/*[out,retval]*/);
  Mscomctllib_xp::TabWidthStyleConstants __fastcall get_TabWidthStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabWidthStyle(Mscomctllib_xp::TabWidthStyleConstants psTabWidthStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientTop(float* pfClientTop/*[out,retval]*/);
  float           __fastcall get_ClientTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ClientTop(float pfClientTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientLeft(float* pfClientLeft/*[out,retval]*/);
  float           __fastcall get_ClientLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ClientLeft(float pfClientLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientHeight(float* pfClientHeight/*[out,retval]*/);
  float           __fastcall get_ClientHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ClientHeight(float pfClientHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ClientWidth(float* pfClientWidth/*[out,retval]*/);
  float           __fastcall get_ClientWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ClientWidth(float pfClientWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ImageList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabFixedHeight(short* psTabFixedHeight/*[out,retval]*/);
  short           __fastcall get_TabFixedHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabFixedHeight(short psTabFixedHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowTips(VARIANT_BOOL* pbShowTips/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowTips(VARIANT_BOOL pbShowTips/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedItem(Mscomctllib_xp::ITab** ppSelectedItem/*[out,retval]*/);
  Mscomctllib_xp::ITab* __fastcall get_SelectedItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_SelectedItem(Mscomctllib_xp::ITab* ppSelectedItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectedItem(VARIANT* ppSelectedItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OLEDrag();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AboutBox();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HotTracking(VARIANT_BOOL* pbHotTracking/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HotTracking(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HotTracking(VARIANT_BOOL pbHotTracking/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiSelect(VARIANT_BOOL* pbMultiSelect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiSelect(VARIANT_BOOL pbMultiSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Placement(Mscomctllib_xp::PlacementConstants* penumPlacement/*[out,retval]*/);
  Mscomctllib_xp::PlacementConstants __fastcall get_Placement(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Placement(Mscomctllib_xp::PlacementConstants penumPlacement/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Separators(VARIANT_BOOL* pbSeparators/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Separators(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Separators(VARIANT_BOOL pbSeparators/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabMinWidth(float* pflTabMinWidth/*[out,retval]*/);
  float           __fastcall get_TabMinWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabMinWidth(float pflTabMinWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStyle(Mscomctllib_xp::TabSelStyleConstants* penumTabStyle/*[out,retval]*/);
  Mscomctllib_xp::TabSelStyleConstants __fastcall get_TabStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStyle(Mscomctllib_xp::TabSelStyleConstants penumTabStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeselectAll();

  __property   Mscomctllib_xp::ITabs* Tabs = {read = get_Tabs, write = _set_Tabs};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = _set_Font};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   VARIANT_BOOL    MultiRow = {read = get_MultiRow, write = set_MultiRow};
  __property   Mscomctllib_xp::TabStyleConstants Style = {read = get_Style, write = set_Style};
  __property   short           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   Mscomctllib_xp::TabWidthStyleConstants TabWidthStyle = {read = get_TabWidthStyle, write = set_TabWidthStyle};
  __property   float           ClientTop = {read = get_ClientTop, write = set_ClientTop};
  __property   float           ClientLeft = {read = get_ClientLeft, write = set_ClientLeft};
  __property   float           ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   float           ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   short           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   VARIANT_BOOL    ShowTips = {read = get_ShowTips, write = set_ShowTips};
  __property   Mscomctllib_xp::ITab* SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   VARIANT_BOOL    HotTracking = {read = get_HotTracking, write = set_HotTracking};
  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Mscomctllib_xp::PlacementConstants Placement = {read = get_Placement, write = set_Placement};
  __property   VARIANT_BOOL    Separators = {read = get_Separators, write = set_Separators};
  __property   float           TabMinWidth = {read = get_TabMinWidth, write = set_TabMinWidth};
  __property   Mscomctllib_xp::TabSelStyleConstants TabStyle = {read = get_TabStyle, write = set_TabStyle};
};
typedef ITabStripDispT<ITabStrip> ITabStripDisp;

// *********************************************************************//
// DispIntf:  ITabStripEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {1EFB6595-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T>
class ITabStripEventsDispT : public TAutoDriver<ITabStripEvents>
{
public:
  ITabStripEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall KeyDown(short* KeyCode, short Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(short* KeyAscii);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(short* KeyCode, short Shift);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall BeforeClick(short* Cancel);
  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/);

};
typedef ITabStripEventsDispT<ITabStripEvents> ITabStripEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMITabs
// Interface: ITabs
// *********************************************************************//
template <class T /* ITabs */ >
class TCOMITabsT : public TComInterface<ITabs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITabsT() {}
  TCOMITabsT(ITabs *intf, bool addRef = false) : TComInterface<ITabs>(intf, addRef) {}
  TCOMITabsT(const TCOMITabsT& src) : TComInterface<ITabs>(src) {}
  TCOMITabsT& operator=(const TCOMITabsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(short* psCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(short psCount/*[in]*/);
  HRESULT         __fastcall get_ControlDefault(VARIANT* pvIndex/*[in]*/, 
                                                Mscomctllib_xp::ITab** ppTab/*[out,retval]*/);
  Mscomctllib_xp::ITab* __fastcall get_ControlDefault(VARIANT* pvIndex/*[in]*/);
  HRESULT         __fastcall _set_ControlDefault(VARIANT* pvIndex/*[in]*/, 
                                                 Mscomctllib_xp::ITab* ppTab/*[in]*/);
  HRESULT         __fastcall get_Item(VARIANT* pvIndex/*[in]*/, 
                                      Mscomctllib_xp::ITab** ppTab/*[out,retval]*/);
  Mscomctllib_xp::ITab* __fastcall get_Item(VARIANT* pvIndex/*[in]*/);
  HRESULT         __fastcall _set_Item(VARIANT* pvIndex/*[in]*/, Mscomctllib_xp::ITab* ppTab/*[in]*/);
  HRESULT         __fastcall Remove(VARIANT* pvIndex/*[in]*/);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall Add(VARIANT* pvIndex/*[in,opt]*/, VARIANT* pvKey/*[in,opt]*/, 
                                 VARIANT* pvCaption/*[in,opt]*/, VARIANT* pvImage/*[in,opt]*/, 
                                 Mscomctllib_xp::ITab** ppTab/*[out,retval]*/);
  Mscomctllib_xp::ITab* __fastcall Add(VARIANT* pvIndex/*[in,opt]*/= TNoParam(), 
                                       VARIANT* pvKey/*[in,opt]*/= TNoParam(), 
                                       VARIANT* pvCaption/*[in,opt]*/= TNoParam(), 
                                       VARIANT* pvImage/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef TCOMITabsT<ITabs> TCOMITabs;

// *********************************************************************//
// DispIntf:  ITabs
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1EFB6597-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class ITabsDispT : public TAutoDriver<ITabs>
{
public:
  ITabsDispT(){}

  ITabsDispT(ITabs *pintf)
  {
    TAutoDriver<ITabs>::Bind(pintf, false);
  }

  ITabsDispT(ITabsPtr pintf)
  {
    TAutoDriver<ITabs>::Bind(pintf, true);
  }

  ITabsDispT& operator=(ITabs *pintf)
  {
    TAutoDriver<ITabs>::Bind(pintf, false);
    return *this;
  }

  ITabsDispT& operator=(ITabsPtr pintf)
  {
    TAutoDriver<ITabs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Tabs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Tabs);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(short* psCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(short psCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlDefault(VARIANT* pvIndex/*[in]*/, 
                                                           Mscomctllib_xp::ITab** ppTab/*[out,retval]*/);
  Mscomctllib_xp::ITab* __fastcall get_ControlDefault(VARIANT* pvIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ControlDefault(VARIANT* pvIndex/*[in]*/, 
                                                            Mscomctllib_xp::ITab* ppTab/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* pvIndex/*[in]*/, 
                                                 Mscomctllib_xp::ITab** ppTab/*[out,retval]*/);
  Mscomctllib_xp::ITab* __fastcall get_Item(VARIANT* pvIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Item(VARIANT* pvIndex/*[in]*/, 
                                                  Mscomctllib_xp::ITab* ppTab/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* pvIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT* pvIndex/*[in,opt]*/, VARIANT* pvKey/*[in,opt]*/
                                            , VARIANT* pvCaption/*[in,opt]*/, 
                                            VARIANT* pvImage/*[in,opt]*/, 
                                            Mscomctllib_xp::ITab** ppTab/*[out,retval]*/);
  Mscomctllib_xp::ITab* __fastcall Add(VARIANT* pvIndex/*[in,opt]*/= TNoParam(), 
                                       VARIANT* pvKey/*[in,opt]*/= TNoParam(), 
                                       VARIANT* pvCaption/*[in,opt]*/= TNoParam(), 
                                       VARIANT* pvImage/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef ITabsDispT<ITabs> ITabsDisp;

// *********************************************************************//
// SmartIntf: TCOMITab
// Interface: ITab
// *********************************************************************//
template <class T /* ITab */ >
class TCOMITabT : public TComInterface<ITab>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITabT() {}
  TCOMITabT(ITab *intf, bool addRef = false) : TComInterface<ITab>(intf, addRef) {}
  TCOMITabT(const TCOMITabT& src) : TComInterface<ITab>(src) {}
  TCOMITabT& operator=(const TCOMITabT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__ObjectDefault(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT         __fastcall set__ObjectDefault(BSTR pbstrCaption/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT         __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_Index(short* psIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT         __fastcall set_Index(short psIndex/*[in]*/);
  HRESULT         __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT         __fastcall get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/);
  BSTR            __fastcall get_ToolTipText(void);
  HRESULT         __fastcall set_ToolTipText(BSTR pbstrToolTipText/*[in]*/);
  HRESULT         __fastcall get_Width(float* pfWidth/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(float pfWidth/*[in]*/);
  HRESULT         __fastcall get_Height(float* pfHeight/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(float pfHeight/*[in]*/);
  HRESULT         __fastcall get_Top(float* pfTop/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(float pfTop/*[in]*/);
  HRESULT         __fastcall get_Left(float* pfLeft/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(float pfLeft/*[in]*/);
  HRESULT         __fastcall get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/);
  HRESULT         __fastcall get_Selected(TOLEBOOL* pbSelected/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Selected(void);
  HRESULT         __fastcall set_Selected(VARIANT_BOOL pbSelected/*[in]*/);
  HRESULT         __fastcall set_Selected(TOLEBOOL pbSelected/*[in]*/);
  HRESULT         __fastcall get_Image(VARIANT* pvImage/*[out,retval]*/);
  VARIANT         __fastcall get_Image(void);
  HRESULT         __fastcall set_Image(VARIANT pvImage/*[in]*/);
  HRESULT         __fastcall get_HighLighted(VARIANT_BOOL* pbHighLighted/*[out,retval]*/);
  HRESULT         __fastcall get_HighLighted(TOLEBOOL* pbHighLighted/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HighLighted(void);
  HRESULT         __fastcall set_HighLighted(VARIANT_BOOL pbHighLighted/*[in]*/);
  HRESULT         __fastcall set_HighLighted(TOLEBOOL pbHighLighted/*[in]*/);
  HRESULT         __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   BSTR            Caption = {read = get_Caption};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Selected = {read = get_Selected, write = set_Selected};
  __property   TOLEBOOL        HighLighted = {read = get_HighLighted, write = set_HighLighted};
};
typedef TCOMITabT<ITab> TCOMITab;

// *********************************************************************//
// DispIntf:  ITab
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1EFB6599-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class ITabDispT : public TAutoDriver<ITab>
{
public:
  ITabDispT(){}

  ITabDispT(ITab *pintf)
  {
    TAutoDriver<ITab>::Bind(pintf, false);
  }

  ITabDispT(ITabPtr pintf)
  {
    TAutoDriver<ITab>::Bind(pintf, true);
  }

  ITabDispT& operator=(ITab *pintf)
  {
    TAutoDriver<ITab>::Bind(pintf, false);
    return *this;
  }

  ITabDispT& operator=(ITabPtr pintf)
  {
    TAutoDriver<ITab>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Tab));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Tab);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__ObjectDefault(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__ObjectDefault(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(short* psIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(short psIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/);
  BSTR            __fastcall get_ToolTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToolTipText(BSTR pbstrToolTipText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* pfWidth/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float pfWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* pfHeight/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float pfHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* pfTop/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float pfTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* pfLeft/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float pfLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Selected(VARIANT_BOOL pbSelected/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Image(VARIANT* pvImage/*[out,retval]*/);
  VARIANT         __fastcall get_Image(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Image(VARIANT pvImage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HighLighted(VARIANT_BOOL* pbHighLighted/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HighLighted(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HighLighted(VARIANT_BOOL pbHighLighted/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   BSTR            Caption = {read = get_Caption};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   VARIANT_BOOL    HighLighted = {read = get_HighLighted, write = set_HighLighted};
};
typedef ITabDispT<ITab> ITabDisp;

// *********************************************************************//
// SmartIntf: TCOMIToolbar
// Interface: IToolbar
// *********************************************************************//
template <class T /* IToolbar */ >
class TCOMIToolbarT : public TComInterface<IToolbar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIToolbarT() {}
  TCOMIToolbarT(IToolbar *intf, bool addRef = false) : TComInterface<IToolbar>(intf, addRef) {}
  TCOMIToolbarT(const TCOMIToolbarT& src) : TComInterface<IToolbar>(src) {}
  TCOMIToolbarT& operator=(const TCOMIToolbarT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Appearance(Mscomctllib_xp::AppearanceConstants* pnAppearance/*[out,retval]*/);
  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void);
  HRESULT         __fastcall set_Appearance(Mscomctllib_xp::AppearanceConstants pnAppearance/*[in]*/);
  HRESULT         __fastcall get_AllowCustomize(VARIANT_BOOL* pbAllowCustomize/*[out,retval]*/);
  HRESULT         __fastcall get_AllowCustomize(TOLEBOOL* pbAllowCustomize/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowCustomize(void);
  HRESULT         __fastcall set_AllowCustomize(VARIANT_BOOL pbAllowCustomize/*[in]*/);
  HRESULT         __fastcall set_AllowCustomize(TOLEBOOL pbAllowCustomize/*[in]*/);
  HRESULT         __fastcall get_Buttons(Mscomctllib_xp::IButtons** ppButtons/*[out,retval]*/);
  HRESULT         __fastcall get_Buttons(Mscomctllib_xp::IButtonsPtr* ppButtons/*[out,retval]*/);
  Mscomctllib_xp::IButtonsPtr __fastcall get_Buttons(void);
  HRESULT         __fastcall _set_Buttons(Mscomctllib_xp::IButtons* ppButtons/*[in]*/);
  HRESULT         __fastcall _set_Buttons(Mscomctllib_xp::IButtonsPtr ppButtons/*[in]*/);
  HRESULT         __fastcall get_Controls(Mscomctllib_xp::IControls** ppControls/*[out,retval]*/);
  HRESULT         __fastcall get_Controls(Mscomctllib_xp::IControlsPtr* ppControls/*[out,retval]*/);
  Mscomctllib_xp::IControlsPtr __fastcall get_Controls(void);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT         __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/);
  HRESULT         __fastcall get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ImageList(void);
  HRESULT         __fastcall set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall _set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall get_ShowTips(VARIANT_BOOL* bShowTips/*[out,retval]*/);
  HRESULT         __fastcall get_ShowTips(TOLEBOOL* bShowTips/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowTips(void);
  HRESULT         __fastcall set_ShowTips(VARIANT_BOOL bShowTips/*[in]*/);
  HRESULT         __fastcall set_ShowTips(TOLEBOOL bShowTips/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/);
  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/);
  HRESULT         __fastcall get_Wrappable(VARIANT_BOOL* pbWrappable/*[out,retval]*/);
  HRESULT         __fastcall get_Wrappable(TOLEBOOL* pbWrappable/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Wrappable(void);
  HRESULT         __fastcall set_Wrappable(VARIANT_BOOL pbWrappable/*[in]*/);
  HRESULT         __fastcall set_Wrappable(TOLEBOOL pbWrappable/*[in]*/);
  HRESULT         __fastcall get_ButtonHeight(float* pfButtonHeight/*[out,retval]*/);
  float           __fastcall get_ButtonHeight(void);
  HRESULT         __fastcall set_ButtonHeight(float pfButtonHeight/*[in]*/);
  HRESULT         __fastcall get_ButtonWidth(float* pfButtonWidth/*[out,retval]*/);
  float           __fastcall get_ButtonWidth(void);
  HRESULT         __fastcall set_ButtonWidth(float pfButtonWidth/*[in]*/);
  HRESULT         __fastcall get_HelpContextID(long* plHelpContextID/*[out,retval]*/);
  long            __fastcall get_HelpContextID(void);
  HRESULT         __fastcall set_HelpContextID(long plHelpContextID/*[in]*/);
  HRESULT         __fastcall get_HelpFile(BSTR* pbstrHelpFile/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR pbstrHelpFile/*[in]*/);
  HRESULT         __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT         __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT         __fastcall Refresh(void);
  HRESULT         __fastcall Customize(void);
  HRESULT         __fastcall SaveToolbar(BSTR Key/*[in]*/, BSTR Subkey/*[in]*/, BSTR Value/*[in]*/);
  HRESULT         __fastcall RestoreToolbar(BSTR Key/*[in]*/, BSTR Subkey/*[in]*/, 
                                            BSTR Value/*[in]*/);
  HRESULT         __fastcall OLEDrag(void);
  HRESULT         __fastcall AboutBox(void);
  HRESULT         __fastcall get_DisabledImageList(LPDISPATCH* ppDisabledImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_DisabledImageList(void);
  HRESULT         __fastcall set_DisabledImageList(LPDISPATCH ppDisabledImageList/*[in]*/);
  HRESULT         __fastcall _set_DisabledImageList(LPDISPATCH ppDisabledImageList/*[in]*/);
  HRESULT         __fastcall get_HotImageList(LPDISPATCH* ppHotImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_HotImageList(void);
  HRESULT         __fastcall set_HotImageList(LPDISPATCH ppHotImageList/*[in]*/);
  HRESULT         __fastcall _set_HotImageList(LPDISPATCH ppHotImageList/*[in]*/);
  HRESULT         __fastcall get_Style(Mscomctllib_xp::ToolbarStyleConstants* penumStyle/*[out,retval]*/);
  Mscomctllib_xp::ToolbarStyleConstants __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(Mscomctllib_xp::ToolbarStyleConstants penumStyle/*[in]*/);
  HRESULT         __fastcall get_TextAlignment(Mscomctllib_xp::ToolbarTextAlignConstants* penumTextAlignment/*[out,retval]*/);
  Mscomctllib_xp::ToolbarTextAlignConstants __fastcall get_TextAlignment(void);
  HRESULT         __fastcall set_TextAlignment(Mscomctllib_xp::ToolbarTextAlignConstants penumTextAlignment/*[in]*/);

  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   TOLEBOOL        AllowCustomize = {read = get_AllowCustomize, write = set_AllowCustomize};
  __property   Mscomctllib_xp::IButtonsPtr Buttons = {read = get_Buttons, write = _set_Buttons};
  __property   Mscomctllib_xp::IControlsPtr Controls = {read = get_Controls};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   TOLEBOOL        ShowTips = {read = get_ShowTips, write = set_ShowTips};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        Wrappable = {read = get_Wrappable, write = set_Wrappable};
  __property   float           ButtonHeight = {read = get_ButtonHeight, write = set_ButtonHeight};
  __property   float           ButtonWidth = {read = get_ButtonWidth, write = set_ButtonWidth};
  __property   long            HelpContextID = {read = get_HelpContextID, write = set_HelpContextID};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   LPDISPATCH      DisabledImageList = {read = get_DisabledImageList, write = set_DisabledImageList};
  __property   LPDISPATCH      HotImageList = {read = get_HotImageList, write = set_HotImageList};
  __property   Mscomctllib_xp::ToolbarStyleConstants Style = {read = get_Style, write = set_Style};
  __property   Mscomctllib_xp::ToolbarTextAlignConstants TextAlignment = {read = get_TextAlignment, write = set_TextAlignment};
};
typedef TCOMIToolbarT<IToolbar> TCOMIToolbar;

// *********************************************************************//
// DispIntf:  IToolbar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FE4-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IToolbarDispT : public TAutoDriver<IToolbar>
{
public:
  IToolbarDispT(){}

  IToolbarDispT(IToolbar *pintf)
  {
    TAutoDriver<IToolbar>::Bind(pintf, false);
  }

  IToolbarDispT(IToolbarPtr pintf)
  {
    TAutoDriver<IToolbar>::Bind(pintf, true);
  }

  IToolbarDispT& operator=(IToolbar *pintf)
  {
    TAutoDriver<IToolbar>::Bind(pintf, false);
    return *this;
  }

  IToolbarDispT& operator=(IToolbarPtr pintf)
  {
    TAutoDriver<IToolbar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Toolbar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Toolbar);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Appearance(Mscomctllib_xp::AppearanceConstants* pnAppearance/*[out,retval]*/);
  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Appearance(Mscomctllib_xp::AppearanceConstants pnAppearance/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowCustomize(VARIANT_BOOL* pbAllowCustomize/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowCustomize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowCustomize(VARIANT_BOOL pbAllowCustomize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Buttons(Mscomctllib_xp::IButtons** ppButtons/*[out,retval]*/);
  Mscomctllib_xp::IButtons* __fastcall get_Buttons(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Buttons(Mscomctllib_xp::IButtons* ppButtons/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Mscomctllib_xp::IControls** ppControls/*[out,retval]*/);
  Mscomctllib_xp::IControls* __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ImageList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowTips(VARIANT_BOOL* bShowTips/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowTips(VARIANT_BOOL bShowTips/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/);
  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Wrappable(VARIANT_BOOL* pbWrappable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Wrappable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Wrappable(VARIANT_BOOL pbWrappable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ButtonHeight(float* pfButtonHeight/*[out,retval]*/);
  float           __fastcall get_ButtonHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ButtonHeight(float pfButtonHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ButtonWidth(float* pfButtonWidth/*[out,retval]*/);
  float           __fastcall get_ButtonWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ButtonWidth(float pfButtonWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextID(long* plHelpContextID/*[out,retval]*/);
  long            __fastcall get_HelpContextID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextID(long plHelpContextID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pbstrHelpFile/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pbstrHelpFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Customize();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveToolbar(BSTR Key/*[in]*/, BSTR Subkey/*[in]*/, 
                                                    BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RestoreToolbar(BSTR Key/*[in]*/, BSTR Subkey/*[in]*/, 
                                                       BSTR Value/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OLEDrag();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AboutBox();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisabledImageList(LPDISPATCH* ppDisabledImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_DisabledImageList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisabledImageList(LPDISPATCH ppDisabledImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_DisabledImageList(LPDISPATCH ppDisabledImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HotImageList(LPDISPATCH* ppHotImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_HotImageList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HotImageList(LPDISPATCH ppHotImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_HotImageList(LPDISPATCH ppHotImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Mscomctllib_xp::ToolbarStyleConstants* penumStyle/*[out,retval]*/);
  Mscomctllib_xp::ToolbarStyleConstants __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Mscomctllib_xp::ToolbarStyleConstants penumStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlignment(Mscomctllib_xp::ToolbarTextAlignConstants* penumTextAlignment/*[out,retval]*/);
  Mscomctllib_xp::ToolbarTextAlignConstants __fastcall get_TextAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlignment(Mscomctllib_xp::ToolbarTextAlignConstants penumTextAlignment/*[in]*/);

  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   VARIANT_BOOL    AllowCustomize = {read = get_AllowCustomize, write = set_AllowCustomize};
  __property   Mscomctllib_xp::IButtons* Buttons = {read = get_Buttons, write = _set_Buttons};
  __property   Mscomctllib_xp::IControls* Controls = {read = get_Controls};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   VARIANT_BOOL    ShowTips = {read = get_ShowTips, write = set_ShowTips};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    Wrappable = {read = get_Wrappable, write = set_Wrappable};
  __property   float           ButtonHeight = {read = get_ButtonHeight, write = set_ButtonHeight};
  __property   float           ButtonWidth = {read = get_ButtonWidth, write = set_ButtonWidth};
  __property   long            HelpContextID = {read = get_HelpContextID, write = set_HelpContextID};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   LPDISPATCH      DisabledImageList = {read = get_DisabledImageList, write = set_DisabledImageList};
  __property   LPDISPATCH      HotImageList = {read = get_HotImageList, write = set_HotImageList};
  __property   Mscomctllib_xp::ToolbarStyleConstants Style = {read = get_Style, write = set_Style};
  __property   Mscomctllib_xp::ToolbarTextAlignConstants TextAlignment = {read = get_TextAlignment, write = set_TextAlignment};
};
typedef IToolbarDispT<IToolbar> IToolbarDisp;

// *********************************************************************//
// DispIntf:  IToolbarEvents
// Flags:     (4096) Dispatchable
// GUID:      {66833FE5-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T>
class IToolbarEventsDispT : public TAutoDriver<IToolbarEvents>
{
public:
  IToolbarEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall ButtonClick(Mscomctllib_xp::Button* Button);
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall DblClick();
  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall ButtonMenuClick(Mscomctllib_xp::ButtonMenu* ButtonMenu);
  void /*[VT_VOID:0]*/ __fastcall ButtonDropDown(Mscomctllib_xp::Button* Button);

};
typedef IToolbarEventsDispT<IToolbarEvents> IToolbarEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIButtons
// Interface: IButtons
// *********************************************************************//
template <class T /* IButtons */ >
class TCOMIButtonsT : public TComInterface<IButtons>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIButtonsT() {}
  TCOMIButtonsT(IButtons *intf, bool addRef = false) : TComInterface<IButtons>(intf, addRef) {}
  TCOMIButtonsT(const TCOMIButtonsT& src) : TComInterface<IButtons>(src) {}
  TCOMIButtonsT& operator=(const TCOMIButtonsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(short* psCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(short psCount/*[in]*/);
  HRESULT         __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                Mscomctllib_xp::IButton** ppButton/*[out,retval]*/);
  Mscomctllib_xp::IButton* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IButton* ppButton/*[in]*/);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IButton** ppButton/*[out,retval]*/);
  Mscomctllib_xp::IButton* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _set_Item(VARIANT* Index/*[in]*/, 
                                       Mscomctllib_xp::IButton* ppButton/*[in]*/);
  HRESULT         __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                 VARIANT* Caption/*[in,opt]*/, VARIANT* Style/*[in,opt]*/, 
                                 VARIANT* Image/*[in,opt]*/, 
                                 Mscomctllib_xp::IButton** ppButton/*[out,retval]*/);
  Mscomctllib_xp::IButton* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Caption/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Style/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Image/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall _NewEnum(LPDISPATCH* ppDispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef TCOMIButtonsT<IButtons> TCOMIButtons;

// *********************************************************************//
// DispIntf:  IButtons
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FE7-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IButtonsDispT : public TAutoDriver<IButtons>
{
public:
  IButtonsDispT(){}

  IButtonsDispT(IButtons *pintf)
  {
    TAutoDriver<IButtons>::Bind(pintf, false);
  }

  IButtonsDispT(IButtonsPtr pintf)
  {
    TAutoDriver<IButtons>::Bind(pintf, true);
  }

  IButtonsDispT& operator=(IButtons *pintf)
  {
    TAutoDriver<IButtons>::Bind(pintf, false);
    return *this;
  }

  IButtonsDispT& operator=(IButtonsPtr pintf)
  {
    TAutoDriver<IButtons>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Buttons));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Buttons);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(short* psCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(short psCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::IButton** ppButton/*[out,retval]*/);
  Mscomctllib_xp::IButton* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                            Mscomctllib_xp::IButton* ppButton/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IButton** ppButton/*[out,retval]*/);
  Mscomctllib_xp::IButton* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Item(VARIANT* Index/*[in]*/, 
                                                  Mscomctllib_xp::IButton* ppButton/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                            VARIANT* Caption/*[in,opt]*/, VARIANT* Style/*[in,opt]*/
                                            , VARIANT* Image/*[in,opt]*/, 
                                            Mscomctllib_xp::IButton** ppButton/*[out,retval]*/);
  Mscomctllib_xp::IButton* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Caption/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Style/*[in,opt]*/= TNoParam(), 
                                          VARIANT* Image/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPDISPATCH* ppDispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef IButtonsDispT<IButtons> IButtonsDisp;

// *********************************************************************//
// SmartIntf: TCOMIButton
// Interface: IButton
// *********************************************************************//
template <class T /* IButton */ >
class TCOMIButtonT : public TComInterface<IButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIButtonT() {}
  TCOMIButtonT(IButton *intf, bool addRef = false) : TComInterface<IButton>(intf, addRef) {}
  TCOMIButtonT(const TCOMIButtonT& src) : TComInterface<IButton>(src) {}
  TCOMIButtonT& operator=(const TCOMIButtonT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__ObjectDefault(BSTR* pbstr_ObjectDefault/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT         __fastcall set__ObjectDefault(BSTR pbstr_ObjectDefault/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT         __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_Index(short* psIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT         __fastcall set_Index(short psIndex/*[in]*/);
  HRESULT         __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT         __fastcall get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/);
  BSTR            __fastcall get_ToolTipText(void);
  HRESULT         __fastcall set_ToolTipText(BSTR pbstrToolTipText/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pbVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pbVisible/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL pbVisible/*[in]*/);
  HRESULT         __fastcall get_Width(float* pfWidth/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(float pfWidth/*[in]*/);
  HRESULT         __fastcall get_Height(float* pfHeight/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(float pfHeight/*[in]*/);
  HRESULT         __fastcall get_Top(float* pfTop/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(float pfTop/*[in]*/);
  HRESULT         __fastcall get_Left(float* pfLeft/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(float pfLeft/*[in]*/);
  HRESULT         __fastcall get_Value(Mscomctllib_xp::ValueConstants* psValue/*[out,retval]*/);
  Mscomctllib_xp::ValueConstants __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(Mscomctllib_xp::ValueConstants psValue/*[in]*/);
  HRESULT         __fastcall get_Style(Mscomctllib_xp::ButtonStyleConstants* psStyle/*[out,retval]*/);
  Mscomctllib_xp::ButtonStyleConstants __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(Mscomctllib_xp::ButtonStyleConstants psStyle/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT         __fastcall get_Image(VARIANT* pvImage/*[out,retval]*/);
  VARIANT         __fastcall get_Image(void);
  HRESULT         __fastcall set_Image(VARIANT pvImage/*[in]*/);
  HRESULT         __fastcall get_MixedState(VARIANT_BOOL* pbMixedState/*[out,retval]*/);
  HRESULT         __fastcall get_MixedState(TOLEBOOL* pbMixedState/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MixedState(void);
  HRESULT         __fastcall set_MixedState(VARIANT_BOOL pbMixedState/*[in]*/);
  HRESULT         __fastcall set_MixedState(TOLEBOOL pbMixedState/*[in]*/);
  HRESULT         __fastcall get_ButtonMenus(Mscomctllib_xp::IButtonMenus** ppButtonMenus/*[out,retval]*/);
  HRESULT         __fastcall get_ButtonMenus(Mscomctllib_xp::IButtonMenusPtr* ppButtonMenus/*[out,retval]*/);
  Mscomctllib_xp::IButtonMenusPtr __fastcall get_ButtonMenus(void);
  HRESULT         __fastcall _set_ButtonMenus(Mscomctllib_xp::IButtonMenus* ppButtonMenus/*[in]*/);
  HRESULT         __fastcall _set_ButtonMenus(Mscomctllib_xp::IButtonMenusPtr ppButtonMenus/*[in]*/);
  HRESULT         __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   BSTR            Caption = {read = get_Caption};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Mscomctllib_xp::ValueConstants Value = {read = get_Value, write = set_Value};
  __property   Mscomctllib_xp::ButtonStyleConstants Style = {read = get_Style, write = set_Style};
  __property   BSTR            Description = {read = get_Description};
  __property   TOLEBOOL        MixedState = {read = get_MixedState, write = set_MixedState};
  __property   Mscomctllib_xp::IButtonMenusPtr ButtonMenus = {read = get_ButtonMenus, write = _set_ButtonMenus};
};
typedef TCOMIButtonT<IButton> TCOMIButton;

// *********************************************************************//
// DispIntf:  IButton
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FE9-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IButtonDispT : public TAutoDriver<IButton>
{
public:
  IButtonDispT(){}

  IButtonDispT(IButton *pintf)
  {
    TAutoDriver<IButton>::Bind(pintf, false);
  }

  IButtonDispT(IButtonPtr pintf)
  {
    TAutoDriver<IButton>::Bind(pintf, true);
  }

  IButtonDispT& operator=(IButton *pintf)
  {
    TAutoDriver<IButton>::Bind(pintf, false);
    return *this;
  }

  IButtonDispT& operator=(IButtonPtr pintf)
  {
    TAutoDriver<IButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Button));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Button);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__ObjectDefault(BSTR* pbstr_ObjectDefault/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__ObjectDefault(BSTR pbstr_ObjectDefault/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(short* psIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(short psIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/);
  BSTR            __fastcall get_ToolTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToolTipText(BSTR pbstrToolTipText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pbVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* pfWidth/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float pfWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* pfHeight/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float pfHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* pfTop/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float pfTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* pfLeft/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float pfLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(Mscomctllib_xp::ValueConstants* psValue/*[out,retval]*/);
  Mscomctllib_xp::ValueConstants __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(Mscomctllib_xp::ValueConstants psValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Mscomctllib_xp::ButtonStyleConstants* psStyle/*[out,retval]*/);
  Mscomctllib_xp::ButtonStyleConstants __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Mscomctllib_xp::ButtonStyleConstants psStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Image(VARIANT* pvImage/*[out,retval]*/);
  VARIANT         __fastcall get_Image(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Image(VARIANT pvImage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MixedState(VARIANT_BOOL* pbMixedState/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MixedState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MixedState(VARIANT_BOOL pbMixedState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ButtonMenus(Mscomctllib_xp::IButtonMenus** ppButtonMenus/*[out,retval]*/);
  Mscomctllib_xp::IButtonMenus* __fastcall get_ButtonMenus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ButtonMenus(Mscomctllib_xp::IButtonMenus* ppButtonMenus/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   BSTR            Caption = {read = get_Caption};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Mscomctllib_xp::ValueConstants Value = {read = get_Value, write = set_Value};
  __property   Mscomctllib_xp::ButtonStyleConstants Style = {read = get_Style, write = set_Style};
  __property   BSTR            Description = {read = get_Description};
  __property   VARIANT_BOOL    MixedState = {read = get_MixedState, write = set_MixedState};
  __property   Mscomctllib_xp::IButtonMenus* ButtonMenus = {read = get_ButtonMenus, write = _set_ButtonMenus};
};
typedef IButtonDispT<IButton> IButtonDisp;

// *********************************************************************//
// SmartIntf: TCOMIButtonMenus
// Interface: IButtonMenus
// *********************************************************************//
template <class T /* IButtonMenus */ >
class TCOMIButtonMenusT : public TComInterface<IButtonMenus>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIButtonMenusT() {}
  TCOMIButtonMenusT(IButtonMenus *intf, bool addRef = false) : TComInterface<IButtonMenus>(intf, addRef) {}
  TCOMIButtonMenusT(const TCOMIButtonMenusT& src) : TComInterface<IButtonMenus>(src) {}
  TCOMIButtonMenusT& operator=(const TCOMIButtonMenusT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(short* psCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(short psCount/*[in]*/);
  HRESULT         __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/);
  Mscomctllib_xp::IButtonMenu* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IButtonMenu* ppButtonMenu/*[in]*/);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/);
  Mscomctllib_xp::IButtonMenu* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _set_Item(VARIANT* Index/*[in]*/, 
                                       Mscomctllib_xp::IButtonMenu* ppButtonMenu/*[in]*/);
  HRESULT         __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                 VARIANT* Text/*[in,opt]*/, 
                                 Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/);
  Mscomctllib_xp::IButtonMenu* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                              VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                              VARIANT* Text/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall _NewEnum(LPDISPATCH* ppDispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef TCOMIButtonMenusT<IButtonMenus> TCOMIButtonMenus;

// *********************************************************************//
// DispIntf:  IButtonMenus
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FEB-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IButtonMenusDispT : public TAutoDriver<IButtonMenus>
{
public:
  IButtonMenusDispT(){}

  IButtonMenusDispT(IButtonMenus *pintf)
  {
    TAutoDriver<IButtonMenus>::Bind(pintf, false);
  }

  IButtonMenusDispT(IButtonMenusPtr pintf)
  {
    TAutoDriver<IButtonMenus>::Bind(pintf, true);
  }

  IButtonMenusDispT& operator=(IButtonMenus *pintf)
  {
    TAutoDriver<IButtonMenus>::Bind(pintf, false);
    return *this;
  }

  IButtonMenusDispT& operator=(IButtonMenusPtr pintf)
  {
    TAutoDriver<IButtonMenus>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ButtonMenus));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ButtonMenus);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(short* psCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(short psCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/);
  Mscomctllib_xp::IButtonMenu* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                            Mscomctllib_xp::IButtonMenu* ppButtonMenu/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/);
  Mscomctllib_xp::IButtonMenu* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Item(VARIANT* Index/*[in]*/, 
                                                  Mscomctllib_xp::IButtonMenu* ppButtonMenu/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                            VARIANT* Text/*[in,opt]*/, 
                                            Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/);
  Mscomctllib_xp::IButtonMenu* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                              VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                              VARIANT* Text/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPDISPATCH* ppDispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef IButtonMenusDispT<IButtonMenus> IButtonMenusDisp;

// *********************************************************************//
// SmartIntf: TCOMIButtonMenu
// Interface: IButtonMenu
// *********************************************************************//
template <class T /* IButtonMenu */ >
class TCOMIButtonMenuT : public TComInterface<IButtonMenu>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIButtonMenuT() {}
  TCOMIButtonMenuT(IButtonMenu *intf, bool addRef = false) : TComInterface<IButtonMenu>(intf, addRef) {}
  TCOMIButtonMenuT(const TCOMIButtonMenuT& src) : TComInterface<IButtonMenu>(src) {}
  TCOMIButtonMenuT& operator=(const TCOMIButtonMenuT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__ObjectDefault(BSTR* pbstrObjectDefault/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT         __fastcall set__ObjectDefault(BSTR pbstrObjectDefault/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_Index(short* psIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT         __fastcall set_Index(short psIndex/*[in]*/);
  HRESULT         __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT         __fastcall get_Parent(Mscomctllib_xp::IButton** ppParent/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Mscomctllib_xp::IButtonPtr* ppParent/*[out,retval]*/);
  Mscomctllib_xp::IButtonPtr __fastcall get_Parent(void);
  HRESULT         __fastcall _set_Parent(Mscomctllib_xp::IButton* ppParent/*[in]*/);
  HRESULT         __fastcall _set_Parent(Mscomctllib_xp::IButtonPtr ppParent/*[in]*/);
  HRESULT         __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pbVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pbVisible/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL pbVisible/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   Mscomctllib_xp::IButtonPtr Parent = {read = get_Parent, write = _set_Parent};
  __property   BSTR            Text = {read = get_Text};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
};
typedef TCOMIButtonMenuT<IButtonMenu> TCOMIButtonMenu;

// *********************************************************************//
// DispIntf:  IButtonMenu
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FED-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IButtonMenuDispT : public TAutoDriver<IButtonMenu>
{
public:
  IButtonMenuDispT(){}

  IButtonMenuDispT(IButtonMenu *pintf)
  {
    TAutoDriver<IButtonMenu>::Bind(pintf, false);
  }

  IButtonMenuDispT(IButtonMenuPtr pintf)
  {
    TAutoDriver<IButtonMenu>::Bind(pintf, true);
  }

  IButtonMenuDispT& operator=(IButtonMenu *pintf)
  {
    TAutoDriver<IButtonMenu>::Bind(pintf, false);
    return *this;
  }

  IButtonMenuDispT& operator=(IButtonMenuPtr pintf)
  {
    TAutoDriver<IButtonMenu>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ButtonMenu));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ButtonMenu);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__ObjectDefault(BSTR* pbstrObjectDefault/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__ObjectDefault(BSTR pbstrObjectDefault/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(short* psIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(short psIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Mscomctllib_xp::IButton** ppParent/*[out,retval]*/);
  Mscomctllib_xp::IButton* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Parent(Mscomctllib_xp::IButton* ppParent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pbVisible/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   Mscomctllib_xp::IButton* Parent = {read = get_Parent, write = _set_Parent};
  __property   BSTR            Text = {read = get_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
};
typedef IButtonMenuDispT<IButtonMenu> IButtonMenuDisp;

// *********************************************************************//
// SmartIntf: TCOMIStatusBar
// Interface: IStatusBar
// *********************************************************************//
template <class T /* IStatusBar */ >
class TCOMIStatusBarT : public TComInterface<IStatusBar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIStatusBarT() {}
  TCOMIStatusBarT(IStatusBar *intf, bool addRef = false) : TComInterface<IStatusBar>(intf, addRef) {}
  TCOMIStatusBarT(const TCOMIStatusBarT& src) : TComInterface<IStatusBar>(src) {}
  TCOMIStatusBarT& operator=(const TCOMIStatusBarT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_SimpleText(BSTR* pbstrSimpleText/*[out,retval]*/);
  BSTR            __fastcall get_SimpleText(void);
  HRESULT         __fastcall set_SimpleText(BSTR pbstrSimpleText/*[in]*/);
  HRESULT         __fastcall get_Style(Mscomctllib_xp::SbarStyleConstants* psStyle/*[out,retval]*/);
  Mscomctllib_xp::SbarStyleConstants __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(Mscomctllib_xp::SbarStyleConstants psStyle/*[in]*/);
  HRESULT         __fastcall get_Panels(Mscomctllib_xp::IPanels** ppPanels/*[out,retval]*/);
  HRESULT         __fastcall get_Panels(Mscomctllib_xp::IPanelsPtr* ppPanels/*[out,retval]*/);
  Mscomctllib_xp::IPanelsPtr __fastcall get_Panels(void);
  HRESULT         __fastcall _set_Panels(Mscomctllib_xp::IPanels* ppPanels/*[in]*/);
  HRESULT         __fastcall _set_Panels(Mscomctllib_xp::IPanelsPtr ppPanels/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall get_ShowTips(VARIANT_BOOL* bShowTips/*[out,retval]*/);
  HRESULT         __fastcall get_ShowTips(TOLEBOOL* bShowTips/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowTips(void);
  HRESULT         __fastcall set_ShowTips(VARIANT_BOOL bShowTips/*[in]*/);
  HRESULT         __fastcall set_ShowTips(TOLEBOOL bShowTips/*[in]*/);
  HRESULT         __fastcall get_PanelProperties(BSTR* pbstrPanelProperties/*[out,retval]*/);
  BSTR            __fastcall get_PanelProperties(void);
  HRESULT         __fastcall set_PanelProperties(BSTR pbstrPanelProperties/*[in]*/);
  HRESULT         __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT         __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** ppFont/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall _set_Font(IFontDisp* ppFont/*[in]*/);
  HRESULT         __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT         __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT         __fastcall Refresh(void);
  HRESULT         __fastcall OLEDrag(void);
  HRESULT         __fastcall AboutBox(void);

  __property   BSTR            SimpleText = {read = get_SimpleText};
  __property   Mscomctllib_xp::SbarStyleConstants Style = {read = get_Style, write = set_Style};
  __property   Mscomctllib_xp::IPanelsPtr Panels = {read = get_Panels, write = _set_Panels};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon};
  __property   TOLEBOOL        ShowTips = {read = get_ShowTips, write = set_ShowTips};
  __property   BSTR            PanelProperties = {read = get_PanelProperties};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
};
typedef TCOMIStatusBarT<IStatusBar> TCOMIStatusBar;

// *********************************************************************//
// DispIntf:  IStatusBar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E3867A1-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IStatusBarDispT : public TAutoDriver<IStatusBar>
{
public:
  IStatusBarDispT(){}

  IStatusBarDispT(IStatusBar *pintf)
  {
    TAutoDriver<IStatusBar>::Bind(pintf, false);
  }

  IStatusBarDispT(IStatusBarPtr pintf)
  {
    TAutoDriver<IStatusBar>::Bind(pintf, true);
  }

  IStatusBarDispT& operator=(IStatusBar *pintf)
  {
    TAutoDriver<IStatusBar>::Bind(pintf, false);
    return *this;
  }

  IStatusBarDispT& operator=(IStatusBarPtr pintf)
  {
    TAutoDriver<IStatusBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_StatusBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_StatusBar);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SimpleText(BSTR* pbstrSimpleText/*[out,retval]*/);
  BSTR            __fastcall get_SimpleText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SimpleText(BSTR pbstrSimpleText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Mscomctllib_xp::SbarStyleConstants* psStyle/*[out,retval]*/);
  Mscomctllib_xp::SbarStyleConstants __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Mscomctllib_xp::SbarStyleConstants psStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Panels(Mscomctllib_xp::IPanels** ppPanels/*[out,retval]*/);
  Mscomctllib_xp::IPanels* __fastcall get_Panels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Panels(Mscomctllib_xp::IPanels* ppPanels/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowTips(VARIANT_BOOL* bShowTips/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowTips(VARIANT_BOOL bShowTips/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PanelProperties(BSTR* pbstrPanelProperties/*[out,retval]*/);
  BSTR            __fastcall get_PanelProperties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PanelProperties(BSTR pbstrPanelProperties/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp** ppFont/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp* ppFont/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OLEDrag();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AboutBox();

  __property   BSTR            SimpleText = {read = get_SimpleText};
  __property   Mscomctllib_xp::SbarStyleConstants Style = {read = get_Style, write = set_Style};
  __property   Mscomctllib_xp::IPanels* Panels = {read = get_Panels, write = _set_Panels};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   VARIANT_BOOL    ShowTips = {read = get_ShowTips, write = set_ShowTips};
  __property   BSTR            PanelProperties = {read = get_PanelProperties};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = _set_Font};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
};
typedef IStatusBarDispT<IStatusBar> IStatusBarDisp;

// *********************************************************************//
// DispIntf:  IStatusBarEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {8E3867A2-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T>
class IStatusBarEventsDispT : public TAutoDriver<IStatusBarEvents>
{
public:
  IStatusBarEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall PanelClick(Mscomctllib_xp::Panel* Panel);
  void /*[VT_VOID:0]*/ __fastcall PanelDblClick(Mscomctllib_xp::Panel* Panel);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick();
  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/);

};
typedef IStatusBarEventsDispT<IStatusBarEvents> IStatusBarEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIPanels
// Interface: IPanels
// *********************************************************************//
template <class T /* IPanels */ >
class TCOMIPanelsT : public TComInterface<IPanels>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPanelsT() {}
  TCOMIPanelsT(IPanels *intf, bool addRef = false) : TComInterface<IPanels>(intf, addRef) {}
  TCOMIPanelsT(const TCOMIPanelsT& src) : TComInterface<IPanels>(src) {}
  TCOMIPanelsT& operator=(const TCOMIPanelsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(short* sCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(short sCount/*[in]*/);
  HRESULT         __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/);
  Mscomctllib_xp::IPanel* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IPanel* ppPanel/*[in]*/);
  HRESULT         __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                 VARIANT* Text/*[in,opt]*/, VARIANT* Style/*[in,opt]*/, 
                                 VARIANT* Picture/*[in,opt]*/, 
                                 Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/);
  Mscomctllib_xp::IPanel* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Style/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Picture/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/);
  Mscomctllib_xp::IPanel* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _set_Item(VARIANT* Index/*[in]*/, 
                                       Mscomctllib_xp::IPanel* ppPanel/*[in]*/);
  HRESULT         __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef TCOMIPanelsT<IPanels> TCOMIPanels;

// *********************************************************************//
// DispIntf:  IPanels
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E3867A4-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IPanelsDispT : public TAutoDriver<IPanels>
{
public:
  IPanelsDispT(){}

  IPanelsDispT(IPanels *pintf)
  {
    TAutoDriver<IPanels>::Bind(pintf, false);
  }

  IPanelsDispT(IPanelsPtr pintf)
  {
    TAutoDriver<IPanels>::Bind(pintf, true);
  }

  IPanelsDispT& operator=(IPanels *pintf)
  {
    TAutoDriver<IPanels>::Bind(pintf, false);
    return *this;
  }

  IPanelsDispT& operator=(IPanelsPtr pintf)
  {
    TAutoDriver<IPanels>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Panels));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Panels);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(short* sCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(short sCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/);
  Mscomctllib_xp::IPanel* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                            Mscomctllib_xp::IPanel* ppPanel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                            VARIANT* Text/*[in,opt]*/, VARIANT* Style/*[in,opt]*/, 
                                            VARIANT* Picture/*[in,opt]*/, 
                                            Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/);
  Mscomctllib_xp::IPanel* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Style/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Picture/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/);
  Mscomctllib_xp::IPanel* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Item(VARIANT* Index/*[in]*/, 
                                                  Mscomctllib_xp::IPanel* ppPanel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef IPanelsDispT<IPanels> IPanelsDisp;

// *********************************************************************//
// SmartIntf: TCOMIPanel
// Interface: IPanel
// *********************************************************************//
template <class T /* IPanel */ >
class TCOMIPanelT : public TComInterface<IPanel>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPanelT() {}
  TCOMIPanelT(IPanel *intf, bool addRef = false) : TComInterface<IPanel>(intf, addRef) {}
  TCOMIPanelT(const TCOMIPanelT& src) : TComInterface<IPanel>(src) {}
  TCOMIPanelT& operator=(const TCOMIPanelT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT         __fastcall set__ObjectDefault(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_Alignment(Mscomctllib_xp::PanelAlignmentConstants* psAlignment/*[out,retval]*/);
  Mscomctllib_xp::PanelAlignmentConstants __fastcall get_Alignment(void);
  HRESULT         __fastcall set_Alignment(Mscomctllib_xp::PanelAlignmentConstants psAlignment/*[in]*/);
  HRESULT         __fastcall get_AutoSize(Mscomctllib_xp::PanelAutoSizeConstants* psAutoSize/*[out,retval]*/);
  Mscomctllib_xp::PanelAutoSizeConstants __fastcall get_AutoSize(void);
  HRESULT         __fastcall set_AutoSize(Mscomctllib_xp::PanelAutoSizeConstants psAutoSize/*[in]*/);
  HRESULT         __fastcall get_Bevel(Mscomctllib_xp::PanelBevelConstants* psBevel/*[out,retval]*/);
  Mscomctllib_xp::PanelBevelConstants __fastcall get_Bevel(void);
  HRESULT         __fastcall set_Bevel(Mscomctllib_xp::PanelBevelConstants psBevel/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_Index(short* sIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT         __fastcall set_Index(short sIndex/*[in]*/);
  HRESULT         __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT         __fastcall get_Left(float* pfLeft/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(float pfLeft/*[in]*/);
  HRESULT         __fastcall get_MinWidth(float* pfMinWidth/*[out,retval]*/);
  float           __fastcall get_MinWidth(void);
  HRESULT         __fastcall set_MinWidth(float pfMinWidth/*[in]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp** ppPicture/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT         __fastcall _set_Picture(IPictureDisp* ppPicture/*[in]*/);
  HRESULT         __fastcall get_Style(Mscomctllib_xp::PanelStyleConstants* psStyle/*[out,retval]*/);
  Mscomctllib_xp::PanelStyleConstants __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(Mscomctllib_xp::PanelStyleConstants psStyle/*[in]*/);
  HRESULT         __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/);
  BSTR            __fastcall get_ToolTipText(void);
  HRESULT         __fastcall set_ToolTipText(BSTR pbstrToolTipText/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pbVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pbVisible/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL pbVisible/*[in]*/);
  HRESULT         __fastcall get_Width(float* pfWidth/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(float pfWidth/*[in]*/);
  HRESULT         __fastcall set_Picture(IPictureDisp* ppPicture/*[in]*/);
  HRESULT         __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   Mscomctllib_xp::PanelAlignmentConstants Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Mscomctllib_xp::PanelAutoSizeConstants AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Mscomctllib_xp::PanelBevelConstants Bevel = {read = get_Bevel, write = set_Bevel};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   IPictureDisp*   Picture = {read = get_Picture};
  __property   Mscomctllib_xp::PanelStyleConstants Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
};
typedef TCOMIPanelT<IPanel> TCOMIPanel;

// *********************************************************************//
// DispIntf:  IPanel
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E3867AA-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IPanelDispT : public TAutoDriver<IPanel>
{
public:
  IPanelDispT(){}

  IPanelDispT(IPanel *pintf)
  {
    TAutoDriver<IPanel>::Bind(pintf, false);
  }

  IPanelDispT(IPanelPtr pintf)
  {
    TAutoDriver<IPanel>::Bind(pintf, true);
  }

  IPanelDispT& operator=(IPanel *pintf)
  {
    TAutoDriver<IPanel>::Bind(pintf, false);
    return *this;
  }

  IPanelDispT& operator=(IPanelPtr pintf)
  {
    TAutoDriver<IPanel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Panel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Panel);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__ObjectDefault(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Mscomctllib_xp::PanelAlignmentConstants* psAlignment/*[out,retval]*/);
  Mscomctllib_xp::PanelAlignmentConstants __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Mscomctllib_xp::PanelAlignmentConstants psAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoSize(Mscomctllib_xp::PanelAutoSizeConstants* psAutoSize/*[out,retval]*/);
  Mscomctllib_xp::PanelAutoSizeConstants __fastcall get_AutoSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoSize(Mscomctllib_xp::PanelAutoSizeConstants psAutoSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bevel(Mscomctllib_xp::PanelBevelConstants* psBevel/*[out,retval]*/);
  Mscomctllib_xp::PanelBevelConstants __fastcall get_Bevel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bevel(Mscomctllib_xp::PanelBevelConstants psBevel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(short* sIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(short sIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* pfLeft/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float pfLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinWidth(float* pfMinWidth/*[out,retval]*/);
  float           __fastcall get_MinWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinWidth(float pfMinWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp** ppPicture/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp* ppPicture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Mscomctllib_xp::PanelStyleConstants* psStyle/*[out,retval]*/);
  Mscomctllib_xp::PanelStyleConstants __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Mscomctllib_xp::PanelStyleConstants psStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/);
  BSTR            __fastcall get_ToolTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToolTipText(BSTR pbstrToolTipText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pbVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* pfWidth/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float pfWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp* ppPicture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   Mscomctllib_xp::PanelAlignmentConstants Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Mscomctllib_xp::PanelAutoSizeConstants AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Mscomctllib_xp::PanelBevelConstants Bevel = {read = get_Bevel, write = set_Bevel};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   float           MinWidth = {read = get_MinWidth, write = set_MinWidth};
  __property   IPictureDisp*   Picture = {read = get_Picture, write = set_Picture};
  __property   Mscomctllib_xp::PanelStyleConstants Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
};
typedef IPanelDispT<IPanel> IPanelDisp;

// *********************************************************************//
// SmartIntf: TCOMIProgressBar
// Interface: IProgressBar
// *********************************************************************//
template <class T /* IProgressBar */ >
class TCOMIProgressBarT : public TComInterface<IProgressBar>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIProgressBarT() {}
  TCOMIProgressBarT(IProgressBar *intf, bool addRef = false) : TComInterface<IProgressBar>(intf, addRef) {}
  TCOMIProgressBarT(const TCOMIProgressBarT& src) : TComInterface<IProgressBar>(src) {}
  TCOMIProgressBarT& operator=(const TCOMIProgressBarT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ControlDefault(float* pfValue/*[out,retval]*/);
  float           __fastcall get_ControlDefault(void);
  HRESULT         __fastcall set_ControlDefault(float pfValue/*[in]*/);
  HRESULT         __fastcall get_Max(float* pfMax/*[out,retval]*/);
  float           __fastcall get_Max(void);
  HRESULT         __fastcall set_Max(float pfMax/*[in]*/);
  HRESULT         __fastcall get_Min(float* pfMin/*[out,retval]*/);
  float           __fastcall get_Min(void);
  HRESULT         __fastcall set_Min(float pfMin/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* pMousePointers/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants pMousePointers/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** ppPictureDisp/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* ppPictureDisp/*[in]*/);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* ppPictureDisp/*[in]*/);
  HRESULT         __fastcall get_Value(float* pfValue/*[out,retval]*/);
  float           __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(float pfValue/*[in]*/);
  HRESULT         __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT         __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT         __fastcall get_Appearance(Mscomctllib_xp::AppearanceConstants* penumAppearances/*[out,retval]*/);
  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void);
  HRESULT         __fastcall set_Appearance(Mscomctllib_xp::AppearanceConstants penumAppearances/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* penumBorderStyles/*[out,retval]*/);
  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(Mscomctllib_xp::BorderStyleConstants penumBorderStyles/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* bEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* bEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL bEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL bEnabled/*[in]*/);
  HRESULT         __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT         __fastcall OLEDrag(void);
  HRESULT         __fastcall AboutBox(void);
  HRESULT         __fastcall get_Orientation(Mscomctllib_xp::OrientationConstants* penumOrientation/*[out,retval]*/);
  Mscomctllib_xp::OrientationConstants __fastcall get_Orientation(void);
  HRESULT         __fastcall set_Orientation(Mscomctllib_xp::OrientationConstants penumOrientation/*[in]*/);
  HRESULT         __fastcall get_Scrolling(Mscomctllib_xp::ScrollingConstants* penumScrolling/*[out,retval]*/);
  Mscomctllib_xp::ScrollingConstants __fastcall get_Scrolling(void);
  HRESULT         __fastcall set_Scrolling(Mscomctllib_xp::ScrollingConstants penumScrolling/*[in]*/);
  HRESULT         __fastcall Refresh(void);

  __property   float           ControlDefault = {read = get_ControlDefault, write = set_ControlDefault};
  __property   float           Max = {read = get_Max, write = set_Max};
  __property   float           Min = {read = get_Min, write = set_Min};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon};
  __property   float           Value = {read = get_Value, write = set_Value};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd};
  __property   Mscomctllib_xp::OrientationConstants Orientation = {read = get_Orientation, write = set_Orientation};
  __property   Mscomctllib_xp::ScrollingConstants Scrolling = {read = get_Scrolling, write = set_Scrolling};
};
typedef TCOMIProgressBarT<IProgressBar> TCOMIProgressBar;

// *********************************************************************//
// DispIntf:  IProgressBar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {35053A20-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IProgressBarDispT : public TAutoDriver<IProgressBar>
{
public:
  IProgressBarDispT(){}

  IProgressBarDispT(IProgressBar *pintf)
  {
    TAutoDriver<IProgressBar>::Bind(pintf, false);
  }

  IProgressBarDispT(IProgressBarPtr pintf)
  {
    TAutoDriver<IProgressBar>::Bind(pintf, true);
  }

  IProgressBarDispT& operator=(IProgressBar *pintf)
  {
    TAutoDriver<IProgressBar>::Bind(pintf, false);
    return *this;
  }

  IProgressBarDispT& operator=(IProgressBarPtr pintf)
  {
    TAutoDriver<IProgressBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ProgressBar));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ProgressBar);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlDefault(float* pfValue/*[out,retval]*/);
  float           __fastcall get_ControlDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlDefault(float pfValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Max(float* pfMax/*[out,retval]*/);
  float           __fastcall get_Max(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Max(float pfMax/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Min(float* pfMin/*[out,retval]*/);
  float           __fastcall get_Min(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Min(float pfMin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* pMousePointers/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants pMousePointers/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp** ppPictureDisp/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp* ppPictureDisp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp* ppPictureDisp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(float* pfValue/*[out,retval]*/);
  float           __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(float pfValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Appearance(Mscomctllib_xp::AppearanceConstants* penumAppearances/*[out,retval]*/);
  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Appearance(Mscomctllib_xp::AppearanceConstants penumAppearances/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* penumBorderStyles/*[out,retval]*/);
  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Mscomctllib_xp::BorderStyleConstants penumBorderStyles/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* bEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL bEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OLEDrag();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AboutBox();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Mscomctllib_xp::OrientationConstants* penumOrientation/*[out,retval]*/);
  Mscomctllib_xp::OrientationConstants __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(Mscomctllib_xp::OrientationConstants penumOrientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scrolling(Mscomctllib_xp::ScrollingConstants* penumScrolling/*[out,retval]*/);
  Mscomctllib_xp::ScrollingConstants __fastcall get_Scrolling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Scrolling(Mscomctllib_xp::ScrollingConstants penumScrolling/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();

  __property   float           ControlDefault = {read = get_ControlDefault, write = set_ControlDefault};
  __property   float           Max = {read = get_Max, write = set_Max};
  __property   float           Min = {read = get_Min, write = set_Min};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   float           Value = {read = get_Value, write = set_Value};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd};
  __property   Mscomctllib_xp::OrientationConstants Orientation = {read = get_Orientation, write = set_Orientation};
  __property   Mscomctllib_xp::ScrollingConstants Scrolling = {read = get_Scrolling, write = set_Scrolling};
};
typedef IProgressBarDispT<IProgressBar> IProgressBarDisp;

// *********************************************************************//
// DispIntf:  IProgressBarEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {35053A21-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T>
class IProgressBarEventsDispT : public TAutoDriver<IProgressBarEvents>
{
public:
  IProgressBarEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/);

};
typedef IProgressBarEventsDispT<IProgressBarEvents> IProgressBarEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMITreeView
// Interface: ITreeView
// *********************************************************************//
template <class T /* ITreeView */ >
class TCOMITreeViewT : public TComInterface<ITreeView>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITreeViewT() {}
  TCOMITreeViewT(ITreeView *intf, bool addRef = false) : TComInterface<ITreeView>(intf, addRef) {}
  TCOMITreeViewT(const TCOMITreeViewT& src) : TComInterface<ITreeView>(src) {}
  TCOMITreeViewT& operator=(const TCOMITreeViewT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_DropHighlight(Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  HRESULT         __fastcall get_DropHighlight(Mscomctllib_xp::INodePtr* ppNode/*[out,retval]*/);
  Mscomctllib_xp::INodePtr __fastcall get_DropHighlight(void);
  HRESULT         __fastcall _set_DropHighlight(Mscomctllib_xp::INode* ppNode/*[in]*/);
  HRESULT         __fastcall _set_DropHighlight(Mscomctllib_xp::INodePtr ppNode/*[in]*/);
  HRESULT         __fastcall set_DropHighlight(VARIANT* ppNode/*[in]*/);
  HRESULT         __fastcall get_HideSelection(VARIANT_BOOL* pbHideSelection/*[out,retval]*/);
  HRESULT         __fastcall get_HideSelection(TOLEBOOL* pbHideSelection/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideSelection(void);
  HRESULT         __fastcall set_HideSelection(VARIANT_BOOL pbHideSelection/*[in]*/);
  HRESULT         __fastcall set_HideSelection(TOLEBOOL pbHideSelection/*[in]*/);
  HRESULT         __fastcall get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ImageList(void);
  HRESULT         __fastcall _set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall get_Indentation(float* pfIndentation/*[out,retval]*/);
  float           __fastcall get_Indentation(void);
  HRESULT         __fastcall set_Indentation(float pfIndentation/*[in]*/);
  HRESULT         __fastcall get_LabelEdit(Mscomctllib_xp::LabelEditConstants* psLabelEdit/*[out,retval]*/);
  Mscomctllib_xp::LabelEditConstants __fastcall get_LabelEdit(void);
  HRESULT         __fastcall set_LabelEdit(Mscomctllib_xp::LabelEditConstants psLabelEdit/*[in]*/);
  HRESULT         __fastcall get_LineStyle(Mscomctllib_xp::TreeLineStyleConstants* psLineStyle/*[out,retval]*/);
  Mscomctllib_xp::TreeLineStyleConstants __fastcall get_LineStyle(void);
  HRESULT         __fastcall set_LineStyle(Mscomctllib_xp::TreeLineStyleConstants psLineStyle/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall get_Nodes(Mscomctllib_xp::INodes** ppNode/*[out,retval]*/);
  HRESULT         __fastcall get_Nodes(Mscomctllib_xp::INodesPtr* ppNode/*[out,retval]*/);
  Mscomctllib_xp::INodesPtr __fastcall get_Nodes(void);
  HRESULT         __fastcall _set_Nodes(Mscomctllib_xp::INodes* ppNode/*[in]*/);
  HRESULT         __fastcall _set_Nodes(Mscomctllib_xp::INodesPtr ppNode/*[in]*/);
  HRESULT         __fastcall get_PathSeparator(BSTR* pbstrPathSeparator/*[out,retval]*/);
  BSTR            __fastcall get_PathSeparator(void);
  HRESULT         __fastcall set_PathSeparator(BSTR pbstrPathSeparator/*[in]*/);
  HRESULT         __fastcall get_SelectedItem(Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  HRESULT         __fastcall get_SelectedItem(Mscomctllib_xp::INodePtr* ppNode/*[out,retval]*/);
  Mscomctllib_xp::INodePtr __fastcall get_SelectedItem(void);
  HRESULT         __fastcall _set_SelectedItem(Mscomctllib_xp::INode* ppNode/*[in]*/);
  HRESULT         __fastcall _set_SelectedItem(Mscomctllib_xp::INodePtr ppNode/*[in]*/);
  HRESULT         __fastcall set_SelectedItem(VARIANT* ppNode/*[in]*/);
  HRESULT         __fastcall get_Sorted(VARIANT_BOOL* pbSorted/*[out,retval]*/);
  HRESULT         __fastcall get_Sorted(TOLEBOOL* pbSorted/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Sorted(void);
  HRESULT         __fastcall set_Sorted(VARIANT_BOOL pbSorted/*[in]*/);
  HRESULT         __fastcall set_Sorted(TOLEBOOL pbSorted/*[in]*/);
  HRESULT         __fastcall get_Style(Mscomctllib_xp::TreeStyleConstants* psStyle/*[out,retval]*/);
  Mscomctllib_xp::TreeStyleConstants __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(Mscomctllib_xp::TreeStyleConstants psStyle/*[in]*/);
  HRESULT         __fastcall get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDragConstants __fastcall get_OLEDragMode(void);
  HRESULT         __fastcall set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/);
  HRESULT         __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT         __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT         __fastcall get_Appearance(Mscomctllib_xp::AppearanceConstants* psAppearance/*[out,retval]*/);
  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void);
  HRESULT         __fastcall set_Appearance(Mscomctllib_xp::AppearanceConstants psAppearance/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/);
  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** ppFont/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* ppFont/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* ppFont/*[in]*/);
  HRESULT         __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT         __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT         __fastcall HitTest(float x/*[in]*/, float y/*[in]*/, 
                                     Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall HitTest(float x/*[in]*/, float y/*[in]*/);
  HRESULT         __fastcall GetVisibleCount(long* plVisibleCount/*[out,retval]*/);
  long            __fastcall GetVisibleCount(void);
  HRESULT         __fastcall StartLabelEdit(void);
  HRESULT         __fastcall Refresh(void);
  HRESULT         __fastcall AboutBox(void);
  HRESULT         __fastcall OLEDrag(void);
  HRESULT         __fastcall get_Checkboxes(VARIANT_BOOL* pbCheckboxes/*[out,retval]*/);
  HRESULT         __fastcall get_Checkboxes(TOLEBOOL* pbCheckboxes/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Checkboxes(void);
  HRESULT         __fastcall set_Checkboxes(VARIANT_BOOL pbCheckboxes/*[in]*/);
  HRESULT         __fastcall set_Checkboxes(TOLEBOOL pbCheckboxes/*[in]*/);
  HRESULT         __fastcall get_FullRowSelect(VARIANT_BOOL* pbFullRowSelect/*[out,retval]*/);
  HRESULT         __fastcall get_FullRowSelect(TOLEBOOL* pbFullRowSelect/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FullRowSelect(void);
  HRESULT         __fastcall set_FullRowSelect(VARIANT_BOOL pbFullRowSelect/*[in]*/);
  HRESULT         __fastcall set_FullRowSelect(TOLEBOOL pbFullRowSelect/*[in]*/);
  HRESULT         __fastcall get_HotTracking(VARIANT_BOOL* pbHotTracking/*[out,retval]*/);
  HRESULT         __fastcall get_HotTracking(TOLEBOOL* pbHotTracking/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HotTracking(void);
  HRESULT         __fastcall set_HotTracking(VARIANT_BOOL pbHotTracking/*[in]*/);
  HRESULT         __fastcall set_HotTracking(TOLEBOOL pbHotTracking/*[in]*/);
  HRESULT         __fastcall get_Scroll(VARIANT_BOOL* pbScroll/*[out,retval]*/);
  HRESULT         __fastcall get_Scroll(TOLEBOOL* pbScroll/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Scroll(void);
  HRESULT         __fastcall set_Scroll(VARIANT_BOOL pbScroll/*[in]*/);
  HRESULT         __fastcall set_Scroll(TOLEBOOL pbScroll/*[in]*/);
  HRESULT         __fastcall get_SingleSel(VARIANT_BOOL* pbSingleSel/*[out,retval]*/);
  HRESULT         __fastcall get_SingleSel(TOLEBOOL* pbSingleSel/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SingleSel(void);
  HRESULT         __fastcall set_SingleSel(VARIANT_BOOL pbSingleSel/*[in]*/);
  HRESULT         __fastcall set_SingleSel(TOLEBOOL pbSingleSel/*[in]*/);

  __property   Mscomctllib_xp::INodePtr DropHighlight = {read = get_DropHighlight, write = _set_DropHighlight};
  __property   TOLEBOOL        HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   float           Indentation = {read = get_Indentation, write = set_Indentation};
  __property   Mscomctllib_xp::LabelEditConstants LabelEdit = {read = get_LabelEdit, write = set_LabelEdit};
  __property   Mscomctllib_xp::TreeLineStyleConstants LineStyle = {read = get_LineStyle, write = set_LineStyle};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon};
  __property   Mscomctllib_xp::INodesPtr Nodes = {read = get_Nodes, write = _set_Nodes};
  __property   BSTR            PathSeparator = {read = get_PathSeparator};
  __property   Mscomctllib_xp::INodePtr SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   TOLEBOOL        Sorted = {read = get_Sorted, write = set_Sorted};
  __property   Mscomctllib_xp::TreeStyleConstants Style = {read = get_Style, write = set_Style};
  __property   Mscomctllib_xp::OLEDragConstants OLEDragMode = {read = get_OLEDragMode, write = set_OLEDragMode};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   TOLEBOOL        Checkboxes = {read = get_Checkboxes, write = set_Checkboxes};
  __property   TOLEBOOL        FullRowSelect = {read = get_FullRowSelect, write = set_FullRowSelect};
  __property   TOLEBOOL        HotTracking = {read = get_HotTracking, write = set_HotTracking};
  __property   TOLEBOOL        Scroll = {read = get_Scroll, write = set_Scroll};
  __property   TOLEBOOL        SingleSel = {read = get_SingleSel, write = set_SingleSel};
};
typedef TCOMITreeViewT<ITreeView> TCOMITreeView;

// *********************************************************************//
// DispIntf:  ITreeView
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C74190B4-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class ITreeViewDispT : public TAutoDriver<ITreeView>
{
public:
  ITreeViewDispT(){}

  ITreeViewDispT(ITreeView *pintf)
  {
    TAutoDriver<ITreeView>::Bind(pintf, false);
  }

  ITreeViewDispT(ITreeViewPtr pintf)
  {
    TAutoDriver<ITreeView>::Bind(pintf, true);
  }

  ITreeViewDispT& operator=(ITreeView *pintf)
  {
    TAutoDriver<ITreeView>::Bind(pintf, false);
    return *this;
  }

  ITreeViewDispT& operator=(ITreeViewPtr pintf)
  {
    TAutoDriver<ITreeView>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TreeView));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TreeView);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropHighlight(Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_DropHighlight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_DropHighlight(Mscomctllib_xp::INode* ppNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DropHighlight(VARIANT* ppNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideSelection(VARIANT_BOOL* pbHideSelection/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideSelection(VARIANT_BOOL pbHideSelection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ImageList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Indentation(float* pfIndentation/*[out,retval]*/);
  float           __fastcall get_Indentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Indentation(float pfIndentation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelEdit(Mscomctllib_xp::LabelEditConstants* psLabelEdit/*[out,retval]*/);
  Mscomctllib_xp::LabelEditConstants __fastcall get_LabelEdit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelEdit(Mscomctllib_xp::LabelEditConstants psLabelEdit/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineStyle(Mscomctllib_xp::TreeLineStyleConstants* psLineStyle/*[out,retval]*/);
  Mscomctllib_xp::TreeLineStyleConstants __fastcall get_LineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineStyle(Mscomctllib_xp::TreeLineStyleConstants psLineStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Nodes(Mscomctllib_xp::INodes** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INodes* __fastcall get_Nodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Nodes(Mscomctllib_xp::INodes* ppNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PathSeparator(BSTR* pbstrPathSeparator/*[out,retval]*/);
  BSTR            __fastcall get_PathSeparator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PathSeparator(BSTR pbstrPathSeparator/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedItem(Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_SelectedItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_SelectedItem(Mscomctllib_xp::INode* ppNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectedItem(VARIANT* ppNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Sorted(VARIANT_BOOL* pbSorted/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Sorted(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Sorted(VARIANT_BOOL pbSorted/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Mscomctllib_xp::TreeStyleConstants* psStyle/*[out,retval]*/);
  Mscomctllib_xp::TreeStyleConstants __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Mscomctllib_xp::TreeStyleConstants psStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDragConstants __fastcall get_OLEDragMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Appearance(Mscomctllib_xp::AppearanceConstants* psAppearance/*[out,retval]*/);
  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Appearance(Mscomctllib_xp::AppearanceConstants psAppearance/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/);
  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp** ppFont/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Font(IFontDisp* ppFont/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp* ppFont/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall HitTest(float x/*[in]*/, float y/*[in]*/, 
                                                Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall HitTest(float x/*[in]*/, float y/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetVisibleCount(long* plVisibleCount/*[out,retval]*/);
  long            __fastcall GetVisibleCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall StartLabelEdit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AboutBox();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OLEDrag();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checkboxes(VARIANT_BOOL* pbCheckboxes/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checkboxes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Checkboxes(VARIANT_BOOL pbCheckboxes/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullRowSelect(VARIANT_BOOL* pbFullRowSelect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullRowSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FullRowSelect(VARIANT_BOOL pbFullRowSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HotTracking(VARIANT_BOOL* pbHotTracking/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HotTracking(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HotTracking(VARIANT_BOOL pbHotTracking/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scroll(VARIANT_BOOL* pbScroll/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Scroll(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Scroll(VARIANT_BOOL pbScroll/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SingleSel(VARIANT_BOOL* pbSingleSel/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SingleSel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SingleSel(VARIANT_BOOL pbSingleSel/*[in]*/);

  __property   Mscomctllib_xp::INode* DropHighlight = {read = get_DropHighlight, write = _set_DropHighlight};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   float           Indentation = {read = get_Indentation, write = set_Indentation};
  __property   Mscomctllib_xp::LabelEditConstants LabelEdit = {read = get_LabelEdit, write = set_LabelEdit};
  __property   Mscomctllib_xp::TreeLineStyleConstants LineStyle = {read = get_LineStyle, write = set_LineStyle};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Mscomctllib_xp::INodes* Nodes = {read = get_Nodes, write = _set_Nodes};
  __property   BSTR            PathSeparator = {read = get_PathSeparator};
  __property   Mscomctllib_xp::INode* SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   VARIANT_BOOL    Sorted = {read = get_Sorted, write = set_Sorted};
  __property   Mscomctllib_xp::TreeStyleConstants Style = {read = get_Style, write = set_Style};
  __property   Mscomctllib_xp::OLEDragConstants OLEDragMode = {read = get_OLEDragMode, write = set_OLEDragMode};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   VARIANT_BOOL    Checkboxes = {read = get_Checkboxes, write = set_Checkboxes};
  __property   VARIANT_BOOL    FullRowSelect = {read = get_FullRowSelect, write = set_FullRowSelect};
  __property   VARIANT_BOOL    HotTracking = {read = get_HotTracking, write = set_HotTracking};
  __property   VARIANT_BOOL    Scroll = {read = get_Scroll, write = set_Scroll};
  __property   VARIANT_BOOL    SingleSel = {read = get_SingleSel, write = set_SingleSel};
};
typedef ITreeViewDispT<ITreeView> ITreeViewDisp;

// *********************************************************************//
// DispIntf:  ITreeViewEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {C74190B5-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T>
class ITreeViewEventsDispT : public TAutoDriver<ITreeViewEvents>
{
public:
  ITreeViewEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeLabelEdit(short* Cancel);
  void /*[VT_VOID:0]*/ __fastcall AfterLabelEdit(short* Cancel, BSTR* NewString);
  void /*[VT_VOID:0]*/ __fastcall Collapse(Mscomctllib_xp::Node* Node);
  void /*[VT_VOID:0]*/ __fastcall Expand(Mscomctllib_xp::Node* Node);
  void /*[VT_VOID:0]*/ __fastcall NodeClick(Mscomctllib_xp::Node* Node);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(short* KeyCode, short Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(short* KeyCode, short Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(short* KeyAscii);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick();
  void /*[VT_VOID:0]*/ __fastcall NodeCheck(Mscomctllib_xp::Node* Node);
  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/);

};
typedef ITreeViewEventsDispT<ITreeViewEvents> ITreeViewEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMINodes
// Interface: INodes
// *********************************************************************//
template <class T /* INodes */ >
class TCOMINodesT : public TComInterface<INodes>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMINodesT() {}
  TCOMINodesT(INodes *intf, bool addRef = false) : TComInterface<INodes>(intf, addRef) {}
  TCOMINodesT(const TCOMINodesT& src) : TComInterface<INodes>(src) {}
  TCOMINodesT& operator=(const TCOMINodesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(short* psCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(short psCount/*[in]*/);
  HRESULT         __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                Mscomctllib_xp::INode* ppNode/*[in]*/);
  HRESULT         __fastcall Add(VARIANT* Relative/*[in,opt]*/, VARIANT* Relationship/*[in,opt]*/, 
                                 VARIANT* Key/*[in,opt]*/, VARIANT* Text/*[in,opt]*/, 
                                 VARIANT* Image/*[in,opt]*/, VARIANT* SelectedImage/*[in,opt]*/, 
                                 Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall Add(VARIANT* Relative/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Relationship/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Image/*[in,opt]*/= TNoParam(), 
                                        VARIANT* SelectedImage/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall set_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::INode* ppNode/*[in]*/);
  HRESULT         __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef TCOMINodesT<INodes> TCOMINodes;

// *********************************************************************//
// DispIntf:  INodes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C74190B7-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class INodesDispT : public TAutoDriver<INodes>
{
public:
  INodesDispT(){}

  INodesDispT(INodes *pintf)
  {
    TAutoDriver<INodes>::Bind(pintf, false);
  }

  INodesDispT(INodesPtr pintf)
  {
    TAutoDriver<INodes>::Bind(pintf, true);
  }

  INodesDispT& operator=(INodes *pintf)
  {
    TAutoDriver<INodes>::Bind(pintf, false);
    return *this;
  }

  INodesDispT& operator=(INodesPtr pintf)
  {
    TAutoDriver<INodes>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Nodes));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Nodes);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(short* psCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(short psCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::INode* ppNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT* Relative/*[in,opt]*/, 
                                            VARIANT* Relationship/*[in,opt]*/, 
                                            VARIANT* Key/*[in,opt]*/, VARIANT* Text/*[in,opt]*/, 
                                            VARIANT* Image/*[in,opt]*/, 
                                            VARIANT* SelectedImage/*[in,opt]*/, 
                                            Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall Add(VARIANT* Relative/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Relationship/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                        VARIANT* Image/*[in,opt]*/= TNoParam(), 
                                        VARIANT* SelectedImage/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::INode** ppNode/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::INode* ppNode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef INodesDispT<INodes> INodesDisp;

// *********************************************************************//
// SmartIntf: TCOMINode
// Interface: INode
// *********************************************************************//
template <class T /* INode */ >
class TCOMINodeT : public TComInterface<INode>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMINodeT() {}
  TCOMINodeT(INode *intf, bool addRef = false) : TComInterface<INode>(intf, addRef) {}
  TCOMINodeT(const TCOMINodeT& src) : TComInterface<INode>(src) {}
  TCOMINodeT& operator=(const TCOMINodeT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT         __fastcall set__ObjectDefault(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_Child(Mscomctllib_xp::INode** ppChild/*[out,retval]*/);
  HRESULT         __fastcall get_Child(Mscomctllib_xp::INodePtr* ppChild/*[out,retval]*/);
  Mscomctllib_xp::INodePtr __fastcall get_Child(void);
  HRESULT         __fastcall _set_Child(Mscomctllib_xp::INode* ppChild/*[in]*/);
  HRESULT         __fastcall _set_Child(Mscomctllib_xp::INodePtr ppChild/*[in]*/);
  HRESULT         __fastcall get_Children(short* psChildren/*[out,retval]*/);
  short           __fastcall get_Children(void);
  HRESULT         __fastcall set_Children(short psChildren/*[in]*/);
  HRESULT         __fastcall get_Expanded(VARIANT_BOOL* pbExpanded/*[out,retval]*/);
  HRESULT         __fastcall get_Expanded(TOLEBOOL* pbExpanded/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Expanded(void);
  HRESULT         __fastcall set_Expanded(VARIANT_BOOL pbExpanded/*[in]*/);
  HRESULT         __fastcall set_Expanded(TOLEBOOL pbExpanded/*[in]*/);
  HRESULT         __fastcall get_ExpandedImage(VARIANT* pExpandedImage/*[out,retval]*/);
  VARIANT         __fastcall get_ExpandedImage(void);
  HRESULT         __fastcall set_ExpandedImage(VARIANT pExpandedImage/*[in]*/);
  HRESULT         __fastcall get_FirstSibling(Mscomctllib_xp::INode** ppFirstSibling/*[out,retval]*/);
  HRESULT         __fastcall get_FirstSibling(Mscomctllib_xp::INodePtr* ppFirstSibling/*[out,retval]*/);
  Mscomctllib_xp::INodePtr __fastcall get_FirstSibling(void);
  HRESULT         __fastcall _set_FirstSibling(Mscomctllib_xp::INode* ppFirstSibling/*[in]*/);
  HRESULT         __fastcall _set_FirstSibling(Mscomctllib_xp::INodePtr ppFirstSibling/*[in]*/);
  HRESULT         __fastcall get_FullPath(BSTR* pbstrFullPath/*[out,retval]*/);
  BSTR            __fastcall get_FullPath(void);
  HRESULT         __fastcall set_FullPath(BSTR pbstrFullPath/*[in]*/);
  HRESULT         __fastcall get_Image(VARIANT* pImage/*[out,retval]*/);
  VARIANT         __fastcall get_Image(void);
  HRESULT         __fastcall set_Image(VARIANT pImage/*[in]*/);
  HRESULT         __fastcall get_Index(short* psIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT         __fastcall set_Index(short psIndex/*[in]*/);
  HRESULT         __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT         __fastcall get_LastSibling(Mscomctllib_xp::INode** ppLastSibling/*[out,retval]*/);
  HRESULT         __fastcall get_LastSibling(Mscomctllib_xp::INodePtr* ppLastSibling/*[out,retval]*/);
  Mscomctllib_xp::INodePtr __fastcall get_LastSibling(void);
  HRESULT         __fastcall _set_LastSibling(Mscomctllib_xp::INode* ppLastSibling/*[in]*/);
  HRESULT         __fastcall _set_LastSibling(Mscomctllib_xp::INodePtr ppLastSibling/*[in]*/);
  HRESULT         __fastcall get_Next(Mscomctllib_xp::INode** ppNext/*[out,retval]*/);
  HRESULT         __fastcall get_Next(Mscomctllib_xp::INodePtr* ppNext/*[out,retval]*/);
  Mscomctllib_xp::INodePtr __fastcall get_Next(void);
  HRESULT         __fastcall _set_Next(Mscomctllib_xp::INode* ppNext/*[in]*/);
  HRESULT         __fastcall _set_Next(Mscomctllib_xp::INodePtr ppNext/*[in]*/);
  HRESULT         __fastcall get_Parent(Mscomctllib_xp::INode** ppParent/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Mscomctllib_xp::INodePtr* ppParent/*[out,retval]*/);
  Mscomctllib_xp::INodePtr __fastcall get_Parent(void);
  HRESULT         __fastcall _set_Parent(Mscomctllib_xp::INode* ppParent/*[in]*/);
  HRESULT         __fastcall _set_Parent(Mscomctllib_xp::INodePtr ppParent/*[in]*/);
  HRESULT         __fastcall get_Previous(Mscomctllib_xp::INode** ppPrevious/*[out,retval]*/);
  HRESULT         __fastcall get_Previous(Mscomctllib_xp::INodePtr* ppPrevious/*[out,retval]*/);
  Mscomctllib_xp::INodePtr __fastcall get_Previous(void);
  HRESULT         __fastcall _set_Previous(Mscomctllib_xp::INode* ppPrevious/*[in]*/);
  HRESULT         __fastcall _set_Previous(Mscomctllib_xp::INodePtr ppPrevious/*[in]*/);
  HRESULT         __fastcall get_Root(Mscomctllib_xp::INode** ppRoot/*[out,retval]*/);
  HRESULT         __fastcall get_Root(Mscomctllib_xp::INodePtr* ppRoot/*[out,retval]*/);
  Mscomctllib_xp::INodePtr __fastcall get_Root(void);
  HRESULT         __fastcall _set_Root(Mscomctllib_xp::INode* ppRoot/*[in]*/);
  HRESULT         __fastcall _set_Root(Mscomctllib_xp::INodePtr ppRoot/*[in]*/);
  HRESULT         __fastcall get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/);
  HRESULT         __fastcall get_Selected(TOLEBOOL* pbSelected/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Selected(void);
  HRESULT         __fastcall set_Selected(VARIANT_BOOL pbSelected/*[in]*/);
  HRESULT         __fastcall set_Selected(TOLEBOOL pbSelected/*[in]*/);
  HRESULT         __fastcall get_SelectedImage(VARIANT* pSelectedImage/*[out,retval]*/);
  VARIANT         __fastcall get_SelectedImage(void);
  HRESULT         __fastcall set_SelectedImage(VARIANT pSelectedImage/*[in]*/);
  HRESULT         __fastcall get_Sorted(VARIANT_BOOL* pbSorted/*[out,retval]*/);
  HRESULT         __fastcall get_Sorted(TOLEBOOL* pbSorted/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Sorted(void);
  HRESULT         __fastcall set_Sorted(VARIANT_BOOL pbSorted/*[in]*/);
  HRESULT         __fastcall set_Sorted(TOLEBOOL pbSorted/*[in]*/);
  HRESULT         __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* bstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR bstrText/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pbVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pbVisible/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL pbVisible/*[in]*/);
  HRESULT         __fastcall CreateDragImage(IPictureDisp** ppDragImage/*[out,retval]*/);
  IPictureDisp*   __fastcall CreateDragImage(void);
  HRESULT         __fastcall EnsureVisible(VARIANT_BOOL* pbEnsureVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall EnsureVisible(void);
  HRESULT         __fastcall get_BackColor(::OLE_COLOR* pocBackColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(::OLE_COLOR pocBackColor/*[in]*/);
  HRESULT         __fastcall get_Bold(VARIANT_BOOL* pbBold/*[out,retval]*/);
  HRESULT         __fastcall get_Bold(TOLEBOOL* pbBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Bold(void);
  HRESULT         __fastcall set_Bold(VARIANT_BOOL pbBold/*[in]*/);
  HRESULT         __fastcall set_Bold(TOLEBOOL pbBold/*[in]*/);
  HRESULT         __fastcall get_Checked(VARIANT_BOOL* pbChecked/*[out,retval]*/);
  HRESULT         __fastcall get_Checked(TOLEBOOL* pbChecked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Checked(void);
  HRESULT         __fastcall set_Checked(VARIANT_BOOL pbChecked/*[in]*/);
  HRESULT         __fastcall set_Checked(TOLEBOOL pbChecked/*[in]*/);
  HRESULT         __fastcall get_ForeColor(::OLE_COLOR* pocForeColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(::OLE_COLOR pocForeColor/*[in]*/);
  HRESULT         __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   Mscomctllib_xp::INodePtr Child = {read = get_Child, write = _set_Child};
  __property   short           Children = {read = get_Children, write = set_Children};
  __property   TOLEBOOL        Expanded = {read = get_Expanded, write = set_Expanded};
  __property   Mscomctllib_xp::INodePtr FirstSibling = {read = get_FirstSibling, write = _set_FirstSibling};
  __property   BSTR            FullPath = {read = get_FullPath};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   Mscomctllib_xp::INodePtr LastSibling = {read = get_LastSibling, write = _set_LastSibling};
  __property   Mscomctllib_xp::INodePtr Next = {read = get_Next, write = _set_Next};
  __property   Mscomctllib_xp::INodePtr Parent = {read = get_Parent, write = _set_Parent};
  __property   Mscomctllib_xp::INodePtr Previous = {read = get_Previous, write = _set_Previous};
  __property   Mscomctllib_xp::INodePtr Root = {read = get_Root, write = _set_Root};
  __property   TOLEBOOL        Selected = {read = get_Selected, write = set_Selected};
  __property   TOLEBOOL        Sorted = {read = get_Sorted, write = set_Sorted};
  __property   BSTR            Text = {read = get_Text};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   TOLEBOOL        Bold = {read = get_Bold, write = set_Bold};
  __property   TOLEBOOL        Checked = {read = get_Checked, write = set_Checked};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
};
typedef TCOMINodeT<INode> TCOMINode;

// *********************************************************************//
// DispIntf:  INode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C74190B8-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class INodeDispT : public TAutoDriver<INode>
{
public:
  INodeDispT(){}

  INodeDispT(INode *pintf)
  {
    TAutoDriver<INode>::Bind(pintf, false);
  }

  INodeDispT(INodePtr pintf)
  {
    TAutoDriver<INode>::Bind(pintf, true);
  }

  INodeDispT& operator=(INode *pintf)
  {
    TAutoDriver<INode>::Bind(pintf, false);
    return *this;
  }

  INodeDispT& operator=(INodePtr pintf)
  {
    TAutoDriver<INode>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Node));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Node);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__ObjectDefault(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Child(Mscomctllib_xp::INode** ppChild/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_Child(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Child(Mscomctllib_xp::INode* ppChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Children(short* psChildren/*[out,retval]*/);
  short           __fastcall get_Children(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Children(short psChildren/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Expanded(VARIANT_BOOL* pbExpanded/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Expanded(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Expanded(VARIANT_BOOL pbExpanded/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExpandedImage(VARIANT* pExpandedImage/*[out,retval]*/);
  VARIANT         __fastcall get_ExpandedImage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ExpandedImage(VARIANT pExpandedImage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FirstSibling(Mscomctllib_xp::INode** ppFirstSibling/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_FirstSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_FirstSibling(Mscomctllib_xp::INode* ppFirstSibling/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullPath(BSTR* pbstrFullPath/*[out,retval]*/);
  BSTR            __fastcall get_FullPath(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FullPath(BSTR pbstrFullPath/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Image(VARIANT* pImage/*[out,retval]*/);
  VARIANT         __fastcall get_Image(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Image(VARIANT pImage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(short* psIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(short psIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LastSibling(Mscomctllib_xp::INode** ppLastSibling/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_LastSibling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_LastSibling(Mscomctllib_xp::INode* ppLastSibling/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Next(Mscomctllib_xp::INode** ppNext/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_Next(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Next(Mscomctllib_xp::INode* ppNext/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Mscomctllib_xp::INode** ppParent/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Parent(Mscomctllib_xp::INode* ppParent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Previous(Mscomctllib_xp::INode** ppPrevious/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_Previous(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Previous(Mscomctllib_xp::INode* ppPrevious/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Root(Mscomctllib_xp::INode** ppRoot/*[out,retval]*/);
  Mscomctllib_xp::INode* __fastcall get_Root(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Root(Mscomctllib_xp::INode* ppRoot/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Selected(VARIANT_BOOL pbSelected/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedImage(VARIANT* pSelectedImage/*[out,retval]*/);
  VARIANT         __fastcall get_SelectedImage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectedImage(VARIANT pSelectedImage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Sorted(VARIANT_BOOL* pbSorted/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Sorted(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Sorted(VARIANT_BOOL pbSorted/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* bstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR bstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pbVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateDragImage(IPictureDisp** ppDragImage/*[out,retval]*/);
  IPictureDisp*   __fastcall CreateDragImage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EnsureVisible(VARIANT_BOOL* pbEnsureVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall EnsureVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(::OLE_COLOR* pocBackColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(::OLE_COLOR pocBackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bold(VARIANT_BOOL* pbBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Bold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bold(VARIANT_BOOL pbBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checked(VARIANT_BOOL* pbChecked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Checked(VARIANT_BOOL pbChecked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(::OLE_COLOR* pocForeColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(::OLE_COLOR pocForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   Mscomctllib_xp::INode* Child = {read = get_Child, write = _set_Child};
  __property   short           Children = {read = get_Children, write = set_Children};
  __property   VARIANT_BOOL    Expanded = {read = get_Expanded, write = set_Expanded};
  __property   Mscomctllib_xp::INode* FirstSibling = {read = get_FirstSibling, write = _set_FirstSibling};
  __property   BSTR            FullPath = {read = get_FullPath};
  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   Mscomctllib_xp::INode* LastSibling = {read = get_LastSibling, write = _set_LastSibling};
  __property   Mscomctllib_xp::INode* Next = {read = get_Next, write = _set_Next};
  __property   Mscomctllib_xp::INode* Parent = {read = get_Parent, write = _set_Parent};
  __property   Mscomctllib_xp::INode* Previous = {read = get_Previous, write = _set_Previous};
  __property   Mscomctllib_xp::INode* Root = {read = get_Root, write = _set_Root};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   VARIANT_BOOL    Sorted = {read = get_Sorted, write = set_Sorted};
  __property   BSTR            Text = {read = get_Text};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
};
typedef INodeDispT<INode> INodeDisp;

// *********************************************************************//
// SmartIntf: TCOMIListView
// Interface: IListView
// *********************************************************************//
template <class T /* IListView */ >
class TCOMIListViewT : public TComInterface<IListView>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIListViewT() {}
  TCOMIListViewT(IListView *intf, bool addRef = false) : TComInterface<IListView>(intf, addRef) {}
  TCOMIListViewT(const TCOMIListViewT& src) : TComInterface<IListView>(src) {}
  TCOMIListViewT& operator=(const TCOMIListViewT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Arrange(Mscomctllib_xp::ListArrangeConstants* pArrange/*[out,retval]*/);
  Mscomctllib_xp::ListArrangeConstants __fastcall get_Arrange(void);
  HRESULT         __fastcall set_Arrange(Mscomctllib_xp::ListArrangeConstants pArrange/*[in]*/);
  HRESULT         __fastcall get_ColumnHeaders(Mscomctllib_xp::IColumnHeaders** ppIColumnHeaders/*[out,retval]*/);
  HRESULT         __fastcall get_ColumnHeaders(Mscomctllib_xp::IColumnHeadersPtr* ppIColumnHeaders/*[out,retval]*/);
  Mscomctllib_xp::IColumnHeadersPtr __fastcall get_ColumnHeaders(void);
  HRESULT         __fastcall set_ColumnHeaders(Mscomctllib_xp::IColumnHeaders* ppIColumnHeaders/*[in]*/);
  HRESULT         __fastcall set_ColumnHeaders(Mscomctllib_xp::IColumnHeadersPtr ppIColumnHeaders/*[in]*/);
  HRESULT         __fastcall get_DropHighlight(Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  HRESULT         __fastcall get_DropHighlight(Mscomctllib_xp::IListItemPtr* ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItemPtr __fastcall get_DropHighlight(void);
  HRESULT         __fastcall _set_DropHighlight(Mscomctllib_xp::IListItem* ppIListItem/*[in]*/);
  HRESULT         __fastcall _set_DropHighlight(Mscomctllib_xp::IListItemPtr ppIListItem/*[in]*/);
  HRESULT         __fastcall set_DropHighlight(VARIANT* ppIListItem/*[in]*/);
  HRESULT         __fastcall get_HideColumnHeaders(VARIANT_BOOL* pfHide/*[out,retval]*/);
  HRESULT         __fastcall get_HideColumnHeaders(TOLEBOOL* pfHide/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideColumnHeaders(void);
  HRESULT         __fastcall set_HideColumnHeaders(VARIANT_BOOL pfHide/*[in]*/);
  HRESULT         __fastcall set_HideColumnHeaders(TOLEBOOL pfHide/*[in]*/);
  HRESULT         __fastcall get_HideSelection(VARIANT_BOOL* pfHide/*[out,retval]*/);
  HRESULT         __fastcall get_HideSelection(TOLEBOOL* pfHide/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideSelection(void);
  HRESULT         __fastcall set_HideSelection(VARIANT_BOOL pfHide/*[in]*/);
  HRESULT         __fastcall set_HideSelection(TOLEBOOL pfHide/*[in]*/);
  HRESULT         __fastcall get_Icons(LPDISPATCH* ppIcons/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Icons(void);
  HRESULT         __fastcall _set_Icons(LPDISPATCH ppIcons/*[in]*/);
  HRESULT         __fastcall set_Icons(LPDISPATCH ppIcons/*[in]*/);
  HRESULT         __fastcall get_ListItems(Mscomctllib_xp::IListItems** ppListItems/*[out,retval]*/);
  HRESULT         __fastcall get_ListItems(Mscomctllib_xp::IListItemsPtr* ppListItems/*[out,retval]*/);
  Mscomctllib_xp::IListItemsPtr __fastcall get_ListItems(void);
  HRESULT         __fastcall set_ListItems(Mscomctllib_xp::IListItems* ppListItems/*[in]*/);
  HRESULT         __fastcall set_ListItems(Mscomctllib_xp::IListItemsPtr ppListItems/*[in]*/);
  HRESULT         __fastcall get_LabelEdit(Mscomctllib_xp::ListLabelEditConstants* pRet/*[out,retval]*/);
  Mscomctllib_xp::ListLabelEditConstants __fastcall get_LabelEdit(void);
  HRESULT         __fastcall set_LabelEdit(Mscomctllib_xp::ListLabelEditConstants pRet/*[in]*/);
  HRESULT         __fastcall get_LabelWrap(VARIANT_BOOL* pfOn/*[out,retval]*/);
  HRESULT         __fastcall get_LabelWrap(TOLEBOOL* pfOn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LabelWrap(void);
  HRESULT         __fastcall set_LabelWrap(VARIANT_BOOL pfOn/*[in]*/);
  HRESULT         __fastcall set_LabelWrap(TOLEBOOL pfOn/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* pnIndex/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants pnIndex/*[in]*/);
  HRESULT         __fastcall get_MultiSelect(VARIANT_BOOL* pfOn/*[out,retval]*/);
  HRESULT         __fastcall get_MultiSelect(TOLEBOOL* pfOn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MultiSelect(void);
  HRESULT         __fastcall set_MultiSelect(VARIANT_BOOL pfOn/*[in]*/);
  HRESULT         __fastcall set_MultiSelect(TOLEBOOL pfOn/*[in]*/);
  HRESULT         __fastcall get_SelectedItem(Mscomctllib_xp::IListItem** ppListItem/*[out,retval]*/);
  HRESULT         __fastcall get_SelectedItem(Mscomctllib_xp::IListItemPtr* ppListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItemPtr __fastcall get_SelectedItem(void);
  HRESULT         __fastcall _set_SelectedItem(Mscomctllib_xp::IListItem* ppListItem/*[in]*/);
  HRESULT         __fastcall _set_SelectedItem(Mscomctllib_xp::IListItemPtr ppListItem/*[in]*/);
  HRESULT         __fastcall set_SelectedItem(VARIANT* ppListItem/*[in]*/);
  HRESULT         __fastcall get_SmallIcons(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SmallIcons(void);
  HRESULT         __fastcall _set_SmallIcons(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall set_SmallIcons(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall get_Sorted(VARIANT_BOOL* pfOn/*[out,retval]*/);
  HRESULT         __fastcall get_Sorted(TOLEBOOL* pfOn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Sorted(void);
  HRESULT         __fastcall set_Sorted(VARIANT_BOOL pfOn/*[in]*/);
  HRESULT         __fastcall set_Sorted(TOLEBOOL pfOn/*[in]*/);
  HRESULT         __fastcall get_SortKey(short* psKey/*[out,retval]*/);
  short           __fastcall get_SortKey(void);
  HRESULT         __fastcall set_SortKey(short psKey/*[in]*/);
  HRESULT         __fastcall get_SortOrder(Mscomctllib_xp::ListSortOrderConstants* pOrder/*[out,retval]*/);
  Mscomctllib_xp::ListSortOrderConstants __fastcall get_SortOrder(void);
  HRESULT         __fastcall set_SortOrder(Mscomctllib_xp::ListSortOrderConstants pOrder/*[in]*/);
  HRESULT         __fastcall get_View(Mscomctllib_xp::ListViewConstants* pnView/*[out,retval]*/);
  Mscomctllib_xp::ListViewConstants __fastcall get_View(void);
  HRESULT         __fastcall set_View(Mscomctllib_xp::ListViewConstants pnView/*[in]*/);
  HRESULT         __fastcall get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDragConstants __fastcall get_OLEDragMode(void);
  HRESULT         __fastcall set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/);
  HRESULT         __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT         __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT         __fastcall get_Appearance(Mscomctllib_xp::AppearanceConstants* pnAppearance/*[out,retval]*/);
  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void);
  HRESULT         __fastcall set_Appearance(Mscomctllib_xp::AppearanceConstants pnAppearance/*[in]*/);
  HRESULT         __fastcall get_BackColor(::OLE_COLOR* pcrBack/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(::OLE_COLOR pcrBack/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* pnStyle/*[out,retval]*/);
  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(Mscomctllib_xp::BorderStyleConstants pnStyle/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pfEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pfEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pfEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pfEnabled/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** ppFontDisp/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall _set_Font(IFontDisp* ppFontDisp/*[in]*/);
  HRESULT         __fastcall get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(::OLE_COLOR pcrFore/*[in]*/);
  HRESULT         __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT         __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT         __fastcall FindItem(BSTR sz/*[in]*/, VARIANT* Where/*[in,opt]*/, 
                                      VARIANT* Index/*[in,opt]*/, VARIANT* fPartial/*[in,opt]*/, 
                                      Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall FindItem(BSTR sz/*[in]*/, 
                                                 VARIANT* Where/*[in,opt]*/= TNoParam(), 
                                                 VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                                 VARIANT* fPartial/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall GetFirstVisible(Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall GetFirstVisible(void);
  HRESULT         __fastcall HitTest(float x/*[in]*/, float y/*[in]*/, 
                                     Mscomctllib_xp::IListItem** ppListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall HitTest(float x/*[in]*/, float y/*[in]*/);
  HRESULT         __fastcall StartLabelEdit(void);
  HRESULT         __fastcall OLEDrag(void);
  void            __fastcall Refresh(void);
  void            __fastcall AboutBox(void);
  HRESULT         __fastcall get_AllowColumnReorder(VARIANT_BOOL* pfAllowColumnReorder/*[out,retval]*/);
  HRESULT         __fastcall get_AllowColumnReorder(TOLEBOOL* pfAllowColumnReorder/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowColumnReorder(void);
  HRESULT         __fastcall set_AllowColumnReorder(VARIANT_BOOL pfAllowColumnReorder/*[in]*/);
  HRESULT         __fastcall set_AllowColumnReorder(TOLEBOOL pfAllowColumnReorder/*[in]*/);
  HRESULT         __fastcall get_Checkboxes(VARIANT_BOOL* pfCheckboxes/*[out,retval]*/);
  HRESULT         __fastcall get_Checkboxes(TOLEBOOL* pfCheckboxes/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Checkboxes(void);
  HRESULT         __fastcall set_Checkboxes(VARIANT_BOOL pfCheckboxes/*[in]*/);
  HRESULT         __fastcall set_Checkboxes(TOLEBOOL pfCheckboxes/*[in]*/);
  HRESULT         __fastcall get_FlatScrollBar(VARIANT_BOOL* pfFlatScrollBar/*[out,retval]*/);
  HRESULT         __fastcall get_FlatScrollBar(TOLEBOOL* pfFlatScrollBar/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FlatScrollBar(void);
  HRESULT         __fastcall set_FlatScrollBar(VARIANT_BOOL pfFlatScrollBar/*[in]*/);
  HRESULT         __fastcall set_FlatScrollBar(TOLEBOOL pfFlatScrollBar/*[in]*/);
  HRESULT         __fastcall get_FullRowSelect(VARIANT_BOOL* pfFullRowSelect/*[out,retval]*/);
  HRESULT         __fastcall get_FullRowSelect(TOLEBOOL* pfFullRowSelect/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FullRowSelect(void);
  HRESULT         __fastcall set_FullRowSelect(VARIANT_BOOL pfFullRowSelect/*[in]*/);
  HRESULT         __fastcall set_FullRowSelect(TOLEBOOL pfFullRowSelect/*[in]*/);
  HRESULT         __fastcall get_GridLines(VARIANT_BOOL* pfGridLines/*[out,retval]*/);
  HRESULT         __fastcall get_GridLines(TOLEBOOL* pfGridLines/*[out,retval]*/);
  TOLEBOOL        __fastcall get_GridLines(void);
  HRESULT         __fastcall set_GridLines(VARIANT_BOOL pfGridLines/*[in]*/);
  HRESULT         __fastcall set_GridLines(TOLEBOOL pfGridLines/*[in]*/);
  HRESULT         __fastcall get_HotTracking(VARIANT_BOOL* pfHotTracking/*[out,retval]*/);
  HRESULT         __fastcall get_HotTracking(TOLEBOOL* pfHotTracking/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HotTracking(void);
  HRESULT         __fastcall set_HotTracking(VARIANT_BOOL pfHotTracking/*[in]*/);
  HRESULT         __fastcall set_HotTracking(TOLEBOOL pfHotTracking/*[in]*/);
  HRESULT         __fastcall get_HoverSelection(VARIANT_BOOL* pfHoverSelection/*[out,retval]*/);
  HRESULT         __fastcall get_HoverSelection(TOLEBOOL* pfHoverSelection/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HoverSelection(void);
  HRESULT         __fastcall set_HoverSelection(VARIANT_BOOL pfHoverSelection/*[in]*/);
  HRESULT         __fastcall set_HoverSelection(TOLEBOOL pfHoverSelection/*[in]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp** ppPictureDisp/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT         __fastcall set_Picture(IPictureDisp* ppPictureDisp/*[in]*/);
  HRESULT         __fastcall _set_Picture(IPictureDisp* ppPictureDisp/*[in]*/);
  HRESULT         __fastcall get_PictureAlignment(Mscomctllib_xp::ListPictureAlignmentConstants* psAlignment/*[out,retval]*/);
  Mscomctllib_xp::ListPictureAlignmentConstants __fastcall get_PictureAlignment(void);
  HRESULT         __fastcall set_PictureAlignment(Mscomctllib_xp::ListPictureAlignmentConstants psAlignment/*[in]*/);
  HRESULT         __fastcall get_ColumnHeaderIcons(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ColumnHeaderIcons(void);
  HRESULT         __fastcall _set_ColumnHeaderIcons(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall set_ColumnHeaderIcons(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall get_TextBackground(Mscomctllib_xp::ListTextBackgroundConstants* penumTextBackground/*[out,retval]*/);
  Mscomctllib_xp::ListTextBackgroundConstants __fastcall get_TextBackground(void);
  HRESULT         __fastcall set_TextBackground(Mscomctllib_xp::ListTextBackgroundConstants penumTextBackground/*[in]*/);

  __property   Mscomctllib_xp::ListArrangeConstants Arrange = {read = get_Arrange, write = set_Arrange};
  __property   Mscomctllib_xp::IColumnHeadersPtr ColumnHeaders = {read = get_ColumnHeaders, write = set_ColumnHeaders};
  __property   Mscomctllib_xp::IListItemPtr DropHighlight = {read = get_DropHighlight, write = _set_DropHighlight};
  __property   TOLEBOOL        HideColumnHeaders = {read = get_HideColumnHeaders, write = set_HideColumnHeaders};
  __property   TOLEBOOL        HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   LPDISPATCH      Icons = {read = get_Icons, write = set_Icons};
  __property   Mscomctllib_xp::IListItemsPtr ListItems = {read = get_ListItems, write = set_ListItems};
  __property   Mscomctllib_xp::ListLabelEditConstants LabelEdit = {read = get_LabelEdit, write = set_LabelEdit};
  __property   TOLEBOOL        LabelWrap = {read = get_LabelWrap, write = set_LabelWrap};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   TOLEBOOL        MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Mscomctllib_xp::IListItemPtr SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   LPDISPATCH      SmallIcons = {read = get_SmallIcons, write = set_SmallIcons};
  __property   TOLEBOOL        Sorted = {read = get_Sorted, write = set_Sorted};
  __property   short           SortKey = {read = get_SortKey, write = set_SortKey};
  __property   Mscomctllib_xp::ListSortOrderConstants SortOrder = {read = get_SortOrder, write = set_SortOrder};
  __property   Mscomctllib_xp::ListViewConstants View = {read = get_View, write = set_View};
  __property   Mscomctllib_xp::OLEDragConstants OLEDragMode = {read = get_OLEDragMode, write = set_OLEDragMode};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   TOLEBOOL        AllowColumnReorder = {read = get_AllowColumnReorder, write = set_AllowColumnReorder};
  __property   TOLEBOOL        Checkboxes = {read = get_Checkboxes, write = set_Checkboxes};
  __property   TOLEBOOL        FlatScrollBar = {read = get_FlatScrollBar, write = set_FlatScrollBar};
  __property   TOLEBOOL        FullRowSelect = {read = get_FullRowSelect, write = set_FullRowSelect};
  __property   TOLEBOOL        GridLines = {read = get_GridLines, write = set_GridLines};
  __property   TOLEBOOL        HotTracking = {read = get_HotTracking, write = set_HotTracking};
  __property   TOLEBOOL        HoverSelection = {read = get_HoverSelection, write = set_HoverSelection};
  __property   IPictureDisp*   Picture = {read = get_Picture};
  __property   Mscomctllib_xp::ListPictureAlignmentConstants PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   LPDISPATCH      ColumnHeaderIcons = {read = get_ColumnHeaderIcons, write = set_ColumnHeaderIcons};
  __property   Mscomctllib_xp::ListTextBackgroundConstants TextBackground = {read = get_TextBackground, write = set_TextBackground};
};
typedef TCOMIListViewT<IListView> TCOMIListView;

// *********************************************************************//
// DispIntf:  IListView
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F049-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IListViewDispT : public TAutoDriver<IListView>
{
public:
  IListViewDispT(){}

  IListViewDispT(IListView *pintf)
  {
    TAutoDriver<IListView>::Bind(pintf, false);
  }

  IListViewDispT(IListViewPtr pintf)
  {
    TAutoDriver<IListView>::Bind(pintf, true);
  }

  IListViewDispT& operator=(IListView *pintf)
  {
    TAutoDriver<IListView>::Bind(pintf, false);
    return *this;
  }

  IListViewDispT& operator=(IListViewPtr pintf)
  {
    TAutoDriver<IListView>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListView));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListView);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Arrange(Mscomctllib_xp::ListArrangeConstants* pArrange/*[out,retval]*/);
  Mscomctllib_xp::ListArrangeConstants __fastcall get_Arrange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Arrange(Mscomctllib_xp::ListArrangeConstants pArrange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHeaders(Mscomctllib_xp::IColumnHeaders** ppIColumnHeaders/*[out,retval]*/);
  Mscomctllib_xp::IColumnHeaders* __fastcall get_ColumnHeaders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHeaders(Mscomctllib_xp::IColumnHeaders* ppIColumnHeaders/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropHighlight(Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall get_DropHighlight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_DropHighlight(Mscomctllib_xp::IListItem* ppIListItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DropHighlight(VARIANT* ppIListItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideColumnHeaders(VARIANT_BOOL* pfHide/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideColumnHeaders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideColumnHeaders(VARIANT_BOOL pfHide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideSelection(VARIANT_BOOL* pfHide/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HideSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideSelection(VARIANT_BOOL pfHide/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Icons(LPDISPATCH* ppIcons/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Icons(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Icons(LPDISPATCH ppIcons/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Icons(LPDISPATCH ppIcons/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListItems(Mscomctllib_xp::IListItems** ppListItems/*[out,retval]*/);
  Mscomctllib_xp::IListItems* __fastcall get_ListItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListItems(Mscomctllib_xp::IListItems* ppListItems/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelEdit(Mscomctllib_xp::ListLabelEditConstants* pRet/*[out,retval]*/);
  Mscomctllib_xp::ListLabelEditConstants __fastcall get_LabelEdit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelEdit(Mscomctllib_xp::ListLabelEditConstants pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelWrap(VARIANT_BOOL* pfOn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_LabelWrap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelWrap(VARIANT_BOOL pfOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* pnIndex/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants pnIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiSelect(VARIANT_BOOL* pfOn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MultiSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiSelect(VARIANT_BOOL pfOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedItem(Mscomctllib_xp::IListItem** ppListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall get_SelectedItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_SelectedItem(Mscomctllib_xp::IListItem* ppListItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectedItem(VARIANT* ppListItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SmallIcons(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_SmallIcons(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_SmallIcons(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SmallIcons(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Sorted(VARIANT_BOOL* pfOn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Sorted(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Sorted(VARIANT_BOOL pfOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SortKey(short* psKey/*[out,retval]*/);
  short           __fastcall get_SortKey(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SortKey(short psKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SortOrder(Mscomctllib_xp::ListSortOrderConstants* pOrder/*[out,retval]*/);
  Mscomctllib_xp::ListSortOrderConstants __fastcall get_SortOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SortOrder(Mscomctllib_xp::ListSortOrderConstants pOrder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Mscomctllib_xp::ListViewConstants* pnView/*[out,retval]*/);
  Mscomctllib_xp::ListViewConstants __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_View(Mscomctllib_xp::ListViewConstants pnView/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDragConstants __fastcall get_OLEDragMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Appearance(Mscomctllib_xp::AppearanceConstants* pnAppearance/*[out,retval]*/);
  Mscomctllib_xp::AppearanceConstants __fastcall get_Appearance(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Appearance(Mscomctllib_xp::AppearanceConstants pnAppearance/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(::OLE_COLOR* pcrBack/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(::OLE_COLOR pcrBack/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* pnStyle/*[out,retval]*/);
  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Mscomctllib_xp::BorderStyleConstants pnStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pfEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp** ppFontDisp/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp* ppFontDisp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(::OLE_COLOR pcrFore/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindItem(BSTR sz/*[in]*/, VARIANT* Where/*[in,opt]*/, 
                                                 VARIANT* Index/*[in,opt]*/, 
                                                 VARIANT* fPartial/*[in,opt]*/, 
                                                 Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall FindItem(BSTR sz/*[in]*/, 
                                                 VARIANT* Where/*[in,opt]*/= TNoParam(), 
                                                 VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                                 VARIANT* fPartial/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetFirstVisible(Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall GetFirstVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall HitTest(float x/*[in]*/, float y/*[in]*/, 
                                                Mscomctllib_xp::IListItem** ppListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall HitTest(float x/*[in]*/, float y/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall StartLabelEdit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OLEDrag();
  void /*[VT_VOID:0]*/ __fastcall Refresh();
  void /*[VT_VOID:0]*/ __fastcall AboutBox();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowColumnReorder(VARIANT_BOOL* pfAllowColumnReorder/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowColumnReorder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowColumnReorder(VARIANT_BOOL pfAllowColumnReorder/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checkboxes(VARIANT_BOOL* pfCheckboxes/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checkboxes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Checkboxes(VARIANT_BOOL pfCheckboxes/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FlatScrollBar(VARIANT_BOOL* pfFlatScrollBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FlatScrollBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FlatScrollBar(VARIANT_BOOL pfFlatScrollBar/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullRowSelect(VARIANT_BOOL* pfFullRowSelect/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FullRowSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FullRowSelect(VARIANT_BOOL pfFullRowSelect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridLines(VARIANT_BOOL* pfGridLines/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GridLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridLines(VARIANT_BOOL pfGridLines/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HotTracking(VARIANT_BOOL* pfHotTracking/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HotTracking(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HotTracking(VARIANT_BOOL pfHotTracking/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HoverSelection(VARIANT_BOOL* pfHoverSelection/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HoverSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HoverSelection(VARIANT_BOOL pfHoverSelection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp** ppPictureDisp/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(IPictureDisp* ppPictureDisp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp* ppPictureDisp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureAlignment(Mscomctllib_xp::ListPictureAlignmentConstants* psAlignment/*[out,retval]*/);
  Mscomctllib_xp::ListPictureAlignmentConstants __fastcall get_PictureAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureAlignment(Mscomctllib_xp::ListPictureAlignmentConstants psAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHeaderIcons(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ColumnHeaderIcons(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ColumnHeaderIcons(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHeaderIcons(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextBackground(Mscomctllib_xp::ListTextBackgroundConstants* penumTextBackground/*[out,retval]*/);
  Mscomctllib_xp::ListTextBackgroundConstants __fastcall get_TextBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextBackground(Mscomctllib_xp::ListTextBackgroundConstants penumTextBackground/*[in]*/);

  __property   Mscomctllib_xp::ListArrangeConstants Arrange = {read = get_Arrange, write = set_Arrange};
  __property   Mscomctllib_xp::IColumnHeaders* ColumnHeaders = {read = get_ColumnHeaders, write = set_ColumnHeaders};
  __property   Mscomctllib_xp::IListItem* DropHighlight = {read = get_DropHighlight, write = _set_DropHighlight};
  __property   VARIANT_BOOL    HideColumnHeaders = {read = get_HideColumnHeaders, write = set_HideColumnHeaders};
  __property   VARIANT_BOOL    HideSelection = {read = get_HideSelection, write = set_HideSelection};
  __property   LPDISPATCH      Icons = {read = get_Icons, write = set_Icons};
  __property   Mscomctllib_xp::IListItems* ListItems = {read = get_ListItems, write = set_ListItems};
  __property   Mscomctllib_xp::ListLabelEditConstants LabelEdit = {read = get_LabelEdit, write = set_LabelEdit};
  __property   VARIANT_BOOL    LabelWrap = {read = get_LabelWrap, write = set_LabelWrap};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   Mscomctllib_xp::IListItem* SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   LPDISPATCH      SmallIcons = {read = get_SmallIcons, write = set_SmallIcons};
  __property   VARIANT_BOOL    Sorted = {read = get_Sorted, write = set_Sorted};
  __property   short           SortKey = {read = get_SortKey, write = set_SortKey};
  __property   Mscomctllib_xp::ListSortOrderConstants SortOrder = {read = get_SortOrder, write = set_SortOrder};
  __property   Mscomctllib_xp::ListViewConstants View = {read = get_View, write = set_View};
  __property   Mscomctllib_xp::OLEDragConstants OLEDragMode = {read = get_OLEDragMode, write = set_OLEDragMode};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = _set_Font};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   VARIANT_BOOL    AllowColumnReorder = {read = get_AllowColumnReorder, write = set_AllowColumnReorder};
  __property   VARIANT_BOOL    Checkboxes = {read = get_Checkboxes, write = set_Checkboxes};
  __property   VARIANT_BOOL    FlatScrollBar = {read = get_FlatScrollBar, write = set_FlatScrollBar};
  __property   VARIANT_BOOL    FullRowSelect = {read = get_FullRowSelect, write = set_FullRowSelect};
  __property   VARIANT_BOOL    GridLines = {read = get_GridLines, write = set_GridLines};
  __property   VARIANT_BOOL    HotTracking = {read = get_HotTracking, write = set_HotTracking};
  __property   VARIANT_BOOL    HoverSelection = {read = get_HoverSelection, write = set_HoverSelection};
  __property   IPictureDisp*   Picture = {read = get_Picture, write = set_Picture};
  __property   Mscomctllib_xp::ListPictureAlignmentConstants PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   LPDISPATCH      ColumnHeaderIcons = {read = get_ColumnHeaderIcons, write = set_ColumnHeaderIcons};
  __property   Mscomctllib_xp::ListTextBackgroundConstants TextBackground = {read = get_TextBackground, write = set_TextBackground};
};
typedef IListViewDispT<IListView> IListViewDisp;

// *********************************************************************//
// DispIntf:  ListViewEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {BDD1F04A-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T>
class ListViewEventsDispT : public TAutoDriver<ListViewEvents>
{
public:
  ListViewEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall BeforeLabelEdit(short* Cancel);
  void /*[VT_VOID:0]*/ __fastcall AfterLabelEdit(short* Cancel, BSTR* NewString);
  void /*[VT_VOID:0]*/ __fastcall ColumnClick(Mscomctllib_xp::ColumnHeader* ColumnHeader);
  void /*[VT_VOID:0]*/ __fastcall ItemClick(Mscomctllib_xp::ListItem* Item);
  void /*[VT_VOID:0]*/ __fastcall KeyDown(short* KeyCode, short Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(short* KeyCode, short Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(short* KeyAscii);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall DblClick();
  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall ItemCheck(Mscomctllib_xp::ListItem* Item);

};
typedef ListViewEventsDispT<ListViewEvents> ListViewEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIListItems
// Interface: IListItems
// *********************************************************************//
template <class T /* IListItems */ >
class TCOMIListItemsT : public TComInterface<IListItems>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIListItemsT() {}
  TCOMIListItemsT(IListItems *intf, bool addRef = false) : TComInterface<IListItems>(intf, addRef) {}
  TCOMIListItemsT(const TCOMIListItemsT& src) : TComInterface<IListItems>(src) {}
  TCOMIListItemsT& operator=(const TCOMIListItemsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(long plCount/*[in]*/);
  HRESULT         __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                 VARIANT* Text/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                                 VARIANT* SmallIcon/*[in,opt]*/, 
                                 Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Icon/*[in,opt]*/= TNoParam(), 
                                            VARIANT* SmallIcon/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppNewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef TCOMIListItemsT<IListItems> TCOMIListItems;

// *********************************************************************//
// DispIntf:  IListItems
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F04C-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IListItemsDispT : public TAutoDriver<IListItems>
{
public:
  IListItemsDispT(){}

  IListItemsDispT(IListItems *pintf)
  {
    TAutoDriver<IListItems>::Bind(pintf, false);
  }

  IListItemsDispT(IListItemsPtr pintf)
  {
    TAutoDriver<IListItems>::Bind(pintf, true);
  }

  IListItemsDispT& operator=(IListItems *pintf)
  {
    TAutoDriver<IListItems>::Bind(pintf, false);
    return *this;
  }

  IListItemsDispT& operator=(IListItemsPtr pintf)
  {
    TAutoDriver<IListItems>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListItems));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListItems);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(long plCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                            VARIANT* Text/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                                            VARIANT* SmallIcon/*[in,opt]*/, 
                                            Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                            VARIANT* Icon/*[in,opt]*/= TNoParam(), 
                                            VARIANT* SmallIcon/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/);
  Mscomctllib_xp::IListItem* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppNewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef IListItemsDispT<IListItems> IListItemsDisp;

// *********************************************************************//
// SmartIntf: TCOMIListItem
// Interface: IListItem
// *********************************************************************//
template <class T /* IListItem */ >
class TCOMIListItemT : public TComInterface<IListItem>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIListItemT() {}
  TCOMIListItemT(IListItem *intf, bool addRef = false) : TComInterface<IListItem>(intf, addRef) {}
  TCOMIListItemT(const TCOMIListItemT& src) : TComInterface<IListItem>(src) {}
  TCOMIListItemT& operator=(const TCOMIListItemT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Default(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Default(void);
  HRESULT         __fastcall set_Default(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_Ghosted(VARIANT_BOOL* pfOn/*[out,retval]*/);
  HRESULT         __fastcall get_Ghosted(TOLEBOOL* pfOn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Ghosted(void);
  HRESULT         __fastcall set_Ghosted(VARIANT_BOOL pfOn/*[in]*/);
  HRESULT         __fastcall set_Ghosted(TOLEBOOL pfOn/*[in]*/);
  HRESULT         __fastcall get_Height(float* pflHeight/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(float pflHeight/*[in]*/);
  HRESULT         __fastcall get_Icon(VARIANT* pnIndex/*[out,retval]*/);
  VARIANT         __fastcall get_Icon(void);
  HRESULT         __fastcall set_Icon(VARIANT pnIndex/*[in]*/);
  HRESULT         __fastcall get_Index(long* plIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT         __fastcall set_Index(long plIndex/*[in]*/);
  HRESULT         __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT         __fastcall get_Left(float* pflLeft/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(float pflLeft/*[in]*/);
  HRESULT         __fastcall get_Selected(VARIANT_BOOL* pfOn/*[out,retval]*/);
  HRESULT         __fastcall get_Selected(TOLEBOOL* pfOn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Selected(void);
  HRESULT         __fastcall set_Selected(VARIANT_BOOL pfOn/*[in]*/);
  HRESULT         __fastcall set_Selected(TOLEBOOL pfOn/*[in]*/);
  HRESULT         __fastcall get_SmallIcon(VARIANT* pnIndex/*[out,retval]*/);
  VARIANT         __fastcall get_SmallIcon(void);
  HRESULT         __fastcall set_SmallIcon(VARIANT pnIndex/*[in]*/);
  HRESULT         __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_Top(float* pflTop/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(float pflTop/*[in]*/);
  HRESULT         __fastcall get_Width(float* pflWidth/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(float pflWidth/*[in]*/);
  HRESULT         __fastcall get_SubItems(short Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/);
  BSTR            __fastcall get_SubItems(short Index/*[in]*/);
  HRESULT         __fastcall set_SubItems(short Index/*[in]*/, BSTR pbstrItem/*[in]*/);
  HRESULT         __fastcall CreateDragImage(IPictureDisp** ppImage/*[out,retval]*/);
  IPictureDisp*   __fastcall CreateDragImage(void);
  HRESULT         __fastcall EnsureVisible(VARIANT_BOOL* pfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall EnsureVisible(void);
  HRESULT         __fastcall _set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_ListSubItems(Mscomctllib_xp::IListSubItems** ppSubItems/*[out,retval]*/);
  HRESULT         __fastcall get_ListSubItems(Mscomctllib_xp::IListSubItemsPtr* ppSubItems/*[out,retval]*/);
  Mscomctllib_xp::IListSubItemsPtr __fastcall get_ListSubItems(void);
  HRESULT         __fastcall set_ListSubItems(Mscomctllib_xp::IListSubItems* ppSubItems/*[in]*/);
  HRESULT         __fastcall set_ListSubItems(Mscomctllib_xp::IListSubItemsPtr ppSubItems/*[in]*/);
  HRESULT         __fastcall get_Checked(VARIANT_BOOL* pfChecked/*[out,retval]*/);
  HRESULT         __fastcall get_Checked(TOLEBOOL* pfChecked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Checked(void);
  HRESULT         __fastcall set_Checked(VARIANT_BOOL pfChecked/*[in]*/);
  HRESULT         __fastcall set_Checked(TOLEBOOL pfChecked/*[in]*/);
  HRESULT         __fastcall get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(::OLE_COLOR pcrFore/*[in]*/);
  HRESULT         __fastcall get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/);
  BSTR            __fastcall get_ToolTipText(void);
  HRESULT         __fastcall set_ToolTipText(BSTR pbstrToolTipText/*[in]*/);
  HRESULT         __fastcall get_Bold(VARIANT_BOOL* pfBold/*[out,retval]*/);
  HRESULT         __fastcall get_Bold(TOLEBOOL* pfBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Bold(void);
  HRESULT         __fastcall set_Bold(VARIANT_BOOL pfBold/*[in]*/);
  HRESULT         __fastcall set_Bold(TOLEBOOL pfBold/*[in]*/);

  __property   BSTR            Default = {read = get_Default};
  __property   BSTR            Text = {read = get_Text};
  __property   TOLEBOOL        Ghosted = {read = get_Ghosted, write = set_Ghosted};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   TOLEBOOL        Selected = {read = get_Selected, write = set_Selected};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   Mscomctllib_xp::IListSubItemsPtr ListSubItems = {read = get_ListSubItems, write = set_ListSubItems};
  __property   TOLEBOOL        Checked = {read = get_Checked, write = set_Checked};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   TOLEBOOL        Bold = {read = get_Bold, write = set_Bold};
};
typedef TCOMIListItemT<IListItem> TCOMIListItem;

// *********************************************************************//
// DispIntf:  IListItem
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F04E-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IListItemDispT : public TAutoDriver<IListItem>
{
public:
  IListItemDispT(){}

  IListItemDispT(IListItem *pintf)
  {
    TAutoDriver<IListItem>::Bind(pintf, false);
  }

  IListItemDispT(IListItemPtr pintf)
  {
    TAutoDriver<IListItem>::Bind(pintf, true);
  }

  IListItemDispT& operator=(IListItem *pintf)
  {
    TAutoDriver<IListItem>::Bind(pintf, false);
    return *this;
  }

  IListItemDispT& operator=(IListItemPtr pintf)
  {
    TAutoDriver<IListItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListItem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListItem);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Default(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Default(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Default(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Ghosted(VARIANT_BOOL* pfOn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Ghosted(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Ghosted(VARIANT_BOOL pfOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* pflHeight/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float pflHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Icon(VARIANT* pnIndex/*[out,retval]*/);
  VARIANT         __fastcall get_Icon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Icon(VARIANT pnIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* plIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(long plIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* pflLeft/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float pflLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(VARIANT_BOOL* pfOn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Selected(VARIANT_BOOL pfOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SmallIcon(VARIANT* pnIndex/*[out,retval]*/);
  VARIANT         __fastcall get_SmallIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SmallIcon(VARIANT pnIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* pflTop/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float pflTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* pflWidth/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float pflWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubItems(short Index/*[in]*/, 
                                                     BSTR* pbstrItem/*[out,retval]*/);
  BSTR            __fastcall get_SubItems(short Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubItems(short Index/*[in]*/, BSTR pbstrItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateDragImage(IPictureDisp** ppImage/*[out,retval]*/);
  IPictureDisp*   __fastcall CreateDragImage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EnsureVisible(VARIANT_BOOL* pfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall EnsureVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListSubItems(Mscomctllib_xp::IListSubItems** ppSubItems/*[out,retval]*/);
  Mscomctllib_xp::IListSubItems* __fastcall get_ListSubItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListSubItems(Mscomctllib_xp::IListSubItems* ppSubItems/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checked(VARIANT_BOOL* pfChecked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Checked(VARIANT_BOOL pfChecked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(::OLE_COLOR pcrFore/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/);
  BSTR            __fastcall get_ToolTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToolTipText(BSTR pbstrToolTipText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bold(VARIANT_BOOL* pfBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Bold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bold(VARIANT_BOOL pfBold/*[in]*/);

  __property   BSTR            Default = {read = get_Default};
  __property   BSTR            Text = {read = get_Text};
  __property   VARIANT_BOOL    Ghosted = {read = get_Ghosted, write = set_Ghosted};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   Mscomctllib_xp::IListSubItems* ListSubItems = {read = get_ListSubItems, write = set_ListSubItems};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
};
typedef IListItemDispT<IListItem> IListItemDisp;

// *********************************************************************//
// SmartIntf: TCOMIColumnHeaders
// Interface: IColumnHeaders
// *********************************************************************//
template <class T /* IColumnHeaders */ >
class TCOMIColumnHeadersT : public TComInterface<IColumnHeaders>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIColumnHeadersT() {}
  TCOMIColumnHeadersT(IColumnHeaders *intf, bool addRef = false) : TComInterface<IColumnHeaders>(intf, addRef) {}
  TCOMIColumnHeadersT(const TCOMIColumnHeadersT& src) : TComInterface<IColumnHeaders>(src) {}
  TCOMIColumnHeadersT& operator=(const TCOMIColumnHeadersT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(long plCount/*[in]*/);
  HRESULT         __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/);
  Mscomctllib_xp::IColumnHeader* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall Add_PreVB98(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                         VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                                         VARIANT* Alignment/*[in,opt]*/, 
                                         Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/);
  Mscomctllib_xp::IColumnHeader* __fastcall Add_PreVB98(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Width/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Alignment/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/);
  Mscomctllib_xp::IColumnHeader* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppUnknown/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                 VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                                 VARIANT* Alignment/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                                 Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/);
  Mscomctllib_xp::IColumnHeader* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Width/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Alignment/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Icon/*[in,opt]*/= TNoParam());

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef TCOMIColumnHeadersT<IColumnHeaders> TCOMIColumnHeaders;

// *********************************************************************//
// DispIntf:  IColumnHeaders
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F050-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IColumnHeadersDispT : public TAutoDriver<IColumnHeaders>
{
public:
  IColumnHeadersDispT(){}

  IColumnHeadersDispT(IColumnHeaders *pintf)
  {
    TAutoDriver<IColumnHeaders>::Bind(pintf, false);
  }

  IColumnHeadersDispT(IColumnHeadersPtr pintf)
  {
    TAutoDriver<IColumnHeaders>::Bind(pintf, true);
  }

  IColumnHeadersDispT& operator=(IColumnHeaders *pintf)
  {
    TAutoDriver<IColumnHeaders>::Bind(pintf, false);
    return *this;
  }

  IColumnHeadersDispT& operator=(IColumnHeadersPtr pintf)
  {
    TAutoDriver<IColumnHeaders>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ColumnHeaders));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ColumnHeaders);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(long plCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/);
  Mscomctllib_xp::IColumnHeader* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add_PreVB98(VARIANT* Index/*[in,opt]*/, 
                                                    VARIANT* Key/*[in,opt]*/, 
                                                    VARIANT* Text/*[in,opt]*/, 
                                                    VARIANT* Width/*[in,opt]*/, 
                                                    VARIANT* Alignment/*[in,opt]*/, 
                                                    Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/);
  Mscomctllib_xp::IColumnHeader* __fastcall Add_PreVB98(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Width/*[in,opt]*/= TNoParam(), 
                                                        VARIANT* Alignment/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/);
  Mscomctllib_xp::IColumnHeader* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppUnknown/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                            VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                                            VARIANT* Alignment/*[in,opt]*/, 
                                            VARIANT* Icon/*[in,opt]*/, 
                                            Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/);
  Mscomctllib_xp::IColumnHeader* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Width/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Alignment/*[in,opt]*/= TNoParam(), 
                                                VARIANT* Icon/*[in,opt]*/= TNoParam());

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef IColumnHeadersDispT<IColumnHeaders> IColumnHeadersDisp;

// *********************************************************************//
// SmartIntf: TCOMIColumnHeader
// Interface: IColumnHeader
// *********************************************************************//
template <class T /* IColumnHeader */ >
class TCOMIColumnHeaderT : public TComInterface<IColumnHeader>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIColumnHeaderT() {}
  TCOMIColumnHeaderT(IColumnHeader *intf, bool addRef = false) : TComInterface<IColumnHeader>(intf, addRef) {}
  TCOMIColumnHeaderT(const TCOMIColumnHeaderT& src) : TComInterface<IColumnHeader>(src) {}
  TCOMIColumnHeaderT& operator=(const TCOMIColumnHeaderT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Default(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Default(void);
  HRESULT         __fastcall set_Default(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_Alignment(Mscomctllib_xp::ListColumnAlignmentConstants* pnAlignment/*[out,retval]*/);
  Mscomctllib_xp::ListColumnAlignmentConstants __fastcall get_Alignment(void);
  HRESULT         __fastcall set_Alignment(Mscomctllib_xp::ListColumnAlignmentConstants pnAlignment/*[in]*/);
  HRESULT         __fastcall get_Index(long* plIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT         __fastcall set_Index(long plIndex/*[in]*/);
  HRESULT         __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT         __fastcall get_Left(float* pflLeft/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(float pflLeft/*[in]*/);
  HRESULT         __fastcall get_SubItemIndex(short* psIndex/*[out,retval]*/);
  short           __fastcall get_SubItemIndex(void);
  HRESULT         __fastcall set_SubItemIndex(short psIndex/*[in]*/);
  HRESULT         __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_Width(float* pflWidth/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(float pflWidth/*[in]*/);
  HRESULT         __fastcall _set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_Icon(VARIANT* pnIndex/*[out,retval]*/);
  VARIANT         __fastcall get_Icon(void);
  HRESULT         __fastcall set_Icon(VARIANT pnIndex/*[in]*/);
  HRESULT         __fastcall get_Position(short* piPosition/*[out,retval]*/);
  short           __fastcall get_Position(void);
  HRESULT         __fastcall set_Position(short piPosition/*[in]*/);

  __property   BSTR            Default = {read = get_Default};
  __property   BSTR            Text = {read = get_Text};
  __property   Mscomctllib_xp::ListColumnAlignmentConstants Alignment = {read = get_Alignment, write = set_Alignment};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   short           SubItemIndex = {read = get_SubItemIndex, write = set_SubItemIndex};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   short           Position = {read = get_Position, write = set_Position};
};
typedef TCOMIColumnHeaderT<IColumnHeader> TCOMIColumnHeader;

// *********************************************************************//
// DispIntf:  IColumnHeader
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F051-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IColumnHeaderDispT : public TAutoDriver<IColumnHeader>
{
public:
  IColumnHeaderDispT(){}

  IColumnHeaderDispT(IColumnHeader *pintf)
  {
    TAutoDriver<IColumnHeader>::Bind(pintf, false);
  }

  IColumnHeaderDispT(IColumnHeaderPtr pintf)
  {
    TAutoDriver<IColumnHeader>::Bind(pintf, true);
  }

  IColumnHeaderDispT& operator=(IColumnHeader *pintf)
  {
    TAutoDriver<IColumnHeader>::Bind(pintf, false);
    return *this;
  }

  IColumnHeaderDispT& operator=(IColumnHeaderPtr pintf)
  {
    TAutoDriver<IColumnHeader>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ColumnHeader));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ColumnHeader);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Default(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Default(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Default(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Mscomctllib_xp::ListColumnAlignmentConstants* pnAlignment/*[out,retval]*/);
  Mscomctllib_xp::ListColumnAlignmentConstants __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Mscomctllib_xp::ListColumnAlignmentConstants pnAlignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* plIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(long plIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* pflLeft/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float pflLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubItemIndex(short* psIndex/*[out,retval]*/);
  short           __fastcall get_SubItemIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubItemIndex(short psIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* pflWidth/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float pflWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Icon(VARIANT* pnIndex/*[out,retval]*/);
  VARIANT         __fastcall get_Icon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Icon(VARIANT pnIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(short* piPosition/*[out,retval]*/);
  short           __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(short piPosition/*[in]*/);

  __property   BSTR            Default = {read = get_Default};
  __property   BSTR            Text = {read = get_Text};
  __property   Mscomctllib_xp::ListColumnAlignmentConstants Alignment = {read = get_Alignment, write = set_Alignment};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   short           SubItemIndex = {read = get_SubItemIndex, write = set_SubItemIndex};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   short           Position = {read = get_Position, write = set_Position};
};
typedef IColumnHeaderDispT<IColumnHeader> IColumnHeaderDisp;

// *********************************************************************//
// SmartIntf: TCOMIListSubItems
// Interface: IListSubItems
// *********************************************************************//
template <class T /* IListSubItems */ >
class TCOMIListSubItemsT : public TComInterface<IListSubItems>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIListSubItemsT() {}
  TCOMIListSubItemsT(IListSubItems *intf, bool addRef = false) : TComInterface<IListSubItems>(intf, addRef) {}
  TCOMIListSubItemsT(const TCOMIListSubItemsT& src) : TComInterface<IListSubItems>(src) {}
  TCOMIListSubItemsT& operator=(const TCOMIListSubItemsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(long plCount/*[in]*/);
  HRESULT         __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/);
  Mscomctllib_xp::IListSubItem* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                 VARIANT* Text/*[in,opt]*/, VARIANT* ReportIcon/*[in,opt]*/, 
                                 VARIANT* ToolTipText/*[in,opt]*/, 
                                 Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/);
  Mscomctllib_xp::IListSubItem* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                               VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                               VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                               VARIANT* ReportIcon/*[in,opt]*/= TNoParam(), 
                                               VARIANT* ToolTipText/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/);
  Mscomctllib_xp::IListSubItem* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppNewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef TCOMIListSubItemsT<IListSubItems> TCOMIListSubItems;

// *********************************************************************//
// DispIntf:  IListSubItems
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F053-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IListSubItemsDispT : public TAutoDriver<IListSubItems>
{
public:
  IListSubItemsDispT(){}

  IListSubItemsDispT(IListSubItems *pintf)
  {
    TAutoDriver<IListSubItems>::Bind(pintf, false);
  }

  IListSubItemsDispT(IListSubItemsPtr pintf)
  {
    TAutoDriver<IListSubItems>::Bind(pintf, true);
  }

  IListSubItemsDispT& operator=(IListSubItems *pintf)
  {
    TAutoDriver<IListSubItems>::Bind(pintf, false);
    return *this;
  }

  IListSubItemsDispT& operator=(IListSubItemsPtr pintf)
  {
    TAutoDriver<IListSubItems>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListSubItems));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListSubItems);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(long plCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/);
  Mscomctllib_xp::IListSubItem* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                            VARIANT* Text/*[in,opt]*/, 
                                            VARIANT* ReportIcon/*[in,opt]*/, 
                                            VARIANT* ToolTipText/*[in,opt]*/, 
                                            Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/);
  Mscomctllib_xp::IListSubItem* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                               VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                               VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                               VARIANT* ReportIcon/*[in,opt]*/= TNoParam(), 
                                               VARIANT* ToolTipText/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/);
  Mscomctllib_xp::IListSubItem* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppNewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef IListSubItemsDispT<IListSubItems> IListSubItemsDisp;

// *********************************************************************//
// SmartIntf: TCOMIListSubItem
// Interface: IListSubItem
// *********************************************************************//
template <class T /* IListSubItem */ >
class TCOMIListSubItemT : public TComInterface<IListSubItem>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIListSubItemT() {}
  TCOMIListSubItemT(IListSubItem *intf, bool addRef = false) : TComInterface<IListSubItem>(intf, addRef) {}
  TCOMIListSubItemT(const TCOMIListSubItemT& src) : TComInterface<IListSubItem>(src) {}
  TCOMIListSubItemT& operator=(const TCOMIListSubItemT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Default(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Default(void);
  HRESULT         __fastcall set_Default(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(::OLE_COLOR pcrFore/*[in]*/);
  HRESULT         __fastcall get_Bold(VARIANT_BOOL* pfBold/*[out,retval]*/);
  HRESULT         __fastcall get_Bold(TOLEBOOL* pfBold/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Bold(void);
  HRESULT         __fastcall set_Bold(VARIANT_BOOL pfBold/*[in]*/);
  HRESULT         __fastcall set_Bold(TOLEBOOL pfBold/*[in]*/);
  HRESULT         __fastcall get_ReportIcon(VARIANT* pnIndex/*[out,retval]*/);
  VARIANT         __fastcall get_ReportIcon(void);
  HRESULT         __fastcall set_ReportIcon(VARIANT pnIndex/*[in]*/);
  HRESULT         __fastcall get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/);
  BSTR            __fastcall get_ToolTipText(void);
  HRESULT         __fastcall set_ToolTipText(BSTR pbstrToolTipText/*[in]*/);
  HRESULT         __fastcall get_Index(long* plIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT         __fastcall set_Index(long plIndex/*[in]*/);
  HRESULT         __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT         __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   BSTR            Default = {read = get_Default};
  __property   BSTR            Text = {read = get_Text};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   TOLEBOOL        Bold = {read = get_Bold, write = set_Bold};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
};
typedef TCOMIListSubItemT<IListSubItem> TCOMIListSubItem;

// *********************************************************************//
// DispIntf:  IListSubItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F055-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IListSubItemDispT : public TAutoDriver<IListSubItem>
{
public:
  IListSubItemDispT(){}

  IListSubItemDispT(IListSubItem *pintf)
  {
    TAutoDriver<IListSubItem>::Bind(pintf, false);
  }

  IListSubItemDispT(IListSubItemPtr pintf)
  {
    TAutoDriver<IListSubItem>::Bind(pintf, true);
  }

  IListSubItemDispT& operator=(IListSubItem *pintf)
  {
    TAutoDriver<IListSubItem>::Bind(pintf, false);
    return *this;
  }

  IListSubItemDispT& operator=(IListSubItemPtr pintf)
  {
    TAutoDriver<IListSubItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListSubItem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListSubItem);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Default(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Default(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Default(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(::OLE_COLOR pcrFore/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bold(VARIANT_BOOL* pfBold/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Bold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bold(VARIANT_BOOL pfBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReportIcon(VARIANT* pnIndex/*[out,retval]*/);
  VARIANT         __fastcall get_ReportIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReportIcon(VARIANT pnIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/);
  BSTR            __fastcall get_ToolTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ToolTipText(BSTR pbstrToolTipText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* plIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(long plIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   BSTR            Default = {read = get_Default};
  __property   BSTR            Text = {read = get_Text};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   VARIANT_BOOL    Bold = {read = get_Bold, write = set_Bold};
  __property   BSTR            ToolTipText = {read = get_ToolTipText};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
};
typedef IListSubItemDispT<IListSubItem> IListSubItemDisp;

// *********************************************************************//
// SmartIntf: TCOMIImageList
// Interface: IImageList
// *********************************************************************//
template <class T /* IImageList */ >
class TCOMIImageListT : public TComInterface<IImageList>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIImageListT() {}
  TCOMIImageListT(IImageList *intf, bool addRef = false) : TComInterface<IImageList>(intf, addRef) {}
  TCOMIImageListT(const TCOMIImageListT& src) : TComInterface<IImageList>(src) {}
  TCOMIImageListT& operator=(const TCOMIImageListT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ImageHeight(short* psImageHeight/*[out,retval]*/);
  short           __fastcall get_ImageHeight(void);
  HRESULT         __fastcall set_ImageHeight(short psImageHeight/*[in]*/);
  HRESULT         __fastcall get_ImageWidth(short* psImageWidth/*[out,retval]*/);
  short           __fastcall get_ImageWidth(void);
  HRESULT         __fastcall set_ImageWidth(short psImageWidth/*[in]*/);
  HRESULT         __fastcall get_MaskColor(::OLE_COLOR* pclrMaskColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_MaskColor(void);
  HRESULT         __fastcall set_MaskColor(::OLE_COLOR pclrMaskColor/*[in]*/);
  HRESULT         __fastcall get_UseMaskColor(VARIANT_BOOL* pbState/*[out,retval]*/);
  HRESULT         __fastcall get_UseMaskColor(TOLEBOOL* pbState/*[out,retval]*/);
  TOLEBOOL        __fastcall get_UseMaskColor(void);
  HRESULT         __fastcall set_UseMaskColor(VARIANT_BOOL pbState/*[in]*/);
  HRESULT         __fastcall set_UseMaskColor(TOLEBOOL pbState/*[in]*/);
  HRESULT         __fastcall get_ListImages(Mscomctllib_xp::IImages** ppListImages/*[out,retval]*/);
  HRESULT         __fastcall get_ListImages(Mscomctllib_xp::IImagesPtr* ppListImages/*[out,retval]*/);
  Mscomctllib_xp::IImagesPtr __fastcall get_ListImages(void);
  HRESULT         __fastcall _set_ListImages(Mscomctllib_xp::IImages* ppListImages/*[in]*/);
  HRESULT         __fastcall _set_ListImages(Mscomctllib_xp::IImagesPtr ppListImages/*[in]*/);
  HRESULT         __fastcall get_hImageList(OLE_HANDLE* phImageList/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hImageList(void);
  HRESULT         __fastcall set_hImageList(OLE_HANDLE phImageList/*[in]*/);
  HRESULT         __fastcall get_BackColor(::OLE_COLOR* pclrBackColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(::OLE_COLOR pclrBackColor/*[in]*/);
  HRESULT         __fastcall Overlay(VARIANT* Key1/*[in]*/, VARIANT* Key2/*[in]*/, 
                                     IPictureDisp** ppPictureDisp/*[out,retval]*/);
  IPictureDisp*   __fastcall Overlay(VARIANT* Key1/*[in]*/, VARIANT* Key2/*[in]*/);
  HRESULT         __fastcall AboutBox(void);

  __property   short           ImageHeight = {read = get_ImageHeight, write = set_ImageHeight};
  __property   short           ImageWidth = {read = get_ImageWidth, write = set_ImageWidth};
  __property   ::OLE_COLOR     MaskColor = {read = get_MaskColor, write = set_MaskColor};
  __property   TOLEBOOL        UseMaskColor = {read = get_UseMaskColor, write = set_UseMaskColor};
  __property   Mscomctllib_xp::IImagesPtr ListImages = {read = get_ListImages, write = _set_ListImages};
  __property   OLE_HANDLE      hImageList = {read = get_hImageList, write = set_hImageList};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
};
typedef TCOMIImageListT<IImageList> TCOMIImageList;

// *********************************************************************//
// DispIntf:  IImageList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C247F21-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IImageListDispT : public TAutoDriver<IImageList>
{
public:
  IImageListDispT(){}

  IImageListDispT(IImageList *pintf)
  {
    TAutoDriver<IImageList>::Bind(pintf, false);
  }

  IImageListDispT(IImageListPtr pintf)
  {
    TAutoDriver<IImageList>::Bind(pintf, true);
  }

  IImageListDispT& operator=(IImageList *pintf)
  {
    TAutoDriver<IImageList>::Bind(pintf, false);
    return *this;
  }

  IImageListDispT& operator=(IImageListPtr pintf)
  {
    TAutoDriver<IImageList>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ImageList));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ImageList);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ImageHeight(short* psImageHeight/*[out,retval]*/);
  short           __fastcall get_ImageHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ImageHeight(short psImageHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ImageWidth(short* psImageWidth/*[out,retval]*/);
  short           __fastcall get_ImageWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ImageWidth(short psImageWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaskColor(::OLE_COLOR* pclrMaskColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_MaskColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaskColor(::OLE_COLOR pclrMaskColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UseMaskColor(VARIANT_BOOL* pbState/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UseMaskColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UseMaskColor(VARIANT_BOOL pbState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListImages(Mscomctllib_xp::IImages** ppListImages/*[out,retval]*/);
  Mscomctllib_xp::IImages* __fastcall get_ListImages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ListImages(Mscomctllib_xp::IImages* ppListImages/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hImageList(OLE_HANDLE* phImageList/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hImageList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_hImageList(OLE_HANDLE phImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(::OLE_COLOR* pclrBackColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(::OLE_COLOR pclrBackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Overlay(VARIANT* Key1/*[in]*/, VARIANT* Key2/*[in]*/, 
                                                IPictureDisp** ppPictureDisp/*[out,retval]*/);
  IPictureDisp*   __fastcall Overlay(VARIANT* Key1/*[in]*/, VARIANT* Key2/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AboutBox();

  __property   short           ImageHeight = {read = get_ImageHeight, write = set_ImageHeight};
  __property   short           ImageWidth = {read = get_ImageWidth, write = set_ImageWidth};
  __property   ::OLE_COLOR     MaskColor = {read = get_MaskColor, write = set_MaskColor};
  __property   VARIANT_BOOL    UseMaskColor = {read = get_UseMaskColor, write = set_UseMaskColor};
  __property   Mscomctllib_xp::IImages* ListImages = {read = get_ListImages, write = _set_ListImages};
  __property   OLE_HANDLE      hImageList = {read = get_hImageList, write = set_hImageList};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
};
typedef IImageListDispT<IImageList> IImageListDisp;

// *********************************************************************//
// DispIntf:  ImageListEvents
// Flags:     (4096) Dispatchable
// GUID:      {2C247F22-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T>
class ImageListEventsDispT : public TAutoDriver<ImageListEvents>
{
public:
  ImageListEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }


};
typedef ImageListEventsDispT<ImageListEvents> ImageListEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIImages
// Interface: IImages
// *********************************************************************//
template <class T /* IImages */ >
class TCOMIImagesT : public TComInterface<IImages>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIImagesT() {}
  TCOMIImagesT(IImages *intf, bool addRef = false) : TComInterface<IImages>(intf, addRef) {}
  TCOMIImagesT(const TCOMIImagesT& src) : TComInterface<IImages>(src) {}
  TCOMIImagesT& operator=(const TCOMIImagesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(short* psCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(short psCount/*[in]*/);
  HRESULT         __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                Mscomctllib_xp::IImage** ppListImage/*[out,retval]*/);
  Mscomctllib_xp::IImage* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IImage* ppListImage/*[in]*/);
  HRESULT         __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                 VARIANT* Picture/*[in,opt]*/, 
                                 Mscomctllib_xp::IImage** ppListImage/*[out,retval]*/);
  Mscomctllib_xp::IImage* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Picture/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IImage** Item/*[out,retval]*/);
  Mscomctllib_xp::IImage* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _set_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IImage* Item/*[in]*/);
  HRESULT         __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef TCOMIImagesT<IImages> TCOMIImages;

// *********************************************************************//
// DispIntf:  IImages
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C247F24-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IImagesDispT : public TAutoDriver<IImages>
{
public:
  IImagesDispT(){}

  IImagesDispT(IImages *pintf)
  {
    TAutoDriver<IImages>::Bind(pintf, false);
  }

  IImagesDispT(IImagesPtr pintf)
  {
    TAutoDriver<IImages>::Bind(pintf, true);
  }

  IImagesDispT& operator=(IImages *pintf)
  {
    TAutoDriver<IImages>::Bind(pintf, false);
    return *this;
  }

  IImagesDispT& operator=(IImagesPtr pintf)
  {
    TAutoDriver<IImages>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListImages));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListImages);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(short* psCount/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(short psCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlDefault(VARIANT* Index/*[in]*/, 
                                                           Mscomctllib_xp::IImage** ppListImage/*[out,retval]*/);
  Mscomctllib_xp::IImage* __fastcall get_ControlDefault(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ControlDefault(VARIANT* Index/*[in]*/, 
                                                            Mscomctllib_xp::IImage* ppListImage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                            VARIANT* Picture/*[in,opt]*/, 
                                            Mscomctllib_xp::IImage** ppListImage/*[out,retval]*/);
  Mscomctllib_xp::IImage* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                         VARIANT* Picture/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IImage** Item/*[out,retval]*/);
  Mscomctllib_xp::IImage* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Item(VARIANT* Index/*[in]*/, 
                                                  Mscomctllib_xp::IImage* Item/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   short           Count = {read = get_Count, write = set_Count};
};
typedef IImagesDispT<IImages> IImagesDisp;

// *********************************************************************//
// SmartIntf: TCOMIImage
// Interface: IImage
// *********************************************************************//
template <class T /* IImage */ >
class TCOMIImageT : public TComInterface<IImage>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIImageT() {}
  TCOMIImageT(IImage *intf, bool addRef = false) : TComInterface<IImage>(intf, addRef) {}
  TCOMIImageT(const TCOMIImageT& src) : TComInterface<IImage>(src) {}
  TCOMIImageT& operator=(const TCOMIImageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Index(short* psIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT         __fastcall set_Index(short psIndex/*[in]*/);
  HRESULT         __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT         __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_Picture(IPictureDisp** ppPictureDisp/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT         __fastcall _set_Picture(IPictureDisp* ppPictureDisp/*[in]*/);
  HRESULT         __fastcall Draw(OLE_HANDLE hDC/*[in]*/, VARIANT* x/*[in,opt]*/= TNoParam(), 
                                  VARIANT* y/*[in,opt]*/= TNoParam(), 
                                  VARIANT* Style/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall ExtractIcon(IPictureDisp** ppIconDisp/*[out,retval]*/);
  IPictureDisp*   __fastcall ExtractIcon(void);
  HRESULT         __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   IPictureDisp*   Picture = {read = get_Picture};
};
typedef TCOMIImageT<IImage> TCOMIImage;

// *********************************************************************//
// DispIntf:  IImage
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C247F26-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IImageDispT : public TAutoDriver<IImage>
{
public:
  IImageDispT(){}

  IImageDispT(IImage *pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, false);
  }

  IImageDispT(IImagePtr pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, true);
  }

  IImageDispT& operator=(IImage *pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, false);
    return *this;
  }

  IImageDispT& operator=(IImagePtr pintf)
  {
    TAutoDriver<IImage>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListImage));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListImage);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(short* psIndex/*[out,retval]*/);
  short           __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(short psIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(IPictureDisp** ppPictureDisp/*[out,retval]*/);
  IPictureDisp*   __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Picture(IPictureDisp* ppPictureDisp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Draw(OLE_HANDLE hDC/*[in]*/, 
                                             VARIANT* x/*[in,opt]*/= TNoParam(), 
                                             VARIANT* y/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Style/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ExtractIcon(IPictureDisp** ppIconDisp/*[out,retval]*/);
  IPictureDisp*   __fastcall ExtractIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Tag(VARIANT pvTag/*[in]*/);

  __property   short           Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   IPictureDisp*   Picture = {read = get_Picture, write = _set_Picture};
};
typedef IImageDispT<IImage> IImageDisp;

// *********************************************************************//
// SmartIntf: TCOMISlider
// Interface: ISlider
// *********************************************************************//
template <class T /* ISlider */ >
class TCOMISliderT : public TComInterface<ISlider>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISliderT() {}
  TCOMISliderT(ISlider *intf, bool addRef = false) : TComInterface<ISlider>(intf, addRef) {}
  TCOMISliderT(const TCOMISliderT& src) : TComInterface<ISlider>(src) {}
  TCOMISliderT& operator=(const TCOMISliderT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__Value(long* plValue/*[out,retval]*/);
  long            __fastcall get__Value(void);
  HRESULT         __fastcall set__Value(long plValue/*[in]*/);
  HRESULT         __fastcall get_LargeChange(long* plLargeChange/*[out,retval]*/);
  long            __fastcall get_LargeChange(void);
  HRESULT         __fastcall set_LargeChange(long plLargeChange/*[in]*/);
  HRESULT         __fastcall get_SmallChange(long* plSmallChange/*[out,retval]*/);
  long            __fastcall get_SmallChange(void);
  HRESULT         __fastcall set_SmallChange(long plSmallChange/*[in]*/);
  HRESULT         __fastcall get_Max(long* plMax/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT         __fastcall set_Max(long plMax/*[in]*/);
  HRESULT         __fastcall get_Min(long* plMin/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT         __fastcall set_Min(long plMin/*[in]*/);
  HRESULT         __fastcall get_Orientation(Mscomctllib_xp::OrientationConstants* pOrientation/*[out,retval]*/);
  Mscomctllib_xp::OrientationConstants __fastcall get_Orientation(void);
  HRESULT         __fastcall set_Orientation(Mscomctllib_xp::OrientationConstants pOrientation/*[in]*/);
  HRESULT         __fastcall get_SelectRange(VARIANT_BOOL* pbSelectRange/*[out,retval]*/);
  HRESULT         __fastcall get_SelectRange(TOLEBOOL* pbSelectRange/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SelectRange(void);
  HRESULT         __fastcall set_SelectRange(VARIANT_BOOL pbSelectRange/*[in]*/);
  HRESULT         __fastcall set_SelectRange(TOLEBOOL pbSelectRange/*[in]*/);
  HRESULT         __fastcall get_SelStart(long* plSelStart/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT         __fastcall set_SelStart(long plSelStart/*[in]*/);
  HRESULT         __fastcall get_SelLength(long* plSelLength/*[out,retval]*/);
  long            __fastcall get_SelLength(void);
  HRESULT         __fastcall set_SelLength(long plSelLength/*[in]*/);
  HRESULT         __fastcall get_TickStyle(Mscomctllib_xp::TickStyleConstants* pTickStyle/*[out,retval]*/);
  Mscomctllib_xp::TickStyleConstants __fastcall get_TickStyle(void);
  HRESULT         __fastcall set_TickStyle(Mscomctllib_xp::TickStyleConstants pTickStyle/*[in]*/);
  HRESULT         __fastcall get_TickFrequency(long* plTickFrequency/*[out,retval]*/);
  long            __fastcall get_TickFrequency(void);
  HRESULT         __fastcall set_TickFrequency(long plTickFrequency/*[in]*/);
  HRESULT         __fastcall get_Value(long* plValue/*[out,retval]*/);
  long            __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(long plValue/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT         __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/);
  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/);
  HRESULT         __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT         __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  void            __fastcall Refresh(void);
  void            __fastcall ClearSel(void);
  void            __fastcall DoClick(void);
  HRESULT         __fastcall get_GetNumTicks(long* plNumTicks/*[out,retval]*/);
  long            __fastcall get_GetNumTicks(void);
  HRESULT         __fastcall OLEDrag(void);
  void            __fastcall AboutBox(void);
  HRESULT         __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_TextPosition(Mscomctllib_xp::TextPositionConstants* penumTextPosition/*[out,retval]*/);
  Mscomctllib_xp::TextPositionConstants __fastcall get_TextPosition(void);
  HRESULT         __fastcall set_TextPosition(Mscomctllib_xp::TextPositionConstants penumTextPosition/*[in]*/);

  __property   long            _Value = {read = get__Value, write = set__Value};
  __property   long            LargeChange = {read = get_LargeChange, write = set_LargeChange};
  __property   long            SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            Min = {read = get_Min, write = set_Min};
  __property   Mscomctllib_xp::OrientationConstants Orientation = {read = get_Orientation, write = set_Orientation};
  __property   TOLEBOOL        SelectRange = {read = get_SelectRange, write = set_SelectRange};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   Mscomctllib_xp::TickStyleConstants TickStyle = {read = get_TickStyle, write = set_TickStyle};
  __property   long            TickFrequency = {read = get_TickFrequency, write = set_TickFrequency};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   long            GetNumTicks = {read = get_GetNumTicks};
  __property   BSTR            Text = {read = get_Text};
  __property   Mscomctllib_xp::TextPositionConstants TextPosition = {read = get_TextPosition, write = set_TextPosition};
};
typedef TCOMISliderT<ISlider> TCOMISlider;

// *********************************************************************//
// DispIntf:  ISlider
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F08DF952-8592-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class ISliderDispT : public TAutoDriver<ISlider>
{
public:
  ISliderDispT(){}

  ISliderDispT(ISlider *pintf)
  {
    TAutoDriver<ISlider>::Bind(pintf, false);
  }

  ISliderDispT(ISliderPtr pintf)
  {
    TAutoDriver<ISlider>::Bind(pintf, true);
  }

  ISliderDispT& operator=(ISlider *pintf)
  {
    TAutoDriver<ISlider>::Bind(pintf, false);
    return *this;
  }

  ISliderDispT& operator=(ISliderPtr pintf)
  {
    TAutoDriver<ISlider>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Slider));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Slider);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__Value(long* plValue/*[out,retval]*/);
  long            __fastcall get__Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__Value(long plValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LargeChange(long* plLargeChange/*[out,retval]*/);
  long            __fastcall get_LargeChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LargeChange(long plLargeChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SmallChange(long* plSmallChange/*[out,retval]*/);
  long            __fastcall get_SmallChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SmallChange(long plSmallChange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Max(long* plMax/*[out,retval]*/);
  long            __fastcall get_Max(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Max(long plMax/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Min(long* plMin/*[out,retval]*/);
  long            __fastcall get_Min(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Min(long plMin/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Mscomctllib_xp::OrientationConstants* pOrientation/*[out,retval]*/);
  Mscomctllib_xp::OrientationConstants __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(Mscomctllib_xp::OrientationConstants pOrientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectRange(VARIANT_BOOL* pbSelectRange/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SelectRange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectRange(VARIANT_BOOL pbSelectRange/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelStart(long* plSelStart/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelStart(long plSelStart/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelLength(long* plSelLength/*[out,retval]*/);
  long            __fastcall get_SelLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelLength(long plSelLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TickStyle(Mscomctllib_xp::TickStyleConstants* pTickStyle/*[out,retval]*/);
  Mscomctllib_xp::TickStyleConstants __fastcall get_TickStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TickStyle(Mscomctllib_xp::TickStyleConstants pTickStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TickFrequency(long* plTickFrequency/*[out,retval]*/);
  long            __fastcall get_TickFrequency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TickFrequency(long plTickFrequency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(long* plValue/*[out,retval]*/);
  long            __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(long plValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/);
  Mscomctllib_xp::BorderStyleConstants __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall Refresh();
  void /*[VT_VOID:0]*/ __fastcall ClearSel();
  void /*[VT_VOID:0]*/ __fastcall DoClick();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GetNumTicks(long* plNumTicks/*[out,retval]*/);
  long            __fastcall get_GetNumTicks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OLEDrag();
  void /*[VT_VOID:0]*/ __fastcall AboutBox();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextPosition(Mscomctllib_xp::TextPositionConstants* penumTextPosition/*[out,retval]*/);
  Mscomctllib_xp::TextPositionConstants __fastcall get_TextPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextPosition(Mscomctllib_xp::TextPositionConstants penumTextPosition/*[in]*/);

  __property   long            _Value = {read = get__Value, write = set__Value};
  __property   long            LargeChange = {read = get_LargeChange, write = set_LargeChange};
  __property   long            SmallChange = {read = get_SmallChange, write = set_SmallChange};
  __property   long            Max = {read = get_Max, write = set_Max};
  __property   long            Min = {read = get_Min, write = set_Min};
  __property   Mscomctllib_xp::OrientationConstants Orientation = {read = get_Orientation, write = set_Orientation};
  __property   VARIANT_BOOL    SelectRange = {read = get_SelectRange, write = set_SelectRange};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   Mscomctllib_xp::TickStyleConstants TickStyle = {read = get_TickStyle, write = set_TickStyle};
  __property   long            TickFrequency = {read = get_TickFrequency, write = set_TickFrequency};
  __property   long            Value = {read = get_Value, write = set_Value};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   Mscomctllib_xp::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   long            GetNumTicks = {read = get_GetNumTicks};
  __property   BSTR            Text = {read = get_Text};
  __property   Mscomctllib_xp::TextPositionConstants TextPosition = {read = get_TextPosition, write = set_TextPosition};
};
typedef ISliderDispT<ISlider> ISliderDisp;

// *********************************************************************//
// DispIntf:  ISliderEvents
// Flags:     (4096) Dispatchable
// GUID:      {F08DF953-8592-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T>
class ISliderEventsDispT : public TAutoDriver<ISliderEvents>
{
public:
  ISliderEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall KeyDown(short* KeyCode, short Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(short* KeyAscii);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(short* KeyCode, short Shift);
  void /*[VT_VOID:0]*/ __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                            OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                          OLE_YPOS_PIXELS y);
  void /*[VT_VOID:0]*/ __fastcall Scroll();
  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/);

};
typedef ISliderEventsDispT<ISliderEvents> ISliderEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIControls
// Interface: IControls
// *********************************************************************//
template <class T /* IControls */ >
class TCOMIControlsT : public TComInterface<IControls>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIControlsT() {}
  TCOMIControlsT(IControls *intf, bool addRef = false) : TComInterface<IControls>(intf, addRef) {}
  TCOMIControlsT(const TCOMIControlsT& src) : TComInterface<IControls>(src) {}
  TCOMIControlsT& operator=(const TCOMIControlsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall get_Item(long Index/*[in]*/, LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(long Index/*[in]*/);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count};
};
typedef TCOMIControlsT<IControls> TCOMIControls;

// *********************************************************************//
// DispIntf:  IControls
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8A3DC00-8593-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IControlsDispT : public TAutoDriver<IControls>
{
public:
  IControlsDispT(){}

  IControlsDispT(IControls *pintf)
  {
    TAutoDriver<IControls>::Bind(pintf, false);
  }

  IControlsDispT(IControlsPtr pintf)
  {
    TAutoDriver<IControls>::Bind(pintf, true);
  }

  IControlsDispT& operator=(IControls *pintf)
  {
    TAutoDriver<IControls>::Bind(pintf, false);
    return *this;
  }

  IControlsDispT& operator=(IControlsPtr pintf)
  {
    TAutoDriver<IControls>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Controls_));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Controls_);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(long Index/*[in]*/, 
                                                 LPDISPATCH* ppDisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count};
};
typedef IControlsDispT<IControls> IControlsDisp;

// *********************************************************************//
// SmartIntf: TCOMIComboItem
// Interface: IComboItem
// *********************************************************************//
template <class T /* IComboItem */ >
class TCOMIComboItemT : public TComInterface<IComboItem>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIComboItemT() {}
  TCOMIComboItemT(IComboItem *intf, bool addRef = false) : TComInterface<IComboItem>(intf, addRef) {}
  TCOMIComboItemT(const TCOMIComboItemT& src) : TComInterface<IComboItem>(src) {}
  TCOMIComboItemT& operator=(const TCOMIComboItemT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT         __fastcall set__ObjectDefault(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_Image(VARIANT* pvImage/*[out,retval]*/);
  VARIANT         __fastcall get_Image(void);
  HRESULT         __fastcall set_Image(VARIANT pvImage/*[in]*/);
  HRESULT         __fastcall get_Indentation(short* psIndent/*[out,retval]*/);
  short           __fastcall get_Indentation(void);
  HRESULT         __fastcall set_Indentation(short psIndent/*[in]*/);
  HRESULT         __fastcall get_Index(long* plIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT         __fastcall set_Index(long plIndex/*[in]*/);
  HRESULT         __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT         __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT         __fastcall get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/);
  HRESULT         __fastcall get_Selected(TOLEBOOL* pbSelected/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Selected(void);
  HRESULT         __fastcall set_Selected(VARIANT_BOOL pbSelected/*[in]*/);
  HRESULT         __fastcall set_Selected(TOLEBOOL pbSelected/*[in]*/);
  HRESULT         __fastcall get_SelImage(VARIANT* pvImage/*[out,retval]*/);
  VARIANT         __fastcall get_SelImage(void);
  HRESULT         __fastcall set_SelImage(VARIANT pvImage/*[in]*/);
  HRESULT         __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall _set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pbstrText/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   short           Indentation = {read = get_Indentation, write = set_Indentation};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   TOLEBOOL        Selected = {read = get_Selected, write = set_Selected};
  __property   BSTR            Text = {read = get_Text};
};
typedef TCOMIComboItemT<IComboItem> TCOMIComboItem;

// *********************************************************************//
// DispIntf:  IComboItem
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD9DA660-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IComboItemDispT : public TAutoDriver<IComboItem>
{
public:
  IComboItemDispT(){}

  IComboItemDispT(IComboItem *pintf)
  {
    TAutoDriver<IComboItem>::Bind(pintf, false);
  }

  IComboItemDispT(IComboItemPtr pintf)
  {
    TAutoDriver<IComboItem>::Bind(pintf, true);
  }

  IComboItemDispT& operator=(IComboItem *pintf)
  {
    TAutoDriver<IComboItem>::Bind(pintf, false);
    return *this;
  }

  IComboItemDispT& operator=(IComboItemPtr pintf)
  {
    TAutoDriver<IComboItem>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComboItem));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComboItem);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get__ObjectDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__ObjectDefault(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Image(VARIANT* pvImage/*[out,retval]*/);
  VARIANT         __fastcall get_Image(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Image(VARIANT pvImage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Indentation(short* psIndent/*[out,retval]*/);
  short           __fastcall get_Indentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Indentation(short psIndent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(long* plIndex/*[out,retval]*/);
  long            __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Index(long plIndex/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Key(BSTR* pbstrKey/*[out,retval]*/);
  BSTR            __fastcall get_Key(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Key(BSTR pbstrKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Selected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Selected(VARIANT_BOOL pbSelected/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelImage(VARIANT* pvImage/*[out,retval]*/);
  VARIANT         __fastcall get_SelImage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelImage(VARIANT pvImage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(VARIANT* pvTag/*[out,retval]*/);
  VARIANT         __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Tag(VARIANT pvTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstrText/*[in]*/);

  __property   BSTR            _ObjectDefault = {read = get__ObjectDefault};
  __property   short           Indentation = {read = get_Indentation, write = set_Indentation};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   BSTR            Text = {read = get_Text};
};
typedef IComboItemDispT<IComboItem> IComboItemDisp;

// *********************************************************************//
// SmartIntf: TCOMIComboItems
// Interface: IComboItems
// *********************************************************************//
template <class T /* IComboItems */ >
class TCOMIComboItemsT : public TComInterface<IComboItems>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIComboItemsT() {}
  TCOMIComboItemsT(IComboItems *intf, bool addRef = false) : TComInterface<IComboItems>(intf, addRef) {}
  TCOMIComboItemsT(const TCOMIComboItemsT& src) : TComInterface<IComboItems>(src) {}
  TCOMIComboItemsT& operator=(const TCOMIComboItemsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__CollectionDefault(VARIANT* Index/*[in]*/, 
                                                    Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/);
  Mscomctllib_xp::IComboItem* __fastcall get__CollectionDefault(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall set__CollectionDefault(VARIANT* Index/*[in]*/, 
                                                    Mscomctllib_xp::IComboItem* ppComboItem/*[in]*/);
  HRESULT         __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(long plCount/*[in]*/);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/);
  Mscomctllib_xp::IComboItem* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall set_Item(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IComboItem* ppComboItem/*[in]*/);
  HRESULT         __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                 VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                                 VARIANT* SelImage/*[in,opt]*/, VARIANT* Indentation/*[in,opt]*/, 
                                 Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/);
  Mscomctllib_xp::IComboItem* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Image/*[in,opt]*/= TNoParam(), 
                                             VARIANT* SelImage/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Indentation/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Clear(void);
  HRESULT         __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef TCOMIComboItemsT<IComboItems> TCOMIComboItems;

// *********************************************************************//
// DispIntf:  IComboItems
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD9DA662-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IComboItemsDispT : public TAutoDriver<IComboItems>
{
public:
  IComboItemsDispT(){}

  IComboItemsDispT(IComboItems *pintf)
  {
    TAutoDriver<IComboItems>::Bind(pintf, false);
  }

  IComboItemsDispT(IComboItemsPtr pintf)
  {
    TAutoDriver<IComboItems>::Bind(pintf, true);
  }

  IComboItemsDispT& operator=(IComboItems *pintf)
  {
    TAutoDriver<IComboItems>::Bind(pintf, false);
    return *this;
  }

  IComboItemsDispT& operator=(IComboItemsPtr pintf)
  {
    TAutoDriver<IComboItems>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ComboItems));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ComboItems);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__CollectionDefault(VARIANT* Index/*[in]*/, 
                                                               Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/);
  Mscomctllib_xp::IComboItem* __fastcall get__CollectionDefault(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set__CollectionDefault(VARIANT* Index/*[in]*/, 
                                                               Mscomctllib_xp::IComboItem* ppComboItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* plCount/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(long plCount/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/);
  Mscomctllib_xp::IComboItem* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Item(VARIANT* Index/*[in]*/, 
                                                 Mscomctllib_xp::IComboItem* ppComboItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                            VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                                            VARIANT* SelImage/*[in,opt]*/, 
                                            VARIANT* Indentation/*[in,opt]*/, 
                                            Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/);
  Mscomctllib_xp::IComboItem* __fastcall Add(VARIANT* Index/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Key/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Text/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Image/*[in,opt]*/= TNoParam(), 
                                             VARIANT* SelImage/*[in,opt]*/= TNoParam(), 
                                             VARIANT* Indentation/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/);
  LPDISPATCH      __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef IComboItemsDispT<IComboItems> IComboItemsDisp;

// *********************************************************************//
// SmartIntf: TCOMIImageCombo
// Interface: IImageCombo
// *********************************************************************//
template <class T /* IImageCombo */ >
class TCOMIImageComboT : public TComInterface<IImageCombo>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIImageComboT() {}
  TCOMIImageComboT(IImageCombo *intf, bool addRef = false) : TComInterface<IImageCombo>(intf, addRef) {}
  TCOMIImageComboT(const TCOMIImageComboT& src) : TComInterface<IImageCombo>(src) {}
  TCOMIImageComboT& operator=(const TCOMIImageComboT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_BackColor(::OLE_COLOR* pocBackColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(::OLE_COLOR pocBackColor/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pbEnabled/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** ppFont/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* ppFont/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp* ppFont/*[in]*/);
  HRESULT         __fastcall get_ForeColor(::OLE_COLOR* pocForeColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(::OLE_COLOR pocForeColor/*[in]*/);
  HRESULT         __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT         __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT         __fastcall get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ImageList(void);
  HRESULT         __fastcall _set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT         __fastcall get_Indentation(short* psIndent/*[out,retval]*/);
  short           __fastcall get_Indentation(void);
  HRESULT         __fastcall set_Indentation(short psIndent/*[in]*/);
  HRESULT         __fastcall get_ComboItems(Mscomctllib_xp::IComboItems** ppComboItems/*[out,retval]*/);
  HRESULT         __fastcall get_ComboItems(Mscomctllib_xp::IComboItemsPtr* ppComboItems/*[out,retval]*/);
  Mscomctllib_xp::IComboItemsPtr __fastcall get_ComboItems(void);
  HRESULT         __fastcall _set_ComboItems(Mscomctllib_xp::IComboItems* ppComboItems/*[in]*/);
  HRESULT         __fastcall _set_ComboItems(Mscomctllib_xp::IComboItemsPtr ppComboItems/*[in]*/);
  HRESULT         __fastcall get_Locked(VARIANT_BOOL* pbLocked/*[out,retval]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pbLocked/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(VARIANT_BOOL pbLocked/*[in]*/);
  HRESULT         __fastcall set_Locked(TOLEBOOL pbLocked/*[in]*/);
  HRESULT         __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT         __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT         __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* penumMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT         __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants penumMousePointer/*[in]*/);
  HRESULT         __fastcall get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDragConstants __fastcall get_OLEDragMode(void);
  HRESULT         __fastcall set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/);
  HRESULT         __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT         __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT         __fastcall get_SelectedItem(Mscomctllib_xp::IComboItem** ppIComboItem/*[out,retval]*/);
  HRESULT         __fastcall get_SelectedItem(Mscomctllib_xp::IComboItemPtr* ppIComboItem/*[out,retval]*/);
  Mscomctllib_xp::IComboItemPtr __fastcall get_SelectedItem(void);
  HRESULT         __fastcall _set_SelectedItem(Mscomctllib_xp::IComboItem* ppIComboItem/*[in]*/);
  HRESULT         __fastcall _set_SelectedItem(Mscomctllib_xp::IComboItemPtr ppIComboItem/*[in]*/);
  HRESULT         __fastcall set_SelectedItem(VARIANT* ppIComboItem/*[in]*/);
  HRESULT         __fastcall get_SelLength(long* plSelLength/*[out,retval]*/);
  long            __fastcall get_SelLength(void);
  HRESULT         __fastcall set_SelLength(long plSelLength/*[in]*/);
  HRESULT         __fastcall get_SelStart(long* plSelStart/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT         __fastcall set_SelStart(long plSelStart/*[in]*/);
  HRESULT         __fastcall get_SelText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_SelText(void);
  HRESULT         __fastcall set_SelText(BSTR pbstrText/*[in]*/);
  HRESULT         __fastcall get_Style(Mscomctllib_xp::ImageComboStyleConstants* penumStyle/*[out,retval]*/);
  Mscomctllib_xp::ImageComboStyleConstants __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(Mscomctllib_xp::ImageComboStyleConstants penumStyle/*[in]*/);
  HRESULT         __fastcall get_UsePathSep(VARIANT_BOOL* pbUsePathSep/*[out,retval]*/);
  HRESULT         __fastcall get_UsePathSep(TOLEBOOL* pbUsePathSep/*[out,retval]*/);
  TOLEBOOL        __fastcall get_UsePathSep(void);
  HRESULT         __fastcall set_UsePathSep(VARIANT_BOOL pbUsePathSep/*[in]*/);
  HRESULT         __fastcall set_UsePathSep(TOLEBOOL pbUsePathSep/*[in]*/);
  HRESULT         __fastcall AboutBox(void);
  HRESULT         __fastcall GetFirstVisible(Mscomctllib_xp::IComboItem** ppIComboItem/*[out,retval]*/);
  Mscomctllib_xp::IComboItem* __fastcall GetFirstVisible(void);
  HRESULT         __fastcall Refresh(void);
  HRESULT         __fastcall OLEDrag(void);

  __property   BSTR            Text = {read = get_Text};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   short           Indentation = {read = get_Indentation, write = set_Indentation};
  __property   Mscomctllib_xp::IComboItemsPtr ComboItems = {read = get_ComboItems, write = _set_ComboItems};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Mscomctllib_xp::OLEDragConstants OLEDragMode = {read = get_OLEDragMode, write = set_OLEDragMode};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::IComboItemPtr SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   BSTR            SelText = {read = get_SelText};
  __property   Mscomctllib_xp::ImageComboStyleConstants Style = {read = get_Style, write = set_Style};
  __property   TOLEBOOL        UsePathSep = {read = get_UsePathSep, write = set_UsePathSep};
};
typedef TCOMIImageComboT<IImageCombo> TCOMIImageCombo;

// *********************************************************************//
// DispIntf:  IImageCombo
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD9DA664-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
template<class T>
class IImageComboDispT : public TAutoDriver<IImageCombo>
{
public:
  IImageComboDispT(){}

  IImageComboDispT(IImageCombo *pintf)
  {
    TAutoDriver<IImageCombo>::Bind(pintf, false);
  }

  IImageComboDispT(IImageComboPtr pintf)
  {
    TAutoDriver<IImageCombo>::Bind(pintf, true);
  }

  IImageComboDispT& operator=(IImageCombo *pintf)
  {
    TAutoDriver<IImageCombo>::Bind(pintf, false);
    return *this;
  }

  IImageComboDispT& operator=(IImageComboPtr pintf)
  {
    TAutoDriver<IImageCombo>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ImageCombo));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ImageCombo);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(::OLE_COLOR* pocBackColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(::OLE_COLOR pocBackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Font(IFontDisp** ppFont/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Font(IFontDisp* ppFont/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Font(IFontDisp* ppFont/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(::OLE_COLOR* pocForeColor/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(::OLE_COLOR pocForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/);
  OLE_HANDLE      __fastcall get_hWnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_hWnd(OLE_HANDLE phWnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ImageList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ImageList(LPDISPATCH ppImageList/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Indentation(short* psIndent/*[out,retval]*/);
  short           __fastcall get_Indentation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Indentation(short psIndent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ComboItems(Mscomctllib_xp::IComboItems** ppComboItems/*[out,retval]*/);
  Mscomctllib_xp::IComboItems* __fastcall get_ComboItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ComboItems(Mscomctllib_xp::IComboItems* ppComboItems/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(VARIANT_BOOL* pbLocked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(VARIANT_BOOL pbLocked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/);
  IPictureDisp*   __fastcall get_MouseIcon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(Mscomctllib_xp::MousePointerConstants* penumMousePointer/*[out,retval]*/);
  Mscomctllib_xp::MousePointerConstants __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(Mscomctllib_xp::MousePointerConstants penumMousePointer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDragConstants __fastcall get_OLEDragMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/);
  Mscomctllib_xp::OLEDropConstants __fastcall get_OLEDropMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedItem(Mscomctllib_xp::IComboItem** ppIComboItem/*[out,retval]*/);
  Mscomctllib_xp::IComboItem* __fastcall get_SelectedItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_SelectedItem(Mscomctllib_xp::IComboItem* ppIComboItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectedItem(VARIANT* ppIComboItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelLength(long* plSelLength/*[out,retval]*/);
  long            __fastcall get_SelLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelLength(long plSelLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelStart(long* plSelStart/*[out,retval]*/);
  long            __fastcall get_SelStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelStart(long plSelStart/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_SelText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Mscomctllib_xp::ImageComboStyleConstants* penumStyle/*[out,retval]*/);
  Mscomctllib_xp::ImageComboStyleConstants __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Mscomctllib_xp::ImageComboStyleConstants penumStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UsePathSep(VARIANT_BOOL* pbUsePathSep/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_UsePathSep(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UsePathSep(VARIANT_BOOL pbUsePathSep/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AboutBox();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetFirstVisible(Mscomctllib_xp::IComboItem** ppIComboItem/*[out,retval]*/);
  Mscomctllib_xp::IComboItem* __fastcall GetFirstVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OLEDrag();

  __property   BSTR            Text = {read = get_Text};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   LPDISPATCH      ImageList = {read = get_ImageList, write = set_ImageList};
  __property   short           Indentation = {read = get_Indentation, write = set_Indentation};
  __property   Mscomctllib_xp::IComboItems* ComboItems = {read = get_ComboItems, write = _set_ComboItems};
  __property   VARIANT_BOOL    Locked = {read = get_Locked, write = set_Locked};
  __property   IPictureDisp*   MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Mscomctllib_xp::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   Mscomctllib_xp::OLEDragConstants OLEDragMode = {read = get_OLEDragMode, write = set_OLEDragMode};
  __property   Mscomctllib_xp::OLEDropConstants OLEDropMode = {read = get_OLEDropMode, write = set_OLEDropMode};
  __property   Mscomctllib_xp::IComboItem* SelectedItem = {read = get_SelectedItem, write = _set_SelectedItem};
  __property   long            SelLength = {read = get_SelLength, write = set_SelLength};
  __property   long            SelStart = {read = get_SelStart, write = set_SelStart};
  __property   BSTR            SelText = {read = get_SelText};
  __property   Mscomctllib_xp::ImageComboStyleConstants Style = {read = get_Style, write = set_Style};
  __property   VARIANT_BOOL    UsePathSep = {read = get_UsePathSep, write = set_UsePathSep};
};
typedef IImageComboDispT<IImageCombo> IImageComboDisp;

// *********************************************************************//
// DispIntf:  DImageComboEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {DD9DA665-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T>
class DImageComboEventsDispT : public TAutoDriver<DImageComboEvents>
{
public:
  DImageComboEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Change();
  void /*[VT_VOID:0]*/ __fastcall Dropdown();
  void /*[VT_VOID:0]*/ __fastcall Click();
  void /*[VT_VOID:0]*/ __fastcall KeyDown(short KeyCode, short Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyUp(short KeyCode, short Shift);
  void /*[VT_VOID:0]*/ __fastcall KeyPress(short* KeyAscii);
  void /*[VT_VOID:0]*/ __fastcall OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                               long* AllowedEffects/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                                  VARIANT_BOOL* DefaultCursors/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                             short* DataFormat/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLECompleteDrag(long* Effect/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/, short* State/*[in,out]*/);
  void /*[VT_VOID:0]*/ __fastcall OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                              long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                              short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                              float* y/*[in,out]*/);

};
typedef DImageComboEventsDispT<DImageComboEvents> DImageComboEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIVBDataObject
// Interface: IVBDataObject
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIVBDataObjectT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIVBDataObjectT<T>::GetData(short sFormat/*[in]*/, VARIANT* pvData/*[out,retval]*/)
{
  return (*this)->GetData(sFormat, pvData);
}

template <class T> VARIANT __fastcall
TCOMIVBDataObjectT<T>::GetData(short sFormat/*[in]*/)
{
  VARIANT pvData;
  OLECHECK(this->GetData(, (VARIANT*)&pvData));
  return pvData;
}

template <class T> HRESULT __fastcall
TCOMIVBDataObjectT<T>::GetFormat(short sFormat/*[in]*/, 
                                 VARIANT_BOOL* pbFormatSupported/*[out,retval]*/)
{
  return (*this)->GetFormat(sFormat, pbFormatSupported);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIVBDataObjectT<T>::GetFormat(short sFormat/*[in]*/)
{
  VARIANT_BOOL pbFormatSupported;
  OLECHECK(this->GetFormat(, (VARIANT_BOOL*)&pbFormatSupported));
  return pbFormatSupported;
}

template <class T> HRESULT __fastcall
TCOMIVBDataObjectT<T>::SetData(VARIANT vValue/*[in,opt]*/, VARIANT vFormat/*[in,opt]*/)
{
  return (*this)->SetData(vValue, vFormat);
}

template <class T> HRESULT __fastcall
TCOMIVBDataObjectT<T>::get_Files(Mscomctllib_xp::IVBDataObjectFiles** pFiles/*[out,retval]*/)
{
  return (*this)->get_Files(pFiles);
}

template <class T> HRESULT __fastcall
TCOMIVBDataObjectT<T>::get_Files(Mscomctllib_xp::IVBDataObjectFilesPtr* pFiles/*[out,retval]*/)
{
  return (*this)->get_Files(IVBDataObjectFiles**)pFiles);
}

template <class T> Mscomctllib_xp::IVBDataObjectFilesPtr __fastcall
TCOMIVBDataObjectT<T>::get_Files(void)
{
  Mscomctllib_xp::IVBDataObjectFiles* pFiles;
  OLECHECK(this->get_Files((Mscomctllib_xp::IVBDataObjectFiles**)&pFiles));
  return (Mscomctllib_xp::IVBDataObjectFilesPtr)pFiles;
}

// *********************************************************************//
// DispIntf:  IVBDataObject
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2334D2B1-713E-11CF-8AE5-00AA00C00905}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectDispT<T>::GetData(short sFormat/*[in]*/, VARIANT* pvData/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetData"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = sFormat /*[VT_I2:0]*/;
  return OutRetValSetterPtr(pvData /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IVBDataObjectDispT<T>::GetData(short sFormat/*[in]*/)
{
  VARIANT pvData;
  this->GetData(sFormat, (VARIANT*)&pvData);
  return pvData;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectDispT<T>::GetFormat(short sFormat/*[in]*/, 
                                 VARIANT_BOOL* pbFormatSupported/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFormat"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = sFormat /*[VT_I2:0]*/;
  return OutRetValSetterPtr(pbFormatSupported /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IVBDataObjectDispT<T>::GetFormat(short sFormat/*[in]*/)
{
  VARIANT_BOOL pbFormatSupported;
  this->GetFormat(sFormat, (VARIANT_BOOL*)&pbFormatSupported);
  return pbFormatSupported;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectDispT<T>::SetData(VARIANT vValue/*[in,opt]*/, VARIANT vFormat/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetData"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = vValue /*[VT_VARIANT:0]*/;
  _args[2] = vFormat /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectDispT<T>::get_Files(Mscomctllib_xp::IVBDataObjectFiles** pFiles/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Files"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IVBDataObjectFiles**)pFiles /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IVBDataObjectFiles* __fastcall
IVBDataObjectDispT<T>::get_Files(void)
{
  Mscomctllib_xp::IVBDataObjectFiles* pFiles;
  this->get_Files((Mscomctllib_xp::IVBDataObjectFiles**)&pFiles);
  return pFiles;
}

// *********************************************************************//
// SmartIntf: TCOMIVBDataObjectFiles
// Interface: IVBDataObjectFiles
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIVBDataObjectFilesT<T>::get_Item(long lIndex/*[in]*/, BSTR* bstrItem/*[out,retval]*/)
{
  return (*this)->get_Item(lIndex, bstrItem);
}

template <class T> BSTR __fastcall
TCOMIVBDataObjectFilesT<T>::get_Item(long lIndex/*[in]*/)
{
  BSTR bstrItem = 0;
  OLECHECK(this->get_Item(, (BSTR*)&bstrItem));
  return bstrItem;
}

template <class T> HRESULT __fastcall
TCOMIVBDataObjectFilesT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  return (*this)->get_Count(plCount);
}

template <class T> long __fastcall
TCOMIVBDataObjectFilesT<T>::get_Count(void)
{
  long plCount;
  OLECHECK(this->get_Count((long*)&plCount));
  return plCount;
}

template <class T> HRESULT __fastcall
TCOMIVBDataObjectFilesT<T>::Add(BSTR bstrFilename/*[in]*/, VARIANT vIndex/*[in,opt]*/)
{
  return (*this)->Add(bstrFilename, vIndex);
}

template <class T> HRESULT __fastcall
TCOMIVBDataObjectFilesT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIVBDataObjectFilesT<T>::Remove(VARIANT vIndex/*[in]*/)
{
  return (*this)->Remove(vIndex);
}

template <class T> HRESULT __fastcall
TCOMIVBDataObjectFilesT<T>::_NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIVBDataObjectFilesT<T>::_NewEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

// *********************************************************************//
// DispIntf:  IVBDataObjectFiles
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2334D2B3-713E-11CF-8AE5-00AA00C00905}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectFilesDispT<T>::get_Item(long lIndex/*[in]*/, BSTR* bstrItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = lIndex /*[VT_I4:0]*/;
  return OutRetValSetterPtr(bstrItem /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IVBDataObjectFilesDispT<T>::get_Item(long lIndex/*[in]*/)
{
  BSTR bstrItem;
  this->get_Item(lIndex, (BSTR*)&bstrItem);
  return bstrItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectFilesDispT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVBDataObjectFilesDispT<T>::get_Count(void)
{
  long plCount;
  this->get_Count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectFilesDispT<T>::Add(BSTR bstrFilename/*[in]*/, VARIANT vIndex/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = bstrFilename /*[VT_BSTR:0]*/;
  _args[2] = vIndex /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectFilesDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectFilesDispT<T>::Remove(VARIANT vIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = vIndex /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVBDataObjectFilesDispT<T>::_NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IVBDataObjectFilesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->_NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

// *********************************************************************//
// SmartIntf: TCOMITabStrip
// Interface: ITabStrip
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Tabs(Mscomctllib_xp::ITabs** ppTabs/*[out,retval]*/)
{
  return (*this)->get_Tabs(ppTabs);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Tabs(Mscomctllib_xp::ITabsPtr* ppTabs/*[out,retval]*/)
{
  return (*this)->get_Tabs(ITabs**)ppTabs);
}

template <class T> Mscomctllib_xp::ITabsPtr __fastcall
TCOMITabStripT<T>::get_Tabs(void)
{
  Mscomctllib_xp::ITabs* ppTabs;
  OLECHECK(this->get_Tabs((Mscomctllib_xp::ITabs**)&ppTabs));
  return (Mscomctllib_xp::ITabsPtr)ppTabs;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_Tabs(Mscomctllib_xp::ITabs* ppTabs/*[in]*/)
{
  return (*this)->_set_Tabs(ppTabs);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_Tabs(Mscomctllib_xp::ITabsPtr ppTabs/*[in]*/)
{
  return (*this)->_set_Tabs(ITabs*)ppTabs);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pbEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
  return (TOLEBOOL)pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_Enabled(TOLEBOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Font(IFontDisp** ppFontDisp/*[out,retval]*/)
{
  return (*this)->get_Font(ppFontDisp);
}

template <class T> IFontDisp* __fastcall
TCOMITabStripT<T>::get_Font(void)
{
  IFontDisp* ppFontDisp;
  OLECHECK(this->get_Font((IFontDisp**)&ppFontDisp));
  return ppFontDisp;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_Font(IFontDisp* ppFontDisp/*[in]*/)
{
  return (*this)->_set_Font(ppFontDisp);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  return (*this)->get_hWnd(phWnd);
}

template <class T> OLE_HANDLE __fastcall
TCOMITabStripT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
  return phWnd;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  return (*this)->set_hWnd(phWnd);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(ppMouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMITabStripT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
  return ppMouseIcon;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MultiRow(VARIANT_BOOL* pbMultiRow/*[out,retval]*/)
{
  return (*this)->get_MultiRow(pbMultiRow);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MultiRow(TOLEBOOL* pbMultiRow/*[out,retval]*/)
{
  return (*this)->get_MultiRow(VARIANT_BOOL*)pbMultiRow);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_MultiRow(void)
{
  VARIANT_BOOL pbMultiRow;
  OLECHECK(this->get_MultiRow((VARIANT_BOOL*)&pbMultiRow));
  return (TOLEBOOL)pbMultiRow;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MultiRow(VARIANT_BOOL pbMultiRow/*[in]*/)
{
  return (*this)->set_MultiRow(pbMultiRow);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MultiRow(TOLEBOOL pbMultiRow/*[in]*/)
{
  return (*this)->set_MultiRow(VARIANT_BOOL)pbMultiRow);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Style(Mscomctllib_xp::TabStyleConstants* psStyle/*[out,retval]*/)
{
  return (*this)->get_Style(psStyle);
}

template <class T> Mscomctllib_xp::TabStyleConstants __fastcall
TCOMITabStripT<T>::get_Style(void)
{
  Mscomctllib_xp::TabStyleConstants psStyle;
  OLECHECK(this->get_Style((Mscomctllib_xp::TabStyleConstants*)&psStyle));
  return psStyle;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_Style(Mscomctllib_xp::TabStyleConstants psStyle/*[in]*/)
{
  return (*this)->set_Style(psStyle);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_TabFixedWidth(short* psTabFixedWidth/*[out,retval]*/)
{
  return (*this)->get_TabFixedWidth(psTabFixedWidth);
}

template <class T> short __fastcall
TCOMITabStripT<T>::get_TabFixedWidth(void)
{
  short psTabFixedWidth;
  OLECHECK(this->get_TabFixedWidth((short*)&psTabFixedWidth));
  return psTabFixedWidth;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_TabFixedWidth(short psTabFixedWidth/*[in]*/)
{
  return (*this)->set_TabFixedWidth(psTabFixedWidth);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_TabWidthStyle(Mscomctllib_xp::TabWidthStyleConstants* psTabWidthStyle/*[out,retval]*/)
{
  return (*this)->get_TabWidthStyle(psTabWidthStyle);
}

template <class T> Mscomctllib_xp::TabWidthStyleConstants __fastcall
TCOMITabStripT<T>::get_TabWidthStyle(void)
{
  Mscomctllib_xp::TabWidthStyleConstants psTabWidthStyle;
  OLECHECK(this->get_TabWidthStyle((Mscomctllib_xp::TabWidthStyleConstants*)&psTabWidthStyle));
  return psTabWidthStyle;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_TabWidthStyle(Mscomctllib_xp::TabWidthStyleConstants psTabWidthStyle/*[in]*/)
{
  return (*this)->set_TabWidthStyle(psTabWidthStyle);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ClientTop(float* pfClientTop/*[out,retval]*/)
{
  return (*this)->get_ClientTop(pfClientTop);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_ClientTop(void)
{
  float pfClientTop;
  OLECHECK(this->get_ClientTop((float*)&pfClientTop));
  return pfClientTop;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_ClientTop(float pfClientTop/*[in]*/)
{
  return (*this)->set_ClientTop(pfClientTop);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ClientLeft(float* pfClientLeft/*[out,retval]*/)
{
  return (*this)->get_ClientLeft(pfClientLeft);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_ClientLeft(void)
{
  float pfClientLeft;
  OLECHECK(this->get_ClientLeft((float*)&pfClientLeft));
  return pfClientLeft;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_ClientLeft(float pfClientLeft/*[in]*/)
{
  return (*this)->set_ClientLeft(pfClientLeft);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ClientHeight(float* pfClientHeight/*[out,retval]*/)
{
  return (*this)->get_ClientHeight(pfClientHeight);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_ClientHeight(void)
{
  float pfClientHeight;
  OLECHECK(this->get_ClientHeight((float*)&pfClientHeight));
  return pfClientHeight;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_ClientHeight(float pfClientHeight/*[in]*/)
{
  return (*this)->set_ClientHeight(pfClientHeight);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ClientWidth(float* pfClientWidth/*[out,retval]*/)
{
  return (*this)->get_ClientWidth(pfClientWidth);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_ClientWidth(void)
{
  float pfClientWidth;
  OLECHECK(this->get_ClientWidth((float*)&pfClientWidth));
  return pfClientWidth;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_ClientWidth(float pfClientWidth/*[in]*/)
{
  return (*this)->set_ClientWidth(pfClientWidth);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(psMousePointer);
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
TCOMITabStripT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants psMousePointer;
  OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer));
  return psMousePointer;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(psMousePointer);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  return (*this)->get_ImageList(ppImageList);
}

template <class T> LPDISPATCH __fastcall
TCOMITabStripT<T>::get_ImageList(void)
{
  LPDISPATCH ppImageList;
  OLECHECK(this->get_ImageList((LPDISPATCH*)&ppImageList));
  return ppImageList;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->set_ImageList(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->_set_ImageList(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_TabFixedHeight(short* psTabFixedHeight/*[out,retval]*/)
{
  return (*this)->get_TabFixedHeight(psTabFixedHeight);
}

template <class T> short __fastcall
TCOMITabStripT<T>::get_TabFixedHeight(void)
{
  short psTabFixedHeight;
  OLECHECK(this->get_TabFixedHeight((short*)&psTabFixedHeight));
  return psTabFixedHeight;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_TabFixedHeight(short psTabFixedHeight/*[in]*/)
{
  return (*this)->set_TabFixedHeight(psTabFixedHeight);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ShowTips(VARIANT_BOOL* pbShowTips/*[out,retval]*/)
{
  return (*this)->get_ShowTips(pbShowTips);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_ShowTips(TOLEBOOL* pbShowTips/*[out,retval]*/)
{
  return (*this)->get_ShowTips(VARIANT_BOOL*)pbShowTips);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_ShowTips(void)
{
  VARIANT_BOOL pbShowTips;
  OLECHECK(this->get_ShowTips((VARIANT_BOOL*)&pbShowTips));
  return (TOLEBOOL)pbShowTips;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_ShowTips(VARIANT_BOOL pbShowTips/*[in]*/)
{
  return (*this)->set_ShowTips(pbShowTips);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_ShowTips(TOLEBOOL pbShowTips/*[in]*/)
{
  return (*this)->set_ShowTips(VARIANT_BOOL)pbShowTips);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_SelectedItem(Mscomctllib_xp::ITab** ppSelectedItem/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(ppSelectedItem);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_SelectedItem(Mscomctllib_xp::ITabPtr* ppSelectedItem/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(ITab**)ppSelectedItem);
}

template <class T> Mscomctllib_xp::ITabPtr __fastcall
TCOMITabStripT<T>::get_SelectedItem(void)
{
  Mscomctllib_xp::ITab* ppSelectedItem;
  OLECHECK(this->get_SelectedItem((Mscomctllib_xp::ITab**)&ppSelectedItem));
  return (Mscomctllib_xp::ITabPtr)ppSelectedItem;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_SelectedItem(Mscomctllib_xp::ITab* ppSelectedItem/*[in]*/)
{
  return (*this)->_set_SelectedItem(ppSelectedItem);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::_set_SelectedItem(Mscomctllib_xp::ITabPtr ppSelectedItem/*[in]*/)
{
  return (*this)->_set_SelectedItem(ITab*)ppSelectedItem);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_SelectedItem(VARIANT* ppSelectedItem/*[in]*/)
{
  return (*this)->set_SelectedItem(ppSelectedItem);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  return (*this)->get_OLEDropMode(psOLEDropMode);
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
TCOMITabStripT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
  return psOLEDropMode;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  return (*this)->set_OLEDropMode(psOLEDropMode);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::OLEDrag(void)
{
  return (*this)->OLEDrag();
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::AboutBox(void)
{
  return (*this)->AboutBox();
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_HotTracking(VARIANT_BOOL* pbHotTracking/*[out,retval]*/)
{
  return (*this)->get_HotTracking(pbHotTracking);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_HotTracking(TOLEBOOL* pbHotTracking/*[out,retval]*/)
{
  return (*this)->get_HotTracking(VARIANT_BOOL*)pbHotTracking);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_HotTracking(void)
{
  VARIANT_BOOL pbHotTracking;
  OLECHECK(this->get_HotTracking((VARIANT_BOOL*)&pbHotTracking));
  return (TOLEBOOL)pbHotTracking;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_HotTracking(VARIANT_BOOL pbHotTracking/*[in]*/)
{
  return (*this)->set_HotTracking(pbHotTracking);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_HotTracking(TOLEBOOL pbHotTracking/*[in]*/)
{
  return (*this)->set_HotTracking(VARIANT_BOOL)pbHotTracking);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MultiSelect(VARIANT_BOOL* pbMultiSelect/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(pbMultiSelect);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_MultiSelect(TOLEBOOL* pbMultiSelect/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(VARIANT_BOOL*)pbMultiSelect);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_MultiSelect(void)
{
  VARIANT_BOOL pbMultiSelect;
  OLECHECK(this->get_MultiSelect((VARIANT_BOOL*)&pbMultiSelect));
  return (TOLEBOOL)pbMultiSelect;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MultiSelect(VARIANT_BOOL pbMultiSelect/*[in]*/)
{
  return (*this)->set_MultiSelect(pbMultiSelect);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_MultiSelect(TOLEBOOL pbMultiSelect/*[in]*/)
{
  return (*this)->set_MultiSelect(VARIANT_BOOL)pbMultiSelect);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Placement(Mscomctllib_xp::PlacementConstants* penumPlacement/*[out,retval]*/)
{
  return (*this)->get_Placement(penumPlacement);
}

template <class T> Mscomctllib_xp::PlacementConstants __fastcall
TCOMITabStripT<T>::get_Placement(void)
{
  Mscomctllib_xp::PlacementConstants penumPlacement;
  OLECHECK(this->get_Placement((Mscomctllib_xp::PlacementConstants*)&penumPlacement));
  return penumPlacement;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_Placement(Mscomctllib_xp::PlacementConstants penumPlacement/*[in]*/)
{
  return (*this)->set_Placement(penumPlacement);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Separators(VARIANT_BOOL* pbSeparators/*[out,retval]*/)
{
  return (*this)->get_Separators(pbSeparators);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_Separators(TOLEBOOL* pbSeparators/*[out,retval]*/)
{
  return (*this)->get_Separators(VARIANT_BOOL*)pbSeparators);
}

template <class T> TOLEBOOL __fastcall
TCOMITabStripT<T>::get_Separators(void)
{
  VARIANT_BOOL pbSeparators;
  OLECHECK(this->get_Separators((VARIANT_BOOL*)&pbSeparators));
  return (TOLEBOOL)pbSeparators;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_Separators(VARIANT_BOOL pbSeparators/*[in]*/)
{
  return (*this)->set_Separators(pbSeparators);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_Separators(TOLEBOOL pbSeparators/*[in]*/)
{
  return (*this)->set_Separators(VARIANT_BOOL)pbSeparators);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_TabMinWidth(float* pflTabMinWidth/*[out,retval]*/)
{
  return (*this)->get_TabMinWidth(pflTabMinWidth);
}

template <class T> float __fastcall
TCOMITabStripT<T>::get_TabMinWidth(void)
{
  float pflTabMinWidth;
  OLECHECK(this->get_TabMinWidth((float*)&pflTabMinWidth));
  return pflTabMinWidth;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_TabMinWidth(float pflTabMinWidth/*[in]*/)
{
  return (*this)->set_TabMinWidth(pflTabMinWidth);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::get_TabStyle(Mscomctllib_xp::TabSelStyleConstants* penumTabStyle/*[out,retval]*/)
{
  return (*this)->get_TabStyle(penumTabStyle);
}

template <class T> Mscomctllib_xp::TabSelStyleConstants __fastcall
TCOMITabStripT<T>::get_TabStyle(void)
{
  Mscomctllib_xp::TabSelStyleConstants penumTabStyle;
  OLECHECK(this->get_TabStyle((Mscomctllib_xp::TabSelStyleConstants*)&penumTabStyle));
  return penumTabStyle;
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::set_TabStyle(Mscomctllib_xp::TabSelStyleConstants penumTabStyle/*[in]*/)
{
  return (*this)->set_TabStyle(penumTabStyle);
}

template <class T> HRESULT __fastcall
TCOMITabStripT<T>::DeselectAll(void)
{
  return (*this)->DeselectAll();
}

// *********************************************************************//
// DispIntf:  ITabStrip
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1EFB6594-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Tabs(Mscomctllib_xp::ITabs** ppTabs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tabs"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::ITabs**)ppTabs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ITabs* __fastcall
ITabStripDispT<T>::get_Tabs(void)
{
  Mscomctllib_xp::ITabs* ppTabs;
  this->get_Tabs((Mscomctllib_xp::ITabs**)&ppTabs);
  return ppTabs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_set_Tabs(Mscomctllib_xp::ITabs* ppTabs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tabs"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::ITabs*)ppTabs /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Font(IFontDisp** ppFontDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)ppFontDisp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
ITabStripDispT<T>::get_Font(void)
{
  IFontDisp* ppFontDisp;
  this->get_Font((IFontDisp**)&ppFontDisp);
  return ppFontDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_set_Font(IFontDisp* ppFontDisp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)ppFontDisp /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phWnd /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_HANDLE __fastcall
ITabStripDispT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  this->get_hWnd((OLE_HANDLE*)&phWnd);
  return phWnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<1> _args;
  _args[1] = phWnd /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppMouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
ITabStripDispT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  this->get_MouseIcon((IPictureDisp**)&ppMouseIcon);
  return ppMouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_MultiRow(VARIANT_BOOL* pbMultiRow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiRow"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbMultiRow /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_MultiRow(void)
{
  VARIANT_BOOL pbMultiRow;
  this->get_MultiRow((VARIANT_BOOL*)&pbMultiRow);
  return pbMultiRow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_MultiRow(VARIANT_BOOL pbMultiRow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiRow"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbMultiRow /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Style(Mscomctllib_xp::TabStyleConstants* psStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::TabStyleConstants __fastcall
ITabStripDispT<T>::get_Style(void)
{
  Mscomctllib_xp::TabStyleConstants psStyle;
  this->get_Style((Mscomctllib_xp::TabStyleConstants*)&psStyle);
  return psStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_Style(Mscomctllib_xp::TabStyleConstants psStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)psStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_TabFixedWidth(short* psTabFixedWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedWidth"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psTabFixedWidth /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
ITabStripDispT<T>::get_TabFixedWidth(void)
{
  short psTabFixedWidth;
  this->get_TabFixedWidth((short*)&psTabFixedWidth);
  return psTabFixedWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_TabFixedWidth(short psTabFixedWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedWidth"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = psTabFixedWidth /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_TabWidthStyle(Mscomctllib_xp::TabWidthStyleConstants* psTabWidthStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabWidthStyle"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psTabWidthStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::TabWidthStyleConstants __fastcall
ITabStripDispT<T>::get_TabWidthStyle(void)
{
  Mscomctllib_xp::TabWidthStyleConstants psTabWidthStyle;
  this->get_TabWidthStyle((Mscomctllib_xp::TabWidthStyleConstants*)&psTabWidthStyle);
  return psTabWidthStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_TabWidthStyle(Mscomctllib_xp::TabWidthStyleConstants psTabWidthStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabWidthStyle"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (int)psTabWidthStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ClientTop(float* pfClientTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientTop"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfClientTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_ClientTop(void)
{
  float pfClientTop;
  this->get_ClientTop((float*)&pfClientTop);
  return pfClientTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_ClientTop(float pfClientTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientTop"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pfClientTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ClientLeft(float* pfClientLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientLeft"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfClientLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_ClientLeft(void)
{
  float pfClientLeft;
  this->get_ClientLeft((float*)&pfClientLeft);
  return pfClientLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_ClientLeft(float pfClientLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientLeft"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pfClientLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ClientHeight(float* pfClientHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientHeight"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfClientHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_ClientHeight(void)
{
  float pfClientHeight;
  this->get_ClientHeight((float*)&pfClientHeight);
  return pfClientHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_ClientHeight(float pfClientHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientHeight"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pfClientHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ClientWidth(float* pfClientWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientWidth"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfClientWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_ClientWidth(void)
{
  float pfClientWidth;
  this->get_ClientWidth((float*)&pfClientWidth);
  return pfClientWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_ClientWidth(float pfClientWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientWidth"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pfClientWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psMousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
ITabStripDispT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants psMousePointer;
  this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer);
  return psMousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (int)psMousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppImageList /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ITabStripDispT<T>::get_ImageList(void)
{
  LPDISPATCH ppImageList;
  this->get_ImageList((LPDISPATCH*)&ppImageList);
  return ppImageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_TabFixedHeight(short* psTabFixedHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedHeight"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psTabFixedHeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
ITabStripDispT<T>::get_TabFixedHeight(void)
{
  short psTabFixedHeight;
  this->get_TabFixedHeight((short*)&psTabFixedHeight);
  return psTabFixedHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_TabFixedHeight(short psTabFixedHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedHeight"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = psTabFixedHeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_ShowTips(VARIANT_BOOL* pbShowTips/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowTips"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbShowTips /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_ShowTips(void)
{
  VARIANT_BOOL pbShowTips;
  this->get_ShowTips((VARIANT_BOOL*)&pbShowTips);
  return pbShowTips;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_ShowTips(VARIANT_BOOL pbShowTips/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowTips"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbShowTips /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_SelectedItem(Mscomctllib_xp::ITab** ppSelectedItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::ITab**)ppSelectedItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ITab* __fastcall
ITabStripDispT<T>::get_SelectedItem(void)
{
  Mscomctllib_xp::ITab* ppSelectedItem;
  this->get_SelectedItem((Mscomctllib_xp::ITab**)&ppSelectedItem);
  return ppSelectedItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::_set_SelectedItem(Mscomctllib_xp::ITab* ppSelectedItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::ITab*)ppSelectedItem /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_SelectedItem(VARIANT* ppSelectedItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = ppSelectedItem /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDropMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
ITabStripDispT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode);
  return psOLEDropMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDropMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::OLEDrag()
{
  _TDispID _dispid(*this, OLETEXT("OLEDrag"), DISPID(1552));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_HotTracking(VARIANT_BOOL* pbHotTracking/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotTracking"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbHotTracking /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_HotTracking(void)
{
  VARIANT_BOOL pbHotTracking;
  this->get_HotTracking((VARIANT_BOOL*)&pbHotTracking);
  return pbHotTracking;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_HotTracking(VARIANT_BOOL pbHotTracking/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotTracking"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pbHotTracking /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_MultiSelect(VARIANT_BOOL* pbMultiSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbMultiSelect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_MultiSelect(void)
{
  VARIANT_BOOL pbMultiSelect;
  this->get_MultiSelect((VARIANT_BOOL*)&pbMultiSelect);
  return pbMultiSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_MultiSelect(VARIANT_BOOL pbMultiSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pbMultiSelect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Placement(Mscomctllib_xp::PlacementConstants* penumPlacement/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Placement"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumPlacement /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::PlacementConstants __fastcall
ITabStripDispT<T>::get_Placement(void)
{
  Mscomctllib_xp::PlacementConstants penumPlacement;
  this->get_Placement((Mscomctllib_xp::PlacementConstants*)&penumPlacement);
  return penumPlacement;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_Placement(Mscomctllib_xp::PlacementConstants penumPlacement/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Placement"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int)penumPlacement /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_Separators(VARIANT_BOOL* pbSeparators/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Separators"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSeparators /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabStripDispT<T>::get_Separators(void)
{
  VARIANT_BOOL pbSeparators;
  this->get_Separators((VARIANT_BOOL*)&pbSeparators);
  return pbSeparators;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_Separators(VARIANT_BOOL pbSeparators/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Separators"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pbSeparators /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_TabMinWidth(float* pflTabMinWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabMinWidth"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflTabMinWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabStripDispT<T>::get_TabMinWidth(void)
{
  float pflTabMinWidth;
  this->get_TabMinWidth((float*)&pflTabMinWidth);
  return pflTabMinWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_TabMinWidth(float pflTabMinWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabMinWidth"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pflTabMinWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::get_TabStyle(Mscomctllib_xp::TabSelStyleConstants* penumTabStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStyle"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumTabStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::TabSelStyleConstants __fastcall
ITabStripDispT<T>::get_TabStyle(void)
{
  Mscomctllib_xp::TabSelStyleConstants penumTabStyle;
  this->get_TabStyle((Mscomctllib_xp::TabSelStyleConstants*)&penumTabStyle);
  return penumTabStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::set_TabStyle(Mscomctllib_xp::TabSelStyleConstants penumTabStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStyle"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = (int)penumTabStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabStripDispT<T>::DeselectAll()
{
  _TDispID _dispid(*this, OLETEXT("DeselectAll"), DISPID(22));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  ITabStripEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {1EFB6595-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::KeyDown(short* KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::KeyPress(short* KeyAscii)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = KeyAscii /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::KeyUp(short* KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::BeforeClick(short* Cancel)
{
  _TDispID _dispid(/* BeforeClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Cancel /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                      long* AllowedEffects/*[in,out]*/)
{
  _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = AllowedEffects /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                         VARIANT_BOOL* DefaultCursors/*[in,out]*/)
{
  _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
  TAutoArgs<2> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                    short* DataFormat/*[in,out]*/)
{
  _TDispID _dispid(/* OLESetData */ DISPID(1552));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = DataFormat /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::OLECompleteDrag(long* Effect/*[in,out]*/)
{
  _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
  TAutoArgs<1> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                     long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                     short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                     float* y/*[in,out]*/, short* State/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  _args[7] = State /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITabStripEventsDispT<T>::OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                     long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                     short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                     float* y/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
  TAutoArgs<6> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMITabs
// Interface: ITabs
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMITabsT<T>::get_Count(short* psCount/*[out,retval]*/)
{
  return (*this)->get_Count(psCount);
}

template <class T> short __fastcall
TCOMITabsT<T>::get_Count(void)
{
  short psCount;
  OLECHECK(this->get_Count((short*)&psCount));
  return psCount;
}

template <class T> HRESULT __fastcall
TCOMITabsT<T>::set_Count(short psCount/*[in]*/)
{
  return (*this)->set_Count(psCount);
}

template <class T> HRESULT __fastcall
TCOMITabsT<T>::get_ControlDefault(VARIANT* pvIndex/*[in]*/, 
                                  Mscomctllib_xp::ITab** ppTab/*[out,retval]*/)
{
  return (*this)->get_ControlDefault(pvIndex, ppTab);
}

template <class T> Mscomctllib_xp::ITab* __fastcall
TCOMITabsT<T>::get_ControlDefault(VARIANT* pvIndex/*[in]*/)
{
  Mscomctllib_xp::ITab* ppTab;
  OLECHECK(this->get_ControlDefault(, (Mscomctllib_xp::ITab**)&ppTab));
  return ppTab;
}

template <class T> HRESULT __fastcall
TCOMITabsT<T>::_set_ControlDefault(VARIANT* pvIndex/*[in]*/, Mscomctllib_xp::ITab* ppTab/*[in]*/)
{
  return (*this)->_set_ControlDefault(pvIndex, ppTab);
}

template <class T> HRESULT __fastcall
TCOMITabsT<T>::get_Item(VARIANT* pvIndex/*[in]*/, Mscomctllib_xp::ITab** ppTab/*[out,retval]*/)
{
  return (*this)->get_Item(pvIndex, ppTab);
}

template <class T> Mscomctllib_xp::ITab* __fastcall
TCOMITabsT<T>::get_Item(VARIANT* pvIndex/*[in]*/)
{
  Mscomctllib_xp::ITab* ppTab;
  OLECHECK(this->get_Item(, (Mscomctllib_xp::ITab**)&ppTab));
  return ppTab;
}

template <class T> HRESULT __fastcall
TCOMITabsT<T>::_set_Item(VARIANT* pvIndex/*[in]*/, Mscomctllib_xp::ITab* ppTab/*[in]*/)
{
  return (*this)->_set_Item(pvIndex, ppTab);
}

template <class T> HRESULT __fastcall
TCOMITabsT<T>::Remove(VARIANT* pvIndex/*[in]*/)
{
  return (*this)->Remove(pvIndex);
}

template <class T> HRESULT __fastcall
TCOMITabsT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMITabsT<T>::Add(VARIANT* pvIndex/*[in,opt]*/, VARIANT* pvKey/*[in,opt]*/, 
                   VARIANT* pvCaption/*[in,opt]*/, VARIANT* pvImage/*[in,opt]*/, 
                   Mscomctllib_xp::ITab** ppTab/*[out,retval]*/)
{
  return (*this)->Add(pvIndex, pvKey, pvCaption, pvImage, ppTab);
}

template <class T> Mscomctllib_xp::ITab* __fastcall
TCOMITabsT<T>::Add(VARIANT* pvIndex/*[in,opt]*/, VARIANT* pvKey/*[in,opt]*/, 
                   VARIANT* pvCaption/*[in,opt]*/, VARIANT* pvImage/*[in,opt]*/)
{
  Mscomctllib_xp::ITab* ppTab;
  OLECHECK(this->Add(, (Mscomctllib_xp::ITab**)&ppTab));
  return ppTab;
}

template <class T> HRESULT __fastcall
TCOMITabsT<T>::_NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppNewEnum);
}

template <class T> LPDISPATCH __fastcall
TCOMITabsT<T>::_NewEnum(void)
{
  LPDISPATCH ppNewEnum;
  OLECHECK(this->_NewEnum((LPDISPATCH*)&ppNewEnum));
  return ppNewEnum;
}

// *********************************************************************//
// DispIntf:  ITabs
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1EFB6597-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabsDispT<T>::get_Count(short* psCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psCount /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
ITabsDispT<T>::get_Count(void)
{
  short psCount;
  this->get_Count((short*)&psCount);
  return psCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabsDispT<T>::set_Count(short psCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = psCount /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabsDispT<T>::get_ControlDefault(VARIANT* pvIndex/*[in]*/, 
                                  Mscomctllib_xp::ITab** ppTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pvIndex /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::ITab**)ppTab /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ITab* __fastcall
ITabsDispT<T>::get_ControlDefault(VARIANT* pvIndex/*[in]*/)
{
  Mscomctllib_xp::ITab* ppTab;
  this->get_ControlDefault(pvIndex, (Mscomctllib_xp::ITab**)&ppTab);
  return ppTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabsDispT<T>::_set_ControlDefault(VARIANT* pvIndex/*[in]*/, Mscomctllib_xp::ITab* ppTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = pvIndex /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::ITab*)ppTab /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabsDispT<T>::get_Item(VARIANT* pvIndex/*[in]*/, Mscomctllib_xp::ITab** ppTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pvIndex /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::ITab**)ppTab /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ITab* __fastcall
ITabsDispT<T>::get_Item(VARIANT* pvIndex/*[in]*/)
{
  Mscomctllib_xp::ITab* ppTab;
  this->get_Item(pvIndex, (Mscomctllib_xp::ITab**)&ppTab);
  return ppTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabsDispT<T>::_set_Item(VARIANT* pvIndex/*[in]*/, Mscomctllib_xp::ITab* ppTab/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = pvIndex /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::ITab*)ppTab /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabsDispT<T>::Remove(VARIANT* pvIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pvIndex /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabsDispT<T>::Add(VARIANT* pvIndex/*[in,opt]*/, VARIANT* pvKey/*[in,opt]*/, 
                   VARIANT* pvCaption/*[in,opt]*/, VARIANT* pvImage/*[in,opt]*/, 
                   Mscomctllib_xp::ITab** ppTab/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(5));
  TAutoArgs<4> _args;
  _args[1] = pvIndex /*[VT_VARIANT:1]*/;
  _args[2] = pvKey /*[VT_VARIANT:1]*/;
  _args[3] = pvCaption /*[VT_VARIANT:1]*/;
  _args[4] = pvImage /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::ITab**)ppTab /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::ITab* __fastcall
ITabsDispT<T>::Add(VARIANT* pvIndex/*[in,opt]*/, VARIANT* pvKey/*[in,opt]*/, 
                   VARIANT* pvCaption/*[in,opt]*/, VARIANT* pvImage/*[in,opt]*/)
{
  Mscomctllib_xp::ITab* ppTab;
  this->Add(pvIndex, pvKey, pvCaption, pvImage, (Mscomctllib_xp::ITab**)&ppTab);
  return ppTab;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabsDispT<T>::_NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppNewEnum /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ITabsDispT<T>::_NewEnum(void)
{
  LPDISPATCH ppNewEnum;
  this->_NewEnum((LPDISPATCH*)&ppNewEnum);
  return ppNewEnum;
}

// *********************************************************************//
// SmartIntf: TCOMITab
// Interface: ITab
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMITabT<T>::get__ObjectDefault(BSTR* pbstrCaption/*[out,retval]*/)
{
  return (*this)->get__ObjectDefault(pbstrCaption);
}

template <class T> BSTR __fastcall
TCOMITabT<T>::get__ObjectDefault(void)
{
  BSTR pbstrCaption = 0;
  OLECHECK(this->get__ObjectDefault((BSTR*)&pbstrCaption));
  return pbstrCaption;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set__ObjectDefault(BSTR pbstrCaption/*[in]*/)
{
  return (*this)->set__ObjectDefault(pbstrCaption);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  return (*this)->get_Caption(pbstrCaption);
}

template <class T> BSTR __fastcall
TCOMITabT<T>::get_Caption(void)
{
  BSTR pbstrCaption = 0;
  OLECHECK(this->get_Caption((BSTR*)&pbstrCaption));
  return pbstrCaption;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  return (*this)->set_Caption(pbstrCaption);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  return (*this)->get_Tag(pvTag);
}

template <class T> VARIANT __fastcall
TCOMITabT<T>::get_Tag(void)
{
  VARIANT pvTag;
  OLECHECK(this->get_Tag((VARIANT*)&pvTag));
  return pvTag;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Index(short* psIndex/*[out,retval]*/)
{
  return (*this)->get_Index(psIndex);
}

template <class T> short __fastcall
TCOMITabT<T>::get_Index(void)
{
  short psIndex;
  OLECHECK(this->get_Index((short*)&psIndex));
  return psIndex;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Index(short psIndex/*[in]*/)
{
  return (*this)->set_Index(psIndex);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  return (*this)->get_Key(pbstrKey);
}

template <class T> BSTR __fastcall
TCOMITabT<T>::get_Key(void)
{
  BSTR pbstrKey = 0;
  OLECHECK(this->get_Key((BSTR*)&pbstrKey));
  return pbstrKey;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  return (*this)->set_Key(pbstrKey);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/)
{
  return (*this)->get_ToolTipText(pbstrToolTipText);
}

template <class T> BSTR __fastcall
TCOMITabT<T>::get_ToolTipText(void)
{
  BSTR pbstrToolTipText = 0;
  OLECHECK(this->get_ToolTipText((BSTR*)&pbstrToolTipText));
  return pbstrToolTipText;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_ToolTipText(BSTR pbstrToolTipText/*[in]*/)
{
  return (*this)->set_ToolTipText(pbstrToolTipText);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Width(float* pfWidth/*[out,retval]*/)
{
  return (*this)->get_Width(pfWidth);
}

template <class T> float __fastcall
TCOMITabT<T>::get_Width(void)
{
  float pfWidth;
  OLECHECK(this->get_Width((float*)&pfWidth));
  return pfWidth;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Width(float pfWidth/*[in]*/)
{
  return (*this)->set_Width(pfWidth);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Height(float* pfHeight/*[out,retval]*/)
{
  return (*this)->get_Height(pfHeight);
}

template <class T> float __fastcall
TCOMITabT<T>::get_Height(void)
{
  float pfHeight;
  OLECHECK(this->get_Height((float*)&pfHeight));
  return pfHeight;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Height(float pfHeight/*[in]*/)
{
  return (*this)->set_Height(pfHeight);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Top(float* pfTop/*[out,retval]*/)
{
  return (*this)->get_Top(pfTop);
}

template <class T> float __fastcall
TCOMITabT<T>::get_Top(void)
{
  float pfTop;
  OLECHECK(this->get_Top((float*)&pfTop));
  return pfTop;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Top(float pfTop/*[in]*/)
{
  return (*this)->set_Top(pfTop);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Left(float* pfLeft/*[out,retval]*/)
{
  return (*this)->get_Left(pfLeft);
}

template <class T> float __fastcall
TCOMITabT<T>::get_Left(void)
{
  float pfLeft;
  OLECHECK(this->get_Left((float*)&pfLeft));
  return pfLeft;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Left(float pfLeft/*[in]*/)
{
  return (*this)->set_Left(pfLeft);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/)
{
  return (*this)->get_Selected(pbSelected);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Selected(TOLEBOOL* pbSelected/*[out,retval]*/)
{
  return (*this)->get_Selected(VARIANT_BOOL*)pbSelected);
}

template <class T> TOLEBOOL __fastcall
TCOMITabT<T>::get_Selected(void)
{
  VARIANT_BOOL pbSelected;
  OLECHECK(this->get_Selected((VARIANT_BOOL*)&pbSelected));
  return (TOLEBOOL)pbSelected;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Selected(VARIANT_BOOL pbSelected/*[in]*/)
{
  return (*this)->set_Selected(pbSelected);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Selected(TOLEBOOL pbSelected/*[in]*/)
{
  return (*this)->set_Selected(VARIANT_BOOL)pbSelected);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_Image(VARIANT* pvImage/*[out,retval]*/)
{
  return (*this)->get_Image(pvImage);
}

template <class T> VARIANT __fastcall
TCOMITabT<T>::get_Image(void)
{
  VARIANT pvImage;
  OLECHECK(this->get_Image((VARIANT*)&pvImage));
  return pvImage;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_Image(VARIANT pvImage/*[in]*/)
{
  return (*this)->set_Image(pvImage);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_HighLighted(VARIANT_BOOL* pbHighLighted/*[out,retval]*/)
{
  return (*this)->get_HighLighted(pbHighLighted);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::get_HighLighted(TOLEBOOL* pbHighLighted/*[out,retval]*/)
{
  return (*this)->get_HighLighted(VARIANT_BOOL*)pbHighLighted);
}

template <class T> TOLEBOOL __fastcall
TCOMITabT<T>::get_HighLighted(void)
{
  VARIANT_BOOL pbHighLighted;
  OLECHECK(this->get_HighLighted((VARIANT_BOOL*)&pbHighLighted));
  return (TOLEBOOL)pbHighLighted;
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_HighLighted(VARIANT_BOOL pbHighLighted/*[in]*/)
{
  return (*this)->set_HighLighted(pbHighLighted);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::set_HighLighted(TOLEBOOL pbHighLighted/*[in]*/)
{
  return (*this)->set_HighLighted(VARIANT_BOOL)pbHighLighted);
}

template <class T> HRESULT __fastcall
TCOMITabT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->_set_Tag(pvTag);
}

// *********************************************************************//
// DispIntf:  ITab
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1EFB6599-857C-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get__ObjectDefault(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITabDispT<T>::get__ObjectDefault(void)
{
  BSTR pbstrCaption;
  this->get__ObjectDefault((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set__ObjectDefault(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITabDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvTag /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITabDispT<T>::get_Tag(void)
{
  VARIANT pvTag;
  this->get_Tag((VARIANT*)&pvTag);
  return pvTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_Index(short* psIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psIndex /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
ITabDispT<T>::get_Index(void)
{
  short psIndex;
  this->get_Index((short*)&psIndex);
  return psIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_Index(short psIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = psIndex /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITabDispT<T>::get_Key(void)
{
  BSTR pbstrKey;
  this->get_Key((BSTR*)&pbstrKey);
  return pbstrKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pbstrKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolTipText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrToolTipText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITabDispT<T>::get_ToolTipText(void)
{
  BSTR pbstrToolTipText;
  this->get_ToolTipText((BSTR*)&pbstrToolTipText);
  return pbstrToolTipText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_ToolTipText(BSTR pbstrToolTipText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolTipText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pbstrToolTipText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_Width(float* pfWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabDispT<T>::get_Width(void)
{
  float pfWidth;
  this->get_Width((float*)&pfWidth);
  return pfWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_Width(float pfWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pfWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_Height(float* pfHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabDispT<T>::get_Height(void)
{
  float pfHeight;
  this->get_Height((float*)&pfHeight);
  return pfHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_Height(float pfHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pfHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_Top(float* pfTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabDispT<T>::get_Top(void)
{
  float pfTop;
  this->get_Top((float*)&pfTop);
  return pfTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_Top(float pfTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pfTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_Left(float* pfLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITabDispT<T>::get_Left(void)
{
  float pfLeft;
  this->get_Left((float*)&pfLeft);
  return pfLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_Left(float pfLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pfLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSelected /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabDispT<T>::get_Selected(void)
{
  VARIANT_BOOL pbSelected;
  this->get_Selected((VARIANT_BOOL*)&pbSelected);
  return pbSelected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_Selected(VARIANT_BOOL pbSelected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pbSelected /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_Image(VARIANT* pvImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvImage /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ITabDispT<T>::get_Image(void)
{
  VARIANT pvImage;
  this->get_Image((VARIANT*)&pvImage);
  return pvImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_Image(VARIANT pvImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pvImage /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::get_HighLighted(VARIANT_BOOL* pbHighLighted/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HighLighted"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbHighLighted /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITabDispT<T>::get_HighLighted(void)
{
  VARIANT_BOOL pbHighLighted;
  this->get_HighLighted((VARIANT_BOOL*)&pbHighLighted);
  return pbHighLighted;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::set_HighLighted(VARIANT_BOOL pbHighLighted/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HighLighted"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pbHighLighted /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITabDispT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIToolbar
// Interface: IToolbar
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_Appearance(Mscomctllib_xp::AppearanceConstants* pnAppearance/*[out,retval]*/)
{
  return (*this)->get_Appearance(pnAppearance);
}

template <class T> Mscomctllib_xp::AppearanceConstants __fastcall
TCOMIToolbarT<T>::get_Appearance(void)
{
  Mscomctllib_xp::AppearanceConstants pnAppearance;
  OLECHECK(this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&pnAppearance));
  return pnAppearance;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_Appearance(Mscomctllib_xp::AppearanceConstants pnAppearance/*[in]*/)
{
  return (*this)->set_Appearance(pnAppearance);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_AllowCustomize(VARIANT_BOOL* pbAllowCustomize/*[out,retval]*/)
{
  return (*this)->get_AllowCustomize(pbAllowCustomize);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_AllowCustomize(TOLEBOOL* pbAllowCustomize/*[out,retval]*/)
{
  return (*this)->get_AllowCustomize(VARIANT_BOOL*)pbAllowCustomize);
}

template <class T> TOLEBOOL __fastcall
TCOMIToolbarT<T>::get_AllowCustomize(void)
{
  VARIANT_BOOL pbAllowCustomize;
  OLECHECK(this->get_AllowCustomize((VARIANT_BOOL*)&pbAllowCustomize));
  return (TOLEBOOL)pbAllowCustomize;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_AllowCustomize(VARIANT_BOOL pbAllowCustomize/*[in]*/)
{
  return (*this)->set_AllowCustomize(pbAllowCustomize);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_AllowCustomize(TOLEBOOL pbAllowCustomize/*[in]*/)
{
  return (*this)->set_AllowCustomize(VARIANT_BOOL)pbAllowCustomize);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_Buttons(Mscomctllib_xp::IButtons** ppButtons/*[out,retval]*/)
{
  return (*this)->get_Buttons(ppButtons);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_Buttons(Mscomctllib_xp::IButtonsPtr* ppButtons/*[out,retval]*/)
{
  return (*this)->get_Buttons(IButtons**)ppButtons);
}

template <class T> Mscomctllib_xp::IButtonsPtr __fastcall
TCOMIToolbarT<T>::get_Buttons(void)
{
  Mscomctllib_xp::IButtons* ppButtons;
  OLECHECK(this->get_Buttons((Mscomctllib_xp::IButtons**)&ppButtons));
  return (Mscomctllib_xp::IButtonsPtr)ppButtons;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::_set_Buttons(Mscomctllib_xp::IButtons* ppButtons/*[in]*/)
{
  return (*this)->_set_Buttons(ppButtons);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::_set_Buttons(Mscomctllib_xp::IButtonsPtr ppButtons/*[in]*/)
{
  return (*this)->_set_Buttons(IButtons*)ppButtons);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_Controls(Mscomctllib_xp::IControls** ppControls/*[out,retval]*/)
{
  return (*this)->get_Controls(ppControls);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_Controls(Mscomctllib_xp::IControlsPtr* ppControls/*[out,retval]*/)
{
  return (*this)->get_Controls(IControls**)ppControls);
}

template <class T> Mscomctllib_xp::IControlsPtr __fastcall
TCOMIToolbarT<T>::get_Controls(void)
{
  Mscomctllib_xp::IControls* ppControls;
  OLECHECK(this->get_Controls((Mscomctllib_xp::IControls**)&ppControls));
  return (Mscomctllib_xp::IControlsPtr)ppControls;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pbEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIToolbarT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
  return (TOLEBOOL)pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_Enabled(TOLEBOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  return (*this)->get_hWnd(phWnd);
}

template <class T> OLE_HANDLE __fastcall
TCOMIToolbarT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
  return phWnd;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  return (*this)->set_hWnd(phWnd);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(ppMouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIToolbarT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
  return ppMouseIcon;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(psMousePointer);
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
TCOMIToolbarT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants psMousePointer;
  OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer));
  return psMousePointer;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(psMousePointer);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  return (*this)->get_ImageList(ppImageList);
}

template <class T> LPDISPATCH __fastcall
TCOMIToolbarT<T>::get_ImageList(void)
{
  LPDISPATCH ppImageList;
  OLECHECK(this->get_ImageList((LPDISPATCH*)&ppImageList));
  return ppImageList;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->set_ImageList(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::_set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->_set_ImageList(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_ShowTips(VARIANT_BOOL* bShowTips/*[out,retval]*/)
{
  return (*this)->get_ShowTips(bShowTips);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_ShowTips(TOLEBOOL* bShowTips/*[out,retval]*/)
{
  return (*this)->get_ShowTips(VARIANT_BOOL*)bShowTips);
}

template <class T> TOLEBOOL __fastcall
TCOMIToolbarT<T>::get_ShowTips(void)
{
  VARIANT_BOOL bShowTips;
  OLECHECK(this->get_ShowTips((VARIANT_BOOL*)&bShowTips));
  return (TOLEBOOL)bShowTips;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_ShowTips(VARIANT_BOOL bShowTips/*[in]*/)
{
  return (*this)->set_ShowTips(bShowTips);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_ShowTips(TOLEBOOL bShowTips/*[in]*/)
{
  return (*this)->set_ShowTips(VARIANT_BOOL)bShowTips);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(psBorderStyle);
}

template <class T> Mscomctllib_xp::BorderStyleConstants __fastcall
TCOMIToolbarT<T>::get_BorderStyle(void)
{
  Mscomctllib_xp::BorderStyleConstants psBorderStyle;
  OLECHECK(this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&psBorderStyle));
  return psBorderStyle;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/)
{
  return (*this)->set_BorderStyle(psBorderStyle);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_Wrappable(VARIANT_BOOL* pbWrappable/*[out,retval]*/)
{
  return (*this)->get_Wrappable(pbWrappable);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_Wrappable(TOLEBOOL* pbWrappable/*[out,retval]*/)
{
  return (*this)->get_Wrappable(VARIANT_BOOL*)pbWrappable);
}

template <class T> TOLEBOOL __fastcall
TCOMIToolbarT<T>::get_Wrappable(void)
{
  VARIANT_BOOL pbWrappable;
  OLECHECK(this->get_Wrappable((VARIANT_BOOL*)&pbWrappable));
  return (TOLEBOOL)pbWrappable;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_Wrappable(VARIANT_BOOL pbWrappable/*[in]*/)
{
  return (*this)->set_Wrappable(pbWrappable);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_Wrappable(TOLEBOOL pbWrappable/*[in]*/)
{
  return (*this)->set_Wrappable(VARIANT_BOOL)pbWrappable);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_ButtonHeight(float* pfButtonHeight/*[out,retval]*/)
{
  return (*this)->get_ButtonHeight(pfButtonHeight);
}

template <class T> float __fastcall
TCOMIToolbarT<T>::get_ButtonHeight(void)
{
  float pfButtonHeight;
  OLECHECK(this->get_ButtonHeight((float*)&pfButtonHeight));
  return pfButtonHeight;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_ButtonHeight(float pfButtonHeight/*[in]*/)
{
  return (*this)->set_ButtonHeight(pfButtonHeight);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_ButtonWidth(float* pfButtonWidth/*[out,retval]*/)
{
  return (*this)->get_ButtonWidth(pfButtonWidth);
}

template <class T> float __fastcall
TCOMIToolbarT<T>::get_ButtonWidth(void)
{
  float pfButtonWidth;
  OLECHECK(this->get_ButtonWidth((float*)&pfButtonWidth));
  return pfButtonWidth;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_ButtonWidth(float pfButtonWidth/*[in]*/)
{
  return (*this)->set_ButtonWidth(pfButtonWidth);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_HelpContextID(long* plHelpContextID/*[out,retval]*/)
{
  return (*this)->get_HelpContextID(plHelpContextID);
}

template <class T> long __fastcall
TCOMIToolbarT<T>::get_HelpContextID(void)
{
  long plHelpContextID;
  OLECHECK(this->get_HelpContextID((long*)&plHelpContextID));
  return plHelpContextID;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_HelpContextID(long plHelpContextID/*[in]*/)
{
  return (*this)->set_HelpContextID(plHelpContextID);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_HelpFile(BSTR* pbstrHelpFile/*[out,retval]*/)
{
  return (*this)->get_HelpFile(pbstrHelpFile);
}

template <class T> BSTR __fastcall
TCOMIToolbarT<T>::get_HelpFile(void)
{
  BSTR pbstrHelpFile = 0;
  OLECHECK(this->get_HelpFile((BSTR*)&pbstrHelpFile));
  return pbstrHelpFile;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_HelpFile(BSTR pbstrHelpFile/*[in]*/)
{
  return (*this)->set_HelpFile(pbstrHelpFile);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  return (*this)->get_OLEDropMode(psOLEDropMode);
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
TCOMIToolbarT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
  return psOLEDropMode;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  return (*this)->set_OLEDropMode(psOLEDropMode);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::Customize(void)
{
  return (*this)->Customize();
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::SaveToolbar(BSTR Key/*[in]*/, BSTR Subkey/*[in]*/, BSTR Value/*[in]*/)
{
  return (*this)->SaveToolbar(Key, Subkey, Value);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::RestoreToolbar(BSTR Key/*[in]*/, BSTR Subkey/*[in]*/, BSTR Value/*[in]*/)
{
  return (*this)->RestoreToolbar(Key, Subkey, Value);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::OLEDrag(void)
{
  return (*this)->OLEDrag();
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::AboutBox(void)
{
  return (*this)->AboutBox();
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_DisabledImageList(LPDISPATCH* ppDisabledImageList/*[out,retval]*/)
{
  return (*this)->get_DisabledImageList(ppDisabledImageList);
}

template <class T> LPDISPATCH __fastcall
TCOMIToolbarT<T>::get_DisabledImageList(void)
{
  LPDISPATCH ppDisabledImageList;
  OLECHECK(this->get_DisabledImageList((LPDISPATCH*)&ppDisabledImageList));
  return ppDisabledImageList;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_DisabledImageList(LPDISPATCH ppDisabledImageList/*[in]*/)
{
  return (*this)->set_DisabledImageList(ppDisabledImageList);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::_set_DisabledImageList(LPDISPATCH ppDisabledImageList/*[in]*/)
{
  return (*this)->_set_DisabledImageList(ppDisabledImageList);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_HotImageList(LPDISPATCH* ppHotImageList/*[out,retval]*/)
{
  return (*this)->get_HotImageList(ppHotImageList);
}

template <class T> LPDISPATCH __fastcall
TCOMIToolbarT<T>::get_HotImageList(void)
{
  LPDISPATCH ppHotImageList;
  OLECHECK(this->get_HotImageList((LPDISPATCH*)&ppHotImageList));
  return ppHotImageList;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_HotImageList(LPDISPATCH ppHotImageList/*[in]*/)
{
  return (*this)->set_HotImageList(ppHotImageList);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::_set_HotImageList(LPDISPATCH ppHotImageList/*[in]*/)
{
  return (*this)->_set_HotImageList(ppHotImageList);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_Style(Mscomctllib_xp::ToolbarStyleConstants* penumStyle/*[out,retval]*/)
{
  return (*this)->get_Style(penumStyle);
}

template <class T> Mscomctllib_xp::ToolbarStyleConstants __fastcall
TCOMIToolbarT<T>::get_Style(void)
{
  Mscomctllib_xp::ToolbarStyleConstants penumStyle;
  OLECHECK(this->get_Style((Mscomctllib_xp::ToolbarStyleConstants*)&penumStyle));
  return penumStyle;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_Style(Mscomctllib_xp::ToolbarStyleConstants penumStyle/*[in]*/)
{
  return (*this)->set_Style(penumStyle);
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::get_TextAlignment(Mscomctllib_xp::ToolbarTextAlignConstants* penumTextAlignment/*[out,retval]*/)
{
  return (*this)->get_TextAlignment(penumTextAlignment);
}

template <class T> Mscomctllib_xp::ToolbarTextAlignConstants __fastcall
TCOMIToolbarT<T>::get_TextAlignment(void)
{
  Mscomctllib_xp::ToolbarTextAlignConstants penumTextAlignment;
  OLECHECK(this->get_TextAlignment((Mscomctllib_xp::ToolbarTextAlignConstants*)&penumTextAlignment));
  return penumTextAlignment;
}

template <class T> HRESULT __fastcall
TCOMIToolbarT<T>::set_TextAlignment(Mscomctllib_xp::ToolbarTextAlignConstants penumTextAlignment/*[in]*/)
{
  return (*this)->set_TextAlignment(penumTextAlignment);
}

// *********************************************************************//
// DispIntf:  IToolbar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FE4-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_Appearance(Mscomctllib_xp::AppearanceConstants* pnAppearance/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Appearance"), DISPID(-520));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pnAppearance /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::AppearanceConstants __fastcall
IToolbarDispT<T>::get_Appearance(void)
{
  Mscomctllib_xp::AppearanceConstants pnAppearance;
  this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&pnAppearance);
  return pnAppearance;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_Appearance(Mscomctllib_xp::AppearanceConstants pnAppearance/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Appearance"), DISPID(-520));
  TAutoArgs<1> _args;
  _args[1] = (int)pnAppearance /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_AllowCustomize(VARIANT_BOOL* pbAllowCustomize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowCustomize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbAllowCustomize /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IToolbarDispT<T>::get_AllowCustomize(void)
{
  VARIANT_BOOL pbAllowCustomize;
  this->get_AllowCustomize((VARIANT_BOOL*)&pbAllowCustomize);
  return pbAllowCustomize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_AllowCustomize(VARIANT_BOOL pbAllowCustomize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowCustomize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pbAllowCustomize /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_Buttons(Mscomctllib_xp::IButtons** ppButtons/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Buttons"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IButtons**)ppButtons /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IButtons* __fastcall
IToolbarDispT<T>::get_Buttons(void)
{
  Mscomctllib_xp::IButtons* ppButtons;
  this->get_Buttons((Mscomctllib_xp::IButtons**)&ppButtons);
  return ppButtons;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::_set_Buttons(Mscomctllib_xp::IButtons* ppButtons/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Buttons"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IButtons*)ppButtons /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_Controls(Mscomctllib_xp::IControls** ppControls/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IControls**)ppControls /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IControls* __fastcall
IToolbarDispT<T>::get_Controls(void)
{
  Mscomctllib_xp::IControls* ppControls;
  this->get_Controls((Mscomctllib_xp::IControls**)&ppControls);
  return ppControls;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IToolbarDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phWnd /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_HANDLE __fastcall
IToolbarDispT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  this->get_hWnd((OLE_HANDLE*)&phWnd);
  return phWnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<1> _args;
  _args[1] = phWnd /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppMouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IToolbarDispT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  this->get_MouseIcon((IPictureDisp**)&ppMouseIcon);
  return ppMouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psMousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
IToolbarDispT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants psMousePointer;
  this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer);
  return psMousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (int)psMousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppImageList /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IToolbarDispT<T>::get_ImageList(void)
{
  LPDISPATCH ppImageList;
  this->get_ImageList((LPDISPATCH*)&ppImageList);
  return ppImageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::_set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_ShowTips(VARIANT_BOOL* bShowTips/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowTips"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bShowTips /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IToolbarDispT<T>::get_ShowTips(void)
{
  VARIANT_BOOL bShowTips;
  this->get_ShowTips((VARIANT_BOOL*)&bShowTips);
  return bShowTips;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_ShowTips(VARIANT_BOOL bShowTips/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowTips"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = bShowTips /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psBorderStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::BorderStyleConstants __fastcall
IToolbarDispT<T>::get_BorderStyle(void)
{
  Mscomctllib_xp::BorderStyleConstants psBorderStyle;
  this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&psBorderStyle);
  return psBorderStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)psBorderStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_Wrappable(VARIANT_BOOL* pbWrappable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Wrappable"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbWrappable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IToolbarDispT<T>::get_Wrappable(void)
{
  VARIANT_BOOL pbWrappable;
  this->get_Wrappable((VARIANT_BOOL*)&pbWrappable);
  return pbWrappable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_Wrappable(VARIANT_BOOL pbWrappable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Wrappable"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pbWrappable /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_ButtonHeight(float* pfButtonHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonHeight"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfButtonHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IToolbarDispT<T>::get_ButtonHeight(void)
{
  float pfButtonHeight;
  this->get_ButtonHeight((float*)&pfButtonHeight);
  return pfButtonHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_ButtonHeight(float pfButtonHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonHeight"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pfButtonHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_ButtonWidth(float* pfButtonWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonWidth"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfButtonWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IToolbarDispT<T>::get_ButtonWidth(void)
{
  float pfButtonWidth;
  this->get_ButtonWidth((float*)&pfButtonWidth);
  return pfButtonWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_ButtonWidth(float pfButtonWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonWidth"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pfButtonWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_HelpContextID(long* plHelpContextID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextID"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plHelpContextID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IToolbarDispT<T>::get_HelpContextID(void)
{
  long plHelpContextID;
  this->get_HelpContextID((long*)&plHelpContextID);
  return plHelpContextID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_HelpContextID(long plHelpContextID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextID"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = plHelpContextID /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_HelpFile(BSTR* pbstrHelpFile/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrHelpFile /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IToolbarDispT<T>::get_HelpFile(void)
{
  BSTR pbstrHelpFile;
  this->get_HelpFile((BSTR*)&pbstrHelpFile);
  return pbstrHelpFile;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_HelpFile(BSTR pbstrHelpFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pbstrHelpFile /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDropMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
IToolbarDispT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode);
  return psOLEDropMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDropMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::Customize()
{
  _TDispID _dispid(*this, OLETEXT("Customize"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::SaveToolbar(BSTR Key/*[in]*/, BSTR Subkey/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveToolbar"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = Key /*[VT_BSTR:0]*/;
  _args[2] = Subkey /*[VT_BSTR:0]*/;
  _args[3] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::RestoreToolbar(BSTR Key/*[in]*/, BSTR Subkey/*[in]*/, BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RestoreToolbar"), DISPID(12));
  TAutoArgs<3> _args;
  _args[1] = Key /*[VT_BSTR:0]*/;
  _args[2] = Subkey /*[VT_BSTR:0]*/;
  _args[3] = Value /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::OLEDrag()
{
  _TDispID _dispid(*this, OLETEXT("OLEDrag"), DISPID(1552));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_DisabledImageList(LPDISPATCH* ppDisabledImageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisabledImageList"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDisabledImageList /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IToolbarDispT<T>::get_DisabledImageList(void)
{
  LPDISPATCH ppDisabledImageList;
  this->get_DisabledImageList((LPDISPATCH*)&ppDisabledImageList);
  return ppDisabledImageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_DisabledImageList(LPDISPATCH ppDisabledImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisabledImageList"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = ppDisabledImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::_set_DisabledImageList(LPDISPATCH ppDisabledImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisabledImageList"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = ppDisabledImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_HotImageList(LPDISPATCH* ppHotImageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotImageList"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppHotImageList /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IToolbarDispT<T>::get_HotImageList(void)
{
  LPDISPATCH ppHotImageList;
  this->get_HotImageList((LPDISPATCH*)&ppHotImageList);
  return ppHotImageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_HotImageList(LPDISPATCH ppHotImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotImageList"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = ppHotImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::_set_HotImageList(LPDISPATCH ppHotImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotImageList"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = ppHotImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_Style(Mscomctllib_xp::ToolbarStyleConstants* penumStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ToolbarStyleConstants __fastcall
IToolbarDispT<T>::get_Style(void)
{
  Mscomctllib_xp::ToolbarStyleConstants penumStyle;
  this->get_Style((Mscomctllib_xp::ToolbarStyleConstants*)&penumStyle);
  return penumStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_Style(Mscomctllib_xp::ToolbarStyleConstants penumStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (int)penumStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::get_TextAlignment(Mscomctllib_xp::ToolbarTextAlignConstants* penumTextAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlignment"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumTextAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ToolbarTextAlignConstants __fastcall
IToolbarDispT<T>::get_TextAlignment(void)
{
  Mscomctllib_xp::ToolbarTextAlignConstants penumTextAlignment;
  this->get_TextAlignment((Mscomctllib_xp::ToolbarTextAlignConstants*)&penumTextAlignment);
  return penumTextAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IToolbarDispT<T>::set_TextAlignment(Mscomctllib_xp::ToolbarTextAlignConstants penumTextAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlignment"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = (int)penumTextAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IToolbarEvents
// Flags:     (4096) Dispatchable
// GUID:      {66833FE5-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::ButtonClick(Mscomctllib_xp::Button* Button)
{
  _TDispID _dispid(/* ButtonClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::Button*)Button /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::DblClick()
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                     long* AllowedEffects/*[in,out]*/)
{
  _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = AllowedEffects /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                        VARIANT_BOOL* DefaultCursors/*[in,out]*/)
{
  _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
  TAutoArgs<2> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                   short* DataFormat/*[in,out]*/)
{
  _TDispID _dispid(/* OLESetData */ DISPID(1552));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = DataFormat /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::OLECompleteDrag(long* Effect/*[in,out]*/)
{
  _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
  TAutoArgs<1> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                    long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                    short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                    float* y/*[in,out]*/, short* State/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  _args[7] = State /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                    long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                    short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                    float* y/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
  TAutoArgs<6> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::ButtonMenuClick(Mscomctllib_xp::ButtonMenu* ButtonMenu)
{
  _TDispID _dispid(/* ButtonMenuClick */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::ButtonMenu*)ButtonMenu /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IToolbarEventsDispT<T>::ButtonDropDown(Mscomctllib_xp::Button* Button)
{
  _TDispID _dispid(/* ButtonDropDown */ DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::Button*)Button /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIButtons
// Interface: IButtons
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIButtonsT<T>::get_Count(short* psCount/*[out,retval]*/)
{
  return (*this)->get_Count(psCount);
}

template <class T> short __fastcall
TCOMIButtonsT<T>::get_Count(void)
{
  short psCount;
  OLECHECK(this->get_Count((short*)&psCount));
  return psCount;
}

template <class T> HRESULT __fastcall
TCOMIButtonsT<T>::set_Count(short psCount/*[in]*/)
{
  return (*this)->set_Count(psCount);
}

template <class T> HRESULT __fastcall
TCOMIButtonsT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                     Mscomctllib_xp::IButton** ppButton/*[out,retval]*/)
{
  return (*this)->get_ControlDefault(Index, ppButton);
}

template <class T> Mscomctllib_xp::IButton* __fastcall
TCOMIButtonsT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IButton* ppButton;
  OLECHECK(this->get_ControlDefault(, (Mscomctllib_xp::IButton**)&ppButton));
  return ppButton;
}

template <class T> HRESULT __fastcall
TCOMIButtonsT<T>::_set_ControlDefault(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IButton* ppButton/*[in]*/)
{
  return (*this)->_set_ControlDefault(Index, ppButton);
}

template <class T> HRESULT __fastcall
TCOMIButtonsT<T>::get_Item(VARIANT* Index/*[in]*/, 
                           Mscomctllib_xp::IButton** ppButton/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppButton);
}

template <class T> Mscomctllib_xp::IButton* __fastcall
TCOMIButtonsT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IButton* ppButton;
  OLECHECK(this->get_Item(, (Mscomctllib_xp::IButton**)&ppButton));
  return ppButton;
}

template <class T> HRESULT __fastcall
TCOMIButtonsT<T>::_set_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IButton* ppButton/*[in]*/)
{
  return (*this)->_set_Item(Index, ppButton);
}

template <class T> HRESULT __fastcall
TCOMIButtonsT<T>::Remove(VARIANT* Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIButtonsT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIButtonsT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                      VARIANT* Caption/*[in,opt]*/, VARIANT* Style/*[in,opt]*/, 
                      VARIANT* Image/*[in,opt]*/, Mscomctllib_xp::IButton** ppButton/*[out,retval]*/)
{
  return (*this)->Add(Index, Key, Caption, Style, Image, ppButton);
}

template <class T> Mscomctllib_xp::IButton* __fastcall
TCOMIButtonsT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                      VARIANT* Caption/*[in,opt]*/, VARIANT* Style/*[in,opt]*/, 
                      VARIANT* Image/*[in,opt]*/)
{
  Mscomctllib_xp::IButton* ppButton;
  OLECHECK(this->Add(, (Mscomctllib_xp::IButton**)&ppButton));
  return ppButton;
}

template <class T> HRESULT __fastcall
TCOMIButtonsT<T>::_NewEnum(LPDISPATCH* ppDispatch/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppDispatch);
}

template <class T> LPDISPATCH __fastcall
TCOMIButtonsT<T>::_NewEnum(void)
{
  LPDISPATCH ppDispatch;
  OLECHECK(this->_NewEnum((LPDISPATCH*)&ppDispatch));
  return ppDispatch;
}

// *********************************************************************//
// DispIntf:  IButtons
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FE7-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonsDispT<T>::get_Count(short* psCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psCount /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IButtonsDispT<T>::get_Count(void)
{
  short psCount;
  this->get_Count((short*)&psCount);
  return psCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonsDispT<T>::set_Count(short psCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = psCount /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonsDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                     Mscomctllib_xp::IButton** ppButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IButton**)ppButton /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IButton* __fastcall
IButtonsDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IButton* ppButton;
  this->get_ControlDefault(Index, (Mscomctllib_xp::IButton**)&ppButton);
  return ppButton;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonsDispT<T>::_set_ControlDefault(VARIANT* Index/*[in]*/, 
                                      Mscomctllib_xp::IButton* ppButton/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::IButton*)ppButton /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonsDispT<T>::get_Item(VARIANT* Index/*[in]*/, 
                           Mscomctllib_xp::IButton** ppButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IButton**)ppButton /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IButton* __fastcall
IButtonsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IButton* ppButton;
  this->get_Item(Index, (Mscomctllib_xp::IButton**)&ppButton);
  return ppButton;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonsDispT<T>::_set_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IButton* ppButton/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::IButton*)ppButton /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonsDispT<T>::Remove(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonsDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                      VARIANT* Caption/*[in,opt]*/, VARIANT* Style/*[in,opt]*/, 
                      VARIANT* Image/*[in,opt]*/, Mscomctllib_xp::IButton** ppButton/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(5));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = Key /*[VT_VARIANT:1]*/;
  _args[3] = Caption /*[VT_VARIANT:1]*/;
  _args[4] = Style /*[VT_VARIANT:1]*/;
  _args[5] = Image /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IButton**)ppButton /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IButton* __fastcall
IButtonsDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                      VARIANT* Caption/*[in,opt]*/, VARIANT* Style/*[in,opt]*/, 
                      VARIANT* Image/*[in,opt]*/)
{
  Mscomctllib_xp::IButton* ppButton;
  this->Add(Index, Key, Caption, Style, Image, (Mscomctllib_xp::IButton**)&ppButton);
  return ppButton;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonsDispT<T>::_NewEnum(LPDISPATCH* ppDispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDispatch /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IButtonsDispT<T>::_NewEnum(void)
{
  LPDISPATCH ppDispatch;
  this->_NewEnum((LPDISPATCH*)&ppDispatch);
  return ppDispatch;
}

// *********************************************************************//
// SmartIntf: TCOMIButton
// Interface: IButton
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get__ObjectDefault(BSTR* pbstr_ObjectDefault/*[out,retval]*/)
{
  return (*this)->get__ObjectDefault(pbstr_ObjectDefault);
}

template <class T> BSTR __fastcall
TCOMIButtonT<T>::get__ObjectDefault(void)
{
  BSTR pbstr_ObjectDefault = 0;
  OLECHECK(this->get__ObjectDefault((BSTR*)&pbstr_ObjectDefault));
  return pbstr_ObjectDefault;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set__ObjectDefault(BSTR pbstr_ObjectDefault/*[in]*/)
{
  return (*this)->set__ObjectDefault(pbstr_ObjectDefault);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  return (*this)->get_Caption(pbstrCaption);
}

template <class T> BSTR __fastcall
TCOMIButtonT<T>::get_Caption(void)
{
  BSTR pbstrCaption = 0;
  OLECHECK(this->get_Caption((BSTR*)&pbstrCaption));
  return pbstrCaption;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  return (*this)->set_Caption(pbstrCaption);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  return (*this)->get_Tag(pvTag);
}

template <class T> VARIANT __fastcall
TCOMIButtonT<T>::get_Tag(void)
{
  VARIANT pvTag;
  OLECHECK(this->get_Tag((VARIANT*)&pvTag));
  return pvTag;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pbEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIButtonT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
  return (TOLEBOOL)pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Enabled(TOLEBOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Index(short* psIndex/*[out,retval]*/)
{
  return (*this)->get_Index(psIndex);
}

template <class T> short __fastcall
TCOMIButtonT<T>::get_Index(void)
{
  short psIndex;
  OLECHECK(this->get_Index((short*)&psIndex));
  return psIndex;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Index(short psIndex/*[in]*/)
{
  return (*this)->set_Index(psIndex);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  return (*this)->get_Key(pbstrKey);
}

template <class T> BSTR __fastcall
TCOMIButtonT<T>::get_Key(void)
{
  BSTR pbstrKey = 0;
  OLECHECK(this->get_Key((BSTR*)&pbstrKey));
  return pbstrKey;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  return (*this)->set_Key(pbstrKey);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/)
{
  return (*this)->get_ToolTipText(pbstrToolTipText);
}

template <class T> BSTR __fastcall
TCOMIButtonT<T>::get_ToolTipText(void)
{
  BSTR pbstrToolTipText = 0;
  OLECHECK(this->get_ToolTipText((BSTR*)&pbstrToolTipText));
  return pbstrToolTipText;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_ToolTipText(BSTR pbstrToolTipText/*[in]*/)
{
  return (*this)->set_ToolTipText(pbstrToolTipText);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(pbVisible);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Visible(TOLEBOOL* pbVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)pbVisible);
}

template <class T> TOLEBOOL __fastcall
TCOMIButtonT<T>::get_Visible(void)
{
  VARIANT_BOOL pbVisible;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&pbVisible));
  return (TOLEBOOL)pbVisible;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Visible(VARIANT_BOOL pbVisible/*[in]*/)
{
  return (*this)->set_Visible(pbVisible);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Visible(TOLEBOOL pbVisible/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)pbVisible);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Width(float* pfWidth/*[out,retval]*/)
{
  return (*this)->get_Width(pfWidth);
}

template <class T> float __fastcall
TCOMIButtonT<T>::get_Width(void)
{
  float pfWidth;
  OLECHECK(this->get_Width((float*)&pfWidth));
  return pfWidth;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Width(float pfWidth/*[in]*/)
{
  return (*this)->set_Width(pfWidth);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Height(float* pfHeight/*[out,retval]*/)
{
  return (*this)->get_Height(pfHeight);
}

template <class T> float __fastcall
TCOMIButtonT<T>::get_Height(void)
{
  float pfHeight;
  OLECHECK(this->get_Height((float*)&pfHeight));
  return pfHeight;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Height(float pfHeight/*[in]*/)
{
  return (*this)->set_Height(pfHeight);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Top(float* pfTop/*[out,retval]*/)
{
  return (*this)->get_Top(pfTop);
}

template <class T> float __fastcall
TCOMIButtonT<T>::get_Top(void)
{
  float pfTop;
  OLECHECK(this->get_Top((float*)&pfTop));
  return pfTop;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Top(float pfTop/*[in]*/)
{
  return (*this)->set_Top(pfTop);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Left(float* pfLeft/*[out,retval]*/)
{
  return (*this)->get_Left(pfLeft);
}

template <class T> float __fastcall
TCOMIButtonT<T>::get_Left(void)
{
  float pfLeft;
  OLECHECK(this->get_Left((float*)&pfLeft));
  return pfLeft;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Left(float pfLeft/*[in]*/)
{
  return (*this)->set_Left(pfLeft);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Value(Mscomctllib_xp::ValueConstants* psValue/*[out,retval]*/)
{
  return (*this)->get_Value(psValue);
}

template <class T> Mscomctllib_xp::ValueConstants __fastcall
TCOMIButtonT<T>::get_Value(void)
{
  Mscomctllib_xp::ValueConstants psValue;
  OLECHECK(this->get_Value((Mscomctllib_xp::ValueConstants*)&psValue));
  return psValue;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Value(Mscomctllib_xp::ValueConstants psValue/*[in]*/)
{
  return (*this)->set_Value(psValue);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Style(Mscomctllib_xp::ButtonStyleConstants* psStyle/*[out,retval]*/)
{
  return (*this)->get_Style(psStyle);
}

template <class T> Mscomctllib_xp::ButtonStyleConstants __fastcall
TCOMIButtonT<T>::get_Style(void)
{
  Mscomctllib_xp::ButtonStyleConstants psStyle;
  OLECHECK(this->get_Style((Mscomctllib_xp::ButtonStyleConstants*)&psStyle));
  return psStyle;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Style(Mscomctllib_xp::ButtonStyleConstants psStyle/*[in]*/)
{
  return (*this)->set_Style(psStyle);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  return (*this)->get_Description(pbstrDescription);
}

template <class T> BSTR __fastcall
TCOMIButtonT<T>::get_Description(void)
{
  BSTR pbstrDescription = 0;
  OLECHECK(this->get_Description((BSTR*)&pbstrDescription));
  return pbstrDescription;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  return (*this)->set_Description(pbstrDescription);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_Image(VARIANT* pvImage/*[out,retval]*/)
{
  return (*this)->get_Image(pvImage);
}

template <class T> VARIANT __fastcall
TCOMIButtonT<T>::get_Image(void)
{
  VARIANT pvImage;
  OLECHECK(this->get_Image((VARIANT*)&pvImage));
  return pvImage;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_Image(VARIANT pvImage/*[in]*/)
{
  return (*this)->set_Image(pvImage);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_MixedState(VARIANT_BOOL* pbMixedState/*[out,retval]*/)
{
  return (*this)->get_MixedState(pbMixedState);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_MixedState(TOLEBOOL* pbMixedState/*[out,retval]*/)
{
  return (*this)->get_MixedState(VARIANT_BOOL*)pbMixedState);
}

template <class T> TOLEBOOL __fastcall
TCOMIButtonT<T>::get_MixedState(void)
{
  VARIANT_BOOL pbMixedState;
  OLECHECK(this->get_MixedState((VARIANT_BOOL*)&pbMixedState));
  return (TOLEBOOL)pbMixedState;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_MixedState(VARIANT_BOOL pbMixedState/*[in]*/)
{
  return (*this)->set_MixedState(pbMixedState);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::set_MixedState(TOLEBOOL pbMixedState/*[in]*/)
{
  return (*this)->set_MixedState(VARIANT_BOOL)pbMixedState);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_ButtonMenus(Mscomctllib_xp::IButtonMenus** ppButtonMenus/*[out,retval]*/)
{
  return (*this)->get_ButtonMenus(ppButtonMenus);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::get_ButtonMenus(Mscomctllib_xp::IButtonMenusPtr* ppButtonMenus/*[out,retval]*/)
{
  return (*this)->get_ButtonMenus(IButtonMenus**)ppButtonMenus);
}

template <class T> Mscomctllib_xp::IButtonMenusPtr __fastcall
TCOMIButtonT<T>::get_ButtonMenus(void)
{
  Mscomctllib_xp::IButtonMenus* ppButtonMenus;
  OLECHECK(this->get_ButtonMenus((Mscomctllib_xp::IButtonMenus**)&ppButtonMenus));
  return (Mscomctllib_xp::IButtonMenusPtr)ppButtonMenus;
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::_set_ButtonMenus(Mscomctllib_xp::IButtonMenus* ppButtonMenus/*[in]*/)
{
  return (*this)->_set_ButtonMenus(ppButtonMenus);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::_set_ButtonMenus(Mscomctllib_xp::IButtonMenusPtr ppButtonMenus/*[in]*/)
{
  return (*this)->_set_ButtonMenus(IButtonMenus*)ppButtonMenus);
}

template <class T> HRESULT __fastcall
TCOMIButtonT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->_set_Tag(pvTag);
}

// *********************************************************************//
// DispIntf:  IButton
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FE9-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get__ObjectDefault(BSTR* pbstr_ObjectDefault/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr_ObjectDefault /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IButtonDispT<T>::get__ObjectDefault(void)
{
  BSTR pbstr_ObjectDefault;
  this->get__ObjectDefault((BSTR*)&pbstr_ObjectDefault);
  return pbstr_ObjectDefault;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set__ObjectDefault(BSTR pbstr_ObjectDefault/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstr_ObjectDefault /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IButtonDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvTag /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IButtonDispT<T>::get_Tag(void)
{
  VARIANT pvTag;
  this->get_Tag((VARIANT*)&pvTag);
  return pvTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IButtonDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Index(short* psIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psIndex /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IButtonDispT<T>::get_Index(void)
{
  short psIndex;
  this->get_Index((short*)&psIndex);
  return psIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Index(short psIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = psIndex /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IButtonDispT<T>::get_Key(void)
{
  BSTR pbstrKey;
  this->get_Key((BSTR*)&pbstrKey);
  return pbstrKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pbstrKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolTipText"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrToolTipText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IButtonDispT<T>::get_ToolTipText(void)
{
  BSTR pbstrToolTipText;
  this->get_ToolTipText((BSTR*)&pbstrToolTipText);
  return pbstrToolTipText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_ToolTipText(BSTR pbstrToolTipText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolTipText"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbstrToolTipText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IButtonDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pbVisible;
  this->get_Visible((VARIANT_BOOL*)&pbVisible);
  return pbVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Visible(VARIANT_BOOL pbVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pbVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Width(float* pfWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IButtonDispT<T>::get_Width(void)
{
  float pfWidth;
  this->get_Width((float*)&pfWidth);
  return pfWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Width(float pfWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pfWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Height(float* pfHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IButtonDispT<T>::get_Height(void)
{
  float pfHeight;
  this->get_Height((float*)&pfHeight);
  return pfHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Height(float pfHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pfHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Top(float* pfTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IButtonDispT<T>::get_Top(void)
{
  float pfTop;
  this->get_Top((float*)&pfTop);
  return pfTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Top(float pfTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pfTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Left(float* pfLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IButtonDispT<T>::get_Left(void)
{
  float pfLeft;
  this->get_Left((float*)&pfLeft);
  return pfLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Left(float pfLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pfLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Value(Mscomctllib_xp::ValueConstants* psValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psValue /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ValueConstants __fastcall
IButtonDispT<T>::get_Value(void)
{
  Mscomctllib_xp::ValueConstants psValue;
  this->get_Value((Mscomctllib_xp::ValueConstants*)&psValue);
  return psValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Value(Mscomctllib_xp::ValueConstants psValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)psValue /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Style(Mscomctllib_xp::ButtonStyleConstants* psStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ButtonStyleConstants __fastcall
IButtonDispT<T>::get_Style(void)
{
  Mscomctllib_xp::ButtonStyleConstants psStyle;
  this->get_Style((Mscomctllib_xp::ButtonStyleConstants*)&psStyle);
  return psStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Style(Mscomctllib_xp::ButtonStyleConstants psStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)psStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IButtonDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_Image(VARIANT* pvImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvImage /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IButtonDispT<T>::get_Image(void)
{
  VARIANT pvImage;
  this->get_Image((VARIANT*)&pvImage);
  return pvImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_Image(VARIANT pvImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pvImage /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_MixedState(VARIANT_BOOL* pbMixedState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MixedState"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbMixedState /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IButtonDispT<T>::get_MixedState(void)
{
  VARIANT_BOOL pbMixedState;
  this->get_MixedState((VARIANT_BOOL*)&pbMixedState);
  return pbMixedState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::set_MixedState(VARIANT_BOOL pbMixedState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MixedState"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pbMixedState /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::get_ButtonMenus(Mscomctllib_xp::IButtonMenus** ppButtonMenus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonMenus"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IButtonMenus**)ppButtonMenus /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IButtonMenus* __fastcall
IButtonDispT<T>::get_ButtonMenus(void)
{
  Mscomctllib_xp::IButtonMenus* ppButtonMenus;
  this->get_ButtonMenus((Mscomctllib_xp::IButtonMenus**)&ppButtonMenus);
  return ppButtonMenus;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::_set_ButtonMenus(Mscomctllib_xp::IButtonMenus* ppButtonMenus/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ButtonMenus"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IButtonMenus*)ppButtonMenus /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonDispT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIButtonMenus
// Interface: IButtonMenus
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIButtonMenusT<T>::get_Count(short* psCount/*[out,retval]*/)
{
  return (*this)->get_Count(psCount);
}

template <class T> short __fastcall
TCOMIButtonMenusT<T>::get_Count(void)
{
  short psCount;
  OLECHECK(this->get_Count((short*)&psCount));
  return psCount;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenusT<T>::set_Count(short psCount/*[in]*/)
{
  return (*this)->set_Count(psCount);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenusT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                         Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/)
{
  return (*this)->get_ControlDefault(Index, ppButtonMenu);
}

template <class T> Mscomctllib_xp::IButtonMenu* __fastcall
TCOMIButtonMenusT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IButtonMenu* ppButtonMenu;
  OLECHECK(this->get_ControlDefault(, (Mscomctllib_xp::IButtonMenu**)&ppButtonMenu));
  return ppButtonMenu;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenusT<T>::_set_ControlDefault(VARIANT* Index/*[in]*/, 
                                          Mscomctllib_xp::IButtonMenu* ppButtonMenu/*[in]*/)
{
  return (*this)->_set_ControlDefault(Index, ppButtonMenu);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenusT<T>::get_Item(VARIANT* Index/*[in]*/, 
                               Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppButtonMenu);
}

template <class T> Mscomctllib_xp::IButtonMenu* __fastcall
TCOMIButtonMenusT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IButtonMenu* ppButtonMenu;
  OLECHECK(this->get_Item(, (Mscomctllib_xp::IButtonMenu**)&ppButtonMenu));
  return ppButtonMenu;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenusT<T>::_set_Item(VARIANT* Index/*[in]*/, 
                                Mscomctllib_xp::IButtonMenu* ppButtonMenu/*[in]*/)
{
  return (*this)->_set_Item(Index, ppButtonMenu);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenusT<T>::Remove(VARIANT* Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenusT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIButtonMenusT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                          VARIANT* Text/*[in,opt]*/, 
                          Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/)
{
  return (*this)->Add(Index, Key, Text, ppButtonMenu);
}

template <class T> Mscomctllib_xp::IButtonMenu* __fastcall
TCOMIButtonMenusT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                          VARIANT* Text/*[in,opt]*/)
{
  Mscomctllib_xp::IButtonMenu* ppButtonMenu;
  OLECHECK(this->Add(, (Mscomctllib_xp::IButtonMenu**)&ppButtonMenu));
  return ppButtonMenu;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenusT<T>::_NewEnum(LPDISPATCH* ppDispatch/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppDispatch);
}

template <class T> LPDISPATCH __fastcall
TCOMIButtonMenusT<T>::_NewEnum(void)
{
  LPDISPATCH ppDispatch;
  OLECHECK(this->_NewEnum((LPDISPATCH*)&ppDispatch));
  return ppDispatch;
}

// *********************************************************************//
// DispIntf:  IButtonMenus
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FEB-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenusDispT<T>::get_Count(short* psCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psCount /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IButtonMenusDispT<T>::get_Count(void)
{
  short psCount;
  this->get_Count((short*)&psCount);
  return psCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenusDispT<T>::set_Count(short psCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = psCount /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenusDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                         Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IButtonMenu**)ppButtonMenu /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IButtonMenu* __fastcall
IButtonMenusDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IButtonMenu* ppButtonMenu;
  this->get_ControlDefault(Index, (Mscomctllib_xp::IButtonMenu**)&ppButtonMenu);
  return ppButtonMenu;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenusDispT<T>::_set_ControlDefault(VARIANT* Index/*[in]*/, 
                                          Mscomctllib_xp::IButtonMenu* ppButtonMenu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::IButtonMenu*)ppButtonMenu /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenusDispT<T>::get_Item(VARIANT* Index/*[in]*/, 
                               Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IButtonMenu**)ppButtonMenu /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IButtonMenu* __fastcall
IButtonMenusDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IButtonMenu* ppButtonMenu;
  this->get_Item(Index, (Mscomctllib_xp::IButtonMenu**)&ppButtonMenu);
  return ppButtonMenu;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenusDispT<T>::_set_Item(VARIANT* Index/*[in]*/, 
                                Mscomctllib_xp::IButtonMenu* ppButtonMenu/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::IButtonMenu*)ppButtonMenu /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenusDispT<T>::Remove(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenusDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenusDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                          VARIANT* Text/*[in,opt]*/, 
                          Mscomctllib_xp::IButtonMenu** ppButtonMenu/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = Key /*[VT_VARIANT:1]*/;
  _args[3] = Text /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IButtonMenu**)ppButtonMenu /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IButtonMenu* __fastcall
IButtonMenusDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                          VARIANT* Text/*[in,opt]*/)
{
  Mscomctllib_xp::IButtonMenu* ppButtonMenu;
  this->Add(Index, Key, Text, (Mscomctllib_xp::IButtonMenu**)&ppButtonMenu);
  return ppButtonMenu;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenusDispT<T>::_NewEnum(LPDISPATCH* ppDispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDispatch /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IButtonMenusDispT<T>::_NewEnum(void)
{
  LPDISPATCH ppDispatch;
  this->_NewEnum((LPDISPATCH*)&ppDispatch);
  return ppDispatch;
}

// *********************************************************************//
// SmartIntf: TCOMIButtonMenu
// Interface: IButtonMenu
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get__ObjectDefault(BSTR* pbstrObjectDefault/*[out,retval]*/)
{
  return (*this)->get__ObjectDefault(pbstrObjectDefault);
}

template <class T> BSTR __fastcall
TCOMIButtonMenuT<T>::get__ObjectDefault(void)
{
  BSTR pbstrObjectDefault = 0;
  OLECHECK(this->get__ObjectDefault((BSTR*)&pbstrObjectDefault));
  return pbstrObjectDefault;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::set__ObjectDefault(BSTR pbstrObjectDefault/*[in]*/)
{
  return (*this)->set__ObjectDefault(pbstrObjectDefault);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pbEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIButtonMenuT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
  return (TOLEBOOL)pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::set_Enabled(TOLEBOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get_Index(short* psIndex/*[out,retval]*/)
{
  return (*this)->get_Index(psIndex);
}

template <class T> short __fastcall
TCOMIButtonMenuT<T>::get_Index(void)
{
  short psIndex;
  OLECHECK(this->get_Index((short*)&psIndex));
  return psIndex;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::set_Index(short psIndex/*[in]*/)
{
  return (*this)->set_Index(psIndex);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  return (*this)->get_Key(pbstrKey);
}

template <class T> BSTR __fastcall
TCOMIButtonMenuT<T>::get_Key(void)
{
  BSTR pbstrKey = 0;
  OLECHECK(this->get_Key((BSTR*)&pbstrKey));
  return pbstrKey;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  return (*this)->set_Key(pbstrKey);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get_Parent(Mscomctllib_xp::IButton** ppParent/*[out,retval]*/)
{
  return (*this)->get_Parent(ppParent);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get_Parent(Mscomctllib_xp::IButtonPtr* ppParent/*[out,retval]*/)
{
  return (*this)->get_Parent(IButton**)ppParent);
}

template <class T> Mscomctllib_xp::IButtonPtr __fastcall
TCOMIButtonMenuT<T>::get_Parent(void)
{
  Mscomctllib_xp::IButton* ppParent;
  OLECHECK(this->get_Parent((Mscomctllib_xp::IButton**)&ppParent));
  return (Mscomctllib_xp::IButtonPtr)ppParent;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::_set_Parent(Mscomctllib_xp::IButton* ppParent/*[in]*/)
{
  return (*this)->_set_Parent(ppParent);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::_set_Parent(Mscomctllib_xp::IButtonPtr ppParent/*[in]*/)
{
  return (*this)->_set_Parent(IButton*)ppParent);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  return (*this)->get_Tag(pvTag);
}

template <class T> VARIANT __fastcall
TCOMIButtonMenuT<T>::get_Tag(void)
{
  VARIANT pvTag;
  OLECHECK(this->get_Tag((VARIANT*)&pvTag));
  return pvTag;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Text(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIButtonMenuT<T>::get_Text(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Text((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Text(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(pbVisible);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::get_Visible(TOLEBOOL* pbVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)pbVisible);
}

template <class T> TOLEBOOL __fastcall
TCOMIButtonMenuT<T>::get_Visible(void)
{
  VARIANT_BOOL pbVisible;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&pbVisible));
  return (TOLEBOOL)pbVisible;
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::set_Visible(VARIANT_BOOL pbVisible/*[in]*/)
{
  return (*this)->set_Visible(pbVisible);
}

template <class T> HRESULT __fastcall
TCOMIButtonMenuT<T>::set_Visible(TOLEBOOL pbVisible/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)pbVisible);
}

// *********************************************************************//
// DispIntf:  IButtonMenu
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {66833FED-8583-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::get__ObjectDefault(BSTR* pbstrObjectDefault/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrObjectDefault /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IButtonMenuDispT<T>::get__ObjectDefault(void)
{
  BSTR pbstrObjectDefault;
  this->get__ObjectDefault((BSTR*)&pbstrObjectDefault);
  return pbstrObjectDefault;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::set__ObjectDefault(BSTR pbstrObjectDefault/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrObjectDefault /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IButtonMenuDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::get_Index(short* psIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psIndex /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IButtonMenuDispT<T>::get_Index(void)
{
  short psIndex;
  this->get_Index((short*)&psIndex);
  return psIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::set_Index(short psIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = psIndex /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IButtonMenuDispT<T>::get_Key(void)
{
  BSTR pbstrKey;
  this->get_Key((BSTR*)&pbstrKey);
  return pbstrKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::get_Parent(Mscomctllib_xp::IButton** ppParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IButton**)ppParent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IButton* __fastcall
IButtonMenuDispT<T>::get_Parent(void)
{
  Mscomctllib_xp::IButton* ppParent;
  this->get_Parent((Mscomctllib_xp::IButton**)&ppParent);
  return ppParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::_set_Parent(Mscomctllib_xp::IButton* ppParent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IButton*)ppParent /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvTag /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IButtonMenuDispT<T>::get_Tag(void)
{
  VARIANT pvTag;
  this->get_Tag((VARIANT*)&pvTag);
  return pvTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IButtonMenuDispT<T>::get_Text(void)
{
  BSTR pbstrText;
  this->get_Text((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IButtonMenuDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pbVisible;
  this->get_Visible((VARIANT_BOOL*)&pbVisible);
  return pbVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IButtonMenuDispT<T>::set_Visible(VARIANT_BOOL pbVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pbVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIStatusBar
// Interface: IStatusBar
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_SimpleText(BSTR* pbstrSimpleText/*[out,retval]*/)
{
  return (*this)->get_SimpleText(pbstrSimpleText);
}

template <class T> BSTR __fastcall
TCOMIStatusBarT<T>::get_SimpleText(void)
{
  BSTR pbstrSimpleText = 0;
  OLECHECK(this->get_SimpleText((BSTR*)&pbstrSimpleText));
  return pbstrSimpleText;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_SimpleText(BSTR pbstrSimpleText/*[in]*/)
{
  return (*this)->set_SimpleText(pbstrSimpleText);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_Style(Mscomctllib_xp::SbarStyleConstants* psStyle/*[out,retval]*/)
{
  return (*this)->get_Style(psStyle);
}

template <class T> Mscomctllib_xp::SbarStyleConstants __fastcall
TCOMIStatusBarT<T>::get_Style(void)
{
  Mscomctllib_xp::SbarStyleConstants psStyle;
  OLECHECK(this->get_Style((Mscomctllib_xp::SbarStyleConstants*)&psStyle));
  return psStyle;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_Style(Mscomctllib_xp::SbarStyleConstants psStyle/*[in]*/)
{
  return (*this)->set_Style(psStyle);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_Panels(Mscomctllib_xp::IPanels** ppPanels/*[out,retval]*/)
{
  return (*this)->get_Panels(ppPanels);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_Panels(Mscomctllib_xp::IPanelsPtr* ppPanels/*[out,retval]*/)
{
  return (*this)->get_Panels(IPanels**)ppPanels);
}

template <class T> Mscomctllib_xp::IPanelsPtr __fastcall
TCOMIStatusBarT<T>::get_Panels(void)
{
  Mscomctllib_xp::IPanels* ppPanels;
  OLECHECK(this->get_Panels((Mscomctllib_xp::IPanels**)&ppPanels));
  return (Mscomctllib_xp::IPanelsPtr)ppPanels;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::_set_Panels(Mscomctllib_xp::IPanels* ppPanels/*[in]*/)
{
  return (*this)->_set_Panels(ppPanels);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::_set_Panels(Mscomctllib_xp::IPanelsPtr ppPanels/*[in]*/)
{
  return (*this)->_set_Panels(IPanels*)ppPanels);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(psMousePointer);
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
TCOMIStatusBarT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants psMousePointer;
  OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer));
  return psMousePointer;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(psMousePointer);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(ppMouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIStatusBarT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
  return ppMouseIcon;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_ShowTips(VARIANT_BOOL* bShowTips/*[out,retval]*/)
{
  return (*this)->get_ShowTips(bShowTips);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_ShowTips(TOLEBOOL* bShowTips/*[out,retval]*/)
{
  return (*this)->get_ShowTips(VARIANT_BOOL*)bShowTips);
}

template <class T> TOLEBOOL __fastcall
TCOMIStatusBarT<T>::get_ShowTips(void)
{
  VARIANT_BOOL bShowTips;
  OLECHECK(this->get_ShowTips((VARIANT_BOOL*)&bShowTips));
  return (TOLEBOOL)bShowTips;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_ShowTips(VARIANT_BOOL bShowTips/*[in]*/)
{
  return (*this)->set_ShowTips(bShowTips);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_ShowTips(TOLEBOOL bShowTips/*[in]*/)
{
  return (*this)->set_ShowTips(VARIANT_BOOL)bShowTips);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_PanelProperties(BSTR* pbstrPanelProperties/*[out,retval]*/)
{
  return (*this)->get_PanelProperties(pbstrPanelProperties);
}

template <class T> BSTR __fastcall
TCOMIStatusBarT<T>::get_PanelProperties(void)
{
  BSTR pbstrPanelProperties = 0;
  OLECHECK(this->get_PanelProperties((BSTR*)&pbstrPanelProperties));
  return pbstrPanelProperties;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_PanelProperties(BSTR pbstrPanelProperties/*[in]*/)
{
  return (*this)->set_PanelProperties(pbstrPanelProperties);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  return (*this)->get_OLEDropMode(psOLEDropMode);
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
TCOMIStatusBarT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
  return psOLEDropMode;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  return (*this)->set_OLEDropMode(psOLEDropMode);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pbEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIStatusBarT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
  return (TOLEBOOL)pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_Enabled(TOLEBOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_Font(IFontDisp** ppFont/*[out,retval]*/)
{
  return (*this)->get_Font(ppFont);
}

template <class T> IFontDisp* __fastcall
TCOMIStatusBarT<T>::get_Font(void)
{
  IFontDisp* ppFont;
  OLECHECK(this->get_Font((IFontDisp**)&ppFont));
  return ppFont;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::_set_Font(IFontDisp* ppFont/*[in]*/)
{
  return (*this)->_set_Font(ppFont);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  return (*this)->get_hWnd(phWnd);
}

template <class T> OLE_HANDLE __fastcall
TCOMIStatusBarT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
  return phWnd;
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  return (*this)->set_hWnd(phWnd);
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::OLEDrag(void)
{
  return (*this)->OLEDrag();
}

template <class T> HRESULT __fastcall
TCOMIStatusBarT<T>::AboutBox(void)
{
  return (*this)->AboutBox();
}

// *********************************************************************//
// DispIntf:  IStatusBar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E3867A1-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_SimpleText(BSTR* pbstrSimpleText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SimpleText"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSimpleText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IStatusBarDispT<T>::get_SimpleText(void)
{
  BSTR pbstrSimpleText;
  this->get_SimpleText((BSTR*)&pbstrSimpleText);
  return pbstrSimpleText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::set_SimpleText(BSTR pbstrSimpleText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SimpleText"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbstrSimpleText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_Style(Mscomctllib_xp::SbarStyleConstants* psStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::SbarStyleConstants __fastcall
IStatusBarDispT<T>::get_Style(void)
{
  Mscomctllib_xp::SbarStyleConstants psStyle;
  this->get_Style((Mscomctllib_xp::SbarStyleConstants*)&psStyle);
  return psStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::set_Style(Mscomctllib_xp::SbarStyleConstants psStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (int)psStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_Panels(Mscomctllib_xp::IPanels** ppPanels/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Panels"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IPanels**)ppPanels /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IPanels* __fastcall
IStatusBarDispT<T>::get_Panels(void)
{
  Mscomctllib_xp::IPanels* ppPanels;
  this->get_Panels((Mscomctllib_xp::IPanels**)&ppPanels);
  return ppPanels;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::_set_Panels(Mscomctllib_xp::IPanels* ppPanels/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Panels"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IPanels*)ppPanels /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psMousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
IStatusBarDispT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants psMousePointer;
  this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer);
  return psMousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (int)psMousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppMouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IStatusBarDispT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  this->get_MouseIcon((IPictureDisp**)&ppMouseIcon);
  return ppMouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_ShowTips(VARIANT_BOOL* bShowTips/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowTips"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bShowTips /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IStatusBarDispT<T>::get_ShowTips(void)
{
  VARIANT_BOOL bShowTips;
  this->get_ShowTips((VARIANT_BOOL*)&bShowTips);
  return bShowTips;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::set_ShowTips(VARIANT_BOOL bShowTips/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowTips"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = bShowTips /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_PanelProperties(BSTR* pbstrPanelProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PanelProperties"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrPanelProperties /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IStatusBarDispT<T>::get_PanelProperties(void)
{
  BSTR pbstrPanelProperties;
  this->get_PanelProperties((BSTR*)&pbstrPanelProperties);
  return pbstrPanelProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::set_PanelProperties(BSTR pbstrPanelProperties/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PanelProperties"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbstrPanelProperties /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDropMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
IStatusBarDispT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode);
  return psOLEDropMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDropMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IStatusBarDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_Font(IFontDisp** ppFont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)ppFont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
IStatusBarDispT<T>::get_Font(void)
{
  IFontDisp* ppFont;
  this->get_Font((IFontDisp**)&ppFont);
  return ppFont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::_set_Font(IFontDisp* ppFont/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)ppFont /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phWnd /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_HANDLE __fastcall
IStatusBarDispT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  this->get_hWnd((OLE_HANDLE*)&phWnd);
  return phWnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<1> _args;
  _args[1] = phWnd /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::OLEDrag()
{
  _TDispID _dispid(*this, OLETEXT("OLEDrag"), DISPID(1552));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IStatusBarDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IStatusBarEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {8E3867A2-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::PanelClick(Mscomctllib_xp::Panel* Panel)
{
  _TDispID _dispid(/* PanelClick */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::Panel*)Panel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::PanelDblClick(Mscomctllib_xp::Panel* Panel)
{
  _TDispID _dispid(/* PanelDblClick */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::Panel*)Panel /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::DblClick()
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                       long* AllowedEffects/*[in,out]*/)
{
  _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = AllowedEffects /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                          VARIANT_BOOL* DefaultCursors/*[in,out]*/)
{
  _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
  TAutoArgs<2> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                     short* DataFormat/*[in,out]*/)
{
  _TDispID _dispid(/* OLESetData */ DISPID(1552));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = DataFormat /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::OLECompleteDrag(long* Effect/*[in,out]*/)
{
  _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
  TAutoArgs<1> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                      long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                      short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                      float* y/*[in,out]*/, short* State/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  _args[7] = State /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IStatusBarEventsDispT<T>::OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                      long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                      short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                      float* y/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
  TAutoArgs<6> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPanels
// Interface: IPanels
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPanelsT<T>::get_Count(short* sCount/*[out,retval]*/)
{
  return (*this)->get_Count(sCount);
}

template <class T> short __fastcall
TCOMIPanelsT<T>::get_Count(void)
{
  short sCount;
  OLECHECK(this->get_Count((short*)&sCount));
  return sCount;
}

template <class T> HRESULT __fastcall
TCOMIPanelsT<T>::set_Count(short sCount/*[in]*/)
{
  return (*this)->set_Count(sCount);
}

template <class T> HRESULT __fastcall
TCOMIPanelsT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                    Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/)
{
  return (*this)->get_ControlDefault(Index, ppPanel);
}

template <class T> Mscomctllib_xp::IPanel* __fastcall
TCOMIPanelsT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IPanel* ppPanel;
  OLECHECK(this->get_ControlDefault(, (Mscomctllib_xp::IPanel**)&ppPanel));
  return ppPanel;
}

template <class T> HRESULT __fastcall
TCOMIPanelsT<T>::_set_ControlDefault(VARIANT* Index/*[in]*/, Mscomctllib_xp::IPanel* ppPanel/*[in]*/)
{
  return (*this)->_set_ControlDefault(Index, ppPanel);
}

template <class T> HRESULT __fastcall
TCOMIPanelsT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, VARIANT* Text/*[in,opt]*/, 
                     VARIANT* Style/*[in,opt]*/, VARIANT* Picture/*[in,opt]*/, 
                     Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/)
{
  return (*this)->Add(Index, Key, Text, Style, Picture, ppPanel);
}

template <class T> Mscomctllib_xp::IPanel* __fastcall
TCOMIPanelsT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, VARIANT* Text/*[in,opt]*/, 
                     VARIANT* Style/*[in,opt]*/, VARIANT* Picture/*[in,opt]*/)
{
  Mscomctllib_xp::IPanel* ppPanel;
  OLECHECK(this->Add(, (Mscomctllib_xp::IPanel**)&ppPanel));
  return ppPanel;
}

template <class T> HRESULT __fastcall
TCOMIPanelsT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIPanelsT<T>::get_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppPanel);
}

template <class T> Mscomctllib_xp::IPanel* __fastcall
TCOMIPanelsT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IPanel* ppPanel;
  OLECHECK(this->get_Item(, (Mscomctllib_xp::IPanel**)&ppPanel));
  return ppPanel;
}

template <class T> HRESULT __fastcall
TCOMIPanelsT<T>::_set_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IPanel* ppPanel/*[in]*/)
{
  return (*this)->_set_Item(Index, ppPanel);
}

template <class T> HRESULT __fastcall
TCOMIPanelsT<T>::Remove(VARIANT* Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIPanelsT<T>::_NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppNewEnum);
}

template <class T> LPDISPATCH __fastcall
TCOMIPanelsT<T>::_NewEnum(void)
{
  LPDISPATCH ppNewEnum;
  OLECHECK(this->_NewEnum((LPDISPATCH*)&ppNewEnum));
  return ppNewEnum;
}

// *********************************************************************//
// DispIntf:  IPanels
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E3867A4-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelsDispT<T>::get_Count(short* sCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(sCount /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IPanelsDispT<T>::get_Count(void)
{
  short sCount;
  this->get_Count((short*)&sCount);
  return sCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelsDispT<T>::set_Count(short sCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = sCount /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelsDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                    Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IPanel**)ppPanel /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IPanel* __fastcall
IPanelsDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IPanel* ppPanel;
  this->get_ControlDefault(Index, (Mscomctllib_xp::IPanel**)&ppPanel);
  return ppPanel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelsDispT<T>::_set_ControlDefault(VARIANT* Index/*[in]*/, Mscomctllib_xp::IPanel* ppPanel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::IPanel*)ppPanel /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelsDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, VARIANT* Text/*[in,opt]*/
                     , VARIANT* Style/*[in,opt]*/, VARIANT* Picture/*[in,opt]*/, 
                     Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = Key /*[VT_VARIANT:1]*/;
  _args[3] = Text /*[VT_VARIANT:1]*/;
  _args[4] = Style /*[VT_VARIANT:1]*/;
  _args[5] = Picture /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IPanel**)ppPanel /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IPanel* __fastcall
IPanelsDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, VARIANT* Text/*[in,opt]*/, 
                     VARIANT* Style/*[in,opt]*/, VARIANT* Picture/*[in,opt]*/)
{
  Mscomctllib_xp::IPanel* ppPanel;
  this->Add(Index, Key, Text, Style, Picture, (Mscomctllib_xp::IPanel**)&ppPanel);
  return ppPanel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelsDispT<T>::get_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IPanel** ppPanel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IPanel**)ppPanel /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IPanel* __fastcall
IPanelsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IPanel* ppPanel;
  this->get_Item(Index, (Mscomctllib_xp::IPanel**)&ppPanel);
  return ppPanel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelsDispT<T>::_set_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IPanel* ppPanel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::IPanel*)ppPanel /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelsDispT<T>::Remove(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelsDispT<T>::_NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppNewEnum /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IPanelsDispT<T>::_NewEnum(void)
{
  LPDISPATCH ppNewEnum;
  this->_NewEnum((LPDISPATCH*)&ppNewEnum);
  return ppNewEnum;
}

// *********************************************************************//
// SmartIntf: TCOMIPanel
// Interface: IPanel
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get__ObjectDefault(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIPanelT<T>::get__ObjectDefault(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get__ObjectDefault((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set__ObjectDefault(BSTR pbstrText/*[in]*/)
{
  return (*this)->set__ObjectDefault(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Alignment(Mscomctllib_xp::PanelAlignmentConstants* psAlignment/*[out,retval]*/)
{
  return (*this)->get_Alignment(psAlignment);
}

template <class T> Mscomctllib_xp::PanelAlignmentConstants __fastcall
TCOMIPanelT<T>::get_Alignment(void)
{
  Mscomctllib_xp::PanelAlignmentConstants psAlignment;
  OLECHECK(this->get_Alignment((Mscomctllib_xp::PanelAlignmentConstants*)&psAlignment));
  return psAlignment;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Alignment(Mscomctllib_xp::PanelAlignmentConstants psAlignment/*[in]*/)
{
  return (*this)->set_Alignment(psAlignment);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_AutoSize(Mscomctllib_xp::PanelAutoSizeConstants* psAutoSize/*[out,retval]*/)
{
  return (*this)->get_AutoSize(psAutoSize);
}

template <class T> Mscomctllib_xp::PanelAutoSizeConstants __fastcall
TCOMIPanelT<T>::get_AutoSize(void)
{
  Mscomctllib_xp::PanelAutoSizeConstants psAutoSize;
  OLECHECK(this->get_AutoSize((Mscomctllib_xp::PanelAutoSizeConstants*)&psAutoSize));
  return psAutoSize;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_AutoSize(Mscomctllib_xp::PanelAutoSizeConstants psAutoSize/*[in]*/)
{
  return (*this)->set_AutoSize(psAutoSize);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Bevel(Mscomctllib_xp::PanelBevelConstants* psBevel/*[out,retval]*/)
{
  return (*this)->get_Bevel(psBevel);
}

template <class T> Mscomctllib_xp::PanelBevelConstants __fastcall
TCOMIPanelT<T>::get_Bevel(void)
{
  Mscomctllib_xp::PanelBevelConstants psBevel;
  OLECHECK(this->get_Bevel((Mscomctllib_xp::PanelBevelConstants*)&psBevel));
  return psBevel;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Bevel(Mscomctllib_xp::PanelBevelConstants psBevel/*[in]*/)
{
  return (*this)->set_Bevel(psBevel);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pbEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIPanelT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
  return (TOLEBOOL)pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Enabled(TOLEBOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Index(short* sIndex/*[out,retval]*/)
{
  return (*this)->get_Index(sIndex);
}

template <class T> short __fastcall
TCOMIPanelT<T>::get_Index(void)
{
  short sIndex;
  OLECHECK(this->get_Index((short*)&sIndex));
  return sIndex;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Index(short sIndex/*[in]*/)
{
  return (*this)->set_Index(sIndex);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  return (*this)->get_Key(pbstrKey);
}

template <class T> BSTR __fastcall
TCOMIPanelT<T>::get_Key(void)
{
  BSTR pbstrKey = 0;
  OLECHECK(this->get_Key((BSTR*)&pbstrKey));
  return pbstrKey;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  return (*this)->set_Key(pbstrKey);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Left(float* pfLeft/*[out,retval]*/)
{
  return (*this)->get_Left(pfLeft);
}

template <class T> float __fastcall
TCOMIPanelT<T>::get_Left(void)
{
  float pfLeft;
  OLECHECK(this->get_Left((float*)&pfLeft));
  return pfLeft;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Left(float pfLeft/*[in]*/)
{
  return (*this)->set_Left(pfLeft);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_MinWidth(float* pfMinWidth/*[out,retval]*/)
{
  return (*this)->get_MinWidth(pfMinWidth);
}

template <class T> float __fastcall
TCOMIPanelT<T>::get_MinWidth(void)
{
  float pfMinWidth;
  OLECHECK(this->get_MinWidth((float*)&pfMinWidth));
  return pfMinWidth;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_MinWidth(float pfMinWidth/*[in]*/)
{
  return (*this)->set_MinWidth(pfMinWidth);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Picture(IPictureDisp** ppPicture/*[out,retval]*/)
{
  return (*this)->get_Picture(ppPicture);
}

template <class T> IPictureDisp* __fastcall
TCOMIPanelT<T>::get_Picture(void)
{
  IPictureDisp* ppPicture;
  OLECHECK(this->get_Picture((IPictureDisp**)&ppPicture));
  return ppPicture;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::_set_Picture(IPictureDisp* ppPicture/*[in]*/)
{
  return (*this)->_set_Picture(ppPicture);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Style(Mscomctllib_xp::PanelStyleConstants* psStyle/*[out,retval]*/)
{
  return (*this)->get_Style(psStyle);
}

template <class T> Mscomctllib_xp::PanelStyleConstants __fastcall
TCOMIPanelT<T>::get_Style(void)
{
  Mscomctllib_xp::PanelStyleConstants psStyle;
  OLECHECK(this->get_Style((Mscomctllib_xp::PanelStyleConstants*)&psStyle));
  return psStyle;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Style(Mscomctllib_xp::PanelStyleConstants psStyle/*[in]*/)
{
  return (*this)->set_Style(psStyle);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  return (*this)->get_Tag(pvTag);
}

template <class T> VARIANT __fastcall
TCOMIPanelT<T>::get_Tag(void)
{
  VARIANT pvTag;
  OLECHECK(this->get_Tag((VARIANT*)&pvTag));
  return pvTag;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Text(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIPanelT<T>::get_Text(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Text((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Text(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/)
{
  return (*this)->get_ToolTipText(pbstrToolTipText);
}

template <class T> BSTR __fastcall
TCOMIPanelT<T>::get_ToolTipText(void)
{
  BSTR pbstrToolTipText = 0;
  OLECHECK(this->get_ToolTipText((BSTR*)&pbstrToolTipText));
  return pbstrToolTipText;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_ToolTipText(BSTR pbstrToolTipText/*[in]*/)
{
  return (*this)->set_ToolTipText(pbstrToolTipText);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(pbVisible);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Visible(TOLEBOOL* pbVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)pbVisible);
}

template <class T> TOLEBOOL __fastcall
TCOMIPanelT<T>::get_Visible(void)
{
  VARIANT_BOOL pbVisible;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&pbVisible));
  return (TOLEBOOL)pbVisible;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Visible(VARIANT_BOOL pbVisible/*[in]*/)
{
  return (*this)->set_Visible(pbVisible);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Visible(TOLEBOOL pbVisible/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)pbVisible);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::get_Width(float* pfWidth/*[out,retval]*/)
{
  return (*this)->get_Width(pfWidth);
}

template <class T> float __fastcall
TCOMIPanelT<T>::get_Width(void)
{
  float pfWidth;
  OLECHECK(this->get_Width((float*)&pfWidth));
  return pfWidth;
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Width(float pfWidth/*[in]*/)
{
  return (*this)->set_Width(pfWidth);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::set_Picture(IPictureDisp* ppPicture/*[in]*/)
{
  return (*this)->set_Picture(ppPicture);
}

template <class T> HRESULT __fastcall
TCOMIPanelT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->_set_Tag(pvTag);
}

// *********************************************************************//
// DispIntf:  IPanel
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8E3867AA-8586-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPanelDispT<T>::get__ObjectDefault(void)
{
  BSTR pbstrText;
  this->get__ObjectDefault((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set__ObjectDefault(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Alignment(Mscomctllib_xp::PanelAlignmentConstants* psAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::PanelAlignmentConstants __fastcall
IPanelDispT<T>::get_Alignment(void)
{
  Mscomctllib_xp::PanelAlignmentConstants psAlignment;
  this->get_Alignment((Mscomctllib_xp::PanelAlignmentConstants*)&psAlignment);
  return psAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Alignment(Mscomctllib_xp::PanelAlignmentConstants psAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (int)psAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_AutoSize(Mscomctllib_xp::PanelAutoSizeConstants* psAutoSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psAutoSize /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::PanelAutoSizeConstants __fastcall
IPanelDispT<T>::get_AutoSize(void)
{
  Mscomctllib_xp::PanelAutoSizeConstants psAutoSize;
  this->get_AutoSize((Mscomctllib_xp::PanelAutoSizeConstants*)&psAutoSize);
  return psAutoSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_AutoSize(Mscomctllib_xp::PanelAutoSizeConstants psAutoSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (int)psAutoSize /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Bevel(Mscomctllib_xp::PanelBevelConstants* psBevel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bevel"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psBevel /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::PanelBevelConstants __fastcall
IPanelDispT<T>::get_Bevel(void)
{
  Mscomctllib_xp::PanelBevelConstants psBevel;
  this->get_Bevel((Mscomctllib_xp::PanelBevelConstants*)&psBevel);
  return psBevel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Bevel(Mscomctllib_xp::PanelBevelConstants psBevel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bevel"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (int)psBevel /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPanelDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Index(short* sIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(sIndex /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IPanelDispT<T>::get_Index(void)
{
  short sIndex;
  this->get_Index((short*)&sIndex);
  return sIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Index(short sIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = sIndex /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPanelDispT<T>::get_Key(void)
{
  BSTR pbstrKey;
  this->get_Key((BSTR*)&pbstrKey);
  return pbstrKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbstrKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Left(float* pfLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPanelDispT<T>::get_Left(void)
{
  float pfLeft;
  this->get_Left((float*)&pfLeft);
  return pfLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Left(float pfLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pfLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_MinWidth(float* pfMinWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinWidth"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfMinWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPanelDispT<T>::get_MinWidth(void)
{
  float pfMinWidth;
  this->get_MinWidth((float*)&pfMinWidth);
  return pfMinWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_MinWidth(float pfMinWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinWidth"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pfMinWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Picture(IPictureDisp** ppPicture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppPicture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IPanelDispT<T>::get_Picture(void)
{
  IPictureDisp* ppPicture;
  this->get_Picture((IPictureDisp**)&ppPicture);
  return ppPicture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::_set_Picture(IPictureDisp* ppPicture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppPicture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Style(Mscomctllib_xp::PanelStyleConstants* psStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::PanelStyleConstants __fastcall
IPanelDispT<T>::get_Style(void)
{
  Mscomctllib_xp::PanelStyleConstants psStyle;
  this->get_Style((Mscomctllib_xp::PanelStyleConstants*)&psStyle);
  return psStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Style(Mscomctllib_xp::PanelStyleConstants psStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)psStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvTag /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IPanelDispT<T>::get_Tag(void)
{
  VARIANT pvTag;
  this->get_Tag((VARIANT*)&pvTag);
  return pvTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPanelDispT<T>::get_Text(void)
{
  BSTR pbstrText;
  this->get_Text((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolTipText"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrToolTipText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPanelDispT<T>::get_ToolTipText(void)
{
  BSTR pbstrToolTipText;
  this->get_ToolTipText((BSTR*)&pbstrToolTipText);
  return pbstrToolTipText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_ToolTipText(BSTR pbstrToolTipText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolTipText"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pbstrToolTipText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPanelDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pbVisible;
  this->get_Visible((VARIANT_BOOL*)&pbVisible);
  return pbVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Visible(VARIANT_BOOL pbVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pbVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::get_Width(float* pfWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IPanelDispT<T>::get_Width(void)
{
  float pfWidth;
  this->get_Width((float*)&pfWidth);
  return pfWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Width(float pfWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pfWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::set_Picture(IPictureDisp* ppPicture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppPicture /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IPanelDispT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIProgressBar
// Interface: IProgressBar
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_ControlDefault(float* pfValue/*[out,retval]*/)
{
  return (*this)->get_ControlDefault(pfValue);
}

template <class T> float __fastcall
TCOMIProgressBarT<T>::get_ControlDefault(void)
{
  float pfValue;
  OLECHECK(this->get_ControlDefault((float*)&pfValue));
  return pfValue;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_ControlDefault(float pfValue/*[in]*/)
{
  return (*this)->set_ControlDefault(pfValue);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_Max(float* pfMax/*[out,retval]*/)
{
  return (*this)->get_Max(pfMax);
}

template <class T> float __fastcall
TCOMIProgressBarT<T>::get_Max(void)
{
  float pfMax;
  OLECHECK(this->get_Max((float*)&pfMax));
  return pfMax;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_Max(float pfMax/*[in]*/)
{
  return (*this)->set_Max(pfMax);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_Min(float* pfMin/*[out,retval]*/)
{
  return (*this)->get_Min(pfMin);
}

template <class T> float __fastcall
TCOMIProgressBarT<T>::get_Min(void)
{
  float pfMin;
  OLECHECK(this->get_Min((float*)&pfMin));
  return pfMin;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_Min(float pfMin/*[in]*/)
{
  return (*this)->set_Min(pfMin);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* pMousePointers/*[out,retval]*/)
{
  return (*this)->get_MousePointer(pMousePointers);
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
TCOMIProgressBarT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants pMousePointers;
  OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&pMousePointers));
  return pMousePointers;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants pMousePointers/*[in]*/)
{
  return (*this)->set_MousePointer(pMousePointers);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_MouseIcon(IPictureDisp** ppPictureDisp/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(ppPictureDisp);
}

template <class T> IPictureDisp* __fastcall
TCOMIProgressBarT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppPictureDisp;
  OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppPictureDisp));
  return ppPictureDisp;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::_set_MouseIcon(IPictureDisp* ppPictureDisp/*[in]*/)
{
  return (*this)->_set_MouseIcon(ppPictureDisp);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_MouseIcon(IPictureDisp* ppPictureDisp/*[in]*/)
{
  return (*this)->set_MouseIcon(ppPictureDisp);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_Value(float* pfValue/*[out,retval]*/)
{
  return (*this)->get_Value(pfValue);
}

template <class T> float __fastcall
TCOMIProgressBarT<T>::get_Value(void)
{
  float pfValue;
  OLECHECK(this->get_Value((float*)&pfValue));
  return pfValue;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_Value(float pfValue/*[in]*/)
{
  return (*this)->set_Value(pfValue);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  return (*this)->get_OLEDropMode(psOLEDropMode);
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
TCOMIProgressBarT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
  return psOLEDropMode;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  return (*this)->set_OLEDropMode(psOLEDropMode);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_Appearance(Mscomctllib_xp::AppearanceConstants* penumAppearances/*[out,retval]*/)
{
  return (*this)->get_Appearance(penumAppearances);
}

template <class T> Mscomctllib_xp::AppearanceConstants __fastcall
TCOMIProgressBarT<T>::get_Appearance(void)
{
  Mscomctllib_xp::AppearanceConstants penumAppearances;
  OLECHECK(this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&penumAppearances));
  return penumAppearances;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_Appearance(Mscomctllib_xp::AppearanceConstants penumAppearances/*[in]*/)
{
  return (*this)->set_Appearance(penumAppearances);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* penumBorderStyles/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(penumBorderStyles);
}

template <class T> Mscomctllib_xp::BorderStyleConstants __fastcall
TCOMIProgressBarT<T>::get_BorderStyle(void)
{
  Mscomctllib_xp::BorderStyleConstants penumBorderStyles;
  OLECHECK(this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&penumBorderStyles));
  return penumBorderStyles;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_BorderStyle(Mscomctllib_xp::BorderStyleConstants penumBorderStyles/*[in]*/)
{
  return (*this)->set_BorderStyle(penumBorderStyles);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_Enabled(VARIANT_BOOL* bEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(bEnabled);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_Enabled(TOLEBOOL* bEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)bEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIProgressBarT<T>::get_Enabled(void)
{
  VARIANT_BOOL bEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&bEnabled));
  return (TOLEBOOL)bEnabled;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_Enabled(VARIANT_BOOL bEnabled/*[in]*/)
{
  return (*this)->set_Enabled(bEnabled);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_Enabled(TOLEBOOL bEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)bEnabled);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  return (*this)->get_hWnd(phWnd);
}

template <class T> OLE_HANDLE __fastcall
TCOMIProgressBarT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
  return phWnd;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::OLEDrag(void)
{
  return (*this)->OLEDrag();
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::AboutBox(void)
{
  return (*this)->AboutBox();
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_Orientation(Mscomctllib_xp::OrientationConstants* penumOrientation/*[out,retval]*/)
{
  return (*this)->get_Orientation(penumOrientation);
}

template <class T> Mscomctllib_xp::OrientationConstants __fastcall
TCOMIProgressBarT<T>::get_Orientation(void)
{
  Mscomctllib_xp::OrientationConstants penumOrientation;
  OLECHECK(this->get_Orientation((Mscomctllib_xp::OrientationConstants*)&penumOrientation));
  return penumOrientation;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_Orientation(Mscomctllib_xp::OrientationConstants penumOrientation/*[in]*/)
{
  return (*this)->set_Orientation(penumOrientation);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::get_Scrolling(Mscomctllib_xp::ScrollingConstants* penumScrolling/*[out,retval]*/)
{
  return (*this)->get_Scrolling(penumScrolling);
}

template <class T> Mscomctllib_xp::ScrollingConstants __fastcall
TCOMIProgressBarT<T>::get_Scrolling(void)
{
  Mscomctllib_xp::ScrollingConstants penumScrolling;
  OLECHECK(this->get_Scrolling((Mscomctllib_xp::ScrollingConstants*)&penumScrolling));
  return penumScrolling;
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::set_Scrolling(Mscomctllib_xp::ScrollingConstants penumScrolling/*[in]*/)
{
  return (*this)->set_Scrolling(penumScrolling);
}

template <class T> HRESULT __fastcall
TCOMIProgressBarT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

// *********************************************************************//
// DispIntf:  IProgressBar
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {35053A20-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_ControlDefault(float* pfValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfValue /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IProgressBarDispT<T>::get_ControlDefault(void)
{
  float pfValue;
  this->get_ControlDefault((float*)&pfValue);
  return pfValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_ControlDefault(float pfValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pfValue /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_Max(float* pfMax/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Max"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfMax /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IProgressBarDispT<T>::get_Max(void)
{
  float pfMax;
  this->get_Max((float*)&pfMax);
  return pfMax;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_Max(float pfMax/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Max"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pfMax /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_Min(float* pfMin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Min"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfMin /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IProgressBarDispT<T>::get_Min(void)
{
  float pfMin;
  this->get_Min((float*)&pfMin);
  return pfMin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_Min(float pfMin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Min"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pfMin /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* pMousePointers/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pMousePointers /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
IProgressBarDispT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants pMousePointers;
  this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&pMousePointers);
  return pMousePointers;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants pMousePointers/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (int)pMousePointers /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_MouseIcon(IPictureDisp** ppPictureDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppPictureDisp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IProgressBarDispT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppPictureDisp;
  this->get_MouseIcon((IPictureDisp**)&ppPictureDisp);
  return ppPictureDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::_set_MouseIcon(IPictureDisp* ppPictureDisp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppPictureDisp /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_MouseIcon(IPictureDisp* ppPictureDisp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppPictureDisp /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_Value(float* pfValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfValue /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IProgressBarDispT<T>::get_Value(void)
{
  float pfValue;
  this->get_Value((float*)&pfValue);
  return pfValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_Value(float pfValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pfValue /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDropMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
IProgressBarDispT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode);
  return psOLEDropMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDropMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_Appearance(Mscomctllib_xp::AppearanceConstants* penumAppearances/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Appearance"), DISPID(-520));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumAppearances /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::AppearanceConstants __fastcall
IProgressBarDispT<T>::get_Appearance(void)
{
  Mscomctllib_xp::AppearanceConstants penumAppearances;
  this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&penumAppearances);
  return penumAppearances;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_Appearance(Mscomctllib_xp::AppearanceConstants penumAppearances/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Appearance"), DISPID(-520));
  TAutoArgs<1> _args;
  _args[1] = (int)penumAppearances /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* penumBorderStyles/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumBorderStyles /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::BorderStyleConstants __fastcall
IProgressBarDispT<T>::get_BorderStyle(void)
{
  Mscomctllib_xp::BorderStyleConstants penumBorderStyles;
  this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&penumBorderStyles);
  return penumBorderStyles;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_BorderStyle(Mscomctllib_xp::BorderStyleConstants penumBorderStyles/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)penumBorderStyles /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_Enabled(VARIANT_BOOL* bEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IProgressBarDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL bEnabled;
  this->get_Enabled((VARIANT_BOOL*)&bEnabled);
  return bEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_Enabled(VARIANT_BOOL bEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = bEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phWnd /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_HANDLE __fastcall
IProgressBarDispT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  this->get_hWnd((OLE_HANDLE*)&phWnd);
  return phWnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::OLEDrag()
{
  _TDispID _dispid(*this, OLETEXT("OLEDrag"), DISPID(1552));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_Orientation(Mscomctllib_xp::OrientationConstants* penumOrientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumOrientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OrientationConstants __fastcall
IProgressBarDispT<T>::get_Orientation(void)
{
  Mscomctllib_xp::OrientationConstants penumOrientation;
  this->get_Orientation((Mscomctllib_xp::OrientationConstants*)&penumOrientation);
  return penumOrientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_Orientation(Mscomctllib_xp::OrientationConstants penumOrientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)penumOrientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::get_Scrolling(Mscomctllib_xp::ScrollingConstants* penumScrolling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scrolling"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumScrolling /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ScrollingConstants __fastcall
IProgressBarDispT<T>::get_Scrolling(void)
{
  Mscomctllib_xp::ScrollingConstants penumScrolling;
  this->get_Scrolling((Mscomctllib_xp::ScrollingConstants*)&penumScrolling);
  return penumScrolling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::set_Scrolling(Mscomctllib_xp::ScrollingConstants penumScrolling/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scrolling"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (int)penumScrolling /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IProgressBarDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IProgressBarEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {35053A21-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
IProgressBarEventsDispT<T>::MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                      OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IProgressBarEventsDispT<T>::MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                      OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IProgressBarEventsDispT<T>::MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IProgressBarEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IProgressBarEventsDispT<T>::OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                         long* AllowedEffects/*[in,out]*/)
{
  _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = AllowedEffects /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IProgressBarEventsDispT<T>::OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                            VARIANT_BOOL* DefaultCursors/*[in,out]*/)
{
  _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
  TAutoArgs<2> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IProgressBarEventsDispT<T>::OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                       short* DataFormat/*[in,out]*/)
{
  _TDispID _dispid(/* OLESetData */ DISPID(1552));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = DataFormat /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IProgressBarEventsDispT<T>::OLECompleteDrag(long* Effect/*[in,out]*/)
{
  _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
  TAutoArgs<1> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IProgressBarEventsDispT<T>::OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                        long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                        short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                        float* y/*[in,out]*/, short* State/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  _args[7] = State /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IProgressBarEventsDispT<T>::OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                        long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                        short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                        float* y/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
  TAutoArgs<6> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMITreeView
// Interface: ITreeView
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_DropHighlight(Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  return (*this)->get_DropHighlight(ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_DropHighlight(Mscomctllib_xp::INodePtr* ppNode/*[out,retval]*/)
{
  return (*this)->get_DropHighlight(INode**)ppNode);
}

template <class T> Mscomctllib_xp::INodePtr __fastcall
TCOMITreeViewT<T>::get_DropHighlight(void)
{
  Mscomctllib_xp::INode* ppNode;
  OLECHECK(this->get_DropHighlight((Mscomctllib_xp::INode**)&ppNode));
  return (Mscomctllib_xp::INodePtr)ppNode;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::_set_DropHighlight(Mscomctllib_xp::INode* ppNode/*[in]*/)
{
  return (*this)->_set_DropHighlight(ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::_set_DropHighlight(Mscomctllib_xp::INodePtr ppNode/*[in]*/)
{
  return (*this)->_set_DropHighlight(INode*)ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_DropHighlight(VARIANT* ppNode/*[in]*/)
{
  return (*this)->set_DropHighlight(ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_HideSelection(VARIANT_BOOL* pbHideSelection/*[out,retval]*/)
{
  return (*this)->get_HideSelection(pbHideSelection);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_HideSelection(TOLEBOOL* pbHideSelection/*[out,retval]*/)
{
  return (*this)->get_HideSelection(VARIANT_BOOL*)pbHideSelection);
}

template <class T> TOLEBOOL __fastcall
TCOMITreeViewT<T>::get_HideSelection(void)
{
  VARIANT_BOOL pbHideSelection;
  OLECHECK(this->get_HideSelection((VARIANT_BOOL*)&pbHideSelection));
  return (TOLEBOOL)pbHideSelection;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_HideSelection(VARIANT_BOOL pbHideSelection/*[in]*/)
{
  return (*this)->set_HideSelection(pbHideSelection);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_HideSelection(TOLEBOOL pbHideSelection/*[in]*/)
{
  return (*this)->set_HideSelection(VARIANT_BOOL)pbHideSelection);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  return (*this)->get_ImageList(ppImageList);
}

template <class T> LPDISPATCH __fastcall
TCOMITreeViewT<T>::get_ImageList(void)
{
  LPDISPATCH ppImageList;
  OLECHECK(this->get_ImageList((LPDISPATCH*)&ppImageList));
  return ppImageList;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::_set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->_set_ImageList(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->set_ImageList(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Indentation(float* pfIndentation/*[out,retval]*/)
{
  return (*this)->get_Indentation(pfIndentation);
}

template <class T> float __fastcall
TCOMITreeViewT<T>::get_Indentation(void)
{
  float pfIndentation;
  OLECHECK(this->get_Indentation((float*)&pfIndentation));
  return pfIndentation;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Indentation(float pfIndentation/*[in]*/)
{
  return (*this)->set_Indentation(pfIndentation);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_LabelEdit(Mscomctllib_xp::LabelEditConstants* psLabelEdit/*[out,retval]*/)
{
  return (*this)->get_LabelEdit(psLabelEdit);
}

template <class T> Mscomctllib_xp::LabelEditConstants __fastcall
TCOMITreeViewT<T>::get_LabelEdit(void)
{
  Mscomctllib_xp::LabelEditConstants psLabelEdit;
  OLECHECK(this->get_LabelEdit((Mscomctllib_xp::LabelEditConstants*)&psLabelEdit));
  return psLabelEdit;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_LabelEdit(Mscomctllib_xp::LabelEditConstants psLabelEdit/*[in]*/)
{
  return (*this)->set_LabelEdit(psLabelEdit);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_LineStyle(Mscomctllib_xp::TreeLineStyleConstants* psLineStyle/*[out,retval]*/)
{
  return (*this)->get_LineStyle(psLineStyle);
}

template <class T> Mscomctllib_xp::TreeLineStyleConstants __fastcall
TCOMITreeViewT<T>::get_LineStyle(void)
{
  Mscomctllib_xp::TreeLineStyleConstants psLineStyle;
  OLECHECK(this->get_LineStyle((Mscomctllib_xp::TreeLineStyleConstants*)&psLineStyle));
  return psLineStyle;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_LineStyle(Mscomctllib_xp::TreeLineStyleConstants psLineStyle/*[in]*/)
{
  return (*this)->set_LineStyle(psLineStyle);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(psMousePointer);
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
TCOMITreeViewT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants psMousePointer;
  OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer));
  return psMousePointer;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(psMousePointer);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(ppMouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMITreeViewT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
  return ppMouseIcon;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Nodes(Mscomctllib_xp::INodes** ppNode/*[out,retval]*/)
{
  return (*this)->get_Nodes(ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Nodes(Mscomctllib_xp::INodesPtr* ppNode/*[out,retval]*/)
{
  return (*this)->get_Nodes(INodes**)ppNode);
}

template <class T> Mscomctllib_xp::INodesPtr __fastcall
TCOMITreeViewT<T>::get_Nodes(void)
{
  Mscomctllib_xp::INodes* ppNode;
  OLECHECK(this->get_Nodes((Mscomctllib_xp::INodes**)&ppNode));
  return (Mscomctllib_xp::INodesPtr)ppNode;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::_set_Nodes(Mscomctllib_xp::INodes* ppNode/*[in]*/)
{
  return (*this)->_set_Nodes(ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::_set_Nodes(Mscomctllib_xp::INodesPtr ppNode/*[in]*/)
{
  return (*this)->_set_Nodes(INodes*)ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_PathSeparator(BSTR* pbstrPathSeparator/*[out,retval]*/)
{
  return (*this)->get_PathSeparator(pbstrPathSeparator);
}

template <class T> BSTR __fastcall
TCOMITreeViewT<T>::get_PathSeparator(void)
{
  BSTR pbstrPathSeparator = 0;
  OLECHECK(this->get_PathSeparator((BSTR*)&pbstrPathSeparator));
  return pbstrPathSeparator;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_PathSeparator(BSTR pbstrPathSeparator/*[in]*/)
{
  return (*this)->set_PathSeparator(pbstrPathSeparator);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_SelectedItem(Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_SelectedItem(Mscomctllib_xp::INodePtr* ppNode/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(INode**)ppNode);
}

template <class T> Mscomctllib_xp::INodePtr __fastcall
TCOMITreeViewT<T>::get_SelectedItem(void)
{
  Mscomctllib_xp::INode* ppNode;
  OLECHECK(this->get_SelectedItem((Mscomctllib_xp::INode**)&ppNode));
  return (Mscomctllib_xp::INodePtr)ppNode;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::_set_SelectedItem(Mscomctllib_xp::INode* ppNode/*[in]*/)
{
  return (*this)->_set_SelectedItem(ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::_set_SelectedItem(Mscomctllib_xp::INodePtr ppNode/*[in]*/)
{
  return (*this)->_set_SelectedItem(INode*)ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_SelectedItem(VARIANT* ppNode/*[in]*/)
{
  return (*this)->set_SelectedItem(ppNode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Sorted(VARIANT_BOOL* pbSorted/*[out,retval]*/)
{
  return (*this)->get_Sorted(pbSorted);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Sorted(TOLEBOOL* pbSorted/*[out,retval]*/)
{
  return (*this)->get_Sorted(VARIANT_BOOL*)pbSorted);
}

template <class T> TOLEBOOL __fastcall
TCOMITreeViewT<T>::get_Sorted(void)
{
  VARIANT_BOOL pbSorted;
  OLECHECK(this->get_Sorted((VARIANT_BOOL*)&pbSorted));
  return (TOLEBOOL)pbSorted;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Sorted(VARIANT_BOOL pbSorted/*[in]*/)
{
  return (*this)->set_Sorted(pbSorted);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Sorted(TOLEBOOL pbSorted/*[in]*/)
{
  return (*this)->set_Sorted(VARIANT_BOOL)pbSorted);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Style(Mscomctllib_xp::TreeStyleConstants* psStyle/*[out,retval]*/)
{
  return (*this)->get_Style(psStyle);
}

template <class T> Mscomctllib_xp::TreeStyleConstants __fastcall
TCOMITreeViewT<T>::get_Style(void)
{
  Mscomctllib_xp::TreeStyleConstants psStyle;
  OLECHECK(this->get_Style((Mscomctllib_xp::TreeStyleConstants*)&psStyle));
  return psStyle;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Style(Mscomctllib_xp::TreeStyleConstants psStyle/*[in]*/)
{
  return (*this)->set_Style(psStyle);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/)
{
  return (*this)->get_OLEDragMode(psOLEDragMode);
}

template <class T> Mscomctllib_xp::OLEDragConstants __fastcall
TCOMITreeViewT<T>::get_OLEDragMode(void)
{
  Mscomctllib_xp::OLEDragConstants psOLEDragMode;
  OLECHECK(this->get_OLEDragMode((Mscomctllib_xp::OLEDragConstants*)&psOLEDragMode));
  return psOLEDragMode;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/)
{
  return (*this)->set_OLEDragMode(psOLEDragMode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  return (*this)->get_OLEDropMode(psOLEDropMode);
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
TCOMITreeViewT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
  return psOLEDropMode;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  return (*this)->set_OLEDropMode(psOLEDropMode);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Appearance(Mscomctllib_xp::AppearanceConstants* psAppearance/*[out,retval]*/)
{
  return (*this)->get_Appearance(psAppearance);
}

template <class T> Mscomctllib_xp::AppearanceConstants __fastcall
TCOMITreeViewT<T>::get_Appearance(void)
{
  Mscomctllib_xp::AppearanceConstants psAppearance;
  OLECHECK(this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&psAppearance));
  return psAppearance;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Appearance(Mscomctllib_xp::AppearanceConstants psAppearance/*[in]*/)
{
  return (*this)->set_Appearance(psAppearance);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(psBorderStyle);
}

template <class T> Mscomctllib_xp::BorderStyleConstants __fastcall
TCOMITreeViewT<T>::get_BorderStyle(void)
{
  Mscomctllib_xp::BorderStyleConstants psBorderStyle;
  OLECHECK(this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&psBorderStyle));
  return psBorderStyle;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/)
{
  return (*this)->set_BorderStyle(psBorderStyle);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pbEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMITreeViewT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
  return (TOLEBOOL)pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Enabled(TOLEBOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Font(IFontDisp** ppFont/*[out,retval]*/)
{
  return (*this)->get_Font(ppFont);
}

template <class T> IFontDisp* __fastcall
TCOMITreeViewT<T>::get_Font(void)
{
  IFontDisp* ppFont;
  OLECHECK(this->get_Font((IFontDisp**)&ppFont));
  return ppFont;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Font(IFontDisp* ppFont/*[in]*/)
{
  return (*this)->set_Font(ppFont);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::_set_Font(IFontDisp* ppFont/*[in]*/)
{
  return (*this)->_set_Font(ppFont);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  return (*this)->get_hWnd(phWnd);
}

template <class T> OLE_HANDLE __fastcall
TCOMITreeViewT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
  return phWnd;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  return (*this)->set_hWnd(phWnd);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::HitTest(float x/*[in]*/, float y/*[in]*/, 
                           Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  return (*this)->HitTest(x, y, ppNode);
}

template <class T> Mscomctllib_xp::INode* __fastcall
TCOMITreeViewT<T>::HitTest(float x/*[in]*/, float y/*[in]*/)
{
  Mscomctllib_xp::INode* ppNode;
  OLECHECK(this->HitTest(, (Mscomctllib_xp::INode**)&ppNode));
  return ppNode;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::GetVisibleCount(long* plVisibleCount/*[out,retval]*/)
{
  return (*this)->GetVisibleCount(plVisibleCount);
}

template <class T> long __fastcall
TCOMITreeViewT<T>::GetVisibleCount(void)
{
  long plVisibleCount;
  OLECHECK(this->GetVisibleCount((long*)&plVisibleCount));
  return plVisibleCount;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::StartLabelEdit(void)
{
  return (*this)->StartLabelEdit();
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::AboutBox(void)
{
  return (*this)->AboutBox();
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::OLEDrag(void)
{
  return (*this)->OLEDrag();
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Checkboxes(VARIANT_BOOL* pbCheckboxes/*[out,retval]*/)
{
  return (*this)->get_Checkboxes(pbCheckboxes);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Checkboxes(TOLEBOOL* pbCheckboxes/*[out,retval]*/)
{
  return (*this)->get_Checkboxes(VARIANT_BOOL*)pbCheckboxes);
}

template <class T> TOLEBOOL __fastcall
TCOMITreeViewT<T>::get_Checkboxes(void)
{
  VARIANT_BOOL pbCheckboxes;
  OLECHECK(this->get_Checkboxes((VARIANT_BOOL*)&pbCheckboxes));
  return (TOLEBOOL)pbCheckboxes;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Checkboxes(VARIANT_BOOL pbCheckboxes/*[in]*/)
{
  return (*this)->set_Checkboxes(pbCheckboxes);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Checkboxes(TOLEBOOL pbCheckboxes/*[in]*/)
{
  return (*this)->set_Checkboxes(VARIANT_BOOL)pbCheckboxes);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_FullRowSelect(VARIANT_BOOL* pbFullRowSelect/*[out,retval]*/)
{
  return (*this)->get_FullRowSelect(pbFullRowSelect);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_FullRowSelect(TOLEBOOL* pbFullRowSelect/*[out,retval]*/)
{
  return (*this)->get_FullRowSelect(VARIANT_BOOL*)pbFullRowSelect);
}

template <class T> TOLEBOOL __fastcall
TCOMITreeViewT<T>::get_FullRowSelect(void)
{
  VARIANT_BOOL pbFullRowSelect;
  OLECHECK(this->get_FullRowSelect((VARIANT_BOOL*)&pbFullRowSelect));
  return (TOLEBOOL)pbFullRowSelect;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_FullRowSelect(VARIANT_BOOL pbFullRowSelect/*[in]*/)
{
  return (*this)->set_FullRowSelect(pbFullRowSelect);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_FullRowSelect(TOLEBOOL pbFullRowSelect/*[in]*/)
{
  return (*this)->set_FullRowSelect(VARIANT_BOOL)pbFullRowSelect);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_HotTracking(VARIANT_BOOL* pbHotTracking/*[out,retval]*/)
{
  return (*this)->get_HotTracking(pbHotTracking);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_HotTracking(TOLEBOOL* pbHotTracking/*[out,retval]*/)
{
  return (*this)->get_HotTracking(VARIANT_BOOL*)pbHotTracking);
}

template <class T> TOLEBOOL __fastcall
TCOMITreeViewT<T>::get_HotTracking(void)
{
  VARIANT_BOOL pbHotTracking;
  OLECHECK(this->get_HotTracking((VARIANT_BOOL*)&pbHotTracking));
  return (TOLEBOOL)pbHotTracking;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_HotTracking(VARIANT_BOOL pbHotTracking/*[in]*/)
{
  return (*this)->set_HotTracking(pbHotTracking);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_HotTracking(TOLEBOOL pbHotTracking/*[in]*/)
{
  return (*this)->set_HotTracking(VARIANT_BOOL)pbHotTracking);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Scroll(VARIANT_BOOL* pbScroll/*[out,retval]*/)
{
  return (*this)->get_Scroll(pbScroll);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_Scroll(TOLEBOOL* pbScroll/*[out,retval]*/)
{
  return (*this)->get_Scroll(VARIANT_BOOL*)pbScroll);
}

template <class T> TOLEBOOL __fastcall
TCOMITreeViewT<T>::get_Scroll(void)
{
  VARIANT_BOOL pbScroll;
  OLECHECK(this->get_Scroll((VARIANT_BOOL*)&pbScroll));
  return (TOLEBOOL)pbScroll;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Scroll(VARIANT_BOOL pbScroll/*[in]*/)
{
  return (*this)->set_Scroll(pbScroll);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_Scroll(TOLEBOOL pbScroll/*[in]*/)
{
  return (*this)->set_Scroll(VARIANT_BOOL)pbScroll);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_SingleSel(VARIANT_BOOL* pbSingleSel/*[out,retval]*/)
{
  return (*this)->get_SingleSel(pbSingleSel);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::get_SingleSel(TOLEBOOL* pbSingleSel/*[out,retval]*/)
{
  return (*this)->get_SingleSel(VARIANT_BOOL*)pbSingleSel);
}

template <class T> TOLEBOOL __fastcall
TCOMITreeViewT<T>::get_SingleSel(void)
{
  VARIANT_BOOL pbSingleSel;
  OLECHECK(this->get_SingleSel((VARIANT_BOOL*)&pbSingleSel));
  return (TOLEBOOL)pbSingleSel;
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_SingleSel(VARIANT_BOOL pbSingleSel/*[in]*/)
{
  return (*this)->set_SingleSel(pbSingleSel);
}

template <class T> HRESULT __fastcall
TCOMITreeViewT<T>::set_SingleSel(TOLEBOOL pbSingleSel/*[in]*/)
{
  return (*this)->set_SingleSel(VARIANT_BOOL)pbSingleSel);
}

// *********************************************************************//
// DispIntf:  ITreeView
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C74190B4-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_DropHighlight(Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropHighlight"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
ITreeViewDispT<T>::get_DropHighlight(void)
{
  Mscomctllib_xp::INode* ppNode;
  this->get_DropHighlight((Mscomctllib_xp::INode**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::_set_DropHighlight(Mscomctllib_xp::INode* ppNode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropHighlight"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppNode /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_DropHighlight(VARIANT* ppNode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropHighlight"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = ppNode /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_HideSelection(VARIANT_BOOL* pbHideSelection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideSelection"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbHideSelection /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITreeViewDispT<T>::get_HideSelection(void)
{
  VARIANT_BOOL pbHideSelection;
  this->get_HideSelection((VARIANT_BOOL*)&pbHideSelection);
  return pbHideSelection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_HideSelection(VARIANT_BOOL pbHideSelection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideSelection"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pbHideSelection /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppImageList /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ITreeViewDispT<T>::get_ImageList(void)
{
  LPDISPATCH ppImageList;
  this->get_ImageList((LPDISPATCH*)&ppImageList);
  return ppImageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::_set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_Indentation(float* pfIndentation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Indentation"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIndentation /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ITreeViewDispT<T>::get_Indentation(void)
{
  float pfIndentation;
  this->get_Indentation((float*)&pfIndentation);
  return pfIndentation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_Indentation(float pfIndentation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Indentation"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pfIndentation /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_LabelEdit(Mscomctllib_xp::LabelEditConstants* psLabelEdit/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelEdit"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psLabelEdit /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::LabelEditConstants __fastcall
ITreeViewDispT<T>::get_LabelEdit(void)
{
  Mscomctllib_xp::LabelEditConstants psLabelEdit;
  this->get_LabelEdit((Mscomctllib_xp::LabelEditConstants*)&psLabelEdit);
  return psLabelEdit;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_LabelEdit(Mscomctllib_xp::LabelEditConstants psLabelEdit/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelEdit"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)psLabelEdit /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_LineStyle(Mscomctllib_xp::TreeLineStyleConstants* psLineStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineStyle"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psLineStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::TreeLineStyleConstants __fastcall
ITreeViewDispT<T>::get_LineStyle(void)
{
  Mscomctllib_xp::TreeLineStyleConstants psLineStyle;
  this->get_LineStyle((Mscomctllib_xp::TreeLineStyleConstants*)&psLineStyle);
  return psLineStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_LineStyle(Mscomctllib_xp::TreeLineStyleConstants psLineStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineStyle"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)psLineStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psMousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
ITreeViewDispT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants psMousePointer;
  this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer);
  return psMousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (int)psMousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppMouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
ITreeViewDispT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  this->get_MouseIcon((IPictureDisp**)&ppMouseIcon);
  return ppMouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_Nodes(Mscomctllib_xp::INodes** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INodes**)ppNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INodes* __fastcall
ITreeViewDispT<T>::get_Nodes(void)
{
  Mscomctllib_xp::INodes* ppNode;
  this->get_Nodes((Mscomctllib_xp::INodes**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::_set_Nodes(Mscomctllib_xp::INodes* ppNode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::INodes*)ppNode /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_PathSeparator(BSTR* pbstrPathSeparator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PathSeparator"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrPathSeparator /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ITreeViewDispT<T>::get_PathSeparator(void)
{
  BSTR pbstrPathSeparator;
  this->get_PathSeparator((BSTR*)&pbstrPathSeparator);
  return pbstrPathSeparator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_PathSeparator(BSTR pbstrPathSeparator/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PathSeparator"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pbstrPathSeparator /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_SelectedItem(Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
ITreeViewDispT<T>::get_SelectedItem(void)
{
  Mscomctllib_xp::INode* ppNode;
  this->get_SelectedItem((Mscomctllib_xp::INode**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::_set_SelectedItem(Mscomctllib_xp::INode* ppNode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppNode /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_SelectedItem(VARIANT* ppNode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = ppNode /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_Sorted(VARIANT_BOOL* pbSorted/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sorted"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSorted /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITreeViewDispT<T>::get_Sorted(void)
{
  VARIANT_BOOL pbSorted;
  this->get_Sorted((VARIANT_BOOL*)&pbSorted);
  return pbSorted;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_Sorted(VARIANT_BOOL pbSorted/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sorted"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pbSorted /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_Style(Mscomctllib_xp::TreeStyleConstants* psStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::TreeStyleConstants __fastcall
ITreeViewDispT<T>::get_Style(void)
{
  Mscomctllib_xp::TreeStyleConstants psStyle;
  this->get_Style((Mscomctllib_xp::TreeStyleConstants*)&psStyle);
  return psStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_Style(Mscomctllib_xp::TreeStyleConstants psStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)psStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDragMode"), DISPID(1550));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDragMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDragConstants __fastcall
ITreeViewDispT<T>::get_OLEDragMode(void)
{
  Mscomctllib_xp::OLEDragConstants psOLEDragMode;
  this->get_OLEDragMode((Mscomctllib_xp::OLEDragConstants*)&psOLEDragMode);
  return psOLEDragMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDragMode"), DISPID(1550));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDragMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDropMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
ITreeViewDispT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode);
  return psOLEDropMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDropMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_Appearance(Mscomctllib_xp::AppearanceConstants* psAppearance/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Appearance"), DISPID(-520));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psAppearance /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::AppearanceConstants __fastcall
ITreeViewDispT<T>::get_Appearance(void)
{
  Mscomctllib_xp::AppearanceConstants psAppearance;
  this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&psAppearance);
  return psAppearance;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_Appearance(Mscomctllib_xp::AppearanceConstants psAppearance/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Appearance"), DISPID(-520));
  TAutoArgs<1> _args;
  _args[1] = (int)psAppearance /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psBorderStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::BorderStyleConstants __fastcall
ITreeViewDispT<T>::get_BorderStyle(void)
{
  Mscomctllib_xp::BorderStyleConstants psBorderStyle;
  this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&psBorderStyle);
  return psBorderStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)psBorderStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITreeViewDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_Font(IFontDisp** ppFont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)ppFont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
ITreeViewDispT<T>::get_Font(void)
{
  IFontDisp* ppFont;
  this->get_Font((IFontDisp**)&ppFont);
  return ppFont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_Font(IFontDisp* ppFont/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)ppFont /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::_set_Font(IFontDisp* ppFont/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)ppFont /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phWnd /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_HANDLE __fastcall
ITreeViewDispT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  this->get_hWnd((OLE_HANDLE*)&phWnd);
  return phWnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<1> _args;
  _args[1] = phWnd /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::HitTest(float x/*[in]*/, float y/*[in]*/, 
                           Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HitTest"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_R4:0]*/;
  _args[2] = y /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
ITreeViewDispT<T>::HitTest(float x/*[in]*/, float y/*[in]*/)
{
  Mscomctllib_xp::INode* ppNode;
  this->HitTest(x, y, (Mscomctllib_xp::INode**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::GetVisibleCount(long* plVisibleCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVisibleCount"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plVisibleCount /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ITreeViewDispT<T>::GetVisibleCount(void)
{
  long plVisibleCount;
  this->GetVisibleCount((long*)&plVisibleCount);
  return plVisibleCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::StartLabelEdit()
{
  _TDispID _dispid(*this, OLETEXT("StartLabelEdit"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::OLEDrag()
{
  _TDispID _dispid(*this, OLETEXT("OLEDrag"), DISPID(1552));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_Checkboxes(VARIANT_BOOL* pbCheckboxes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checkboxes"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbCheckboxes /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITreeViewDispT<T>::get_Checkboxes(void)
{
  VARIANT_BOOL pbCheckboxes;
  this->get_Checkboxes((VARIANT_BOOL*)&pbCheckboxes);
  return pbCheckboxes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_Checkboxes(VARIANT_BOOL pbCheckboxes/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checkboxes"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pbCheckboxes /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_FullRowSelect(VARIANT_BOOL* pbFullRowSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullRowSelect"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbFullRowSelect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITreeViewDispT<T>::get_FullRowSelect(void)
{
  VARIANT_BOOL pbFullRowSelect;
  this->get_FullRowSelect((VARIANT_BOOL*)&pbFullRowSelect);
  return pbFullRowSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_FullRowSelect(VARIANT_BOOL pbFullRowSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullRowSelect"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = pbFullRowSelect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_HotTracking(VARIANT_BOOL* pbHotTracking/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotTracking"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbHotTracking /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITreeViewDispT<T>::get_HotTracking(void)
{
  VARIANT_BOOL pbHotTracking;
  this->get_HotTracking((VARIANT_BOOL*)&pbHotTracking);
  return pbHotTracking;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_HotTracking(VARIANT_BOOL pbHotTracking/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotTracking"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pbHotTracking /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_Scroll(VARIANT_BOOL* pbScroll/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scroll"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbScroll /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITreeViewDispT<T>::get_Scroll(void)
{
  VARIANT_BOOL pbScroll;
  this->get_Scroll((VARIANT_BOOL*)&pbScroll);
  return pbScroll;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_Scroll(VARIANT_BOOL pbScroll/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scroll"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pbScroll /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::get_SingleSel(VARIANT_BOOL* pbSingleSel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SingleSel"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSingleSel /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ITreeViewDispT<T>::get_SingleSel(void)
{
  VARIANT_BOOL pbSingleSel;
  this->get_SingleSel((VARIANT_BOOL*)&pbSingleSel);
  return pbSingleSel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ITreeViewDispT<T>::set_SingleSel(VARIANT_BOOL pbSingleSel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SingleSel"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pbSingleSel /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ITreeViewEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {C74190B5-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::BeforeLabelEdit(short* Cancel)
{
  _TDispID _dispid(/* BeforeLabelEdit */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Cancel /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::AfterLabelEdit(short* Cancel, BSTR* NewString)
{
  _TDispID _dispid(/* AfterLabelEdit */ DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = Cancel /*[VT_I2:1]*/;
  _args[2] = NewString /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::Collapse(Mscomctllib_xp::Node* Node)
{
  _TDispID _dispid(/* Collapse */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::Node*)Node /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::Expand(Mscomctllib_xp::Node* Node)
{
  _TDispID _dispid(/* Expand */ DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::Node*)Node /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::NodeClick(Mscomctllib_xp::Node* Node)
{
  _TDispID _dispid(/* NodeClick */ DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::Node*)Node /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::KeyDown(short* KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::KeyUp(short* KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::KeyPress(short* KeyAscii)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = KeyAscii /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::DblClick()
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::NodeCheck(Mscomctllib_xp::Node* Node)
{
  _TDispID _dispid(/* NodeCheck */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::Node*)Node /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                      long* AllowedEffects/*[in,out]*/)
{
  _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = AllowedEffects /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                         VARIANT_BOOL* DefaultCursors/*[in,out]*/)
{
  _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
  TAutoArgs<2> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                    short* DataFormat/*[in,out]*/)
{
  _TDispID _dispid(/* OLESetData */ DISPID(1552));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = DataFormat /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::OLECompleteDrag(long* Effect/*[in,out]*/)
{
  _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
  TAutoArgs<1> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                     long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                     short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                     float* y/*[in,out]*/, short* State/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  _args[7] = State /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ITreeViewEventsDispT<T>::OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                     long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                     short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                     float* y/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
  TAutoArgs<6> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMINodes
// Interface: INodes
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMINodesT<T>::get_Count(short* psCount/*[out,retval]*/)
{
  return (*this)->get_Count(psCount);
}

template <class T> short __fastcall
TCOMINodesT<T>::get_Count(void)
{
  short psCount;
  OLECHECK(this->get_Count((short*)&psCount));
  return psCount;
}

template <class T> HRESULT __fastcall
TCOMINodesT<T>::set_Count(short psCount/*[in]*/)
{
  return (*this)->set_Count(psCount);
}

template <class T> HRESULT __fastcall
TCOMINodesT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                   Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  return (*this)->get_ControlDefault(Index, ppNode);
}

template <class T> Mscomctllib_xp::INode* __fastcall
TCOMINodesT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::INode* ppNode;
  OLECHECK(this->get_ControlDefault(, (Mscomctllib_xp::INode**)&ppNode));
  return ppNode;
}

template <class T> HRESULT __fastcall
TCOMINodesT<T>::set_ControlDefault(VARIANT* Index/*[in]*/, Mscomctllib_xp::INode* ppNode/*[in]*/)
{
  return (*this)->set_ControlDefault(Index, ppNode);
}

template <class T> HRESULT __fastcall
TCOMINodesT<T>::Add(VARIANT* Relative/*[in,opt]*/, VARIANT* Relationship/*[in,opt]*/, 
                    VARIANT* Key/*[in,opt]*/, VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                    VARIANT* SelectedImage/*[in,opt]*/, 
                    Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  return (*this)->Add(Relative, Relationship, Key, Text, Image, SelectedImage, ppNode);
}

template <class T> Mscomctllib_xp::INode* __fastcall
TCOMINodesT<T>::Add(VARIANT* Relative/*[in,opt]*/, VARIANT* Relationship/*[in,opt]*/, 
                    VARIANT* Key/*[in,opt]*/, VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                    VARIANT* SelectedImage/*[in,opt]*/)
{
  Mscomctllib_xp::INode* ppNode;
  OLECHECK(this->Add(, (Mscomctllib_xp::INode**)&ppNode));
  return ppNode;
}

template <class T> HRESULT __fastcall
TCOMINodesT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMINodesT<T>::get_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppNode);
}

template <class T> Mscomctllib_xp::INode* __fastcall
TCOMINodesT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::INode* ppNode;
  OLECHECK(this->get_Item(, (Mscomctllib_xp::INode**)&ppNode));
  return ppNode;
}

template <class T> HRESULT __fastcall
TCOMINodesT<T>::set_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::INode* ppNode/*[in]*/)
{
  return (*this)->set_Item(Index, ppNode);
}

template <class T> HRESULT __fastcall
TCOMINodesT<T>::Remove(VARIANT* Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMINodesT<T>::_NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppNewEnum);
}

template <class T> LPDISPATCH __fastcall
TCOMINodesT<T>::_NewEnum(void)
{
  LPDISPATCH ppNewEnum;
  OLECHECK(this->_NewEnum((LPDISPATCH*)&ppNewEnum));
  return ppNewEnum;
}

// *********************************************************************//
// DispIntf:  INodes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C74190B7-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodesDispT<T>::get_Count(short* psCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psCount /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
INodesDispT<T>::get_Count(void)
{
  short psCount;
  this->get_Count((short*)&psCount);
  return psCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodesDispT<T>::set_Count(short psCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = psCount /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodesDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                   Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
INodesDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::INode* ppNode;
  this->get_ControlDefault(Index, (Mscomctllib_xp::INode**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodesDispT<T>::set_ControlDefault(VARIANT* Index/*[in]*/, Mscomctllib_xp::INode* ppNode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppNode /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodesDispT<T>::Add(VARIANT* Relative/*[in,opt]*/, VARIANT* Relationship/*[in,opt]*/, 
                    VARIANT* Key/*[in,opt]*/, VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/
                    , VARIANT* SelectedImage/*[in,opt]*/, 
                    Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<6> _args;
  _args[1] = Relative /*[VT_VARIANT:1]*/;
  _args[2] = Relationship /*[VT_VARIANT:1]*/;
  _args[3] = Key /*[VT_VARIANT:1]*/;
  _args[4] = Text /*[VT_VARIANT:1]*/;
  _args[5] = Image /*[VT_VARIANT:1]*/;
  _args[6] = SelectedImage /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppNode /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
INodesDispT<T>::Add(VARIANT* Relative/*[in,opt]*/, VARIANT* Relationship/*[in,opt]*/, 
                    VARIANT* Key/*[in,opt]*/, VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                    VARIANT* SelectedImage/*[in,opt]*/)
{
  Mscomctllib_xp::INode* ppNode;
  this->Add(Relative, Relationship, Key, Text, Image, SelectedImage, (Mscomctllib_xp::INode**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodesDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodesDispT<T>::get_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::INode** ppNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
INodesDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::INode* ppNode;
  this->get_Item(Index, (Mscomctllib_xp::INode**)&ppNode);
  return ppNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodesDispT<T>::set_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::INode* ppNode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppNode /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodesDispT<T>::Remove(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodesDispT<T>::_NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppNewEnum /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
INodesDispT<T>::_NewEnum(void)
{
  LPDISPATCH ppNewEnum;
  this->_NewEnum((LPDISPATCH*)&ppNewEnum);
  return ppNewEnum;
}

// *********************************************************************//
// SmartIntf: TCOMINode
// Interface: INode
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMINodeT<T>::get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get__ObjectDefault(pbstrText);
}

template <class T> BSTR __fastcall
TCOMINodeT<T>::get__ObjectDefault(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get__ObjectDefault((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set__ObjectDefault(BSTR pbstrText/*[in]*/)
{
  return (*this)->set__ObjectDefault(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Child(Mscomctllib_xp::INode** ppChild/*[out,retval]*/)
{
  return (*this)->get_Child(ppChild);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Child(Mscomctllib_xp::INodePtr* ppChild/*[out,retval]*/)
{
  return (*this)->get_Child(INode**)ppChild);
}

template <class T> Mscomctllib_xp::INodePtr __fastcall
TCOMINodeT<T>::get_Child(void)
{
  Mscomctllib_xp::INode* ppChild;
  OLECHECK(this->get_Child((Mscomctllib_xp::INode**)&ppChild));
  return (Mscomctllib_xp::INodePtr)ppChild;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Child(Mscomctllib_xp::INode* ppChild/*[in]*/)
{
  return (*this)->_set_Child(ppChild);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Child(Mscomctllib_xp::INodePtr ppChild/*[in]*/)
{
  return (*this)->_set_Child(INode*)ppChild);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Children(short* psChildren/*[out,retval]*/)
{
  return (*this)->get_Children(psChildren);
}

template <class T> short __fastcall
TCOMINodeT<T>::get_Children(void)
{
  short psChildren;
  OLECHECK(this->get_Children((short*)&psChildren));
  return psChildren;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Children(short psChildren/*[in]*/)
{
  return (*this)->set_Children(psChildren);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Expanded(VARIANT_BOOL* pbExpanded/*[out,retval]*/)
{
  return (*this)->get_Expanded(pbExpanded);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Expanded(TOLEBOOL* pbExpanded/*[out,retval]*/)
{
  return (*this)->get_Expanded(VARIANT_BOOL*)pbExpanded);
}

template <class T> TOLEBOOL __fastcall
TCOMINodeT<T>::get_Expanded(void)
{
  VARIANT_BOOL pbExpanded;
  OLECHECK(this->get_Expanded((VARIANT_BOOL*)&pbExpanded));
  return (TOLEBOOL)pbExpanded;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Expanded(VARIANT_BOOL pbExpanded/*[in]*/)
{
  return (*this)->set_Expanded(pbExpanded);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Expanded(TOLEBOOL pbExpanded/*[in]*/)
{
  return (*this)->set_Expanded(VARIANT_BOOL)pbExpanded);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_ExpandedImage(VARIANT* pExpandedImage/*[out,retval]*/)
{
  return (*this)->get_ExpandedImage(pExpandedImage);
}

template <class T> VARIANT __fastcall
TCOMINodeT<T>::get_ExpandedImage(void)
{
  VARIANT pExpandedImage;
  OLECHECK(this->get_ExpandedImage((VARIANT*)&pExpandedImage));
  return pExpandedImage;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_ExpandedImage(VARIANT pExpandedImage/*[in]*/)
{
  return (*this)->set_ExpandedImage(pExpandedImage);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_FirstSibling(Mscomctllib_xp::INode** ppFirstSibling/*[out,retval]*/)
{
  return (*this)->get_FirstSibling(ppFirstSibling);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_FirstSibling(Mscomctllib_xp::INodePtr* ppFirstSibling/*[out,retval]*/)
{
  return (*this)->get_FirstSibling(INode**)ppFirstSibling);
}

template <class T> Mscomctllib_xp::INodePtr __fastcall
TCOMINodeT<T>::get_FirstSibling(void)
{
  Mscomctllib_xp::INode* ppFirstSibling;
  OLECHECK(this->get_FirstSibling((Mscomctllib_xp::INode**)&ppFirstSibling));
  return (Mscomctllib_xp::INodePtr)ppFirstSibling;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_FirstSibling(Mscomctllib_xp::INode* ppFirstSibling/*[in]*/)
{
  return (*this)->_set_FirstSibling(ppFirstSibling);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_FirstSibling(Mscomctllib_xp::INodePtr ppFirstSibling/*[in]*/)
{
  return (*this)->_set_FirstSibling(INode*)ppFirstSibling);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_FullPath(BSTR* pbstrFullPath/*[out,retval]*/)
{
  return (*this)->get_FullPath(pbstrFullPath);
}

template <class T> BSTR __fastcall
TCOMINodeT<T>::get_FullPath(void)
{
  BSTR pbstrFullPath = 0;
  OLECHECK(this->get_FullPath((BSTR*)&pbstrFullPath));
  return pbstrFullPath;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_FullPath(BSTR pbstrFullPath/*[in]*/)
{
  return (*this)->set_FullPath(pbstrFullPath);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Image(VARIANT* pImage/*[out,retval]*/)
{
  return (*this)->get_Image(pImage);
}

template <class T> VARIANT __fastcall
TCOMINodeT<T>::get_Image(void)
{
  VARIANT pImage;
  OLECHECK(this->get_Image((VARIANT*)&pImage));
  return pImage;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Image(VARIANT pImage/*[in]*/)
{
  return (*this)->set_Image(pImage);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Index(short* psIndex/*[out,retval]*/)
{
  return (*this)->get_Index(psIndex);
}

template <class T> short __fastcall
TCOMINodeT<T>::get_Index(void)
{
  short psIndex;
  OLECHECK(this->get_Index((short*)&psIndex));
  return psIndex;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Index(short psIndex/*[in]*/)
{
  return (*this)->set_Index(psIndex);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  return (*this)->get_Key(pbstrKey);
}

template <class T> BSTR __fastcall
TCOMINodeT<T>::get_Key(void)
{
  BSTR pbstrKey = 0;
  OLECHECK(this->get_Key((BSTR*)&pbstrKey));
  return pbstrKey;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  return (*this)->set_Key(pbstrKey);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_LastSibling(Mscomctllib_xp::INode** ppLastSibling/*[out,retval]*/)
{
  return (*this)->get_LastSibling(ppLastSibling);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_LastSibling(Mscomctllib_xp::INodePtr* ppLastSibling/*[out,retval]*/)
{
  return (*this)->get_LastSibling(INode**)ppLastSibling);
}

template <class T> Mscomctllib_xp::INodePtr __fastcall
TCOMINodeT<T>::get_LastSibling(void)
{
  Mscomctllib_xp::INode* ppLastSibling;
  OLECHECK(this->get_LastSibling((Mscomctllib_xp::INode**)&ppLastSibling));
  return (Mscomctllib_xp::INodePtr)ppLastSibling;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_LastSibling(Mscomctllib_xp::INode* ppLastSibling/*[in]*/)
{
  return (*this)->_set_LastSibling(ppLastSibling);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_LastSibling(Mscomctllib_xp::INodePtr ppLastSibling/*[in]*/)
{
  return (*this)->_set_LastSibling(INode*)ppLastSibling);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Next(Mscomctllib_xp::INode** ppNext/*[out,retval]*/)
{
  return (*this)->get_Next(ppNext);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Next(Mscomctllib_xp::INodePtr* ppNext/*[out,retval]*/)
{
  return (*this)->get_Next(INode**)ppNext);
}

template <class T> Mscomctllib_xp::INodePtr __fastcall
TCOMINodeT<T>::get_Next(void)
{
  Mscomctllib_xp::INode* ppNext;
  OLECHECK(this->get_Next((Mscomctllib_xp::INode**)&ppNext));
  return (Mscomctllib_xp::INodePtr)ppNext;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Next(Mscomctllib_xp::INode* ppNext/*[in]*/)
{
  return (*this)->_set_Next(ppNext);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Next(Mscomctllib_xp::INodePtr ppNext/*[in]*/)
{
  return (*this)->_set_Next(INode*)ppNext);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Parent(Mscomctllib_xp::INode** ppParent/*[out,retval]*/)
{
  return (*this)->get_Parent(ppParent);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Parent(Mscomctllib_xp::INodePtr* ppParent/*[out,retval]*/)
{
  return (*this)->get_Parent(INode**)ppParent);
}

template <class T> Mscomctllib_xp::INodePtr __fastcall
TCOMINodeT<T>::get_Parent(void)
{
  Mscomctllib_xp::INode* ppParent;
  OLECHECK(this->get_Parent((Mscomctllib_xp::INode**)&ppParent));
  return (Mscomctllib_xp::INodePtr)ppParent;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Parent(Mscomctllib_xp::INode* ppParent/*[in]*/)
{
  return (*this)->_set_Parent(ppParent);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Parent(Mscomctllib_xp::INodePtr ppParent/*[in]*/)
{
  return (*this)->_set_Parent(INode*)ppParent);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Previous(Mscomctllib_xp::INode** ppPrevious/*[out,retval]*/)
{
  return (*this)->get_Previous(ppPrevious);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Previous(Mscomctllib_xp::INodePtr* ppPrevious/*[out,retval]*/)
{
  return (*this)->get_Previous(INode**)ppPrevious);
}

template <class T> Mscomctllib_xp::INodePtr __fastcall
TCOMINodeT<T>::get_Previous(void)
{
  Mscomctllib_xp::INode* ppPrevious;
  OLECHECK(this->get_Previous((Mscomctllib_xp::INode**)&ppPrevious));
  return (Mscomctllib_xp::INodePtr)ppPrevious;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Previous(Mscomctllib_xp::INode* ppPrevious/*[in]*/)
{
  return (*this)->_set_Previous(ppPrevious);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Previous(Mscomctllib_xp::INodePtr ppPrevious/*[in]*/)
{
  return (*this)->_set_Previous(INode*)ppPrevious);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Root(Mscomctllib_xp::INode** ppRoot/*[out,retval]*/)
{
  return (*this)->get_Root(ppRoot);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Root(Mscomctllib_xp::INodePtr* ppRoot/*[out,retval]*/)
{
  return (*this)->get_Root(INode**)ppRoot);
}

template <class T> Mscomctllib_xp::INodePtr __fastcall
TCOMINodeT<T>::get_Root(void)
{
  Mscomctllib_xp::INode* ppRoot;
  OLECHECK(this->get_Root((Mscomctllib_xp::INode**)&ppRoot));
  return (Mscomctllib_xp::INodePtr)ppRoot;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Root(Mscomctllib_xp::INode* ppRoot/*[in]*/)
{
  return (*this)->_set_Root(ppRoot);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Root(Mscomctllib_xp::INodePtr ppRoot/*[in]*/)
{
  return (*this)->_set_Root(INode*)ppRoot);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/)
{
  return (*this)->get_Selected(pbSelected);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Selected(TOLEBOOL* pbSelected/*[out,retval]*/)
{
  return (*this)->get_Selected(VARIANT_BOOL*)pbSelected);
}

template <class T> TOLEBOOL __fastcall
TCOMINodeT<T>::get_Selected(void)
{
  VARIANT_BOOL pbSelected;
  OLECHECK(this->get_Selected((VARIANT_BOOL*)&pbSelected));
  return (TOLEBOOL)pbSelected;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Selected(VARIANT_BOOL pbSelected/*[in]*/)
{
  return (*this)->set_Selected(pbSelected);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Selected(TOLEBOOL pbSelected/*[in]*/)
{
  return (*this)->set_Selected(VARIANT_BOOL)pbSelected);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_SelectedImage(VARIANT* pSelectedImage/*[out,retval]*/)
{
  return (*this)->get_SelectedImage(pSelectedImage);
}

template <class T> VARIANT __fastcall
TCOMINodeT<T>::get_SelectedImage(void)
{
  VARIANT pSelectedImage;
  OLECHECK(this->get_SelectedImage((VARIANT*)&pSelectedImage));
  return pSelectedImage;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_SelectedImage(VARIANT pSelectedImage/*[in]*/)
{
  return (*this)->set_SelectedImage(pSelectedImage);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Sorted(VARIANT_BOOL* pbSorted/*[out,retval]*/)
{
  return (*this)->get_Sorted(pbSorted);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Sorted(TOLEBOOL* pbSorted/*[out,retval]*/)
{
  return (*this)->get_Sorted(VARIANT_BOOL*)pbSorted);
}

template <class T> TOLEBOOL __fastcall
TCOMINodeT<T>::get_Sorted(void)
{
  VARIANT_BOOL pbSorted;
  OLECHECK(this->get_Sorted((VARIANT_BOOL*)&pbSorted));
  return (TOLEBOOL)pbSorted;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Sorted(VARIANT_BOOL pbSorted/*[in]*/)
{
  return (*this)->set_Sorted(pbSorted);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Sorted(TOLEBOOL pbSorted/*[in]*/)
{
  return (*this)->set_Sorted(VARIANT_BOOL)pbSorted);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  return (*this)->get_Tag(pvTag);
}

template <class T> VARIANT __fastcall
TCOMINodeT<T>::get_Tag(void)
{
  VARIANT pvTag;
  OLECHECK(this->get_Tag((VARIANT*)&pvTag));
  return pvTag;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Text(BSTR* bstrText/*[out,retval]*/)
{
  return (*this)->get_Text(bstrText);
}

template <class T> BSTR __fastcall
TCOMINodeT<T>::get_Text(void)
{
  BSTR bstrText = 0;
  OLECHECK(this->get_Text((BSTR*)&bstrText));
  return bstrText;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Text(BSTR bstrText/*[in]*/)
{
  return (*this)->set_Text(bstrText);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(pbVisible);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Visible(TOLEBOOL* pbVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)pbVisible);
}

template <class T> TOLEBOOL __fastcall
TCOMINodeT<T>::get_Visible(void)
{
  VARIANT_BOOL pbVisible;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&pbVisible));
  return (TOLEBOOL)pbVisible;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Visible(VARIANT_BOOL pbVisible/*[in]*/)
{
  return (*this)->set_Visible(pbVisible);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Visible(TOLEBOOL pbVisible/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)pbVisible);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::CreateDragImage(IPictureDisp** ppDragImage/*[out,retval]*/)
{
  return (*this)->CreateDragImage(ppDragImage);
}

template <class T> IPictureDisp* __fastcall
TCOMINodeT<T>::CreateDragImage(void)
{
  IPictureDisp* ppDragImage;
  OLECHECK(this->CreateDragImage((IPictureDisp**)&ppDragImage));
  return ppDragImage;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::EnsureVisible(VARIANT_BOOL* pbEnsureVisible/*[out,retval]*/)
{
  return (*this)->EnsureVisible(pbEnsureVisible);
}

template <class T> VARIANT_BOOL __fastcall
TCOMINodeT<T>::EnsureVisible(void)
{
  VARIANT_BOOL pbEnsureVisible;
  OLECHECK(this->EnsureVisible((VARIANT_BOOL*)&pbEnsureVisible));
  return pbEnsureVisible;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_BackColor(::OLE_COLOR* pocBackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(pocBackColor);
}

template <class T> ::OLE_COLOR __fastcall
TCOMINodeT<T>::get_BackColor(void)
{
  ::OLE_COLOR pocBackColor;
  OLECHECK(this->get_BackColor((::OLE_COLOR*)&pocBackColor));
  return pocBackColor;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_BackColor(::OLE_COLOR pocBackColor/*[in]*/)
{
  return (*this)->set_BackColor(pocBackColor);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Bold(VARIANT_BOOL* pbBold/*[out,retval]*/)
{
  return (*this)->get_Bold(pbBold);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Bold(TOLEBOOL* pbBold/*[out,retval]*/)
{
  return (*this)->get_Bold(VARIANT_BOOL*)pbBold);
}

template <class T> TOLEBOOL __fastcall
TCOMINodeT<T>::get_Bold(void)
{
  VARIANT_BOOL pbBold;
  OLECHECK(this->get_Bold((VARIANT_BOOL*)&pbBold));
  return (TOLEBOOL)pbBold;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Bold(VARIANT_BOOL pbBold/*[in]*/)
{
  return (*this)->set_Bold(pbBold);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Bold(TOLEBOOL pbBold/*[in]*/)
{
  return (*this)->set_Bold(VARIANT_BOOL)pbBold);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Checked(VARIANT_BOOL* pbChecked/*[out,retval]*/)
{
  return (*this)->get_Checked(pbChecked);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_Checked(TOLEBOOL* pbChecked/*[out,retval]*/)
{
  return (*this)->get_Checked(VARIANT_BOOL*)pbChecked);
}

template <class T> TOLEBOOL __fastcall
TCOMINodeT<T>::get_Checked(void)
{
  VARIANT_BOOL pbChecked;
  OLECHECK(this->get_Checked((VARIANT_BOOL*)&pbChecked));
  return (TOLEBOOL)pbChecked;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Checked(VARIANT_BOOL pbChecked/*[in]*/)
{
  return (*this)->set_Checked(pbChecked);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_Checked(TOLEBOOL pbChecked/*[in]*/)
{
  return (*this)->set_Checked(VARIANT_BOOL)pbChecked);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::get_ForeColor(::OLE_COLOR* pocForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pocForeColor);
}

template <class T> ::OLE_COLOR __fastcall
TCOMINodeT<T>::get_ForeColor(void)
{
  ::OLE_COLOR pocForeColor;
  OLECHECK(this->get_ForeColor((::OLE_COLOR*)&pocForeColor));
  return pocForeColor;
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::set_ForeColor(::OLE_COLOR pocForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(pocForeColor);
}

template <class T> HRESULT __fastcall
TCOMINodeT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->_set_Tag(pvTag);
}

// *********************************************************************//
// DispIntf:  INode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C74190B8-8589-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INodeDispT<T>::get__ObjectDefault(void)
{
  BSTR pbstrText;
  this->get__ObjectDefault((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set__ObjectDefault(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Child(Mscomctllib_xp::INode** ppChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Child"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppChild /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
INodeDispT<T>::get_Child(void)
{
  Mscomctllib_xp::INode* ppChild;
  this->get_Child((Mscomctllib_xp::INode**)&ppChild);
  return ppChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::_set_Child(Mscomctllib_xp::INode* ppChild/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Child"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppChild /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Children(short* psChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Children"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psChildren /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
INodeDispT<T>::get_Children(void)
{
  short psChildren;
  this->get_Children((short*)&psChildren);
  return psChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Children(short psChildren/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Children"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = psChildren /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Expanded(VARIANT_BOOL* pbExpanded/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbExpanded /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INodeDispT<T>::get_Expanded(void)
{
  VARIANT_BOOL pbExpanded;
  this->get_Expanded((VARIANT_BOOL*)&pbExpanded);
  return pbExpanded;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Expanded(VARIANT_BOOL pbExpanded/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Expanded"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbExpanded /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_ExpandedImage(VARIANT* pExpandedImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpandedImage"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pExpandedImage /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
INodeDispT<T>::get_ExpandedImage(void)
{
  VARIANT pExpandedImage;
  this->get_ExpandedImage((VARIANT*)&pExpandedImage);
  return pExpandedImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_ExpandedImage(VARIANT pExpandedImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExpandedImage"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pExpandedImage /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_FirstSibling(Mscomctllib_xp::INode** ppFirstSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstSibling"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppFirstSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
INodeDispT<T>::get_FirstSibling(void)
{
  Mscomctllib_xp::INode* ppFirstSibling;
  this->get_FirstSibling((Mscomctllib_xp::INode**)&ppFirstSibling);
  return ppFirstSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::_set_FirstSibling(Mscomctllib_xp::INode* ppFirstSibling/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FirstSibling"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppFirstSibling /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_FullPath(BSTR* pbstrFullPath/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullPath"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFullPath /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INodeDispT<T>::get_FullPath(void)
{
  BSTR pbstrFullPath;
  this->get_FullPath((BSTR*)&pbstrFullPath);
  return pbstrFullPath;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_FullPath(BSTR pbstrFullPath/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullPath"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbstrFullPath /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Image(VARIANT* pImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pImage /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
INodeDispT<T>::get_Image(void)
{
  VARIANT pImage;
  this->get_Image((VARIANT*)&pImage);
  return pImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Image(VARIANT pImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pImage /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Index(short* psIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psIndex /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
INodeDispT<T>::get_Index(void)
{
  short psIndex;
  this->get_Index((short*)&psIndex);
  return psIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Index(short psIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = psIndex /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INodeDispT<T>::get_Key(void)
{
  BSTR pbstrKey;
  this->get_Key((BSTR*)&pbstrKey);
  return pbstrKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pbstrKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_LastSibling(Mscomctllib_xp::INode** ppLastSibling/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastSibling"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppLastSibling /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
INodeDispT<T>::get_LastSibling(void)
{
  Mscomctllib_xp::INode* ppLastSibling;
  this->get_LastSibling((Mscomctllib_xp::INode**)&ppLastSibling);
  return ppLastSibling;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::_set_LastSibling(Mscomctllib_xp::INode* ppLastSibling/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastSibling"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppLastSibling /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Next(Mscomctllib_xp::INode** ppNext/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Next"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppNext /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
INodeDispT<T>::get_Next(void)
{
  Mscomctllib_xp::INode* ppNext;
  this->get_Next((Mscomctllib_xp::INode**)&ppNext);
  return ppNext;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::_set_Next(Mscomctllib_xp::INode* ppNext/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Next"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppNext /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Parent(Mscomctllib_xp::INode** ppParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppParent /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
INodeDispT<T>::get_Parent(void)
{
  Mscomctllib_xp::INode* ppParent;
  this->get_Parent((Mscomctllib_xp::INode**)&ppParent);
  return ppParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::_set_Parent(Mscomctllib_xp::INode* ppParent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppParent /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Previous(Mscomctllib_xp::INode** ppPrevious/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Previous"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppPrevious /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
INodeDispT<T>::get_Previous(void)
{
  Mscomctllib_xp::INode* ppPrevious;
  this->get_Previous((Mscomctllib_xp::INode**)&ppPrevious);
  return ppPrevious;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::_set_Previous(Mscomctllib_xp::INode* ppPrevious/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Previous"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppPrevious /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Root(Mscomctllib_xp::INode** ppRoot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Root"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::INode**)ppRoot /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::INode* __fastcall
INodeDispT<T>::get_Root(void)
{
  Mscomctllib_xp::INode* ppRoot;
  this->get_Root((Mscomctllib_xp::INode**)&ppRoot);
  return ppRoot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::_set_Root(Mscomctllib_xp::INode* ppRoot/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Root"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::INode*)ppRoot /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSelected /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INodeDispT<T>::get_Selected(void)
{
  VARIANT_BOOL pbSelected;
  this->get_Selected((VARIANT_BOOL*)&pbSelected);
  return pbSelected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Selected(VARIANT_BOOL pbSelected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pbSelected /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_SelectedImage(VARIANT* pSelectedImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedImage"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pSelectedImage /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
INodeDispT<T>::get_SelectedImage(void)
{
  VARIANT pSelectedImage;
  this->get_SelectedImage((VARIANT*)&pSelectedImage);
  return pSelectedImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_SelectedImage(VARIANT pSelectedImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedImage"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pSelectedImage /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Sorted(VARIANT_BOOL* pbSorted/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sorted"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSorted /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INodeDispT<T>::get_Sorted(void)
{
  VARIANT_BOOL pbSorted;
  this->get_Sorted((VARIANT_BOOL*)&pbSorted);
  return pbSorted;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Sorted(VARIANT_BOOL pbSorted/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sorted"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pbSorted /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvTag /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
INodeDispT<T>::get_Tag(void)
{
  VARIANT pvTag;
  this->get_Tag((VARIANT*)&pvTag);
  return pvTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Text(BSTR* bstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(bstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
INodeDispT<T>::get_Text(void)
{
  BSTR bstrText;
  this->get_Text((BSTR*)&bstrText);
  return bstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Text(BSTR bstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = bstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Visible(VARIANT_BOOL* pbVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INodeDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pbVisible;
  this->get_Visible((VARIANT_BOOL*)&pbVisible);
  return pbVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Visible(VARIANT_BOOL pbVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pbVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::CreateDragImage(IPictureDisp** ppDragImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDragImage"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppDragImage /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
INodeDispT<T>::CreateDragImage(void)
{
  IPictureDisp* ppDragImage;
  this->CreateDragImage((IPictureDisp**)&ppDragImage);
  return ppDragImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::EnsureVisible(VARIANT_BOOL* pbEnsureVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnsureVisible"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnsureVisible /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INodeDispT<T>::EnsureVisible(void)
{
  VARIANT_BOOL pbEnsureVisible;
  this->EnsureVisible((VARIANT_BOOL*)&pbEnsureVisible);
  return pbEnsureVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_BackColor(::OLE_COLOR* pocBackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pocBackColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
INodeDispT<T>::get_BackColor(void)
{
  ::OLE_COLOR pocBackColor;
  this->get_BackColor((::OLE_COLOR*)&pocBackColor);
  return pocBackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_BackColor(::OLE_COLOR pocBackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pocBackColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Bold(VARIANT_BOOL* pbBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INodeDispT<T>::get_Bold(void)
{
  VARIANT_BOOL pbBold;
  this->get_Bold((VARIANT_BOOL*)&pbBold);
  return pbBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Bold(VARIANT_BOOL pbBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pbBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_Checked(VARIANT_BOOL* pbChecked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbChecked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
INodeDispT<T>::get_Checked(void)
{
  VARIANT_BOOL pbChecked;
  this->get_Checked((VARIANT_BOOL*)&pbChecked);
  return pbChecked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_Checked(VARIANT_BOOL pbChecked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pbChecked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::get_ForeColor(::OLE_COLOR* pocForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pocForeColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
INodeDispT<T>::get_ForeColor(void)
{
  ::OLE_COLOR pocForeColor;
  this->get_ForeColor((::OLE_COLOR*)&pocForeColor);
  return pocForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::set_ForeColor(::OLE_COLOR pocForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pocForeColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
INodeDispT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIListView
// Interface: IListView
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Arrange(Mscomctllib_xp::ListArrangeConstants* pArrange/*[out,retval]*/)
{
  return (*this)->get_Arrange(pArrange);
}

template <class T> Mscomctllib_xp::ListArrangeConstants __fastcall
TCOMIListViewT<T>::get_Arrange(void)
{
  Mscomctllib_xp::ListArrangeConstants pArrange;
  OLECHECK(this->get_Arrange((Mscomctllib_xp::ListArrangeConstants*)&pArrange));
  return pArrange;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_Arrange(Mscomctllib_xp::ListArrangeConstants pArrange/*[in]*/)
{
  return (*this)->set_Arrange(pArrange);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_ColumnHeaders(Mscomctllib_xp::IColumnHeaders** ppIColumnHeaders/*[out,retval]*/)
{
  return (*this)->get_ColumnHeaders(ppIColumnHeaders);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_ColumnHeaders(Mscomctllib_xp::IColumnHeadersPtr* ppIColumnHeaders/*[out,retval]*/)
{
  return (*this)->get_ColumnHeaders(IColumnHeaders**)ppIColumnHeaders);
}

template <class T> Mscomctllib_xp::IColumnHeadersPtr __fastcall
TCOMIListViewT<T>::get_ColumnHeaders(void)
{
  Mscomctllib_xp::IColumnHeaders* ppIColumnHeaders;
  OLECHECK(this->get_ColumnHeaders((Mscomctllib_xp::IColumnHeaders**)&ppIColumnHeaders));
  return (Mscomctllib_xp::IColumnHeadersPtr)ppIColumnHeaders;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_ColumnHeaders(Mscomctllib_xp::IColumnHeaders* ppIColumnHeaders/*[in]*/)
{
  return (*this)->set_ColumnHeaders(ppIColumnHeaders);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_ColumnHeaders(Mscomctllib_xp::IColumnHeadersPtr ppIColumnHeaders/*[in]*/)
{
  return (*this)->set_ColumnHeaders(IColumnHeaders*)ppIColumnHeaders);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_DropHighlight(Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  return (*this)->get_DropHighlight(ppIListItem);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_DropHighlight(Mscomctllib_xp::IListItemPtr* ppIListItem/*[out,retval]*/)
{
  return (*this)->get_DropHighlight(IListItem**)ppIListItem);
}

template <class T> Mscomctllib_xp::IListItemPtr __fastcall
TCOMIListViewT<T>::get_DropHighlight(void)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  OLECHECK(this->get_DropHighlight((Mscomctllib_xp::IListItem**)&ppIListItem));
  return (Mscomctllib_xp::IListItemPtr)ppIListItem;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::_set_DropHighlight(Mscomctllib_xp::IListItem* ppIListItem/*[in]*/)
{
  return (*this)->_set_DropHighlight(ppIListItem);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::_set_DropHighlight(Mscomctllib_xp::IListItemPtr ppIListItem/*[in]*/)
{
  return (*this)->_set_DropHighlight(IListItem*)ppIListItem);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_DropHighlight(VARIANT* ppIListItem/*[in]*/)
{
  return (*this)->set_DropHighlight(ppIListItem);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_HideColumnHeaders(VARIANT_BOOL* pfHide/*[out,retval]*/)
{
  return (*this)->get_HideColumnHeaders(pfHide);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_HideColumnHeaders(TOLEBOOL* pfHide/*[out,retval]*/)
{
  return (*this)->get_HideColumnHeaders(VARIANT_BOOL*)pfHide);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_HideColumnHeaders(void)
{
  VARIANT_BOOL pfHide;
  OLECHECK(this->get_HideColumnHeaders((VARIANT_BOOL*)&pfHide));
  return (TOLEBOOL)pfHide;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_HideColumnHeaders(VARIANT_BOOL pfHide/*[in]*/)
{
  return (*this)->set_HideColumnHeaders(pfHide);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_HideColumnHeaders(TOLEBOOL pfHide/*[in]*/)
{
  return (*this)->set_HideColumnHeaders(VARIANT_BOOL)pfHide);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_HideSelection(VARIANT_BOOL* pfHide/*[out,retval]*/)
{
  return (*this)->get_HideSelection(pfHide);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_HideSelection(TOLEBOOL* pfHide/*[out,retval]*/)
{
  return (*this)->get_HideSelection(VARIANT_BOOL*)pfHide);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_HideSelection(void)
{
  VARIANT_BOOL pfHide;
  OLECHECK(this->get_HideSelection((VARIANT_BOOL*)&pfHide));
  return (TOLEBOOL)pfHide;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_HideSelection(VARIANT_BOOL pfHide/*[in]*/)
{
  return (*this)->set_HideSelection(pfHide);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_HideSelection(TOLEBOOL pfHide/*[in]*/)
{
  return (*this)->set_HideSelection(VARIANT_BOOL)pfHide);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Icons(LPDISPATCH* ppIcons/*[out,retval]*/)
{
  return (*this)->get_Icons(ppIcons);
}

template <class T> LPDISPATCH __fastcall
TCOMIListViewT<T>::get_Icons(void)
{
  LPDISPATCH ppIcons;
  OLECHECK(this->get_Icons((LPDISPATCH*)&ppIcons));
  return ppIcons;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::_set_Icons(LPDISPATCH ppIcons/*[in]*/)
{
  return (*this)->_set_Icons(ppIcons);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_Icons(LPDISPATCH ppIcons/*[in]*/)
{
  return (*this)->set_Icons(ppIcons);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_ListItems(Mscomctllib_xp::IListItems** ppListItems/*[out,retval]*/)
{
  return (*this)->get_ListItems(ppListItems);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_ListItems(Mscomctllib_xp::IListItemsPtr* ppListItems/*[out,retval]*/)
{
  return (*this)->get_ListItems(IListItems**)ppListItems);
}

template <class T> Mscomctllib_xp::IListItemsPtr __fastcall
TCOMIListViewT<T>::get_ListItems(void)
{
  Mscomctllib_xp::IListItems* ppListItems;
  OLECHECK(this->get_ListItems((Mscomctllib_xp::IListItems**)&ppListItems));
  return (Mscomctllib_xp::IListItemsPtr)ppListItems;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_ListItems(Mscomctllib_xp::IListItems* ppListItems/*[in]*/)
{
  return (*this)->set_ListItems(ppListItems);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_ListItems(Mscomctllib_xp::IListItemsPtr ppListItems/*[in]*/)
{
  return (*this)->set_ListItems(IListItems*)ppListItems);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_LabelEdit(Mscomctllib_xp::ListLabelEditConstants* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelEdit(pRet);
}

template <class T> Mscomctllib_xp::ListLabelEditConstants __fastcall
TCOMIListViewT<T>::get_LabelEdit(void)
{
  Mscomctllib_xp::ListLabelEditConstants pRet;
  OLECHECK(this->get_LabelEdit((Mscomctllib_xp::ListLabelEditConstants*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_LabelEdit(Mscomctllib_xp::ListLabelEditConstants pRet/*[in]*/)
{
  return (*this)->set_LabelEdit(pRet);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_LabelWrap(VARIANT_BOOL* pfOn/*[out,retval]*/)
{
  return (*this)->get_LabelWrap(pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_LabelWrap(TOLEBOOL* pfOn/*[out,retval]*/)
{
  return (*this)->get_LabelWrap(VARIANT_BOOL*)pfOn);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_LabelWrap(void)
{
  VARIANT_BOOL pfOn;
  OLECHECK(this->get_LabelWrap((VARIANT_BOOL*)&pfOn));
  return (TOLEBOOL)pfOn;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_LabelWrap(VARIANT_BOOL pfOn/*[in]*/)
{
  return (*this)->set_LabelWrap(pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_LabelWrap(TOLEBOOL pfOn/*[in]*/)
{
  return (*this)->set_LabelWrap(VARIANT_BOOL)pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(ppMouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIListViewT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
  return ppMouseIcon;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* pnIndex/*[out,retval]*/)
{
  return (*this)->get_MousePointer(pnIndex);
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
TCOMIListViewT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants pnIndex;
  OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&pnIndex));
  return pnIndex;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants pnIndex/*[in]*/)
{
  return (*this)->set_MousePointer(pnIndex);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_MultiSelect(VARIANT_BOOL* pfOn/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_MultiSelect(TOLEBOOL* pfOn/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(VARIANT_BOOL*)pfOn);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_MultiSelect(void)
{
  VARIANT_BOOL pfOn;
  OLECHECK(this->get_MultiSelect((VARIANT_BOOL*)&pfOn));
  return (TOLEBOOL)pfOn;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_MultiSelect(VARIANT_BOOL pfOn/*[in]*/)
{
  return (*this)->set_MultiSelect(pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_MultiSelect(TOLEBOOL pfOn/*[in]*/)
{
  return (*this)->set_MultiSelect(VARIANT_BOOL)pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_SelectedItem(Mscomctllib_xp::IListItem** ppListItem/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(ppListItem);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_SelectedItem(Mscomctllib_xp::IListItemPtr* ppListItem/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(IListItem**)ppListItem);
}

template <class T> Mscomctllib_xp::IListItemPtr __fastcall
TCOMIListViewT<T>::get_SelectedItem(void)
{
  Mscomctllib_xp::IListItem* ppListItem;
  OLECHECK(this->get_SelectedItem((Mscomctllib_xp::IListItem**)&ppListItem));
  return (Mscomctllib_xp::IListItemPtr)ppListItem;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::_set_SelectedItem(Mscomctllib_xp::IListItem* ppListItem/*[in]*/)
{
  return (*this)->_set_SelectedItem(ppListItem);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::_set_SelectedItem(Mscomctllib_xp::IListItemPtr ppListItem/*[in]*/)
{
  return (*this)->_set_SelectedItem(IListItem*)ppListItem);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_SelectedItem(VARIANT* ppListItem/*[in]*/)
{
  return (*this)->set_SelectedItem(ppListItem);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_SmallIcons(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  return (*this)->get_SmallIcons(ppImageList);
}

template <class T> LPDISPATCH __fastcall
TCOMIListViewT<T>::get_SmallIcons(void)
{
  LPDISPATCH ppImageList;
  OLECHECK(this->get_SmallIcons((LPDISPATCH*)&ppImageList));
  return ppImageList;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::_set_SmallIcons(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->_set_SmallIcons(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_SmallIcons(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->set_SmallIcons(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Sorted(VARIANT_BOOL* pfOn/*[out,retval]*/)
{
  return (*this)->get_Sorted(pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Sorted(TOLEBOOL* pfOn/*[out,retval]*/)
{
  return (*this)->get_Sorted(VARIANT_BOOL*)pfOn);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_Sorted(void)
{
  VARIANT_BOOL pfOn;
  OLECHECK(this->get_Sorted((VARIANT_BOOL*)&pfOn));
  return (TOLEBOOL)pfOn;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_Sorted(VARIANT_BOOL pfOn/*[in]*/)
{
  return (*this)->set_Sorted(pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_Sorted(TOLEBOOL pfOn/*[in]*/)
{
  return (*this)->set_Sorted(VARIANT_BOOL)pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_SortKey(short* psKey/*[out,retval]*/)
{
  return (*this)->get_SortKey(psKey);
}

template <class T> short __fastcall
TCOMIListViewT<T>::get_SortKey(void)
{
  short psKey;
  OLECHECK(this->get_SortKey((short*)&psKey));
  return psKey;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_SortKey(short psKey/*[in]*/)
{
  return (*this)->set_SortKey(psKey);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_SortOrder(Mscomctllib_xp::ListSortOrderConstants* pOrder/*[out,retval]*/)
{
  return (*this)->get_SortOrder(pOrder);
}

template <class T> Mscomctllib_xp::ListSortOrderConstants __fastcall
TCOMIListViewT<T>::get_SortOrder(void)
{
  Mscomctllib_xp::ListSortOrderConstants pOrder;
  OLECHECK(this->get_SortOrder((Mscomctllib_xp::ListSortOrderConstants*)&pOrder));
  return pOrder;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_SortOrder(Mscomctllib_xp::ListSortOrderConstants pOrder/*[in]*/)
{
  return (*this)->set_SortOrder(pOrder);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_View(Mscomctllib_xp::ListViewConstants* pnView/*[out,retval]*/)
{
  return (*this)->get_View(pnView);
}

template <class T> Mscomctllib_xp::ListViewConstants __fastcall
TCOMIListViewT<T>::get_View(void)
{
  Mscomctllib_xp::ListViewConstants pnView;
  OLECHECK(this->get_View((Mscomctllib_xp::ListViewConstants*)&pnView));
  return pnView;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_View(Mscomctllib_xp::ListViewConstants pnView/*[in]*/)
{
  return (*this)->set_View(pnView);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/)
{
  return (*this)->get_OLEDragMode(psOLEDragMode);
}

template <class T> Mscomctllib_xp::OLEDragConstants __fastcall
TCOMIListViewT<T>::get_OLEDragMode(void)
{
  Mscomctllib_xp::OLEDragConstants psOLEDragMode;
  OLECHECK(this->get_OLEDragMode((Mscomctllib_xp::OLEDragConstants*)&psOLEDragMode));
  return psOLEDragMode;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/)
{
  return (*this)->set_OLEDragMode(psOLEDragMode);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  return (*this)->get_OLEDropMode(psOLEDropMode);
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
TCOMIListViewT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
  return psOLEDropMode;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  return (*this)->set_OLEDropMode(psOLEDropMode);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Appearance(Mscomctllib_xp::AppearanceConstants* pnAppearance/*[out,retval]*/)
{
  return (*this)->get_Appearance(pnAppearance);
}

template <class T> Mscomctllib_xp::AppearanceConstants __fastcall
TCOMIListViewT<T>::get_Appearance(void)
{
  Mscomctllib_xp::AppearanceConstants pnAppearance;
  OLECHECK(this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&pnAppearance));
  return pnAppearance;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_Appearance(Mscomctllib_xp::AppearanceConstants pnAppearance/*[in]*/)
{
  return (*this)->set_Appearance(pnAppearance);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_BackColor(::OLE_COLOR* pcrBack/*[out,retval]*/)
{
  return (*this)->get_BackColor(pcrBack);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIListViewT<T>::get_BackColor(void)
{
  ::OLE_COLOR pcrBack;
  OLECHECK(this->get_BackColor((::OLE_COLOR*)&pcrBack));
  return pcrBack;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_BackColor(::OLE_COLOR pcrBack/*[in]*/)
{
  return (*this)->set_BackColor(pcrBack);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* pnStyle/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pnStyle);
}

template <class T> Mscomctllib_xp::BorderStyleConstants __fastcall
TCOMIListViewT<T>::get_BorderStyle(void)
{
  Mscomctllib_xp::BorderStyleConstants pnStyle;
  OLECHECK(this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&pnStyle));
  return pnStyle;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_BorderStyle(Mscomctllib_xp::BorderStyleConstants pnStyle/*[in]*/)
{
  return (*this)->set_BorderStyle(pnStyle);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Enabled(VARIANT_BOOL* pfEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pfEnabled);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Enabled(TOLEBOOL* pfEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pfEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_Enabled(void)
{
  VARIANT_BOOL pfEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pfEnabled));
  return (TOLEBOOL)pfEnabled;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_Enabled(VARIANT_BOOL pfEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pfEnabled);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_Enabled(TOLEBOOL pfEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pfEnabled);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Font(IFontDisp** ppFontDisp/*[out,retval]*/)
{
  return (*this)->get_Font(ppFontDisp);
}

template <class T> IFontDisp* __fastcall
TCOMIListViewT<T>::get_Font(void)
{
  IFontDisp* ppFontDisp;
  OLECHECK(this->get_Font((IFontDisp**)&ppFontDisp));
  return ppFontDisp;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::_set_Font(IFontDisp* ppFontDisp/*[in]*/)
{
  return (*this)->_set_Font(ppFontDisp);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pcrFore);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIListViewT<T>::get_ForeColor(void)
{
  ::OLE_COLOR pcrFore;
  OLECHECK(this->get_ForeColor((::OLE_COLOR*)&pcrFore));
  return pcrFore;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_ForeColor(::OLE_COLOR pcrFore/*[in]*/)
{
  return (*this)->set_ForeColor(pcrFore);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  return (*this)->get_hWnd(phWnd);
}

template <class T> OLE_HANDLE __fastcall
TCOMIListViewT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
  return phWnd;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  return (*this)->set_hWnd(phWnd);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::FindItem(BSTR sz/*[in]*/, VARIANT* Where/*[in,opt]*/, VARIANT* Index/*[in,opt]*/, 
                            VARIANT* fPartial/*[in,opt]*/, 
                            Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  return (*this)->FindItem(sz, Where, Index, fPartial, ppIListItem);
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
TCOMIListViewT<T>::FindItem(BSTR sz/*[in]*/, VARIANT* Where/*[in,opt]*/, VARIANT* Index/*[in,opt]*/, 
                            VARIANT* fPartial/*[in,opt]*/)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  OLECHECK(this->FindItem(, (Mscomctllib_xp::IListItem**)&ppIListItem));
  return ppIListItem;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::GetFirstVisible(Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  return (*this)->GetFirstVisible(ppIListItem);
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
TCOMIListViewT<T>::GetFirstVisible(void)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  OLECHECK(this->GetFirstVisible((Mscomctllib_xp::IListItem**)&ppIListItem));
  return ppIListItem;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::HitTest(float x/*[in]*/, float y/*[in]*/, 
                           Mscomctllib_xp::IListItem** ppListItem/*[out,retval]*/)
{
  return (*this)->HitTest(x, y, ppListItem);
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
TCOMIListViewT<T>::HitTest(float x/*[in]*/, float y/*[in]*/)
{
  Mscomctllib_xp::IListItem* ppListItem;
  OLECHECK(this->HitTest(, (Mscomctllib_xp::IListItem**)&ppListItem));
  return ppListItem;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::StartLabelEdit(void)
{
  return (*this)->StartLabelEdit();
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::OLEDrag(void)
{
  return (*this)->OLEDrag();
}

template <class T> void __fastcall
TCOMIListViewT<T>::Refresh(void)
{
  (*this)->Refresh();
}

template <class T> void __fastcall
TCOMIListViewT<T>::AboutBox(void)
{
  (*this)->AboutBox();
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_AllowColumnReorder(VARIANT_BOOL* pfAllowColumnReorder/*[out,retval]*/)
{
  return (*this)->get_AllowColumnReorder(pfAllowColumnReorder);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_AllowColumnReorder(TOLEBOOL* pfAllowColumnReorder/*[out,retval]*/)
{
  return (*this)->get_AllowColumnReorder(VARIANT_BOOL*)pfAllowColumnReorder);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_AllowColumnReorder(void)
{
  VARIANT_BOOL pfAllowColumnReorder;
  OLECHECK(this->get_AllowColumnReorder((VARIANT_BOOL*)&pfAllowColumnReorder));
  return (TOLEBOOL)pfAllowColumnReorder;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_AllowColumnReorder(VARIANT_BOOL pfAllowColumnReorder/*[in]*/)
{
  return (*this)->set_AllowColumnReorder(pfAllowColumnReorder);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_AllowColumnReorder(TOLEBOOL pfAllowColumnReorder/*[in]*/)
{
  return (*this)->set_AllowColumnReorder(VARIANT_BOOL)pfAllowColumnReorder);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Checkboxes(VARIANT_BOOL* pfCheckboxes/*[out,retval]*/)
{
  return (*this)->get_Checkboxes(pfCheckboxes);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Checkboxes(TOLEBOOL* pfCheckboxes/*[out,retval]*/)
{
  return (*this)->get_Checkboxes(VARIANT_BOOL*)pfCheckboxes);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_Checkboxes(void)
{
  VARIANT_BOOL pfCheckboxes;
  OLECHECK(this->get_Checkboxes((VARIANT_BOOL*)&pfCheckboxes));
  return (TOLEBOOL)pfCheckboxes;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_Checkboxes(VARIANT_BOOL pfCheckboxes/*[in]*/)
{
  return (*this)->set_Checkboxes(pfCheckboxes);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_Checkboxes(TOLEBOOL pfCheckboxes/*[in]*/)
{
  return (*this)->set_Checkboxes(VARIANT_BOOL)pfCheckboxes);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_FlatScrollBar(VARIANT_BOOL* pfFlatScrollBar/*[out,retval]*/)
{
  return (*this)->get_FlatScrollBar(pfFlatScrollBar);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_FlatScrollBar(TOLEBOOL* pfFlatScrollBar/*[out,retval]*/)
{
  return (*this)->get_FlatScrollBar(VARIANT_BOOL*)pfFlatScrollBar);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_FlatScrollBar(void)
{
  VARIANT_BOOL pfFlatScrollBar;
  OLECHECK(this->get_FlatScrollBar((VARIANT_BOOL*)&pfFlatScrollBar));
  return (TOLEBOOL)pfFlatScrollBar;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_FlatScrollBar(VARIANT_BOOL pfFlatScrollBar/*[in]*/)
{
  return (*this)->set_FlatScrollBar(pfFlatScrollBar);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_FlatScrollBar(TOLEBOOL pfFlatScrollBar/*[in]*/)
{
  return (*this)->set_FlatScrollBar(VARIANT_BOOL)pfFlatScrollBar);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_FullRowSelect(VARIANT_BOOL* pfFullRowSelect/*[out,retval]*/)
{
  return (*this)->get_FullRowSelect(pfFullRowSelect);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_FullRowSelect(TOLEBOOL* pfFullRowSelect/*[out,retval]*/)
{
  return (*this)->get_FullRowSelect(VARIANT_BOOL*)pfFullRowSelect);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_FullRowSelect(void)
{
  VARIANT_BOOL pfFullRowSelect;
  OLECHECK(this->get_FullRowSelect((VARIANT_BOOL*)&pfFullRowSelect));
  return (TOLEBOOL)pfFullRowSelect;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_FullRowSelect(VARIANT_BOOL pfFullRowSelect/*[in]*/)
{
  return (*this)->set_FullRowSelect(pfFullRowSelect);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_FullRowSelect(TOLEBOOL pfFullRowSelect/*[in]*/)
{
  return (*this)->set_FullRowSelect(VARIANT_BOOL)pfFullRowSelect);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_GridLines(VARIANT_BOOL* pfGridLines/*[out,retval]*/)
{
  return (*this)->get_GridLines(pfGridLines);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_GridLines(TOLEBOOL* pfGridLines/*[out,retval]*/)
{
  return (*this)->get_GridLines(VARIANT_BOOL*)pfGridLines);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_GridLines(void)
{
  VARIANT_BOOL pfGridLines;
  OLECHECK(this->get_GridLines((VARIANT_BOOL*)&pfGridLines));
  return (TOLEBOOL)pfGridLines;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_GridLines(VARIANT_BOOL pfGridLines/*[in]*/)
{
  return (*this)->set_GridLines(pfGridLines);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_GridLines(TOLEBOOL pfGridLines/*[in]*/)
{
  return (*this)->set_GridLines(VARIANT_BOOL)pfGridLines);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_HotTracking(VARIANT_BOOL* pfHotTracking/*[out,retval]*/)
{
  return (*this)->get_HotTracking(pfHotTracking);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_HotTracking(TOLEBOOL* pfHotTracking/*[out,retval]*/)
{
  return (*this)->get_HotTracking(VARIANT_BOOL*)pfHotTracking);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_HotTracking(void)
{
  VARIANT_BOOL pfHotTracking;
  OLECHECK(this->get_HotTracking((VARIANT_BOOL*)&pfHotTracking));
  return (TOLEBOOL)pfHotTracking;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_HotTracking(VARIANT_BOOL pfHotTracking/*[in]*/)
{
  return (*this)->set_HotTracking(pfHotTracking);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_HotTracking(TOLEBOOL pfHotTracking/*[in]*/)
{
  return (*this)->set_HotTracking(VARIANT_BOOL)pfHotTracking);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_HoverSelection(VARIANT_BOOL* pfHoverSelection/*[out,retval]*/)
{
  return (*this)->get_HoverSelection(pfHoverSelection);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_HoverSelection(TOLEBOOL* pfHoverSelection/*[out,retval]*/)
{
  return (*this)->get_HoverSelection(VARIANT_BOOL*)pfHoverSelection);
}

template <class T> TOLEBOOL __fastcall
TCOMIListViewT<T>::get_HoverSelection(void)
{
  VARIANT_BOOL pfHoverSelection;
  OLECHECK(this->get_HoverSelection((VARIANT_BOOL*)&pfHoverSelection));
  return (TOLEBOOL)pfHoverSelection;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_HoverSelection(VARIANT_BOOL pfHoverSelection/*[in]*/)
{
  return (*this)->set_HoverSelection(pfHoverSelection);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_HoverSelection(TOLEBOOL pfHoverSelection/*[in]*/)
{
  return (*this)->set_HoverSelection(VARIANT_BOOL)pfHoverSelection);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_Picture(IPictureDisp** ppPictureDisp/*[out,retval]*/)
{
  return (*this)->get_Picture(ppPictureDisp);
}

template <class T> IPictureDisp* __fastcall
TCOMIListViewT<T>::get_Picture(void)
{
  IPictureDisp* ppPictureDisp;
  OLECHECK(this->get_Picture((IPictureDisp**)&ppPictureDisp));
  return ppPictureDisp;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_Picture(IPictureDisp* ppPictureDisp/*[in]*/)
{
  return (*this)->set_Picture(ppPictureDisp);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::_set_Picture(IPictureDisp* ppPictureDisp/*[in]*/)
{
  return (*this)->_set_Picture(ppPictureDisp);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_PictureAlignment(Mscomctllib_xp::ListPictureAlignmentConstants* psAlignment/*[out,retval]*/)
{
  return (*this)->get_PictureAlignment(psAlignment);
}

template <class T> Mscomctllib_xp::ListPictureAlignmentConstants __fastcall
TCOMIListViewT<T>::get_PictureAlignment(void)
{
  Mscomctllib_xp::ListPictureAlignmentConstants psAlignment;
  OLECHECK(this->get_PictureAlignment((Mscomctllib_xp::ListPictureAlignmentConstants*)&psAlignment));
  return psAlignment;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_PictureAlignment(Mscomctllib_xp::ListPictureAlignmentConstants psAlignment/*[in]*/)
{
  return (*this)->set_PictureAlignment(psAlignment);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_ColumnHeaderIcons(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  return (*this)->get_ColumnHeaderIcons(ppImageList);
}

template <class T> LPDISPATCH __fastcall
TCOMIListViewT<T>::get_ColumnHeaderIcons(void)
{
  LPDISPATCH ppImageList;
  OLECHECK(this->get_ColumnHeaderIcons((LPDISPATCH*)&ppImageList));
  return ppImageList;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::_set_ColumnHeaderIcons(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->_set_ColumnHeaderIcons(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_ColumnHeaderIcons(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->set_ColumnHeaderIcons(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::get_TextBackground(Mscomctllib_xp::ListTextBackgroundConstants* penumTextBackground/*[out,retval]*/)
{
  return (*this)->get_TextBackground(penumTextBackground);
}

template <class T> Mscomctllib_xp::ListTextBackgroundConstants __fastcall
TCOMIListViewT<T>::get_TextBackground(void)
{
  Mscomctllib_xp::ListTextBackgroundConstants penumTextBackground;
  OLECHECK(this->get_TextBackground((Mscomctllib_xp::ListTextBackgroundConstants*)&penumTextBackground));
  return penumTextBackground;
}

template <class T> HRESULT __fastcall
TCOMIListViewT<T>::set_TextBackground(Mscomctllib_xp::ListTextBackgroundConstants penumTextBackground/*[in]*/)
{
  return (*this)->set_TextBackground(penumTextBackground);
}

// *********************************************************************//
// DispIntf:  IListView
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F049-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_Arrange(Mscomctllib_xp::ListArrangeConstants* pArrange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Arrange"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pArrange /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ListArrangeConstants __fastcall
IListViewDispT<T>::get_Arrange(void)
{
  Mscomctllib_xp::ListArrangeConstants pArrange;
  this->get_Arrange((Mscomctllib_xp::ListArrangeConstants*)&pArrange);
  return pArrange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_Arrange(Mscomctllib_xp::ListArrangeConstants pArrange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Arrange"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (int)pArrange /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_ColumnHeaders(Mscomctllib_xp::IColumnHeaders** ppIColumnHeaders/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeaders"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IColumnHeaders**)ppIColumnHeaders /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IColumnHeaders* __fastcall
IListViewDispT<T>::get_ColumnHeaders(void)
{
  Mscomctllib_xp::IColumnHeaders* ppIColumnHeaders;
  this->get_ColumnHeaders((Mscomctllib_xp::IColumnHeaders**)&ppIColumnHeaders);
  return ppIColumnHeaders;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_ColumnHeaders(Mscomctllib_xp::IColumnHeaders* ppIColumnHeaders/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeaders"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IColumnHeaders*)ppIColumnHeaders /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_DropHighlight(Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropHighlight"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListItem**)ppIListItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
IListViewDispT<T>::get_DropHighlight(void)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  this->get_DropHighlight((Mscomctllib_xp::IListItem**)&ppIListItem);
  return ppIListItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::_set_DropHighlight(Mscomctllib_xp::IListItem* ppIListItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropHighlight"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IListItem*)ppIListItem /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_DropHighlight(VARIANT* ppIListItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropHighlight"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ppIListItem /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_HideColumnHeaders(VARIANT_BOOL* pfHide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideColumnHeaders"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHide /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_HideColumnHeaders(void)
{
  VARIANT_BOOL pfHide;
  this->get_HideColumnHeaders((VARIANT_BOOL*)&pfHide);
  return pfHide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_HideColumnHeaders(VARIANT_BOOL pfHide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideColumnHeaders"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pfHide /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_HideSelection(VARIANT_BOOL* pfHide/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideSelection"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHide /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_HideSelection(void)
{
  VARIANT_BOOL pfHide;
  this->get_HideSelection((VARIANT_BOOL*)&pfHide);
  return pfHide;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_HideSelection(VARIANT_BOOL pfHide/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideSelection"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pfHide /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_Icons(LPDISPATCH* ppIcons/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icons"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppIcons /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IListViewDispT<T>::get_Icons(void)
{
  LPDISPATCH ppIcons;
  this->get_Icons((LPDISPATCH*)&ppIcons);
  return ppIcons;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::_set_Icons(LPDISPATCH ppIcons/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icons"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = ppIcons /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_Icons(LPDISPATCH ppIcons/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icons"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = ppIcons /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_ListItems(Mscomctllib_xp::IListItems** ppListItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListItems"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListItems**)ppListItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListItems* __fastcall
IListViewDispT<T>::get_ListItems(void)
{
  Mscomctllib_xp::IListItems* ppListItems;
  this->get_ListItems((Mscomctllib_xp::IListItems**)&ppListItems);
  return ppListItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_ListItems(Mscomctllib_xp::IListItems* ppListItems/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListItems"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IListItems*)ppListItems /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_LabelEdit(Mscomctllib_xp::ListLabelEditConstants* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelEdit"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRet /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ListLabelEditConstants __fastcall
IListViewDispT<T>::get_LabelEdit(void)
{
  Mscomctllib_xp::ListLabelEditConstants pRet;
  this->get_LabelEdit((Mscomctllib_xp::ListLabelEditConstants*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_LabelEdit(Mscomctllib_xp::ListLabelEditConstants pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelEdit"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = (int)pRet /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_LabelWrap(VARIANT_BOOL* pfOn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelWrap"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_LabelWrap(void)
{
  VARIANT_BOOL pfOn;
  this->get_LabelWrap((VARIANT_BOOL*)&pfOn);
  return pfOn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_LabelWrap(VARIANT_BOOL pfOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelWrap"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pfOn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppMouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IListViewDispT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  this->get_MouseIcon((IPictureDisp**)&ppMouseIcon);
  return ppMouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* pnIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pnIndex /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
IListViewDispT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants pnIndex;
  this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&pnIndex);
  return pnIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants pnIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)pnIndex /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_MultiSelect(VARIANT_BOOL* pfOn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_MultiSelect(void)
{
  VARIANT_BOOL pfOn;
  this->get_MultiSelect((VARIANT_BOOL*)&pfOn);
  return pfOn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_MultiSelect(VARIANT_BOOL pfOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pfOn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_SelectedItem(Mscomctllib_xp::IListItem** ppListItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListItem**)ppListItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
IListViewDispT<T>::get_SelectedItem(void)
{
  Mscomctllib_xp::IListItem* ppListItem;
  this->get_SelectedItem((Mscomctllib_xp::IListItem**)&ppListItem);
  return ppListItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::_set_SelectedItem(Mscomctllib_xp::IListItem* ppListItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IListItem*)ppListItem /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_SelectedItem(VARIANT* ppListItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = ppListItem /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_SmallIcons(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallIcons"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppImageList /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IListViewDispT<T>::get_SmallIcons(void)
{
  LPDISPATCH ppImageList;
  this->get_SmallIcons((LPDISPATCH*)&ppImageList);
  return ppImageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::_set_SmallIcons(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallIcons"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_SmallIcons(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallIcons"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_Sorted(VARIANT_BOOL* pfOn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sorted"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_Sorted(void)
{
  VARIANT_BOOL pfOn;
  this->get_Sorted((VARIANT_BOOL*)&pfOn);
  return pfOn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_Sorted(VARIANT_BOOL pfOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sorted"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pfOn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_SortKey(short* psKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortKey"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psKey /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IListViewDispT<T>::get_SortKey(void)
{
  short psKey;
  this->get_SortKey((short*)&psKey);
  return psKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_SortKey(short psKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortKey"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = psKey /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_SortOrder(Mscomctllib_xp::ListSortOrderConstants* pOrder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortOrder"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pOrder /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ListSortOrderConstants __fastcall
IListViewDispT<T>::get_SortOrder(void)
{
  Mscomctllib_xp::ListSortOrderConstants pOrder;
  this->get_SortOrder((Mscomctllib_xp::ListSortOrderConstants*)&pOrder);
  return pOrder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_SortOrder(Mscomctllib_xp::ListSortOrderConstants pOrder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortOrder"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (int)pOrder /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_View(Mscomctllib_xp::ListViewConstants* pnView/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pnView /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ListViewConstants __fastcall
IListViewDispT<T>::get_View(void)
{
  Mscomctllib_xp::ListViewConstants pnView;
  this->get_View((Mscomctllib_xp::ListViewConstants*)&pnView);
  return pnView;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_View(Mscomctllib_xp::ListViewConstants pnView/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int)pnView /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDragMode"), DISPID(1550));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDragMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDragConstants __fastcall
IListViewDispT<T>::get_OLEDragMode(void)
{
  Mscomctllib_xp::OLEDragConstants psOLEDragMode;
  this->get_OLEDragMode((Mscomctllib_xp::OLEDragConstants*)&psOLEDragMode);
  return psOLEDragMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDragMode"), DISPID(1550));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDragMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDropMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
IListViewDispT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode);
  return psOLEDropMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDropMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_Appearance(Mscomctllib_xp::AppearanceConstants* pnAppearance/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Appearance"), DISPID(-520));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pnAppearance /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::AppearanceConstants __fastcall
IListViewDispT<T>::get_Appearance(void)
{
  Mscomctllib_xp::AppearanceConstants pnAppearance;
  this->get_Appearance((Mscomctllib_xp::AppearanceConstants*)&pnAppearance);
  return pnAppearance;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_Appearance(Mscomctllib_xp::AppearanceConstants pnAppearance/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Appearance"), DISPID(-520));
  TAutoArgs<1> _args;
  _args[1] = (int)pnAppearance /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_BackColor(::OLE_COLOR* pcrBack/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcrBack /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IListViewDispT<T>::get_BackColor(void)
{
  ::OLE_COLOR pcrBack;
  this->get_BackColor((::OLE_COLOR*)&pcrBack);
  return pcrBack;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_BackColor(::OLE_COLOR pcrBack/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = pcrBack /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* pnStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pnStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::BorderStyleConstants __fastcall
IListViewDispT<T>::get_BorderStyle(void)
{
  Mscomctllib_xp::BorderStyleConstants pnStyle;
  this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&pnStyle);
  return pnStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_BorderStyle(Mscomctllib_xp::BorderStyleConstants pnStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)pnStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_Enabled(VARIANT_BOOL* pfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pfEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pfEnabled);
  return pfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_Enabled(VARIANT_BOOL pfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = pfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_Font(IFontDisp** ppFontDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)ppFontDisp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
IListViewDispT<T>::get_Font(void)
{
  IFontDisp* ppFontDisp;
  this->get_Font((IFontDisp**)&ppFontDisp);
  return ppFontDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::_set_Font(IFontDisp* ppFontDisp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)ppFontDisp /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcrFore /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IListViewDispT<T>::get_ForeColor(void)
{
  ::OLE_COLOR pcrFore;
  this->get_ForeColor((::OLE_COLOR*)&pcrFore);
  return pcrFore;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_ForeColor(::OLE_COLOR pcrFore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = pcrFore /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phWnd /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_HANDLE __fastcall
IListViewDispT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  this->get_hWnd((OLE_HANDLE*)&phWnd);
  return phWnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<1> _args;
  _args[1] = phWnd /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::FindItem(BSTR sz/*[in]*/, VARIANT* Where/*[in,opt]*/, VARIANT* Index/*[in,opt]*/
                            , VARIANT* fPartial/*[in,opt]*/, 
                            Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindItem"), DISPID(19));
  TAutoArgs<4> _args;
  _args[1] = sz /*[VT_BSTR:0]*/;
  _args[2] = Where /*[VT_VARIANT:1]*/;
  _args[3] = Index /*[VT_VARIANT:1]*/;
  _args[4] = fPartial /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListItem**)ppIListItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
IListViewDispT<T>::FindItem(BSTR sz/*[in]*/, VARIANT* Where/*[in,opt]*/, VARIANT* Index/*[in,opt]*/, 
                            VARIANT* fPartial/*[in,opt]*/)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  this->FindItem(sz, Where, Index, fPartial, (Mscomctllib_xp::IListItem**)&ppIListItem);
  return ppIListItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::GetFirstVisible(Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFirstVisible"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListItem**)ppIListItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
IListViewDispT<T>::GetFirstVisible(void)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  this->GetFirstVisible((Mscomctllib_xp::IListItem**)&ppIListItem);
  return ppIListItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::HitTest(float x/*[in]*/, float y/*[in]*/, 
                           Mscomctllib_xp::IListItem** ppListItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HitTest"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_R4:0]*/;
  _args[2] = y /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListItem**)ppListItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
IListViewDispT<T>::HitTest(float x/*[in]*/, float y/*[in]*/)
{
  Mscomctllib_xp::IListItem* ppListItem;
  this->HitTest(x, y, (Mscomctllib_xp::IListItem**)&ppListItem);
  return ppListItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::StartLabelEdit()
{
  _TDispID _dispid(*this, OLETEXT("StartLabelEdit"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::OLEDrag()
{
  _TDispID _dispid(*this, OLETEXT("OLEDrag"), DISPID(1552));
  return OleFunction(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IListViewDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IListViewDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  OleProcedure(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_AllowColumnReorder(VARIANT_BOOL* pfAllowColumnReorder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowColumnReorder"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfAllowColumnReorder /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_AllowColumnReorder(void)
{
  VARIANT_BOOL pfAllowColumnReorder;
  this->get_AllowColumnReorder((VARIANT_BOOL*)&pfAllowColumnReorder);
  return pfAllowColumnReorder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_AllowColumnReorder(VARIANT_BOOL pfAllowColumnReorder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowColumnReorder"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pfAllowColumnReorder /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_Checkboxes(VARIANT_BOOL* pfCheckboxes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checkboxes"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCheckboxes /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_Checkboxes(void)
{
  VARIANT_BOOL pfCheckboxes;
  this->get_Checkboxes((VARIANT_BOOL*)&pfCheckboxes);
  return pfCheckboxes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_Checkboxes(VARIANT_BOOL pfCheckboxes/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checkboxes"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pfCheckboxes /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_FlatScrollBar(VARIANT_BOOL* pfFlatScrollBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FlatScrollBar"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFlatScrollBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_FlatScrollBar(void)
{
  VARIANT_BOOL pfFlatScrollBar;
  this->get_FlatScrollBar((VARIANT_BOOL*)&pfFlatScrollBar);
  return pfFlatScrollBar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_FlatScrollBar(VARIANT_BOOL pfFlatScrollBar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FlatScrollBar"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pfFlatScrollBar /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_FullRowSelect(VARIANT_BOOL* pfFullRowSelect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullRowSelect"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfFullRowSelect /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_FullRowSelect(void)
{
  VARIANT_BOOL pfFullRowSelect;
  this->get_FullRowSelect((VARIANT_BOOL*)&pfFullRowSelect);
  return pfFullRowSelect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_FullRowSelect(VARIANT_BOOL pfFullRowSelect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullRowSelect"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pfFullRowSelect /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_GridLines(VARIANT_BOOL* pfGridLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridLines"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfGridLines /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_GridLines(void)
{
  VARIANT_BOOL pfGridLines;
  this->get_GridLines((VARIANT_BOOL*)&pfGridLines);
  return pfGridLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_GridLines(VARIANT_BOOL pfGridLines/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridLines"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pfGridLines /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_HotTracking(VARIANT_BOOL* pfHotTracking/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotTracking"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHotTracking /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_HotTracking(void)
{
  VARIANT_BOOL pfHotTracking;
  this->get_HotTracking((VARIANT_BOOL*)&pfHotTracking);
  return pfHotTracking;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_HotTracking(VARIANT_BOOL pfHotTracking/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HotTracking"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pfHotTracking /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_HoverSelection(VARIANT_BOOL* pfHoverSelection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HoverSelection"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfHoverSelection /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListViewDispT<T>::get_HoverSelection(void)
{
  VARIANT_BOOL pfHoverSelection;
  this->get_HoverSelection((VARIANT_BOOL*)&pfHoverSelection);
  return pfHoverSelection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_HoverSelection(VARIANT_BOOL pfHoverSelection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HoverSelection"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pfHoverSelection /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_Picture(IPictureDisp** ppPictureDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppPictureDisp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IListViewDispT<T>::get_Picture(void)
{
  IPictureDisp* ppPictureDisp;
  this->get_Picture((IPictureDisp**)&ppPictureDisp);
  return ppPictureDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_Picture(IPictureDisp* ppPictureDisp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppPictureDisp /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::_set_Picture(IPictureDisp* ppPictureDisp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppPictureDisp /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_PictureAlignment(Mscomctllib_xp::ListPictureAlignmentConstants* psAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ListPictureAlignmentConstants __fastcall
IListViewDispT<T>::get_PictureAlignment(void)
{
  Mscomctllib_xp::ListPictureAlignmentConstants psAlignment;
  this->get_PictureAlignment((Mscomctllib_xp::ListPictureAlignmentConstants*)&psAlignment);
  return psAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_PictureAlignment(Mscomctllib_xp::ListPictureAlignmentConstants psAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = (int)psAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_ColumnHeaderIcons(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeaderIcons"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppImageList /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IListViewDispT<T>::get_ColumnHeaderIcons(void)
{
  LPDISPATCH ppImageList;
  this->get_ColumnHeaderIcons((LPDISPATCH*)&ppImageList);
  return ppImageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::_set_ColumnHeaderIcons(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeaderIcons"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_ColumnHeaderIcons(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeaderIcons"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::get_TextBackground(Mscomctllib_xp::ListTextBackgroundConstants* penumTextBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextBackground"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumTextBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ListTextBackgroundConstants __fastcall
IListViewDispT<T>::get_TextBackground(void)
{
  Mscomctllib_xp::ListTextBackgroundConstants penumTextBackground;
  this->get_TextBackground((Mscomctllib_xp::ListTextBackgroundConstants*)&penumTextBackground);
  return penumTextBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListViewDispT<T>::set_TextBackground(Mscomctllib_xp::ListTextBackgroundConstants penumTextBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextBackground"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = (int)penumTextBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ListViewEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {BDD1F04A-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::BeforeLabelEdit(short* Cancel)
{
  _TDispID _dispid(/* BeforeLabelEdit */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Cancel /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::AfterLabelEdit(short* Cancel, BSTR* NewString)
{
  _TDispID _dispid(/* AfterLabelEdit */ DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = Cancel /*[VT_I2:1]*/;
  _args[2] = NewString /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::ColumnClick(Mscomctllib_xp::ColumnHeader* ColumnHeader)
{
  _TDispID _dispid(/* ColumnClick */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::ColumnHeader*)ColumnHeader /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::ItemClick(Mscomctllib_xp::ListItem* Item)
{
  _TDispID _dispid(/* ItemClick */ DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::ListItem*)Item /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::KeyDown(short* KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::KeyUp(short* KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::KeyPress(short* KeyAscii)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = KeyAscii /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::DblClick()
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                     long* AllowedEffects/*[in,out]*/)
{
  _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = AllowedEffects /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                        VARIANT_BOOL* DefaultCursors/*[in,out]*/)
{
  _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
  TAutoArgs<2> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                   short* DataFormat/*[in,out]*/)
{
  _TDispID _dispid(/* OLESetData */ DISPID(1552));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = DataFormat /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::OLECompleteDrag(long* Effect/*[in,out]*/)
{
  _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
  TAutoArgs<1> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                    long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                    short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                    float* y/*[in,out]*/, short* State/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  _args[7] = State /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                    long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                    short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                    float* y/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
  TAutoArgs<6> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ListViewEventsDispT<T>::ItemCheck(Mscomctllib_xp::ListItem* Item)
{
  _TDispID _dispid(/* ItemCheck */ DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::ListItem*)Item /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIListItems
// Interface: IListItems
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIListItemsT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  return (*this)->get_Count(plCount);
}

template <class T> long __fastcall
TCOMIListItemsT<T>::get_Count(void)
{
  long plCount;
  OLECHECK(this->get_Count((long*)&plCount));
  return plCount;
}

template <class T> HRESULT __fastcall
TCOMIListItemsT<T>::set_Count(long plCount/*[in]*/)
{
  return (*this)->set_Count(plCount);
}

template <class T> HRESULT __fastcall
TCOMIListItemsT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                       Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  return (*this)->get_ControlDefault(Index, ppIListItem);
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
TCOMIListItemsT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  OLECHECK(this->get_ControlDefault(, (Mscomctllib_xp::IListItem**)&ppIListItem));
  return ppIListItem;
}

template <class T> HRESULT __fastcall
TCOMIListItemsT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                        VARIANT* Text/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                        VARIANT* SmallIcon/*[in,opt]*/, 
                        Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  return (*this)->Add(Index, Key, Text, Icon, SmallIcon, ppIListItem);
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
TCOMIListItemsT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                        VARIANT* Text/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                        VARIANT* SmallIcon/*[in,opt]*/)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  OLECHECK(this->Add(, (Mscomctllib_xp::IListItem**)&ppIListItem));
  return ppIListItem;
}

template <class T> HRESULT __fastcall
TCOMIListItemsT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIListItemsT<T>::get_Item(VARIANT* Index/*[in]*/, 
                             Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppIListItem);
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
TCOMIListItemsT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  OLECHECK(this->get_Item(, (Mscomctllib_xp::IListItem**)&ppIListItem));
  return ppIListItem;
}

template <class T> HRESULT __fastcall
TCOMIListItemsT<T>::Remove(VARIANT* Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIListItemsT<T>::_NewEnum(LPUNKNOWN* ppNewEnum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppNewEnum);
}

template <class T> LPUNKNOWN __fastcall
TCOMIListItemsT<T>::_NewEnum(void)
{
  LPUNKNOWN ppNewEnum;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppNewEnum));
  return ppNewEnum;
}

// *********************************************************************//
// DispIntf:  IListItems
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F04C-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemsDispT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IListItemsDispT<T>::get_Count(void)
{
  long plCount;
  this->get_Count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemsDispT<T>::set_Count(long plCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = plCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemsDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                       Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListItem**)ppIListItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
IListItemsDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  this->get_ControlDefault(Index, (Mscomctllib_xp::IListItem**)&ppIListItem);
  return ppIListItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemsDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                        VARIANT* Text/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                        VARIANT* SmallIcon/*[in,opt]*/, 
                        Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = Key /*[VT_VARIANT:1]*/;
  _args[3] = Text /*[VT_VARIANT:1]*/;
  _args[4] = Icon /*[VT_VARIANT:1]*/;
  _args[5] = SmallIcon /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListItem**)ppIListItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
IListItemsDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                        VARIANT* Text/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                        VARIANT* SmallIcon/*[in,opt]*/)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  this->Add(Index, Key, Text, Icon, SmallIcon, (Mscomctllib_xp::IListItem**)&ppIListItem);
  return ppIListItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemsDispT<T>::get_Item(VARIANT* Index/*[in]*/, 
                             Mscomctllib_xp::IListItem** ppIListItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListItem**)ppIListItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListItem* __fastcall
IListItemsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IListItem* ppIListItem;
  this->get_Item(Index, (Mscomctllib_xp::IListItem**)&ppIListItem);
  return ppIListItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemsDispT<T>::Remove(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemsDispT<T>::_NewEnum(LPUNKNOWN* ppNewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppNewEnum /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IListItemsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppNewEnum;
  this->_NewEnum((LPUNKNOWN*)&ppNewEnum);
  return ppNewEnum;
}

// *********************************************************************//
// SmartIntf: TCOMIListItem
// Interface: IListItem
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Default(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Default(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIListItemT<T>::get_Default(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Default((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Default(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Default(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Text(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIListItemT<T>::get_Text(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Text((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Text(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Ghosted(VARIANT_BOOL* pfOn/*[out,retval]*/)
{
  return (*this)->get_Ghosted(pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Ghosted(TOLEBOOL* pfOn/*[out,retval]*/)
{
  return (*this)->get_Ghosted(VARIANT_BOOL*)pfOn);
}

template <class T> TOLEBOOL __fastcall
TCOMIListItemT<T>::get_Ghosted(void)
{
  VARIANT_BOOL pfOn;
  OLECHECK(this->get_Ghosted((VARIANT_BOOL*)&pfOn));
  return (TOLEBOOL)pfOn;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Ghosted(VARIANT_BOOL pfOn/*[in]*/)
{
  return (*this)->set_Ghosted(pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Ghosted(TOLEBOOL pfOn/*[in]*/)
{
  return (*this)->set_Ghosted(VARIANT_BOOL)pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Height(float* pflHeight/*[out,retval]*/)
{
  return (*this)->get_Height(pflHeight);
}

template <class T> float __fastcall
TCOMIListItemT<T>::get_Height(void)
{
  float pflHeight;
  OLECHECK(this->get_Height((float*)&pflHeight));
  return pflHeight;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Height(float pflHeight/*[in]*/)
{
  return (*this)->set_Height(pflHeight);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Icon(VARIANT* pnIndex/*[out,retval]*/)
{
  return (*this)->get_Icon(pnIndex);
}

template <class T> VARIANT __fastcall
TCOMIListItemT<T>::get_Icon(void)
{
  VARIANT pnIndex;
  OLECHECK(this->get_Icon((VARIANT*)&pnIndex));
  return pnIndex;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Icon(VARIANT pnIndex/*[in]*/)
{
  return (*this)->set_Icon(pnIndex);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Index(long* plIndex/*[out,retval]*/)
{
  return (*this)->get_Index(plIndex);
}

template <class T> long __fastcall
TCOMIListItemT<T>::get_Index(void)
{
  long plIndex;
  OLECHECK(this->get_Index((long*)&plIndex));
  return plIndex;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Index(long plIndex/*[in]*/)
{
  return (*this)->set_Index(plIndex);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  return (*this)->get_Key(pbstrKey);
}

template <class T> BSTR __fastcall
TCOMIListItemT<T>::get_Key(void)
{
  BSTR pbstrKey = 0;
  OLECHECK(this->get_Key((BSTR*)&pbstrKey));
  return pbstrKey;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  return (*this)->set_Key(pbstrKey);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Left(float* pflLeft/*[out,retval]*/)
{
  return (*this)->get_Left(pflLeft);
}

template <class T> float __fastcall
TCOMIListItemT<T>::get_Left(void)
{
  float pflLeft;
  OLECHECK(this->get_Left((float*)&pflLeft));
  return pflLeft;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Left(float pflLeft/*[in]*/)
{
  return (*this)->set_Left(pflLeft);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Selected(VARIANT_BOOL* pfOn/*[out,retval]*/)
{
  return (*this)->get_Selected(pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Selected(TOLEBOOL* pfOn/*[out,retval]*/)
{
  return (*this)->get_Selected(VARIANT_BOOL*)pfOn);
}

template <class T> TOLEBOOL __fastcall
TCOMIListItemT<T>::get_Selected(void)
{
  VARIANT_BOOL pfOn;
  OLECHECK(this->get_Selected((VARIANT_BOOL*)&pfOn));
  return (TOLEBOOL)pfOn;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Selected(VARIANT_BOOL pfOn/*[in]*/)
{
  return (*this)->set_Selected(pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Selected(TOLEBOOL pfOn/*[in]*/)
{
  return (*this)->set_Selected(VARIANT_BOOL)pfOn);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_SmallIcon(VARIANT* pnIndex/*[out,retval]*/)
{
  return (*this)->get_SmallIcon(pnIndex);
}

template <class T> VARIANT __fastcall
TCOMIListItemT<T>::get_SmallIcon(void)
{
  VARIANT pnIndex;
  OLECHECK(this->get_SmallIcon((VARIANT*)&pnIndex));
  return pnIndex;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_SmallIcon(VARIANT pnIndex/*[in]*/)
{
  return (*this)->set_SmallIcon(pnIndex);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  return (*this)->get_Tag(pvTag);
}

template <class T> VARIANT __fastcall
TCOMIListItemT<T>::get_Tag(void)
{
  VARIANT pvTag;
  OLECHECK(this->get_Tag((VARIANT*)&pvTag));
  return pvTag;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Top(float* pflTop/*[out,retval]*/)
{
  return (*this)->get_Top(pflTop);
}

template <class T> float __fastcall
TCOMIListItemT<T>::get_Top(void)
{
  float pflTop;
  OLECHECK(this->get_Top((float*)&pflTop));
  return pflTop;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Top(float pflTop/*[in]*/)
{
  return (*this)->set_Top(pflTop);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Width(float* pflWidth/*[out,retval]*/)
{
  return (*this)->get_Width(pflWidth);
}

template <class T> float __fastcall
TCOMIListItemT<T>::get_Width(void)
{
  float pflWidth;
  OLECHECK(this->get_Width((float*)&pflWidth));
  return pflWidth;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Width(float pflWidth/*[in]*/)
{
  return (*this)->set_Width(pflWidth);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_SubItems(short Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/)
{
  return (*this)->get_SubItems(Index, pbstrItem);
}

template <class T> BSTR __fastcall
TCOMIListItemT<T>::get_SubItems(short Index/*[in]*/)
{
  BSTR pbstrItem = 0;
  OLECHECK(this->get_SubItems(, (BSTR*)&pbstrItem));
  return pbstrItem;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_SubItems(short Index/*[in]*/, BSTR pbstrItem/*[in]*/)
{
  return (*this)->set_SubItems(Index, pbstrItem);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::CreateDragImage(IPictureDisp** ppImage/*[out,retval]*/)
{
  return (*this)->CreateDragImage(ppImage);
}

template <class T> IPictureDisp* __fastcall
TCOMIListItemT<T>::CreateDragImage(void)
{
  IPictureDisp* ppImage;
  OLECHECK(this->CreateDragImage((IPictureDisp**)&ppImage));
  return ppImage;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::EnsureVisible(VARIANT_BOOL* pfVisible/*[out,retval]*/)
{
  return (*this)->EnsureVisible(pfVisible);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIListItemT<T>::EnsureVisible(void)
{
  VARIANT_BOOL pfVisible;
  OLECHECK(this->EnsureVisible((VARIANT_BOOL*)&pfVisible));
  return pfVisible;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->_set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_ListSubItems(Mscomctllib_xp::IListSubItems** ppSubItems/*[out,retval]*/)
{
  return (*this)->get_ListSubItems(ppSubItems);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_ListSubItems(Mscomctllib_xp::IListSubItemsPtr* ppSubItems/*[out,retval]*/)
{
  return (*this)->get_ListSubItems(IListSubItems**)ppSubItems);
}

template <class T> Mscomctllib_xp::IListSubItemsPtr __fastcall
TCOMIListItemT<T>::get_ListSubItems(void)
{
  Mscomctllib_xp::IListSubItems* ppSubItems;
  OLECHECK(this->get_ListSubItems((Mscomctllib_xp::IListSubItems**)&ppSubItems));
  return (Mscomctllib_xp::IListSubItemsPtr)ppSubItems;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_ListSubItems(Mscomctllib_xp::IListSubItems* ppSubItems/*[in]*/)
{
  return (*this)->set_ListSubItems(ppSubItems);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_ListSubItems(Mscomctllib_xp::IListSubItemsPtr ppSubItems/*[in]*/)
{
  return (*this)->set_ListSubItems(IListSubItems*)ppSubItems);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Checked(VARIANT_BOOL* pfChecked/*[out,retval]*/)
{
  return (*this)->get_Checked(pfChecked);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Checked(TOLEBOOL* pfChecked/*[out,retval]*/)
{
  return (*this)->get_Checked(VARIANT_BOOL*)pfChecked);
}

template <class T> TOLEBOOL __fastcall
TCOMIListItemT<T>::get_Checked(void)
{
  VARIANT_BOOL pfChecked;
  OLECHECK(this->get_Checked((VARIANT_BOOL*)&pfChecked));
  return (TOLEBOOL)pfChecked;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Checked(VARIANT_BOOL pfChecked/*[in]*/)
{
  return (*this)->set_Checked(pfChecked);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Checked(TOLEBOOL pfChecked/*[in]*/)
{
  return (*this)->set_Checked(VARIANT_BOOL)pfChecked);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pcrFore);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIListItemT<T>::get_ForeColor(void)
{
  ::OLE_COLOR pcrFore;
  OLECHECK(this->get_ForeColor((::OLE_COLOR*)&pcrFore));
  return pcrFore;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_ForeColor(::OLE_COLOR pcrFore/*[in]*/)
{
  return (*this)->set_ForeColor(pcrFore);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/)
{
  return (*this)->get_ToolTipText(pbstrToolTipText);
}

template <class T> BSTR __fastcall
TCOMIListItemT<T>::get_ToolTipText(void)
{
  BSTR pbstrToolTipText = 0;
  OLECHECK(this->get_ToolTipText((BSTR*)&pbstrToolTipText));
  return pbstrToolTipText;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_ToolTipText(BSTR pbstrToolTipText/*[in]*/)
{
  return (*this)->set_ToolTipText(pbstrToolTipText);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Bold(VARIANT_BOOL* pfBold/*[out,retval]*/)
{
  return (*this)->get_Bold(pfBold);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::get_Bold(TOLEBOOL* pfBold/*[out,retval]*/)
{
  return (*this)->get_Bold(VARIANT_BOOL*)pfBold);
}

template <class T> TOLEBOOL __fastcall
TCOMIListItemT<T>::get_Bold(void)
{
  VARIANT_BOOL pfBold;
  OLECHECK(this->get_Bold((VARIANT_BOOL*)&pfBold));
  return (TOLEBOOL)pfBold;
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Bold(VARIANT_BOOL pfBold/*[in]*/)
{
  return (*this)->set_Bold(pfBold);
}

template <class T> HRESULT __fastcall
TCOMIListItemT<T>::set_Bold(TOLEBOOL pfBold/*[in]*/)
{
  return (*this)->set_Bold(VARIANT_BOOL)pfBold);
}

// *********************************************************************//
// DispIntf:  IListItem
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F04E-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Default(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IListItemDispT<T>::get_Default(void)
{
  BSTR pbstrText;
  this->get_Default((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Default(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IListItemDispT<T>::get_Text(void)
{
  BSTR pbstrText;
  this->get_Text((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Ghosted(VARIANT_BOOL* pfOn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ghosted"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListItemDispT<T>::get_Ghosted(void)
{
  VARIANT_BOOL pfOn;
  this->get_Ghosted((VARIANT_BOOL*)&pfOn);
  return pfOn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Ghosted(VARIANT_BOOL pfOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ghosted"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pfOn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Height(float* pflHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflHeight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IListItemDispT<T>::get_Height(void)
{
  float pflHeight;
  this->get_Height((float*)&pflHeight);
  return pflHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Height(float pflHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pflHeight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Icon(VARIANT* pnIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IListItemDispT<T>::get_Icon(void)
{
  VARIANT pnIndex;
  this->get_Icon((VARIANT*)&pnIndex);
  return pnIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Icon(VARIANT pnIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pnIndex /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Index(long* plIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IListItemDispT<T>::get_Index(void)
{
  long plIndex;
  this->get_Index((long*)&plIndex);
  return plIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Index(long plIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = plIndex /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IListItemDispT<T>::get_Key(void)
{
  BSTR pbstrKey;
  this->get_Key((BSTR*)&pbstrKey);
  return pbstrKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pbstrKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Left(float* pflLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IListItemDispT<T>::get_Left(void)
{
  float pflLeft;
  this->get_Left((float*)&pflLeft);
  return pflLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Left(float pflLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pflLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Selected(VARIANT_BOOL* pfOn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfOn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListItemDispT<T>::get_Selected(void)
{
  VARIANT_BOOL pfOn;
  this->get_Selected((VARIANT_BOOL*)&pfOn);
  return pfOn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Selected(VARIANT_BOOL pfOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pfOn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_SmallIcon(VARIANT* pnIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallIcon"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IListItemDispT<T>::get_SmallIcon(void)
{
  VARIANT pnIndex;
  this->get_SmallIcon((VARIANT*)&pnIndex);
  return pnIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_SmallIcon(VARIANT pnIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallIcon"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pnIndex /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvTag /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IListItemDispT<T>::get_Tag(void)
{
  VARIANT pvTag;
  this->get_Tag((VARIANT*)&pvTag);
  return pvTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Top(float* pflTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IListItemDispT<T>::get_Top(void)
{
  float pflTop;
  this->get_Top((float*)&pflTop);
  return pflTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Top(float pflTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pflTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Width(float* pflWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IListItemDispT<T>::get_Width(void)
{
  float pflWidth;
  this->get_Width((float*)&pflWidth);
  return pflWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Width(float pflWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pflWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_SubItems(short Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubItems"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I2:0]*/;
  return OutRetValSetterPtr(pbstrItem /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IListItemDispT<T>::get_SubItems(short Index/*[in]*/)
{
  BSTR pbstrItem;
  this->get_SubItems(Index, (BSTR*)&pbstrItem);
  return pbstrItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_SubItems(short Index/*[in]*/, BSTR pbstrItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubItems"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I2:0]*/;
  _args[2] = pbstrItem /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::CreateDragImage(IPictureDisp** ppImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateDragImage"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppImage /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IListItemDispT<T>::CreateDragImage(void)
{
  IPictureDisp* ppImage;
  this->CreateDragImage((IPictureDisp**)&ppImage);
  return ppImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::EnsureVisible(VARIANT_BOOL* pfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnsureVisible"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVisible /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListItemDispT<T>::EnsureVisible(void)
{
  VARIANT_BOOL pfVisible;
  this->EnsureVisible((VARIANT_BOOL*)&pfVisible);
  return pfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_ListSubItems(Mscomctllib_xp::IListSubItems** ppSubItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListSubItems"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListSubItems**)ppSubItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListSubItems* __fastcall
IListItemDispT<T>::get_ListSubItems(void)
{
  Mscomctllib_xp::IListSubItems* ppSubItems;
  this->get_ListSubItems((Mscomctllib_xp::IListSubItems**)&ppSubItems);
  return ppSubItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_ListSubItems(Mscomctllib_xp::IListSubItems* ppSubItems/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListSubItems"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IListSubItems*)ppSubItems /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Checked(VARIANT_BOOL* pfChecked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfChecked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListItemDispT<T>::get_Checked(void)
{
  VARIANT_BOOL pfChecked;
  this->get_Checked((VARIANT_BOOL*)&pfChecked);
  return pfChecked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Checked(VARIANT_BOOL pfChecked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pfChecked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcrFore /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IListItemDispT<T>::get_ForeColor(void)
{
  ::OLE_COLOR pcrFore;
  this->get_ForeColor((::OLE_COLOR*)&pcrFore);
  return pcrFore;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_ForeColor(::OLE_COLOR pcrFore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = pcrFore /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolTipText"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrToolTipText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IListItemDispT<T>::get_ToolTipText(void)
{
  BSTR pbstrToolTipText;
  this->get_ToolTipText((BSTR*)&pbstrToolTipText);
  return pbstrToolTipText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_ToolTipText(BSTR pbstrToolTipText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolTipText"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = pbstrToolTipText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::get_Bold(VARIANT_BOOL* pfBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListItemDispT<T>::get_Bold(void)
{
  VARIANT_BOOL pfBold;
  this->get_Bold((VARIANT_BOOL*)&pfBold);
  return pfBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListItemDispT<T>::set_Bold(VARIANT_BOOL pfBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pfBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIColumnHeaders
// Interface: IColumnHeaders
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIColumnHeadersT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  return (*this)->get_Count(plCount);
}

template <class T> long __fastcall
TCOMIColumnHeadersT<T>::get_Count(void)
{
  long plCount;
  OLECHECK(this->get_Count((long*)&plCount));
  return plCount;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeadersT<T>::set_Count(long plCount/*[in]*/)
{
  return (*this)->set_Count(plCount);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeadersT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                           Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/)
{
  return (*this)->get_ControlDefault(Index, ppIColumnHeader);
}

template <class T> Mscomctllib_xp::IColumnHeader* __fastcall
TCOMIColumnHeadersT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
  OLECHECK(this->get_ControlDefault(, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader));
  return ppIColumnHeader;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeadersT<T>::Add_PreVB98(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                    VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                                    VARIANT* Alignment/*[in,opt]*/, 
                                    Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/)
{
  return (*this)->Add_PreVB98(Index, Key, Text, Width, Alignment, ppIColumnHeader);
}

template <class T> Mscomctllib_xp::IColumnHeader* __fastcall
TCOMIColumnHeadersT<T>::Add_PreVB98(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                    VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                                    VARIANT* Alignment/*[in,opt]*/)
{
  Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
  OLECHECK(this->Add_PreVB98(, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader));
  return ppIColumnHeader;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeadersT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIColumnHeadersT<T>::get_Item(VARIANT* Index/*[in]*/, 
                                 Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppIColumnHeader);
}

template <class T> Mscomctllib_xp::IColumnHeader* __fastcall
TCOMIColumnHeadersT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
  OLECHECK(this->get_Item(, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader));
  return ppIColumnHeader;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeadersT<T>::Remove(VARIANT* Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeadersT<T>::_NewEnum(LPUNKNOWN* ppUnknown/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppUnknown);
}

template <class T> LPUNKNOWN __fastcall
TCOMIColumnHeadersT<T>::_NewEnum(void)
{
  LPUNKNOWN ppUnknown;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppUnknown));
  return ppUnknown;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeadersT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                            VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                            VARIANT* Alignment/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                            Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/)
{
  return (*this)->Add(Index, Key, Text, Width, Alignment, Icon, ppIColumnHeader);
}

template <class T> Mscomctllib_xp::IColumnHeader* __fastcall
TCOMIColumnHeadersT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                            VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                            VARIANT* Alignment/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/)
{
  Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
  OLECHECK(this->Add(, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader));
  return ppIColumnHeader;
}

// *********************************************************************//
// DispIntf:  IColumnHeaders
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F050-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeadersDispT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IColumnHeadersDispT<T>::get_Count(void)
{
  long plCount;
  this->get_Count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeadersDispT<T>::set_Count(long plCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = plCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeadersDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                           Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IColumnHeader**)ppIColumnHeader /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IColumnHeader* __fastcall
IColumnHeadersDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
  this->get_ControlDefault(Index, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader);
  return ppIColumnHeader;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeadersDispT<T>::Add_PreVB98(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                    VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                                    VARIANT* Alignment/*[in,opt]*/, 
                                    Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add_PreVB98"), DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = Key /*[VT_VARIANT:1]*/;
  _args[3] = Text /*[VT_VARIANT:1]*/;
  _args[4] = Width /*[VT_VARIANT:1]*/;
  _args[5] = Alignment /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IColumnHeader**)ppIColumnHeader /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IColumnHeader* __fastcall
IColumnHeadersDispT<T>::Add_PreVB98(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                                    VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                                    VARIANT* Alignment/*[in,opt]*/)
{
  Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
  this->Add_PreVB98(Index, Key, Text, Width, Alignment, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader);
  return ppIColumnHeader;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeadersDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeadersDispT<T>::get_Item(VARIANT* Index/*[in]*/, 
                                 Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IColumnHeader**)ppIColumnHeader /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IColumnHeader* __fastcall
IColumnHeadersDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
  this->get_Item(Index, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader);
  return ppIColumnHeader;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeadersDispT<T>::Remove(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeadersDispT<T>::_NewEnum(LPUNKNOWN* ppUnknown/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnknown /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IColumnHeadersDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppUnknown;
  this->_NewEnum((LPUNKNOWN*)&ppUnknown);
  return ppUnknown;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeadersDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                            VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                            VARIANT* Alignment/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/, 
                            Mscomctllib_xp::IColumnHeader** ppIColumnHeader/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(6));
  TAutoArgs<6> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = Key /*[VT_VARIANT:1]*/;
  _args[3] = Text /*[VT_VARIANT:1]*/;
  _args[4] = Width /*[VT_VARIANT:1]*/;
  _args[5] = Alignment /*[VT_VARIANT:1]*/;
  _args[6] = Icon /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IColumnHeader**)ppIColumnHeader /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IColumnHeader* __fastcall
IColumnHeadersDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                            VARIANT* Text/*[in,opt]*/, VARIANT* Width/*[in,opt]*/, 
                            VARIANT* Alignment/*[in,opt]*/, VARIANT* Icon/*[in,opt]*/)
{
  Mscomctllib_xp::IColumnHeader* ppIColumnHeader;
  this->Add(Index, Key, Text, Width, Alignment, Icon, (Mscomctllib_xp::IColumnHeader**)&ppIColumnHeader);
  return ppIColumnHeader;
}

// *********************************************************************//
// SmartIntf: TCOMIColumnHeader
// Interface: IColumnHeader
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_Default(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Default(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIColumnHeaderT<T>::get_Default(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Default((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_Default(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Default(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Text(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIColumnHeaderT<T>::get_Text(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Text((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Text(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_Alignment(Mscomctllib_xp::ListColumnAlignmentConstants* pnAlignment/*[out,retval]*/)
{
  return (*this)->get_Alignment(pnAlignment);
}

template <class T> Mscomctllib_xp::ListColumnAlignmentConstants __fastcall
TCOMIColumnHeaderT<T>::get_Alignment(void)
{
  Mscomctllib_xp::ListColumnAlignmentConstants pnAlignment;
  OLECHECK(this->get_Alignment((Mscomctllib_xp::ListColumnAlignmentConstants*)&pnAlignment));
  return pnAlignment;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_Alignment(Mscomctllib_xp::ListColumnAlignmentConstants pnAlignment/*[in]*/)
{
  return (*this)->set_Alignment(pnAlignment);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_Index(long* plIndex/*[out,retval]*/)
{
  return (*this)->get_Index(plIndex);
}

template <class T> long __fastcall
TCOMIColumnHeaderT<T>::get_Index(void)
{
  long plIndex;
  OLECHECK(this->get_Index((long*)&plIndex));
  return plIndex;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_Index(long plIndex/*[in]*/)
{
  return (*this)->set_Index(plIndex);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  return (*this)->get_Key(pbstrKey);
}

template <class T> BSTR __fastcall
TCOMIColumnHeaderT<T>::get_Key(void)
{
  BSTR pbstrKey = 0;
  OLECHECK(this->get_Key((BSTR*)&pbstrKey));
  return pbstrKey;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  return (*this)->set_Key(pbstrKey);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_Left(float* pflLeft/*[out,retval]*/)
{
  return (*this)->get_Left(pflLeft);
}

template <class T> float __fastcall
TCOMIColumnHeaderT<T>::get_Left(void)
{
  float pflLeft;
  OLECHECK(this->get_Left((float*)&pflLeft));
  return pflLeft;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_Left(float pflLeft/*[in]*/)
{
  return (*this)->set_Left(pflLeft);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_SubItemIndex(short* psIndex/*[out,retval]*/)
{
  return (*this)->get_SubItemIndex(psIndex);
}

template <class T> short __fastcall
TCOMIColumnHeaderT<T>::get_SubItemIndex(void)
{
  short psIndex;
  OLECHECK(this->get_SubItemIndex((short*)&psIndex));
  return psIndex;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_SubItemIndex(short psIndex/*[in]*/)
{
  return (*this)->set_SubItemIndex(psIndex);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  return (*this)->get_Tag(pvTag);
}

template <class T> VARIANT __fastcall
TCOMIColumnHeaderT<T>::get_Tag(void)
{
  VARIANT pvTag;
  OLECHECK(this->get_Tag((VARIANT*)&pvTag));
  return pvTag;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_Width(float* pflWidth/*[out,retval]*/)
{
  return (*this)->get_Width(pflWidth);
}

template <class T> float __fastcall
TCOMIColumnHeaderT<T>::get_Width(void)
{
  float pflWidth;
  OLECHECK(this->get_Width((float*)&pflWidth));
  return pflWidth;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_Width(float pflWidth/*[in]*/)
{
  return (*this)->set_Width(pflWidth);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->_set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_Icon(VARIANT* pnIndex/*[out,retval]*/)
{
  return (*this)->get_Icon(pnIndex);
}

template <class T> VARIANT __fastcall
TCOMIColumnHeaderT<T>::get_Icon(void)
{
  VARIANT pnIndex;
  OLECHECK(this->get_Icon((VARIANT*)&pnIndex));
  return pnIndex;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_Icon(VARIANT pnIndex/*[in]*/)
{
  return (*this)->set_Icon(pnIndex);
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::get_Position(short* piPosition/*[out,retval]*/)
{
  return (*this)->get_Position(piPosition);
}

template <class T> short __fastcall
TCOMIColumnHeaderT<T>::get_Position(void)
{
  short piPosition;
  OLECHECK(this->get_Position((short*)&piPosition));
  return piPosition;
}

template <class T> HRESULT __fastcall
TCOMIColumnHeaderT<T>::set_Position(short piPosition/*[in]*/)
{
  return (*this)->set_Position(piPosition);
}

// *********************************************************************//
// DispIntf:  IColumnHeader
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F051-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_Default(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IColumnHeaderDispT<T>::get_Default(void)
{
  BSTR pbstrText;
  this->get_Default((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_Default(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IColumnHeaderDispT<T>::get_Text(void)
{
  BSTR pbstrText;
  this->get_Text((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_Alignment(Mscomctllib_xp::ListColumnAlignmentConstants* pnAlignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pnAlignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ListColumnAlignmentConstants __fastcall
IColumnHeaderDispT<T>::get_Alignment(void)
{
  Mscomctllib_xp::ListColumnAlignmentConstants pnAlignment;
  this->get_Alignment((Mscomctllib_xp::ListColumnAlignmentConstants*)&pnAlignment);
  return pnAlignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_Alignment(Mscomctllib_xp::ListColumnAlignmentConstants pnAlignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (int)pnAlignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_Index(long* plIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IColumnHeaderDispT<T>::get_Index(void)
{
  long plIndex;
  this->get_Index((long*)&plIndex);
  return plIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_Index(long plIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = plIndex /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IColumnHeaderDispT<T>::get_Key(void)
{
  BSTR pbstrKey;
  this->get_Key((BSTR*)&pbstrKey);
  return pbstrKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_Left(float* pflLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IColumnHeaderDispT<T>::get_Left(void)
{
  float pflLeft;
  this->get_Left((float*)&pflLeft);
  return pflLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_Left(float pflLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pflLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_SubItemIndex(short* psIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubItemIndex"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psIndex /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IColumnHeaderDispT<T>::get_SubItemIndex(void)
{
  short psIndex;
  this->get_SubItemIndex((short*)&psIndex);
  return psIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_SubItemIndex(short psIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubItemIndex"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = psIndex /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvTag /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IColumnHeaderDispT<T>::get_Tag(void)
{
  VARIANT pvTag;
  this->get_Tag((VARIANT*)&pvTag);
  return pvTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_Width(float* pflWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pflWidth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
IColumnHeaderDispT<T>::get_Width(void)
{
  float pflWidth;
  this->get_Width((float*)&pflWidth);
  return pflWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_Width(float pflWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pflWidth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_Icon(VARIANT* pnIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IColumnHeaderDispT<T>::get_Icon(void)
{
  VARIANT pnIndex;
  this->get_Icon((VARIANT*)&pnIndex);
  return pnIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_Icon(VARIANT pnIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pnIndex /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::get_Position(short* piPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(piPosition /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IColumnHeaderDispT<T>::get_Position(void)
{
  short piPosition;
  this->get_Position((short*)&piPosition);
  return piPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IColumnHeaderDispT<T>::set_Position(short piPosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = piPosition /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIListSubItems
// Interface: IListSubItems
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIListSubItemsT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  return (*this)->get_Count(plCount);
}

template <class T> long __fastcall
TCOMIListSubItemsT<T>::get_Count(void)
{
  long plCount;
  OLECHECK(this->get_Count((long*)&plCount));
  return plCount;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemsT<T>::set_Count(long plCount/*[in]*/)
{
  return (*this)->set_Count(plCount);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemsT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                          Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/)
{
  return (*this)->get_ControlDefault(Index, ppIListSubItem);
}

template <class T> Mscomctllib_xp::IListSubItem* __fastcall
TCOMIListSubItemsT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IListSubItem* ppIListSubItem;
  OLECHECK(this->get_ControlDefault(, (Mscomctllib_xp::IListSubItem**)&ppIListSubItem));
  return ppIListSubItem;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemsT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                           VARIANT* Text/*[in,opt]*/, VARIANT* ReportIcon/*[in,opt]*/, 
                           VARIANT* ToolTipText/*[in,opt]*/, 
                           Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/)
{
  return (*this)->Add(Index, Key, Text, ReportIcon, ToolTipText, ppIListSubItem);
}

template <class T> Mscomctllib_xp::IListSubItem* __fastcall
TCOMIListSubItemsT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                           VARIANT* Text/*[in,opt]*/, VARIANT* ReportIcon/*[in,opt]*/, 
                           VARIANT* ToolTipText/*[in,opt]*/)
{
  Mscomctllib_xp::IListSubItem* ppIListSubItem;
  OLECHECK(this->Add(, (Mscomctllib_xp::IListSubItem**)&ppIListSubItem));
  return ppIListSubItem;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemsT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIListSubItemsT<T>::get_Item(VARIANT* Index/*[in]*/, 
                                Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppIListSubItem);
}

template <class T> Mscomctllib_xp::IListSubItem* __fastcall
TCOMIListSubItemsT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IListSubItem* ppIListSubItem;
  OLECHECK(this->get_Item(, (Mscomctllib_xp::IListSubItem**)&ppIListSubItem));
  return ppIListSubItem;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemsT<T>::Remove(VARIANT* Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemsT<T>::_NewEnum(LPUNKNOWN* ppNewEnum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppNewEnum);
}

template <class T> LPUNKNOWN __fastcall
TCOMIListSubItemsT<T>::_NewEnum(void)
{
  LPUNKNOWN ppNewEnum;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppNewEnum));
  return ppNewEnum;
}

// *********************************************************************//
// DispIntf:  IListSubItems
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F053-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemsDispT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IListSubItemsDispT<T>::get_Count(void)
{
  long plCount;
  this->get_Count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemsDispT<T>::set_Count(long plCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = plCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemsDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                          Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListSubItem**)ppIListSubItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListSubItem* __fastcall
IListSubItemsDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IListSubItem* ppIListSubItem;
  this->get_ControlDefault(Index, (Mscomctllib_xp::IListSubItem**)&ppIListSubItem);
  return ppIListSubItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemsDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                           VARIANT* Text/*[in,opt]*/, VARIANT* ReportIcon/*[in,opt]*/, 
                           VARIANT* ToolTipText/*[in,opt]*/, 
                           Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<5> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = Key /*[VT_VARIANT:1]*/;
  _args[3] = Text /*[VT_VARIANT:1]*/;
  _args[4] = ReportIcon /*[VT_VARIANT:1]*/;
  _args[5] = ToolTipText /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListSubItem**)ppIListSubItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListSubItem* __fastcall
IListSubItemsDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                           VARIANT* Text/*[in,opt]*/, VARIANT* ReportIcon/*[in,opt]*/, 
                           VARIANT* ToolTipText/*[in,opt]*/)
{
  Mscomctllib_xp::IListSubItem* ppIListSubItem;
  this->Add(Index, Key, Text, ReportIcon, ToolTipText, (Mscomctllib_xp::IListSubItem**)&ppIListSubItem);
  return ppIListSubItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemsDispT<T>::get_Item(VARIANT* Index/*[in]*/, 
                                Mscomctllib_xp::IListSubItem** ppIListSubItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IListSubItem**)ppIListSubItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IListSubItem* __fastcall
IListSubItemsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IListSubItem* ppIListSubItem;
  this->get_Item(Index, (Mscomctllib_xp::IListSubItem**)&ppIListSubItem);
  return ppIListSubItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemsDispT<T>::Remove(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemsDispT<T>::_NewEnum(LPUNKNOWN* ppNewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppNewEnum /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IListSubItemsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppNewEnum;
  this->_NewEnum((LPUNKNOWN*)&ppNewEnum);
  return ppNewEnum;
}

// *********************************************************************//
// SmartIntf: TCOMIListSubItem
// Interface: IListSubItem
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::get_Default(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Default(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIListSubItemT<T>::get_Default(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Default((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::set_Default(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Default(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Text(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIListSubItemT<T>::get_Text(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Text((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Text(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pcrFore);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIListSubItemT<T>::get_ForeColor(void)
{
  ::OLE_COLOR pcrFore;
  OLECHECK(this->get_ForeColor((::OLE_COLOR*)&pcrFore));
  return pcrFore;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::set_ForeColor(::OLE_COLOR pcrFore/*[in]*/)
{
  return (*this)->set_ForeColor(pcrFore);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::get_Bold(VARIANT_BOOL* pfBold/*[out,retval]*/)
{
  return (*this)->get_Bold(pfBold);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::get_Bold(TOLEBOOL* pfBold/*[out,retval]*/)
{
  return (*this)->get_Bold(VARIANT_BOOL*)pfBold);
}

template <class T> TOLEBOOL __fastcall
TCOMIListSubItemT<T>::get_Bold(void)
{
  VARIANT_BOOL pfBold;
  OLECHECK(this->get_Bold((VARIANT_BOOL*)&pfBold));
  return (TOLEBOOL)pfBold;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::set_Bold(VARIANT_BOOL pfBold/*[in]*/)
{
  return (*this)->set_Bold(pfBold);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::set_Bold(TOLEBOOL pfBold/*[in]*/)
{
  return (*this)->set_Bold(VARIANT_BOOL)pfBold);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::get_ReportIcon(VARIANT* pnIndex/*[out,retval]*/)
{
  return (*this)->get_ReportIcon(pnIndex);
}

template <class T> VARIANT __fastcall
TCOMIListSubItemT<T>::get_ReportIcon(void)
{
  VARIANT pnIndex;
  OLECHECK(this->get_ReportIcon((VARIANT*)&pnIndex));
  return pnIndex;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::set_ReportIcon(VARIANT pnIndex/*[in]*/)
{
  return (*this)->set_ReportIcon(pnIndex);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/)
{
  return (*this)->get_ToolTipText(pbstrToolTipText);
}

template <class T> BSTR __fastcall
TCOMIListSubItemT<T>::get_ToolTipText(void)
{
  BSTR pbstrToolTipText = 0;
  OLECHECK(this->get_ToolTipText((BSTR*)&pbstrToolTipText));
  return pbstrToolTipText;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::set_ToolTipText(BSTR pbstrToolTipText/*[in]*/)
{
  return (*this)->set_ToolTipText(pbstrToolTipText);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::get_Index(long* plIndex/*[out,retval]*/)
{
  return (*this)->get_Index(plIndex);
}

template <class T> long __fastcall
TCOMIListSubItemT<T>::get_Index(void)
{
  long plIndex;
  OLECHECK(this->get_Index((long*)&plIndex));
  return plIndex;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::set_Index(long plIndex/*[in]*/)
{
  return (*this)->set_Index(plIndex);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  return (*this)->get_Key(pbstrKey);
}

template <class T> BSTR __fastcall
TCOMIListSubItemT<T>::get_Key(void)
{
  BSTR pbstrKey = 0;
  OLECHECK(this->get_Key((BSTR*)&pbstrKey));
  return pbstrKey;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  return (*this)->set_Key(pbstrKey);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  return (*this)->get_Tag(pvTag);
}

template <class T> VARIANT __fastcall
TCOMIListSubItemT<T>::get_Tag(void)
{
  VARIANT pvTag;
  OLECHECK(this->get_Tag((VARIANT*)&pvTag));
  return pvTag;
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIListSubItemT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->_set_Tag(pvTag);
}

// *********************************************************************//
// DispIntf:  IListSubItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BDD1F055-858B-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::get_Default(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IListSubItemDispT<T>::get_Default(void)
{
  BSTR pbstrText;
  this->get_Default((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::set_Default(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IListSubItemDispT<T>::get_Text(void)
{
  BSTR pbstrText;
  this->get_Text((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::get_ForeColor(::OLE_COLOR* pcrFore/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcrFore /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IListSubItemDispT<T>::get_ForeColor(void)
{
  ::OLE_COLOR pcrFore;
  this->get_ForeColor((::OLE_COLOR*)&pcrFore);
  return pcrFore;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::set_ForeColor(::OLE_COLOR pcrFore/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = pcrFore /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::get_Bold(VARIANT_BOOL* pfBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfBold /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IListSubItemDispT<T>::get_Bold(void)
{
  VARIANT_BOOL pfBold;
  this->get_Bold((VARIANT_BOOL*)&pfBold);
  return pfBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::set_Bold(VARIANT_BOOL pfBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bold"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pfBold /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::get_ReportIcon(VARIANT* pnIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportIcon"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnIndex /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IListSubItemDispT<T>::get_ReportIcon(void)
{
  VARIANT pnIndex;
  this->get_ReportIcon((VARIANT*)&pnIndex);
  return pnIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::set_ReportIcon(VARIANT pnIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReportIcon"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pnIndex /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::get_ToolTipText(BSTR* pbstrToolTipText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolTipText"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrToolTipText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IListSubItemDispT<T>::get_ToolTipText(void)
{
  BSTR pbstrToolTipText;
  this->get_ToolTipText((BSTR*)&pbstrToolTipText);
  return pbstrToolTipText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::set_ToolTipText(BSTR pbstrToolTipText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolTipText"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pbstrToolTipText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::get_Index(long* plIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IListSubItemDispT<T>::get_Index(void)
{
  long plIndex;
  this->get_Index((long*)&plIndex);
  return plIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::set_Index(long plIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = plIndex /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IListSubItemDispT<T>::get_Key(void)
{
  BSTR pbstrKey;
  this->get_Key((BSTR*)&pbstrKey);
  return pbstrKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pbstrKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvTag /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IListSubItemDispT<T>::get_Tag(void)
{
  VARIANT pvTag;
  this->get_Tag((VARIANT*)&pvTag);
  return pvTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IListSubItemDispT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIImageList
// Interface: IImageList
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIImageListT<T>::get_ImageHeight(short* psImageHeight/*[out,retval]*/)
{
  return (*this)->get_ImageHeight(psImageHeight);
}

template <class T> short __fastcall
TCOMIImageListT<T>::get_ImageHeight(void)
{
  short psImageHeight;
  OLECHECK(this->get_ImageHeight((short*)&psImageHeight));
  return psImageHeight;
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::set_ImageHeight(short psImageHeight/*[in]*/)
{
  return (*this)->set_ImageHeight(psImageHeight);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::get_ImageWidth(short* psImageWidth/*[out,retval]*/)
{
  return (*this)->get_ImageWidth(psImageWidth);
}

template <class T> short __fastcall
TCOMIImageListT<T>::get_ImageWidth(void)
{
  short psImageWidth;
  OLECHECK(this->get_ImageWidth((short*)&psImageWidth));
  return psImageWidth;
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::set_ImageWidth(short psImageWidth/*[in]*/)
{
  return (*this)->set_ImageWidth(psImageWidth);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::get_MaskColor(::OLE_COLOR* pclrMaskColor/*[out,retval]*/)
{
  return (*this)->get_MaskColor(pclrMaskColor);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIImageListT<T>::get_MaskColor(void)
{
  ::OLE_COLOR pclrMaskColor;
  OLECHECK(this->get_MaskColor((::OLE_COLOR*)&pclrMaskColor));
  return pclrMaskColor;
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::set_MaskColor(::OLE_COLOR pclrMaskColor/*[in]*/)
{
  return (*this)->set_MaskColor(pclrMaskColor);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::get_UseMaskColor(VARIANT_BOOL* pbState/*[out,retval]*/)
{
  return (*this)->get_UseMaskColor(pbState);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::get_UseMaskColor(TOLEBOOL* pbState/*[out,retval]*/)
{
  return (*this)->get_UseMaskColor(VARIANT_BOOL*)pbState);
}

template <class T> TOLEBOOL __fastcall
TCOMIImageListT<T>::get_UseMaskColor(void)
{
  VARIANT_BOOL pbState;
  OLECHECK(this->get_UseMaskColor((VARIANT_BOOL*)&pbState));
  return (TOLEBOOL)pbState;
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::set_UseMaskColor(VARIANT_BOOL pbState/*[in]*/)
{
  return (*this)->set_UseMaskColor(pbState);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::set_UseMaskColor(TOLEBOOL pbState/*[in]*/)
{
  return (*this)->set_UseMaskColor(VARIANT_BOOL)pbState);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::get_ListImages(Mscomctllib_xp::IImages** ppListImages/*[out,retval]*/)
{
  return (*this)->get_ListImages(ppListImages);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::get_ListImages(Mscomctllib_xp::IImagesPtr* ppListImages/*[out,retval]*/)
{
  return (*this)->get_ListImages(IImages**)ppListImages);
}

template <class T> Mscomctllib_xp::IImagesPtr __fastcall
TCOMIImageListT<T>::get_ListImages(void)
{
  Mscomctllib_xp::IImages* ppListImages;
  OLECHECK(this->get_ListImages((Mscomctllib_xp::IImages**)&ppListImages));
  return (Mscomctllib_xp::IImagesPtr)ppListImages;
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::_set_ListImages(Mscomctllib_xp::IImages* ppListImages/*[in]*/)
{
  return (*this)->_set_ListImages(ppListImages);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::_set_ListImages(Mscomctllib_xp::IImagesPtr ppListImages/*[in]*/)
{
  return (*this)->_set_ListImages(IImages*)ppListImages);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::get_hImageList(OLE_HANDLE* phImageList/*[out,retval]*/)
{
  return (*this)->get_hImageList(phImageList);
}

template <class T> OLE_HANDLE __fastcall
TCOMIImageListT<T>::get_hImageList(void)
{
  OLE_HANDLE phImageList;
  OLECHECK(this->get_hImageList((OLE_HANDLE*)&phImageList));
  return phImageList;
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::set_hImageList(OLE_HANDLE phImageList/*[in]*/)
{
  return (*this)->set_hImageList(phImageList);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::get_BackColor(::OLE_COLOR* pclrBackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(pclrBackColor);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIImageListT<T>::get_BackColor(void)
{
  ::OLE_COLOR pclrBackColor;
  OLECHECK(this->get_BackColor((::OLE_COLOR*)&pclrBackColor));
  return pclrBackColor;
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::set_BackColor(::OLE_COLOR pclrBackColor/*[in]*/)
{
  return (*this)->set_BackColor(pclrBackColor);
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::Overlay(VARIANT* Key1/*[in]*/, VARIANT* Key2/*[in]*/, 
                            IPictureDisp** ppPictureDisp/*[out,retval]*/)
{
  return (*this)->Overlay(Key1, Key2, ppPictureDisp);
}

template <class T> IPictureDisp* __fastcall
TCOMIImageListT<T>::Overlay(VARIANT* Key1/*[in]*/, VARIANT* Key2/*[in]*/)
{
  IPictureDisp* ppPictureDisp;
  OLECHECK(this->Overlay(, (IPictureDisp**)&ppPictureDisp));
  return ppPictureDisp;
}

template <class T> HRESULT __fastcall
TCOMIImageListT<T>::AboutBox(void)
{
  return (*this)->AboutBox();
}

// *********************************************************************//
// DispIntf:  IImageList
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C247F21-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::get_ImageHeight(short* psImageHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageHeight"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psImageHeight /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IImageListDispT<T>::get_ImageHeight(void)
{
  short psImageHeight;
  this->get_ImageHeight((short*)&psImageHeight);
  return psImageHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::set_ImageHeight(short psImageHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageHeight"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = psImageHeight /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::get_ImageWidth(short* psImageWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageWidth"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psImageWidth /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IImageListDispT<T>::get_ImageWidth(void)
{
  short psImageWidth;
  this->get_ImageWidth((short*)&psImageWidth);
  return psImageWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::set_ImageWidth(short psImageWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageWidth"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = psImageWidth /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::get_MaskColor(::OLE_COLOR* pclrMaskColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaskColor"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pclrMaskColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IImageListDispT<T>::get_MaskColor(void)
{
  ::OLE_COLOR pclrMaskColor;
  this->get_MaskColor((::OLE_COLOR*)&pclrMaskColor);
  return pclrMaskColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::set_MaskColor(::OLE_COLOR pclrMaskColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaskColor"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pclrMaskColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::get_UseMaskColor(VARIANT_BOOL* pbState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseMaskColor"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbState /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IImageListDispT<T>::get_UseMaskColor(void)
{
  VARIANT_BOOL pbState;
  this->get_UseMaskColor((VARIANT_BOOL*)&pbState);
  return pbState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::set_UseMaskColor(VARIANT_BOOL pbState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseMaskColor"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pbState /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::get_ListImages(Mscomctllib_xp::IImages** ppListImages/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListImages"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IImages**)ppListImages /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IImages* __fastcall
IImageListDispT<T>::get_ListImages(void)
{
  Mscomctllib_xp::IImages* ppListImages;
  this->get_ListImages((Mscomctllib_xp::IImages**)&ppListImages);
  return ppListImages;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::_set_ListImages(Mscomctllib_xp::IImages* ppListImages/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListImages"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IImages*)ppListImages /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::get_hImageList(OLE_HANDLE* phImageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hImageList"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phImageList /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_HANDLE __fastcall
IImageListDispT<T>::get_hImageList(void)
{
  OLE_HANDLE phImageList;
  this->get_hImageList((OLE_HANDLE*)&phImageList);
  return phImageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::set_hImageList(OLE_HANDLE phImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hImageList"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = phImageList /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::get_BackColor(::OLE_COLOR* pclrBackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pclrBackColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IImageListDispT<T>::get_BackColor(void)
{
  ::OLE_COLOR pclrBackColor;
  this->get_BackColor((::OLE_COLOR*)&pclrBackColor);
  return pclrBackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::set_BackColor(::OLE_COLOR pclrBackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = pclrBackColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::Overlay(VARIANT* Key1/*[in]*/, VARIANT* Key2/*[in]*/, 
                            IPictureDisp** ppPictureDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Overlay"), DISPID(6));
  TAutoArgs<2> _args;
  _args[1] = Key1 /*[VT_VARIANT:1]*/;
  _args[2] = Key2 /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppPictureDisp /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IImageListDispT<T>::Overlay(VARIANT* Key1/*[in]*/, VARIANT* Key2/*[in]*/)
{
  IPictureDisp* ppPictureDisp;
  this->Overlay(Key1, Key2, (IPictureDisp**)&ppPictureDisp);
  return ppPictureDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageListDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  ImageListEvents
// Flags:     (4096) Dispatchable
// GUID:      {2C247F22-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOMIImages
// Interface: IImages
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIImagesT<T>::get_Count(short* psCount/*[out,retval]*/)
{
  return (*this)->get_Count(psCount);
}

template <class T> short __fastcall
TCOMIImagesT<T>::get_Count(void)
{
  short psCount;
  OLECHECK(this->get_Count((short*)&psCount));
  return psCount;
}

template <class T> HRESULT __fastcall
TCOMIImagesT<T>::set_Count(short psCount/*[in]*/)
{
  return (*this)->set_Count(psCount);
}

template <class T> HRESULT __fastcall
TCOMIImagesT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                    Mscomctllib_xp::IImage** ppListImage/*[out,retval]*/)
{
  return (*this)->get_ControlDefault(Index, ppListImage);
}

template <class T> Mscomctllib_xp::IImage* __fastcall
TCOMIImagesT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IImage* ppListImage;
  OLECHECK(this->get_ControlDefault(, (Mscomctllib_xp::IImage**)&ppListImage));
  return ppListImage;
}

template <class T> HRESULT __fastcall
TCOMIImagesT<T>::_set_ControlDefault(VARIANT* Index/*[in]*/, 
                                     Mscomctllib_xp::IImage* ppListImage/*[in]*/)
{
  return (*this)->_set_ControlDefault(Index, ppListImage);
}

template <class T> HRESULT __fastcall
TCOMIImagesT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                     VARIANT* Picture/*[in,opt]*/, 
                     Mscomctllib_xp::IImage** ppListImage/*[out,retval]*/)
{
  return (*this)->Add(Index, Key, Picture, ppListImage);
}

template <class T> Mscomctllib_xp::IImage* __fastcall
TCOMIImagesT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                     VARIANT* Picture/*[in,opt]*/)
{
  Mscomctllib_xp::IImage* ppListImage;
  OLECHECK(this->Add(, (Mscomctllib_xp::IImage**)&ppListImage));
  return ppListImage;
}

template <class T> HRESULT __fastcall
TCOMIImagesT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIImagesT<T>::get_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IImage** Item/*[out,retval]*/)
{
  return (*this)->get_Item(Index, Item);
}

template <class T> Mscomctllib_xp::IImage* __fastcall
TCOMIImagesT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IImage* Item;
  OLECHECK(this->get_Item(, (Mscomctllib_xp::IImage**)&Item));
  return Item;
}

template <class T> HRESULT __fastcall
TCOMIImagesT<T>::_set_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IImage* Item/*[in]*/)
{
  return (*this)->_set_Item(Index, Item);
}

template <class T> HRESULT __fastcall
TCOMIImagesT<T>::Remove(VARIANT* Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIImagesT<T>::_NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppNewEnum);
}

template <class T> LPDISPATCH __fastcall
TCOMIImagesT<T>::_NewEnum(void)
{
  LPDISPATCH ppNewEnum;
  OLECHECK(this->_NewEnum((LPDISPATCH*)&ppNewEnum));
  return ppNewEnum;
}

// *********************************************************************//
// DispIntf:  IImages
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C247F24-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImagesDispT<T>::get_Count(short* psCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psCount /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IImagesDispT<T>::get_Count(void)
{
  short psCount;
  this->get_Count((short*)&psCount);
  return psCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImagesDispT<T>::set_Count(short psCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = psCount /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImagesDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/, 
                                    Mscomctllib_xp::IImage** ppListImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IImage**)ppListImage /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IImage* __fastcall
IImagesDispT<T>::get_ControlDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IImage* ppListImage;
  this->get_ControlDefault(Index, (Mscomctllib_xp::IImage**)&ppListImage);
  return ppListImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImagesDispT<T>::_set_ControlDefault(VARIANT* Index/*[in]*/, 
                                     Mscomctllib_xp::IImage* ppListImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlDefault"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::IImage*)ppListImage /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImagesDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                     VARIANT* Picture/*[in,opt]*/, 
                     Mscomctllib_xp::IImage** ppListImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = Key /*[VT_VARIANT:1]*/;
  _args[3] = Picture /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IImage**)ppListImage /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IImage* __fastcall
IImagesDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                     VARIANT* Picture/*[in,opt]*/)
{
  Mscomctllib_xp::IImage* ppListImage;
  this->Add(Index, Key, Picture, (Mscomctllib_xp::IImage**)&ppListImage);
  return ppListImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImagesDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImagesDispT<T>::get_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IImage** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IImage**)Item /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IImage* __fastcall
IImagesDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IImage* Item;
  this->get_Item(Index, (Mscomctllib_xp::IImage**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImagesDispT<T>::_set_Item(VARIANT* Index/*[in]*/, Mscomctllib_xp::IImage* Item/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::IImage*)Item /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImagesDispT<T>::Remove(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImagesDispT<T>::_NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppNewEnum /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IImagesDispT<T>::_NewEnum(void)
{
  LPDISPATCH ppNewEnum;
  this->_NewEnum((LPDISPATCH*)&ppNewEnum);
  return ppNewEnum;
}

// *********************************************************************//
// SmartIntf: TCOMIImage
// Interface: IImage
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_Index(short* psIndex/*[out,retval]*/)
{
  return (*this)->get_Index(psIndex);
}

template <class T> short __fastcall
TCOMIImageT<T>::get_Index(void)
{
  short psIndex;
  OLECHECK(this->get_Index((short*)&psIndex));
  return psIndex;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_Index(short psIndex/*[in]*/)
{
  return (*this)->set_Index(psIndex);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  return (*this)->get_Key(pbstrKey);
}

template <class T> BSTR __fastcall
TCOMIImageT<T>::get_Key(void)
{
  BSTR pbstrKey = 0;
  OLECHECK(this->get_Key((BSTR*)&pbstrKey));
  return pbstrKey;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  return (*this)->set_Key(pbstrKey);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  return (*this)->get_Tag(pvTag);
}

template <class T> VARIANT __fastcall
TCOMIImageT<T>::get_Tag(void)
{
  VARIANT pvTag;
  OLECHECK(this->get_Tag((VARIANT*)&pvTag));
  return pvTag;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::get_Picture(IPictureDisp** ppPictureDisp/*[out,retval]*/)
{
  return (*this)->get_Picture(ppPictureDisp);
}

template <class T> IPictureDisp* __fastcall
TCOMIImageT<T>::get_Picture(void)
{
  IPictureDisp* ppPictureDisp;
  OLECHECK(this->get_Picture((IPictureDisp**)&ppPictureDisp));
  return ppPictureDisp;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::_set_Picture(IPictureDisp* ppPictureDisp/*[in]*/)
{
  return (*this)->_set_Picture(ppPictureDisp);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::Draw(OLE_HANDLE hDC/*[in]*/, VARIANT* x/*[in,opt]*/, VARIANT* y/*[in,opt]*/, 
                     VARIANT* Style/*[in,opt]*/)
{
  return (*this)->Draw(hDC, x, y, Style);
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::ExtractIcon(IPictureDisp** ppIconDisp/*[out,retval]*/)
{
  return (*this)->ExtractIcon(ppIconDisp);
}

template <class T> IPictureDisp* __fastcall
TCOMIImageT<T>::ExtractIcon(void)
{
  IPictureDisp* ppIconDisp;
  OLECHECK(this->ExtractIcon((IPictureDisp**)&ppIconDisp));
  return ppIconDisp;
}

template <class T> HRESULT __fastcall
TCOMIImageT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->_set_Tag(pvTag);
}

// *********************************************************************//
// DispIntf:  IImage
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2C247F26-8591-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_Index(short* psIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psIndex /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IImageDispT<T>::get_Index(void)
{
  short psIndex;
  this->get_Index((short*)&psIndex);
  return psIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_Index(short psIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = psIndex /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IImageDispT<T>::get_Key(void)
{
  BSTR pbstrKey;
  this->get_Key((BSTR*)&pbstrKey);
  return pbstrKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pbstrKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvTag /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IImageDispT<T>::get_Tag(void)
{
  VARIANT pvTag;
  this->get_Tag((VARIANT*)&pvTag);
  return pvTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::get_Picture(IPictureDisp** ppPictureDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppPictureDisp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IImageDispT<T>::get_Picture(void)
{
  IPictureDisp* ppPictureDisp;
  this->get_Picture((IPictureDisp**)&ppPictureDisp);
  return ppPictureDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::_set_Picture(IPictureDisp* ppPictureDisp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppPictureDisp /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::Draw(OLE_HANDLE hDC/*[in]*/, VARIANT* x/*[in,opt]*/, VARIANT* y/*[in,opt]*/, 
                     VARIANT* Style/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Draw"), DISPID(4));
  TAutoArgs<4> _args;
  _args[1] = hDC /*[VT_INT:0]*/;
  _args[2] = x /*[VT_VARIANT:1]*/;
  _args[3] = y /*[VT_VARIANT:1]*/;
  _args[4] = Style /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::ExtractIcon(IPictureDisp** ppIconDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtractIcon"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppIconDisp /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IImageDispT<T>::ExtractIcon(void)
{
  IPictureDisp* ppIconDisp;
  this->ExtractIcon((IPictureDisp**)&ppIconDisp);
  return ppIconDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageDispT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMISlider
// Interface: ISlider
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISliderT<T>::get__Value(long* plValue/*[out,retval]*/)
{
  return (*this)->get__Value(plValue);
}

template <class T> long __fastcall
TCOMISliderT<T>::get__Value(void)
{
  long plValue;
  OLECHECK(this->get__Value((long*)&plValue));
  return plValue;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set__Value(long plValue/*[in]*/)
{
  return (*this)->set__Value(plValue);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_LargeChange(long* plLargeChange/*[out,retval]*/)
{
  return (*this)->get_LargeChange(plLargeChange);
}

template <class T> long __fastcall
TCOMISliderT<T>::get_LargeChange(void)
{
  long plLargeChange;
  OLECHECK(this->get_LargeChange((long*)&plLargeChange));
  return plLargeChange;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_LargeChange(long plLargeChange/*[in]*/)
{
  return (*this)->set_LargeChange(plLargeChange);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_SmallChange(long* plSmallChange/*[out,retval]*/)
{
  return (*this)->get_SmallChange(plSmallChange);
}

template <class T> long __fastcall
TCOMISliderT<T>::get_SmallChange(void)
{
  long plSmallChange;
  OLECHECK(this->get_SmallChange((long*)&plSmallChange));
  return plSmallChange;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_SmallChange(long plSmallChange/*[in]*/)
{
  return (*this)->set_SmallChange(plSmallChange);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_Max(long* plMax/*[out,retval]*/)
{
  return (*this)->get_Max(plMax);
}

template <class T> long __fastcall
TCOMISliderT<T>::get_Max(void)
{
  long plMax;
  OLECHECK(this->get_Max((long*)&plMax));
  return plMax;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_Max(long plMax/*[in]*/)
{
  return (*this)->set_Max(plMax);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_Min(long* plMin/*[out,retval]*/)
{
  return (*this)->get_Min(plMin);
}

template <class T> long __fastcall
TCOMISliderT<T>::get_Min(void)
{
  long plMin;
  OLECHECK(this->get_Min((long*)&plMin));
  return plMin;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_Min(long plMin/*[in]*/)
{
  return (*this)->set_Min(plMin);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_Orientation(Mscomctllib_xp::OrientationConstants* pOrientation/*[out,retval]*/)
{
  return (*this)->get_Orientation(pOrientation);
}

template <class T> Mscomctllib_xp::OrientationConstants __fastcall
TCOMISliderT<T>::get_Orientation(void)
{
  Mscomctllib_xp::OrientationConstants pOrientation;
  OLECHECK(this->get_Orientation((Mscomctllib_xp::OrientationConstants*)&pOrientation));
  return pOrientation;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_Orientation(Mscomctllib_xp::OrientationConstants pOrientation/*[in]*/)
{
  return (*this)->set_Orientation(pOrientation);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_SelectRange(VARIANT_BOOL* pbSelectRange/*[out,retval]*/)
{
  return (*this)->get_SelectRange(pbSelectRange);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_SelectRange(TOLEBOOL* pbSelectRange/*[out,retval]*/)
{
  return (*this)->get_SelectRange(VARIANT_BOOL*)pbSelectRange);
}

template <class T> TOLEBOOL __fastcall
TCOMISliderT<T>::get_SelectRange(void)
{
  VARIANT_BOOL pbSelectRange;
  OLECHECK(this->get_SelectRange((VARIANT_BOOL*)&pbSelectRange));
  return (TOLEBOOL)pbSelectRange;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_SelectRange(VARIANT_BOOL pbSelectRange/*[in]*/)
{
  return (*this)->set_SelectRange(pbSelectRange);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_SelectRange(TOLEBOOL pbSelectRange/*[in]*/)
{
  return (*this)->set_SelectRange(VARIANT_BOOL)pbSelectRange);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_SelStart(long* plSelStart/*[out,retval]*/)
{
  return (*this)->get_SelStart(plSelStart);
}

template <class T> long __fastcall
TCOMISliderT<T>::get_SelStart(void)
{
  long plSelStart;
  OLECHECK(this->get_SelStart((long*)&plSelStart));
  return plSelStart;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_SelStart(long plSelStart/*[in]*/)
{
  return (*this)->set_SelStart(plSelStart);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_SelLength(long* plSelLength/*[out,retval]*/)
{
  return (*this)->get_SelLength(plSelLength);
}

template <class T> long __fastcall
TCOMISliderT<T>::get_SelLength(void)
{
  long plSelLength;
  OLECHECK(this->get_SelLength((long*)&plSelLength));
  return plSelLength;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_SelLength(long plSelLength/*[in]*/)
{
  return (*this)->set_SelLength(plSelLength);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_TickStyle(Mscomctllib_xp::TickStyleConstants* pTickStyle/*[out,retval]*/)
{
  return (*this)->get_TickStyle(pTickStyle);
}

template <class T> Mscomctllib_xp::TickStyleConstants __fastcall
TCOMISliderT<T>::get_TickStyle(void)
{
  Mscomctllib_xp::TickStyleConstants pTickStyle;
  OLECHECK(this->get_TickStyle((Mscomctllib_xp::TickStyleConstants*)&pTickStyle));
  return pTickStyle;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_TickStyle(Mscomctllib_xp::TickStyleConstants pTickStyle/*[in]*/)
{
  return (*this)->set_TickStyle(pTickStyle);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_TickFrequency(long* plTickFrequency/*[out,retval]*/)
{
  return (*this)->get_TickFrequency(plTickFrequency);
}

template <class T> long __fastcall
TCOMISliderT<T>::get_TickFrequency(void)
{
  long plTickFrequency;
  OLECHECK(this->get_TickFrequency((long*)&plTickFrequency));
  return plTickFrequency;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_TickFrequency(long plTickFrequency/*[in]*/)
{
  return (*this)->set_TickFrequency(plTickFrequency);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_Value(long* plValue/*[out,retval]*/)
{
  return (*this)->get_Value(plValue);
}

template <class T> long __fastcall
TCOMISliderT<T>::get_Value(void)
{
  long plValue;
  OLECHECK(this->get_Value((long*)&plValue));
  return plValue;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_Value(long plValue/*[in]*/)
{
  return (*this)->set_Value(plValue);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(ppMouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMISliderT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
  return ppMouseIcon;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(psMousePointer);
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
TCOMISliderT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants psMousePointer;
  OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer));
  return psMousePointer;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(psMousePointer);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pbEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMISliderT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
  return (TOLEBOOL)pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_Enabled(TOLEBOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  return (*this)->get_hWnd(phWnd);
}

template <class T> OLE_HANDLE __fastcall
TCOMISliderT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
  return phWnd;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  return (*this)->set_hWnd(phWnd);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(psBorderStyle);
}

template <class T> Mscomctllib_xp::BorderStyleConstants __fastcall
TCOMISliderT<T>::get_BorderStyle(void)
{
  Mscomctllib_xp::BorderStyleConstants psBorderStyle;
  OLECHECK(this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&psBorderStyle));
  return psBorderStyle;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/)
{
  return (*this)->set_BorderStyle(psBorderStyle);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  return (*this)->get_OLEDropMode(psOLEDropMode);
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
TCOMISliderT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
  return psOLEDropMode;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  return (*this)->set_OLEDropMode(psOLEDropMode);
}

template <class T> void __fastcall
TCOMISliderT<T>::Refresh(void)
{
  (*this)->Refresh();
}

template <class T> void __fastcall
TCOMISliderT<T>::ClearSel(void)
{
  (*this)->ClearSel();
}

template <class T> void __fastcall
TCOMISliderT<T>::DoClick(void)
{
  (*this)->DoClick();
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_GetNumTicks(long* plNumTicks/*[out,retval]*/)
{
  return (*this)->get_GetNumTicks(plNumTicks);
}

template <class T> long __fastcall
TCOMISliderT<T>::get_GetNumTicks(void)
{
  long plNumTicks;
  OLECHECK(this->get_GetNumTicks((long*)&plNumTicks));
  return plNumTicks;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::OLEDrag(void)
{
  return (*this)->OLEDrag();
}

template <class T> void __fastcall
TCOMISliderT<T>::AboutBox(void)
{
  (*this)->AboutBox();
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Text(pbstrText);
}

template <class T> BSTR __fastcall
TCOMISliderT<T>::get_Text(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Text((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Text(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::get_TextPosition(Mscomctllib_xp::TextPositionConstants* penumTextPosition/*[out,retval]*/)
{
  return (*this)->get_TextPosition(penumTextPosition);
}

template <class T> Mscomctllib_xp::TextPositionConstants __fastcall
TCOMISliderT<T>::get_TextPosition(void)
{
  Mscomctllib_xp::TextPositionConstants penumTextPosition;
  OLECHECK(this->get_TextPosition((Mscomctllib_xp::TextPositionConstants*)&penumTextPosition));
  return penumTextPosition;
}

template <class T> HRESULT __fastcall
TCOMISliderT<T>::set_TextPosition(Mscomctllib_xp::TextPositionConstants penumTextPosition/*[in]*/)
{
  return (*this)->set_TextPosition(penumTextPosition);
}

// *********************************************************************//
// DispIntf:  ISlider
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F08DF952-8592-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get__Value(long* plValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plValue /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISliderDispT<T>::get__Value(void)
{
  long plValue;
  this->get__Value((long*)&plValue);
  return plValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set__Value(long plValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = plValue /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_LargeChange(long* plLargeChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeChange"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plLargeChange /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISliderDispT<T>::get_LargeChange(void)
{
  long plLargeChange;
  this->get_LargeChange((long*)&plLargeChange);
  return plLargeChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_LargeChange(long plLargeChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeChange"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = plLargeChange /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_SmallChange(long* plSmallChange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallChange"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plSmallChange /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISliderDispT<T>::get_SmallChange(void)
{
  long plSmallChange;
  this->get_SmallChange((long*)&plSmallChange);
  return plSmallChange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_SmallChange(long plSmallChange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SmallChange"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = plSmallChange /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_Max(long* plMax/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Max"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMax /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISliderDispT<T>::get_Max(void)
{
  long plMax;
  this->get_Max((long*)&plMax);
  return plMax;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_Max(long plMax/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Max"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = plMax /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_Min(long* plMin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Min"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMin /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISliderDispT<T>::get_Min(void)
{
  long plMin;
  this->get_Min((long*)&plMin);
  return plMin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_Min(long plMin/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Min"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = plMin /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_Orientation(Mscomctllib_xp::OrientationConstants* pOrientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pOrientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OrientationConstants __fastcall
ISliderDispT<T>::get_Orientation(void)
{
  Mscomctllib_xp::OrientationConstants pOrientation;
  this->get_Orientation((Mscomctllib_xp::OrientationConstants*)&pOrientation);
  return pOrientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_Orientation(Mscomctllib_xp::OrientationConstants pOrientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)pOrientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_SelectRange(VARIANT_BOOL* pbSelectRange/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectRange"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSelectRange /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISliderDispT<T>::get_SelectRange(void)
{
  VARIANT_BOOL pbSelectRange;
  this->get_SelectRange((VARIANT_BOOL*)&pbSelectRange);
  return pbSelectRange;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_SelectRange(VARIANT_BOOL pbSelectRange/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectRange"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbSelectRange /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_SelStart(long* plSelStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plSelStart /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISliderDispT<T>::get_SelStart(void)
{
  long plSelStart;
  this->get_SelStart((long*)&plSelStart);
  return plSelStart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_SelStart(long plSelStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = plSelStart /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_SelLength(long* plSelLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plSelLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISliderDispT<T>::get_SelLength(void)
{
  long plSelLength;
  this->get_SelLength((long*)&plSelLength);
  return plSelLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_SelLength(long plSelLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = plSelLength /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_TickStyle(Mscomctllib_xp::TickStyleConstants* pTickStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pTickStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::TickStyleConstants __fastcall
ISliderDispT<T>::get_TickStyle(void)
{
  Mscomctllib_xp::TickStyleConstants pTickStyle;
  this->get_TickStyle((Mscomctllib_xp::TickStyleConstants*)&pTickStyle);
  return pTickStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_TickStyle(Mscomctllib_xp::TickStyleConstants pTickStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = (int)pTickStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_TickFrequency(long* plTickFrequency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickFrequency"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plTickFrequency /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISliderDispT<T>::get_TickFrequency(void)
{
  long plTickFrequency;
  this->get_TickFrequency((long*)&plTickFrequency);
  return plTickFrequency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_TickFrequency(long plTickFrequency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickFrequency"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = plTickFrequency /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_Value(long* plValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plValue /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISliderDispT<T>::get_Value(void)
{
  long plValue;
  this->get_Value((long*)&plValue);
  return plValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_Value(long plValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = plValue /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppMouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
ISliderDispT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  this->get_MouseIcon((IPictureDisp**)&ppMouseIcon);
  return ppMouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* psMousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psMousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
ISliderDispT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants psMousePointer;
  this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&psMousePointer);
  return psMousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants psMousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)psMousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ISliderDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phWnd /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_HANDLE __fastcall
ISliderDispT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  this->get_hWnd((OLE_HANDLE*)&phWnd);
  return phWnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<1> _args;
  _args[1] = phWnd /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_BorderStyle(Mscomctllib_xp::BorderStyleConstants* psBorderStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psBorderStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::BorderStyleConstants __fastcall
ISliderDispT<T>::get_BorderStyle(void)
{
  Mscomctllib_xp::BorderStyleConstants psBorderStyle;
  this->get_BorderStyle((Mscomctllib_xp::BorderStyleConstants*)&psBorderStyle);
  return psBorderStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_BorderStyle(Mscomctllib_xp::BorderStyleConstants psBorderStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int)psBorderStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDropMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
ISliderDispT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode);
  return psOLEDropMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDropMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderDispT<T>::ClearSel()
{
  _TDispID _dispid(*this, OLETEXT("ClearSel"), DISPID(14));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderDispT<T>::DoClick()
{
  _TDispID _dispid(*this, OLETEXT("DoClick"), DISPID(-551));
  OleProcedure(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_GetNumTicks(long* plNumTicks/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNumTicks"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plNumTicks /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ISliderDispT<T>::get_GetNumTicks(void)
{
  long plNumTicks;
  this->get_GetNumTicks((long*)&plNumTicks);
  return plNumTicks;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::OLEDrag()
{
  _TDispID _dispid(*this, OLETEXT("OLEDrag"), DISPID(1552));
  return OleFunction(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  OleProcedure(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ISliderDispT<T>::get_Text(void)
{
  BSTR pbstrText;
  this->get_Text((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::get_TextPosition(Mscomctllib_xp::TextPositionConstants* penumTextPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextPosition"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumTextPosition /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::TextPositionConstants __fastcall
ISliderDispT<T>::get_TextPosition(void)
{
  Mscomctllib_xp::TextPositionConstants penumTextPosition;
  this->get_TextPosition((Mscomctllib_xp::TextPositionConstants*)&penumTextPosition);
  return penumTextPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ISliderDispT<T>::set_TextPosition(Mscomctllib_xp::TextPositionConstants penumTextPosition/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextPosition"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (int)penumTextPosition /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ISliderEvents
// Flags:     (4096) Dispatchable
// GUID:      {F08DF953-8592-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::KeyDown(short* KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::KeyPress(short* KeyAscii)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = KeyAscii /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::KeyUp(short* KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::Scroll()
{
  _TDispID _dispid(/* Scroll */ DISPID(1));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                    long* AllowedEffects/*[in,out]*/)
{
  _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = AllowedEffects /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                       VARIANT_BOOL* DefaultCursors/*[in,out]*/)
{
  _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
  TAutoArgs<2> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                  short* DataFormat/*[in,out]*/)
{
  _TDispID _dispid(/* OLESetData */ DISPID(1552));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = DataFormat /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::OLECompleteDrag(long* Effect/*[in,out]*/)
{
  _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
  TAutoArgs<1> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                   long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                   short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                   float* y/*[in,out]*/, short* State/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  _args[7] = State /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
ISliderEventsDispT<T>::OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                   long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                   short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                   float* y/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
  TAutoArgs<6> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIControls
// Interface: IControls
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIControlsT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  return (*this)->get_Count(plCount);
}

template <class T> long __fastcall
TCOMIControlsT<T>::get_Count(void)
{
  long plCount;
  OLECHECK(this->get_Count((long*)&plCount));
  return plCount;
}

template <class T> HRESULT __fastcall
TCOMIControlsT<T>::get_Item(long Index/*[in]*/, LPDISPATCH* ppDisp/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppDisp);
}

template <class T> LPDISPATCH __fastcall
TCOMIControlsT<T>::get_Item(long Index/*[in]*/)
{
  LPDISPATCH ppDisp;
  OLECHECK(this->get_Item(, (LPDISPATCH*)&ppDisp));
  return ppDisp;
}

template <class T> HRESULT __fastcall
TCOMIControlsT<T>::_NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppUnk);
}

template <class T> LPUNKNOWN __fastcall
TCOMIControlsT<T>::_NewEnum(void)
{
  LPUNKNOWN ppUnk;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppUnk));
  return ppUnk;
}

// *********************************************************************//
// DispIntf:  IControls
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8A3DC00-8593-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlsDispT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IControlsDispT<T>::get_Count(void)
{
  long plCount;
  this->get_Count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlsDispT<T>::get_Item(long Index/*[in]*/, LPDISPATCH* ppDisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(ppDisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IControlsDispT<T>::get_Item(long Index/*[in]*/)
{
  LPDISPATCH ppDisp;
  this->get_Item(Index, (LPDISPATCH*)&ppDisp);
  return ppDisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IControlsDispT<T>::_NewEnum(LPUNKNOWN* ppUnk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppUnk /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IControlsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppUnk;
  this->_NewEnum((LPUNKNOWN*)&ppUnk);
  return ppUnk;
}

// *********************************************************************//
// SmartIntf: TCOMIComboItem
// Interface: IComboItem
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get__ObjectDefault(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIComboItemT<T>::get__ObjectDefault(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get__ObjectDefault((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::set__ObjectDefault(BSTR pbstrText/*[in]*/)
{
  return (*this)->set__ObjectDefault(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::get_Image(VARIANT* pvImage/*[out,retval]*/)
{
  return (*this)->get_Image(pvImage);
}

template <class T> VARIANT __fastcall
TCOMIComboItemT<T>::get_Image(void)
{
  VARIANT pvImage;
  OLECHECK(this->get_Image((VARIANT*)&pvImage));
  return pvImage;
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::set_Image(VARIANT pvImage/*[in]*/)
{
  return (*this)->set_Image(pvImage);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::get_Indentation(short* psIndent/*[out,retval]*/)
{
  return (*this)->get_Indentation(psIndent);
}

template <class T> short __fastcall
TCOMIComboItemT<T>::get_Indentation(void)
{
  short psIndent;
  OLECHECK(this->get_Indentation((short*)&psIndent));
  return psIndent;
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::set_Indentation(short psIndent/*[in]*/)
{
  return (*this)->set_Indentation(psIndent);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::get_Index(long* plIndex/*[out,retval]*/)
{
  return (*this)->get_Index(plIndex);
}

template <class T> long __fastcall
TCOMIComboItemT<T>::get_Index(void)
{
  long plIndex;
  OLECHECK(this->get_Index((long*)&plIndex));
  return plIndex;
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::set_Index(long plIndex/*[in]*/)
{
  return (*this)->set_Index(plIndex);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  return (*this)->get_Key(pbstrKey);
}

template <class T> BSTR __fastcall
TCOMIComboItemT<T>::get_Key(void)
{
  BSTR pbstrKey = 0;
  OLECHECK(this->get_Key((BSTR*)&pbstrKey));
  return pbstrKey;
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  return (*this)->set_Key(pbstrKey);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/)
{
  return (*this)->get_Selected(pbSelected);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::get_Selected(TOLEBOOL* pbSelected/*[out,retval]*/)
{
  return (*this)->get_Selected(VARIANT_BOOL*)pbSelected);
}

template <class T> TOLEBOOL __fastcall
TCOMIComboItemT<T>::get_Selected(void)
{
  VARIANT_BOOL pbSelected;
  OLECHECK(this->get_Selected((VARIANT_BOOL*)&pbSelected));
  return (TOLEBOOL)pbSelected;
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::set_Selected(VARIANT_BOOL pbSelected/*[in]*/)
{
  return (*this)->set_Selected(pbSelected);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::set_Selected(TOLEBOOL pbSelected/*[in]*/)
{
  return (*this)->set_Selected(VARIANT_BOOL)pbSelected);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::get_SelImage(VARIANT* pvImage/*[out,retval]*/)
{
  return (*this)->get_SelImage(pvImage);
}

template <class T> VARIANT __fastcall
TCOMIComboItemT<T>::get_SelImage(void)
{
  VARIANT pvImage;
  OLECHECK(this->get_SelImage((VARIANT*)&pvImage));
  return pvImage;
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::set_SelImage(VARIANT pvImage/*[in]*/)
{
  return (*this)->set_SelImage(pvImage);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  return (*this)->get_Tag(pvTag);
}

template <class T> VARIANT __fastcall
TCOMIComboItemT<T>::get_Tag(void)
{
  VARIANT pvTag;
  OLECHECK(this->get_Tag((VARIANT*)&pvTag));
  return pvTag;
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  return (*this)->_set_Tag(pvTag);
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Text(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIComboItemT<T>::get_Text(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Text((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIComboItemT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Text(pbstrText);
}

// *********************************************************************//
// DispIntf:  IComboItem
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD9DA660-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::get__ObjectDefault(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IComboItemDispT<T>::get__ObjectDefault(void)
{
  BSTR pbstrText;
  this->get__ObjectDefault((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::set__ObjectDefault(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_ObjectDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::get_Image(VARIANT* pvImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvImage /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IComboItemDispT<T>::get_Image(void)
{
  VARIANT pvImage;
  this->get_Image((VARIANT*)&pvImage);
  return pvImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::set_Image(VARIANT pvImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Image"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = pvImage /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::get_Indentation(short* psIndent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Indentation"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psIndent /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IComboItemDispT<T>::get_Indentation(void)
{
  short psIndent;
  this->get_Indentation((short*)&psIndent);
  return psIndent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::set_Indentation(short psIndent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Indentation"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = psIndent /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::get_Index(long* plIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plIndex /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IComboItemDispT<T>::get_Index(void)
{
  long plIndex;
  this->get_Index((long*)&plIndex);
  return plIndex;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::set_Index(long plIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = plIndex /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::get_Key(BSTR* pbstrKey/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrKey /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IComboItemDispT<T>::get_Key(void)
{
  BSTR pbstrKey;
  this->get_Key((BSTR*)&pbstrKey);
  return pbstrKey;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::set_Key(BSTR pbstrKey/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pbstrKey /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::get_Selected(VARIANT_BOOL* pbSelected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbSelected /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IComboItemDispT<T>::get_Selected(void)
{
  VARIANT_BOOL pbSelected;
  this->get_Selected((VARIANT_BOOL*)&pbSelected);
  return pbSelected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::set_Selected(VARIANT_BOOL pbSelected/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pbSelected /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::get_SelImage(VARIANT* pvImage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelImage"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvImage /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IComboItemDispT<T>::get_SelImage(void)
{
  VARIANT pvImage;
  this->get_SelImage((VARIANT*)&pvImage);
  return pvImage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::set_SelImage(VARIANT pvImage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelImage"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pvImage /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::get_Tag(VARIANT* pvTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvTag /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IComboItemDispT<T>::get_Tag(void)
{
  VARIANT pvTag;
  this->get_Tag((VARIANT*)&pvTag);
  return pvTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::_set_Tag(VARIANT pvTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pvTag /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IComboItemDispT<T>::get_Text(void)
{
  BSTR pbstrText;
  this->get_Text((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemDispT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIComboItems
// Interface: IComboItems
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIComboItemsT<T>::get__CollectionDefault(VARIANT* Index/*[in]*/, 
                                            Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/)
{
  return (*this)->get__CollectionDefault(Index, ppComboItem);
}

template <class T> Mscomctllib_xp::IComboItem* __fastcall
TCOMIComboItemsT<T>::get__CollectionDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IComboItem* ppComboItem;
  OLECHECK(this->get__CollectionDefault(, (Mscomctllib_xp::IComboItem**)&ppComboItem));
  return ppComboItem;
}

template <class T> HRESULT __fastcall
TCOMIComboItemsT<T>::set__CollectionDefault(VARIANT* Index/*[in]*/, 
                                            Mscomctllib_xp::IComboItem* ppComboItem/*[in]*/)
{
  return (*this)->set__CollectionDefault(Index, ppComboItem);
}

template <class T> HRESULT __fastcall
TCOMIComboItemsT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  return (*this)->get_Count(plCount);
}

template <class T> long __fastcall
TCOMIComboItemsT<T>::get_Count(void)
{
  long plCount;
  OLECHECK(this->get_Count((long*)&plCount));
  return plCount;
}

template <class T> HRESULT __fastcall
TCOMIComboItemsT<T>::set_Count(long plCount/*[in]*/)
{
  return (*this)->set_Count(plCount);
}

template <class T> HRESULT __fastcall
TCOMIComboItemsT<T>::get_Item(VARIANT* Index/*[in]*/, 
                              Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppComboItem);
}

template <class T> Mscomctllib_xp::IComboItem* __fastcall
TCOMIComboItemsT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IComboItem* ppComboItem;
  OLECHECK(this->get_Item(, (Mscomctllib_xp::IComboItem**)&ppComboItem));
  return ppComboItem;
}

template <class T> HRESULT __fastcall
TCOMIComboItemsT<T>::set_Item(VARIANT* Index/*[in]*/, 
                              Mscomctllib_xp::IComboItem* ppComboItem/*[in]*/)
{
  return (*this)->set_Item(Index, ppComboItem);
}

template <class T> HRESULT __fastcall
TCOMIComboItemsT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                         VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                         VARIANT* SelImage/*[in,opt]*/, VARIANT* Indentation/*[in,opt]*/, 
                         Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/)
{
  return (*this)->Add(Index, Key, Text, Image, SelImage, Indentation, ppComboItem);
}

template <class T> Mscomctllib_xp::IComboItem* __fastcall
TCOMIComboItemsT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                         VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                         VARIANT* SelImage/*[in,opt]*/, VARIANT* Indentation/*[in,opt]*/)
{
  Mscomctllib_xp::IComboItem* ppComboItem;
  OLECHECK(this->Add(, (Mscomctllib_xp::IComboItem**)&ppComboItem));
  return ppComboItem;
}

template <class T> HRESULT __fastcall
TCOMIComboItemsT<T>::Clear(void)
{
  return (*this)->Clear();
}

template <class T> HRESULT __fastcall
TCOMIComboItemsT<T>::Remove(VARIANT* Index/*[in]*/)
{
  return (*this)->Remove(Index);
}

template <class T> HRESULT __fastcall
TCOMIComboItemsT<T>::_NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppNewEnum);
}

template <class T> LPDISPATCH __fastcall
TCOMIComboItemsT<T>::_NewEnum(void)
{
  LPDISPATCH ppNewEnum;
  OLECHECK(this->_NewEnum((LPDISPATCH*)&ppNewEnum));
  return ppNewEnum;
}

// *********************************************************************//
// DispIntf:  IComboItems
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD9DA662-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemsDispT<T>::get__CollectionDefault(VARIANT* Index/*[in]*/, 
                                            Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_CollectionDefault"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IComboItem**)ppComboItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IComboItem* __fastcall
IComboItemsDispT<T>::get__CollectionDefault(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IComboItem* ppComboItem;
  this->get__CollectionDefault(Index, (Mscomctllib_xp::IComboItem**)&ppComboItem);
  return ppComboItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemsDispT<T>::set__CollectionDefault(VARIANT* Index/*[in]*/, 
                                            Mscomctllib_xp::IComboItem* ppComboItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("_CollectionDefault"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::IComboItem*)ppComboItem /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemsDispT<T>::get_Count(long* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IComboItemsDispT<T>::get_Count(void)
{
  long plCount;
  this->get_Count((long*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemsDispT<T>::set_Count(long plCount/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = plCount /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemsDispT<T>::get_Item(VARIANT* Index/*[in]*/, 
                              Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IComboItem**)ppComboItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IComboItem* __fastcall
IComboItemsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Mscomctllib_xp::IComboItem* ppComboItem;
  this->get_Item(Index, (Mscomctllib_xp::IComboItem**)&ppComboItem);
  return ppComboItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemsDispT<T>::set_Item(VARIANT* Index/*[in]*/, 
                              Mscomctllib_xp::IComboItem* ppComboItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(28));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (LPDISPATCH)(Mscomctllib_xp::IComboItem*)ppComboItem /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemsDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                         VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                         VARIANT* SelImage/*[in,opt]*/, VARIANT* Indentation/*[in,opt]*/, 
                         Mscomctllib_xp::IComboItem** ppComboItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(25));
  TAutoArgs<6> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = Key /*[VT_VARIANT:1]*/;
  _args[3] = Text /*[VT_VARIANT:1]*/;
  _args[4] = Image /*[VT_VARIANT:1]*/;
  _args[5] = SelImage /*[VT_VARIANT:1]*/;
  _args[6] = Indentation /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IComboItem**)ppComboItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IComboItem* __fastcall
IComboItemsDispT<T>::Add(VARIANT* Index/*[in,opt]*/, VARIANT* Key/*[in,opt]*/, 
                         VARIANT* Text/*[in,opt]*/, VARIANT* Image/*[in,opt]*/, 
                         VARIANT* SelImage/*[in,opt]*/, VARIANT* Indentation/*[in,opt]*/)
{
  Mscomctllib_xp::IComboItem* ppComboItem;
  this->Add(Index, Key, Text, Image, SelImage, Indentation, (Mscomctllib_xp::IComboItem**)&ppComboItem);
  return ppComboItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(26));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemsDispT<T>::Remove(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IComboItemsDispT<T>::_NewEnum(LPDISPATCH* ppNewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppNewEnum /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IComboItemsDispT<T>::_NewEnum(void)
{
  LPDISPATCH ppNewEnum;
  this->_NewEnum((LPDISPATCH*)&ppNewEnum);
  return ppNewEnum;
}

// *********************************************************************//
// SmartIntf: TCOMIImageCombo
// Interface: IImageCombo
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_Text(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIImageComboT<T>::get_Text(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_Text((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_Text(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_BackColor(::OLE_COLOR* pocBackColor/*[out,retval]*/)
{
  return (*this)->get_BackColor(pocBackColor);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIImageComboT<T>::get_BackColor(void)
{
  ::OLE_COLOR pocBackColor;
  OLECHECK(this->get_BackColor((::OLE_COLOR*)&pocBackColor));
  return pocBackColor;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_BackColor(::OLE_COLOR pocBackColor/*[in]*/)
{
  return (*this)->set_BackColor(pocBackColor);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_Enabled(TOLEBOOL* pbEnabled/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)pbEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMIImageComboT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pbEnabled));
  return (TOLEBOOL)pbEnabled;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_Enabled(TOLEBOOL pbEnabled/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)pbEnabled);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_Font(IFontDisp** ppFont/*[out,retval]*/)
{
  return (*this)->get_Font(ppFont);
}

template <class T> IFontDisp* __fastcall
TCOMIImageComboT<T>::get_Font(void)
{
  IFontDisp* ppFont;
  OLECHECK(this->get_Font((IFontDisp**)&ppFont));
  return ppFont;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_Font(IFontDisp* ppFont/*[in]*/)
{
  return (*this)->set_Font(ppFont);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::_set_Font(IFontDisp* ppFont/*[in]*/)
{
  return (*this)->_set_Font(ppFont);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_ForeColor(::OLE_COLOR* pocForeColor/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pocForeColor);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIImageComboT<T>::get_ForeColor(void)
{
  ::OLE_COLOR pocForeColor;
  OLECHECK(this->get_ForeColor((::OLE_COLOR*)&pocForeColor));
  return pocForeColor;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_ForeColor(::OLE_COLOR pocForeColor/*[in]*/)
{
  return (*this)->set_ForeColor(pocForeColor);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  return (*this)->get_hWnd(phWnd);
}

template <class T> OLE_HANDLE __fastcall
TCOMIImageComboT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  OLECHECK(this->get_hWnd((OLE_HANDLE*)&phWnd));
  return phWnd;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  return (*this)->set_hWnd(phWnd);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  return (*this)->get_ImageList(ppImageList);
}

template <class T> LPDISPATCH __fastcall
TCOMIImageComboT<T>::get_ImageList(void)
{
  LPDISPATCH ppImageList;
  OLECHECK(this->get_ImageList((LPDISPATCH*)&ppImageList));
  return ppImageList;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::_set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->_set_ImageList(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  return (*this)->set_ImageList(ppImageList);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_Indentation(short* psIndent/*[out,retval]*/)
{
  return (*this)->get_Indentation(psIndent);
}

template <class T> short __fastcall
TCOMIImageComboT<T>::get_Indentation(void)
{
  short psIndent;
  OLECHECK(this->get_Indentation((short*)&psIndent));
  return psIndent;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_Indentation(short psIndent/*[in]*/)
{
  return (*this)->set_Indentation(psIndent);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_ComboItems(Mscomctllib_xp::IComboItems** ppComboItems/*[out,retval]*/)
{
  return (*this)->get_ComboItems(ppComboItems);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_ComboItems(Mscomctllib_xp::IComboItemsPtr* ppComboItems/*[out,retval]*/)
{
  return (*this)->get_ComboItems(IComboItems**)ppComboItems);
}

template <class T> Mscomctllib_xp::IComboItemsPtr __fastcall
TCOMIImageComboT<T>::get_ComboItems(void)
{
  Mscomctllib_xp::IComboItems* ppComboItems;
  OLECHECK(this->get_ComboItems((Mscomctllib_xp::IComboItems**)&ppComboItems));
  return (Mscomctllib_xp::IComboItemsPtr)ppComboItems;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::_set_ComboItems(Mscomctllib_xp::IComboItems* ppComboItems/*[in]*/)
{
  return (*this)->_set_ComboItems(ppComboItems);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::_set_ComboItems(Mscomctllib_xp::IComboItemsPtr ppComboItems/*[in]*/)
{
  return (*this)->_set_ComboItems(IComboItems*)ppComboItems);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_Locked(VARIANT_BOOL* pbLocked/*[out,retval]*/)
{
  return (*this)->get_Locked(pbLocked);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_Locked(TOLEBOOL* pbLocked/*[out,retval]*/)
{
  return (*this)->get_Locked(VARIANT_BOOL*)pbLocked);
}

template <class T> TOLEBOOL __fastcall
TCOMIImageComboT<T>::get_Locked(void)
{
  VARIANT_BOOL pbLocked;
  OLECHECK(this->get_Locked((VARIANT_BOOL*)&pbLocked));
  return (TOLEBOOL)pbLocked;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_Locked(VARIANT_BOOL pbLocked/*[in]*/)
{
  return (*this)->set_Locked(pbLocked);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_Locked(TOLEBOOL pbLocked/*[in]*/)
{
  return (*this)->set_Locked(VARIANT_BOOL)pbLocked);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  return (*this)->get_MouseIcon(ppMouseIcon);
}

template <class T> IPictureDisp* __fastcall
TCOMIImageComboT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  OLECHECK(this->get_MouseIcon((IPictureDisp**)&ppMouseIcon));
  return ppMouseIcon;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  return (*this)->_set_MouseIcon(ppMouseIcon);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* penumMousePointer/*[out,retval]*/)
{
  return (*this)->get_MousePointer(penumMousePointer);
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
TCOMIImageComboT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants penumMousePointer;
  OLECHECK(this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&penumMousePointer));
  return penumMousePointer;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants penumMousePointer/*[in]*/)
{
  return (*this)->set_MousePointer(penumMousePointer);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/)
{
  return (*this)->get_OLEDragMode(psOLEDragMode);
}

template <class T> Mscomctllib_xp::OLEDragConstants __fastcall
TCOMIImageComboT<T>::get_OLEDragMode(void)
{
  Mscomctllib_xp::OLEDragConstants psOLEDragMode;
  OLECHECK(this->get_OLEDragMode((Mscomctllib_xp::OLEDragConstants*)&psOLEDragMode));
  return psOLEDragMode;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/)
{
  return (*this)->set_OLEDragMode(psOLEDragMode);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  return (*this)->get_OLEDropMode(psOLEDropMode);
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
TCOMIImageComboT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  OLECHECK(this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode));
  return psOLEDropMode;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  return (*this)->set_OLEDropMode(psOLEDropMode);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_SelectedItem(Mscomctllib_xp::IComboItem** ppIComboItem/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(ppIComboItem);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_SelectedItem(Mscomctllib_xp::IComboItemPtr* ppIComboItem/*[out,retval]*/)
{
  return (*this)->get_SelectedItem(IComboItem**)ppIComboItem);
}

template <class T> Mscomctllib_xp::IComboItemPtr __fastcall
TCOMIImageComboT<T>::get_SelectedItem(void)
{
  Mscomctllib_xp::IComboItem* ppIComboItem;
  OLECHECK(this->get_SelectedItem((Mscomctllib_xp::IComboItem**)&ppIComboItem));
  return (Mscomctllib_xp::IComboItemPtr)ppIComboItem;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::_set_SelectedItem(Mscomctllib_xp::IComboItem* ppIComboItem/*[in]*/)
{
  return (*this)->_set_SelectedItem(ppIComboItem);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::_set_SelectedItem(Mscomctllib_xp::IComboItemPtr ppIComboItem/*[in]*/)
{
  return (*this)->_set_SelectedItem(IComboItem*)ppIComboItem);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_SelectedItem(VARIANT* ppIComboItem/*[in]*/)
{
  return (*this)->set_SelectedItem(ppIComboItem);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_SelLength(long* plSelLength/*[out,retval]*/)
{
  return (*this)->get_SelLength(plSelLength);
}

template <class T> long __fastcall
TCOMIImageComboT<T>::get_SelLength(void)
{
  long plSelLength;
  OLECHECK(this->get_SelLength((long*)&plSelLength));
  return plSelLength;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_SelLength(long plSelLength/*[in]*/)
{
  return (*this)->set_SelLength(plSelLength);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_SelStart(long* plSelStart/*[out,retval]*/)
{
  return (*this)->get_SelStart(plSelStart);
}

template <class T> long __fastcall
TCOMIImageComboT<T>::get_SelStart(void)
{
  long plSelStart;
  OLECHECK(this->get_SelStart((long*)&plSelStart));
  return plSelStart;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_SelStart(long plSelStart/*[in]*/)
{
  return (*this)->set_SelStart(plSelStart);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_SelText(BSTR* pbstrText/*[out,retval]*/)
{
  return (*this)->get_SelText(pbstrText);
}

template <class T> BSTR __fastcall
TCOMIImageComboT<T>::get_SelText(void)
{
  BSTR pbstrText = 0;
  OLECHECK(this->get_SelText((BSTR*)&pbstrText));
  return pbstrText;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_SelText(BSTR pbstrText/*[in]*/)
{
  return (*this)->set_SelText(pbstrText);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_Style(Mscomctllib_xp::ImageComboStyleConstants* penumStyle/*[out,retval]*/)
{
  return (*this)->get_Style(penumStyle);
}

template <class T> Mscomctllib_xp::ImageComboStyleConstants __fastcall
TCOMIImageComboT<T>::get_Style(void)
{
  Mscomctllib_xp::ImageComboStyleConstants penumStyle;
  OLECHECK(this->get_Style((Mscomctllib_xp::ImageComboStyleConstants*)&penumStyle));
  return penumStyle;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_Style(Mscomctllib_xp::ImageComboStyleConstants penumStyle/*[in]*/)
{
  return (*this)->set_Style(penumStyle);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_UsePathSep(VARIANT_BOOL* pbUsePathSep/*[out,retval]*/)
{
  return (*this)->get_UsePathSep(pbUsePathSep);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::get_UsePathSep(TOLEBOOL* pbUsePathSep/*[out,retval]*/)
{
  return (*this)->get_UsePathSep(VARIANT_BOOL*)pbUsePathSep);
}

template <class T> TOLEBOOL __fastcall
TCOMIImageComboT<T>::get_UsePathSep(void)
{
  VARIANT_BOOL pbUsePathSep;
  OLECHECK(this->get_UsePathSep((VARIANT_BOOL*)&pbUsePathSep));
  return (TOLEBOOL)pbUsePathSep;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_UsePathSep(VARIANT_BOOL pbUsePathSep/*[in]*/)
{
  return (*this)->set_UsePathSep(pbUsePathSep);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::set_UsePathSep(TOLEBOOL pbUsePathSep/*[in]*/)
{
  return (*this)->set_UsePathSep(VARIANT_BOOL)pbUsePathSep);
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::AboutBox(void)
{
  return (*this)->AboutBox();
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::GetFirstVisible(Mscomctllib_xp::IComboItem** ppIComboItem/*[out,retval]*/)
{
  return (*this)->GetFirstVisible(ppIComboItem);
}

template <class T> Mscomctllib_xp::IComboItem* __fastcall
TCOMIImageComboT<T>::GetFirstVisible(void)
{
  Mscomctllib_xp::IComboItem* ppIComboItem;
  OLECHECK(this->GetFirstVisible((Mscomctllib_xp::IComboItem**)&ppIComboItem));
  return ppIComboItem;
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

template <class T> HRESULT __fastcall
TCOMIImageComboT<T>::OLEDrag(void)
{
  return (*this)->OLEDrag();
}

// *********************************************************************//
// DispIntf:  IImageCombo
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DD9DA664-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(-517));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IImageComboDispT<T>::get_Text(void)
{
  BSTR pbstrText;
  this->get_Text((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(-517));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_BackColor(::OLE_COLOR* pocBackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pocBackColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IImageComboDispT<T>::get_BackColor(void)
{
  ::OLE_COLOR pocBackColor;
  this->get_BackColor((::OLE_COLOR*)&pocBackColor);
  return pocBackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_BackColor(::OLE_COLOR pocBackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = pocBackColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_Enabled(VARIANT_BOOL* pbEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IImageComboDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pbEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pbEnabled);
  return pbEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_Enabled(VARIANT_BOOL pbEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = pbEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_Font(IFontDisp** ppFont/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)ppFont /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
IImageComboDispT<T>::get_Font(void)
{
  IFontDisp* ppFont;
  this->get_Font((IFontDisp**)&ppFont);
  return ppFont;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_Font(IFontDisp* ppFont/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)ppFont /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::_set_Font(IFontDisp* ppFont/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)ppFont /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_ForeColor(::OLE_COLOR* pocForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pocForeColor /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IImageComboDispT<T>::get_ForeColor(void)
{
  ::OLE_COLOR pocForeColor;
  this->get_ForeColor((::OLE_COLOR*)&pocForeColor);
  return pocForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_ForeColor(::OLE_COLOR pocForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(-513));
  TAutoArgs<1> _args;
  _args[1] = pocForeColor /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_hWnd(OLE_HANDLE* phWnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phWnd /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_HANDLE __fastcall
IImageComboDispT<T>::get_hWnd(void)
{
  OLE_HANDLE phWnd;
  this->get_hWnd((OLE_HANDLE*)&phWnd);
  return phWnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_hWnd(OLE_HANDLE phWnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<1> _args;
  _args[1] = phWnd /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_ImageList(LPDISPATCH* ppImageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppImageList /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IImageComboDispT<T>::get_ImageList(void)
{
  LPDISPATCH ppImageList;
  this->get_ImageList((LPDISPATCH*)&ppImageList);
  return ppImageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::_set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_ImageList(LPDISPATCH ppImageList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageList"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = ppImageList /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_Indentation(short* psIndent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Indentation"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psIndent /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IImageComboDispT<T>::get_Indentation(void)
{
  short psIndent;
  this->get_Indentation((short*)&psIndent);
  return psIndent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_Indentation(short psIndent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Indentation"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = psIndent /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_ComboItems(Mscomctllib_xp::IComboItems** ppComboItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ComboItems"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IComboItems**)ppComboItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IComboItems* __fastcall
IImageComboDispT<T>::get_ComboItems(void)
{
  Mscomctllib_xp::IComboItems* ppComboItems;
  this->get_ComboItems((Mscomctllib_xp::IComboItems**)&ppComboItems);
  return ppComboItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::_set_ComboItems(Mscomctllib_xp::IComboItems* ppComboItems/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ComboItems"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IComboItems*)ppComboItems /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_Locked(VARIANT_BOOL* pbLocked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbLocked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IImageComboDispT<T>::get_Locked(void)
{
  VARIANT_BOOL pbLocked;
  this->get_Locked((VARIANT_BOOL*)&pbLocked);
  return pbLocked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_Locked(VARIANT_BOOL pbLocked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pbLocked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_MouseIcon(IPictureDisp** ppMouseIcon/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IPictureDisp**)ppMouseIcon /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IPictureDisp* __fastcall
IImageComboDispT<T>::get_MouseIcon(void)
{
  IPictureDisp* ppMouseIcon;
  this->get_MouseIcon((IPictureDisp**)&ppMouseIcon);
  return ppMouseIcon;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::_set_MouseIcon(IPictureDisp* ppMouseIcon/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp*)ppMouseIcon /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_MousePointer(Mscomctllib_xp::MousePointerConstants* penumMousePointer/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumMousePointer /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::MousePointerConstants __fastcall
IImageComboDispT<T>::get_MousePointer(void)
{
  Mscomctllib_xp::MousePointerConstants penumMousePointer;
  this->get_MousePointer((Mscomctllib_xp::MousePointerConstants*)&penumMousePointer);
  return penumMousePointer;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_MousePointer(Mscomctllib_xp::MousePointerConstants penumMousePointer/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)penumMousePointer /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_OLEDragMode(Mscomctllib_xp::OLEDragConstants* psOLEDragMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDragMode"), DISPID(1550));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDragMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDragConstants __fastcall
IImageComboDispT<T>::get_OLEDragMode(void)
{
  Mscomctllib_xp::OLEDragConstants psOLEDragMode;
  this->get_OLEDragMode((Mscomctllib_xp::OLEDragConstants*)&psOLEDragMode);
  return psOLEDragMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_OLEDragMode(Mscomctllib_xp::OLEDragConstants psOLEDragMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDragMode"), DISPID(1550));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDragMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_OLEDropMode(Mscomctllib_xp::OLEDropConstants* psOLEDropMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psOLEDropMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::OLEDropConstants __fastcall
IImageComboDispT<T>::get_OLEDropMode(void)
{
  Mscomctllib_xp::OLEDropConstants psOLEDropMode;
  this->get_OLEDropMode((Mscomctllib_xp::OLEDropConstants*)&psOLEDropMode);
  return psOLEDropMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_OLEDropMode(Mscomctllib_xp::OLEDropConstants psOLEDropMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEDropMode"), DISPID(1551));
  TAutoArgs<1> _args;
  _args[1] = (int)psOLEDropMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_SelectedItem(Mscomctllib_xp::IComboItem** ppIComboItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IComboItem**)ppIComboItem /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::IComboItem* __fastcall
IImageComboDispT<T>::get_SelectedItem(void)
{
  Mscomctllib_xp::IComboItem* ppIComboItem;
  this->get_SelectedItem((Mscomctllib_xp::IComboItem**)&ppIComboItem);
  return ppIComboItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::_set_SelectedItem(Mscomctllib_xp::IComboItem* ppIComboItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Mscomctllib_xp::IComboItem*)ppIComboItem /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_SelectedItem(VARIANT* ppIComboItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedItem"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = ppIComboItem /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_SelLength(long* plSelLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plSelLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IImageComboDispT<T>::get_SelLength(void)
{
  long plSelLength;
  this->get_SelLength((long*)&plSelLength);
  return plSelLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_SelLength(long plSelLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = plSelLength /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_SelStart(long* plSelStart/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plSelStart /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IImageComboDispT<T>::get_SelStart(void)
{
  long plSelStart;
  this->get_SelStart((long*)&plSelStart);
  return plSelStart;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_SelStart(long plSelStart/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = plSelStart /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_SelText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelText"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IImageComboDispT<T>::get_SelText(void)
{
  BSTR pbstrText;
  this->get_SelText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_SelText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelText"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_Style(Mscomctllib_xp::ImageComboStyleConstants* penumStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penumStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Mscomctllib_xp::ImageComboStyleConstants __fastcall
IImageComboDispT<T>::get_Style(void)
{
  Mscomctllib_xp::ImageComboStyleConstants penumStyle;
  this->get_Style((Mscomctllib_xp::ImageComboStyleConstants*)&penumStyle);
  return penumStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_Style(Mscomctllib_xp::ImageComboStyleConstants penumStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = (int)penumStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::get_UsePathSep(VARIANT_BOOL* pbUsePathSep/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UsePathSep"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbUsePathSep /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IImageComboDispT<T>::get_UsePathSep(void)
{
  VARIANT_BOOL pbUsePathSep;
  this->get_UsePathSep((VARIANT_BOOL*)&pbUsePathSep);
  return pbUsePathSep;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::set_UsePathSep(VARIANT_BOOL pbUsePathSep/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UsePathSep"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pbUsePathSep /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::GetFirstVisible(Mscomctllib_xp::IComboItem** ppIComboItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFirstVisible"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Mscomctllib_xp::IComboItem**)ppIComboItem /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Mscomctllib_xp::IComboItem* __fastcall
IImageComboDispT<T>::GetFirstVisible(void)
{
  Mscomctllib_xp::IComboItem* ppIComboItem;
  this->GetFirstVisible((Mscomctllib_xp::IComboItem**)&ppIComboItem);
  return ppIComboItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IImageComboDispT<T>::OLEDrag()
{
  _TDispID _dispid(*this, OLETEXT("OLEDrag"), DISPID(1552));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  DImageComboEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {DD9DA665-8594-11D1-B16A-00C0F0283628}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::Change()
{
  _TDispID _dispid(/* Change */ DISPID(1));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::Dropdown()
{
  _TDispID _dispid(/* Dropdown */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::KeyDown(short KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::KeyUp(short KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::KeyPress(short* KeyAscii)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = KeyAscii /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::OLEStartDrag(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                        long* AllowedEffects/*[in,out]*/)
{
  _TDispID _dispid(/* OLEStartDrag */ DISPID(1550));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = AllowedEffects /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::OLEGiveFeedback(long* Effect/*[in,out]*/, 
                                           VARIANT_BOOL* DefaultCursors/*[in,out]*/)
{
  _TDispID _dispid(/* OLEGiveFeedback */ DISPID(1551));
  TAutoArgs<2> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  _args[2] = DefaultCursors /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::OLESetData(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                      short* DataFormat/*[in,out]*/)
{
  _TDispID _dispid(/* OLESetData */ DISPID(1552));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = DataFormat /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::OLECompleteDrag(long* Effect/*[in,out]*/)
{
  _TDispID _dispid(/* OLECompleteDrag */ DISPID(1553));
  TAutoArgs<1> _args;
  _args[1] = Effect /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::OLEDragOver(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                       long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                       short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                       float* y/*[in,out]*/, short* State/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragOver */ DISPID(1554));
  TAutoArgs<7> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  _args[7] = State /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
DImageComboEventsDispT<T>::OLEDragDrop(Mscomctllib_xp::DataObject** Data/*[in,out]*/, 
                                       long* Effect/*[in,out]*/, short* Button/*[in,out]*/, 
                                       short* Shift/*[in,out]*/, float* x/*[in,out]*/, 
                                       float* y/*[in,out]*/)
{
  _TDispID _dispid(/* OLEDragDrop */ DISPID(1555));
  TAutoArgs<6> _args;
  _args[1] = (LPDISPATCH*)(Mscomctllib_xp::DataObject**)Data /*[VT_USERDEFINED:2]*/;
  _args[2] = Effect /*[VT_I4:1]*/;
  _args[3] = Button /*[VT_I2:1]*/;
  _args[4] = Shift /*[VT_I2:1]*/;
  _args[5] = x /*[VT_R4:1]*/;
  _args[6] = y /*[VT_R4:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DataObject
// Interface: TCOMIVBDataObject
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIVBDataObject, IVBDataObject, &CLSID_DataObject, &IID_IVBDataObject> CoDataObject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DataObjectFiles
// Interface: TCOMIVBDataObjectFiles
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIVBDataObjectFiles, IVBDataObjectFiles, &CLSID_DataObjectFiles, &IID_IVBDataObjectFiles> CoDataObjectFiles;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Tabs
// Interface: TCOMITabs
// *********************************************************************//
typedef TCoClassCreatorT<TCOMITabs, ITabs, &CLSID_Tabs, &IID_ITabs> CoTabs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Tab
// Interface: TCOMITab
// *********************************************************************//
typedef TCoClassCreatorT<TCOMITab, ITab, &CLSID_Tab, &IID_ITab> CoTab;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Buttons
// Interface: TCOMIButtons
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIButtons, IButtons, &CLSID_Buttons, &IID_IButtons> CoButtons;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Button
// Interface: TCOMIButton
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIButton, IButton, &CLSID_Button, &IID_IButton> CoButton;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ButtonMenus
// Interface: TCOMIButtonMenus
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIButtonMenus, IButtonMenus, &CLSID_ButtonMenus, &IID_IButtonMenus> CoButtonMenus;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ButtonMenu
// Interface: TCOMIButtonMenu
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIButtonMenu, IButtonMenu, &CLSID_ButtonMenu, &IID_IButtonMenu> CoButtonMenu;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Panels
// Interface: TCOMIPanels
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPanels, IPanels, &CLSID_Panels, &IID_IPanels> CoPanels;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Panel
// Interface: TCOMIPanel
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIPanel, IPanel, &CLSID_Panel, &IID_IPanel> CoPanel;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Nodes
// Interface: TCOMINodes
// *********************************************************************//
typedef TCoClassCreatorT<TCOMINodes, INodes, &CLSID_Nodes, &IID_INodes> CoNodes;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Node
// Interface: TCOMINode
// *********************************************************************//
typedef TCoClassCreatorT<TCOMINode, INode, &CLSID_Node, &IID_INode> CoNode;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListItems
// Interface: TCOMIListItems
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIListItems, IListItems, &CLSID_ListItems, &IID_IListItems> CoListItems;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListItem
// Interface: TCOMIListItem
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIListItem, IListItem, &CLSID_ListItem, &IID_IListItem> CoListItem;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ColumnHeaders
// Interface: TCOMIColumnHeaders
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIColumnHeaders, IColumnHeaders, &CLSID_ColumnHeaders, &IID_IColumnHeaders> CoColumnHeaders;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ColumnHeader
// Interface: TCOMIColumnHeader
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIColumnHeader, IColumnHeader, &CLSID_ColumnHeader, &IID_IColumnHeader> CoColumnHeader;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListSubItems
// Interface: TCOMIListSubItems
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIListSubItems, IListSubItems, &CLSID_ListSubItems, &IID_IListSubItems> CoListSubItems;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListSubItem
// Interface: TCOMIListSubItem
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIListSubItem, IListSubItem, &CLSID_ListSubItem, &IID_IListSubItem> CoListSubItem;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListImages
// Interface: TCOMIImages
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIImages, IImages, &CLSID_ListImages, &IID_IImages> CoListImages;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListImage
// Interface: TCOMIImage
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIImage, IImage, &CLSID_ListImage, &IID_IImage> CoListImage;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Controls_
// Interface: TCOMIControls
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIControls, IControls, &CLSID_Controls_, &IID_IControls> CoControls_;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComboItem
// Interface: TCOMIComboItem
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIComboItem, IComboItem, &CLSID_ComboItem, &IID_IComboItem> CoComboItem;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ComboItems
// Interface: TCOMIComboItems
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIComboItems, IComboItems, &CLSID_ComboItems, &IID_IComboItems> CoComboItems;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TabStrip
// Event Interface : ITabStripEvents
// *********************************************************************//
template <class T>
class TEvents_TabStrip : public IConnectionPointImpl<T,
                                                 &DIID_ITabStripEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
  void            Fire_KeyDown(short* KeyCode, short Shift);
  void            Fire_KeyPress(short* KeyAscii);
  void            Fire_KeyUp(short* KeyCode, short Shift);
  void            Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_BeforeClick(short* Cancel);
  void            Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects);
  void            Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors);
  void            Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat);
  void            Fire_OLECompleteDrag(long* Effect);
  void            Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y, short* State);
  void            Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y);
protected:
  ITabStripEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_TabStrip<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_KeyDown(short* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_KeyPress(short* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_KeyUp(short* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_BeforeClick(short* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeClick(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEStartDrag(Data, AllowedEffects);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEGiveFeedback(Effect, DefaultCursors);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLESetData(Data, DataFormat);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_OLECompleteDrag(long* Effect)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLECompleteDrag(Effect);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                      short* Shift, float* x, float* y, short* State)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragOver(Data, Effect, Button, Shift, x, y, State);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TabStrip<T>::Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                      short* Shift, float* x, float* y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragDrop(Data, Effect, Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Toolbar
// Event Interface : IToolbarEvents
// *********************************************************************//
template <class T>
class TEvents_Toolbar : public IConnectionPointImpl<T,
                                                 &DIID_IToolbarEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_ButtonClick(Mscomctllib_xp::Button* Button);
  void            Fire_Change(void);
  void            Fire_Click(void);
  void            Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_DblClick(void);
  void            Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects);
  void            Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors);
  void            Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat);
  void            Fire_OLECompleteDrag(long* Effect);
  void            Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y, short* State);
  void            Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y);
  void            Fire_ButtonMenuClick(Mscomctllib_xp::ButtonMenu* ButtonMenu);
  void            Fire_ButtonDropDown(Mscomctllib_xp::Button* Button);
protected:
  IToolbarEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Toolbar<T>::Fire_ButtonClick(Mscomctllib_xp::Button* Button)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ButtonClick(Button);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_DblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEStartDrag(Data, AllowedEffects);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEGiveFeedback(Effect, DefaultCursors);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLESetData(Data, DataFormat);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_OLECompleteDrag(long* Effect)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLECompleteDrag(Effect);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                     short* Shift, float* x, float* y, short* State)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragOver(Data, Effect, Button, Shift, x, y, State);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                     short* Shift, float* x, float* y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragDrop(Data, Effect, Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_ButtonMenuClick(Mscomctllib_xp::ButtonMenu* ButtonMenu)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ButtonMenuClick(ButtonMenu);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Toolbar<T>::Fire_ButtonDropDown(Mscomctllib_xp::Button* Button)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ButtonDropDown(Button);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : StatusBar
// Event Interface : IStatusBarEvents
// *********************************************************************//
template <class T>
class TEvents_StatusBar : public IConnectionPointImpl<T,
                                                 &DIID_IStatusBarEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_PanelClick(Mscomctllib_xp::Panel* Panel);
  void            Fire_PanelDblClick(Mscomctllib_xp::Panel* Panel);
  void            Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_Click(void);
  void            Fire_DblClick(void);
  void            Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects);
  void            Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors);
  void            Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat);
  void            Fire_OLECompleteDrag(long* Effect);
  void            Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y, short* State);
  void            Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y);
protected:
  IStatusBarEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_StatusBar<T>::Fire_PanelClick(Mscomctllib_xp::Panel* Panel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PanelClick(Panel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_PanelDblClick(Mscomctllib_xp::Panel* Panel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.PanelDblClick(Panel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_DblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEStartDrag(Data, AllowedEffects);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEGiveFeedback(Effect, DefaultCursors);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLESetData(Data, DataFormat);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OLECompleteDrag(long* Effect)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLECompleteDrag(Effect);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, 
                                       short* Button, short* Shift, float* x, float* y, short* State)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragOver(Data, Effect, Button, Shift, x, y, State);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_StatusBar<T>::Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, 
                                       short* Button, short* Shift, float* x, float* y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragDrop(Data, Effect, Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ProgressBar
// Event Interface : IProgressBarEvents
// *********************************************************************//
template <class T>
class TEvents_ProgressBar : public IConnectionPointImpl<T,
                                                 &DIID_IProgressBarEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_Click(void);
  void            Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects);
  void            Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors);
  void            Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat);
  void            Fire_OLECompleteDrag(long* Effect);
  void            Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y, short* State);
  void            Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y);
protected:
  IProgressBarEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ProgressBar<T>::Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                       OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                       OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEStartDrag(Data, AllowedEffects);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEGiveFeedback(Effect, DefaultCursors);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLESetData(Data, DataFormat);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OLECompleteDrag(long* Effect)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLECompleteDrag(Effect);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, 
                                         short* Button, short* Shift, float* x, float* y, 
                                         short* State)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragOver(Data, Effect, Button, Shift, x, y, State);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ProgressBar<T>::Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, 
                                         short* Button, short* Shift, float* x, float* y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragDrop(Data, Effect, Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : TreeView
// Event Interface : ITreeViewEvents
// *********************************************************************//
template <class T>
class TEvents_TreeView : public IConnectionPointImpl<T,
                                                 &DIID_ITreeViewEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeLabelEdit(short* Cancel);
  void            Fire_AfterLabelEdit(short* Cancel, BSTR* NewString);
  void            Fire_Collapse(Mscomctllib_xp::Node* Node);
  void            Fire_Expand(Mscomctllib_xp::Node* Node);
  void            Fire_NodeClick(Mscomctllib_xp::Node* Node);
  void            Fire_KeyDown(short* KeyCode, short Shift);
  void            Fire_KeyUp(short* KeyCode, short Shift);
  void            Fire_KeyPress(short* KeyAscii);
  void            Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_Click(void);
  void            Fire_DblClick(void);
  void            Fire_NodeCheck(Mscomctllib_xp::Node* Node);
  void            Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects);
  void            Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors);
  void            Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat);
  void            Fire_OLECompleteDrag(long* Effect);
  void            Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y, short* State);
  void            Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y);
protected:
  ITreeViewEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_TreeView<T>::Fire_BeforeLabelEdit(short* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeLabelEdit(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_AfterLabelEdit(short* Cancel, BSTR* NewString)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterLabelEdit(Cancel, NewString);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_Collapse(Mscomctllib_xp::Node* Node)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Collapse(Node);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_Expand(Mscomctllib_xp::Node* Node)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Expand(Node);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_NodeClick(Mscomctllib_xp::Node* Node)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.NodeClick(Node);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_KeyDown(short* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_KeyUp(short* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_KeyPress(short* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_DblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_NodeCheck(Mscomctllib_xp::Node* Node)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.NodeCheck(Node);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEStartDrag(Data, AllowedEffects);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEGiveFeedback(Effect, DefaultCursors);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLESetData(Data, DataFormat);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OLECompleteDrag(long* Effect)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLECompleteDrag(Effect);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                      short* Shift, float* x, float* y, short* State)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragOver(Data, Effect, Button, Shift, x, y, State);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_TreeView<T>::Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                      short* Shift, float* x, float* y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragDrop(Data, Effect, Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ListView
// Event Interface : ListViewEvents
// *********************************************************************//
template <class T>
class TEvents_ListView : public IConnectionPointImpl<T,
                                                 &DIID_ListViewEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_BeforeLabelEdit(short* Cancel);
  void            Fire_AfterLabelEdit(short* Cancel, BSTR* NewString);
  void            Fire_ColumnClick(Mscomctllib_xp::ColumnHeader* ColumnHeader);
  void            Fire_ItemClick(Mscomctllib_xp::ListItem* Item);
  void            Fire_KeyDown(short* KeyCode, short Shift);
  void            Fire_KeyUp(short* KeyCode, short Shift);
  void            Fire_KeyPress(short* KeyAscii);
  void            Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_Click(void);
  void            Fire_DblClick(void);
  void            Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects);
  void            Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors);
  void            Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat);
  void            Fire_OLECompleteDrag(long* Effect);
  void            Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y, short* State);
  void            Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y);
  void            Fire_ItemCheck(Mscomctllib_xp::ListItem* Item);
protected:
  ListViewEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ListView<T>::Fire_BeforeLabelEdit(short* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeLabelEdit(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_AfterLabelEdit(short* Cancel, BSTR* NewString)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterLabelEdit(Cancel, NewString);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_ColumnClick(Mscomctllib_xp::ColumnHeader* ColumnHeader)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ColumnClick(ColumnHeader);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_ItemClick(Mscomctllib_xp::ListItem* Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ItemClick(Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_KeyDown(short* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_KeyUp(short* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_KeyPress(short* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_DblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEStartDrag(Data, AllowedEffects);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEGiveFeedback(Effect, DefaultCursors);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLESetData(Data, DataFormat);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OLECompleteDrag(long* Effect)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLECompleteDrag(Effect);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                      short* Shift, float* x, float* y, short* State)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragOver(Data, Effect, Button, Shift, x, y, State);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                      short* Shift, float* x, float* y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragDrop(Data, Effect, Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ListView<T>::Fire_ItemCheck(Mscomctllib_xp::ListItem* Item)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ItemCheck(Item);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ImageList
// Event Interface : ImageListEvents
// *********************************************************************//
template <class T>
class TEvents_ImageList : public IConnectionPointImpl<T,
                                                 &DIID_ImageListEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
protected:
  ImageListEventsDisp m_EventIntfObj;
};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : Slider
// Event Interface : ISliderEvents
// *********************************************************************//
template <class T>
class TEvents_Slider : public IConnectionPointImpl<T,
                                                 &DIID_ISliderEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(void);
  void            Fire_KeyDown(short* KeyCode, short Shift);
  void            Fire_KeyPress(short* KeyAscii);
  void            Fire_KeyUp(short* KeyCode, short Shift);
  void            Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_Scroll(void);
  void            Fire_Change(void);
  void            Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects);
  void            Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors);
  void            Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat);
  void            Fire_OLECompleteDrag(long* Effect);
  void            Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y, short* State);
  void            Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y);
protected:
  ISliderEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_Slider<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_KeyDown(short* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_KeyPress(short* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_KeyUp(short* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_Scroll(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Scroll();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEStartDrag(Data, AllowedEffects);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEGiveFeedback(Effect, DefaultCursors);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLESetData(Data, DataFormat);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_OLECompleteDrag(long* Effect)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLECompleteDrag(Effect);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                    short* Shift, float* x, float* y, short* State)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragOver(Data, Effect, Button, Shift, x, y, State);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_Slider<T>::Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                    short* Shift, float* x, float* y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragDrop(Data, Effect, Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ImageCombo
// Event Interface : DImageComboEvents
// *********************************************************************//
template <class T>
class TEvents_ImageCombo : public IConnectionPointImpl<T,
                                                 &DIID_DImageComboEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Change(void);
  void            Fire_Dropdown(void);
  void            Fire_Click(void);
  void            Fire_KeyDown(short KeyCode, short Shift);
  void            Fire_KeyUp(short KeyCode, short Shift);
  void            Fire_KeyPress(short* KeyAscii);
  void            Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects);
  void            Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors);
  void            Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat);
  void            Fire_OLECompleteDrag(long* Effect);
  void            Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y, short* State);
  void            Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, short* Button, 
                                   short* Shift, float* x, float* y);
protected:
  DImageComboEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ImageCombo<T>::Fire_Change(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_Dropdown(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Dropdown();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_KeyDown(short KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_KeyUp(short KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_KeyPress(short* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_OLEStartDrag(Mscomctllib_xp::DataObject** Data, long* AllowedEffects)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEStartDrag(Data, AllowedEffects);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_OLEGiveFeedback(long* Effect, VARIANT_BOOL* DefaultCursors)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEGiveFeedback(Effect, DefaultCursors);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_OLESetData(Mscomctllib_xp::DataObject** Data, short* DataFormat)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLESetData(Data, DataFormat);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_OLECompleteDrag(long* Effect)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLECompleteDrag(Effect);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_OLEDragOver(Mscomctllib_xp::DataObject** Data, long* Effect, 
                                        short* Button, short* Shift, float* x, float* y, 
                                        short* State)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragOver(Data, Effect, Button, Shift, x, y, State);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ImageCombo<T>::Fire_OLEDragDrop(Mscomctllib_xp::DataObject** Data, long* Effect, 
                                        short* Button, short* Shift, float* x, float* y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OLEDragDrop(Data, Effect, Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Mscomctllib_xp

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Mscomctllib_xp;
#endif

#pragma option pop

#endif // MSComctlLib_XPH
