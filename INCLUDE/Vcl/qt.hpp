// Borland C++ Builder
// Copyright (c) 1995, 2002 by Borland Software Corporation
// All rights reserved

// (DO NOT EDIT: machine generated header) 'Qt.pas' rev: 6.00

#ifndef QtHPP
#define QtHPP

#pragma delphiheader begin
#pragma option push -w-
#pragma option push -Vx
#include <SysUtils.hpp>	// Pascal unit
#include <Types.hpp>	// Pascal unit
#include <SysInit.hpp>	// Pascal unit
#include <System.hpp>	// Pascal unit

//-- user supplied -----------------------------------------------------------
#pragma link "QtIntf.lib"

namespace Qt
{
//-- type declarations -------------------------------------------------------
typedef System::PByte *PPByte;

typedef int *PInteger;

typedef unsigned *PCardinal;

typedef unsigned uint;

typedef void *PMsg;

struct TSizePolicy;
typedef TSizePolicy *PSizePolicy;

#pragma pack(push, 1)
struct TSizePolicy
{
	Word Data;
} ;
#pragma pack(pop)

typedef DynamicArray<Types::TPoint >  TPointArray;

typedef TPointArray *PPointArray;

typedef DynamicArray<int >  TIntArray;

typedef TIntArray *PIntArray;

typedef unsigned WId;

typedef unsigned *PWId;

typedef int WFlags;

typedef unsigned QRgb;

typedef QRgb *QRgbH;

typedef int QCOORD;

typedef System::TMethod  QHookH;

class DELPHICLASS QAsyncIOH;
class PASCALIMPLEMENTATION QAsyncIOH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QAsyncIOH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QAsyncIOH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDataSinkH;
class PASCALIMPLEMENTATION QDataSinkH : public QAsyncIOH 
{
	typedef QAsyncIOH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDataSinkH(void) : QAsyncIOH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDataSinkH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDataSourceH;
class PASCALIMPLEMENTATION QDataSourceH : public QAsyncIOH 
{
	typedef QAsyncIOH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDataSourceH(void) : QAsyncIOH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDataSourceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIODeviceSourceH;
class PASCALIMPLEMENTATION QIODeviceSourceH : public QDataSourceH 
{
	typedef QDataSourceH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIODeviceSourceH(void) : QDataSourceH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIODeviceSourceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QBitValH;
class PASCALIMPLEMENTATION QBitValH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QBitValH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QBitValH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCharH;
class PASCALIMPLEMENTATION QCharH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCharH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCharH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCollectionH;
class PASCALIMPLEMENTATION QCollectionH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCollectionH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCollectionH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGCacheH;
class PASCALIMPLEMENTATION QGCacheH : public QCollectionH 
{
	typedef QCollectionH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGCacheH(void) : QCollectionH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGCacheH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QAsciiCacheH;
class PASCALIMPLEMENTATION QAsciiCacheH : public QGCacheH 
{
	typedef QGCacheH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QAsciiCacheH(void) : QGCacheH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QAsciiCacheH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCacheH;
class PASCALIMPLEMENTATION QCacheH : public QGCacheH 
{
	typedef QGCacheH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCacheH(void) : QGCacheH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCacheH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIntCacheH;
class PASCALIMPLEMENTATION QIntCacheH : public QGCacheH 
{
	typedef QGCacheH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIntCacheH(void) : QGCacheH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIntCacheH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGDictH;
class PASCALIMPLEMENTATION QGDictH : public QCollectionH 
{
	typedef QCollectionH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGDictH(void) : QCollectionH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGDictH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QAsciiDict;
class PASCALIMPLEMENTATION QAsciiDict : public QGDictH 
{
	typedef QGDictH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QAsciiDict(void) : QGDictH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QAsciiDict(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDictH;
class PASCALIMPLEMENTATION QDictH : public QGDictH 
{
	typedef QGDictH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDictH(void) : QGDictH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDictH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIntDictH;
class PASCALIMPLEMENTATION QIntDictH : public QGDictH 
{
	typedef QGDictH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIntDictH(void) : QGDictH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIntDictH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPtrDictH;
class PASCALIMPLEMENTATION QPtrDictH : public QGDictH 
{
	typedef QGDictH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPtrDictH(void) : QGDictH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPtrDictH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGListH;
class PASCALIMPLEMENTATION QGListH : public QCollectionH 
{
	typedef QCollectionH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGListH(void) : QCollectionH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGListH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListH;
class PASCALIMPLEMENTATION QListH : public QGListH 
{
	typedef QGListH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListH(void) : QGListH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWidgetListH;
class PASCALIMPLEMENTATION QWidgetListH : public QListH 
{
	typedef QListH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWidgetListH(void) : QListH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWidgetListH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStrListH;
class PASCALIMPLEMENTATION QStrListH : public QListH 
{
	typedef QListH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStrListH(void) : QListH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStrListH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStrIListH;
class PASCALIMPLEMENTATION QStrIListH : public QStrListH 
{
	typedef QStrListH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStrIListH(void) : QStrListH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStrIListH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QQueueH;
class PASCALIMPLEMENTATION QQueueH : public QGListH 
{
	typedef QGListH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QQueueH(void) : QGListH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QQueueH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStackH;
class PASCALIMPLEMENTATION QStackH : public QGListH 
{
	typedef QGListH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStackH(void) : QGListH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStackH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QColorH;
class PASCALIMPLEMENTATION QColorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QColorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QColorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QColorGroupH;
class PASCALIMPLEMENTATION QColorGroupH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QColorGroupH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QColorGroupH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QConnectionH;
class PASCALIMPLEMENTATION QConnectionH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QConnectionH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QConnectionH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCursorH;
class PASCALIMPLEMENTATION QCursorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCursorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCursorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDataStreamH;
class PASCALIMPLEMENTATION QDataStreamH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDataStreamH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDataStreamH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDateH;
class PASCALIMPLEMENTATION QDateH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDateH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDateH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDateTimeH;
class PASCALIMPLEMENTATION QDateTimeH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDateTimeH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDateTimeH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDirH;
class PASCALIMPLEMENTATION QDirH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDirH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDirH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDropSiteH;
class PASCALIMPLEMENTATION QDropSiteH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDropSiteH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDropSiteH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFileInfoH;
class PASCALIMPLEMENTATION QFileInfoH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFileInfoH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFileInfoH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFocusDataH;
class PASCALIMPLEMENTATION QFocusDataH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFocusDataH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFocusDataH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFontH;
class PASCALIMPLEMENTATION QFontH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFontH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFontH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFontDatabaseH;
class PASCALIMPLEMENTATION QFontDatabaseH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFontDatabaseH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFontDatabaseH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFontInfoH;
class PASCALIMPLEMENTATION QFontInfoH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFontInfoH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFontInfoH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFontMetricsH;
class PASCALIMPLEMENTATION QFontMetricsH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFontMetricsH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFontMetricsH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGArrayH;
class PASCALIMPLEMENTATION QGArrayH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGArrayH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGArrayH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QArrayH;
class PASCALIMPLEMENTATION QArrayH : public QGArrayH 
{
	typedef QGArrayH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QArrayH(void) : QGArrayH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QArrayH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPointArrayH;
class PASCALIMPLEMENTATION QPointArrayH : public QArrayH 
{
	typedef QArrayH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPointArrayH(void) : QArrayH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPointArrayH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGCacheIteratorH;
class PASCALIMPLEMENTATION QGCacheIteratorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGCacheIteratorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGCacheIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QAsciiCacheIteratorH;
class PASCALIMPLEMENTATION QAsciiCacheIteratorH : public QGCacheIteratorH 
{
	typedef QGCacheIteratorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QAsciiCacheIteratorH(void) : QGCacheIteratorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QAsciiCacheIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCacheIteratorH;
class PASCALIMPLEMENTATION QCacheIteratorH : public QGCacheIteratorH 
{
	typedef QGCacheIteratorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCacheIteratorH(void) : QGCacheIteratorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCacheIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIntCacheIteratorH;
class PASCALIMPLEMENTATION QIntCacheIteratorH : public QGCacheIteratorH 
{
	typedef QGCacheIteratorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIntCacheIteratorH(void) : QGCacheIteratorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIntCacheIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGDictIteratorH;
class PASCALIMPLEMENTATION QGDictIteratorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGDictIteratorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGDictIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QAsciiDictIteratorH;
class PASCALIMPLEMENTATION QAsciiDictIteratorH : public QGDictIteratorH 
{
	typedef QGDictIteratorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QAsciiDictIteratorH(void) : QGDictIteratorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QAsciiDictIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDictIteratorH;
class PASCALIMPLEMENTATION QDictIteratorH : public QGDictIteratorH 
{
	typedef QGDictIteratorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDictIteratorH(void) : QGDictIteratorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDictIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIntDictIteratorH;
class PASCALIMPLEMENTATION QIntDictIteratorH : public QGDictIteratorH 
{
	typedef QGDictIteratorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIntDictIteratorH(void) : QGDictIteratorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIntDictIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPtrDictIteratorH;
class PASCALIMPLEMENTATION QPtrDictIteratorH : public QGDictIteratorH 
{
	typedef QGDictIteratorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPtrDictIteratorH(void) : QGDictIteratorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPtrDictIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGLH;
class PASCALIMPLEMENTATION QGLH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGLH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGLH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGLContextH;
class PASCALIMPLEMENTATION QGLContextH : public QGLH 
{
	typedef QGLH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGLContextH(void) : QGLH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGLContextH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGLFormatH;
class PASCALIMPLEMENTATION QGLFormatH : public QGLH 
{
	typedef QGLH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGLFormatH(void) : QGLH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGLFormatH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGListIteratorH;
class PASCALIMPLEMENTATION QGListIteratorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGListIteratorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGListIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListIteratorH;
class PASCALIMPLEMENTATION QListIteratorH : public QGListIteratorH 
{
	typedef QGListIteratorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListIteratorH(void) : QGListIteratorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIconDragItemH;
class PASCALIMPLEMENTATION QIconDragItemH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIconDragItemH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIconDragItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIconSetH;
class PASCALIMPLEMENTATION QIconSetH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIconSetH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIconSetH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QImageH;
class PASCALIMPLEMENTATION QImageH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QImageH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QImageH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QImageConsumerH;
class PASCALIMPLEMENTATION QImageConsumerH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QImageConsumerH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QImageConsumerH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QImageDecoderH;
class PASCALIMPLEMENTATION QImageDecoderH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QImageDecoderH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QImageDecoderH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QImageFormatH;
class PASCALIMPLEMENTATION QImageFormatH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QImageFormatH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QImageFormatH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QImageFormatTypeH;
class PASCALIMPLEMENTATION QImageFormatTypeH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QImageFormatTypeH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QImageFormatTypeH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QImageIOH;
class PASCALIMPLEMENTATION QImageIOH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QImageIOH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QImageIOH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIODeviceH;
class PASCALIMPLEMENTATION QIODeviceH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIODeviceH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIODeviceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QBufferH;
class PASCALIMPLEMENTATION QBufferH : public QIODeviceH 
{
	typedef QIODeviceH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QBufferH(void) : QIODeviceH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QBufferH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFileH;
class PASCALIMPLEMENTATION QFileH : public QIODeviceH 
{
	typedef QIODeviceH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFileH(void) : QIODeviceH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFileH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSocketDeviceH;
class PASCALIMPLEMENTATION QSocketDeviceH : public QIODeviceH 
{
	typedef QIODeviceH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSocketDeviceH(void) : QIODeviceH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSocketDeviceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxIODeviceH;
class PASCALIMPLEMENTATION QClxIODeviceH : public QIODeviceH 
{
	typedef QIODeviceH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxIODeviceH(void) : QIODeviceH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxIODeviceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QLayoutItemH;
class PASCALIMPLEMENTATION QLayoutItemH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QLayoutItemH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QLayoutItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSpacerItemH;
class PASCALIMPLEMENTATION QSpacerItemH : public QLayoutItemH 
{
	typedef QLayoutItemH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSpacerItemH(void) : QLayoutItemH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSpacerItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWidgetItemH;
class PASCALIMPLEMENTATION QWidgetItemH : public QLayoutItemH 
{
	typedef QLayoutItemH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWidgetItemH(void) : QLayoutItemH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWidgetItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QLayoutIteratorH;
class PASCALIMPLEMENTATION QLayoutIteratorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QLayoutIteratorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QLayoutIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListBoxItemH;
class PASCALIMPLEMENTATION QListBoxItemH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListBoxItemH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListBoxItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListBoxPixmapH;
class PASCALIMPLEMENTATION QListBoxPixmapH : public QListBoxItemH 
{
	typedef QListBoxItemH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListBoxPixmapH(void) : QListBoxItemH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListBoxPixmapH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListBoxTextH;
class PASCALIMPLEMENTATION QListBoxTextH : public QListBoxItemH 
{
	typedef QListBoxItemH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListBoxTextH(void) : QListBoxItemH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListBoxTextH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxListBoxItemH;
class PASCALIMPLEMENTATION QClxListBoxItemH : public QListBoxTextH 
{
	typedef QListBoxTextH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxListBoxItemH(void) : QListBoxTextH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxListBoxItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListViewItemIteratorH;
class PASCALIMPLEMENTATION QListViewItemIteratorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListViewItemIteratorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListViewItemIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QLNodeH;
class PASCALIMPLEMENTATION QLNodeH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QLNodeH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QLNodeH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMapH;
class PASCALIMPLEMENTATION QMapH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMapH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMapH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMapConstIteratorH;
class PASCALIMPLEMENTATION QMapConstIteratorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMapConstIteratorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMapConstIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMapIteratorH;
class PASCALIMPLEMENTATION QMapIteratorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMapIteratorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMapIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMenuDataH;
class PASCALIMPLEMENTATION QMenuDataH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMenuDataH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMenuDataH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMimeSourceH;
class PASCALIMPLEMENTATION QMimeSourceH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMimeSourceH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMimeSourceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxMimeSourceH;
class PASCALIMPLEMENTATION QClxMimeSourceH : public QMimeSourceH 
{
	typedef QMimeSourceH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxMimeSourceH(void) : QMimeSourceH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxMimeSourceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMimeSourceFactoryH;
class PASCALIMPLEMENTATION QMimeSourceFactoryH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMimeSourceFactoryH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMimeSourceFactoryH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxMimeSourceFactoryH;
class PASCALIMPLEMENTATION QClxMimeSourceFactoryH : public QMimeSourceFactoryH 
{
	typedef QMimeSourceFactoryH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxMimeSourceFactoryH(void) : QMimeSourceFactoryH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxMimeSourceFactoryH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMovieH;
class PASCALIMPLEMENTATION QMovieH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMovieH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMovieH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QNPluginH;
class PASCALIMPLEMENTATION QNPluginH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QNPluginH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QNPluginH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QNPStreamH;
class PASCALIMPLEMENTATION QNPStreamH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QNPStreamH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QNPStreamH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPaintDeviceH;
class PASCALIMPLEMENTATION QPaintDeviceH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPaintDeviceH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPaintDeviceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPictureH;
class PASCALIMPLEMENTATION QPictureH : public QPaintDeviceH 
{
	typedef QPaintDeviceH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPictureH(void) : QPaintDeviceH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPictureH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPixmapH;
class PASCALIMPLEMENTATION QPixmapH : public QPaintDeviceH 
{
	typedef QPaintDeviceH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPixmapH(void) : QPaintDeviceH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPixmapH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QBitmapH;
class PASCALIMPLEMENTATION QBitmapH : public QPixmapH 
{
	typedef QPixmapH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QBitmapH(void) : QPixmapH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QBitmapH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPrinterH;
class PASCALIMPLEMENTATION QPrinterH : public QPaintDeviceH 
{
	typedef QPaintDeviceH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPrinterH(void) : QPaintDeviceH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPrinterH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPaintDeviceMetricsH;
class PASCALIMPLEMENTATION QPaintDeviceMetricsH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPaintDeviceMetricsH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPaintDeviceMetricsH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPaletteH;
class PASCALIMPLEMENTATION QPaletteH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPaletteH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPaletteH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPixmapCacheH;
class PASCALIMPLEMENTATION QPixmapCacheH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPixmapCacheH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPixmapCacheH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPointH;
class PASCALIMPLEMENTATION QPointH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPointH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPointH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QRangeControlH;
class PASCALIMPLEMENTATION QRangeControlH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QRangeControlH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QRangeControlH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QRectH;
class PASCALIMPLEMENTATION QRectH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QRectH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QRectH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QRegExpH;
class PASCALIMPLEMENTATION QRegExpH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QRegExpH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QRegExpH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QRegionH;
class PASCALIMPLEMENTATION QRegionH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QRegionH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QRegionH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSharedH;
class PASCALIMPLEMENTATION QSharedH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSharedH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSharedH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGLayoutIteratorH;
class PASCALIMPLEMENTATION QGLayoutIteratorH : public QSharedH 
{
	typedef QSharedH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGLayoutIteratorH(void) : QSharedH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGLayoutIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSimpleRichTextH;
class PASCALIMPLEMENTATION QSimpleRichTextH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSimpleRichTextH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSimpleRichTextH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSizeH;
class PASCALIMPLEMENTATION QSizeH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSizeH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSizeH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSizePolicyH;
class PASCALIMPLEMENTATION QSizePolicyH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSizePolicyH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSizePolicyH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSocketAddressH;
class PASCALIMPLEMENTATION QSocketAddressH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSocketAddressH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSocketAddressH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStringH;
class PASCALIMPLEMENTATION QStringH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStringH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStringH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QConstStringH;
class PASCALIMPLEMENTATION QConstStringH : public QStringH 
{
	typedef QStringH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QConstStringH(void) : QStringH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QConstStringH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QtH;
class PASCALIMPLEMENTATION QtH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QtH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QtH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QBrushH;
class PASCALIMPLEMENTATION QBrushH : public QtH 
{
	typedef QtH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QBrushH(void) : QtH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QBrushH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QEventH;
class PASCALIMPLEMENTATION QEventH : public QtH 
{
	typedef QtH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QEventH(void) : QtH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QChildEventH;
class PASCALIMPLEMENTATION QChildEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QChildEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QChildEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCloseEventH;
class PASCALIMPLEMENTATION QCloseEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCloseEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCloseEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCustomEventH;
class PASCALIMPLEMENTATION QCustomEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCustomEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCustomEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDragLeaveEventH;
class PASCALIMPLEMENTATION QDragLeaveEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDragLeaveEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDragLeaveEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDragResponseEventH;
class PASCALIMPLEMENTATION QDragResponseEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDragResponseEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDragResponseEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDropEventH;
class PASCALIMPLEMENTATION QDropEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDropEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDropEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDragMoveEventH;
class PASCALIMPLEMENTATION QDragMoveEventH : public QDropEventH 
{
	typedef QDropEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDragMoveEventH(void) : QDropEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDragMoveEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDragEnterEventH;
class PASCALIMPLEMENTATION QDragEnterEventH : public QDragMoveEventH 
{
	typedef QDragMoveEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDragEnterEventH(void) : QDragMoveEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDragEnterEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFocusEventH;
class PASCALIMPLEMENTATION QFocusEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFocusEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFocusEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHideEventH;
class PASCALIMPLEMENTATION QHideEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHideEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHideEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QKeyEventH;
class PASCALIMPLEMENTATION QKeyEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QKeyEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QKeyEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMouseEventH;
class PASCALIMPLEMENTATION QMouseEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMouseEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMouseEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMoveEventH;
class PASCALIMPLEMENTATION QMoveEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMoveEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMoveEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPaintEventH;
class PASCALIMPLEMENTATION QPaintEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPaintEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPaintEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QResizeEventH;
class PASCALIMPLEMENTATION QResizeEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QResizeEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QResizeEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QShowEventH;
class PASCALIMPLEMENTATION QShowEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QShowEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QShowEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTimerEventH;
class PASCALIMPLEMENTATION QTimerEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTimerEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTimerEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWheelEventH;
class PASCALIMPLEMENTATION QWheelEventH : public QEventH 
{
	typedef QEventH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWheelEventH(void) : QEventH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWheelEventH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIconViewItemH;
class PASCALIMPLEMENTATION QIconViewItemH : public QtH 
{
	typedef QtH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIconViewItemH(void) : QtH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIconViewItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxIconViewItemH;
class PASCALIMPLEMENTATION QClxIconViewItemH : public QIconViewItemH 
{
	typedef QIconViewItemH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxIconViewItemH(void) : QIconViewItemH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxIconViewItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListViewItemH;
class PASCALIMPLEMENTATION QListViewItemH : public QtH 
{
	typedef QtH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListViewItemH(void) : QtH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListViewItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxListViewItemH;
class PASCALIMPLEMENTATION QClxListViewItemH : public QListViewItemH 
{
	typedef QListViewItemH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxListViewItemH(void) : QListViewItemH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxListViewItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCheckListItemH;
class PASCALIMPLEMENTATION QCheckListItemH : public QListViewItemH 
{
	typedef QListViewItemH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCheckListItemH(void) : QListViewItemH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCheckListItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxCheckListItemH;
class PASCALIMPLEMENTATION QClxCheckListItemH : public QCheckListItemH 
{
	typedef QCheckListItemH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxCheckListItemH(void) : QCheckListItemH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxCheckListItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QObjectH;
class PASCALIMPLEMENTATION QObjectH : public QtH 
{
	typedef QtH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QObjectH(void) : QtH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QObjectH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QAccelH;
class PASCALIMPLEMENTATION QAccelH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QAccelH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QAccelH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QApplicationH;
class PASCALIMPLEMENTATION QApplicationH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QApplicationH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QApplicationH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxApplicationH;
class PASCALIMPLEMENTATION QClxApplicationH : public QApplicationH 
{
	typedef QApplicationH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxApplicationH(void) : QApplicationH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxApplicationH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QXtApplicationH;
class PASCALIMPLEMENTATION QXtApplicationH : public QApplicationH 
{
	typedef QApplicationH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QXtApplicationH(void) : QApplicationH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QXtApplicationH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClipboardH;
class PASCALIMPLEMENTATION QClipboardH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClipboardH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClipboardH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDataPumpH;
class PASCALIMPLEMENTATION QDataPumpH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDataPumpH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDataPumpH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDragObjectH;
class PASCALIMPLEMENTATION QDragObjectH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDragObjectH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDragObjectH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxDragObjectH;
class PASCALIMPLEMENTATION QClxDragObjectH : public QDragObjectH 
{
	typedef QDragObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxDragObjectH(void) : QDragObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxDragObjectH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIconDragH;
class PASCALIMPLEMENTATION QIconDragH : public QDragObjectH 
{
	typedef QDragObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIconDragH(void) : QDragObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIconDragH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QImageDragH;
class PASCALIMPLEMENTATION QImageDragH : public QDragObjectH 
{
	typedef QDragObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QImageDragH(void) : QDragObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QImageDragH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStoredDragH;
class PASCALIMPLEMENTATION QStoredDragH : public QDragObjectH 
{
	typedef QDragObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStoredDragH(void) : QDragObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStoredDragH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QUriDragH;
class PASCALIMPLEMENTATION QUriDragH : public QStoredDragH 
{
	typedef QStoredDragH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QUriDragH(void) : QStoredDragH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QUriDragH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QColorDragH;
class PASCALIMPLEMENTATION QColorDragH : public QStoredDragH 
{
	typedef QStoredDragH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QColorDragH(void) : QStoredDragH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QColorDragH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextDragH;
class PASCALIMPLEMENTATION QTextDragH : public QDragObjectH 
{
	typedef QDragObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextDragH(void) : QDragObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextDragH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFileIconProviderH;
class PASCALIMPLEMENTATION QFileIconProviderH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFileIconProviderH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFileIconProviderH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxFileIconProviderH;
class PASCALIMPLEMENTATION QClxFileIconProviderH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxFileIconProviderH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxFileIconProviderH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QLayoutH;
class PASCALIMPLEMENTATION QLayoutH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QLayoutH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QLayoutH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QBoxLayoutH;
class PASCALIMPLEMENTATION QBoxLayoutH : public QLayoutH 
{
	typedef QLayoutH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QBoxLayoutH(void) : QLayoutH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QBoxLayoutH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHBoxLayoutH;
class PASCALIMPLEMENTATION QHBoxLayoutH : public QBoxLayoutH 
{
	typedef QBoxLayoutH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHBoxLayoutH(void) : QBoxLayoutH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHBoxLayoutH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QVBoxLayoutH;
class PASCALIMPLEMENTATION QVBoxLayoutH : public QBoxLayoutH 
{
	typedef QBoxLayoutH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QVBoxLayoutH(void) : QBoxLayoutH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QVBoxLayoutH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGridLayoutH;
class PASCALIMPLEMENTATION QGridLayoutH : public QLayoutH 
{
	typedef QLayoutH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGridLayoutH(void) : QLayoutH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGridLayoutH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QNPInstanceH;
class PASCALIMPLEMENTATION QNPInstanceH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QNPInstanceH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QNPInstanceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QServerSocketH;
class PASCALIMPLEMENTATION QServerSocketH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QServerSocketH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QServerSocketH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSessionManagerH;
class PASCALIMPLEMENTATION QSessionManagerH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSessionManagerH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSessionManagerH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSignalH;
class PASCALIMPLEMENTATION QSignalH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSignalH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSignalH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSignalMapperH;
class PASCALIMPLEMENTATION QSignalMapperH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSignalMapperH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSignalMapperH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSocketH;
class PASCALIMPLEMENTATION QSocketH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSocketH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSocketH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSocketNotifierH;
class PASCALIMPLEMENTATION QSocketNotifierH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSocketNotifierH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSocketNotifierH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStyleH;
class PASCALIMPLEMENTATION QStyleH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStyleH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStyleH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCommonStyleH;
class PASCALIMPLEMENTATION QCommonStyleH : public QStyleH 
{
	typedef QStyleH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCommonStyleH(void) : QStyleH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCommonStyleH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMotifStyleH;
class PASCALIMPLEMENTATION QMotifStyleH : public QCommonStyleH 
{
	typedef QCommonStyleH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMotifStyleH(void) : QCommonStyleH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMotifStyleH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCDEStyleH;
class PASCALIMPLEMENTATION QCDEStyleH : public QMotifStyleH 
{
	typedef QMotifStyleH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCDEStyleH(void) : QMotifStyleH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCDEStyleH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWindowsStyleH;
class PASCALIMPLEMENTATION QWindowsStyleH : public QCommonStyleH 
{
	typedef QCommonStyleH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWindowsStyleH(void) : QCommonStyleH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWindowsStyleH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPlatinumStyleH;
class PASCALIMPLEMENTATION QPlatinumStyleH : public QWindowsStyleH 
{
	typedef QWindowsStyleH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPlatinumStyleH(void) : QWindowsStyleH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPlatinumStyleH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxStyleH;
class PASCALIMPLEMENTATION QClxStyleH : public QStyleH 
{
	typedef QStyleH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxStyleH(void) : QStyleH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxStyleH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStyleSheetH;
class PASCALIMPLEMENTATION QStyleSheetH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStyleSheetH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStyleSheetH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTimerH;
class PASCALIMPLEMENTATION QTimerH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTimerH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTimerH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QToolTipGroupH;
class PASCALIMPLEMENTATION QToolTipGroupH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QToolTipGroupH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QToolTipGroupH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTranslatorH;
class PASCALIMPLEMENTATION QTranslatorH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTranslatorH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTranslatorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QAppTranslatorH;
class PASCALIMPLEMENTATION QAppTranslatorH : public QTranslatorH 
{
	typedef QTranslatorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QAppTranslatorH(void) : QTranslatorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QAppTranslatorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QValidatorH;
class PASCALIMPLEMENTATION QValidatorH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QValidatorH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QValidatorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDoubleValidatorH;
class PASCALIMPLEMENTATION QDoubleValidatorH : public QValidatorH 
{
	typedef QValidatorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDoubleValidatorH(void) : QValidatorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDoubleValidatorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIntValidatorH;
class PASCALIMPLEMENTATION QIntValidatorH : public QValidatorH 
{
	typedef QValidatorH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIntValidatorH(void) : QValidatorH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIntValidatorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWidgetH;
class PASCALIMPLEMENTATION QWidgetH : public QObjectH 
{
	typedef QObjectH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWidgetH(void) : QObjectH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWidgetH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QButtonH;
class PASCALIMPLEMENTATION QButtonH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QButtonH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QButtonH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCheckBoxH;
class PASCALIMPLEMENTATION QCheckBoxH : public QButtonH 
{
	typedef QButtonH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCheckBoxH(void) : QButtonH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCheckBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPushButtonH;
class PASCALIMPLEMENTATION QPushButtonH : public QButtonH 
{
	typedef QButtonH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPushButtonH(void) : QButtonH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPushButtonH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxBitBtnH;
class PASCALIMPLEMENTATION QClxBitBtnH : public QPushButtonH 
{
	typedef QPushButtonH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxBitBtnH(void) : QPushButtonH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxBitBtnH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QRadioButtonH;
class PASCALIMPLEMENTATION QRadioButtonH : public QButtonH 
{
	typedef QButtonH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QRadioButtonH(void) : QButtonH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QRadioButtonH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QToolButtonH;
class PASCALIMPLEMENTATION QToolButtonH : public QButtonH 
{
	typedef QButtonH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QToolButtonH(void) : QButtonH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QToolButtonH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QOpenWidgetH;
class PASCALIMPLEMENTATION QOpenWidgetH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QOpenWidgetH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QOpenWidgetH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QComboBoxH;
class PASCALIMPLEMENTATION QComboBoxH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QComboBoxH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QComboBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QOpenComboBoxH;
class PASCALIMPLEMENTATION QOpenComboBoxH : public QComboBoxH 
{
	typedef QComboBoxH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QOpenComboBoxH(void) : QComboBoxH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QOpenComboBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDialogH;
class PASCALIMPLEMENTATION QDialogH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDialogH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDialogH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QColorDialogH;
class PASCALIMPLEMENTATION QColorDialogH : public QDialogH 
{
	typedef QDialogH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QColorDialogH(void) : QDialogH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QColorDialogH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFileDialogH;
class PASCALIMPLEMENTATION QFileDialogH : public QDialogH 
{
	typedef QDialogH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFileDialogH(void) : QDialogH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFileDialogH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxFileDialogH;
class PASCALIMPLEMENTATION QClxFileDialogH : public QDialogH 
{
	typedef QDialogH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxFileDialogH(void) : QDialogH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxFileDialogH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFontDialogH;
class PASCALIMPLEMENTATION QFontDialogH : public QDialogH 
{
	typedef QDialogH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFontDialogH(void) : QDialogH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFontDialogH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMessageBoxH;
class PASCALIMPLEMENTATION QMessageBoxH : public QDialogH 
{
	typedef QDialogH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMessageBoxH(void) : QDialogH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMessageBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTabDialogH;
class PASCALIMPLEMENTATION QTabDialogH : public QDialogH 
{
	typedef QDialogH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTabDialogH(void) : QDialogH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTabDialogH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWizardH;
class PASCALIMPLEMENTATION QWizardH : public QDialogH 
{
	typedef QDialogH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWizardH(void) : QDialogH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWizardH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPrintDialogH;
class PASCALIMPLEMENTATION QPrintDialogH : public QDialogH 
{
	typedef QDialogH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPrintDialogH(void) : QDialogH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPrintDialogH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTranslatorDialogH;
class PASCALIMPLEMENTATION QTranslatorDialogH : public QDialogH 
{
	typedef QDialogH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTranslatorDialogH(void) : QDialogH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTranslatorDialogH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFrameH;
class PASCALIMPLEMENTATION QFrameH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFrameH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFrameH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGridH;
class PASCALIMPLEMENTATION QGridH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGridH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGridH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGroupBoxH;
class PASCALIMPLEMENTATION QGroupBoxH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGroupBoxH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGroupBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QButtonGroupH;
class PASCALIMPLEMENTATION QButtonGroupH : public QGroupBoxH 
{
	typedef QGroupBoxH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QButtonGroupH(void) : QGroupBoxH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QButtonGroupH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHButtonGroupH;
class PASCALIMPLEMENTATION QHButtonGroupH : public QButtonGroupH 
{
	typedef QButtonGroupH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHButtonGroupH(void) : QButtonGroupH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHButtonGroupH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QVButtonGroupH;
class PASCALIMPLEMENTATION QVButtonGroupH : public QButtonGroupH 
{
	typedef QButtonGroupH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QVButtonGroupH(void) : QButtonGroupH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QVButtonGroupH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHGroupBoxH;
class PASCALIMPLEMENTATION QHGroupBoxH : public QGroupBoxH 
{
	typedef QGroupBoxH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHGroupBoxH(void) : QGroupBoxH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHGroupBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QVGroupBoxH;
class PASCALIMPLEMENTATION QVGroupBoxH : public QGroupBoxH 
{
	typedef QGroupBoxH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QVGroupBoxH(void) : QGroupBoxH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QVGroupBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHBoxH;
class PASCALIMPLEMENTATION QHBoxH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHBoxH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QVBoxH;
class PASCALIMPLEMENTATION QVBoxH : public QHBoxH 
{
	typedef QHBoxH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QVBoxH(void) : QHBoxH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QVBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QLCDNumberH;
class PASCALIMPLEMENTATION QLCDNumberH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QLCDNumberH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QLCDNumberH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QLabelH;
class PASCALIMPLEMENTATION QLabelH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QLabelH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QLabelH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMenuBarH;
class PASCALIMPLEMENTATION QMenuBarH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMenuBarH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMenuBarH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPopupMenuH;
class PASCALIMPLEMENTATION QPopupMenuH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPopupMenuH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPopupMenuH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QProgressBarH;
class PASCALIMPLEMENTATION QProgressBarH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QProgressBarH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QProgressBarH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QScrollViewH;
class PASCALIMPLEMENTATION QScrollViewH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QScrollViewH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QScrollViewH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QOpenScrollViewH;
class PASCALIMPLEMENTATION QOpenScrollViewH : public QScrollViewH 
{
	typedef QScrollViewH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QOpenScrollViewH(void) : QScrollViewH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QOpenScrollViewH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIconViewH;
class PASCALIMPLEMENTATION QIconViewH : public QScrollViewH 
{
	typedef QScrollViewH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIconViewH(void) : QScrollViewH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIconViewH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListBoxH;
class PASCALIMPLEMENTATION QListBoxH : public QScrollViewH 
{
	typedef QScrollViewH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListBoxH(void) : QScrollViewH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListViewH;
class PASCALIMPLEMENTATION QListViewH : public QScrollViewH 
{
	typedef QScrollViewH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListViewH(void) : QScrollViewH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListViewH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextViewH;
class PASCALIMPLEMENTATION QTextViewH : public QScrollViewH 
{
	typedef QScrollViewH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextViewH(void) : QScrollViewH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextViewH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextEditH;
class PASCALIMPLEMENTATION QTextEditH : public QTextViewH 
{
	typedef QTextViewH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextEditH(void) : QTextViewH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextEditH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextBrowserH;
class PASCALIMPLEMENTATION QTextBrowserH : public QTextViewH 
{
	typedef QTextViewH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextBrowserH(void) : QTextViewH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextBrowserH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSpinBoxH;
class PASCALIMPLEMENTATION QSpinBoxH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSpinBoxH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSpinBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxSpinBoxH;
class PASCALIMPLEMENTATION QClxSpinBoxH : public QSpinBoxH 
{
	typedef QSpinBoxH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxSpinBoxH(void) : QSpinBoxH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxSpinBoxH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSplitterH;
class PASCALIMPLEMENTATION QSplitterH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSplitterH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSplitterH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTableViewH;
class PASCALIMPLEMENTATION QTableViewH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTableViewH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTableViewH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QOpenTableViewH;
class PASCALIMPLEMENTATION QOpenTableViewH : public QTableViewH 
{
	typedef QTableViewH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QOpenTableViewH(void) : QTableViewH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QOpenTableViewH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMultiLineEditH;
class PASCALIMPLEMENTATION QMultiLineEditH : public QOpenTableViewH 
{
	typedef QOpenTableViewH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMultiLineEditH(void) : QOpenTableViewH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMultiLineEditH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QOpenMultiLineEditH;
class PASCALIMPLEMENTATION QOpenMultiLineEditH : public QMultiLineEditH 
{
	typedef QMultiLineEditH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QOpenMultiLineEditH(void) : QMultiLineEditH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QOpenMultiLineEditH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWidgetStackH;
class PASCALIMPLEMENTATION QWidgetStackH : public QFrameH 
{
	typedef QFrameH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWidgetStackH(void) : QFrameH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWidgetStackH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGLWidgetH;
class PASCALIMPLEMENTATION QGLWidgetH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGLWidgetH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGLWidgetH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHeaderH;
class PASCALIMPLEMENTATION QHeaderH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHeaderH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHeaderH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QLineEditH;
class PASCALIMPLEMENTATION QLineEditH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QLineEditH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QLineEditH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxLineEditH;
class PASCALIMPLEMENTATION QClxLineEditH : public QLineEditH 
{
	typedef QLineEditH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxLineEditH(void) : QLineEditH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxLineEditH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QRenameEditH;
class PASCALIMPLEMENTATION QRenameEditH : public QLineEditH 
{
	typedef QLineEditH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QRenameEditH(void) : QLineEditH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QRenameEditH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMainWindowH;
class PASCALIMPLEMENTATION QMainWindowH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMainWindowH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMainWindowH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QNPWidgetH;
class PASCALIMPLEMENTATION QNPWidgetH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QNPWidgetH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QNPWidgetH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QScrollBarH;
class PASCALIMPLEMENTATION QScrollBarH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QScrollBarH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QScrollBarH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSemiModalH;
class PASCALIMPLEMENTATION QSemiModalH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSemiModalH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSemiModalH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QProgressDialogH;
class PASCALIMPLEMENTATION QProgressDialogH : public QSemiModalH 
{
	typedef QSemiModalH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QProgressDialogH(void) : QSemiModalH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QProgressDialogH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSizeGripH;
class PASCALIMPLEMENTATION QSizeGripH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSizeGripH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSizeGripH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSliderH;
class PASCALIMPLEMENTATION QSliderH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSliderH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSliderH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxSliderH;
class PASCALIMPLEMENTATION QClxSliderH : public QSliderH 
{
	typedef QSliderH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxSliderH(void) : QSliderH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxSliderH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStatusBarH;
class PASCALIMPLEMENTATION QStatusBarH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStatusBarH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStatusBarH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTabBarH;
class PASCALIMPLEMENTATION QTabBarH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTabBarH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTabBarH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTabWidgetH;
class PASCALIMPLEMENTATION QTabWidgetH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTabWidgetH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTabWidgetH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QToolBarH;
class PASCALIMPLEMENTATION QToolBarH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QToolBarH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QToolBarH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QXtWidgetH;
class PASCALIMPLEMENTATION QXtWidgetH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QXtWidgetH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QXtWidgetH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWorkspaceH;
class PASCALIMPLEMENTATION QWorkspaceH : public QWidgetH 
{
	typedef QWidgetH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWorkspaceH(void) : QWidgetH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWorkspaceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxWorkspaceH;
class PASCALIMPLEMENTATION QClxWorkspaceH : public QWorkspaceH 
{
	typedef QWorkspaceH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxWorkspaceH(void) : QWorkspaceH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxWorkspaceH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPainterH;
class PASCALIMPLEMENTATION QPainterH : public QtH 
{
	typedef QtH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPainterH(void) : QtH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPainterH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPenH;
class PASCALIMPLEMENTATION QPenH : public QtH 
{
	typedef QtH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPenH(void) : QtH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPenH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStyleSheetItemH;
class PASCALIMPLEMENTATION QStyleSheetItemH : public QtH 
{
	typedef QtH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStyleSheetItemH(void) : QtH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStyleSheetItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QToolTipH;
class PASCALIMPLEMENTATION QToolTipH : public QtH 
{
	typedef QtH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QToolTipH(void) : QtH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QToolTipH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWhatsThisH;
class PASCALIMPLEMENTATION QWhatsThisH : public QtH 
{
	typedef QtH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWhatsThisH(void) : QtH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWhatsThisH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTabH;
class PASCALIMPLEMENTATION QTabH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTabH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTabH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextCodecH;
class PASCALIMPLEMENTATION QTextCodecH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextCodecH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextCodecH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextDecoderH;
class PASCALIMPLEMENTATION QTextDecoderH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextDecoderH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextDecoderH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextEncoderH;
class PASCALIMPLEMENTATION QTextEncoderH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextEncoderH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextEncoderH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextStreamH;
class PASCALIMPLEMENTATION QTextStreamH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextStreamH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextStreamH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextIStreamH;
class PASCALIMPLEMENTATION QTextIStreamH : public QTextStreamH 
{
	typedef QTextStreamH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextIStreamH(void) : QTextStreamH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextIStreamH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextOStreamH;
class PASCALIMPLEMENTATION QTextOStreamH : public QTextStreamH 
{
	typedef QTextStreamH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextOStreamH(void) : QTextStreamH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextOStreamH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTimeH;
class PASCALIMPLEMENTATION QTimeH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTimeH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTimeH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTranslatorMessageH;
class PASCALIMPLEMENTATION QTranslatorMessageH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTranslatorMessageH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTranslatorMessageH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QValueListH;
class PASCALIMPLEMENTATION QValueListH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QValueListH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QValueListH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QValueListConstIteratorH;
class PASCALIMPLEMENTATION QValueListConstIteratorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QValueListConstIteratorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QValueListConstIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QValueListIteratorH;
class PASCALIMPLEMENTATION QValueListIteratorH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QValueListIteratorH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QValueListIteratorH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWMatrixH;
class PASCALIMPLEMENTATION QWMatrixH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWMatrixH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWMatrixH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWidgetMapperH;
class PASCALIMPLEMENTATION QWidgetMapperH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWidgetMapperH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWidgetMapperH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStringListH;
class PASCALIMPLEMENTATION QStringListH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStringListH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStringListH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QOpenStringListH;
class PASCALIMPLEMENTATION QOpenStringListH : public QStringListH 
{
	typedef QStringListH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QOpenStringListH(void) : QStringListH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QOpenStringListH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFileInfoListH;
class PASCALIMPLEMENTATION QFileInfoListH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFileInfoListH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFileInfoListH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QBitArrayH;
class PASCALIMPLEMENTATION QBitArrayH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QBitArrayH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QBitArrayH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QByteArrayH;
class PASCALIMPLEMENTATION QByteArrayH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QByteArrayH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QByteArrayH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMapPrivateBaseH;
class PASCALIMPLEMENTATION QMapPrivateBaseH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMapPrivateBaseH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMapPrivateBaseH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMapNodeBaseH;
class PASCALIMPLEMENTATION QMapNodeBaseH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMapNodeBaseH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMapNodeBaseH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMenuItemH;
class PASCALIMPLEMENTATION QMenuItemH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMenuItemH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMenuItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMetaObjectH;
class PASCALIMPLEMENTATION QMetaObjectH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMetaObjectH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMetaObjectH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QObjectListH;
class PASCALIMPLEMENTATION QObjectListH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QObjectListH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QObjectListH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextNodeH;
class PASCALIMPLEMENTATION QTextNodeH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextNodeH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextNodeH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPNGImageWriterH;
class PASCALIMPLEMENTATION QPNGImageWriterH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPNGImageWriterH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPNGImageWriterH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPNGImagePackerH;
class PASCALIMPLEMENTATION QPNGImagePackerH : public QPNGImageWriterH 
{
	typedef QPNGImageWriterH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPNGImagePackerH(void) : QPNGImageWriterH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPNGImagePackerH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFilePreviewH;
class PASCALIMPLEMENTATION QFilePreviewH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFilePreviewH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFilePreviewH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxFilePreviewH;
class PASCALIMPLEMENTATION QClxFilePreviewH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxFilePreviewH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxFilePreviewH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QImageTextKeyLangH;
class PASCALIMPLEMENTATION QImageTextKeyLangH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QImageTextKeyLangH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QImageTextKeyLangH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCustomMenuItemH;
class PASCALIMPLEMENTATION QCustomMenuItemH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCustomMenuItemH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCustomMenuItemH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxStyleHooksH;
class PASCALIMPLEMENTATION QClxStyleHooksH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxStyleHooksH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxStyleHooksH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxListBoxHooksH;
class PASCALIMPLEMENTATION QClxListBoxHooksH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxListBoxHooksH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxListBoxHooksH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxListViewHooksH;
class PASCALIMPLEMENTATION QClxListViewHooksH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxListViewHooksH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxListViewHooksH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxIconViewHooksH;
class PASCALIMPLEMENTATION QClxIconViewHooksH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxIconViewHooksH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxIconViewHooksH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QObject_hookH;
class PASCALIMPLEMENTATION QObject_hookH : public System::TObject 
{
	typedef System::TObject inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QObject_hookH(void) : System::TObject() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QObject_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxWorkspace_hookH;
class PASCALIMPLEMENTATION QClxWorkspace_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxWorkspace_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxWorkspace_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QAccel_hookH;
class PASCALIMPLEMENTATION QAccel_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QAccel_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QAccel_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QToolTip_hookH;
class PASCALIMPLEMENTATION QToolTip_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QToolTip_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QToolTip_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWidget_hookH;
class PASCALIMPLEMENTATION QWidget_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWidget_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWidget_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QButton_hookH;
class PASCALIMPLEMENTATION QButton_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QButton_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QButton_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCheckBox_hookH;
class PASCALIMPLEMENTATION QCheckBox_hookH : public QButton_hookH 
{
	typedef QButton_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCheckBox_hookH(void) : QButton_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCheckBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPushButton_hookH;
class PASCALIMPLEMENTATION QPushButton_hookH : public QButton_hookH 
{
	typedef QButton_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPushButton_hookH(void) : QButton_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPushButton_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QRadioButton_hookH;
class PASCALIMPLEMENTATION QRadioButton_hookH : public QButton_hookH 
{
	typedef QButton_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QRadioButton_hookH(void) : QButton_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QRadioButton_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QToolButton_hookH;
class PASCALIMPLEMENTATION QToolButton_hookH : public QButton_hookH 
{
	typedef QButton_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QToolButton_hookH(void) : QButton_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QToolButton_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QComboBox_hookH;
class PASCALIMPLEMENTATION QComboBox_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QComboBox_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QComboBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHeader_hookH;
class PASCALIMPLEMENTATION QHeader_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHeader_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHeader_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QLineEdit_hookH;
class PASCALIMPLEMENTATION QLineEdit_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QLineEdit_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QLineEdit_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QRenameEdit_hookH;
class PASCALIMPLEMENTATION QRenameEdit_hookH : public QLineEdit_hookH 
{
	typedef QLineEdit_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QRenameEdit_hookH(void) : QLineEdit_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QRenameEdit_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMainWindow_hookH;
class PASCALIMPLEMENTATION QMainWindow_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMainWindow_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMainWindow_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSlider_hookH;
class PASCALIMPLEMENTATION QSlider_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSlider_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSlider_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTabBar_hookH;
class PASCALIMPLEMENTATION QTabBar_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTabBar_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTabBar_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSpinBox_hookH;
class PASCALIMPLEMENTATION QSpinBox_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSpinBox_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSpinBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTabWidget_hookH;
class PASCALIMPLEMENTATION QTabWidget_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTabWidget_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTabWidget_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFrame_hookH;
class PASCALIMPLEMENTATION QFrame_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFrame_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFrame_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGroupBox_hookH;
class PASCALIMPLEMENTATION QGroupBox_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGroupBox_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGroupBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QButtonGroup_hookH;
class PASCALIMPLEMENTATION QButtonGroup_hookH : public QGroupBox_hookH 
{
	typedef QGroupBox_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QButtonGroup_hookH(void) : QGroupBox_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QButtonGroup_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHButtonGroup_hookH;
class PASCALIMPLEMENTATION QHButtonGroup_hookH : public QButtonGroup_hookH 
{
	typedef QButtonGroup_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHButtonGroup_hookH(void) : QButtonGroup_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHButtonGroup_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QVButtonGroup_hookH;
class PASCALIMPLEMENTATION QVButtonGroup_hookH : public QButtonGroup_hookH 
{
	typedef QButtonGroup_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QVButtonGroup_hookH(void) : QButtonGroup_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QVButtonGroup_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHGroupBox_hookH;
class PASCALIMPLEMENTATION QHGroupBox_hookH : public QGroupBox_hookH 
{
	typedef QGroupBox_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHGroupBox_hookH(void) : QGroupBox_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHGroupBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QVGroupBox_hookH;
class PASCALIMPLEMENTATION QVGroupBox_hookH : public QGroupBox_hookH 
{
	typedef QGroupBox_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QVGroupBox_hookH(void) : QGroupBox_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QVGroupBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QGrid_hookH;
class PASCALIMPLEMENTATION QGrid_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QGrid_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QGrid_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QLCDNumber_hookH;
class PASCALIMPLEMENTATION QLCDNumber_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QLCDNumber_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QLCDNumber_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPopupMenu_hookH;
class PASCALIMPLEMENTATION QPopupMenu_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPopupMenu_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPopupMenu_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMenuBar_hookH;
class PASCALIMPLEMENTATION QMenuBar_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMenuBar_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMenuBar_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWidgetStack_hookH;
class PASCALIMPLEMENTATION QWidgetStack_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWidgetStack_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWidgetStack_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTableView_hookH;
class PASCALIMPLEMENTATION QTableView_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTableView_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTableView_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMultiLineEdit_hookH;
class PASCALIMPLEMENTATION QMultiLineEdit_hookH : public QTableView_hookH 
{
	typedef QTableView_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMultiLineEdit_hookH(void) : QTableView_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMultiLineEdit_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWellArray_hookH;
class PASCALIMPLEMENTATION QWellArray_hookH : public QTableView_hookH 
{
	typedef QTableView_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWellArray_hookH(void) : QTableView_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWellArray_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QScrollView_hookH;
class PASCALIMPLEMENTATION QScrollView_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QScrollView_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QScrollView_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIconView_hookH;
class PASCALIMPLEMENTATION QIconView_hookH : public QScrollView_hookH 
{
	typedef QScrollView_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIconView_hookH(void) : QScrollView_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIconView_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListBox_hookH;
class PASCALIMPLEMENTATION QListBox_hookH : public QScrollView_hookH 
{
	typedef QScrollView_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListBox_hookH(void) : QScrollView_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFileListBox_hookH;
class PASCALIMPLEMENTATION QFileListBox_hookH : public QListBox_hookH 
{
	typedef QListBox_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFileListBox_hookH(void) : QListBox_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFileListBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListView_hookH;
class PASCALIMPLEMENTATION QListView_hookH : public QScrollView_hookH 
{
	typedef QScrollView_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListView_hookH(void) : QScrollView_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListView_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFileListView_hookH;
class PASCALIMPLEMENTATION QFileListView_hookH : public QListView_hookH 
{
	typedef QListView_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFileListView_hookH(void) : QListView_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFileListView_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextView_hookH;
class PASCALIMPLEMENTATION QTextView_hookH : public QScrollView_hookH 
{
	typedef QScrollView_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextView_hookH(void) : QScrollView_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextView_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextEdit_hookH;
class PASCALIMPLEMENTATION QTextEdit_hookH : public QTextView_hookH 
{
	typedef QTextView_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextEdit_hookH(void) : QTextView_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextEdit_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextBrowser_hookH;
class PASCALIMPLEMENTATION QTextBrowser_hookH : public QTextView_hookH 
{
	typedef QTextView_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextBrowser_hookH(void) : QTextView_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextBrowser_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSplitter_hookH;
class PASCALIMPLEMENTATION QSplitter_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSplitter_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSplitter_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHBox_hookH;
class PASCALIMPLEMENTATION QHBox_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHBox_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QVBox_hookH;
class PASCALIMPLEMENTATION QVBox_hookH : public QHBox_hookH 
{
	typedef QHBox_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QVBox_hookH(void) : QHBox_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QVBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QLabel_hookH;
class PASCALIMPLEMENTATION QLabel_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QLabel_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QLabel_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QProgressBar_hookH;
class PASCALIMPLEMENTATION QProgressBar_hookH : public QFrame_hookH 
{
	typedef QFrame_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QProgressBar_hookH(void) : QFrame_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QProgressBar_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDialog_hookH;
class PASCALIMPLEMENTATION QDialog_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDialog_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDialog_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFontDialog_hookH;
class PASCALIMPLEMENTATION QFontDialog_hookH : public QDialog_hookH 
{
	typedef QDialog_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFontDialog_hookH(void) : QDialog_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFontDialog_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFileDialog_hookH;
class PASCALIMPLEMENTATION QFileDialog_hookH : public QDialog_hookH 
{
	typedef QDialog_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFileDialog_hookH(void) : QDialog_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFileDialog_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxFileDialog_hookH;
class PASCALIMPLEMENTATION QClxFileDialog_hookH : public QDialog_hookH 
{
	typedef QDialog_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxFileDialog_hookH(void) : QDialog_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxFileDialog_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWizard_hookH;
class PASCALIMPLEMENTATION QWizard_hookH : public QDialog_hookH 
{
	typedef QDialog_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWizard_hookH(void) : QDialog_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWizard_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMessageBox_hookH;
class PASCALIMPLEMENTATION QMessageBox_hookH : public QDialog_hookH 
{
	typedef QDialog_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMessageBox_hookH(void) : QDialog_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMessageBox_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QColorDialog_hookH;
class PASCALIMPLEMENTATION QColorDialog_hookH : public QDialog_hookH 
{
	typedef QDialog_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QColorDialog_hookH(void) : QDialog_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QColorDialog_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSemiModal_hookH;
class PASCALIMPLEMENTATION QSemiModal_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSemiModal_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSemiModal_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QProgressDialog_hookH;
class PASCALIMPLEMENTATION QProgressDialog_hookH : public QSemiModal_hookH 
{
	typedef QSemiModal_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QProgressDialog_hookH(void) : QSemiModal_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QProgressDialog_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QScrollBar_hookH;
class PASCALIMPLEMENTATION QScrollBar_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QScrollBar_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QScrollBar_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSizeGrip_hookH;
class PASCALIMPLEMENTATION QSizeGrip_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSizeGrip_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSizeGrip_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStatusBar_hookH;
class PASCALIMPLEMENTATION QStatusBar_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStatusBar_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStatusBar_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QToolBar_hookH;
class PASCALIMPLEMENTATION QToolBar_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QToolBar_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QToolBar_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWorkspace_hookH;
class PASCALIMPLEMENTATION QWorkspace_hookH : public QWidget_hookH 
{
	typedef QWidget_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWorkspace_hookH(void) : QWidget_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWorkspace_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTimer_hookH;
class PASCALIMPLEMENTATION QTimer_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTimer_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTimer_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSocketNotifier_hookH;
class PASCALIMPLEMENTATION QSocketNotifier_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSocketNotifier_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSocketNotifier_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIODevice_hookH;
class PASCALIMPLEMENTATION QIODevice_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIODevice_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIODevice_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSocket_hookH;
class PASCALIMPLEMENTATION QSocket_hookH : public QIODevice_hookH 
{
	typedef QIODevice_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSocket_hookH(void) : QIODevice_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSocket_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSignalMapper_hookH;
class PASCALIMPLEMENTATION QSignalMapper_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSignalMapper_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSignalMapper_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QListViewItem_hookH;
class PASCALIMPLEMENTATION QListViewItem_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QListViewItem_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QListViewItem_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCheckListItem_hookH;
class PASCALIMPLEMENTATION QCheckListItem_hookH : public QListViewItem_hookH 
{
	typedef QListViewItem_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCheckListItem_hookH(void) : QListViewItem_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCheckListItem_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClipboard_hookH;
class PASCALIMPLEMENTATION QClipboard_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClipboard_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClipboard_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QApplication_hookH;
class PASCALIMPLEMENTATION QApplication_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QApplication_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QApplication_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QToolTipGroup_hookH;
class PASCALIMPLEMENTATION QToolTipGroup_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QToolTipGroup_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QToolTipGroup_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSenderObject_hookH;
class PASCALIMPLEMENTATION QSenderObject_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSenderObject_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSenderObject_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QEvent_hookH;
class PASCALIMPLEMENTATION QEvent_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QEvent_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTimerEvent_hookH;
class PASCALIMPLEMENTATION QTimerEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTimerEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTimerEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMouseEvent_hookH;
class PASCALIMPLEMENTATION QMouseEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMouseEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMouseEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWheelEvent_hookH;
class PASCALIMPLEMENTATION QWheelEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWheelEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWheelEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QKeyEvent_hookH;
class PASCALIMPLEMENTATION QKeyEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QKeyEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QKeyEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFocusEvent_hookH;
class PASCALIMPLEMENTATION QFocusEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFocusEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFocusEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPaintEvent_hookH;
class PASCALIMPLEMENTATION QPaintEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPaintEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPaintEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMoveEvent_hookH;
class PASCALIMPLEMENTATION QMoveEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMoveEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMoveEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QResizeEvent_hookH;
class PASCALIMPLEMENTATION QResizeEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QResizeEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QResizeEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCloseEvent_hookH;
class PASCALIMPLEMENTATION QCloseEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCloseEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCloseEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QShowEvent_hookH;
class PASCALIMPLEMENTATION QShowEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QShowEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QShowEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QHideEvent_hookH;
class PASCALIMPLEMENTATION QHideEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QHideEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QHideEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDropEvent_hookH;
class PASCALIMPLEMENTATION QDropEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDropEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDropEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDragMoveEvent_hookH;
class PASCALIMPLEMENTATION QDragMoveEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDragMoveEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDragMoveEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDragEnterEvent_hookH;
class PASCALIMPLEMENTATION QDragEnterEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDragEnterEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDragEnterEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDragResponseEvent_hookH;
class PASCALIMPLEMENTATION QDragResponseEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDragResponseEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDragResponseEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDragLeaveEvent_hookH;
class PASCALIMPLEMENTATION QDragLeaveEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDragLeaveEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDragLeaveEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QChildEvent_hookH;
class PASCALIMPLEMENTATION QChildEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QChildEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QChildEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCustomEvent_hookH;
class PASCALIMPLEMENTATION QCustomEvent_hookH : public QEvent_hookH 
{
	typedef QEvent_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCustomEvent_hookH(void) : QEvent_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCustomEvent_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QFileIconProvider_hookH;
class PASCALIMPLEMENTATION QFileIconProvider_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QFileIconProvider_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QFileIconProvider_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QClxFileIconProvider_hookH;
class PASCALIMPLEMENTATION QClxFileIconProvider_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QClxFileIconProvider_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QClxFileIconProvider_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStyle_hookH;
class PASCALIMPLEMENTATION QStyle_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStyle_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStyle_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCommonStyle_hookH;
class PASCALIMPLEMENTATION QCommonStyle_hookH : public QStyle_hookH 
{
	typedef QStyle_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCommonStyle_hookH(void) : QStyle_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCommonStyle_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QMotifStyle_hookH;
class PASCALIMPLEMENTATION QMotifStyle_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QMotifStyle_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QMotifStyle_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QCDEStyle_hookH;
class PASCALIMPLEMENTATION QCDEStyle_hookH : public QMotifStyle_hookH 
{
	typedef QMotifStyle_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QCDEStyle_hookH(void) : QMotifStyle_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QCDEStyle_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWindowsStyle_hookH;
class PASCALIMPLEMENTATION QWindowsStyle_hookH : public QCommonStyle_hookH 
{
	typedef QCommonStyle_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWindowsStyle_hookH(void) : QCommonStyle_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWindowsStyle_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPlatinumStyle_hookH;
class PASCALIMPLEMENTATION QPlatinumStyle_hookH : public QWindowsStyle_hookH 
{
	typedef QWindowsStyle_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPlatinumStyle_hookH(void) : QWindowsStyle_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPlatinumStyle_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStyleSheetItem_hookH;
class PASCALIMPLEMENTATION QStyleSheetItem_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStyleSheetItem_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStyleSheetItem_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStyleSheet_hookH;
class PASCALIMPLEMENTATION QStyleSheet_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStyleSheet_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStyleSheet_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTranslator_hookH;
class PASCALIMPLEMENTATION QTranslator_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTranslator_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTranslator_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QValidator_hookH;
class PASCALIMPLEMENTATION QValidator_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QValidator_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QValidator_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIntValidator_hookH;
class PASCALIMPLEMENTATION QIntValidator_hookH : public QValidator_hookH 
{
	typedef QValidator_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIntValidator_hookH(void) : QValidator_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIntValidator_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDoubleValidator_hookH;
class PASCALIMPLEMENTATION QDoubleValidator_hookH : public QValidator_hookH 
{
	typedef QValidator_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDoubleValidator_hookH(void) : QValidator_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDoubleValidator_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QBrush_hookH;
class PASCALIMPLEMENTATION QBrush_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QBrush_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QBrush_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPainter_hookH;
class PASCALIMPLEMENTATION QPainter_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPainter_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPainter_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QPen_hookH;
class PASCALIMPLEMENTATION QPen_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QPen_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QPen_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QSignal_hookH;
class PASCALIMPLEMENTATION QSignal_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QSignal_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QSignal_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QWhatsThis_hookH;
class PASCALIMPLEMENTATION QWhatsThis_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QWhatsThis_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QWhatsThis_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIconViewItem_hookH;
class PASCALIMPLEMENTATION QIconViewItem_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIconViewItem_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIconViewItem_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QDragObject_hookH;
class PASCALIMPLEMENTATION QDragObject_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QDragObject_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QDragObject_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QIconDrag_hookH;
class PASCALIMPLEMENTATION QIconDrag_hookH : public QObject_hookH 
{
	typedef QObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QIconDrag_hookH(void) : QObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QIconDrag_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QStoredDrag_hookH;
class PASCALIMPLEMENTATION QStoredDrag_hookH : public QDragObject_hookH 
{
	typedef QDragObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QStoredDrag_hookH(void) : QDragObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QStoredDrag_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QColorDrag_hookH;
class PASCALIMPLEMENTATION QColorDrag_hookH : public QDragObject_hookH 
{
	typedef QDragObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QColorDrag_hookH(void) : QDragObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QColorDrag_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QUriDrag_hookH;
class PASCALIMPLEMENTATION QUriDrag_hookH : public QStoredDrag_hookH 
{
	typedef QStoredDrag_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QUriDrag_hookH(void) : QStoredDrag_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QUriDrag_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QTextDrag_hookH;
class PASCALIMPLEMENTATION QTextDrag_hookH : public QDragObject_hookH 
{
	typedef QDragObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QTextDrag_hookH(void) : QDragObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QTextDrag_hookH(void) { }
	#pragma option pop
	
};


class DELPHICLASS QImageDrag_hookH;
class PASCALIMPLEMENTATION QImageDrag_hookH : public QDragObject_hookH 
{
	typedef QDragObject_hookH inherited;
	
public:
	#pragma option push -w-inl
	/* TObject.Create */ inline __fastcall QImageDrag_hookH(void) : QDragObject_hookH() { }
	#pragma option pop
	#pragma option push -w-inl
	/* TObject.Destroy */ inline __fastcall virtual ~QImageDrag_hookH(void) { }
	#pragma option pop
	
};


typedef QMapNodeBaseH* *QMapNodeBaseHH;

typedef QMenuDataH* *QMenuDataHH;

typedef void *PDisplay;

typedef void *_NPStream;

typedef void * *_NPStreamP;

typedef void *QPropertyH;

typedef void *QSenderObjectH;

#pragma option push -b
enum QMessageBoxButton { NoButton, Ok, Cancel, Yes, No, Abort, Retry, Ignore, ButtonMask = 7, Default = 256, Escape = 512, FlagMask = 768 };
#pragma option pop

#pragma option push -b
enum QWidgetBackgroundMode { QWidgetBackgroundMode_FixedColor, QWidgetBackgroundMode_FixedPixmap, QWidgetBackgroundMode_NoBackground, QWidgetBackgroundMode_PaletteForeground, QWidgetBackgroundMode_PaletteButton, QWidgetBackgroundMode_PaletteLight, QWidgetBackgroundMode_PaletteMidlight, QWidgetBackgroundMode_PaletteDark, QWidgetBackgroundMode_PaletteMid, QWidgetBackgroundMode_PaletteText, QWidgetBackgroundMode_PaletteBrightText, QWidgetBackgroundMode_PaletteBase, QWidgetBackgroundMode_PaletteBackground, QWidgetBackgroundMode_PaletteShadow, QWidgetBackgroundMode_PaletteHighlight, QWidgetBackgroundMode_PaletteHighlightedText, QWidgetBackgroundMode_PaletteButtonText, QWidgetBackgroundMode_X11ParentRelative };
#pragma option pop

#pragma option push -b
enum QWidgetBackgroundOrigin { QWidgetBackgroundOrigin_WidgetOrigin, QWidgetBackgroundOrigin_ParentOrigin };
#pragma option pop

#pragma option push -b
enum QWidgetPropagationMode { QWidgetPropagationMode_NoChildren, QWidgetPropagationMode_AllChildren, QWidgetPropagationMode_SameFont, QWidgetPropagationMode_SamePalette = 2 };
#pragma option pop

#pragma option push -b
enum QWidgetFocusPolicy { QWidgetFocusPolicy_NoFocus, QWidgetFocusPolicy_TabFocus, QWidgetFocusPolicy_ClickFocus, QWidgetFocusPolicy_StrongFocus, QWidgetFocusPolicy_WheelFocus = 7 };
#pragma option pop

#pragma option push -b
enum QApplicationType { QApplicationType_Tty, QApplicationType_GuiClient, QApplicationType_GuiServer };
#pragma option pop

#pragma option push -b
enum QApplicationColorMode { QApplicationColorMode_NormalColors, QApplicationColorMode_CustomColors };
#pragma option pop

#pragma option push -b
enum QApplicationColorSpec { QApplicationColorSpec_NormalColor, QApplicationColorSpec_CustomColor, QApplicationColorSpec_ManyColor };
#pragma option pop

#pragma option push -b
enum QButtonToggleType { QButtonToggleType_SingleShot, QButtonToggleType_Toggle, QButtonToggleType_Tristate };
#pragma option pop

#pragma option push -b
enum QButtonToggleState { QButtonToggleState_Off, QButtonToggleState_NoChange, QButtonToggleState_On };
#pragma option pop

#pragma option push -b
enum QComboBoxPolicy { QComboBoxPolicy_NoInsertion, QComboBoxPolicy_AtTop, QComboBoxPolicy_AtCurrent, QComboBoxPolicy_AtBottom, QComboBoxPolicy_AfterCurrent, QComboBoxPolicy_BeforeCurrent };
#pragma option pop

#pragma option push -b
enum QDialogDialogCode { QDialogDialogCode_Rejected, QDialogDialogCode_Accepted };
#pragma option pop

#pragma option push -b
enum QDragObjectDragMode { QDragObjectDragMode_DragDefault, QDragObjectDragMode_DragCopy, QDragObjectDragMode_DragMove, QDragObjectDragMode_DragCopyOrMove };
#pragma option pop

#pragma option push -b
enum QFocusEventReason { QFocusEventReason_Mouse, QFocusEventReason_Tab, QFocusEventReason_ActiveWindow, QFocusEventReason_Popup, QFocusEventReason_Shortcut, QFocusEventReason_Other };
#pragma option pop

#pragma option push -b
enum QEventType { QEventType_None, QEventType_Timer, QEventType_MouseButtonPress, QEventType_MouseButtonRelease, QEventType_MouseButtonDblClick, QEventType_MouseMove, QEventType_KeyPress, QEventType_KeyRelease, QEventType_FocusIn, QEventType_FocusOut, QEventType_Enter, QEventType_Leave, QEventType_Paint, QEventType_Move, QEventType_Resize, QEventType_Create, QEventType_Destroy, QEventType_Show, QEventType_Hide, QEventType_Close, QEventType_Quit, QEventType_Reparent, QEventType_ShowMinimized, QEventType_ShowNormal, QEventType_WindowActivate, QEventType_WindowDeactivate, QEventType_ShowToParent, QEventType_HideToParent, QEventType_ShowMaximized, QEventType_Accel = 30, QEventType_Wheel, QEventType_AccelAvailable, QEventType_CaptionChange, QEventType_IconChange, QEventType_ParentFontChange, QEventType_ApplicationFontChange, QEventType_ParentPaletteChange, QEventType_ApplicationPaletteChange, QEventType_Clipboard = 40, QEventType_Speech = 42, QEventType_SockAct = 50, QEventType_AccelOverride, QEventType_DragEnter
	 = 60, QEventType_DragMove, QEventType_DragLeave, QEventType_Drop, QEventType_DragResponse, QEventType_ChildInserted = 70, QEventType_ChildRemoved, QEventType_LayoutHint, QEventType_ShowWindowRequest, QEventType_ActivateControl = 80, QEventType_DeactivateControl, QEventType_User = 1000, QEventType_ClxBase = 1000, QEventType_ClxUser = 2000, QEventType_ClxUserLimit = 4000 };
#pragma option pop

#pragma option push -b
enum QDropEventAction { QDropEventAction_Copy, QDropEventAction_Link, QDropEventAction_Move, QDropEventAction_Private, QDropEventAction_UserAction = 100 };
#pragma option pop

#pragma option push -b
enum QFrameShape { QFrameShape_NoFrame, QFrameShape_Box, QFrameShape_Panel, QFrameShape_WinPanel, QFrameShape_HLine, QFrameShape_VLine, QFrameShape_StyledPanel, QFrameShape_PopupPanel, QFrameShape_MShape = 15 };
#pragma option pop

#pragma option push -b
enum QFrameShadow { QFrameShadow_Plain = 16, QFrameShadow_Raised = 32, QFrameShadow_Sunken = 48, QFrameShadow_MShadow = 240 };
#pragma option pop

#pragma option push -b
enum QIconViewSelectionMode { QIconViewSelectionMode_Single, QIconViewSelectionMode_Multi, QIconViewSelectionMode_Extended, QIconViewSelectionMode_NoSelection };
#pragma option pop

#pragma option push -b
enum QIconViewArrangement { QIconViewArrangement_LeftToRight, QIconViewArrangement_TopToBottom };
#pragma option pop

#pragma option push -b
enum QIconViewResizeMode { QIconViewResizeMode_Fixed, QIconViewResizeMode_Adjust };
#pragma option pop

#pragma option push -b
enum QIconViewItemTextPos { QIconViewItemTextPos_Bottom, QIconViewItemTextPos_Right };
#pragma option pop

#pragma option push -b
enum QLCDNumberSegmentStyle { QLCDNumberSegmentStyle_Outline, QLCDNumberSegmentStyle_Filled, QLCDNumberSegmentStyle_Flat };
#pragma option pop

#pragma option push -b
enum QLCDNumberMode { QLCDNumberMode_Hex, QLCDNumberMode_Dec, QLCDNumberMode_Oct, QLCDNumberMode_Bin };
#pragma option pop

#pragma option push -b
enum QLineEditEchoMode { QLineEditEchoMode_Normal, QLineEditEchoMode_NoEcho, QLineEditEchoMode_Password };
#pragma option pop

#pragma option push -b
enum QListBoxSelectionMode { QListBoxSelectionMode_Single, QListBoxSelectionMode_Multi, QListBoxSelectionMode_Extended, QListBoxSelectionMode_NoSelection };
#pragma option pop

#pragma option push -b
enum QListBoxLayoutMode { QListBoxLayoutMode_FixedNumber, QListBoxLayoutMode_FitToWidth, QListBoxLayoutMode_FitToHeight = 1, QListBoxLayoutMode_Variable };
#pragma option pop

#pragma option push -b
enum QListViewWidthMode { QListViewWidthMode_Manual, QListViewWidthMode_Maximum };
#pragma option pop

#pragma option push -b
enum QListViewSelectionMode { QListViewSelectionMode_Single, QListViewSelectionMode_Multi, QListViewSelectionMode_Extended, QListViewSelectionMode_NoSelection };
#pragma option pop

#pragma option push -b
enum QCheckListItemType { QCheckListItemType_RadioButton, QCheckListItemType_CheckBox, QCheckListItemType_Controller };
#pragma option pop

#pragma option push -b
enum QMenuBarSeparator { QMenuBarSeparator_Never, QMenuBarSeparator_InWindowsStyle };
#pragma option pop

#pragma option push -b
enum QMessageBoxIcon { QMessageBoxIcon_NoIcon, QMessageBoxIcon_Information, QMessageBoxIcon_Warning, QMessageBoxIcon_Critical };
#pragma option pop

#pragma option push -b
enum QMultiLineEditEchoMode { QMultiLineEditEchoMode_Normal, QMultiLineEditEchoMode_NoEcho, QMultiLineEditEchoMode_Password };
#pragma option pop

#pragma option push -b
enum QMultiLineEditWordWrap { QMultiLineEditWordWrap_NoWrap, QMultiLineEditWordWrap_WidgetWidth, QMultiLineEditWordWrap_FixedPixelWidth, QMultiLineEditWordWrap_FixedColumnWidth };
#pragma option pop

#pragma option push -b
enum QMultiLineEditWrapPolicy { QMultiLineEditWrapPolicy_AtWhiteSpace, QMultiLineEditWrapPolicy_Anywhere };
#pragma option pop

#pragma option push -b
enum QScrollViewResizePolicy { QScrollViewResizePolicy_Default, QScrollViewResizePolicy_Manual, QScrollViewResizePolicy_AutoOne };
#pragma option pop

#pragma option push -b
enum QScrollViewScrollBarMode { QScrollViewScrollBarMode_Auto, QScrollViewScrollBarMode_AlwaysOff, QScrollViewScrollBarMode_AlwaysOn };
#pragma option pop

#pragma option push -b
enum QSliderTickSetting { QSliderTickSetting_NoMarks, QSliderTickSetting_Above, QSliderTickSetting_Left = 1, QSliderTickSetting_Below, QSliderTickSetting_Right = 2, QSliderTickSetting_Both };
#pragma option pop

#pragma option push -b
enum QSocketNotifierType { QSocketNotifierType_Read, QSocketNotifierType_Write, QSocketNotifierType_Exception };
#pragma option pop

#pragma option push -b
enum QSpinBoxButtonSymbols { QSpinBoxButtonSymbols_UpDownArrows, QSpinBoxButtonSymbols_PlusMinus };
#pragma option pop

#pragma option push -b
enum QStyleScrollControl { QStyleScrollControl_AddLine = 1, QStyleScrollControl_SubLine, QStyleScrollControl_AddPage = 4, QStyleScrollControl_SubPage = 8, QStyleScrollControl_First = 16, QStyleScrollControl_Last = 32, QStyleScrollControl_Slider = 64, QStyleScrollControl_NoScroll = 128 };
#pragma option pop

#pragma option push -b
enum QTranslatorMessagePrefix { QTranslatorMessagePrefix_NoPrefix, QTranslatorMessagePrefix_Hash, QTranslatorMessagePrefix_HashContext, QTranslatorMessagePrefix_HashContextSourceText, QTranslatorMessagePrefix_HashContextSourceTextComment };
#pragma option pop

#pragma option push -b
enum QTranslatorSaveMode { QTranslatorSaveMode_Everything, QTranslatorSaveMode_Stripped };
#pragma option pop

#pragma option push -b
enum QColorSpec { QColorSpec_Rgb, QColorSpec_Hsv };
#pragma option pop

#pragma option push -b
enum QFontCharSet { QFontCharSet_ISO_8859_1, QFontCharSet_Latin1 = 0, QFontCharSet_AnyCharSet, QFontCharSet_ISO_8859_2, QFontCharSet_Latin2 = 2, QFontCharSet_ISO_8859_3, QFontCharSet_Latin3 = 3, QFontCharSet_ISO_8859_4, QFontCharSet_Latin4 = 4, QFontCharSet_ISO_8859_5, QFontCharSet_ISO_8859_6, QFontCharSet_ISO_8859_7, QFontCharSet_ISO_8859_8, QFontCharSet_ISO_8859_9, QFontCharSet_Latin5 = 9, QFontCharSet_ISO_8859_10, QFontCharSet_Latin6 = 10, QFontCharSet_ISO_8859_11, QFontCharSet_TIS620 = 11, QFontCharSet_ISO_8859_12, QFontCharSet_ISO_8859_13, QFontCharSet_Latin7 = 13, QFontCharSet_ISO_8859_14, QFontCharSet_Latin8 = 14, QFontCharSet_ISO_8859_15, QFontCharSet_Latin9 = 15, QFontCharSet_KOI8R, QFontCharSet_Set_Ja, QFontCharSet_Set_1 = 17, QFontCharSet_Set_Ko, QFontCharSet_Set_Th_TH, QFontCharSet_Set_Zh, QFontCharSet_Set_Zh_TW, QFontCharSet_Set_N = 21, QFontCharSet_Unicode, QFontCharSet_Set_GBK, QFontCharSet_Set_Big5, QFontCharSet_TSCII, QFontCharSet_KOI8U, QFontCharSet_CP1251, QFontCharSet_PT154
	, QFontCharSet_JIS_X_0201 = 160, QFontCharSet_JIS_X_0208 = 192, QFontCharSet_Enc16 = 192, QFontCharSet_KSC_5601, QFontCharSet_GB_2312, QFontCharSet_Big5 };
#pragma option pop

#pragma option push -b
enum QFontStyleHint { QFontStyleHint_Helvetica, QFontStyleHint_Times, QFontStyleHint_Courier, QFontStyleHint_OldEnglish, QFontStyleHint_System, QFontStyleHint_AnyStyle, QFontStyleHint_SansSerif = 0, QFontStyleHint_Serif, QFontStyleHint_TypeWriter, QFontStyleHint_Decorative };
#pragma option pop

#pragma option push -b
enum QFontStyleStrategy { QFontStyleStrategy_PreferDefault = 1, QFontStyleStrategy_PreferBitmap, QFontStyleStrategy_PreferDevice = 4, QFontStyleStrategy_PreferOutline = 8, QFontStyleStrategy_ForceOutline = 16, QFontStyleStrategy_PreferMatch = 32, QFontStyleStrategy_PreferQuality = 64 };
#pragma option pop

#pragma option push -b
enum QFontWeight { QFontWeight_Light = 25, QFontWeight_Normal = 50, QFontWeight_DemiBold = 63, QFontWeight_Bold = 75, QFontWeight_Black = 87 };
#pragma option pop

#pragma option push -b
enum QImageEndian { QImageEndian_IgnoreEndian, QImageEndian_BigEndian, QImageEndian_LittleEndian };
#pragma option pop

#pragma option push -b
enum QIconSetSize { QIconSetSize_Automatic, QIconSetSize_Small, QIconSetSize_Large };
#pragma option pop

#pragma option push -b
enum QIconSetMode { QIconSetMode_Normal, QIconSetMode_Disabled, QIconSetMode_Active };
#pragma option pop

#pragma option push -b
enum QMovieStatus { QMovieStatus_SourceEmpty = -2, QMovieStatus_UnrecognizedFormat, QMovieStatus_Paused = 1, QMovieStatus_EndOfFrame, QMovieStatus_EndOfLoop, QMovieStatus_EndOfMovie, QMovieStatus_SpeedChanged };
#pragma option pop

#pragma option push -b
enum QPaintDevicePDevCmd { QPaintDevicePDevCmd_PdcNOP, QPaintDevicePDevCmd_PdcDrawPoint, QPaintDevicePDevCmd_PdcDrawFirst = 1, QPaintDevicePDevCmd_PdcMoveTo, QPaintDevicePDevCmd_PdcLineTo, QPaintDevicePDevCmd_PdcDrawLine, QPaintDevicePDevCmd_PdcDrawRect, QPaintDevicePDevCmd_PdcDrawRoundRect, QPaintDevicePDevCmd_PdcDrawEllipse, QPaintDevicePDevCmd_PdcDrawArc, QPaintDevicePDevCmd_PdcDrawPie, QPaintDevicePDevCmd_PdcDrawChord, QPaintDevicePDevCmd_PdcDrawLineSegments, QPaintDevicePDevCmd_PdcDrawPolyline, QPaintDevicePDevCmd_PdcDrawPolygon, QPaintDevicePDevCmd_PdcDrawQuadBezier, QPaintDevicePDevCmd_PdcDrawText, QPaintDevicePDevCmd_PdcDrawTextFormatted, QPaintDevicePDevCmd_PdcDrawPixmap, QPaintDevicePDevCmd_PdcDrawImage, QPaintDevicePDevCmd_PdcDrawText2, QPaintDevicePDevCmd_PdcDrawText2Formatted, QPaintDevicePDevCmd_PdcDrawLast = 20, QPaintDevicePDevCmd_PdcBegin = 30, QPaintDevicePDevCmd_PdcEnd, QPaintDevicePDevCmd_PdcSave, QPaintDevicePDevCmd_PdcRestore, QPaintDevicePDevCmd_PdcSetdev
	, QPaintDevicePDevCmd_PdcSetBkColor = 40, QPaintDevicePDevCmd_PdcSetBkMode, QPaintDevicePDevCmd_PdcSetROP, QPaintDevicePDevCmd_PdcSetBrushOrigin, QPaintDevicePDevCmd_PdcSetFont = 45, QPaintDevicePDevCmd_PdcSetPen, QPaintDevicePDevCmd_PdcSetBrush, QPaintDevicePDevCmd_PdcSetTabStops, QPaintDevicePDevCmd_PdcSetTabArray, QPaintDevicePDevCmd_PdcSetUnit, QPaintDevicePDevCmd_PdcSetVXform, QPaintDevicePDevCmd_PdcSetWindow, QPaintDevicePDevCmd_PdcSetViewport, QPaintDevicePDevCmd_PdcSetWXform, QPaintDevicePDevCmd_PdcSetWMatrix, QPaintDevicePDevCmd_PdcSaveWMatrix, QPaintDevicePDevCmd_PdcRestoreWMatrix, QPaintDevicePDevCmd_PdcSetClip = 60, QPaintDevicePDevCmd_PdcSetClipRegion, QPaintDevicePDevCmd_PdcReservedStart = 0, QPaintDevicePDevCmd_PdcReservedStop = 199 };
#pragma option pop

#pragma option push -b
enum QColorGroupColorRole { QColorGroupColorRole_Foreground, QColorGroupColorRole_Button, QColorGroupColorRole_Light, QColorGroupColorRole_Midlight, QColorGroupColorRole_Dark, QColorGroupColorRole_Mid, QColorGroupColorRole_Text, QColorGroupColorRole_BrightText, QColorGroupColorRole_ButtonText, QColorGroupColorRole_Base, QColorGroupColorRole_Background, QColorGroupColorRole_Shadow, QColorGroupColorRole_Highlight, QColorGroupColorRole_HighlightedText, QColorGroupColorRole_NColorRoles };
#pragma option pop

#pragma option push -b
enum QPaletteColorGroup { QPaletteColorGroup_Normal, QPaletteColorGroup_Disabled, QPaletteColorGroup_Active, QPaletteColorGroup_Inactive, QPaletteColorGroup_NColorGroups };
#pragma option pop

#pragma option push -b
enum QPixmapColorMode { QPixmapColorMode_Auto, QPixmapColorMode_Color, QPixmapColorMode_Mono };
#pragma option pop

#pragma option push -b
enum QPixmapOptimization { QPixmapOptimization_DefaultOptim, QPixmapOptimization_NoOptim, QPixmapOptimization_MemoryOptim = 1, QPixmapOptimization_NormalOptim, QPixmapOptimization_BestOptim };
#pragma option pop

#pragma option push -b
enum QPrinterOrientation { QPrinterOrientation_Portrait, QPrinterOrientation_Landscape };
#pragma option pop

#pragma option push -b
enum QPrinterPageSize { QPrinterPageSize_A4, QPrinterPageSize_B5, QPrinterPageSize_Letter, QPrinterPageSize_Legal, QPrinterPageSize_Executive, QPrinterPageSize_A0, QPrinterPageSize_A1, QPrinterPageSize_A2, QPrinterPageSize_A3, QPrinterPageSize_A5, QPrinterPageSize_A6, QPrinterPageSize_A7, QPrinterPageSize_A8, QPrinterPageSize_A9, QPrinterPageSize_B0, QPrinterPageSize_B1, QPrinterPageSize_B10, QPrinterPageSize_B2, QPrinterPageSize_B3, QPrinterPageSize_B4, QPrinterPageSize_B6, QPrinterPageSize_B7, QPrinterPageSize_B8, QPrinterPageSize_B9, QPrinterPageSize_C5E, QPrinterPageSize_Comm10E, QPrinterPageSize_DLE, QPrinterPageSize_Folio, QPrinterPageSize_Ledger, QPrinterPageSize_Tabloid, QPrinterPageSize_NPageSize };
#pragma option pop

#pragma option push -b
enum QPrinterPageOrder { QPrinterPageOrder_FirstPageFirst, QPrinterPageOrder_LastPageFirst };
#pragma option pop

#pragma option push -b
enum QPrinterColorMode { QPrinterColorMode_GrayScale, QPrinterColorMode_Color };
#pragma option pop

#pragma option push -b
enum QRegionRegionType { QRegionRegionType_Rectangle, QRegionRegionType_Ellipse };
#pragma option pop

#pragma option push -b
enum Orientation { Orientation_Horizontal, Orientation_Vertical };
#pragma option pop

#pragma option push -b
enum BGMode { BGMode_TransparentMode, BGMode_OpaqueMode };
#pragma option pop

#pragma option push -b
enum PaintUnit { PaintUnit_PixelUnit, PaintUnit_LoMetricUnit, PaintUnit_HiMetricUnit, PaintUnit_LoEnglishUnit, PaintUnit_HiEnglishUnit, PaintUnit_TwipsUnit };
#pragma option pop

#pragma option push -b
enum GUIStyle { GUIStyle_MacStyle, GUIStyle_WindowsStyle, GUIStyle_Win3Style, GUIStyle_PMStyle, GUIStyle_MotifStyle };
#pragma option pop

#pragma option push -b
enum ArrowType { ArrowType_UpArrow, ArrowType_DownArrow, ArrowType_LeftArrow, ArrowType_RightArrow };
#pragma option pop

#pragma option push -b
enum UIEffect { UIEffect_UI_General, UIEffect_UI_AnimateMenu, UIEffect_UI_FadeMenu, UIEffect_UI_AnimateCombo, UIEffect_UI_AnimateTooltip, UIEffect_UI_FadeTooltip };
#pragma option pop

#pragma option push -b
enum TextFormat { TextFormat_PlainText, TextFormat_RichText, TextFormat_AutoText };
#pragma option pop

#pragma option push -b
enum ButtonState { ButtonState_NoButton, ButtonState_LeftButton, ButtonState_RightButton, ButtonState_MidButton = 4, ButtonState_MouseButtonMask = 7, ButtonState_ShiftButton, ButtonState_ControlButton = 16, ButtonState_AltButton = 32, ButtonState_KeyButtonMask = 56, ButtonState_Keypad = 16384 };
#pragma option pop

#pragma option push -b
enum AlignmentFlags { AlignmentFlags_AlignLeft = 1, AlignmentFlags_AlignRight, AlignmentFlags_AlignHCenter = 4, AlignmentFlags_AlignTop = 8, AlignmentFlags_AlignBottom = 16, AlignmentFlags_AlignVCenter = 32, AlignmentFlags_AlignCenter = 36, AlignmentFlags_SingleLine = 64, AlignmentFlags_DontClip = 128, AlignmentFlags_ExpandTabs = 256, AlignmentFlags_ShowPrefix = 512, AlignmentFlags_WordBreak = 1024, AlignmentFlags_DontPrint = 4096 };
#pragma option pop

#pragma option push -b
enum WidgetState { WidgetState_WState_Created = 1, WidgetState_WState_Disabled, WidgetState_WState_Visible = 4, WidgetState_WState_ForceHide = 8, WidgetState_WState_OwnCursor = 16, WidgetState_WState_MouseTracking = 32, WidgetState_WState_CompressKeys = 64, WidgetState_WState_BlockUpdates = 128, WidgetState_WState_InPaintEvent = 256, WidgetState_WState_Reparented = 512, WidgetState_WState_ConfigPending = 1024, WidgetState_WState_Resized = 2048, WidgetState_WState_AutoMask = 4096, WidgetState_WState_Polished = 8192, WidgetState_WState_DND = 16384, WidgetState_WState_Modal = 32768, WidgetState_WState_Reserved1 = 65536, WidgetState_WState_Reserved2 = 131072, WidgetState_WState_Reserved3 = 262144, WidgetState_WState_Maximized = 524288, WidgetState_WState_TranslateBackground = 1048576, WidgetState_WState_ForceDisabled = 2097152, WidgetState_WState_Exposed = 4194304 };
#pragma option pop

#pragma option push -b
enum WidgetFlags { WidgetFlags_WType_TopLevel = 1, WidgetFlags_WType_Modal, WidgetFlags_WType_Popup = 4, WidgetFlags_WType_Desktop = 8, WidgetFlags_WType_Mask = 15, WidgetFlags_WStyle_Customize, WidgetFlags_WStyle_NormalBorder = 32, WidgetFlags_WStyle_DialogBorder = 64, WidgetFlags_WStyle_NoBorder = 0, WidgetFlags_WStyle_Title = 128, WidgetFlags_WStyle_SysMenu = 256, WidgetFlags_WStyle_Minimize = 512, WidgetFlags_WStyle_Maximize = 1024, WidgetFlags_WStyle_MinMax = 1536, WidgetFlags_WStyle_Tool = 2048, WidgetFlags_WStyle_StaysOnTop = 4096, WidgetFlags_WStyle_Dialog = 8192, WidgetFlags_WStyle_ContextHelp = 16384, WidgetFlags_WStyle_NoBorderEx = 32768, WidgetFlags_WStyle_Mask = 65520, WidgetFlags_WDestructiveClose = 65536, WidgetFlags_WPaintDesktop = 131072, WidgetFlags_WPaintUnclipped = 262144, WidgetFlags_WPaintClever = 524288, WidgetFlags_WResizeNoErase = 1048576, WidgetFlags_WMouseNoMask = 2097152, WidgetFlags_WNorthWestGravity = 4194304, WidgetFlags_WRepaintNoErase = 8388608, WidgetFlags_WX11BypassWM
	 = 16777216, WidgetFlags_WGroupLeader = 33554432 };
#pragma option pop

#pragma option push -b
enum ImageConversionFlags { ImageConversionFlags_ColorMode_Mask = 3, ImageConversionFlags_AutoColor = 0, ImageConversionFlags_ColorOnly = 3, ImageConversionFlags_MonoOnly = 2, ImageConversionFlags_AlphaDither_Mask = 12, ImageConversionFlags_ThresholdAlphaDither = 0, ImageConversionFlags_OrderedAlphaDither = 4, ImageConversionFlags_DiffuseAlphaDither = 8, ImageConversionFlags_NoAlpha = 12, ImageConversionFlags_Dither_Mask = 48, ImageConversionFlags_DiffuseDither = 0, ImageConversionFlags_OrderedDither = 16, ImageConversionFlags_ThresholdDither = 32, ImageConversionFlags_DitherMode_Mask = 192, ImageConversionFlags_AutoDither = 0, ImageConversionFlags_PreferDither = 64, ImageConversionFlags_AvoidDither = 128 };
#pragma option pop

#pragma option push -b
enum Modifier { Modifier_SHIFT = 2097152, Modifier_CTRL = 4194304, Modifier_ALT = 8388608, Modifier_MODIFIER_MASK = 14680064, Modifier_UNICODE_ACCEL = 268435456, Modifier_ASCII_ACCEL = 268435456 };
#pragma option pop

typedef int QtKey;

#pragma option push -b
enum RasterOp { RasterOp_CopyROP, RasterOp_OrROP, RasterOp_XorROP, RasterOp_NotAndROP, RasterOp_EraseROP = 3, RasterOp_NotCopyROP, RasterOp_NotOrROP, RasterOp_NotXorROP, RasterOp_AndROP, RasterOp_NotEraseROP = 7, RasterOp_NotROP, RasterOp_ClearROP, RasterOp_SetROP, RasterOp_NopROP, RasterOp_AndNotROP, RasterOp_OrNotROP, RasterOp_NandROP, RasterOp_NorROP, RasterOp_LastROP = 15 };
#pragma option pop

#pragma option push -b
enum PenStyle { PenStyle_NoPen, PenStyle_SolidLine, PenStyle_DashLine, PenStyle_DotLine, PenStyle_DashDotLine, PenStyle_DashDotDotLine, PenStyle_MPenStyle = 15 };
#pragma option pop

#pragma option push -b
enum PenCapStyle { PenCapStyle_FlatCap, PenCapStyle_SquareCap = 16, PenCapStyle_RoundCap = 32, PenCapStyle_MPenCapStyle = 48 };
#pragma option pop

#pragma option push -b
enum PenJoinStyle { PenJoinStyle_MiterJoin, PenJoinStyle_BevelJoin = 64, PenJoinStyle_RoundJoin = 128, PenJoinStyle_MPenJoinStyle = 192 };
#pragma option pop

#pragma option push -b
enum BrushStyle { BrushStyle_NoBrush, BrushStyle_SolidPattern, BrushStyle_Dense1Pattern, BrushStyle_Dense2Pattern, BrushStyle_Dense3Pattern, BrushStyle_Dense4Pattern, BrushStyle_Dense5Pattern, BrushStyle_Dense6Pattern, BrushStyle_Dense7Pattern, BrushStyle_HorPattern, BrushStyle_VerPattern, BrushStyle_CrossPattern, BrushStyle_BDiagPattern, BrushStyle_FDiagPattern, BrushStyle_DiagCrossPattern, BrushStyle_CustomPattern = 24 };
#pragma option pop

#pragma option push -b
enum WindowsVersion { WindowsVersion_WV_32s = 1, WindowsVersion_WV_95, WindowsVersion_WV_98, WindowsVersion_WV_DOS_based = 15, WindowsVersion_WV_NT, WindowsVersion_WV_2000 = 32, WindowsVersion_WV_NT_based = 240 };
#pragma option pop

#pragma option push -b
enum QInternalPaintDeviceFlags { QInternalPaintDeviceFlags_UndefinedDevice, QInternalPaintDeviceFlags_Widget, QInternalPaintDeviceFlags_Pixmap, QInternalPaintDeviceFlags_Printer, QInternalPaintDeviceFlags_Picture, QInternalPaintDeviceFlags_System, QInternalPaintDeviceFlags_DeviceTypeMask = 15, QInternalPaintDeviceFlags_ExternalDevice };
#pragma option pop

#pragma option push -b
enum QTableFlags { QTableFlags_vScrollBar = 1, QTableFlags_hScrollBar, QTableFlags_autoVScrollBar = 4, QTableFlags_autoHScrollBar = 8, QTableFlags_autoScrollBars = 12, QTableFlags_clipCellPainting = 256, QTableFlags_cutCellsV = 512, QTableFlags_cutCellsH = 1024, QTableFlags_cutCells = 1536, QTableFlags_scrollLastHCell = 2048, QTableFlags_scrollLastVCell = 4096, QTableFlags_scrollLastCell = 6144, QTableFlags_smoothHScrolling = 8192, QTableFlags_smoothVScrolling = 16384, QTableFlags_smoothScrolling = 24576, QTableFlags_snapToHGrid = 32768, QTableFlags_snapToVGrid = 65536, QTableFlags_snapToGrid = 98304 };
#pragma option pop

#pragma option push -b
enum QClxFileDialogMode { QClxFileDialogMode_AnyFile, QClxFileDialogMode_ExistingFile, QClxFileDialogMode_Directory, QClxFileDialogMode_ExistingFiles, QClxFileDialogMode_DirectoryOnly };
#pragma option pop

#pragma option push -b
enum QClxFileDialogViewMode { QClxFileDialogViewMode_Detail, QClxFileDialogViewMode_List };
#pragma option pop

#pragma option push -b
enum QClxFileDialogPreviewMode { QClxFileDialogPreviewMode_NoPreview, QClxFileDialogPreviewMode_Contents, QClxFileDialogPreviewMode_Info };
#pragma option pop

typedef void __cdecl (__closure *QObject_destroyed_Event)(void);

typedef void __cdecl (__closure *QApplication_lastWindowClosed_Event)(void);

typedef void __cdecl (__closure *QApplication_aboutToQuit_Event)(void);

typedef void __cdecl (__closure *QApplication_guiThreadAwake_Event)(void);

typedef void __cdecl (__closure *QButton_pressed_Event)(void);

typedef void __cdecl (__closure *QButton_released_Event)(void);

typedef void __cdecl (__closure *QButton_clicked_Event)(void);

typedef void __cdecl (__closure *QButton_toggled_Event)(bool p1);

typedef void __cdecl (__closure *QButton_stateChanged_Event)(int p1);

typedef void __cdecl (__closure *QComboBox_activated_Event)(int index);

typedef void __cdecl (__closure *QComboBox_highlighted_Event)(int index);

typedef void __cdecl (__closure *QComboBox_activated2_Event)(System::PWideString p1);

typedef void __cdecl (__closure *QComboBox_highlighted2_Event)(System::PWideString p1);

typedef void __cdecl (__closure *QComboBox_textChanged_Event)(System::PWideString p1);

typedef void __cdecl (__closure *QIconView_selectionChanged_Event)(void);

typedef void __cdecl (__closure *QIconView_selectionChanged2_Event)(QIconViewItemH* item);

typedef void __cdecl (__closure *QIconView_currentChanged_Event)(QIconViewItemH* item);

typedef void __cdecl (__closure *QIconView_clicked_Event)(QIconViewItemH* p1);

typedef void __cdecl (__closure *QIconView_clicked2_Event)(QIconViewItemH* p1, Types::PPoint p2);

typedef void __cdecl (__closure *QIconView_pressed_Event)(QIconViewItemH* p1);

typedef void __cdecl (__closure *QIconView_pressed2_Event)(QIconViewItemH* p1, Types::PPoint p2);

typedef void __cdecl (__closure *QIconView_doubleClicked_Event)(QIconViewItemH* item);

typedef void __cdecl (__closure *QIconView_returnPressed_Event)(QIconViewItemH* item);

typedef void __cdecl (__closure *QIconView_rightButtonClicked_Event)(QIconViewItemH* item, Types::PPoint pos);

typedef void __cdecl (__closure *QIconView_rightButtonPressed_Event)(QIconViewItemH* item, Types::PPoint pos);

typedef void __cdecl (__closure *QIconView_mouseButtonPressed_Event)(int button, QIconViewItemH* item, Types::PPoint pos);

typedef void __cdecl (__closure *QIconView_mouseButtonClicked_Event)(int button, QIconViewItemH* item, Types::PPoint pos);

typedef void __cdecl (__closure *QIconView_dropped_Event)(QDropEventH* e, void * lst);

typedef void __cdecl (__closure *QIconView_moved_Event)(void);

typedef void __cdecl (__closure *QIconView_onItem_Event)(QIconViewItemH* item);

typedef void __cdecl (__closure *QIconView_onViewport_Event)(void);

typedef void __cdecl (__closure *QIconView_itemRenamed_Event)(QIconViewItemH* item, System::PWideString p2);

typedef void __cdecl (__closure *QIconView_itemRenamed2_Event)(QIconViewItemH* item);

typedef void __cdecl (__closure *QLCDNumber_overflow_Event)(void);

typedef void __cdecl (__closure *QLineEdit_textChanged_Event)(System::PWideString p1);

typedef void __cdecl (__closure *QLineEdit_returnPressed_Event)(void);

typedef void __cdecl (__closure *QListBox_highlighted_Event)(int index);

typedef void __cdecl (__closure *QListBox_selected_Event)(int index);

typedef void __cdecl (__closure *QListBox_highlighted2_Event)(System::PWideString p1);

typedef void __cdecl (__closure *QListBox_selected2_Event)(System::PWideString p1);

typedef void __cdecl (__closure *QListBox_highlighted3_Event)(QListBoxItemH* p1);

typedef void __cdecl (__closure *QListBox_selected3_Event)(QListBoxItemH* p1);

typedef void __cdecl (__closure *QListBox_selectionChanged_Event)(void);

typedef void __cdecl (__closure *QListBox_selectionChanged2_Event)(QListBoxItemH* p1);

typedef void __cdecl (__closure *QListBox_currentChanged_Event)(QListBoxItemH* p1);

typedef void __cdecl (__closure *QListBox_clicked_Event)(QListBoxItemH* p1);

typedef void __cdecl (__closure *QListBox_clicked2_Event)(QListBoxItemH* p1, Types::PPoint p2);

typedef void __cdecl (__closure *QListBox_pressed_Event)(QListBoxItemH* p1);

typedef void __cdecl (__closure *QListBox_pressed2_Event)(QListBoxItemH* p1, Types::PPoint p2);

typedef void __cdecl (__closure *QListBox_doubleClicked_Event)(QListBoxItemH* p1);

typedef void __cdecl (__closure *QListBox_returnPressed_Event)(QListBoxItemH* p1);

typedef void __cdecl (__closure *QListBox_rightButtonClicked_Event)(QListBoxItemH* p1, Types::PPoint p2);

typedef void __cdecl (__closure *QListBox_rightButtonPressed_Event)(QListBoxItemH* p1, Types::PPoint p2);

typedef void __cdecl (__closure *QListBox_mouseButtonPressed_Event)(int p1, QListBoxItemH* p2, Types::PPoint p3);

typedef void __cdecl (__closure *QListBox_mouseButtonClicked_Event)(int p1, QListBoxItemH* p2, Types::PPoint p3);

typedef void __cdecl (__closure *QListBox_onItem_Event)(QListBoxItemH* item);

typedef void __cdecl (__closure *QListBox_onViewport_Event)(void);

typedef void __cdecl (__closure *QListView_selectionChanged_Event)(void);

typedef void __cdecl (__closure *QListView_selectionChanged2_Event)(QListViewItemH* p1);

typedef void __cdecl (__closure *QListView_currentChanged_Event)(QListViewItemH* p1);

typedef void __cdecl (__closure *QListView_clicked_Event)(QListViewItemH* p1);

typedef void __cdecl (__closure *QListView_clicked2_Event)(QListViewItemH* p1, Types::PPoint p2, int p3);

typedef void __cdecl (__closure *QListView_pressed_Event)(QListViewItemH* p1);

typedef void __cdecl (__closure *QListView_pressed2_Event)(QListViewItemH* p1, Types::PPoint p2, int p3);

typedef void __cdecl (__closure *QListView_doubleClicked_Event)(QListViewItemH* p1);

typedef void __cdecl (__closure *QListView_returnPressed_Event)(QListViewItemH* p1);

typedef void __cdecl (__closure *QListView_rightButtonClicked_Event)(QListViewItemH* p1, Types::PPoint p2, int p3);

typedef void __cdecl (__closure *QListView_rightButtonPressed_Event)(QListViewItemH* p1, Types::PPoint p2, int p3);

typedef void __cdecl (__closure *QListView_mouseButtonPressed_Event)(int p1, QListViewItemH* p2, Types::PPoint p3, int p4);

typedef void __cdecl (__closure *QListView_mouseButtonClicked_Event)(int p1, QListViewItemH* p2, Types::PPoint p3, int p4);

typedef void __cdecl (__closure *QListView_onItem_Event)(QListViewItemH* item);

typedef void __cdecl (__closure *QListView_onViewport_Event)(void);

typedef void __cdecl (__closure *QListView_expanded_Event)(QListViewItemH* item);

typedef void __cdecl (__closure *QListView_collapsed_Event)(QListViewItemH* item);

typedef void __cdecl (__closure *QMenuBar_activated_Event)(int itemId);

typedef void __cdecl (__closure *QMenuBar_highlighted_Event)(int itemId);

typedef void __cdecl (__closure *QMultiLineEdit_textChanged_Event)(void);

typedef void __cdecl (__closure *QMultiLineEdit_returnPressed_Event)(void);

typedef void __cdecl (__closure *QMultiLineEdit_undoAvailable_Event)(bool p1);

typedef void __cdecl (__closure *QMultiLineEdit_redoAvailable_Event)(bool p1);

typedef void __cdecl (__closure *QMultiLineEdit_copyAvailable_Event)(bool p1);

typedef void __cdecl (__closure *QScrollView_contentsMoving_Event)(int x, int y);

typedef void __cdecl (__closure *QSlider_valueChanged_Event)(int value);

typedef void __cdecl (__closure *QSlider_sliderPressed_Event)(void);

typedef void __cdecl (__closure *QSlider_sliderMoved_Event)(int value);

typedef void __cdecl (__closure *QSlider_sliderReleased_Event)(void);

typedef void __cdecl (__closure *QSocketNotifier_activated_Event)(int socket);

typedef void __cdecl (__closure *QSpinBox_valueChanged_Event)(int value);

typedef void __cdecl (__closure *QSpinBox_valueChanged2_Event)(System::PWideString valueText);

typedef void __cdecl (__closure *QButtonGroup_pressed_Event)(int id);

typedef void __cdecl (__closure *QButtonGroup_released_Event)(int id);

typedef void __cdecl (__closure *QButtonGroup_clicked_Event)(int id);

typedef void __cdecl (__closure *QClipboard_dataChanged_Event)(void);

typedef void __cdecl (__closure *QFontDialog_fontSelected_Event)(QFontH* font);

typedef void __cdecl (__closure *QFontDialog_fontHighlighted_Event)(QFontH* font);

typedef void __cdecl (__closure *QHeader_clicked_Event)(int section);

typedef void __cdecl (__closure *QHeader_pressed_Event)(int section);

typedef void __cdecl (__closure *QHeader_released_Event)(int section);

typedef void __cdecl (__closure *QHeader_sizeChange_Event)(int section, int oldSize, int newSize);

typedef void __cdecl (__closure *QHeader_indexChange_Event)(int section, int fromIndex, int _toIndex);

typedef void __cdecl (__closure *QHeader_sectionClicked_Event)(int p1);

typedef void __cdecl (__closure *QHeader_moved_Event)(int p1, int p2);

typedef void __cdecl (__closure *QPopupMenu_activated_Event)(int itemId);

typedef void __cdecl (__closure *QPopupMenu_highlighted_Event)(int itemId);

typedef void __cdecl (__closure *QPopupMenu_activatedRedirect_Event)(int itemId);

typedef void __cdecl (__closure *QPopupMenu_highlightedRedirect_Event)(int itemId);

typedef void __cdecl (__closure *QPopupMenu_aboutToShow_Event)(void);

typedef void __cdecl (__closure *QPopupMenu_aboutToHide_Event)(void);

typedef void __cdecl (__closure *QScrollBar_valueChanged_Event)(int value);

typedef void __cdecl (__closure *QScrollBar_sliderPressed_Event)(void);

typedef void __cdecl (__closure *QScrollBar_sliderMoved_Event)(int value);

typedef void __cdecl (__closure *QScrollBar_sliderReleased_Event)(void);

typedef void __cdecl (__closure *QScrollBar_nextLine_Event)(void);

typedef void __cdecl (__closure *QScrollBar_prevLine_Event)(void);

typedef void __cdecl (__closure *QScrollBar_nextPage_Event)(void);

typedef void __cdecl (__closure *QScrollBar_prevPage_Event)(void);

typedef void __cdecl (__closure *QTextBrowser_backwardAvailable_Event)(bool p1);

typedef void __cdecl (__closure *QTextBrowser_forwardAvailable_Event)(bool p1);

typedef void __cdecl (__closure *QTextBrowser_highlighted_Event)(System::PWideString p1);

typedef void __cdecl (__closure *QTextBrowser_textChanged_Event)(void);

typedef void __cdecl (__closure *QTimer_timeout_Event)(void);

typedef void __cdecl (__closure *QWorkspace_windowActivated_Event)(QWidgetH* w);

typedef void __cdecl (__closure *QClxFileDialog_fileHighlighted_Event)(System::PWideString p1);

typedef void __cdecl (__closure *QClxFileDialog_fileSelected_Event)(System::PWideString p1);

typedef void __cdecl (__closure *QClxFileDialog_dirEntered_Event)(System::PWideString p1);

typedef void __cdecl (__closure *QClxFileDialog_closeRequest_Event)(System::PBoolean canClose);

typedef void __cdecl (__closure *QClxFileDialog_filterChanged_Event)(int index);

//-- var, const, procedure ---------------------------------------------------
extern PACKAGE System::TMethod NullHook;
static const Word Key_Escape = 0x1000;
static const Word Key_Tab = 0x1001;
static const Word Key_Backtab = 0x1002;
static const Word Key_Backspace = 0x1003;
static const Word Key_Return = 0x1004;
static const Word Key_Enter = 0x1005;
static const Word Key_Insert = 0x1006;
static const Word Key_Delete = 0x1007;
static const Word Key_Pause = 0x1008;
static const Word Key_Print = 0x1009;
static const Word Key_SysReq = 0x100a;
static const Word Key_Home = 0x1010;
static const Word Key_End = 0x1011;
static const Word Key_Left = 0x1012;
static const Word Key_Up = 0x1013;
static const Word Key_Right = 0x1014;
static const Word Key_Down = 0x1015;
static const Word Key_Prior = 0x1016;
static const Word Key_PageUp = 0x1016;
static const Word Key_Next = 0x1017;
static const Word Key_PageDown = 0x1017;
static const Word Key_Shift = 0x1020;
static const Word Key_Control = 0x1021;
static const Word Key_Meta = 0x1022;
static const Word Key_Alt = 0x1023;
static const Word Key_CapsLock = 0x1024;
static const Word Key_NumLock = 0x1025;
static const Word Key_ScrollLock = 0x1026;
static const Word Key_F1 = 0x1030;
static const Word Key_F2 = 0x1031;
static const Word Key_F3 = 0x1032;
static const Word Key_F4 = 0x1033;
static const Word Key_F5 = 0x1034;
static const Word Key_F6 = 0x1035;
static const Word Key_F7 = 0x1036;
static const Word Key_F8 = 0x1037;
static const Word Key_F9 = 0x1038;
static const Word Key_F10 = 0x1039;
static const Word Key_F11 = 0x103a;
static const Word Key_F12 = 0x103b;
static const Word Key_F13 = 0x103c;
static const Word Key_F14 = 0x103d;
static const Word Key_F15 = 0x103e;
static const Word Key_F16 = 0x103f;
static const Word Key_F17 = 0x1040;
static const Word Key_F18 = 0x1041;
static const Word Key_F19 = 0x1042;
static const Word Key_F20 = 0x1043;
static const Word Key_F21 = 0x1044;
static const Word Key_F22 = 0x1045;
static const Word Key_F23 = 0x1046;
static const Word Key_F24 = 0x1047;
static const Word Key_F25 = 0x1048;
static const Word Key_F26 = 0x1049;
static const Word Key_F27 = 0x104a;
static const Word Key_F28 = 0x104b;
static const Word Key_F29 = 0x104c;
static const Word Key_F30 = 0x104d;
static const Word Key_F31 = 0x104e;
static const Word Key_F32 = 0x104f;
static const Word Key_F33 = 0x1050;
static const Word Key_F34 = 0x1051;
static const Word Key_F35 = 0x1052;
static const Word Key_Super_L = 0x1053;
static const Word Key_Super_R = 0x1054;
static const Word Key_Menu = 0x1055;
static const Word Key_Hyper_L = 0x1056;
static const Word Key_Hyper_R = 0x1057;
static const Word Key_Help = 0x1058;
static const Shortint Key_Space = 0x20;
static const Shortint Key_Any = 0x20;
static const Shortint Key_Exclam = 0x21;
static const Shortint Key_QuoteDbl = 0x22;
static const Shortint Key_NumberSign = 0x23;
static const Shortint Key_Dollar = 0x24;
static const Shortint Key_Percent = 0x25;
static const Shortint Key_Ampersand = 0x26;
static const Shortint Key_Apostrophe = 0x27;
static const Shortint Key_ParenLeft = 0x28;
static const Shortint Key_ParenRight = 0x29;
static const Shortint Key_Asterisk = 0x2a;
static const Shortint Key_Plus = 0x2b;
static const Shortint Key_Comma = 0x2c;
static const Shortint Key_Minus = 0x2d;
static const Shortint Key_Period = 0x2e;
static const Shortint Key_Slash = 0x2f;
static const Shortint Key_0 = 0x30;
static const Shortint Key_1 = 0x31;
static const Shortint Key_2 = 0x32;
static const Shortint Key_3 = 0x33;
static const Shortint Key_4 = 0x34;
static const Shortint Key_5 = 0x35;
static const Shortint Key_6 = 0x36;
static const Shortint Key_7 = 0x37;
static const Shortint Key_8 = 0x38;
static const Shortint Key_9 = 0x39;
static const Shortint Key_Colon = 0x3a;
static const Shortint Key_Semicolon = 0x3b;
static const Shortint Key_Less = 0x3c;
static const Shortint Key_Equal = 0x3d;
static const Shortint Key_Greater = 0x3e;
static const Shortint Key_Question = 0x3f;
static const Shortint Key_At = 0x40;
static const Shortint Key_A = 0x41;
static const Shortint Key_B = 0x42;
static const Shortint Key_C = 0x43;
static const Shortint Key_D = 0x44;
static const Shortint Key_E = 0x45;
static const Shortint Key_F = 0x46;
static const Shortint Key_G = 0x47;
static const Shortint Key_H = 0x48;
static const Shortint Key_I = 0x49;
static const Shortint Key_J = 0x4a;
static const Shortint Key_K = 0x4b;
static const Shortint Key_L = 0x4c;
static const Shortint Key_M = 0x4d;
static const Shortint Key_N = 0x4e;
static const Shortint Key_O = 0x4f;
static const Shortint Key_P = 0x50;
static const Shortint Key_Q = 0x51;
static const Shortint Key_R = 0x52;
static const Shortint Key_S = 0x53;
static const Shortint Key_T = 0x54;
static const Shortint Key_U = 0x55;
static const Shortint Key_V = 0x56;
static const Shortint Key_W = 0x57;
static const Shortint Key_X = 0x58;
static const Shortint Key_Y = 0x59;
static const Shortint Key_Z = 0x5a;
static const Shortint Key_BracketLeft = 0x5b;
static const Shortint Key_Backslash = 0x5c;
static const Shortint Key_BracketRight = 0x5d;
static const Shortint Key_AsciiCircum = 0x5e;
static const Shortint Key_Underscore = 0x5f;
static const Shortint Key_QuoteLeft = 0x60;
static const Shortint Key_BraceLeft = 0x7b;
static const Shortint Key_Bar = 0x7c;
static const Shortint Key_BraceRight = 0x7d;
static const Shortint Key_AsciiTilde = 0x7e;
static const Byte Key_nobreakspace = 0xa0;
static const Byte Key_exclamdown = 0xa1;
static const Byte Key_cent = 0xa2;
static const Byte Key_sterling = 0xa3;
static const Byte Key_currency = 0xa4;
static const Byte Key_yen = 0xa5;
static const Byte Key_brokenbar = 0xa6;
static const Byte Key_section = 0xa7;
static const Byte Key_diaeresis = 0xa8;
static const Byte Key_copyright = 0xa9;
static const Byte Key_ordfeminine = 0xaa;
static const Byte Key_guillemotleft = 0xab;
static const Byte Key_notsign = 0xac;
static const Byte Key_hyphen = 0xad;
static const Byte Key_registered = 0xae;
static const Byte Key_macron = 0xaf;
static const Byte Key_degree = 0xb0;
static const Byte Key_plusminus = 0xb1;
static const Byte Key_twosuperior = 0xb2;
static const Byte Key_threesuperior = 0xb3;
static const Byte Key_acute = 0xb4;
static const Byte Key_mu = 0xb5;
static const Byte Key_paragraph = 0xb6;
static const Byte Key_periodcentered = 0xb7;
static const Byte Key_cedilla = 0xb8;
static const Byte Key_onesuperior = 0xb9;
static const Byte Key_masculine = 0xba;
static const Byte Key_guillemotright = 0xbb;
static const Byte Key_onequarter = 0xbc;
static const Byte Key_onehalf = 0xbd;
static const Byte Key_threequarters = 0xbe;
static const Byte Key_questiondown = 0xbf;
static const Byte Key_Agrave = 0xc0;
static const Byte Key_Aacute = 0xc1;
static const Byte Key_Acircumflex = 0xc2;
static const Byte Key_Atilde = 0xc3;
static const Byte Key_Adiaeresis = 0xc4;
static const Byte Key_Aring = 0xc5;
static const Byte Key_AE = 0xc6;
static const Byte Key_Ccedilla = 0xc7;
static const Byte Key_Egrave = 0xc8;
static const Byte Key_Eacute = 0xc9;
static const Byte Key_Ecircumflex = 0xca;
static const Byte Key_Ediaeresis = 0xcb;
static const Byte Key_Igrave = 0xcc;
static const Byte Key_Iacute = 0xcd;
static const Byte Key_Icircumflex = 0xce;
static const Byte Key_Idiaeresis = 0xcf;
static const Byte Key_ETH = 0xd0;
static const Byte Key_Ntilde = 0xd1;
static const Byte Key_Ograve = 0xd2;
static const Byte Key_Oacute = 0xd3;
static const Byte Key_Ocircumflex = 0xd4;
static const Byte Key_Otilde = 0xd5;
static const Byte Key_Odiaeresis = 0xd6;
static const Byte Key_multiply = 0xd7;
static const Byte Key_Ooblique = 0xd8;
static const Byte Key_Ugrave = 0xd9;
static const Byte Key_Uacute = 0xda;
static const Byte Key_Ucircumflex = 0xdb;
static const Byte Key_Udiaeresis = 0xdc;
static const Byte Key_Yacute = 0xdd;
static const Byte Key_THORN = 0xde;
static const Byte Key_ssharp = 0xdf;
static const Byte Key_agrave_lower = 0xe0;
static const Byte Key_aacute_lower = 0xe1;
static const Byte Key_acircumflex_lower = 0xe2;
static const Byte Key_atilde_lower = 0xe3;
static const Byte Key_adiaeresis_lower = 0xe4;
static const Byte Key_aring_lower = 0xe5;
static const Byte Key_ae_lower = 0xe6;
static const Byte Key_ccedilla_lower = 0xe7;
static const Byte Key_egrave_lower = 0xe8;
static const Byte Key_eacute_lower = 0xe9;
static const Byte Key_ecircumflex_lower = 0xea;
static const Byte Key_ediaeresis_lower = 0xeb;
static const Byte Key_igrave_lower = 0xec;
static const Byte Key_iacute_lower = 0xed;
static const Byte Key_icircumflex_lower = 0xee;
static const Byte Key_idiaeresis_lower = 0xef;
static const Byte Key_eth_lower = 0xf0;
static const Byte Key_ntilde_lower = 0xf1;
static const Byte Key_ograve_lower = 0xf2;
static const Byte Key_oacute_lower = 0xf3;
static const Byte Key_ocircumflex_lower = 0xf4;
static const Byte Key_otilde_lower = 0xf5;
static const Byte Key_odiaeresis_lower = 0xf6;
static const Byte Key_division = 0xf7;
static const Byte Key_oslash = 0xf8;
static const Byte Key_ugrave_lower = 0xf9;
static const Byte Key_uacute_lower = 0xfa;
static const Byte Key_ucircumflex_lower = 0xfb;
static const Byte Key_udiaeresis_lower = 0xfc;
static const Byte Key_yacute_lower = 0xfd;
static const Byte Key_thorn_lower = 0xfe;
static const Byte Key_ydiaeresis = 0xff;
static const Word Key_unknown = 0xffff;
#define QtShareName "qtintf.dll"
static const char QtNamePrefix = '\x5f';
#define QtLibName "qt.dll"
extern PACKAGE void __cdecl QWidget_destroy(QWidgetH* handle);
extern PACKAGE QWidgetH* __cdecl QWidget_create(QWidgetH* parent, char * name, int f);
extern PACKAGE unsigned __cdecl QWidget_winId(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setName(QWidgetH* handle, char * name);
extern PACKAGE QStyleH* __cdecl QWidget_style(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setStyle(QWidgetH* handle, QStyleH* p1);
extern PACKAGE bool __cdecl QWidget_isTopLevel(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_isModal(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_isPopup(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_isDesktop(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_isEnabled(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_isEnabledTo(QWidgetH* handle, QWidgetH* p1);
extern PACKAGE bool __cdecl QWidget_isEnabledToTLW(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setEnabled(QWidgetH* handle, bool p1);
extern PACKAGE void __cdecl QWidget_setDisabled(QWidgetH* handle, bool p1);
extern PACKAGE void __cdecl QWidget_frameGeometry(QWidgetH* handle, Types::PRect retval);
extern PACKAGE void __cdecl QWidget_geometry(QWidgetH* handle, Types::PRect retval);
extern PACKAGE int __cdecl QWidget_x(QWidgetH* handle);
extern PACKAGE int __cdecl QWidget_y(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_pos(QWidgetH* handle, Types::PPoint retval);
extern PACKAGE void __cdecl QWidget_frameSize(QWidgetH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QWidget_size(QWidgetH* handle, Types::PSize retval);
extern PACKAGE int __cdecl QWidget_width(QWidgetH* handle);
extern PACKAGE int __cdecl QWidget_height(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_rect(QWidgetH* handle, Types::PRect retval);
extern PACKAGE void __cdecl QWidget_childrenRect(QWidgetH* handle, Types::PRect retval);
extern PACKAGE void __cdecl QWidget_childrenRegion(QWidgetH* handle, QRegionH* retval);
extern PACKAGE void __cdecl QWidget_minimumSize(QWidgetH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QWidget_maximumSize(QWidgetH* handle, Types::PSize retval);
extern PACKAGE int __cdecl QWidget_minimumWidth(QWidgetH* handle);
extern PACKAGE int __cdecl QWidget_minimumHeight(QWidgetH* handle);
extern PACKAGE int __cdecl QWidget_maximumWidth(QWidgetH* handle);
extern PACKAGE int __cdecl QWidget_maximumHeight(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setMinimumSize(QWidgetH* handle, Types::PSize p1)/* overload */;
extern PACKAGE void __cdecl QWidget_setMinimumSize(QWidgetH* handle, int minw, int minh)/* overload */;
extern PACKAGE void __cdecl QWidget_setMaximumSize(QWidgetH* handle, Types::PSize p1)/* overload */;
extern PACKAGE void __cdecl QWidget_setMaximumSize(QWidgetH* handle, int maxw, int maxh)/* overload */;
extern PACKAGE void __cdecl QWidget_setMinimumWidth(QWidgetH* handle, int minw);
extern PACKAGE void __cdecl QWidget_setMinimumHeight(QWidgetH* handle, int minh);
extern PACKAGE void __cdecl QWidget_setMaximumWidth(QWidgetH* handle, int maxw);
extern PACKAGE void __cdecl QWidget_setMaximumHeight(QWidgetH* handle, int maxh);
extern PACKAGE void __cdecl QWidget_sizeIncrement(QWidgetH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QWidget_setSizeIncrement(QWidgetH* handle, Types::PSize p1)/* overload */;
extern PACKAGE void __cdecl QWidget_setSizeIncrement(QWidgetH* handle, int w, int h)/* overload */;
extern PACKAGE void __cdecl QWidget_baseSize(QWidgetH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QWidget_setBaseSize(QWidgetH* handle, Types::PSize p1)/* overload */;
extern PACKAGE void __cdecl QWidget_setBaseSize(QWidgetH* handle, int basew, int baseh)/* overload */;
extern PACKAGE void __cdecl QWidget_setFixedSize(QWidgetH* handle, Types::PSize p1)/* overload */;
extern PACKAGE void __cdecl QWidget_setFixedSize(QWidgetH* handle, int w, int h)/* overload */;
extern PACKAGE void __cdecl QWidget_setFixedWidth(QWidgetH* handle, int w);
extern PACKAGE void __cdecl QWidget_setFixedHeight(QWidgetH* handle, int h);
extern PACKAGE void __cdecl QWidget_mapToGlobal(QWidgetH* handle, Types::PPoint retval, Types::PPoint p1);
extern PACKAGE void __cdecl QWidget_mapFromGlobal(QWidgetH* handle, Types::PPoint retval, Types::PPoint p1);
extern PACKAGE void __cdecl QWidget_mapToParent(QWidgetH* handle, Types::PPoint retval, Types::PPoint p1);
extern PACKAGE void __cdecl QWidget_mapFromParent(QWidgetH* handle, Types::PPoint retval, Types::PPoint p1);
extern PACKAGE void __cdecl QWidget_mapTo(QWidgetH* handle, Types::PPoint retval, QWidgetH* p1, Types::PPoint p2);
extern PACKAGE void __cdecl QWidget_mapFrom(QWidgetH* handle, Types::PPoint retval, QWidgetH* p1, Types::PPoint p2);
extern PACKAGE QWidgetH* __cdecl QWidget_topLevelWidget(QWidgetH* handle);
extern PACKAGE QWidgetBackgroundMode __cdecl QWidget_backgroundMode(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setBackgroundMode(QWidgetH* handle, QWidgetBackgroundMode p1);
extern PACKAGE QColorH* __cdecl QWidget_backgroundColor(QWidgetH* handle);
extern PACKAGE QColorH* __cdecl QWidget_foregroundColor(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setBackgroundColor(QWidgetH* handle, QColorH* p1);
extern PACKAGE QPixmapH* __cdecl QWidget_backgroundPixmap(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setBackgroundPixmap(QWidgetH* handle, QPixmapH* p1);
extern PACKAGE QColorGroupH* __cdecl QWidget_colorGroup(QWidgetH* handle);
extern PACKAGE QPaletteH* __cdecl QWidget_palette(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_ownPalette(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setPalette(QWidgetH* handle, QPaletteH* p1)/* overload */;
extern PACKAGE void __cdecl QWidget_unsetPalette(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_font(QWidgetH* handle, QFontH* retval);
extern PACKAGE bool __cdecl QWidget_ownFont(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setFont(QWidgetH* handle, QFontH* p1)/* overload */;
extern PACKAGE void __cdecl QWidget_unsetFont(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_fontMetrics(QWidgetH* handle, QFontMetricsH* retval);
extern PACKAGE void __cdecl QWidget_fontInfo(QWidgetH* handle, QFontInfoH* retval);
extern PACKAGE QWidgetPropagationMode __cdecl QWidget_fontPropagation(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setFontPropagation(QWidgetH* handle, QWidgetPropagationMode p1);
extern PACKAGE QWidgetPropagationMode __cdecl QWidget_palettePropagation(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setPalettePropagation(QWidgetH* handle, QWidgetPropagationMode p1);
extern PACKAGE QCursorH* __cdecl QWidget_cursor(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_ownCursor(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setCursor(QWidgetH* handle, QCursorH* p1);
extern PACKAGE void __cdecl QWidget_unsetCursor(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_caption(QWidgetH* handle, System::PWideString retval);
extern PACKAGE QPixmapH* __cdecl QWidget_icon(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_iconText(QWidgetH* handle, System::PWideString retval);
extern PACKAGE bool __cdecl QWidget_hasMouseTracking(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setMask(QWidgetH* handle, QBitmapH* p1)/* overload */;
extern PACKAGE void __cdecl QWidget_setMask(QWidgetH* handle, QRegionH* p1)/* overload */;
extern PACKAGE void __cdecl QWidget_clearMask(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setCaption(QWidgetH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QWidget_setIcon(QWidgetH* handle, QPixmapH* p1);
extern PACKAGE void __cdecl QWidget_setIconText(QWidgetH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QWidget_setMouseTracking(QWidgetH* handle, bool enable);
extern PACKAGE void __cdecl QWidget_setFocus(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_clearFocus(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_isActiveWindow(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setActiveWindow(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_isFocusEnabled(QWidgetH* handle);
extern PACKAGE QWidgetFocusPolicy __cdecl QWidget_focusPolicy(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setFocusPolicy(QWidgetH* handle, QWidgetFocusPolicy p1);
extern PACKAGE bool __cdecl QWidget_hasFocus(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setTabOrder(QWidgetH* p1, QWidgetH* p2);
extern PACKAGE void __cdecl QWidget_setFocusProxy(QWidgetH* handle, QWidgetH* p1);
extern PACKAGE QWidgetH* __cdecl QWidget_focusProxy(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_grabMouse(QWidgetH* handle)/* overload */;
extern PACKAGE void __cdecl QWidget_grabMouse(QWidgetH* handle, QCursorH* p1)/* overload */;
extern PACKAGE void __cdecl QWidget_releaseMouse(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_grabKeyboard(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_releaseKeyboard(QWidgetH* handle);
extern PACKAGE QWidgetH* __cdecl QWidget_mouseGrabber(void);
extern PACKAGE QWidgetH* __cdecl QWidget_keyboardGrabber(void);
extern PACKAGE bool __cdecl QWidget_isUpdatesEnabled(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_repaintUnclipped(QWidgetH* handle, QRegionH* p1, bool erase);
extern PACKAGE void __cdecl QWidget_setUpdatesEnabled(QWidgetH* handle, bool enable);
extern PACKAGE void __cdecl QWidget_update(QWidgetH* handle)/* overload */;
extern PACKAGE void __cdecl QWidget_update(QWidgetH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QWidget_update(QWidgetH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QWidget_repaint(QWidgetH* handle)/* overload */;
extern PACKAGE void __cdecl QWidget_repaint(QWidgetH* handle, bool erase)/* overload */;
extern PACKAGE void __cdecl QWidget_repaint(QWidgetH* handle, int x, int y, int w, int h, bool erase)/* overload */;
extern PACKAGE void __cdecl QWidget_repaint(QWidgetH* handle, Types::PRect p1, bool erase)/* overload */;
extern PACKAGE void __cdecl QWidget_repaint(QWidgetH* handle, QRegionH* p1, bool erase)/* overload */;
extern PACKAGE void __cdecl QWidget_show(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_hide(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_iconify(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_showMinimized(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_showMaximized(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_showFullScreen(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_showNormal(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_polish(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_constPolish(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_close(QWidgetH* handle)/* overload */;
extern PACKAGE void __cdecl QWidget_raise(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_lower(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_stackUnder(QWidgetH* handle, QWidgetH* p1);
extern PACKAGE void __cdecl QWidget_move(QWidgetH* handle, int x, int y)/* overload */;
extern PACKAGE void __cdecl QWidget_move(QWidgetH* handle, Types::PPoint p1)/* overload */;
extern PACKAGE void __cdecl QWidget_resize(QWidgetH* handle, int w, int h)/* overload */;
extern PACKAGE void __cdecl QWidget_resize(QWidgetH* handle, Types::PSize p1)/* overload */;
extern PACKAGE void __cdecl QWidget_setGeometry(QWidgetH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QWidget_setGeometry(QWidgetH* handle, Types::PRect p1)/* overload */;
extern PACKAGE bool __cdecl QWidget_close(QWidgetH* handle, bool alsoDelete)/* overload */;
extern PACKAGE bool __cdecl QWidget_isVisible(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_isVisibleTo(QWidgetH* handle, QWidgetH* p1);
extern PACKAGE bool __cdecl QWidget_isVisibleToTLW(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_visibleRect(QWidgetH* handle, Types::PRect retval);
extern PACKAGE bool __cdecl QWidget_isHidden(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_isMinimized(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_isMaximized(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_sizeHint(QWidgetH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QWidget_minimumSizeHint(QWidgetH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QWidget_sizePolicy(QWidgetH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QWidget_setSizePolicy(QWidgetH* handle, PSizePolicy p1);
extern PACKAGE int __cdecl QWidget_heightForWidth(QWidgetH* handle, int p1);
extern PACKAGE void __cdecl QWidget_adjustSize(QWidgetH* handle);
extern PACKAGE QLayoutH* __cdecl QWidget_layout(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_updateGeometry(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_reparent(QWidgetH* handle, QWidgetH* parent, int p2, Types::PPoint p3, bool showIt)/* overload */;
extern PACKAGE void __cdecl QWidget_reparent(QWidgetH* handle, QWidgetH* parent, Types::PPoint p2, bool showIt)/* overload */;
extern PACKAGE void __cdecl QWidget_recreate(QWidgetH* handle, QWidgetH* parent, int f, Types::PPoint p, bool showIt);
extern PACKAGE void __cdecl QWidget_erase(QWidgetH* handle)/* overload */;
extern PACKAGE void __cdecl QWidget_erase(QWidgetH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QWidget_erase(QWidgetH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QWidget_erase(QWidgetH* handle, QRegionH* p1)/* overload */;
extern PACKAGE void __cdecl QWidget_scroll(QWidgetH* handle, int dx, int dy)/* overload */;
extern PACKAGE void __cdecl QWidget_scroll(QWidgetH* handle, int dx, int dy, Types::PRect p3)/* overload */;
extern PACKAGE void __cdecl QWidget_drawText(QWidgetH* handle, int x, int y, System::PWideString p3)/* overload */;
extern PACKAGE void __cdecl QWidget_drawText(QWidgetH* handle, Types::PPoint p1, System::PWideString p2)/* overload */;
extern PACKAGE QWidgetH* __cdecl QWidget_focusWidget(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_microFocusHint(QWidgetH* handle, Types::PRect retval);
extern PACKAGE bool __cdecl QWidget_acceptDrops(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setAcceptDrops(QWidgetH* handle, bool on);
extern PACKAGE void __cdecl QWidget_setAutoMask(QWidgetH* handle, bool p1);
extern PACKAGE bool __cdecl QWidget_autoMask(QWidgetH* handle);
extern PACKAGE void __cdecl QWidget_setBackgroundOrigin(QWidgetH* handle, QWidgetBackgroundOrigin p1);
extern PACKAGE QWidgetBackgroundOrigin __cdecl QWidget_backgroundOrigin(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_customWhatsThis(QWidgetH* handle);
extern PACKAGE QWidgetH* __cdecl QWidget_parentWidget(QWidgetH* handle);
extern PACKAGE bool __cdecl QWidget_testWState(QWidgetH* handle, unsigned n);
extern PACKAGE bool __cdecl QWidget_testWFlags(QWidgetH* handle, int f);
extern PACKAGE QWidgetH* __cdecl QWidget_find(unsigned p1);
extern PACKAGE QWidgetMapperH* __cdecl QWidget_wmapper(void);
extern PACKAGE void __cdecl QWidget_setPalette(QWidgetH* handle, QPaletteH* p1, bool iReallyMeanIt)/* overload */;
extern PACKAGE void __cdecl QWidget_setFont(QWidgetH* handle, QFontH* p1, bool iReallyMeanIt)/* overload */;
extern PACKAGE QPaintDeviceH* __cdecl QWidget_to_QPaintDevice(QWidgetH* handle);
extern PACKAGE int __cdecl QApplication_argc(QApplicationH* handle);
extern PACKAGE System::PPChar __cdecl QApplication_argv(QApplicationH* handle);
extern PACKAGE QStyleH* __cdecl QApplication_style(void);
extern PACKAGE void __cdecl QApplication_setStyle(QStyleH* p1);
extern PACKAGE int __cdecl QApplication_colorSpec(void);
extern PACKAGE void __cdecl QApplication_setColorSpec(int p1);
extern PACKAGE QCursorH* __cdecl QApplication_overrideCursor(void);
extern PACKAGE void __cdecl QApplication_setOverrideCursor(QCursorH* p1, bool replace);
extern PACKAGE void __cdecl QApplication_restoreOverrideCursor(void);
extern PACKAGE bool __cdecl QApplication_hasGlobalMouseTracking(void);
extern PACKAGE void __cdecl QApplication_setGlobalMouseTracking(bool enable);
extern PACKAGE void __cdecl QApplication_palette(QPaletteH* retval, QWidgetH* p1);
extern PACKAGE void __cdecl QApplication_setPalette(QPaletteH* p1, bool informWidgets, char * className);
extern PACKAGE void __cdecl QApplication_font(QFontH* retval, QWidgetH* p1);
extern PACKAGE void __cdecl QApplication_setFont(QFontH* p1, bool informWidgets, char * className);
extern PACKAGE void __cdecl QApplication_fontMetrics(QFontMetricsH* retval);
extern PACKAGE QWidgetH* __cdecl QApplication_mainWidget(QApplicationH* handle);
extern PACKAGE void __cdecl QApplication_setMainWidget(QApplicationH* handle, QWidgetH* p1);
extern PACKAGE void __cdecl QApplication_polish(QApplicationH* handle, QWidgetH* p1);
extern PACKAGE QWidgetListH* __cdecl QApplication_allWidgets(void);
extern PACKAGE QWidgetListH* __cdecl QApplication_topLevelWidgets(void);
extern PACKAGE QWidgetH* __cdecl QApplication_desktop(void);
extern PACKAGE QWidgetH* __cdecl QApplication_activePopupWidget(void);
extern PACKAGE QWidgetH* __cdecl QApplication_activeModalWidget(void);
extern PACKAGE QClipboardH* __cdecl QApplication_clipboard(void);
extern PACKAGE QWidgetH* __cdecl QApplication_focusWidget(QApplicationH* handle);
extern PACKAGE QWidgetH* __cdecl QApplication_activeWindow(QApplicationH* handle);
extern PACKAGE QWidgetH* __cdecl QApplication_widgetAt(int x, int y, bool child)/* overload */;
extern PACKAGE QWidgetH* __cdecl QApplication_widgetAt(Types::PPoint p1, bool child)/* overload */;
extern PACKAGE int __cdecl QApplication_exec(QApplicationH* handle);
extern PACKAGE void __cdecl QApplication_processEvents(QApplicationH* handle)/* overload */;
extern PACKAGE void __cdecl QApplication_processEvents(QApplicationH* handle, int maxtime)/* overload */;
extern PACKAGE void __cdecl QApplication_processOneEvent(QApplicationH* handle);
extern PACKAGE int __cdecl QApplication_enter_loop(QApplicationH* handle);
extern PACKAGE void __cdecl QApplication_exit_loop(QApplicationH* handle);
extern PACKAGE int __cdecl QApplication_loopLevel(QApplicationH* handle);
extern PACKAGE void __cdecl QApplication_exit(int retcode);
extern PACKAGE bool __cdecl QApplication_sendEvent(QObjectH* receiver, QEventH* event);
extern PACKAGE void __cdecl QApplication_postEvent(QObjectH* receiver, QEventH* event);
extern PACKAGE void __cdecl QApplication_sendPostedEvents(QObjectH* receiver, int event_type)/* overload */;
extern PACKAGE void __cdecl QApplication_sendPostedEvents(void)/* overload */;
extern PACKAGE void __cdecl QApplication_removePostedEvents(QObjectH* receiver);
extern PACKAGE bool __cdecl QApplication_notify(QApplicationH* handle, QObjectH* p1, QEventH* p2);
extern PACKAGE bool __cdecl QApplication_startingUp(void);
extern PACKAGE bool __cdecl QApplication_closingDown(void);
extern PACKAGE void __cdecl QApplication_flushX(void);
extern PACKAGE void __cdecl QApplication_syncX(void);
extern PACKAGE void __cdecl QApplication_beep(void);
extern PACKAGE void __cdecl QApplication_setDefaultCodec(QApplicationH* handle, QTextCodecH* p1);
extern PACKAGE QTextCodecH* __cdecl QApplication_defaultCodec(QApplicationH* handle);
extern PACKAGE void __cdecl QApplication_installTranslator(QApplicationH* handle, QTranslatorH* p1);
extern PACKAGE void __cdecl QApplication_removeTranslator(QApplicationH* handle, QTranslatorH* p1);
extern PACKAGE void __cdecl QApplication_translate(QApplicationH* handle, System::PWideString retval, char * p1, char * p2)/* overload */;
extern PACKAGE void __cdecl QApplication_translate(QApplicationH* handle, System::PWideString retval, char * p1, char * p2, char * p3)/* overload */;
extern PACKAGE void __cdecl QApplication_setWinStyleHighlightColor(QColorH* p1);
extern PACKAGE QColorH* __cdecl QApplication_winStyleHighlightColor(void);
extern PACKAGE void __cdecl QApplication_setDesktopSettingsAware(bool p1);
extern PACKAGE bool __cdecl QApplication_desktopSettingsAware(void);
extern PACKAGE void __cdecl QApplication_setCursorFlashTime(int p1);
extern PACKAGE int __cdecl QApplication_cursorFlashTime(void);
extern PACKAGE void __cdecl QApplication_setDoubleClickInterval(int p1);
extern PACKAGE int __cdecl QApplication_doubleClickInterval(void);
extern PACKAGE void __cdecl QApplication_setWheelScrollLines(int p1);
extern PACKAGE int __cdecl QApplication_wheelScrollLines(void);
extern PACKAGE void __cdecl QApplication_setGlobalStrut(Types::PSize p1);
extern PACKAGE void __cdecl QApplication_globalStrut(Types::PSize retval);
extern PACKAGE void __cdecl QApplication_setStartDragTime(int ms);
extern PACKAGE int __cdecl QApplication_startDragTime(void);
extern PACKAGE void __cdecl QApplication_setStartDragDistance(int l);
extern PACKAGE int __cdecl QApplication_startDragDistance(void);
extern PACKAGE bool __cdecl QApplication_isEffectEnabled(UIEffect p1);
extern PACKAGE void __cdecl QApplication_setEffectEnabled(UIEffect p1, bool enable);
extern PACKAGE void __cdecl QApplication_do_mouse_down(QApplicationH* handle, void * p1);
extern PACKAGE int __cdecl QApplication_macProcessEvent(QApplicationH* handle, void * p1);
extern PACKAGE bool __cdecl QApplication_winEventFilter(QApplicationH* handle, void * p1);
extern PACKAGE WindowsVersion __cdecl QApplication_winVersion(void);
extern PACKAGE void __cdecl QApplication_winFocus(QApplicationH* handle, QWidgetH* p1, bool p2);
extern PACKAGE void __cdecl QApplication_winMouseButtonUp(void);
extern PACKAGE bool __cdecl QApplication_isSessionRestored(QApplicationH* handle);
extern PACKAGE void __cdecl QApplication_sessionId(QApplicationH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QApplication_commitData(QApplicationH* handle, QSessionManagerH* sm);
extern PACKAGE void __cdecl QApplication_saveState(QApplicationH* handle, QSessionManagerH* sm);
extern PACKAGE void __cdecl QApplication_create_xim(void);
extern PACKAGE void __cdecl QApplication_close_xim(void);
extern PACKAGE void __cdecl QApplication_wakeUpGuiThread(QApplicationH* handle);
extern PACKAGE void __cdecl QApplication_quit(QApplicationH* handle);
extern PACKAGE void __cdecl QApplication_closeAllWindows(QApplicationH* handle);
extern PACKAGE void __cdecl QButton_destroy(QButtonH* handle);
extern PACKAGE QButtonH* __cdecl QButton_create(QWidgetH* parent, char * name, int f);
extern PACKAGE void __cdecl QButton_text(QButtonH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QButton_setText(QButtonH* handle, System::PWideString p1);
extern PACKAGE QPixmapH* __cdecl QButton_pixmap(QButtonH* handle);
extern PACKAGE void __cdecl QButton_setPixmap(QButtonH* handle, QPixmapH* p1);
extern PACKAGE int __cdecl QButton_accel(QButtonH* handle);
extern PACKAGE void __cdecl QButton_setAccel(QButtonH* handle, int p1);
extern PACKAGE bool __cdecl QButton_isToggleButton(QButtonH* handle);
extern PACKAGE QButtonToggleType __cdecl QButton_toggleType(QButtonH* handle);
extern PACKAGE void __cdecl QButton_setDown(QButtonH* handle, bool p1);
extern PACKAGE bool __cdecl QButton_isDown(QButtonH* handle);
extern PACKAGE bool __cdecl QButton_isOn(QButtonH* handle);
extern PACKAGE QButtonToggleState __cdecl QButton_state(QButtonH* handle);
extern PACKAGE bool __cdecl QButton_autoResize(QButtonH* handle);
extern PACKAGE void __cdecl QButton_setAutoResize(QButtonH* handle, bool p1);
extern PACKAGE bool __cdecl QButton_autoRepeat(QButtonH* handle);
extern PACKAGE void __cdecl QButton_setAutoRepeat(QButtonH* handle, bool p1);
extern PACKAGE bool __cdecl QButton_isExclusiveToggle(QButtonH* handle);
extern PACKAGE bool __cdecl QButton_focusNextPrevChild(QButtonH* handle, bool next);
extern PACKAGE QButtonGroupH* __cdecl QButton_group(QButtonH* handle);
extern PACKAGE void __cdecl QButton_animateClick(QButtonH* handle);
extern PACKAGE void __cdecl QButton_toggle(QButtonH* handle);
extern PACKAGE void __cdecl QComboBox_destroy(QComboBoxH* handle);
extern PACKAGE QComboBoxH* __cdecl QComboBox_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QComboBoxH* __cdecl QComboBox_create(bool rw, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE int __cdecl QComboBox_count(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_insertStringList(QComboBoxH* handle, QStringListH* p1, int index);
extern PACKAGE void __cdecl QComboBox_insertStrList(QComboBoxH* handle, QStrListH* p1, int index)/* overload */;
extern PACKAGE void __cdecl QComboBox_insertStrList(QComboBoxH* handle, System::PPChar p1, int numStrings, int index)/* overload */;
extern PACKAGE void __cdecl QComboBox_insertItem(QComboBoxH* handle, System::PWideString text, int index)/* overload */;
extern PACKAGE void __cdecl QComboBox_insertItem(QComboBoxH* handle, QPixmapH* pixmap, int index)/* overload */;
extern PACKAGE void __cdecl QComboBox_insertItem(QComboBoxH* handle, QPixmapH* pixmap, System::PWideString text, int index)/* overload */;
extern PACKAGE void __cdecl QComboBox_removeItem(QComboBoxH* handle, int index);
extern PACKAGE void __cdecl QComboBox_clear(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_currentText(QComboBoxH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QComboBox_text(QComboBoxH* handle, System::PWideString retval, int index);
extern PACKAGE QPixmapH* __cdecl QComboBox_pixmap(QComboBoxH* handle, int index);
extern PACKAGE void __cdecl QComboBox_changeItem(QComboBoxH* handle, System::PWideString text, int index)/* overload */;
extern PACKAGE void __cdecl QComboBox_changeItem(QComboBoxH* handle, QPixmapH* pixmap, int index)/* overload */;
extern PACKAGE void __cdecl QComboBox_changeItem(QComboBoxH* handle, QPixmapH* pixmap, System::PWideString text, int index)/* overload */;
extern PACKAGE int __cdecl QComboBox_currentItem(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_setCurrentItem(QComboBoxH* handle, int index);
extern PACKAGE bool __cdecl QComboBox_autoResize(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_setAutoResize(QComboBoxH* handle, bool p1);
extern PACKAGE void __cdecl QComboBox_sizeHint(QComboBoxH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QComboBox_sizePolicy(QComboBoxH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QComboBox_setBackgroundColor(QComboBoxH* handle, QColorH* p1);
extern PACKAGE void __cdecl QComboBox_setPalette(QComboBoxH* handle, QPaletteH* p1);
extern PACKAGE void __cdecl QComboBox_setFont(QComboBoxH* handle, QFontH* p1);
extern PACKAGE void __cdecl QComboBox_setEnabled(QComboBoxH* handle, bool p1);
extern PACKAGE void __cdecl QComboBox_setSizeLimit(QComboBoxH* handle, int p1);
extern PACKAGE int __cdecl QComboBox_sizeLimit(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_setMaxCount(QComboBoxH* handle, int p1);
extern PACKAGE int __cdecl QComboBox_maxCount(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_setInsertionPolicy(QComboBoxH* handle, QComboBoxPolicy policy);
extern PACKAGE QComboBoxPolicy __cdecl QComboBox_insertionPolicy(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_setValidator(QComboBoxH* handle, QValidatorH* p1);
extern PACKAGE QValidatorH* __cdecl QComboBox_validator(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_setListBox(QComboBoxH* handle, QListBoxH* p1);
extern PACKAGE QListBoxH* __cdecl QComboBox_listBox(QComboBoxH* handle);
extern PACKAGE QLineEditH* __cdecl QComboBox_lineEdit(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_setAutoCompletion(QComboBoxH* handle, bool p1);
extern PACKAGE bool __cdecl QComboBox_autoCompletion(QComboBoxH* handle);
extern PACKAGE bool __cdecl QComboBox_eventFilter(QComboBoxH* handle, QObjectH* AnObject, QEventH* event);
extern PACKAGE void __cdecl QComboBox_setDuplicatesEnabled(QComboBoxH* handle, bool enable);
extern PACKAGE bool __cdecl QComboBox_duplicatesEnabled(QComboBoxH* handle);
extern PACKAGE bool __cdecl QComboBox_editable(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_setEditable(QComboBoxH* handle, bool p1);
extern PACKAGE void __cdecl QComboBox_clearValidator(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_clearEdit(QComboBoxH* handle);
extern PACKAGE void __cdecl QComboBox_setEditText(QComboBoxH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QDialog_destroy(QDialogH* handle);
extern PACKAGE QDialogH* __cdecl QDialog_create(QWidgetH* parent, char * name, bool modal, int f);
extern PACKAGE int __cdecl QDialog_exec(QDialogH* handle);
extern PACKAGE int __cdecl QDialog_result(QDialogH* handle);
extern PACKAGE void __cdecl QDialog_show(QDialogH* handle);
extern PACKAGE void __cdecl QDialog_hide(QDialogH* handle);
extern PACKAGE void __cdecl QDialog_move(QDialogH* handle, int x, int y)/* overload */;
extern PACKAGE void __cdecl QDialog_move(QDialogH* handle, Types::PPoint p)/* overload */;
extern PACKAGE void __cdecl QDialog_resize(QDialogH* handle, int w, int h)/* overload */;
extern PACKAGE void __cdecl QDialog_resize(QDialogH* handle, Types::PSize p1)/* overload */;
extern PACKAGE void __cdecl QDialog_setGeometry(QDialogH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QDialog_setGeometry(QDialogH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QDialog_setOrientation(QDialogH* handle, Orientation orientation);
extern PACKAGE Orientation __cdecl QDialog_orientation(QDialogH* handle);
extern PACKAGE void __cdecl QDialog_setExtension(QDialogH* handle, QWidgetH* extension);
extern PACKAGE QWidgetH* __cdecl QDialog_extension(QDialogH* handle);
extern PACKAGE void __cdecl QDialog_sizeHint(QDialogH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QDialog_minimumSizeHint(QDialogH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QDialog_setSizeGripEnabled(QDialogH* handle, bool p1);
extern PACKAGE bool __cdecl QDialog_isSizeGripEnabled(QDialogH* handle);
extern PACKAGE void __cdecl QDragObject_destroy(QDragObjectH* handle);
extern PACKAGE bool __cdecl QDragObject_drag(QDragObjectH* handle);
extern PACKAGE bool __cdecl QDragObject_dragMove(QDragObjectH* handle);
extern PACKAGE void __cdecl QDragObject_dragCopy(QDragObjectH* handle);
extern PACKAGE void __cdecl QDragObject_setPixmap(QDragObjectH* handle, QPixmapH* p1)/* overload */;
extern PACKAGE void __cdecl QDragObject_setPixmap(QDragObjectH* handle, QPixmapH* p1, Types::PPoint hotspot)/* overload */;
extern PACKAGE void __cdecl QDragObject_pixmap(QDragObjectH* handle, QPixmapH* retval);
extern PACKAGE void __cdecl QDragObject_pixmapHotSpot(QDragObjectH* handle, Types::PPoint retval);
extern PACKAGE QWidgetH* __cdecl QDragObject_source(QDragObjectH* handle);
extern PACKAGE QWidgetH* __cdecl QDragObject_target(void);
extern PACKAGE void __cdecl QDragObject_setTarget(QWidgetH* p1);
extern PACKAGE QMimeSourceH* __cdecl QDragObject_to_QMimeSource(QDragObjectH* handle);
extern PACKAGE void __cdecl QStoredDrag_destroy(QStoredDragH* handle);
extern PACKAGE QStoredDragH* __cdecl QStoredDrag_create(char * mimeType, QWidgetH* dragSource, char * name);
extern PACKAGE void __cdecl QStoredDrag_setEncodedData(QStoredDragH* handle, QByteArrayH* p1);
extern PACKAGE char * __cdecl QStoredDrag_format(QStoredDragH* handle, int i);
extern PACKAGE void __cdecl QStoredDrag_encodedData(QStoredDragH* handle, QByteArrayH* retval, char * p1);
extern PACKAGE void __cdecl QTextDrag_destroy(QTextDragH* handle);
extern PACKAGE QTextDragH* __cdecl QTextDrag_create(System::PWideString p1, QWidgetH* dragSource, char * name)/* overload */;
extern PACKAGE QTextDragH* __cdecl QTextDrag_create(QWidgetH* dragSource, char * name)/* overload */;
extern PACKAGE void __cdecl QTextDrag_setText(QTextDragH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QTextDrag_setSubtype(QTextDragH* handle, System::PAnsiString p1);
extern PACKAGE char * __cdecl QTextDrag_format(QTextDragH* handle, int i);
extern PACKAGE void __cdecl QTextDrag_encodedData(QTextDragH* handle, QByteArrayH* retval, char * p1);
extern PACKAGE bool __cdecl QTextDrag_canDecode(QMimeSourceH* e);
extern PACKAGE bool __cdecl QTextDrag_decode(QMimeSourceH* e, System::PWideString s)/* overload */;
extern PACKAGE bool __cdecl QTextDrag_decode(QMimeSourceH* e, System::PWideString s, System::PAnsiString subtype)/* overload */;
extern PACKAGE void __cdecl QImageDrag_destroy(QImageDragH* handle);
extern PACKAGE QImageDragH* __cdecl QImageDrag_create(QImageH* image, QWidgetH* dragSource, char * name)/* overload */;
extern PACKAGE QImageDragH* __cdecl QImageDrag_create(QWidgetH* dragSource, char * name)/* overload */;
extern PACKAGE void __cdecl QImageDrag_setImage(QImageDragH* handle, QImageH* image);
extern PACKAGE char * __cdecl QImageDrag_format(QImageDragH* handle, int i);
extern PACKAGE void __cdecl QImageDrag_encodedData(QImageDragH* handle, QByteArrayH* retval, char * p1);
extern PACKAGE bool __cdecl QImageDrag_canDecode(QMimeSourceH* e);
extern PACKAGE bool __cdecl QImageDrag_decode(QMimeSourceH* e, QImageH* i)/* overload */;
extern PACKAGE bool __cdecl QImageDrag_decode(QMimeSourceH* e, QPixmapH* i)/* overload */;
extern PACKAGE void __cdecl QUriDrag_destroy(QUriDragH* handle);
extern PACKAGE QUriDragH* __cdecl QUriDrag_create(QStrListH* uris, QWidgetH* dragSource, char * name)/* overload */;
extern PACKAGE QUriDragH* __cdecl QUriDrag_create(QWidgetH* dragSource, char * name)/* overload */;
extern PACKAGE void __cdecl QUriDrag_setFilenames(QUriDragH* handle, QStringListH* fnames);
extern PACKAGE void __cdecl QUriDrag_setUnicodeUris(QUriDragH* handle, QStringListH* uuris);
extern PACKAGE void __cdecl QUriDrag_setUris(QUriDragH* handle, QStrListH* uris);
extern PACKAGE void __cdecl QUriDrag_uriToLocalFile(System::PWideString retval, char * p1);
extern PACKAGE void __cdecl QUriDrag_localFileToUri(System::PAnsiString retval, System::PWideString p1);
extern PACKAGE void __cdecl QUriDrag_uriToUnicodeUri(System::PWideString retval, char * p1);
extern PACKAGE void __cdecl QUriDrag_unicodeUriToUri(System::PAnsiString retval, System::PWideString p1);
extern PACKAGE bool __cdecl QUriDrag_canDecode(QMimeSourceH* e);
extern PACKAGE bool __cdecl QUriDrag_decode(QMimeSourceH* e, QStrListH* i);
extern PACKAGE bool __cdecl QUriDrag_decodeToUnicodeUris(QMimeSourceH* e, QStringListH* i);
extern PACKAGE bool __cdecl QUriDrag_decodeLocalFiles(QMimeSourceH* e, QStringListH* i);
extern PACKAGE void __cdecl QColorDrag_destroy(QColorDragH* handle);
extern PACKAGE QColorDragH* __cdecl QColorDrag_create(QColorH* col, QWidgetH* dragsource, char * name)/* overload */;
extern PACKAGE QColorDragH* __cdecl QColorDrag_create(QWidgetH* dragSource, char * name)/* overload */;
extern PACKAGE void __cdecl QColorDrag_setColor(QColorDragH* handle, QColorH* col);
extern PACKAGE bool __cdecl QColorDrag_canDecode(QMimeSourceH* p1);
extern PACKAGE bool __cdecl QColorDrag_decode(QMimeSourceH* p1, QColorH* col);
extern PACKAGE void __cdecl QEvent_destroy(QEventH* handle);
extern PACKAGE QEventH* __cdecl QEvent_create(QEventType _type);
extern PACKAGE QEventType __cdecl QEvent_type(QEventH* handle);
extern PACKAGE void __cdecl QTimerEvent_destroy(QTimerEventH* handle);
extern PACKAGE QTimerEventH* __cdecl QTimerEvent_create(int timerId);
extern PACKAGE int __cdecl QTimerEvent_timerId(QTimerEventH* handle);
extern PACKAGE void __cdecl QMouseEvent_destroy(QMouseEventH* handle);
extern PACKAGE QMouseEventH* __cdecl QMouseEvent_create(QEventType _type, Types::PPoint pos, int button, int state)/* overload */;
extern PACKAGE QMouseEventH* __cdecl QMouseEvent_create(QEventType _type, Types::PPoint pos, Types::PPoint globalPos, int button, int state)/* overload */;
extern PACKAGE Types::PPoint __cdecl QMouseEvent_pos(QMouseEventH* handle);
extern PACKAGE Types::PPoint __cdecl QMouseEvent_globalPos(QMouseEventH* handle);
extern PACKAGE int __cdecl QMouseEvent_x(QMouseEventH* handle);
extern PACKAGE int __cdecl QMouseEvent_y(QMouseEventH* handle);
extern PACKAGE int __cdecl QMouseEvent_globalX(QMouseEventH* handle);
extern PACKAGE int __cdecl QMouseEvent_globalY(QMouseEventH* handle);
extern PACKAGE ButtonState __cdecl QMouseEvent_button(QMouseEventH* handle);
extern PACKAGE ButtonState __cdecl QMouseEvent_state(QMouseEventH* handle);
extern PACKAGE ButtonState __cdecl QMouseEvent_stateAfter(QMouseEventH* handle);
extern PACKAGE void __cdecl QWheelEvent_destroy(QWheelEventH* handle);
extern PACKAGE QWheelEventH* __cdecl QWheelEvent_create(Types::PPoint pos, int delta, int state)/* overload */;
extern PACKAGE QWheelEventH* __cdecl QWheelEvent_create(Types::PPoint pos, Types::PPoint globalPos, int delta, int state)/* overload */;
extern PACKAGE int __cdecl QWheelEvent_delta(QWheelEventH* handle);
extern PACKAGE Types::PPoint __cdecl QWheelEvent_pos(QWheelEventH* handle);
extern PACKAGE Types::PPoint __cdecl QWheelEvent_globalPos(QWheelEventH* handle);
extern PACKAGE int __cdecl QWheelEvent_x(QWheelEventH* handle);
extern PACKAGE int __cdecl QWheelEvent_y(QWheelEventH* handle);
extern PACKAGE int __cdecl QWheelEvent_globalX(QWheelEventH* handle);
extern PACKAGE int __cdecl QWheelEvent_globalY(QWheelEventH* handle);
extern PACKAGE ButtonState __cdecl QWheelEvent_state(QWheelEventH* handle);
extern PACKAGE bool __cdecl QWheelEvent_isAccepted(QWheelEventH* handle);
extern PACKAGE void __cdecl QWheelEvent_accept(QWheelEventH* handle);
extern PACKAGE void __cdecl QWheelEvent_ignore(QWheelEventH* handle);
extern PACKAGE void __cdecl QKeyEvent_destroy(QKeyEventH* handle);
extern PACKAGE QKeyEventH* __cdecl QKeyEvent_create(QEventType _type, int key, int ascii, int state, System::PWideString text, bool autorep, Word count);
extern PACKAGE int __cdecl QKeyEvent_key(QKeyEventH* handle);
extern PACKAGE int __cdecl QKeyEvent_ascii(QKeyEventH* handle);
extern PACKAGE ButtonState __cdecl QKeyEvent_state(QKeyEventH* handle);
extern PACKAGE ButtonState __cdecl QKeyEvent_stateAfter(QKeyEventH* handle);
extern PACKAGE bool __cdecl QKeyEvent_isAccepted(QKeyEventH* handle);
extern PACKAGE void __cdecl QKeyEvent_text(QKeyEventH* handle, System::PWideString retval);
extern PACKAGE bool __cdecl QKeyEvent_isAutoRepeat(QKeyEventH* handle);
extern PACKAGE int __cdecl QKeyEvent_count(QKeyEventH* handle);
extern PACKAGE void __cdecl QKeyEvent_accept(QKeyEventH* handle);
extern PACKAGE void __cdecl QKeyEvent_ignore(QKeyEventH* handle);
extern PACKAGE void __cdecl QFocusEvent_destroy(QFocusEventH* handle);
extern PACKAGE QFocusEventH* __cdecl QFocusEvent_create(QEventType _type);
extern PACKAGE bool __cdecl QFocusEvent_gotFocus(QFocusEventH* handle);
extern PACKAGE bool __cdecl QFocusEvent_lostFocus(QFocusEventH* handle);
extern PACKAGE QFocusEventReason __cdecl QFocusEvent_reason(void);
extern PACKAGE void __cdecl QFocusEvent_setReason(QFocusEventReason reason);
extern PACKAGE void __cdecl QFocusEvent_resetReason(void);
extern PACKAGE void __cdecl QPaintEvent_destroy(QPaintEventH* handle);
extern PACKAGE QPaintEventH* __cdecl QPaintEvent_create(QRegionH* paintRegion, bool erased)/* overload */;
extern PACKAGE QPaintEventH* __cdecl QPaintEvent_create(Types::PRect paintRect, bool erased)/* overload */;
extern PACKAGE void __cdecl QPaintEvent_rect(QPaintEventH* handle, Types::PRect retval);
extern PACKAGE QRegionH* __cdecl QPaintEvent_region(QPaintEventH* handle);
extern PACKAGE bool __cdecl QPaintEvent_erased(QPaintEventH* handle);
extern PACKAGE void __cdecl QMoveEvent_destroy(QMoveEventH* handle);
extern PACKAGE QMoveEventH* __cdecl QMoveEvent_create(Types::PPoint pos, Types::PPoint oldPos);
extern PACKAGE Types::PPoint __cdecl QMoveEvent_pos(QMoveEventH* handle);
extern PACKAGE Types::PPoint __cdecl QMoveEvent_oldPos(QMoveEventH* handle);
extern PACKAGE void __cdecl QResizeEvent_destroy(QResizeEventH* handle);
extern PACKAGE QResizeEventH* __cdecl QResizeEvent_create(Types::PSize size, Types::PSize oldSize);
extern PACKAGE Types::PSize __cdecl QResizeEvent_size(QResizeEventH* handle);
extern PACKAGE Types::PSize __cdecl QResizeEvent_oldSize(QResizeEventH* handle);
extern PACKAGE void __cdecl QCloseEvent_destroy(QCloseEventH* handle);
extern PACKAGE QCloseEventH* __cdecl QCloseEvent_create(void);
extern PACKAGE bool __cdecl QCloseEvent_isAccepted(QCloseEventH* handle);
extern PACKAGE void __cdecl QCloseEvent_accept(QCloseEventH* handle);
extern PACKAGE void __cdecl QCloseEvent_ignore(QCloseEventH* handle);
extern PACKAGE void __cdecl QShowEvent_destroy(QShowEventH* handle);
extern PACKAGE QShowEventH* __cdecl QShowEvent_create(bool spontaneous);
extern PACKAGE bool __cdecl QShowEvent_spontaneous(QShowEventH* handle);
extern PACKAGE void __cdecl QHideEvent_destroy(QHideEventH* handle);
extern PACKAGE QHideEventH* __cdecl QHideEvent_create(bool spontaneous);
extern PACKAGE bool __cdecl QHideEvent_spontaneous(QHideEventH* handle);
extern PACKAGE void __cdecl QDropEvent_destroy(QDropEventH* handle);
extern PACKAGE QDropEventH* __cdecl QDropEvent_create(Types::PPoint pos, QEventType typ);
extern PACKAGE Types::PPoint __cdecl QDropEvent_pos(QDropEventH* handle);
extern PACKAGE bool __cdecl QDropEvent_isAccepted(QDropEventH* handle);
extern PACKAGE void __cdecl QDropEvent_accept(QDropEventH* handle, bool y);
extern PACKAGE void __cdecl QDropEvent_ignore(QDropEventH* handle);
extern PACKAGE bool __cdecl QDropEvent_isActionAccepted(QDropEventH* handle);
extern PACKAGE void __cdecl QDropEvent_acceptAction(QDropEventH* handle, bool y);
extern PACKAGE void __cdecl QDropEvent_setAction(QDropEventH* handle, QDropEventAction a);
extern PACKAGE QDropEventAction __cdecl QDropEvent_action(QDropEventH* handle);
extern PACKAGE QWidgetH* __cdecl QDropEvent_source(QDropEventH* handle);
extern PACKAGE char * __cdecl QDropEvent_format(QDropEventH* handle, int n);
extern PACKAGE void __cdecl QDropEvent_encodedData(QDropEventH* handle, QByteArrayH* retval, char * p1);
extern PACKAGE bool __cdecl QDropEvent_provides(QDropEventH* handle, char * p1);
extern PACKAGE void __cdecl QDropEvent_data(QDropEventH* handle, QByteArrayH* retval, char * f);
extern PACKAGE void __cdecl QDropEvent_setPoint(QDropEventH* handle, Types::PPoint np);
extern PACKAGE QMimeSourceH* __cdecl QDropEvent_to_QMimeSource(QDropEventH* handle);
extern PACKAGE void __cdecl QDragMoveEvent_destroy(QDragMoveEventH* handle);
extern PACKAGE QDragMoveEventH* __cdecl QDragMoveEvent_create(Types::PPoint pos, QEventType typ);
extern PACKAGE void __cdecl QDragMoveEvent_answerRect(QDragMoveEventH* handle, Types::PRect retval);
extern PACKAGE void __cdecl QDragMoveEvent_accept(QDragMoveEventH* handle, bool y)/* overload */;
extern PACKAGE void __cdecl QDragMoveEvent_accept(QDragMoveEventH* handle, Types::PRect r)/* overload */;
extern PACKAGE void __cdecl QDragMoveEvent_ignore(QDragMoveEventH* handle, Types::PRect r)/* overload */;
extern PACKAGE void __cdecl QDragMoveEvent_ignore(QDragMoveEventH* handle)/* overload */;
extern PACKAGE void __cdecl QDragEnterEvent_destroy(QDragEnterEventH* handle);
extern PACKAGE QDragEnterEventH* __cdecl QDragEnterEvent_create(Types::PPoint pos);
extern PACKAGE void __cdecl QDragResponseEvent_destroy(QDragResponseEventH* handle);
extern PACKAGE QDragResponseEventH* __cdecl QDragResponseEvent_create(bool accepted);
extern PACKAGE bool __cdecl QDragResponseEvent_dragAccepted(QDragResponseEventH* handle);
extern PACKAGE void __cdecl QDragLeaveEvent_destroy(QDragLeaveEventH* handle);
extern PACKAGE QDragLeaveEventH* __cdecl QDragLeaveEvent_create(void);
extern PACKAGE void __cdecl QChildEvent_destroy(QChildEventH* handle);
extern PACKAGE QChildEventH* __cdecl QChildEvent_create(QEventType _type, QObjectH* child);
extern PACKAGE QObjectH* __cdecl QChildEvent_child(QChildEventH* handle);
extern PACKAGE bool __cdecl QChildEvent_inserted(QChildEventH* handle);
extern PACKAGE bool __cdecl QChildEvent_removed(QChildEventH* handle);
extern PACKAGE void __cdecl QCustomEvent_destroy(QCustomEventH* handle);
extern PACKAGE QCustomEventH* __cdecl QCustomEvent_create(int _type)/* overload */;
extern PACKAGE QCustomEventH* __cdecl QCustomEvent_create(QEventType _type, void * data)/* overload */;
extern PACKAGE void * __cdecl QCustomEvent_data(QCustomEventH* handle);
extern PACKAGE void __cdecl QCustomEvent_setData(QCustomEventH* handle, void * data);
extern PACKAGE void __cdecl QFrame_destroy(QFrameH* handle);
extern PACKAGE QFrameH* __cdecl QFrame_create(QWidgetH* parent, char * name, int f, bool p4);
extern PACKAGE int __cdecl QFrame_frameStyle(QFrameH* handle);
extern PACKAGE void __cdecl QFrame_setFrameStyle(QFrameH* handle, int p1);
extern PACKAGE int __cdecl QFrame_frameWidth(QFrameH* handle);
extern PACKAGE void __cdecl QFrame_contentsRect(QFrameH* handle, Types::PRect retval);
extern PACKAGE bool __cdecl QFrame_lineShapesOk(QFrameH* handle);
extern PACKAGE void __cdecl QFrame_sizeHint(QFrameH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QFrame_sizePolicy(QFrameH* handle, PSizePolicy retval);
extern PACKAGE QFrameShape __cdecl QFrame_frameShape(QFrameH* handle);
extern PACKAGE void __cdecl QFrame_setFrameShape(QFrameH* handle, QFrameShape p1);
extern PACKAGE QFrameShadow __cdecl QFrame_frameShadow(QFrameH* handle);
extern PACKAGE void __cdecl QFrame_setFrameShadow(QFrameH* handle, QFrameShadow p1);
extern PACKAGE int __cdecl QFrame_lineWidth(QFrameH* handle);
extern PACKAGE void __cdecl QFrame_setLineWidth(QFrameH* handle, int p1);
extern PACKAGE int __cdecl QFrame_margin(QFrameH* handle);
extern PACKAGE void __cdecl QFrame_setMargin(QFrameH* handle, int p1);
extern PACKAGE int __cdecl QFrame_midLineWidth(QFrameH* handle);
extern PACKAGE void __cdecl QFrame_setMidLineWidth(QFrameH* handle, int p1);
extern PACKAGE void __cdecl QFrame_frameRect(QFrameH* handle, Types::PRect retval);
extern PACKAGE void __cdecl QFrame_setFrameRect(QFrameH* handle, Types::PRect p1);
extern PACKAGE void __cdecl QIconDragItem_destroy(QIconDragItemH* handle);
extern PACKAGE QIconDragItemH* __cdecl QIconDragItem_create(void);
extern PACKAGE void __cdecl QIconDragItem_data(QIconDragItemH* handle, QByteArrayH* retval);
extern PACKAGE void __cdecl QIconDragItem_setData(QIconDragItemH* handle, QByteArrayH* d);
extern PACKAGE void __cdecl QIconDrag_destroy(QIconDragH* handle);
extern PACKAGE QIconDragH* __cdecl QIconDrag_create(QWidgetH* dragSource, char * name);
extern PACKAGE void __cdecl QIconDrag_append(QIconDragH* handle, QIconDragItemH* item, Types::PRect pr, Types::PRect tr);
extern PACKAGE char * __cdecl QIconDrag_format(QIconDragH* handle, int i);
extern PACKAGE bool __cdecl QIconDrag_canDecode(QMimeSourceH* e);
extern PACKAGE void __cdecl QIconDrag_encodedData(QIconDragH* handle, QByteArrayH* retval, char * mime);
extern PACKAGE void __cdecl QIconViewItem_destroy(QIconViewItemH* handle);
extern PACKAGE QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent)/* overload */;
extern PACKAGE QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent, QIconViewItemH* after)/* overload */;
extern PACKAGE QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent, System::PWideString text)/* overload */;
extern PACKAGE QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent, QIconViewItemH* after, System::PWideString text)/* overload */;
extern PACKAGE QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent, System::PWideString text, QPixmapH* icon)/* overload */;
extern PACKAGE QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent, QIconViewItemH* after, System::PWideString text, QPixmapH* icon)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_setRenameEnabled(QIconViewItemH* handle, bool allow);
extern PACKAGE void __cdecl QIconViewItem_setDragEnabled(QIconViewItemH* handle, bool allow);
extern PACKAGE void __cdecl QIconViewItem_setDropEnabled(QIconViewItemH* handle, bool allow);
extern PACKAGE void __cdecl QIconViewItem_text(QIconViewItemH* handle, System::PWideString retval);
extern PACKAGE QPixmapH* __cdecl QIconViewItem_pixmap(QIconViewItemH* handle);
extern PACKAGE void __cdecl QIconViewItem_key(QIconViewItemH* handle, System::PWideString retval);
extern PACKAGE bool __cdecl QIconViewItem_renameEnabled(QIconViewItemH* handle);
extern PACKAGE bool __cdecl QIconViewItem_dragEnabled(QIconViewItemH* handle);
extern PACKAGE bool __cdecl QIconViewItem_dropEnabled(QIconViewItemH* handle);
extern PACKAGE QIconViewH* __cdecl QIconViewItem_iconView(QIconViewItemH* handle);
extern PACKAGE QIconViewItemH* __cdecl QIconViewItem_prevItem(QIconViewItemH* handle);
extern PACKAGE QIconViewItemH* __cdecl QIconViewItem_nextItem(QIconViewItemH* handle);
extern PACKAGE int __cdecl QIconViewItem_index(QIconViewItemH* handle);
extern PACKAGE void __cdecl QIconViewItem_setSelected(QIconViewItemH* handle, bool s, bool cb)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_setSelected(QIconViewItemH* handle, bool s)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_setSelectable(QIconViewItemH* handle, bool s);
extern PACKAGE bool __cdecl QIconViewItem_isSelected(QIconViewItemH* handle);
extern PACKAGE bool __cdecl QIconViewItem_isSelectable(QIconViewItemH* handle);
extern PACKAGE void __cdecl QIconViewItem_repaint(QIconViewItemH* handle);
extern PACKAGE void __cdecl QIconViewItem_move(QIconViewItemH* handle, int x, int y)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_moveBy(QIconViewItemH* handle, int dx, int dy)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_move(QIconViewItemH* handle, Types::PPoint pnt)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_moveBy(QIconViewItemH* handle, Types::PPoint pnt)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_rect(QIconViewItemH* handle, Types::PRect retval);
extern PACKAGE int __cdecl QIconViewItem_x(QIconViewItemH* handle);
extern PACKAGE int __cdecl QIconViewItem_y(QIconViewItemH* handle);
extern PACKAGE int __cdecl QIconViewItem_width(QIconViewItemH* handle);
extern PACKAGE int __cdecl QIconViewItem_height(QIconViewItemH* handle);
extern PACKAGE void __cdecl QIconViewItem_size(QIconViewItemH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QIconViewItem_pos(QIconViewItemH* handle, Types::PPoint retval);
extern PACKAGE void __cdecl QIconViewItem_textRect(QIconViewItemH* handle, Types::PRect retval, bool relative);
extern PACKAGE void __cdecl QIconViewItem_pixmapRect(QIconViewItemH* handle, Types::PRect retval, bool relative);
extern PACKAGE bool __cdecl QIconViewItem_contains(QIconViewItemH* handle, Types::PPoint pnt);
extern PACKAGE bool __cdecl QIconViewItem_intersects(QIconViewItemH* handle, Types::PRect r);
extern PACKAGE bool __cdecl QIconViewItem_acceptDrop(QIconViewItemH* handle, QMimeSourceH* mime);
extern PACKAGE void __cdecl QIconViewItem_rename(QIconViewItemH* handle);
extern PACKAGE int __cdecl QIconViewItem_compare(QIconViewItemH* handle, QIconViewItemH* i);
extern PACKAGE void __cdecl QIconViewItem_setText(QIconViewItemH* handle, System::PWideString text)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_setPixmap(QIconViewItemH* handle, QPixmapH* icon)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_setText(QIconViewItemH* handle, System::PWideString text, bool recalc, bool redraw)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_setPixmap(QIconViewItemH* handle, QPixmapH* icon, bool recalc, bool redraw)/* overload */;
extern PACKAGE void __cdecl QIconViewItem_setKey(QIconViewItemH* handle, System::PWideString k);
extern PACKAGE void __cdecl QIconView_destroy(QIconViewH* handle);
extern PACKAGE QIconViewH* __cdecl QIconView_create(QWidgetH* parent, char * name, int f);
extern PACKAGE void __cdecl QIconView_insertItem(QIconViewH* handle, QIconViewItemH* item, QIconViewItemH* after);
extern PACKAGE void __cdecl QIconView_takeItem(QIconViewH* handle, QIconViewItemH* item);
extern PACKAGE int __cdecl QIconView_index(QIconViewH* handle, QIconViewItemH* item);
extern PACKAGE QIconViewItemH* __cdecl QIconView_firstItem(QIconViewH* handle);
extern PACKAGE QIconViewItemH* __cdecl QIconView_lastItem(QIconViewH* handle);
extern PACKAGE QIconViewItemH* __cdecl QIconView_currentItem(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setCurrentItem(QIconViewH* handle, QIconViewItemH* item);
extern PACKAGE void __cdecl QIconView_setSelected(QIconViewH* handle, QIconViewItemH* item, bool s, bool cb);
extern PACKAGE unsigned __cdecl QIconView_count(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_showEvent(QIconViewH* handle, QShowEventH* p1);
extern PACKAGE void __cdecl QIconView_setSelectionMode(QIconViewH* handle, QIconViewSelectionMode m);
extern PACKAGE QIconViewSelectionMode __cdecl QIconView_selectionMode(QIconViewH* handle);
extern PACKAGE QIconViewItemH* __cdecl QIconView_findItem(QIconViewH* handle, Types::PPoint pos)/* overload */;
extern PACKAGE QIconViewItemH* __cdecl QIconView_findItem(QIconViewH* handle, System::PWideString text)/* overload */;
extern PACKAGE void __cdecl QIconView_selectAll(QIconViewH* handle, bool select);
extern PACKAGE void __cdecl QIconView_clearSelection(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_invertSelection(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_repaintItem(QIconViewH* handle, QIconViewItemH* item);
extern PACKAGE void __cdecl QIconView_ensureItemVisible(QIconViewH* handle, QIconViewItemH* item);
extern PACKAGE QIconViewItemH* __cdecl QIconView_findFirstVisibleItem(QIconViewH* handle, Types::PRect r);
extern PACKAGE QIconViewItemH* __cdecl QIconView_findLastVisibleItem(QIconViewH* handle, Types::PRect r);
extern PACKAGE void __cdecl QIconView_clear(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setGridX(QIconViewH* handle, int rx);
extern PACKAGE void __cdecl QIconView_setGridY(QIconViewH* handle, int ry);
extern PACKAGE int __cdecl QIconView_gridX(QIconViewH* handle);
extern PACKAGE int __cdecl QIconView_gridY(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setSpacing(QIconViewH* handle, int sp);
extern PACKAGE int __cdecl QIconView_spacing(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setItemTextPos(QIconViewH* handle, QIconViewItemTextPos pos);
extern PACKAGE QIconViewItemTextPos __cdecl QIconView_itemTextPos(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setItemTextBackground(QIconViewH* handle, QBrushH* b);
extern PACKAGE QBrushH* __cdecl QIconView_itemTextBackground(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setArrangement(QIconViewH* handle, QIconViewArrangement am);
extern PACKAGE QIconViewArrangement __cdecl QIconView_arrangement(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setResizeMode(QIconViewH* handle, QIconViewResizeMode am);
extern PACKAGE QIconViewResizeMode __cdecl QIconView_resizeMode(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setMaxItemWidth(QIconViewH* handle, int w);
extern PACKAGE int __cdecl QIconView_maxItemWidth(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setMaxItemTextLength(QIconViewH* handle, int w);
extern PACKAGE int __cdecl QIconView_maxItemTextLength(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setAutoArrange(QIconViewH* handle, bool b);
extern PACKAGE bool __cdecl QIconView_autoArrange(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setShowToolTips(QIconViewH* handle, bool b);
extern PACKAGE bool __cdecl QIconView_showToolTips(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setSorting(QIconViewH* handle, bool sort, bool ascending);
extern PACKAGE bool __cdecl QIconView_sorting(QIconViewH* handle);
extern PACKAGE bool __cdecl QIconView_sortDirection(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setItemsMovable(QIconViewH* handle, bool b);
extern PACKAGE bool __cdecl QIconView_itemsMovable(QIconViewH* handle);
extern PACKAGE void __cdecl QIconView_setWordWrapIconText(QIconViewH* handle, bool b);
extern PACKAGE bool __cdecl QIconView_wordWrapIconText(QIconViewH* handle);
extern PACKAGE bool __cdecl QIconView_eventFilter(QIconViewH* handle, QObjectH* o, QEventH* p2);
extern PACKAGE void __cdecl QIconView_minimumSizeHint(QIconViewH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QIconView_sizePolicy(QIconViewH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QIconView_sizeHint(QIconViewH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QIconView_sort(QIconViewH* handle, bool ascending);
extern PACKAGE void __cdecl QIconView_setFont(QIconViewH* handle, QFontH* p1);
extern PACKAGE void __cdecl QIconView_setPalette(QIconViewH* handle, QPaletteH* p1);
extern PACKAGE void __cdecl QIconView_arrangeItemsInGrid(QIconViewH* handle, Types::PSize grid, bool update)/* overload */;
extern PACKAGE void __cdecl QIconView_arrangeItemsInGrid(QIconViewH* handle, bool update)/* overload */;
extern PACKAGE void __cdecl QIconView_setContentsPos(QIconViewH* handle, int x, int y);
extern PACKAGE void __cdecl QIconView_updateContents(QIconViewH* handle);
extern PACKAGE void __cdecl QLCDNumber_destroy(QLCDNumberH* handle);
extern PACKAGE QLCDNumberH* __cdecl QLCDNumber_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QLCDNumberH* __cdecl QLCDNumber_create(unsigned numDigits, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE bool __cdecl QLCDNumber_smallDecimalPoint(QLCDNumberH* handle);
extern PACKAGE int __cdecl QLCDNumber_numDigits(QLCDNumberH* handle);
extern PACKAGE void __cdecl QLCDNumber_setNumDigits(QLCDNumberH* handle, int nDigits);
extern PACKAGE bool __cdecl QLCDNumber_checkOverflow(QLCDNumberH* handle, double num)/* overload */;
extern PACKAGE bool __cdecl QLCDNumber_checkOverflow(QLCDNumberH* handle, int num)/* overload */;
extern PACKAGE QLCDNumberMode __cdecl QLCDNumber_mode(QLCDNumberH* handle);
extern PACKAGE void __cdecl QLCDNumber_setMode(QLCDNumberH* handle, QLCDNumberMode p1);
extern PACKAGE QLCDNumberSegmentStyle __cdecl QLCDNumber_segmentStyle(QLCDNumberH* handle);
extern PACKAGE void __cdecl QLCDNumber_setSegmentStyle(QLCDNumberH* handle, QLCDNumberSegmentStyle p1);
extern PACKAGE double __cdecl QLCDNumber_value(QLCDNumberH* handle);
extern PACKAGE int __cdecl QLCDNumber_intValue(QLCDNumberH* handle);
extern PACKAGE void __cdecl QLCDNumber_sizeHint(QLCDNumberH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QLCDNumber_sizePolicy(QLCDNumberH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QLCDNumber_display(QLCDNumberH* handle, int num)/* overload */;
extern PACKAGE void __cdecl QLCDNumber_display(QLCDNumberH* handle, double num)/* overload */;
extern PACKAGE void __cdecl QLCDNumber_display(QLCDNumberH* handle, System::PWideString str)/* overload */;
extern PACKAGE void __cdecl QLCDNumber_setHexMode(QLCDNumberH* handle);
extern PACKAGE void __cdecl QLCDNumber_setDecMode(QLCDNumberH* handle);
extern PACKAGE void __cdecl QLCDNumber_setOctMode(QLCDNumberH* handle);
extern PACKAGE void __cdecl QLCDNumber_setBinMode(QLCDNumberH* handle);
extern PACKAGE void __cdecl QLCDNumber_setSmallDecimalPoint(QLCDNumberH* handle, bool p1);
extern PACKAGE void __cdecl QLineEdit_destroy(QLineEditH* handle);
extern PACKAGE QLineEditH* __cdecl QLineEdit_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QLineEditH* __cdecl QLineEdit_create(System::PWideString p1, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QLineEdit_text(QLineEditH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QLineEdit_displayText(QLineEditH* handle, System::PWideString retval);
extern PACKAGE int __cdecl QLineEdit_maxLength(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_setMaxLength(QLineEditH* handle, int p1);
extern PACKAGE void __cdecl QLineEdit_setFrame(QLineEditH* handle, bool p1);
extern PACKAGE bool __cdecl QLineEdit_frame(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_setEchoMode(QLineEditH* handle, QLineEditEchoMode p1);
extern PACKAGE QLineEditEchoMode __cdecl QLineEdit_echoMode(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_setReadOnly(QLineEditH* handle, bool p1);
extern PACKAGE bool __cdecl QLineEdit_isReadOnly(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_setValidator(QLineEditH* handle, QValidatorH* p1);
extern PACKAGE QValidatorH* __cdecl QLineEdit_validator(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_sizeHint(QLineEditH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QLineEdit_minimumSizeHint(QLineEditH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QLineEdit_sizePolicy(QLineEditH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QLineEdit_setEnabled(QLineEditH* handle, bool p1);
extern PACKAGE void __cdecl QLineEdit_setFont(QLineEditH* handle, QFontH* p1);
extern PACKAGE void __cdecl QLineEdit_setPalette(QLineEditH* handle, QPaletteH* p1);
extern PACKAGE void __cdecl QLineEdit_setSelection(QLineEditH* handle, int p1, int p2);
extern PACKAGE void __cdecl QLineEdit_setCursorPosition(QLineEditH* handle, int p1);
extern PACKAGE int __cdecl QLineEdit_cursorPosition(QLineEditH* handle);
extern PACKAGE bool __cdecl QLineEdit_validateAndSet(QLineEditH* handle, System::PWideString p1, int p2, int p3, int p4);
extern PACKAGE void __cdecl QLineEdit_cut(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_copy(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_paste(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_setAlignment(QLineEditH* handle, int flag);
extern PACKAGE int __cdecl QLineEdit_alignment(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_cursorLeft(QLineEditH* handle, bool mark, int steps);
extern PACKAGE void __cdecl QLineEdit_cursorRight(QLineEditH* handle, bool mark, int steps);
extern PACKAGE void __cdecl QLineEdit_cursorWordForward(QLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QLineEdit_cursorWordBackward(QLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QLineEdit_backspace(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_del(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_home(QLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QLineEdit_end(QLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QLineEdit_setEdited(QLineEditH* handle, bool p1);
extern PACKAGE bool __cdecl QLineEdit_edited(QLineEditH* handle);
extern PACKAGE bool __cdecl QLineEdit_hasMarkedText(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_markedText(QLineEditH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QLineEdit_setText(QLineEditH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QLineEdit_selectAll(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_deselect(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_clearValidator(QLineEditH* handle);
extern PACKAGE void __cdecl QLineEdit_insert(QLineEditH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QLineEdit_clear(QLineEditH* handle);
extern PACKAGE void __cdecl QListBox_destroy(QListBoxH* handle);
extern PACKAGE QListBoxH* __cdecl QListBox_create(QWidgetH* parent, char * name, int f);
extern PACKAGE void __cdecl QListBox_setFont(QListBoxH* handle, QFontH* p1);
extern PACKAGE unsigned __cdecl QListBox_count(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_insertStringList(QListBoxH* handle, QStringListH* p1, int index);
extern PACKAGE void __cdecl QListBox_insertStrList(QListBoxH* handle, QStrListH* p1, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_insertStrList(QListBoxH* handle, System::PPChar p1, int numStrings, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_insertItem(QListBoxH* handle, QListBoxItemH* p1, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_insertItem(QListBoxH* handle, QListBoxItemH* p1, QListBoxItemH* after)/* overload */;
extern PACKAGE void __cdecl QListBox_insertItem(QListBoxH* handle, System::PWideString text, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_insertItem(QListBoxH* handle, QPixmapH* pixmap, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_insertItem(QListBoxH* handle, QPixmapH* pixmap, System::PWideString text, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_removeItem(QListBoxH* handle, int index);
extern PACKAGE void __cdecl QListBox_clear(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_text(QListBoxH* handle, System::PWideString retval, int index);
extern PACKAGE QPixmapH* __cdecl QListBox_pixmap(QListBoxH* handle, int index);
extern PACKAGE void __cdecl QListBox_changeItem(QListBoxH* handle, QListBoxItemH* p1, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_changeItem(QListBoxH* handle, System::PWideString text, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_changeItem(QListBoxH* handle, QPixmapH* pixmap, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_changeItem(QListBoxH* handle, QPixmapH* pixmap, System::PWideString text, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_takeItem(QListBoxH* handle, QListBoxItemH* p1);
extern PACKAGE int __cdecl QListBox_numItemsVisible(QListBoxH* handle);
extern PACKAGE int __cdecl QListBox_currentItem(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_currentText(QListBoxH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QListBox_setCurrentItem(QListBoxH* handle, int index)/* overload */;
extern PACKAGE void __cdecl QListBox_setCurrentItem(QListBoxH* handle, QListBoxItemH* p1)/* overload */;
extern PACKAGE void __cdecl QListBox_centerCurrentItem(QListBoxH* handle);
extern PACKAGE int __cdecl QListBox_topItem(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setTopItem(QListBoxH* handle, int index);
extern PACKAGE void __cdecl QListBox_setBottomItem(QListBoxH* handle, int index);
extern PACKAGE int __cdecl QListBox_maxItemWidth(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setSelectionMode(QListBoxH* handle, QListBoxSelectionMode p1);
extern PACKAGE QListBoxSelectionMode __cdecl QListBox_selectionMode(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setMultiSelection(QListBoxH* handle, bool multi);
extern PACKAGE bool __cdecl QListBox_isMultiSelection(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setSelected(QListBoxH* handle, QListBoxItemH* p1, bool p2)/* overload */;
extern PACKAGE void __cdecl QListBox_setSelected(QListBoxH* handle, int p1, bool p2)/* overload */;
extern PACKAGE bool __cdecl QListBox_isSelected(QListBoxH* handle, int p1)/* overload */;
extern PACKAGE bool __cdecl QListBox_isSelected(QListBoxH* handle, QListBoxItemH* p1)/* overload */;
extern PACKAGE void __cdecl QListBox_sizeHint(QListBoxH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QListBox_minimumSizeHint(QListBoxH* handle, Types::PSize retval);
extern PACKAGE QListBoxItemH* __cdecl QListBox_item(QListBoxH* handle, int index);
extern PACKAGE int __cdecl QListBox_index(QListBoxH* handle, QListBoxItemH* p1);
extern PACKAGE QListBoxItemH* __cdecl QListBox_findItem(QListBoxH* handle, System::PWideString text);
extern PACKAGE void __cdecl QListBox_triggerUpdate(QListBoxH* handle, bool doLayout);
extern PACKAGE bool __cdecl QListBox_itemVisible(QListBoxH* handle, int index)/* overload */;
extern PACKAGE bool __cdecl QListBox_itemVisible(QListBoxH* handle, QListBoxItemH* p1)/* overload */;
extern PACKAGE void __cdecl QListBox_setColumnMode(QListBoxH* handle, QListBoxLayoutMode p1)/* overload */;
extern PACKAGE void __cdecl QListBox_setColumnMode(QListBoxH* handle, int p1)/* overload */;
extern PACKAGE void __cdecl QListBox_setRowMode(QListBoxH* handle, QListBoxLayoutMode p1)/* overload */;
extern PACKAGE void __cdecl QListBox_setRowMode(QListBoxH* handle, int p1)/* overload */;
extern PACKAGE QListBoxLayoutMode __cdecl QListBox_columnMode(QListBoxH* handle);
extern PACKAGE QListBoxLayoutMode __cdecl QListBox_rowMode(QListBoxH* handle);
extern PACKAGE int __cdecl QListBox_numColumns(QListBoxH* handle);
extern PACKAGE int __cdecl QListBox_numRows(QListBoxH* handle);
extern PACKAGE bool __cdecl QListBox_variableWidth(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setVariableWidth(QListBoxH* handle, bool p1);
extern PACKAGE bool __cdecl QListBox_variableHeight(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setVariableHeight(QListBoxH* handle, bool p1);
extern PACKAGE void __cdecl QListBox_viewportPaintEvent(QListBoxH* handle, QPaintEventH* p1);
extern PACKAGE bool __cdecl QListBox_dragSelect(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setDragSelect(QListBoxH* handle, bool p1);
extern PACKAGE bool __cdecl QListBox_autoScroll(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setAutoScroll(QListBoxH* handle, bool p1);
extern PACKAGE bool __cdecl QListBox_autoScrollBar(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setAutoScrollBar(QListBoxH* handle, bool enable);
extern PACKAGE bool __cdecl QListBox_scrollBar(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setScrollBar(QListBoxH* handle, bool enable);
extern PACKAGE bool __cdecl QListBox_autoBottomScrollBar(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setAutoBottomScrollBar(QListBoxH* handle, bool enable);
extern PACKAGE bool __cdecl QListBox_bottomScrollBar(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setBottomScrollBar(QListBoxH* handle, bool enable);
extern PACKAGE bool __cdecl QListBox_smoothScrolling(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setSmoothScrolling(QListBoxH* handle, bool p1);
extern PACKAGE bool __cdecl QListBox_autoUpdate(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_setAutoUpdate(QListBoxH* handle, bool p1);
extern PACKAGE void __cdecl QListBox_setFixedVisibleLines(QListBoxH* handle, int lines);
extern PACKAGE void __cdecl QListBox_inSort(QListBoxH* handle, QListBoxItemH* p1)/* overload */;
extern PACKAGE void __cdecl QListBox_inSort(QListBoxH* handle, System::PWideString text)/* overload */;
extern PACKAGE int __cdecl QListBox_cellHeight(QListBoxH* handle, int i)/* overload */;
extern PACKAGE int __cdecl QListBox_cellHeight(QListBoxH* handle)/* overload */;
extern PACKAGE int __cdecl QListBox_cellWidth(QListBoxH* handle)/* overload */;
extern PACKAGE int __cdecl QListBox_cellWidth(QListBoxH* handle, int i)/* overload */;
extern PACKAGE int __cdecl QListBox_numCols(QListBoxH* handle);
extern PACKAGE int __cdecl QListBox_itemHeight(QListBoxH* handle, int index);
extern PACKAGE QListBoxItemH* __cdecl QListBox_itemAt(QListBoxH* handle, Types::PPoint p1);
extern PACKAGE void __cdecl QListBox_itemRect(QListBoxH* handle, Types::PRect retval, QListBoxItemH* item);
extern PACKAGE QListBoxItemH* __cdecl QListBox_firstItem(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_sort(QListBoxH* handle, bool ascending);
extern PACKAGE void __cdecl QListBox_ensureCurrentVisible(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_clearSelection(QListBoxH* handle);
extern PACKAGE void __cdecl QListBox_selectAll(QListBoxH* handle, bool select);
extern PACKAGE void __cdecl QListBox_invertSelection(QListBoxH* handle);
extern PACKAGE void __cdecl QListBoxItem_destroy(QListBoxItemH* handle);
extern PACKAGE QListBoxItemH* __cdecl QListBoxItem_create(QListBoxH* listbox)/* overload */;
extern PACKAGE QListBoxItemH* __cdecl QListBoxItem_create(QListBoxH* listbox, QListBoxItemH* after)/* overload */;
extern PACKAGE void __cdecl QListBoxItem_text(QListBoxItemH* handle, System::PWideString retval);
extern PACKAGE QPixmapH* __cdecl QListBoxItem_pixmap(QListBoxItemH* handle);
extern PACKAGE int __cdecl QListBoxItem_height(QListBoxItemH* handle, QListBoxH* p1);
extern PACKAGE int __cdecl QListBoxItem_width(QListBoxItemH* handle, QListBoxH* p1);
extern PACKAGE bool __cdecl QListBoxItem_selected(QListBoxItemH* handle);
extern PACKAGE bool __cdecl QListBoxItem_current(QListBoxItemH* handle);
extern PACKAGE QListBoxH* __cdecl QListBoxItem_listBox(QListBoxItemH* handle);
extern PACKAGE void __cdecl QListBoxItem_setSelectable(QListBoxItemH* handle, bool b);
extern PACKAGE bool __cdecl QListBoxItem_isSelectable(QListBoxItemH* handle);
extern PACKAGE QListBoxItemH* __cdecl QListBoxItem_next(QListBoxItemH* handle);
extern PACKAGE QListBoxItemH* __cdecl QListBoxItem_prev(QListBoxItemH* handle);
extern PACKAGE void __cdecl QListBoxText_destroy(QListBoxTextH* handle);
extern PACKAGE QListBoxTextH* __cdecl QListBoxText_create(QListBoxH* listbox, System::PWideString text)/* overload */;
extern PACKAGE QListBoxTextH* __cdecl QListBoxText_create(System::PWideString text)/* overload */;
extern PACKAGE QListBoxTextH* __cdecl QListBoxText_create(QListBoxH* listbox, System::PWideString text, QListBoxItemH* after)/* overload */;
extern PACKAGE int __cdecl QListBoxText_height(QListBoxTextH* handle, QListBoxH* p1);
extern PACKAGE int __cdecl QListBoxText_width(QListBoxTextH* handle, QListBoxH* p1);
extern PACKAGE void __cdecl QListBoxPixmap_destroy(QListBoxPixmapH* handle);
extern PACKAGE QListBoxPixmapH* __cdecl QListBoxPixmap_create(QListBoxH* listbox, QPixmapH* p2)/* overload */;
extern PACKAGE QListBoxPixmapH* __cdecl QListBoxPixmap_create(QPixmapH* p1)/* overload */;
extern PACKAGE QListBoxPixmapH* __cdecl QListBoxPixmap_create(QListBoxH* listbox, QPixmapH* pix, QListBoxItemH* after)/* overload */;
extern PACKAGE QListBoxPixmapH* __cdecl QListBoxPixmap_create(QListBoxH* listbox, QPixmapH* p2, System::PWideString p3)/* overload */;
extern PACKAGE QListBoxPixmapH* __cdecl QListBoxPixmap_create(QPixmapH* p1, System::PWideString p2)/* overload */;
extern PACKAGE QListBoxPixmapH* __cdecl QListBoxPixmap_create(QListBoxH* listbox, QPixmapH* pix, System::PWideString p3, QListBoxItemH* after)/* overload */;
extern PACKAGE QPixmapH* __cdecl QListBoxPixmap_pixmap(QListBoxPixmapH* handle);
extern PACKAGE int __cdecl QListBoxPixmap_height(QListBoxPixmapH* handle, QListBoxH* p1);
extern PACKAGE int __cdecl QListBoxPixmap_width(QListBoxPixmapH* handle, QListBoxH* p1);
extern PACKAGE void __cdecl QListViewItem_destroy(QListViewItemH* handle);
extern PACKAGE QListViewItemH* __cdecl QListViewItem_create(QListViewH* parent)/* overload */;
extern PACKAGE QListViewItemH* __cdecl QListViewItem_create(QListViewItemH* parent)/* overload */;
extern PACKAGE QListViewItemH* __cdecl QListViewItem_create(QListViewH* parent, QListViewItemH* after)/* overload */;
extern PACKAGE QListViewItemH* __cdecl QListViewItem_create(QListViewItemH* parent, QListViewItemH* after)/* overload */;
extern PACKAGE QListViewItemH* __cdecl QListViewItem_create(QListViewH* parent, System::PWideString p2, System::PWideString p3, System::PWideString p4, System::PWideString p5, System::PWideString p6, System::PWideString p7, System::PWideString p8, System::PWideString p9)/* overload */;
extern PACKAGE QListViewItemH* __cdecl QListViewItem_create(QListViewItemH* parent, System::PWideString p2, System::PWideString p3, System::PWideString p4, System::PWideString p5, System::PWideString p6, System::PWideString p7, System::PWideString p8, System::PWideString p9)/* overload */;
extern PACKAGE QListViewItemH* __cdecl QListViewItem_create(QListViewH* parent, QListViewItemH* after, System::PWideString p3, System::PWideString p4, System::PWideString p5, System::PWideString p6, System::PWideString p7, System::PWideString p8, System::PWideString p9, System::PWideString p10)/* overload */;
extern PACKAGE QListViewItemH* __cdecl QListViewItem_create(QListViewItemH* parent, QListViewItemH* after, System::PWideString p3, System::PWideString p4, System::PWideString p5, System::PWideString p6, System::PWideString p7, System::PWideString p8, System::PWideString p9, System::PWideString p10)/* overload */;
extern PACKAGE void __cdecl QListViewItem_insertItem(QListViewItemH* handle, QListViewItemH* p1);
extern PACKAGE void __cdecl QListViewItem_takeItem(QListViewItemH* handle, QListViewItemH* p1);
extern PACKAGE void __cdecl QListViewItem_removeItem(QListViewItemH* handle, QListViewItemH* p1);
extern PACKAGE int __cdecl QListViewItem_height(QListViewItemH* handle);
extern PACKAGE void __cdecl QListViewItem_invalidateHeight(QListViewItemH* handle);
extern PACKAGE int __cdecl QListViewItem_totalHeight(QListViewItemH* handle);
extern PACKAGE int __cdecl QListViewItem_width(QListViewItemH* handle, QFontMetricsH* p1, QListViewH* p2, int column);
extern PACKAGE void __cdecl QListViewItem_widthChanged(QListViewItemH* handle, int column);
extern PACKAGE int __cdecl QListViewItem_depth(QListViewItemH* handle);
extern PACKAGE void __cdecl QListViewItem_setText(QListViewItemH* handle, int p1, System::PWideString p2);
extern PACKAGE void __cdecl QListViewItem_text(QListViewItemH* handle, System::PWideString retval, int p1);
extern PACKAGE void __cdecl QListViewItem_setPixmap(QListViewItemH* handle, int p1, QPixmapH* p2);
extern PACKAGE QPixmapH* __cdecl QListViewItem_pixmap(QListViewItemH* handle, int p1);
extern PACKAGE void __cdecl QListViewItem_key(QListViewItemH* handle, System::PWideString retval, int p1, bool p2);
extern PACKAGE void __cdecl QListViewItem_sortChildItems(QListViewItemH* handle, int p1, bool p2);
extern PACKAGE int __cdecl QListViewItem_childCount(QListViewItemH* handle);
extern PACKAGE bool __cdecl QListViewItem_isOpen(QListViewItemH* handle);
extern PACKAGE void __cdecl QListViewItem_setOpen(QListViewItemH* handle, bool p1);
extern PACKAGE void __cdecl QListViewItem_setup(QListViewItemH* handle);
extern PACKAGE void __cdecl QListViewItem_setSelected(QListViewItemH* handle, bool p1);
extern PACKAGE bool __cdecl QListViewItem_isSelected(QListViewItemH* handle);
extern PACKAGE void __cdecl QListViewItem_paintCell(QListViewItemH* handle, QPainterH* p1, QColorGroupH* cg, int column, int width, int alignment);
extern PACKAGE void __cdecl QListViewItem_paintBranches(QListViewItemH* handle, QPainterH* p, QColorGroupH* cg, int w, int y, int h, GUIStyle s);
extern PACKAGE void __cdecl QListViewItem_paintFocus(QListViewItemH* handle, QPainterH* p1, QColorGroupH* cg, Types::PRect r);
extern PACKAGE QListViewItemH* __cdecl QListViewItem_firstChild(QListViewItemH* handle);
extern PACKAGE QListViewItemH* __cdecl QListViewItem_nextSibling(QListViewItemH* handle);
extern PACKAGE QListViewItemH* __cdecl QListViewItem_parent(QListViewItemH* handle);
extern PACKAGE QListViewItemH* __cdecl QListViewItem_itemAbove(QListViewItemH* handle);
extern PACKAGE QListViewItemH* __cdecl QListViewItem_itemBelow(QListViewItemH* handle);
extern PACKAGE int __cdecl QListViewItem_itemPos(QListViewItemH* handle);
extern PACKAGE QListViewH* __cdecl QListViewItem_listView(QListViewItemH* handle);
extern PACKAGE void __cdecl QListViewItem_setSelectable(QListViewItemH* handle, bool enable);
extern PACKAGE bool __cdecl QListViewItem_isSelectable(QListViewItemH* handle);
extern PACKAGE void __cdecl QListViewItem_setExpandable(QListViewItemH* handle, bool p1);
extern PACKAGE bool __cdecl QListViewItem_isExpandable(QListViewItemH* handle);
extern PACKAGE void __cdecl QListViewItem_repaint(QListViewItemH* handle);
extern PACKAGE void __cdecl QListViewItem_sort(QListViewItemH* handle);
extern PACKAGE void __cdecl QListViewItem_moveItem(QListViewItemH* handle, QListViewItemH* after);
extern PACKAGE void __cdecl QListView_destroy(QListViewH* handle);
extern PACKAGE QListViewH* __cdecl QListView_create(QWidgetH* parent, char * name, int f)/* overload */;
extern PACKAGE QListViewH* __cdecl QListView_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE int __cdecl QListView_treeStepSize(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setTreeStepSize(QListViewH* handle, int p1);
extern PACKAGE void __cdecl QListView_insertItem(QListViewH* handle, QListViewItemH* p1);
extern PACKAGE void __cdecl QListView_takeItem(QListViewH* handle, QListViewItemH* p1);
extern PACKAGE void __cdecl QListView_removeItem(QListViewH* handle, QListViewItemH* p1);
extern PACKAGE void __cdecl QListView_clear(QListViewH* handle);
extern PACKAGE QHeaderH* __cdecl QListView_header(QListViewH* handle);
extern PACKAGE int __cdecl QListView_addColumn(QListViewH* handle, System::PWideString _label, int size)/* overload */;
extern PACKAGE int __cdecl QListView_addColumn(QListViewH* handle, QIconSetH* iconset, System::PWideString _label, int size)/* overload */;
extern PACKAGE void __cdecl QListView_removeColumn(QListViewH* handle, int index);
extern PACKAGE void __cdecl QListView_setColumnText(QListViewH* handle, int column, System::PWideString _label)/* overload */;
extern PACKAGE void __cdecl QListView_setColumnText(QListViewH* handle, int column, QIconSetH* iconset, System::PWideString _label)/* overload */;
extern PACKAGE void __cdecl QListView_columnText(QListViewH* handle, System::PWideString retval, int column);
extern PACKAGE void __cdecl QListView_setColumnWidth(QListViewH* handle, int column, int width);
extern PACKAGE int __cdecl QListView_columnWidth(QListViewH* handle, int column);
extern PACKAGE void __cdecl QListView_setColumnWidthMode(QListViewH* handle, int column, QListViewWidthMode p2);
extern PACKAGE QListViewWidthMode __cdecl QListView_columnWidthMode(QListViewH* handle, int column);
extern PACKAGE int __cdecl QListView_columns(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setColumnAlignment(QListViewH* handle, int p1, int p2);
extern PACKAGE int __cdecl QListView_columnAlignment(QListViewH* handle, int p1);
extern PACKAGE void __cdecl QListView_show(QListViewH* handle);
extern PACKAGE QListViewItemH* __cdecl QListView_itemAt(QListViewH* handle, Types::PPoint screenPos);
extern PACKAGE void __cdecl QListView_itemRect(QListViewH* handle, Types::PRect retval, QListViewItemH* p1);
extern PACKAGE int __cdecl QListView_itemPos(QListViewH* handle, QListViewItemH* p1);
extern PACKAGE void __cdecl QListView_ensureItemVisible(QListViewH* handle, QListViewItemH* p1);
extern PACKAGE void __cdecl QListView_repaintItem(QListViewH* handle, QListViewItemH* p1);
extern PACKAGE void __cdecl QListView_setMultiSelection(QListViewH* handle, bool enable);
extern PACKAGE bool __cdecl QListView_isMultiSelection(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setSelectionMode(QListViewH* handle, QListViewSelectionMode mode);
extern PACKAGE QListViewSelectionMode __cdecl QListView_selectionMode(QListViewH* handle);
extern PACKAGE void __cdecl QListView_clearSelection(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setSelected(QListViewH* handle, QListViewItemH* p1, bool p2);
extern PACKAGE bool __cdecl QListView_isSelected(QListViewH* handle, QListViewItemH* p1);
extern PACKAGE QListViewItemH* __cdecl QListView_selectedItem(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setOpen(QListViewH* handle, QListViewItemH* p1, bool p2);
extern PACKAGE bool __cdecl QListView_isOpen(QListViewH* handle, QListViewItemH* p1);
extern PACKAGE void __cdecl QListView_setCurrentItem(QListViewH* handle, QListViewItemH* p1);
extern PACKAGE QListViewItemH* __cdecl QListView_currentItem(QListViewH* handle);
extern PACKAGE QListViewItemH* __cdecl QListView_firstChild(QListViewH* handle);
extern PACKAGE int __cdecl QListView_childCount(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setAllColumnsShowFocus(QListViewH* handle, bool p1);
extern PACKAGE bool __cdecl QListView_allColumnsShowFocus(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setItemMargin(QListViewH* handle, int p1);
extern PACKAGE int __cdecl QListView_itemMargin(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setRootIsDecorated(QListViewH* handle, bool p1);
extern PACKAGE bool __cdecl QListView_rootIsDecorated(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setSorting(QListViewH* handle, int column, bool increasing);
extern PACKAGE void __cdecl QListView_sort(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setFont(QListViewH* handle, QFontH* p1);
extern PACKAGE void __cdecl QListView_setPalette(QListViewH* handle, QPaletteH* p1);
extern PACKAGE bool __cdecl QListView_eventFilter(QListViewH* handle, QObjectH* o, QEventH* p2);
extern PACKAGE void __cdecl QListView_sizeHint(QListViewH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QListView_minimumSizeHint(QListViewH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QListView_setShowSortIndicator(QListViewH* handle, bool show);
extern PACKAGE bool __cdecl QListView_showSortIndicator(QListViewH* handle);
extern PACKAGE void __cdecl QListView_invertSelection(QListViewH* handle);
extern PACKAGE void __cdecl QListView_selectAll(QListViewH* handle, bool select);
extern PACKAGE void __cdecl QListView_triggerUpdate(QListViewH* handle);
extern PACKAGE void __cdecl QListView_setContentsPos(QListViewH* handle, int x, int y);
extern PACKAGE void __cdecl QCheckListItem_destroy(QCheckListItemH* handle);
extern PACKAGE QCheckListItemH* __cdecl QCheckListItem_create(QCheckListItemH* parent, System::PWideString text, QCheckListItemType p3)/* overload */;
extern PACKAGE QCheckListItemH* __cdecl QCheckListItem_create(QListViewItemH* parent, System::PWideString text, QCheckListItemType p3)/* overload */;
extern PACKAGE QCheckListItemH* __cdecl QCheckListItem_create(QListViewH* parent, System::PWideString text, QCheckListItemType p3)/* overload */;
extern PACKAGE QCheckListItemH* __cdecl QCheckListItem_create(QListViewItemH* parent, System::PWideString text, QPixmapH* p3)/* overload */;
extern PACKAGE QCheckListItemH* __cdecl QCheckListItem_create(QListViewH* parent, System::PWideString text, QPixmapH* p3)/* overload */;
extern PACKAGE void __cdecl QCheckListItem_paintCell(QCheckListItemH* handle, QPainterH* p1, QColorGroupH* cg, int column, int width, int alignment);
extern PACKAGE void __cdecl QCheckListItem_paintFocus(QCheckListItemH* handle, QPainterH* p1, QColorGroupH* cg, Types::PRect r);
extern PACKAGE int __cdecl QCheckListItem_width(QCheckListItemH* handle, QFontMetricsH* p1, QListViewH* p2, int column);
extern PACKAGE void __cdecl QCheckListItem_setup(QCheckListItemH* handle);
extern PACKAGE void __cdecl QCheckListItem_setOn(QCheckListItemH* handle, bool p1);
extern PACKAGE bool __cdecl QCheckListItem_isOn(QCheckListItemH* handle);
extern PACKAGE QCheckListItemType __cdecl QCheckListItem_type(QCheckListItemH* handle);
extern PACKAGE void __cdecl QCheckListItem_text(QCheckListItemH* handle, System::PWideString retval)/* overload */;
extern PACKAGE void __cdecl QCheckListItem_text(QCheckListItemH* handle, System::PWideString retval, int n)/* overload */;
extern PACKAGE void __cdecl QCheckListItem_setEnabled(QCheckListItemH* handle, bool b);
extern PACKAGE bool __cdecl QCheckListItem_isEnabled(QCheckListItemH* handle);
extern PACKAGE void __cdecl QListViewItemIterator_destroy(QListViewItemIteratorH* handle);
extern PACKAGE QListViewItemIteratorH* __cdecl QListViewItemIterator_create(void)/* overload */;
extern PACKAGE QListViewItemIteratorH* __cdecl QListViewItemIterator_create(QListViewItemH* item)/* overload */;
extern PACKAGE QListViewItemIteratorH* __cdecl QListViewItemIterator_create(QListViewItemIteratorH* it)/* overload */;
extern PACKAGE QListViewItemIteratorH* __cdecl QListViewItemIterator_create(QListViewH* lv)/* overload */;
extern PACKAGE QListViewItemH* __cdecl QListViewItemIterator_current(QListViewItemIteratorH* handle);
extern PACKAGE void __cdecl QMenuBar_destroy(QMenuBarH* handle);
extern PACKAGE QMenuBarH* __cdecl QMenuBar_create(QWidgetH* parent, char * name);
extern PACKAGE void __cdecl QMenuBar_updateItem(QMenuBarH* handle, int id);
extern PACKAGE void __cdecl QMenuBar_show(QMenuBarH* handle);
extern PACKAGE void __cdecl QMenuBar_hide(QMenuBarH* handle);
extern PACKAGE bool __cdecl QMenuBar_eventFilter(QMenuBarH* handle, QObjectH* p1, QEventH* p2);
extern PACKAGE int __cdecl QMenuBar_heightForWidth(QMenuBarH* handle, int p1);
extern PACKAGE QMenuBarSeparator __cdecl QMenuBar_separator(QMenuBarH* handle);
extern PACKAGE void __cdecl QMenuBar_setSeparator(QMenuBarH* handle, QMenuBarSeparator when);
extern PACKAGE void __cdecl QMenuBar_setDefaultUp(QMenuBarH* handle, bool p1);
extern PACKAGE bool __cdecl QMenuBar_isDefaultUp(QMenuBarH* handle);
extern PACKAGE bool __cdecl QMenuBar_customWhatsThis(QMenuBarH* handle);
extern PACKAGE void __cdecl QMenuBar_sizeHint(QMenuBarH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QMenuBar_minimumSize(QMenuBarH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QMenuBar_minimumSizeHint(QMenuBarH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QMenuBar_activateItemAt(QMenuBarH* handle, int index);
extern PACKAGE QMenuDataH* __cdecl QMenuBar_to_QMenuData(QMenuBarH* handle);
extern PACKAGE void __cdecl QMessageBox_destroy(QMessageBoxH* handle);
extern PACKAGE QMessageBoxH* __cdecl QMessageBox_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QMessageBoxH* __cdecl QMessageBox_create(System::PWideString caption, System::PWideString text, QMessageBoxIcon icon, int button0, int button1, int button2, QWidgetH* parent, char * name, bool modal, int f)/* overload */;
extern PACKAGE int __cdecl QMessageBox_information(QWidgetH* parent, System::PWideString caption, System::PWideString text, int button0, int button1, int button2)/* overload */;
extern PACKAGE int __cdecl QMessageBox_information(QWidgetH* parent, System::PWideString caption, System::PWideString text, System::PWideString button0Text, System::PWideString button1Text, System::PWideString button2Text, int defaultButtonNumber, int escapeButtonNumber)/* overload */;
extern PACKAGE int __cdecl QMessageBox_warning(QWidgetH* parent, System::PWideString caption, System::PWideString text, int button0, int button1, int button2)/* overload */;
extern PACKAGE int __cdecl QMessageBox_warning(QWidgetH* parent, System::PWideString caption, System::PWideString text, System::PWideString button0Text, System::PWideString button1Text, System::PWideString button2Text, int defaultButtonNumber, int escapeButtonNumber)/* overload */;
extern PACKAGE int __cdecl QMessageBox_critical(QWidgetH* parent, System::PWideString caption, System::PWideString text, int button0, int button1, int button2)/* overload */;
extern PACKAGE int __cdecl QMessageBox_critical(QWidgetH* parent, System::PWideString caption, System::PWideString text, System::PWideString button0Text, System::PWideString button1Text, System::PWideString button2Text, int defaultButtonNumber, int escapeButtonNumber)/* overload */;
extern PACKAGE void __cdecl QMessageBox_about(QWidgetH* parent, System::PWideString caption, System::PWideString text);
extern PACKAGE void __cdecl QMessageBox_aboutQt(QWidgetH* parent, System::PWideString caption);
extern PACKAGE int __cdecl QMessageBox_message(System::PWideString caption, System::PWideString text, System::PWideString buttonText, QWidgetH* parent, char * name);
extern PACKAGE bool __cdecl QMessageBox_query(System::PWideString caption, System::PWideString text, System::PWideString yesButtonText, System::PWideString noButtonText, QWidgetH* parent, char * name);
extern PACKAGE void __cdecl QMessageBox_text(QMessageBoxH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QMessageBox_setText(QMessageBoxH* handle, System::PWideString p1);
extern PACKAGE QMessageBoxIcon __cdecl QMessageBox_icon(QMessageBoxH* handle);
extern PACKAGE void __cdecl QMessageBox_setIcon(QMessageBoxH* handle, QMessageBoxIcon p1)/* overload */;
extern PACKAGE void __cdecl QMessageBox_setIcon(QMessageBoxH* handle, QPixmapH* p1)/* overload */;
extern PACKAGE QPixmapH* __cdecl QMessageBox_iconPixmap(QMessageBoxH* handle);
extern PACKAGE void __cdecl QMessageBox_setIconPixmap(QMessageBoxH* handle, QPixmapH* p1);
extern PACKAGE void __cdecl QMessageBox_buttonText(QMessageBoxH* handle, System::PWideString retval, int button);
extern PACKAGE void __cdecl QMessageBox_setButtonText(QMessageBoxH* handle, int button, System::PWideString p2);
extern PACKAGE void __cdecl QMessageBox_adjustSize(QMessageBoxH* handle);
extern PACKAGE void __cdecl QMessageBox_standardIcon(QPixmapH* retval, QMessageBoxIcon icon, GUIStyle style);
extern PACKAGE TextFormat __cdecl QMessageBox_textFormat(QMessageBoxH* handle);
extern PACKAGE void __cdecl QMessageBox_setTextFormat(QMessageBoxH* handle, TextFormat p1);
extern PACKAGE void __cdecl QMultiLineEdit_destroy(QMultiLineEditH* handle);
extern PACKAGE QMultiLineEditH* __cdecl QMultiLineEdit_create(QWidgetH* parent, char * name);
extern PACKAGE void __cdecl QMultiLineEdit_textLine(QMultiLineEditH* handle, System::PWideString retval, int line);
extern PACKAGE int __cdecl QMultiLineEdit_numLines(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_sizeHint(QMultiLineEditH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QMultiLineEdit_minimumSizeHint(QMultiLineEditH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QMultiLineEdit_sizePolicy(QMultiLineEditH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QMultiLineEdit_setFont(QMultiLineEditH* handle, QFontH* font);
extern PACKAGE void __cdecl QMultiLineEdit_insertLine(QMultiLineEditH* handle, System::PWideString s, int line);
extern PACKAGE void __cdecl QMultiLineEdit_insertAt(QMultiLineEditH* handle, System::PWideString s, int line, int col, bool mark);
extern PACKAGE void __cdecl QMultiLineEdit_removeLine(QMultiLineEditH* handle, int line);
extern PACKAGE void __cdecl QMultiLineEdit_cursorPosition(QMultiLineEditH* handle, PInteger line, PInteger col);
extern PACKAGE void __cdecl QMultiLineEdit_setCursorPosition(QMultiLineEditH* handle, int line, int col, bool mark);
extern PACKAGE void __cdecl QMultiLineEdit_getCursorPosition(QMultiLineEditH* handle, PInteger line, PInteger col);
extern PACKAGE bool __cdecl QMultiLineEdit_atBeginning(QMultiLineEditH* handle);
extern PACKAGE bool __cdecl QMultiLineEdit_atEnd(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setFixedVisibleLines(QMultiLineEditH* handle, int lines);
extern PACKAGE int __cdecl QMultiLineEdit_maxLineWidth(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setAlignment(QMultiLineEditH* handle, int flags);
extern PACKAGE int __cdecl QMultiLineEdit_alignment(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setValidator(QMultiLineEditH* handle, QValidatorH* p1);
extern PACKAGE QValidatorH* __cdecl QMultiLineEdit_validator(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setEdited(QMultiLineEditH* handle, bool p1);
extern PACKAGE bool __cdecl QMultiLineEdit_edited(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_cursorWordForward(QMultiLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QMultiLineEdit_cursorWordBackward(QMultiLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QMultiLineEdit_setEchoMode(QMultiLineEditH* handle, QMultiLineEditEchoMode p1);
extern PACKAGE QMultiLineEditEchoMode __cdecl QMultiLineEdit_echoMode(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setMaxLength(QMultiLineEditH* handle, int p1);
extern PACKAGE int __cdecl QMultiLineEdit_maxLength(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setMaxLineLength(QMultiLineEditH* handle, int p1);
extern PACKAGE int __cdecl QMultiLineEdit_maxLineLength(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setMaxLines(QMultiLineEditH* handle, int p1);
extern PACKAGE int __cdecl QMultiLineEdit_maxLines(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setHMargin(QMultiLineEditH* handle, int p1);
extern PACKAGE int __cdecl QMultiLineEdit_hMargin(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setSelection(QMultiLineEditH* handle, int row_from, int col_from, int row_to, int col_t);
extern PACKAGE void __cdecl QMultiLineEdit_setWordWrap(QMultiLineEditH* handle, QMultiLineEditWordWrap mode);
extern PACKAGE QMultiLineEditWordWrap __cdecl QMultiLineEdit_wordWrap(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setWrapColumnOrWidth(QMultiLineEditH* handle, int p1);
extern PACKAGE int __cdecl QMultiLineEdit_wrapColumnOrWidth(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setWrapPolicy(QMultiLineEditH* handle, QMultiLineEditWrapPolicy policy);
extern PACKAGE QMultiLineEditWrapPolicy __cdecl QMultiLineEdit_wrapPolicy(QMultiLineEditH* handle);
extern PACKAGE bool __cdecl QMultiLineEdit_autoUpdate(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setAutoUpdate(QMultiLineEditH* handle, bool p1);
extern PACKAGE void __cdecl QMultiLineEdit_setUndoEnabled(QMultiLineEditH* handle, bool p1);
extern PACKAGE bool __cdecl QMultiLineEdit_isUndoEnabled(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setUndoDepth(QMultiLineEditH* handle, int p1);
extern PACKAGE int __cdecl QMultiLineEdit_undoDepth(QMultiLineEditH* handle);
extern PACKAGE bool __cdecl QMultiLineEdit_isReadOnly(QMultiLineEditH* handle);
extern PACKAGE bool __cdecl QMultiLineEdit_isOverwriteMode(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_text(QMultiLineEditH* handle, System::PWideString retval);
extern PACKAGE int __cdecl QMultiLineEdit_length(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_setDefaultTabStop(int ex);
extern PACKAGE int __cdecl QMultiLineEdit_defaultTabStop(void);
extern PACKAGE void __cdecl QMultiLineEdit_setText(QMultiLineEditH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QMultiLineEdit_setReadOnly(QMultiLineEditH* handle, bool p1);
extern PACKAGE void __cdecl QMultiLineEdit_setOverwriteMode(QMultiLineEditH* handle, bool p1);
extern PACKAGE void __cdecl QMultiLineEdit_clear(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_append(QMultiLineEditH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QMultiLineEdit_deselect(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_selectAll(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_paste(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_pasteSubType(QMultiLineEditH* handle, System::PAnsiString subtype);
extern PACKAGE void __cdecl QMultiLineEdit_copyText(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_copy(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_cut(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_insert(QMultiLineEditH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QMultiLineEdit_undo(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_redo(QMultiLineEditH* handle);
extern PACKAGE void __cdecl QScrollView_destroy(QScrollViewH* handle);
extern PACKAGE QScrollViewH* __cdecl QScrollView_create(QWidgetH* parent, char * name, int f);
extern PACKAGE void __cdecl QScrollView_setResizePolicy(QScrollViewH* handle, QScrollViewResizePolicy p1);
extern PACKAGE QScrollViewResizePolicy __cdecl QScrollView_resizePolicy(QScrollViewH* handle);
extern PACKAGE void __cdecl QScrollView_styleChange(QScrollViewH* handle, QStyleH* p1);
extern PACKAGE void __cdecl QScrollView_removeChild(QScrollViewH* handle, QWidgetH* child)/* overload */;
extern PACKAGE void __cdecl QScrollView_addChild(QScrollViewH* handle, QWidgetH* child, int x, int y);
extern PACKAGE void __cdecl QScrollView_moveChild(QScrollViewH* handle, QWidgetH* child, int x, int y);
extern PACKAGE int __cdecl QScrollView_childX(QScrollViewH* handle, QWidgetH* child);
extern PACKAGE int __cdecl QScrollView_childY(QScrollViewH* handle, QWidgetH* child);
extern PACKAGE bool __cdecl QScrollView_childIsVisible(QScrollViewH* handle, QWidgetH* child);
extern PACKAGE void __cdecl QScrollView_showChild(QScrollViewH* handle, QWidgetH* child, bool yes);
extern PACKAGE QScrollViewScrollBarMode __cdecl QScrollView_vScrollBarMode(QScrollViewH* handle);
extern PACKAGE void __cdecl QScrollView_setVScrollBarMode(QScrollViewH* handle, QScrollViewScrollBarMode p1);
extern PACKAGE QScrollViewScrollBarMode __cdecl QScrollView_hScrollBarMode(QScrollViewH* handle);
extern PACKAGE void __cdecl QScrollView_setHScrollBarMode(QScrollViewH* handle, QScrollViewScrollBarMode p1);
extern PACKAGE QWidgetH* __cdecl QScrollView_cornerWidget(QScrollViewH* handle);
extern PACKAGE void __cdecl QScrollView_setCornerWidget(QScrollViewH* handle, QWidgetH* p1);
extern PACKAGE QScrollBarH* __cdecl QScrollView_horizontalScrollBar(QScrollViewH* handle);
extern PACKAGE QScrollBarH* __cdecl QScrollView_verticalScrollBar(QScrollViewH* handle);
extern PACKAGE QWidgetH* __cdecl QScrollView_viewport(QScrollViewH* handle);
extern PACKAGE QWidgetH* __cdecl QScrollView_clipper(QScrollViewH* handle);
extern PACKAGE int __cdecl QScrollView_visibleWidth(QScrollViewH* handle);
extern PACKAGE int __cdecl QScrollView_visibleHeight(QScrollViewH* handle);
extern PACKAGE int __cdecl QScrollView_contentsWidth(QScrollViewH* handle);
extern PACKAGE int __cdecl QScrollView_contentsHeight(QScrollViewH* handle);
extern PACKAGE int __cdecl QScrollView_contentsX(QScrollViewH* handle);
extern PACKAGE int __cdecl QScrollView_contentsY(QScrollViewH* handle);
extern PACKAGE void __cdecl QScrollView_resize(QScrollViewH* handle, int w, int h)/* overload */;
extern PACKAGE void __cdecl QScrollView_resize(QScrollViewH* handle, Types::PSize p1)/* overload */;
extern PACKAGE void __cdecl QScrollView_show(QScrollViewH* handle);
extern PACKAGE void __cdecl QScrollView_updateContents(QScrollViewH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QScrollView_updateContents(QScrollViewH* handle, Types::PRect r)/* overload */;
extern PACKAGE void __cdecl QScrollView_repaintContents(QScrollViewH* handle, int x, int y, int w, int h, bool erase)/* overload */;
extern PACKAGE void __cdecl QScrollView_repaintContents(QScrollViewH* handle, Types::PRect r, bool erase)/* overload */;
extern PACKAGE void __cdecl QScrollView_contentsToViewport(QScrollViewH* handle, int x, int y, PInteger vx, PInteger vy)/* overload */;
extern PACKAGE void __cdecl QScrollView_viewportToContents(QScrollViewH* handle, int vx, int vy, PInteger x, PInteger y)/* overload */;
extern PACKAGE void __cdecl QScrollView_contentsToViewport(QScrollViewH* handle, Types::PPoint retval, Types::PPoint p1)/* overload */;
extern PACKAGE void __cdecl QScrollView_viewportToContents(QScrollViewH* handle, Types::PPoint retval, Types::PPoint p1)/* overload */;
extern PACKAGE void __cdecl QScrollView_enableClipper(QScrollViewH* handle, bool y);
extern PACKAGE void __cdecl QScrollView_setStaticBackground(QScrollViewH* handle, bool y);
extern PACKAGE bool __cdecl QScrollView_hasStaticBackground(QScrollViewH* handle);
extern PACKAGE void __cdecl QScrollView_viewportSize(QScrollViewH* handle, Types::PSize retval, int p1, int p2);
extern PACKAGE void __cdecl QScrollView_sizePolicy(QScrollViewH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QScrollView_sizeHint(QScrollViewH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QScrollView_minimumSizeHint(QScrollViewH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QScrollView_removeChild(QScrollViewH* handle, QObjectH* child)/* overload */;
extern PACKAGE void __cdecl QScrollView_setDragAutoScroll(QScrollViewH* handle, bool b);
extern PACKAGE bool __cdecl QScrollView_dragAutoScroll(QScrollViewH* handle);
extern PACKAGE void __cdecl QScrollView_resizeContents(QScrollViewH* handle, int w, int h);
extern PACKAGE void __cdecl QScrollView_scrollBy(QScrollViewH* handle, int dx, int dy);
extern PACKAGE void __cdecl QScrollView_setContentsPos(QScrollViewH* handle, int x, int y);
extern PACKAGE void __cdecl QScrollView_ensureVisible(QScrollViewH* handle, int x, int y)/* overload */;
extern PACKAGE void __cdecl QScrollView_ensureVisible(QScrollViewH* handle, int x, int y, int xmargin, int ymargin)/* overload */;
extern PACKAGE void __cdecl QScrollView_center(QScrollViewH* handle, int x, int y)/* overload */;
extern PACKAGE void __cdecl QScrollView_center(QScrollViewH* handle, int x, int y, float xmargin, float ymargin)/* overload */;
extern PACKAGE void __cdecl QScrollView_updateScrollBars(QScrollViewH* handle);
extern PACKAGE void __cdecl QScrollView_setEnabled(QScrollViewH* handle, bool enable);
extern PACKAGE void __cdecl QSlider_destroy(QSliderH* handle);
extern PACKAGE QSliderH* __cdecl QSlider_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QSliderH* __cdecl QSlider_create(Orientation p1, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QSliderH* __cdecl QSlider_create(int minValue, int maxValue, int pageStep, int value, Orientation p5, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QSlider_setOrientation(QSliderH* handle, Orientation p1);
extern PACKAGE Orientation __cdecl QSlider_orientation(QSliderH* handle);
extern PACKAGE void __cdecl QSlider_setTracking(QSliderH* handle, bool enable);
extern PACKAGE bool __cdecl QSlider_tracking(QSliderH* handle);
extern PACKAGE void __cdecl QSlider_setPalette(QSliderH* handle, QPaletteH* p1);
extern PACKAGE void __cdecl QSlider_sliderRect(QSliderH* handle, Types::PRect retval);
extern PACKAGE void __cdecl QSlider_sizeHint(QSliderH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QSlider_sizePolicy(QSliderH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QSlider_minimumSizeHint(QSliderH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QSlider_setTickmarks(QSliderH* handle, QSliderTickSetting p1);
extern PACKAGE QSliderTickSetting __cdecl QSlider_tickmarks(QSliderH* handle);
extern PACKAGE void __cdecl QSlider_setTickInterval(QSliderH* handle, int p1);
extern PACKAGE int __cdecl QSlider_tickInterval(QSliderH* handle);
extern PACKAGE int __cdecl QSlider_minValue(QSliderH* handle);
extern PACKAGE int __cdecl QSlider_maxValue(QSliderH* handle);
extern PACKAGE void __cdecl QSlider_setMinValue(QSliderH* handle, int p1);
extern PACKAGE void __cdecl QSlider_setMaxValue(QSliderH* handle, int p1);
extern PACKAGE int __cdecl QSlider_lineStep(QSliderH* handle);
extern PACKAGE int __cdecl QSlider_pageStep(QSliderH* handle);
extern PACKAGE void __cdecl QSlider_setLineStep(QSliderH* handle, int p1);
extern PACKAGE void __cdecl QSlider_setPageStep(QSliderH* handle, int p1);
extern PACKAGE int __cdecl QSlider_value(QSliderH* handle);
extern PACKAGE void __cdecl QSlider_setValue(QSliderH* handle, int p1);
extern PACKAGE void __cdecl QSlider_addStep(QSliderH* handle);
extern PACKAGE void __cdecl QSlider_subtractStep(QSliderH* handle);
extern PACKAGE QRangeControlH* __cdecl QSlider_to_QRangeControl(QSliderH* handle);
extern PACKAGE void __cdecl QSocketNotifier_destroy(QSocketNotifierH* handle);
extern PACKAGE QSocketNotifierH* __cdecl QSocketNotifier_create(int socket, QSocketNotifierType p2, QObjectH* parent, char * name);
extern PACKAGE int __cdecl QSocketNotifier_socket(QSocketNotifierH* handle);
extern PACKAGE QSocketNotifierType __cdecl QSocketNotifier_type(QSocketNotifierH* handle);
extern PACKAGE bool __cdecl QSocketNotifier_isEnabled(QSocketNotifierH* handle);
extern PACKAGE void __cdecl QSocketNotifier_setEnabled(QSocketNotifierH* handle, bool p1);
extern PACKAGE void __cdecl QSpinBox_destroy(QSpinBoxH* handle);
extern PACKAGE QSpinBoxH* __cdecl QSpinBox_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QSpinBoxH* __cdecl QSpinBox_create(int minValue, int maxValue, int step, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QSpinBox_text(QSpinBoxH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QSpinBox_prefix(QSpinBoxH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QSpinBox_suffix(QSpinBoxH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QSpinBox_cleanText(QSpinBoxH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QSpinBox_setSpecialValueText(QSpinBoxH* handle, System::PWideString text);
extern PACKAGE void __cdecl QSpinBox_specialValueText(QSpinBoxH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QSpinBox_setWrapping(QSpinBoxH* handle, bool on);
extern PACKAGE bool __cdecl QSpinBox_wrapping(QSpinBoxH* handle);
extern PACKAGE void __cdecl QSpinBox_setButtonSymbols(QSpinBoxH* handle, QSpinBoxButtonSymbols p1);
extern PACKAGE QSpinBoxButtonSymbols __cdecl QSpinBox_buttonSymbols(QSpinBoxH* handle);
extern PACKAGE void __cdecl QSpinBox_setValidator(QSpinBoxH* handle, QValidatorH* v);
extern PACKAGE QValidatorH* __cdecl QSpinBox_validator(QSpinBoxH* handle);
extern PACKAGE void __cdecl QSpinBox_sizeHint(QSpinBoxH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QSpinBox_sizePolicy(QSpinBoxH* handle, PSizePolicy retval);
extern PACKAGE int __cdecl QSpinBox_minValue(QSpinBoxH* handle);
extern PACKAGE int __cdecl QSpinBox_maxValue(QSpinBoxH* handle);
extern PACKAGE void __cdecl QSpinBox_setMinValue(QSpinBoxH* handle, int p1);
extern PACKAGE void __cdecl QSpinBox_setMaxValue(QSpinBoxH* handle, int p1);
extern PACKAGE int __cdecl QSpinBox_lineStep(QSpinBoxH* handle);
extern PACKAGE void __cdecl QSpinBox_setLineStep(QSpinBoxH* handle, int p1);
extern PACKAGE int __cdecl QSpinBox_value(QSpinBoxH* handle);
extern PACKAGE void __cdecl QSpinBox_setValue(QSpinBoxH* handle, int value);
extern PACKAGE void __cdecl QSpinBox_setPrefix(QSpinBoxH* handle, System::PWideString text);
extern PACKAGE void __cdecl QSpinBox_setSuffix(QSpinBoxH* handle, System::PWideString text);
extern PACKAGE void __cdecl QSpinBox_stepUp(QSpinBoxH* handle);
extern PACKAGE void __cdecl QSpinBox_stepDown(QSpinBoxH* handle);
extern PACKAGE void __cdecl QSpinBox_setEnabled(QSpinBoxH* handle, bool p1);
extern PACKAGE QRangeControlH* __cdecl QSpinBox_to_QRangeControl(QSpinBoxH* handle);
extern PACKAGE GUIStyle __cdecl QStyle_guiStyle(QStyleH* handle);
extern PACKAGE void __cdecl QStyle_polish(QStyleH* handle, QWidgetH* p1)/* overload */;
extern PACKAGE void __cdecl QStyle_unPolish(QStyleH* handle, QWidgetH* p1)/* overload */;
extern PACKAGE void __cdecl QStyle_polish(QStyleH* handle, QApplicationH* p1)/* overload */;
extern PACKAGE void __cdecl QStyle_unPolish(QStyleH* handle, QApplicationH* p1)/* overload */;
extern PACKAGE void __cdecl QStyle_polish(QStyleH* handle, QPaletteH* p1)/* overload */;
extern PACKAGE void __cdecl QStyle_itemRect(QStyleH* handle, Types::PRect retval, QPainterH* p, int x, int y, int w, int h, int flags, bool enabled, QPixmapH* pixmap, System::PWideString text, int len);
extern PACKAGE void __cdecl QStyle_drawItem(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, int flags, QColorGroupH* g, bool enabled, QPixmapH* pixmap, System::PWideString text, int len, QColorH* penColor);
extern PACKAGE void __cdecl QStyle_drawSeparator(QStyleH* handle, QPainterH* p, int x1, int y1, int x2, int y2, QColorGroupH* g, bool sunken, int lineWidth, int midLineWidth);
extern PACKAGE void __cdecl QStyle_drawRect(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorH* p6, int lineWidth, QBrushH* fill);
extern PACKAGE void __cdecl QStyle_drawRectStrong(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* p6, bool sunken, int lineWidth, int midLineWidth, QBrushH* fill);
extern PACKAGE void __cdecl QStyle_drawButton(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill);
extern PACKAGE void __cdecl QStyle_buttonRect(QStyleH* handle, Types::PRect retval, int x, int y, int w, int h);
extern PACKAGE void __cdecl QStyle_drawButtonMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h);
extern PACKAGE void __cdecl QStyle_drawBevelButton(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill);
extern PACKAGE void __cdecl QStyle_bevelButtonRect(QStyleH* handle, Types::PRect retval, int x, int y, int w, int h);
extern PACKAGE void __cdecl QStyle_drawToolButton(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QStyle_drawToolButton(QStyleH* handle, QToolButtonH* btn, QPainterH* p)/* overload */;
extern PACKAGE void __cdecl QStyle_toolButtonRect(QStyleH* handle, Types::PRect retval, int x, int y, int w, int h);
extern PACKAGE void __cdecl QStyle_drawPanel(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* p6, bool sunken, int lineWidth, QBrushH* fill);
extern PACKAGE void __cdecl QStyle_drawPopupPanel(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* p6, int lineWidth, QBrushH* fill);
extern PACKAGE void __cdecl QStyle_drawArrow(QStyleH* handle, QPainterH* p, ArrowType _type, bool down, int x, int y, int w, int h, QColorGroupH* g, bool enabled, QBrushH* fill);
extern PACKAGE void __cdecl QStyle_exclusiveIndicatorSize(QStyleH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QStyle_drawExclusiveIndicator(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool on, bool down, bool enabled);
extern PACKAGE void __cdecl QStyle_drawExclusiveIndicatorMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, bool on);
extern PACKAGE void __cdecl QStyle_indicatorSize(QStyleH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QStyle_drawIndicator(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, int state, bool down, bool enabled);
extern PACKAGE void __cdecl QStyle_drawIndicatorMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, int state);
extern PACKAGE void __cdecl QStyle_drawFocusRect(QStyleH* handle, QPainterH* p1, Types::PRect p2, QColorGroupH* p3, QColorH* bg, bool p5);
extern PACKAGE void __cdecl QStyle_drawComboButton(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, bool editable, bool enabled, QBrushH* fill);
extern PACKAGE void __cdecl QStyle_comboButtonRect(QStyleH* handle, Types::PRect retval, int x, int y, int w, int h);
extern PACKAGE void __cdecl QStyle_comboButtonFocusRect(QStyleH* handle, Types::PRect retval, int x, int y, int w, int h);
extern PACKAGE void __cdecl QStyle_drawComboButtonMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h);
extern PACKAGE void __cdecl QStyle_drawPushButton(QStyleH* handle, QPushButtonH* btn, QPainterH* p);
extern PACKAGE void __cdecl QStyle_drawPushButtonLabel(QStyleH* handle, QPushButtonH* btn, QPainterH* p);
extern PACKAGE void __cdecl QStyle_pushButtonContentsRect(QStyleH* handle, Types::PRect retval, QPushButtonH* btn);
extern PACKAGE int __cdecl QStyle_menuButtonIndicatorWidth(QStyleH* handle, int h);
extern PACKAGE void __cdecl QStyle_getButtonShift(QStyleH* handle, PInteger x, PInteger y);
extern PACKAGE int __cdecl QStyle_defaultFrameWidth(QStyleH* handle);
extern PACKAGE void __cdecl QStyle_tabbarMetrics(QStyleH* handle, QTabBarH* p1, PInteger p2, PInteger p3, PInteger p4);
extern PACKAGE void __cdecl QStyle_drawTab(QStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected);
extern PACKAGE void __cdecl QStyle_drawTabMask(QStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected);
extern PACKAGE void __cdecl QStyle_scrollBarMetrics(QStyleH* handle, QScrollBarH* p1, PInteger p2, PInteger p3, PInteger p4, PInteger p5);
extern PACKAGE void __cdecl QStyle_drawScrollBarControls(QStyleH* handle, QPainterH* p1, QScrollBarH* p2, int sliderStart, unsigned controls, unsigned activeControl);
extern PACKAGE QStyleScrollControl __cdecl QStyle_scrollBarPointOver(QStyleH* handle, QScrollBarH* p1, int sliderStart, Types::PPoint p3);
extern PACKAGE int __cdecl QStyle_sliderLength(QStyleH* handle);
extern PACKAGE void __cdecl QStyle_drawSlider(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, Orientation p7, bool tickAbove, bool tickBelow);
extern PACKAGE void __cdecl QStyle_drawSliderMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, Orientation p6, bool tickAbove, bool tickBelow);
extern PACKAGE void __cdecl QStyle_drawSliderGroove(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, QCOORD c, Orientation p8);
extern PACKAGE void __cdecl QStyle_drawSliderGrooveMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QCOORD c, Orientation p7);
extern PACKAGE int __cdecl QStyle_maximumSliderDragDistance(QStyleH* handle);
extern PACKAGE int __cdecl QStyle_splitterWidth(QStyleH* handle);
extern PACKAGE void __cdecl QStyle_drawSplitter(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, Orientation p7);
extern PACKAGE void __cdecl QStyle_drawCheckMark(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool act, bool dis);
extern PACKAGE void __cdecl QStyle_polishPopupMenu(QStyleH* handle, QPopupMenuH* p1);
extern PACKAGE int __cdecl QStyle_extraPopupMenuItemWidth(QStyleH* handle, bool checkable, int maxpmw, QMenuItemH* mi, QFontMetricsH* fm);
extern PACKAGE int __cdecl QStyle_popupSubmenuIndicatorWidth(QStyleH* handle, QFontMetricsH* fm);
extern PACKAGE int __cdecl QStyle_popupMenuItemHeight(QStyleH* handle, bool checkable, QMenuItemH* mi, QFontMetricsH* fm);
extern PACKAGE void __cdecl QStyle_drawPopupMenuItem(QStyleH* handle, QPainterH* p, bool checkable, int maxpmw, int tab, QMenuItemH* mi, QPaletteH* pal, bool act, bool enabled, int x, int y, int w, int h);
extern PACKAGE void __cdecl QStyle_drawMenuBarItem(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QMenuItemH* mi, QColorGroupH* g, bool enabled, bool active);
extern PACKAGE void __cdecl QStyle_scrollBarExtent(QStyleH* handle, Types::PSize retval);
extern PACKAGE int __cdecl QStyle_buttonDefaultIndicatorWidth(QStyleH* handle);
extern PACKAGE int __cdecl QStyle_buttonMargin(QStyleH* handle);
extern PACKAGE int __cdecl QStyle_toolBarHandleExtent(QStyleH* handle);
extern PACKAGE int __cdecl QStyle_toolBarHandleExtend(QStyleH* handle);
extern PACKAGE int __cdecl QStyle_sliderThickness(QStyleH* handle);
extern PACKAGE void __cdecl QStyle_drawToolBarHandle(QStyleH* handle, QPainterH* p, Types::PRect r, Orientation orientation, bool highlight, QColorGroupH* cg, bool drawBorder);
extern PACKAGE void __cdecl QTranslatorMessage_destroy(QTranslatorMessageH* handle);
extern PACKAGE QTranslatorMessageH* __cdecl QTranslatorMessage_create(void)/* overload */;
extern PACKAGE QTranslatorMessageH* __cdecl QTranslatorMessage_create(char * context, char * sourceText, char * comment, System::PWideString translation)/* overload */;
extern PACKAGE QTranslatorMessageH* __cdecl QTranslatorMessage_create(QDataStreamH* p1)/* overload */;
extern PACKAGE QTranslatorMessageH* __cdecl QTranslatorMessage_create(QTranslatorMessageH* m)/* overload */;
extern PACKAGE unsigned __cdecl QTranslatorMessage_hash(QTranslatorMessageH* handle);
extern PACKAGE char * __cdecl QTranslatorMessage_context(QTranslatorMessageH* handle);
extern PACKAGE char * __cdecl QTranslatorMessage_sourceText(QTranslatorMessageH* handle);
extern PACKAGE char * __cdecl QTranslatorMessage_comment(QTranslatorMessageH* handle);
extern PACKAGE void __cdecl QTranslatorMessage_setTranslation(QTranslatorMessageH* handle, System::PWideString translation);
extern PACKAGE void __cdecl QTranslatorMessage_translation(QTranslatorMessageH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QTranslatorMessage_write(QTranslatorMessageH* handle, QDataStreamH* s, bool strip, QTranslatorMessagePrefix prefix);
extern PACKAGE QTranslatorMessagePrefix __cdecl QTranslatorMessage_commonPrefix(QTranslatorMessageH* handle, QTranslatorMessageH* p1);
extern PACKAGE void __cdecl QTranslator_destroy(QTranslatorH* handle);
extern PACKAGE QTranslatorH* __cdecl QTranslator_create(QObjectH* parent, char * name);
extern PACKAGE void __cdecl QTranslator_find(QTranslatorH* handle, System::PWideString retval, char * p1, char * p2, char * p3)/* overload */;
extern PACKAGE void __cdecl QTranslator_find(QTranslatorH* handle, System::PWideString retval, char * p1, char * p2)/* overload */;
extern PACKAGE bool __cdecl QTranslator_load(QTranslatorH* handle, System::PWideString filename, System::PWideString directory, System::PWideString search_delimiters, System::PWideString suffix);
extern PACKAGE bool __cdecl QTranslator_save(QTranslatorH* handle, System::PWideString filename, QTranslatorSaveMode mode);
extern PACKAGE void __cdecl QTranslator_clear(QTranslatorH* handle);
extern PACKAGE void __cdecl QTranslator_insert(QTranslatorH* handle, QTranslatorMessageH* p1)/* overload */;
extern PACKAGE void __cdecl QTranslator_insert(QTranslatorH* handle, char * p1, char * p2, System::PWideString p3)/* overload */;
extern PACKAGE void __cdecl QTranslator_remove(QTranslatorH* handle, QTranslatorMessageH* p1)/* overload */;
extern PACKAGE void __cdecl QTranslator_remove(QTranslatorH* handle, char * p1, char * p2)/* overload */;
extern PACKAGE bool __cdecl QTranslator_contains(QTranslatorH* handle, char * p1, char * p2, char * p3)/* overload */;
extern PACKAGE bool __cdecl QTranslator_contains(QTranslatorH* handle, char * p1, char * p2)/* overload */;
extern PACKAGE void __cdecl QTranslator_squeeze(QTranslatorH* handle, QTranslatorSaveMode p1)/* overload */;
extern PACKAGE void __cdecl QTranslator_squeeze(QTranslatorH* handle)/* overload */;
extern PACKAGE void __cdecl QTranslator_unsqueeze(QTranslatorH* handle);
extern PACKAGE void __cdecl QColor_destroy(QColorH* handle);
extern PACKAGE QColorH* __cdecl QColor_create(void)/* overload */;
extern PACKAGE QColorH* __cdecl QColor_create(int r, int g, int b)/* overload */;
extern PACKAGE QColorH* __cdecl QColor_create(int x, int y, int z, QColorSpec p4)/* overload */;
extern PACKAGE QColorH* __cdecl QColor_create(QRgbH rgb, unsigned pixel)/* overload */;
extern PACKAGE QColorH* __cdecl QColor_create(System::PWideString name)/* overload */;
extern PACKAGE QColorH* __cdecl QColor_create(char * name)/* overload */;
extern PACKAGE QColorH* __cdecl QColor_create(QColorH* p1)/* overload */;
extern PACKAGE bool __cdecl QColor_isValid(QColorH* handle);
extern PACKAGE bool __cdecl QColor_isDirty(QColorH* handle);
extern PACKAGE void __cdecl QColor_name(QColorH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QColor_setNamedColor(QColorH* handle, System::PWideString name);
extern PACKAGE void __cdecl QColor_rgb(QColorH* handle, PInteger r, PInteger g, PInteger b)/* overload */;
extern PACKAGE void __cdecl QColor_rgb(QColorH* handle, QRgbH retval)/* overload */;
extern PACKAGE void __cdecl QColor_setRgb(QColorH* handle, int r, int g, int b)/* overload */;
extern PACKAGE void __cdecl QColor_setRgb(QColorH* handle, QRgbH rgb)/* overload */;
extern PACKAGE int __cdecl QColor_red(QColorH* handle);
extern PACKAGE int __cdecl QColor_green(QColorH* handle);
extern PACKAGE int __cdecl QColor_blue(QColorH* handle);
extern PACKAGE void __cdecl QColor_hsv(QColorH* handle, PInteger h, PInteger s, PInteger v);
extern PACKAGE void __cdecl QColor_getHsv(QColorH* handle, PInteger h, PInteger s, PInteger v);
extern PACKAGE void __cdecl QColor_setHsv(QColorH* handle, int h, int s, int v);
extern PACKAGE void __cdecl QColor_light(QColorH* handle, QColorH* retval, int f);
extern PACKAGE void __cdecl QColor_dark(QColorH* handle, QColorH* retval, int f);
extern PACKAGE bool __cdecl QColor_lazyAlloc(void);
extern PACKAGE void __cdecl QColor_setLazyAlloc(bool p1);
extern PACKAGE unsigned __cdecl QColor_alloc(QColorH* handle);
extern PACKAGE unsigned __cdecl QColor_pixel(QColorH* handle);
extern PACKAGE int __cdecl QColor_maxColors(void);
extern PACKAGE int __cdecl QColor_numBitPlanes(void);
extern PACKAGE int __cdecl QColor_enterAllocContext(void);
extern PACKAGE void __cdecl QColor_leaveAllocContext(void);
extern PACKAGE int __cdecl QColor_currentAllocContext(void);
extern PACKAGE void __cdecl QColor_destroyAllocContext(int p1);
extern PACKAGE HPALETTE __cdecl QColor_hPal(void);
extern PACKAGE unsigned __cdecl QColor_realizePal(QWidgetH* p1);
extern PACKAGE void __cdecl QColor_initialize(void);
extern PACKAGE void __cdecl QColor_cleanup(void);
extern PACKAGE void __cdecl QFont_destroy(QFontH* handle);
extern PACKAGE QFontH* __cdecl QFont_create(void)/* overload */;
extern PACKAGE QFontH* __cdecl QFont_create(System::PWideString family, int pointSize, int weight, bool italic)/* overload */;
extern PACKAGE QFontH* __cdecl QFont_create(System::PWideString family, int pointSize, int weight, bool italic, QFontCharSet charSet)/* overload */;
extern PACKAGE QFontH* __cdecl QFont_create(QFontH* p1)/* overload */;
extern PACKAGE void __cdecl QFont_family(QFontH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QFont_setFamily(QFontH* handle, System::PWideString p1);
extern PACKAGE int __cdecl QFont_pointSize(QFontH* handle);
extern PACKAGE float __cdecl QFont_pointSizeFloat(QFontH* handle);
extern PACKAGE void __cdecl QFont_setPointSize(QFontH* handle, int p1);
extern PACKAGE void __cdecl QFont_setPointSizeFloat(QFontH* handle, float p1);
extern PACKAGE int __cdecl QFont_pixelSize(QFontH* handle);
extern PACKAGE void __cdecl QFont_setPixelSize(QFontH* handle, int p1);
extern PACKAGE void __cdecl QFont_setPixelSizeFloat(QFontH* handle, float p1);
extern PACKAGE int __cdecl QFont_weight(QFontH* handle);
extern PACKAGE void __cdecl QFont_setWeight(QFontH* handle, int p1);
extern PACKAGE bool __cdecl QFont_bold(QFontH* handle);
extern PACKAGE void __cdecl QFont_setBold(QFontH* handle, bool p1);
extern PACKAGE bool __cdecl QFont_italic(QFontH* handle);
extern PACKAGE void __cdecl QFont_setItalic(QFontH* handle, bool p1);
extern PACKAGE bool __cdecl QFont_underline(QFontH* handle);
extern PACKAGE void __cdecl QFont_setUnderline(QFontH* handle, bool p1);
extern PACKAGE bool __cdecl QFont_strikeOut(QFontH* handle);
extern PACKAGE void __cdecl QFont_setStrikeOut(QFontH* handle, bool p1);
extern PACKAGE bool __cdecl QFont_fixedPitch(QFontH* handle);
extern PACKAGE void __cdecl QFont_setFixedPitch(QFontH* handle, bool p1);
extern PACKAGE QFontStyleHint __cdecl QFont_styleHint(QFontH* handle);
extern PACKAGE void __cdecl QFont_setStyleHint(QFontH* handle, QFontStyleHint p1)/* overload */;
extern PACKAGE QFontStyleStrategy __cdecl QFont_styleStrategy(QFontH* handle);
extern PACKAGE void __cdecl QFont_setStyleHint(QFontH* handle, QFontStyleHint p1, QFontStyleStrategy p2)/* overload */;
extern PACKAGE QFontCharSet __cdecl QFont_charSet(QFontH* handle);
extern PACKAGE void __cdecl QFont_setCharSet(QFontH* handle, QFontCharSet p1);
extern PACKAGE QFontCharSet __cdecl QFont_charSetForLocale(void);
extern PACKAGE bool __cdecl QFont_rawMode(QFontH* handle);
extern PACKAGE void __cdecl QFont_setRawMode(QFontH* handle, bool p1);
extern PACKAGE bool __cdecl QFont_exactMatch(QFontH* handle);
extern PACKAGE bool __cdecl QFont_isCopyOf(QFontH* handle, QFontH* p1);
extern PACKAGE HFONT __cdecl QFont_handle(QFontH* handle)/* overload */;
extern PACKAGE void __cdecl QFont_setRawName(QFontH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QFont_rawName(QFontH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QFont_key(QFontH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QFont_encodingName(System::PWideString retval, QFontCharSet p1);
extern PACKAGE void __cdecl QFont_defaultFont(QFontH* retval);
extern PACKAGE void __cdecl QFont_setDefaultFont(QFontH* p1);
extern PACKAGE void __cdecl QFont_substitute(System::PWideString retval, System::PWideString familyName);
extern PACKAGE void __cdecl QFont_insertSubstitution(System::PWideString p1, System::PWideString p2);
extern PACKAGE void __cdecl QFont_removeSubstitution(System::PWideString p1);
extern PACKAGE void __cdecl QFont_substitutions(QStringListH* retval);
extern PACKAGE void __cdecl QFont_initialize(void);
extern PACKAGE void __cdecl QFont_locale_init(void);
extern PACKAGE void __cdecl QFont_cleanup(void);
extern PACKAGE void __cdecl QFont_cacheStatistics(void);
extern PACKAGE void __cdecl QFont_qwsRenderToDisk(QFontH* handle, bool all);
extern PACKAGE void __cdecl QImageTextKeyLang_destroy(QImageTextKeyLangH* handle);
extern PACKAGE QImageTextKeyLangH* __cdecl QImageTextKeyLang_create(char * k, char * l)/* overload */;
extern PACKAGE QImageTextKeyLangH* __cdecl QImageTextKeyLang_create(void)/* overload */;
extern PACKAGE void __cdecl QImage_destroy(QImageH* handle);
extern PACKAGE QImageH* __cdecl QImage_create(void)/* overload */;
extern PACKAGE QImageH* __cdecl QImage_create(int width, int height, int depth, int numColors, QImageEndian bitOrder)/* overload */;
extern PACKAGE QImageH* __cdecl QImage_create(Types::PSize p1, int depth, int numColors, QImageEndian bitOrder)/* overload */;
extern PACKAGE QImageH* __cdecl QImage_create(System::PWideString fileName, char * format)/* overload */;
extern PACKAGE QImageH* __cdecl QImage_create(QByteArrayH* data)/* overload */;
extern PACKAGE QImageH* __cdecl QImage_create(System::PByte data, int w, int h, int depth, QRgbH colortable, int numColors, QImageEndian bitOrder)/* overload */;
extern PACKAGE QImageH* __cdecl QImage_create(QImageH* p1)/* overload */;
extern PACKAGE void __cdecl QImage_detach(QImageH* handle);
extern PACKAGE void __cdecl QImage_copy(QImageH* handle, QImageH* retval)/* overload */;
extern PACKAGE void __cdecl QImage_copy(QImageH* handle, QImageH* retval, int x, int y, int w, int h, int conversion_flags)/* overload */;
extern PACKAGE void __cdecl QImage_copy(QImageH* handle, QImageH* retval, Types::PRect p1)/* overload */;
extern PACKAGE bool __cdecl QImage_isNull(QImageH* handle);
extern PACKAGE int __cdecl QImage_width(QImageH* handle);
extern PACKAGE int __cdecl QImage_height(QImageH* handle);
extern PACKAGE void __cdecl QImage_size(QImageH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QImage_rect(QImageH* handle, Types::PRect retval);
extern PACKAGE int __cdecl QImage_depth(QImageH* handle);
extern PACKAGE int __cdecl QImage_numColors(QImageH* handle);
extern PACKAGE QImageEndian __cdecl QImage_bitOrder(QImageH* handle);
extern PACKAGE void __cdecl QImage_color(QImageH* handle, QRgbH retval, int i);
extern PACKAGE void __cdecl QImage_setColor(QImageH* handle, int i, QRgbH c);
extern PACKAGE void __cdecl QImage_setNumColors(QImageH* handle, int p1);
extern PACKAGE bool __cdecl QImage_hasAlphaBuffer(QImageH* handle);
extern PACKAGE void __cdecl QImage_setAlphaBuffer(QImageH* handle, bool p1);
extern PACKAGE bool __cdecl QImage_allGray(QImageH* handle);
extern PACKAGE bool __cdecl QImage_isGrayscale(QImageH* handle);
extern PACKAGE System::PByte __cdecl QImage_bits(QImageH* handle);
extern PACKAGE System::PByte __cdecl QImage_scanLine(QImageH* handle, int p1);
extern PACKAGE PPByte __cdecl QImage_jumpTable(QImageH* handle);
extern PACKAGE QRgbH __cdecl QImage_colorTable(QImageH* handle);
extern PACKAGE int __cdecl QImage_numBytes(QImageH* handle);
extern PACKAGE int __cdecl QImage_bytesPerLine(QImageH* handle);
extern PACKAGE bool __cdecl QImage_create(QImageH* handle, int width, int height, int depth, int numColors, QImageEndian bitOrder)/* overload */;
extern PACKAGE bool __cdecl QImage_create(QImageH* handle, Types::PSize p1, int depth, int numColors, QImageEndian bitOrder)/* overload */;
extern PACKAGE void __cdecl QImage_reset(QImageH* handle);
extern PACKAGE void __cdecl QImage_fill(QImageH* handle, unsigned pixel);
extern PACKAGE void __cdecl QImage_invertPixels(QImageH* handle, bool invertAlpha);
extern PACKAGE void __cdecl QImage_convertDepth(QImageH* handle, QImageH* retval, int p1)/* overload */;
extern PACKAGE void __cdecl QImage_convertDepthWithPalette(QImageH* handle, QImageH* retval, int p1, QRgbH p, int pc, int cf);
extern PACKAGE void __cdecl QImage_convertDepth(QImageH* handle, QImageH* retval, int p1, int conversion_flags)/* overload */;
extern PACKAGE void __cdecl QImage_convertBitOrder(QImageH* handle, QImageH* retval, QImageEndian p1);
extern PACKAGE void __cdecl QImage_smoothScale(QImageH* handle, QImageH* retval, int width, int height);
extern PACKAGE void __cdecl QImage_createAlphaMask(QImageH* handle, QImageH* retval, int conversion_flags);
extern PACKAGE void __cdecl QImage_createHeuristicMask(QImageH* handle, QImageH* retval, bool clipTight);
extern PACKAGE void __cdecl QImage_mirror(QImageH* handle, QImageH* retval)/* overload */;
extern PACKAGE void __cdecl QImage_mirror(QImageH* handle, QImageH* retval, bool horizontally, bool vertically)/* overload */;
extern PACKAGE void __cdecl QImage_swapRGB(QImageH* handle, QImageH* retval);
extern PACKAGE QImageEndian __cdecl QImage_systemBitOrder(void);
extern PACKAGE QImageEndian __cdecl QImage_systemByteOrder(void);
extern PACKAGE char * __cdecl QImage_imageFormat(System::PWideString fileName);
extern PACKAGE void __cdecl QImage_inputFormats(QStrListH* retval);
extern PACKAGE void __cdecl QImage_outputFormats(QStrListH* retval);
extern PACKAGE void __cdecl QImage_inputFormatList(QStringListH* retval);
extern PACKAGE void __cdecl QImage_outputFormatList(QStringListH* retval);
extern PACKAGE bool __cdecl QImage_load(QImageH* handle, System::PWideString fileName, char * format);
extern PACKAGE bool __cdecl QImage_loadFromData(QImageH* handle, System::PByte buf, unsigned len, char * format)/* overload */;
extern PACKAGE bool __cdecl QImage_loadFromData(QImageH* handle, QByteArrayH* data, char * format)/* overload */;
extern PACKAGE bool __cdecl QImage_save(QImageH* handle, System::PWideString fileName, char * format)/* overload */;
extern PACKAGE bool __cdecl QImage_save(QImageH* handle, System::PWideString fileName, char * format, int quality)/* overload */;
extern PACKAGE bool __cdecl QImage_valid(QImageH* handle, int x, int y);
extern PACKAGE int __cdecl QImage_pixelIndex(QImageH* handle, int x, int y);
extern PACKAGE void __cdecl QImage_pixel(QImageH* handle, QRgbH retval, int x, int y);
extern PACKAGE void __cdecl QImage_setPixel(QImageH* handle, int x, int y, unsigned index_or_rgb);
extern PACKAGE int __cdecl QImage_dotsPerMeterX(QImageH* handle);
extern PACKAGE int __cdecl QImage_dotsPerMeterY(QImageH* handle);
extern PACKAGE void __cdecl QImage_setDotsPerMeterX(QImageH* handle, int p1);
extern PACKAGE void __cdecl QImage_setDotsPerMeterY(QImageH* handle, int p1);
extern PACKAGE void __cdecl QImage_offset(QImageH* handle, Types::PPoint retval);
extern PACKAGE void __cdecl QImage_setOffset(QImageH* handle, Types::PPoint p1);
extern PACKAGE void __cdecl QImage_textLanguages(QImageH* handle, QStringListH* retval);
extern PACKAGE void __cdecl QImage_textKeys(QImageH* handle, QStringListH* retval);
extern PACKAGE void __cdecl QImage_text(QImageH* handle, System::PWideString retval, char * key, char * lang)/* overload */;
extern PACKAGE void __cdecl QImage_text(QImageH* handle, System::PWideString retval, QImageTextKeyLangH* p1)/* overload */;
extern PACKAGE void __cdecl QImage_setText(QImageH* handle, char * key, char * lang, System::PWideString p3);
extern PACKAGE void __cdecl QImageIO_destroy(QImageIOH* handle);
extern PACKAGE QImageIOH* __cdecl QImageIO_create(void)/* overload */;
extern PACKAGE QImageIOH* __cdecl QImageIO_create(QIODeviceH* ioDevice, char * format)/* overload */;
extern PACKAGE QImageIOH* __cdecl QImageIO_create(System::PWideString fileName, char * format)/* overload */;
extern PACKAGE QImageH* __cdecl QImageIO_image(QImageIOH* handle);
extern PACKAGE int __cdecl QImageIO_status(QImageIOH* handle);
extern PACKAGE char * __cdecl QImageIO_format(QImageIOH* handle);
extern PACKAGE QIODeviceH* __cdecl QImageIO_ioDevice(QImageIOH* handle);
extern PACKAGE void __cdecl QImageIO_fileName(QImageIOH* handle, System::PWideString retval);
extern PACKAGE char * __cdecl QImageIO_parameters(QImageIOH* handle);
extern PACKAGE void __cdecl QImageIO_description(QImageIOH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QImageIO_setImage(QImageIOH* handle, QImageH* p1);
extern PACKAGE void __cdecl QImageIO_setStatus(QImageIOH* handle, int p1);
extern PACKAGE void __cdecl QImageIO_setFormat(QImageIOH* handle, char * p1);
extern PACKAGE void __cdecl QImageIO_setIODevice(QImageIOH* handle, QIODeviceH* p1);
extern PACKAGE void __cdecl QImageIO_setFileName(QImageIOH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QImageIO_setParameters(QImageIOH* handle, char * p1);
extern PACKAGE void __cdecl QImageIO_setDescription(QImageIOH* handle, System::PWideString p1);
extern PACKAGE bool __cdecl QImageIO_read(QImageIOH* handle);
extern PACKAGE bool __cdecl QImageIO_write(QImageIOH* handle);
extern PACKAGE char * __cdecl QImageIO_imageFormat(System::PWideString fileName)/* overload */;
extern PACKAGE char * __cdecl QImageIO_imageFormat(QIODeviceH* p1)/* overload */;
extern PACKAGE void __cdecl QImageIO_inputFormats(QStrListH* retval);
extern PACKAGE void __cdecl QImageIO_outputFormats(QStrListH* retval);
extern PACKAGE void __cdecl QIconSet_destroy(QIconSetH* handle);
extern PACKAGE QIconSetH* __cdecl QIconSet_create(void)/* overload */;
extern PACKAGE QIconSetH* __cdecl QIconSet_create(QPixmapH* p1, QIconSetSize p2)/* overload */;
extern PACKAGE QIconSetH* __cdecl QIconSet_create(QPixmapH* smallPix, QPixmapH* largePix)/* overload */;
extern PACKAGE QIconSetH* __cdecl QIconSet_create(QIconSetH* p1)/* overload */;
extern PACKAGE void __cdecl QIconSet_reset(QIconSetH* handle, QPixmapH* p1, QIconSetSize p2);
extern PACKAGE void __cdecl QIconSet_setPixmap(QIconSetH* handle, QPixmapH* p1, QIconSetSize p2, QIconSetMode p3)/* overload */;
extern PACKAGE void __cdecl QIconSet_setPixmap(QIconSetH* handle, System::PWideString p1, QIconSetSize p2, QIconSetMode p3)/* overload */;
extern PACKAGE void __cdecl QIconSet_pixmap(QIconSetH* handle, QPixmapH* retval, QIconSetSize p1, QIconSetMode p2)/* overload */;
extern PACKAGE void __cdecl QIconSet_pixmap(QIconSetH* handle, QPixmapH* retval, QIconSetSize s, bool enabled)/* overload */;
extern PACKAGE void __cdecl QIconSet_pixmap(QIconSetH* handle, QPixmapH* retval)/* overload */;
extern PACKAGE bool __cdecl QIconSet_isGenerated(QIconSetH* handle, QIconSetSize p1, QIconSetMode p2);
extern PACKAGE bool __cdecl QIconSet_isNull(QIconSetH* handle);
extern PACKAGE void __cdecl QIconSet_detach(QIconSetH* handle);
extern PACKAGE void __cdecl QMovie_destroy(QMovieH* handle);
extern PACKAGE QMovieH* __cdecl QMovie_create(void)/* overload */;
extern PACKAGE QMovieH* __cdecl QMovie_create(int bufsize)/* overload */;
extern PACKAGE QMovieH* __cdecl QMovie_create(QDataSourceH* p1, int bufsize)/* overload */;
extern PACKAGE QMovieH* __cdecl QMovie_create(System::PWideString fileName, int bufsize)/* overload */;
extern PACKAGE QMovieH* __cdecl QMovie_create(QByteArrayH* data, int bufsize)/* overload */;
extern PACKAGE QMovieH* __cdecl QMovie_create(QMovieH* p1)/* overload */;
extern PACKAGE int __cdecl QMovie_pushSpace(QMovieH* handle);
extern PACKAGE void __cdecl QMovie_pushData(QMovieH* handle, System::PByte data, int length);
extern PACKAGE QColorH* __cdecl QMovie_backgroundColor(QMovieH* handle);
extern PACKAGE void __cdecl QMovie_setBackgroundColor(QMovieH* handle, QColorH* p1);
extern PACKAGE void __cdecl QMovie_getValidRect(QMovieH* handle, Types::PRect retval);
extern PACKAGE QPixmapH* __cdecl QMovie_framePixmap(QMovieH* handle);
extern PACKAGE QImageH* __cdecl QMovie_frameImage(QMovieH* handle);
extern PACKAGE bool __cdecl QMovie_isNull(QMovieH* handle);
extern PACKAGE int __cdecl QMovie_frameNumber(QMovieH* handle);
extern PACKAGE int __cdecl QMovie_steps(QMovieH* handle);
extern PACKAGE bool __cdecl QMovie_paused(QMovieH* handle);
extern PACKAGE bool __cdecl QMovie_finished(QMovieH* handle);
extern PACKAGE bool __cdecl QMovie_running(QMovieH* handle);
extern PACKAGE void __cdecl QMovie_unpause(QMovieH* handle);
extern PACKAGE void __cdecl QMovie_pause(QMovieH* handle);
extern PACKAGE void __cdecl QMovie_step(QMovieH* handle)/* overload */;
extern PACKAGE void __cdecl QMovie_step(QMovieH* handle, int p1)/* overload */;
extern PACKAGE void __cdecl QMovie_restart(QMovieH* handle);
extern PACKAGE int __cdecl QMovie_speed(QMovieH* handle);
extern PACKAGE void __cdecl QMovie_setSpeed(QMovieH* handle, int p1);
extern PACKAGE void __cdecl QMovie_connectResize(QMovieH* handle, QObjectH* receiver, char * member);
extern PACKAGE void __cdecl QMovie_disconnectResize(QMovieH* handle, QObjectH* receiver, char * member);
extern PACKAGE void __cdecl QMovie_connectUpdate(QMovieH* handle, QObjectH* receiver, char * member);
extern PACKAGE void __cdecl QMovie_disconnectUpdate(QMovieH* handle, QObjectH* receiver, char * member);
extern PACKAGE void __cdecl QMovie_setDisplayWidget(QMovieH* handle, QWidgetH* w);
extern PACKAGE void __cdecl QMovie_connectStatus(QMovieH* handle, QObjectH* receiver, char * member);
extern PACKAGE void __cdecl QMovie_disconnectStatus(QMovieH* handle, QObjectH* receiver, char * member);
extern PACKAGE int __cdecl QPaintDevice_devType(QPaintDeviceH* handle);
extern PACKAGE bool __cdecl QPaintDevice_isExtDev(QPaintDeviceH* handle);
extern PACKAGE bool __cdecl QPaintDevice_paintingActive(QPaintDeviceH* handle);
extern PACKAGE HDC __cdecl QPaintDevice_handle(QPaintDeviceH* handle)/* overload */;
extern PACKAGE void __cdecl QColorGroup_destroy(QColorGroupH* handle);
extern PACKAGE QColorGroupH* __cdecl QColorGroup_create(void)/* overload */;
extern PACKAGE QColorGroupH* __cdecl QColorGroup_create(QColorH* foreground, QColorH* button, QColorH* light, QColorH* dark, QColorH* mid, QColorH* text, QColorH* base)/* overload */;
extern PACKAGE QColorGroupH* __cdecl QColorGroup_create(QBrushH* foreground, QBrushH* button, QBrushH* light, QBrushH* dark, QBrushH* mid, QBrushH* text, QBrushH* bright_text, QBrushH* base, QBrushH* background)/* overload */;
extern PACKAGE QColorGroupH* __cdecl QColorGroup_create(QColorGroupH* p1)/* overload */;
extern PACKAGE QColorH* __cdecl QColorGroup_color(QColorGroupH* handle, QColorGroupColorRole p1);
extern PACKAGE QBrushH* __cdecl QColorGroup_brush(QColorGroupH* handle, QColorGroupColorRole p1);
extern PACKAGE void __cdecl QColorGroup_setColor(QColorGroupH* handle, QColorGroupColorRole p1, QColorH* p2);
extern PACKAGE void __cdecl QColorGroup_setBrush(QColorGroupH* handle, QColorGroupColorRole p1, QBrushH* p2);
extern PACKAGE QColorH* __cdecl QColorGroup_foreground(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_button(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_light(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_dark(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_mid(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_text(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_base(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_background(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_midlight(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_brightText(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_buttonText(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_shadow(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_highlight(QColorGroupH* handle);
extern PACKAGE QColorH* __cdecl QColorGroup_highlightedText(QColorGroupH* handle);
extern PACKAGE void __cdecl QPalette_destroy(QPaletteH* handle);
extern PACKAGE QPaletteH* __cdecl QPalette_create(void)/* overload */;
extern PACKAGE QPaletteH* __cdecl QPalette_create(QColorH* button)/* overload */;
extern PACKAGE QPaletteH* __cdecl QPalette_create(QColorH* button, QColorH* background)/* overload */;
extern PACKAGE QPaletteH* __cdecl QPalette_create(QColorGroupH* active, QColorGroupH* disabled, QColorGroupH* inactive)/* overload */;
extern PACKAGE QPaletteH* __cdecl QPalette_create(QPaletteH* p1)/* overload */;
extern PACKAGE QColorH* __cdecl QPalette_color(QPaletteH* handle, QPaletteColorGroup p1, QColorGroupColorRole p2);
extern PACKAGE QBrushH* __cdecl QPalette_brush(QPaletteH* handle, QPaletteColorGroup p1, QColorGroupColorRole p2);
extern PACKAGE void __cdecl QPalette_setColor(QPaletteH* handle, QPaletteColorGroup p1, QColorGroupColorRole p2, QColorH* p3)/* overload */;
extern PACKAGE void __cdecl QPalette_setBrush(QPaletteH* handle, QPaletteColorGroup p1, QColorGroupColorRole p2, QBrushH* p3)/* overload */;
extern PACKAGE void __cdecl QPalette_setColor(QPaletteH* handle, QColorGroupColorRole p1, QColorH* p2)/* overload */;
extern PACKAGE void __cdecl QPalette_setBrush(QPaletteH* handle, QColorGroupColorRole p1, QBrushH* p2)/* overload */;
extern PACKAGE void __cdecl QPalette_copy(QPaletteH* handle, QPaletteH* retval);
extern PACKAGE QColorGroupH* __cdecl QPalette_active(QPaletteH* handle);
extern PACKAGE QColorGroupH* __cdecl QPalette_disabled(QPaletteH* handle);
extern PACKAGE QColorGroupH* __cdecl QPalette_inactive(QPaletteH* handle);
extern PACKAGE QColorGroupH* __cdecl QPalette_normal(QPaletteH* handle);
extern PACKAGE void __cdecl QPalette_setActive(QPaletteH* handle, QColorGroupH* p1);
extern PACKAGE void __cdecl QPalette_setDisabled(QPaletteH* handle, QColorGroupH* p1);
extern PACKAGE void __cdecl QPalette_setInactive(QPaletteH* handle, QColorGroupH* p1);
extern PACKAGE void __cdecl QPalette_setNormal(QPaletteH* handle, QColorGroupH* p1);
extern PACKAGE bool __cdecl QPalette_isCopyOf(QPaletteH* handle, QPaletteH* p1);
extern PACKAGE int __cdecl QPalette_serialNumber(QPaletteH* handle);
extern PACKAGE void __cdecl QPixmap_destroy(QPixmapH* handle);
extern PACKAGE QPixmapH* __cdecl QPixmap_create(void)/* overload */;
extern PACKAGE QPixmapH* __cdecl QPixmap_create(int w, int h, int depth, QPixmapOptimization p4)/* overload */;
extern PACKAGE QPixmapH* __cdecl QPixmap_create(Types::PSize p1, int depth, QPixmapOptimization p3)/* overload */;
extern PACKAGE QPixmapH* __cdecl QPixmap_create(System::PWideString fileName, char * format, QPixmapColorMode mode)/* overload */;
extern PACKAGE QPixmapH* __cdecl QPixmap_create(System::PWideString fileName, char * format, int conversion_flags)/* overload */;
extern PACKAGE QPixmapH* __cdecl QPixmap_create(QByteArrayH* data)/* overload */;
extern PACKAGE QPixmapH* __cdecl QPixmap_create(QPixmapH* p1)/* overload */;
extern PACKAGE bool __cdecl QPixmap_isNull(QPixmapH* handle);
extern PACKAGE int __cdecl QPixmap_width(QPixmapH* handle);
extern PACKAGE int __cdecl QPixmap_height(QPixmapH* handle);
extern PACKAGE void __cdecl QPixmap_size(QPixmapH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QPixmap_rect(QPixmapH* handle, Types::PRect retval);
extern PACKAGE int __cdecl QPixmap_depth(QPixmapH* handle);
extern PACKAGE int __cdecl QPixmap_defaultDepth(void);
extern PACKAGE void __cdecl QPixmap_fill(QPixmapH* handle, QColorH* fillColor)/* overload */;
extern PACKAGE void __cdecl QPixmap_fill(QPixmapH* handle, QWidgetH* p1, int xofs, int yofs)/* overload */;
extern PACKAGE void __cdecl QPixmap_fill(QPixmapH* handle, QWidgetH* p1, Types::PPoint ofs)/* overload */;
extern PACKAGE void __cdecl QPixmap_resize(QPixmapH* handle, int width, int height)/* overload */;
extern PACKAGE void __cdecl QPixmap_resize(QPixmapH* handle, Types::PSize p1)/* overload */;
extern PACKAGE QBitmapH* __cdecl QPixmap_mask(QPixmapH* handle);
extern PACKAGE void __cdecl QPixmap_setMask(QPixmapH* handle, QBitmapH* p1);
extern PACKAGE bool __cdecl QPixmap_selfMask(QPixmapH* handle);
extern PACKAGE void __cdecl QPixmap_createHeuristicMask(QPixmapH* handle, QBitmapH* retval, bool clipTight);
extern PACKAGE void __cdecl QPixmap_grabWindow(QPixmapH* retval, unsigned p1, int x, int y, int w, int h);
extern PACKAGE void __cdecl QPixmap_grabWidget(QPixmapH* retval, QWidgetH* widget, int x, int y, int w, int h);
extern PACKAGE void __cdecl QPixmap_xForm(QPixmapH* handle, QPixmapH* retval, QWMatrixH* p1);
extern PACKAGE void __cdecl QPixmap_trueMatrix(QWMatrixH* retval, QWMatrixH* p1, int w, int h);
extern PACKAGE void __cdecl QPixmap_convertToImage(QPixmapH* handle, QImageH* retval);
extern PACKAGE bool __cdecl QPixmap_convertFromImage(QPixmapH* handle, QImageH* p1, QPixmapColorMode mode)/* overload */;
extern PACKAGE bool __cdecl QPixmap_convertFromImage(QPixmapH* handle, QImageH* p1, int conversion_flags)/* overload */;
extern PACKAGE char * __cdecl QPixmap_imageFormat(System::PWideString fileName);
extern PACKAGE bool __cdecl QPixmap_load(QPixmapH* handle, System::PWideString fileName, char * format, QPixmapColorMode mode)/* overload */;
extern PACKAGE bool __cdecl QPixmap_load(QPixmapH* handle, System::PWideString fileName, char * format, int conversion_flags)/* overload */;
extern PACKAGE bool __cdecl QPixmap_loadFromData(QPixmapH* handle, System::PByte buf, unsigned len, char * format, QPixmapColorMode mode)/* overload */;
extern PACKAGE bool __cdecl QPixmap_loadFromData(QPixmapH* handle, System::PByte buf, unsigned len, char * format, int conversion_flags)/* overload */;
extern PACKAGE bool __cdecl QPixmap_loadFromData(QPixmapH* handle, QByteArrayH* data, char * format, int conversion_flags)/* overload */;
extern PACKAGE bool __cdecl QPixmap_save(QPixmapH* handle, System::PWideString fileName, char * format)/* overload */;
extern PACKAGE bool __cdecl QPixmap_save(QPixmapH* handle, System::PWideString fileName, char * format, int quality)/* overload */;
extern PACKAGE HBITMAP __cdecl QPixmap_hbm(QPixmapH* handle);
extern PACKAGE int __cdecl QPixmap_serialNumber(QPixmapH* handle);
extern PACKAGE QPixmapOptimization __cdecl QPixmap_optimization(QPixmapH* handle);
extern PACKAGE void __cdecl QPixmap_setOptimization(QPixmapH* handle, QPixmapOptimization p1);
extern PACKAGE QPixmapOptimization __cdecl QPixmap_defaultOptimization(void);
extern PACKAGE void __cdecl QPixmap_setDefaultOptimization(QPixmapOptimization p1);
extern PACKAGE void __cdecl QPixmap_detach(QPixmapH* handle);
extern PACKAGE bool __cdecl QPixmap_isQBitmap(QPixmapH* handle);
extern PACKAGE bool __cdecl QPixmap_isMultiCellPixmap(QPixmapH* handle);
extern PACKAGE HDC __cdecl QPixmap_multiCellHandle(QPixmapH* handle);
extern PACKAGE HBITMAP __cdecl QPixmap_multiCellBitmap(QPixmapH* handle);
extern PACKAGE int __cdecl QPixmap_multiCellOffset(QPixmapH* handle);
extern PACKAGE int __cdecl QPixmap_allocCell(QPixmapH* handle);
extern PACKAGE void __cdecl QPixmap_freeCell(QPixmapH* handle, bool p1);
extern PACKAGE QRgbH __cdecl QPixmap_clut(QPixmapH* handle);
extern PACKAGE int __cdecl QPixmap_numCols(QPixmapH* handle);
extern PACKAGE void __cdecl QPrinter_destroy(QPrinterH* handle);
extern PACKAGE QPrinterH* __cdecl QPrinter_create(void);
extern PACKAGE void __cdecl QPrinter_printerName(QPrinterH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QPrinter_setPrinterName(QPrinterH* handle, System::PWideString p1);
extern PACKAGE bool __cdecl QPrinter_outputToFile(QPrinterH* handle);
extern PACKAGE void __cdecl QPrinter_setOutputToFile(QPrinterH* handle, bool p1);
extern PACKAGE void __cdecl QPrinter_outputFileName(QPrinterH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QPrinter_setOutputFileName(QPrinterH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QPrinter_printProgram(QPrinterH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QPrinter_setPrintProgram(QPrinterH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QPrinter_printerSelectionOption(QPrinterH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QPrinter_setPrinterSelectionOption(QPrinterH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QPrinter_docName(QPrinterH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QPrinter_setDocName(QPrinterH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QPrinter_creator(QPrinterH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QPrinter_setCreator(QPrinterH* handle, System::PWideString p1);
extern PACKAGE QPrinterOrientation __cdecl QPrinter_orientation(QPrinterH* handle);
extern PACKAGE void __cdecl QPrinter_setOrientation(QPrinterH* handle, QPrinterOrientation p1);
extern PACKAGE QPrinterPageSize __cdecl QPrinter_pageSize(QPrinterH* handle);
extern PACKAGE void __cdecl QPrinter_setPageSize(QPrinterH* handle, QPrinterPageSize p1);
extern PACKAGE void __cdecl QPrinter_setPageOrder(QPrinterH* handle, QPrinterPageOrder p1);
extern PACKAGE QPrinterPageOrder __cdecl QPrinter_pageOrder(QPrinterH* handle);
extern PACKAGE void __cdecl QPrinter_setColorMode(QPrinterH* handle, QPrinterColorMode p1);
extern PACKAGE QPrinterColorMode __cdecl QPrinter_colorMode(QPrinterH* handle);
extern PACKAGE void __cdecl QPrinter_setFullPage(QPrinterH* handle, bool p1);
extern PACKAGE bool __cdecl QPrinter_fullPage(QPrinterH* handle);
extern PACKAGE void __cdecl QPrinter_margins(QPrinterH* handle, Types::PSize retval);
extern PACKAGE int __cdecl QPrinter_fromPage(QPrinterH* handle);
extern PACKAGE int __cdecl QPrinter_toPage(QPrinterH* handle);
extern PACKAGE void __cdecl QPrinter_setFromTo(QPrinterH* handle, int fromPage, int toPage);
extern PACKAGE int __cdecl QPrinter_minPage(QPrinterH* handle);
extern PACKAGE int __cdecl QPrinter_maxPage(QPrinterH* handle);
extern PACKAGE void __cdecl QPrinter_setMinMax(QPrinterH* handle, int minPage, int maxPage);
extern PACKAGE int __cdecl QPrinter_numCopies(QPrinterH* handle);
extern PACKAGE void __cdecl QPrinter_setNumCopies(QPrinterH* handle, int p1);
extern PACKAGE bool __cdecl QPrinter_newPage(QPrinterH* handle);
extern PACKAGE bool __cdecl QPrinter_abort(QPrinterH* handle);
extern PACKAGE bool __cdecl QPrinter_aborted(QPrinterH* handle);
extern PACKAGE bool __cdecl QPrinter_setup(QPrinterH* handle, QWidgetH* parent);
extern PACKAGE void __cdecl QRegion_destroy(QRegionH* handle);
extern PACKAGE QRegionH* __cdecl QRegion_create(void)/* overload */;
extern PACKAGE QRegionH* __cdecl QRegion_create(int x, int y, int w, int h, QRegionRegionType p5)/* overload */;
extern PACKAGE QRegionH* __cdecl QRegion_create(Types::PRect p1, QRegionRegionType p2)/* overload */;
extern PACKAGE QRegionH* __cdecl QRegion_create(PPointArray p1, bool winding)/* overload */;
extern PACKAGE QRegionH* __cdecl QRegion_create(QRegionH* p1)/* overload */;
extern PACKAGE QRegionH* __cdecl QRegion_create(QBitmapH* p1)/* overload */;
extern PACKAGE bool __cdecl QRegion_isNull(QRegionH* handle);
extern PACKAGE bool __cdecl QRegion_isEmpty(QRegionH* handle);
extern PACKAGE bool __cdecl QRegion_contains(QRegionH* handle, Types::PPoint p)/* overload */;
extern PACKAGE bool __cdecl QRegion_contains(QRegionH* handle, Types::PRect r)/* overload */;
extern PACKAGE void __cdecl QRegion_translate(QRegionH* handle, int dx, int dy);
extern PACKAGE void __cdecl QRegion_unite(QRegionH* handle, QRegionH* retval, QRegionH* p1);
extern PACKAGE void __cdecl QRegion_intersect(QRegionH* handle, QRegionH* retval, QRegionH* p1);
extern PACKAGE void __cdecl QRegion_subtract(QRegionH* handle, QRegionH* retval, QRegionH* p1);
extern PACKAGE void __cdecl QRegion_eor(QRegionH* handle, QRegionH* retval, QRegionH* p1);
extern PACKAGE void __cdecl QRegion_boundingRect(QRegionH* handle, Types::PRect retval);
extern PACKAGE void __cdecl QRegion_setRects(QRegionH* handle, Types::PRect p1, int p2);
extern PACKAGE HRGN __cdecl QRegion_handle(QRegionH* handle)/* overload */;
extern PACKAGE void __cdecl QObject_destroy(QObjectH* handle);
extern PACKAGE QObjectH* __cdecl QObject_create(QObjectH* parent, char * name);
extern PACKAGE void __cdecl QObject_tr(System::PWideString retval, char * p1)/* overload */;
extern PACKAGE void __cdecl QObject_tr(System::PWideString retval, char * p1, char * p2)/* overload */;
extern PACKAGE bool __cdecl QObject_event(QObjectH* handle, QEventH* p1);
extern PACKAGE bool __cdecl QObject_eventFilter(QObjectH* handle, QObjectH* p1, QEventH* p2);
extern PACKAGE QMetaObjectH* __cdecl QObject_metaObject(QObjectH* handle);
extern PACKAGE char * __cdecl QObject_className(QObjectH* handle);
extern PACKAGE bool __cdecl QObject_isA(QObjectH* handle, char * p1);
extern PACKAGE bool __cdecl QObject_inherits(QObjectH* handle, char * p1);
extern PACKAGE char * __cdecl QObject_name(QObjectH* handle)/* overload */;
extern PACKAGE char * __cdecl QObject_name(QObjectH* handle, char * defaultName)/* overload */;
extern PACKAGE void __cdecl QObject_setName(QObjectH* handle, char * name);
extern PACKAGE bool __cdecl QObject_isWidgetType(QObjectH* handle);
extern PACKAGE bool __cdecl QObject_highPriority(QObjectH* handle);
extern PACKAGE bool __cdecl QObject_signalsBlocked(QObjectH* handle);
extern PACKAGE void __cdecl QObject_blockSignals(QObjectH* handle, bool b);
extern PACKAGE int __cdecl QObject_startTimer(QObjectH* handle, int interval);
extern PACKAGE void __cdecl QObject_killTimer(QObjectH* handle, int id);
extern PACKAGE void __cdecl QObject_killTimers(QObjectH* handle);
extern PACKAGE QObjectH* __cdecl QObject_child(QObjectH* handle, char * name, char * _type);
extern PACKAGE QObjectListH* __cdecl QObject_children(QObjectH* handle);
extern PACKAGE QObjectListH* __cdecl QObject_objectTrees(void);
extern PACKAGE QObjectListH* __cdecl QObject_queryList(QObjectH* handle, char * inheritsClass, char * objName, bool regexpMatch, bool recursiveSearch);
extern PACKAGE void __cdecl QObject_insertChild(QObjectH* handle, QObjectH* p1);
extern PACKAGE void __cdecl QObject_removeChild(QObjectH* handle, QObjectH* p1);
extern PACKAGE void __cdecl QObject_installEventFilter(QObjectH* handle, QObjectH* p1);
extern PACKAGE void __cdecl QObject_removeEventFilter(QObjectH* handle, QObjectH* p1);
extern PACKAGE bool __cdecl QObject_connect(QObjectH* sender, char * signal, QObjectH* receiver, char * member)/* overload */;
extern PACKAGE bool __cdecl QObject_connect(QObjectH* handle, QObjectH* sender, char * signal, char * member)/* overload */;
extern PACKAGE bool __cdecl QObject_disconnect(QObjectH* sender, char * signal, QObjectH* receiver, char * member)/* overload */;
extern PACKAGE bool __cdecl QObject_disconnect(QObjectH* handle, QObjectH* receiver, char * member)/* overload */;
extern PACKAGE void __cdecl QObject_dumpObjectTree(QObjectH* handle);
extern PACKAGE void __cdecl QObject_dumpObjectInfo(QObjectH* handle);
extern PACKAGE QObjectH* __cdecl QObject_parent(QObjectH* handle);
extern PACKAGE void __cdecl QObject_superClasses(QObjectH* handle, QStringListH* retval, bool includeThis);
extern PACKAGE void __cdecl QSenderObject_setSender(void * handle, QObjectH* s);
extern PACKAGE void __cdecl QBrush_destroy(QBrushH* handle);
extern PACKAGE QBrushH* __cdecl QBrush_create(void)/* overload */;
extern PACKAGE QBrushH* __cdecl QBrush_create(BrushStyle p1)/* overload */;
extern PACKAGE QBrushH* __cdecl QBrush_create(QColorH* p1, BrushStyle p2)/* overload */;
extern PACKAGE QBrushH* __cdecl QBrush_create(QColorH* p1, QPixmapH* p2)/* overload */;
extern PACKAGE QBrushH* __cdecl QBrush_create(QBrushH* p1)/* overload */;
extern PACKAGE BrushStyle __cdecl QBrush_style(QBrushH* handle);
extern PACKAGE void __cdecl QBrush_setStyle(QBrushH* handle, BrushStyle p1);
extern PACKAGE QColorH* __cdecl QBrush_color(QBrushH* handle);
extern PACKAGE void __cdecl QBrush_setColor(QBrushH* handle, QColorH* p1);
extern PACKAGE QPixmapH* __cdecl QBrush_pixmap(QBrushH* handle);
extern PACKAGE void __cdecl QBrush_setPixmap(QBrushH* handle, QPixmapH* p1);
extern PACKAGE void __cdecl QButtonGroup_destroy(QButtonGroupH* handle);
extern PACKAGE QButtonGroupH* __cdecl QButtonGroup_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QButtonGroupH* __cdecl QButtonGroup_create(System::PWideString title, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QButtonGroupH* __cdecl QButtonGroup_create(int columns, Orientation o, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QButtonGroupH* __cdecl QButtonGroup_create(int columns, Orientation o, System::PWideString title, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE bool __cdecl QButtonGroup_isExclusive(QButtonGroupH* handle);
extern PACKAGE bool __cdecl QButtonGroup_isRadioButtonExclusive(QButtonGroupH* handle);
extern PACKAGE void __cdecl QButtonGroup_setExclusive(QButtonGroupH* handle, bool p1);
extern PACKAGE void __cdecl QButtonGroup_setRadioButtonExclusive(QButtonGroupH* handle, bool p1);
extern PACKAGE int __cdecl QButtonGroup_insert(QButtonGroupH* handle, QButtonH* p1, int id);
extern PACKAGE void __cdecl QButtonGroup_remove(QButtonGroupH* handle, QButtonH* p1);
extern PACKAGE QButtonH* __cdecl QButtonGroup_find(QButtonGroupH* handle, int id);
extern PACKAGE int __cdecl QButtonGroup_id(QButtonGroupH* handle, QButtonH* p1);
extern PACKAGE int __cdecl QButtonGroup_count(QButtonGroupH* handle);
extern PACKAGE void __cdecl QButtonGroup_setButton(QButtonGroupH* handle, int id);
extern PACKAGE void __cdecl QButtonGroup_moveFocus(QButtonGroupH* handle, int p1);
extern PACKAGE QButtonH* __cdecl QButtonGroup_selected(QButtonGroupH* handle);
extern PACKAGE void __cdecl QCheckBox_destroy(QCheckBoxH* handle);
extern PACKAGE QCheckBoxH* __cdecl QCheckBox_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QCheckBoxH* __cdecl QCheckBox_create(System::PWideString text, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE bool __cdecl QCheckBox_isChecked(QCheckBoxH* handle);
extern PACKAGE void __cdecl QCheckBox_setChecked(QCheckBoxH* handle, bool check);
extern PACKAGE void __cdecl QCheckBox_setNoChange(QCheckBoxH* handle);
extern PACKAGE void __cdecl QCheckBox_setTristate(QCheckBoxH* handle, bool y);
extern PACKAGE bool __cdecl QCheckBox_isTristate(QCheckBoxH* handle);
extern PACKAGE void __cdecl QCheckBox_sizeHint(QCheckBoxH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QCheckBox_sizePolicy(QCheckBoxH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QClipboard_clear(QClipboardH* handle);
extern PACKAGE bool __cdecl QClipboard_ownsSelection(QClipboardH* handle);
extern PACKAGE QMimeSourceH* __cdecl QClipboard_data(QClipboardH* handle);
extern PACKAGE void __cdecl QClipboard_setData(QClipboardH* handle, QMimeSourceH* p1);
extern PACKAGE void __cdecl QClipboard_text(QClipboardH* handle, System::PWideString retval)/* overload */;
extern PACKAGE void __cdecl QClipboard_text(QClipboardH* handle, System::PWideString retval, System::PAnsiString subtype)/* overload */;
extern PACKAGE void __cdecl QClipboard_setText(QClipboardH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QClipboard_image(QClipboardH* handle, QImageH* retval);
extern PACKAGE void __cdecl QClipboard_pixmap(QClipboardH* handle, QPixmapH* retval);
extern PACKAGE void __cdecl QClipboard_setImage(QClipboardH* handle, QImageH* p1);
extern PACKAGE void __cdecl QClipboard_setPixmap(QClipboardH* handle, QPixmapH* p1);
extern PACKAGE void __cdecl QColorDialog_getColor(QColorH* retval, QColorH* p1, QWidgetH* parent, char * name);
extern PACKAGE void __cdecl QColorDialog_getRgba(QRgbH retval, QRgbH p1, System::PBoolean ok, QWidgetH* parent, char * name);
extern PACKAGE int __cdecl QColorDialog_customCount(void);
extern PACKAGE void __cdecl QColorDialog_customColor(QRgbH retval, int p1);
extern PACKAGE void __cdecl QColorDialog_setCustomColor(int p1, QRgbH p2);
extern PACKAGE void __cdecl QCommonStyle_drawComboButton(QCommonStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, bool editable, bool enabled, QBrushH* fill);
extern PACKAGE void __cdecl QCommonStyle_comboButtonRect(QCommonStyleH* handle, Types::PRect retval, int x, int y, int w, int h);
extern PACKAGE void __cdecl QCommonStyle_comboButtonFocusRect(QCommonStyleH* handle, Types::PRect retval, int x, int y, int w, int h);
extern PACKAGE void __cdecl QCommonStyle_drawComboButtonMask(QCommonStyleH* handle, QPainterH* p, int x, int y, int w, int h);
extern PACKAGE void __cdecl QCommonStyle_drawPushButtonLabel(QCommonStyleH* handle, QPushButtonH* btn, QPainterH* p);
extern PACKAGE void __cdecl QCommonStyle_getButtonShift(QCommonStyleH* handle, PInteger x, PInteger y);
extern PACKAGE int __cdecl QCommonStyle_defaultFrameWidth(QCommonStyleH* handle);
extern PACKAGE void __cdecl QCommonStyle_tabbarMetrics(QCommonStyleH* handle, QTabBarH* p1, PInteger p2, PInteger p3, PInteger p4);
extern PACKAGE void __cdecl QCommonStyle_drawTab(QCommonStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected);
extern PACKAGE void __cdecl QCommonStyle_drawTabMask(QCommonStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected);
extern PACKAGE QStyleScrollControl __cdecl QCommonStyle_scrollBarPointOver(QCommonStyleH* handle, QScrollBarH* sb, int sliderStart, Types::PPoint p);
extern PACKAGE void __cdecl QCommonStyle_drawSliderMask(QCommonStyleH* handle, QPainterH* p, int x, int y, int w, int h, Orientation p6, bool tickAbove, bool tickBelow);
extern PACKAGE void __cdecl QCommonStyle_drawSliderGrooveMask(QCommonStyleH* handle, QPainterH* p, int x, int y, int w, int h, QCOORD c, Orientation p7);
extern PACKAGE int __cdecl QCommonStyle_maximumSliderDragDistance(QCommonStyleH* handle);
extern PACKAGE int __cdecl QCommonStyle_popupSubmenuIndicatorWidth(QCommonStyleH* handle, QFontMetricsH* fm);
extern PACKAGE void __cdecl QCommonStyle_drawMenuBarItem(QCommonStyleH* handle, QPainterH* p, int x, int y, int w, int h, QMenuItemH* mi, QColorGroupH* g, bool enabled, bool active);
extern PACKAGE void __cdecl QFontDialog_getFont(QFontH* retval, System::PBoolean ok, QFontH* def, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QFontDialog_getFont(QFontH* retval, System::PBoolean ok, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QGroupBox_destroy(QGroupBoxH* handle);
extern PACKAGE QGroupBoxH* __cdecl QGroupBox_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QGroupBoxH* __cdecl QGroupBox_create(System::PWideString title, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QGroupBoxH* __cdecl QGroupBox_create(int columns, Orientation o, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QGroupBoxH* __cdecl QGroupBox_create(int columns, Orientation o, System::PWideString title, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QGroupBox_setColumnLayout(QGroupBoxH* handle, int columns, Orientation o);
extern PACKAGE void __cdecl QGroupBox_title(QGroupBoxH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QGroupBox_setTitle(QGroupBoxH* handle, System::PWideString p1);
extern PACKAGE int __cdecl QGroupBox_alignment(QGroupBoxH* handle);
extern PACKAGE void __cdecl QGroupBox_setAlignment(QGroupBoxH* handle, int p1);
extern PACKAGE int __cdecl QGroupBox_columns(QGroupBoxH* handle);
extern PACKAGE void __cdecl QGroupBox_setColumns(QGroupBoxH* handle, int p1);
extern PACKAGE Orientation __cdecl QGroupBox_orientation(QGroupBoxH* handle);
extern PACKAGE void __cdecl QGroupBox_setOrientation(QGroupBoxH* handle, Orientation p1);
extern PACKAGE void __cdecl QGroupBox_addSpace(QGroupBoxH* handle, int p1);
extern PACKAGE void __cdecl QGroupBox_sizeHint(QGroupBoxH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QHeader_destroy(QHeaderH* handle);
extern PACKAGE QHeaderH* __cdecl QHeader_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QHeaderH* __cdecl QHeader_create(int p1, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE int __cdecl QHeader_addLabel(QHeaderH* handle, System::PWideString p1, int size)/* overload */;
extern PACKAGE int __cdecl QHeader_addLabel(QHeaderH* handle, QIconSetH* p1, System::PWideString p2, int size)/* overload */;
extern PACKAGE void __cdecl QHeader_removeLabel(QHeaderH* handle, int section);
extern PACKAGE void __cdecl QHeader_setLabel(QHeaderH* handle, int p1, System::PWideString p2, int size)/* overload */;
extern PACKAGE void __cdecl QHeader_setLabel(QHeaderH* handle, int p1, QIconSetH* p2, System::PWideString p3, int size)/* overload */;
extern PACKAGE void __cdecl QHeader_label(QHeaderH* handle, System::PWideString retval, int section);
extern PACKAGE QIconSetH* __cdecl QHeader_iconSet(QHeaderH* handle, int section);
extern PACKAGE void __cdecl QHeader_setOrientation(QHeaderH* handle, Orientation p1);
extern PACKAGE Orientation __cdecl QHeader_orientation(QHeaderH* handle);
extern PACKAGE void __cdecl QHeader_setTracking(QHeaderH* handle, bool enable);
extern PACKAGE bool __cdecl QHeader_tracking(QHeaderH* handle);
extern PACKAGE void __cdecl QHeader_setClickEnabled(QHeaderH* handle, bool p1, int section);
extern PACKAGE void __cdecl QHeader_setResizeEnabled(QHeaderH* handle, bool p1, int section);
extern PACKAGE void __cdecl QHeader_setMovingEnabled(QHeaderH* handle, bool p1);
extern PACKAGE bool __cdecl QHeader_isClickEnabled(QHeaderH* handle, int section);
extern PACKAGE bool __cdecl QHeader_isResizeEnabled(QHeaderH* handle, int section);
extern PACKAGE bool __cdecl QHeader_isMovingEnabled(QHeaderH* handle);
extern PACKAGE void __cdecl QHeader_resizeSection(QHeaderH* handle, int section, int s);
extern PACKAGE int __cdecl QHeader_sectionSize(QHeaderH* handle, int section);
extern PACKAGE int __cdecl QHeader_sectionPos(QHeaderH* handle, int section);
extern PACKAGE int __cdecl QHeader_sectionAt(QHeaderH* handle, int pos);
extern PACKAGE int __cdecl QHeader_count(QHeaderH* handle);
extern PACKAGE void __cdecl QHeader_setCellSize(QHeaderH* handle, int p1, int p2);
extern PACKAGE int __cdecl QHeader_cellSize(QHeaderH* handle, int p1);
extern PACKAGE int __cdecl QHeader_cellPos(QHeaderH* handle, int p1);
extern PACKAGE int __cdecl QHeader_cellAt(QHeaderH* handle, int p1);
extern PACKAGE int __cdecl QHeader_offset(QHeaderH* handle);
extern PACKAGE void __cdecl QHeader_sizeHint(QHeaderH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QHeader_sizePolicy(QHeaderH* handle, PSizePolicy retval);
extern PACKAGE int __cdecl QHeader_mapToSection(QHeaderH* handle, int index);
extern PACKAGE int __cdecl QHeader_mapToIndex(QHeaderH* handle, int section);
extern PACKAGE int __cdecl QHeader_mapToLogical(QHeaderH* handle, int p1);
extern PACKAGE int __cdecl QHeader_mapToActual(QHeaderH* handle, int p1);
extern PACKAGE void __cdecl QHeader_moveSection(QHeaderH* handle, int section, int toIndex);
extern PACKAGE void __cdecl QHeader_moveCell(QHeaderH* handle, int p1, int p2);
extern PACKAGE void __cdecl QHeader_setSortIndicator(QHeaderH* handle, int section, bool increasing);
extern PACKAGE void __cdecl QHeader_setUpdatesEnabled(QHeaderH* handle, bool enable);
extern PACKAGE void __cdecl QHeader_setOffset(QHeaderH* handle, int pos);
extern PACKAGE void __cdecl QLabel_destroy(QLabelH* handle);
extern PACKAGE QLabelH* __cdecl QLabel_create(QWidgetH* parent, char * name, int f)/* overload */;
extern PACKAGE QLabelH* __cdecl QLabel_create(System::PWideString text, QWidgetH* parent, char * name, int f)/* overload */;
extern PACKAGE QLabelH* __cdecl QLabel_create(QWidgetH* buddy, System::PWideString p2, QWidgetH* parent, char * name, int f)/* overload */;
extern PACKAGE void __cdecl QLabel_text(QLabelH* handle, System::PWideString retval);
extern PACKAGE QPixmapH* __cdecl QLabel_pixmap(QLabelH* handle);
extern PACKAGE QMovieH* __cdecl QLabel_movie(QLabelH* handle);
extern PACKAGE TextFormat __cdecl QLabel_textFormat(QLabelH* handle);
extern PACKAGE void __cdecl QLabel_setTextFormat(QLabelH* handle, TextFormat p1);
extern PACKAGE int __cdecl QLabel_alignment(QLabelH* handle);
extern PACKAGE void __cdecl QLabel_setAlignment(QLabelH* handle, int p1);
extern PACKAGE int __cdecl QLabel_indent(QLabelH* handle);
extern PACKAGE void __cdecl QLabel_setIndent(QLabelH* handle, int p1);
extern PACKAGE bool __cdecl QLabel_autoResize(QLabelH* handle);
extern PACKAGE void __cdecl QLabel_setAutoResize(QLabelH* handle, bool p1);
extern PACKAGE bool __cdecl QLabel_hasScaledContents(QLabelH* handle);
extern PACKAGE void __cdecl QLabel_setScaledContents(QLabelH* handle, bool p1);
extern PACKAGE void __cdecl QLabel_sizeHint(QLabelH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QLabel_minimumSizeHint(QLabelH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QLabel_sizePolicy(QLabelH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QLabel_setBuddy(QLabelH* handle, QWidgetH* p1);
extern PACKAGE QWidgetH* __cdecl QLabel_buddy(QLabelH* handle);
extern PACKAGE void __cdecl QLabel_setAutoMask(QLabelH* handle, bool p1);
extern PACKAGE int __cdecl QLabel_heightForWidth(QLabelH* handle, int p1);
extern PACKAGE void __cdecl QLabel_setText(QLabelH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QLabel_setPixmap(QLabelH* handle, QPixmapH* p1);
extern PACKAGE void __cdecl QLabel_setMovie(QLabelH* handle, QMovieH* p1);
extern PACKAGE void __cdecl QLabel_setNum(QLabelH* handle, int p1)/* overload */;
extern PACKAGE void __cdecl QLabel_setNum(QLabelH* handle, double p1)/* overload */;
extern PACKAGE void __cdecl QLabel_clear(QLabelH* handle);
extern PACKAGE void __cdecl QPainter_destroy(QPainterH* handle);
extern PACKAGE QPainterH* __cdecl QPainter_create(void)/* overload */;
extern PACKAGE QPainterH* __cdecl QPainter_create(QPaintDeviceH* p1)/* overload */;
extern PACKAGE QPainterH* __cdecl QPainter_create(QPaintDeviceH* p1, QWidgetH* p2)/* overload */;
extern PACKAGE bool __cdecl QPainter_begin(QPainterH* handle, QPaintDeviceH* p1)/* overload */;
extern PACKAGE bool __cdecl QPainter_begin(QPainterH* handle, QPaintDeviceH* p1, QWidgetH* p2)/* overload */;
extern PACKAGE bool __cdecl QPainter_end(QPainterH* handle);
extern PACKAGE QPaintDeviceH* __cdecl QPainter_device(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_redirect(QPaintDeviceH* pdev, QPaintDeviceH* replacement);
extern PACKAGE bool __cdecl QPainter_isActive(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_flush(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_save(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_restore(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_fontMetrics(QPainterH* handle, QFontMetricsH* retval);
extern PACKAGE void __cdecl QPainter_fontInfo(QPainterH* handle, QFontInfoH* retval);
extern PACKAGE QFontH* __cdecl QPainter_font(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setFont(QPainterH* handle, QFontH* p1);
extern PACKAGE QPenH* __cdecl QPainter_pen(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setPen(QPainterH* handle, QPenH* p1)/* overload */;
extern PACKAGE void __cdecl QPainter_setPen(QPainterH* handle, PenStyle p1)/* overload */;
extern PACKAGE void __cdecl QPainter_setPen(QPainterH* handle, QColorH* p1)/* overload */;
extern PACKAGE QBrushH* __cdecl QPainter_brush(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setBrush(QPainterH* handle, QBrushH* p1)/* overload */;
extern PACKAGE void __cdecl QPainter_setBrush(QPainterH* handle, BrushStyle p1)/* overload */;
extern PACKAGE void __cdecl QPainter_setBrush(QPainterH* handle, QColorH* p1)/* overload */;
extern PACKAGE void __cdecl QPainter_pos(QPainterH* handle, Types::PPoint retval);
extern PACKAGE QColorH* __cdecl QPainter_backgroundColor(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setBackgroundColor(QPainterH* handle, QColorH* p1);
extern PACKAGE BGMode __cdecl QPainter_backgroundMode(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setBackgroundMode(QPainterH* handle, BGMode p1);
extern PACKAGE RasterOp __cdecl QPainter_rasterOp(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setRasterOp(QPainterH* handle, RasterOp p1);
extern PACKAGE Types::PPoint __cdecl QPainter_brushOrigin(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setBrushOrigin(QPainterH* handle, int x, int y)/* overload */;
extern PACKAGE void __cdecl QPainter_setBrushOrigin(QPainterH* handle, Types::PPoint p1)/* overload */;
extern PACKAGE bool __cdecl QPainter_hasViewXForm(QPainterH* handle);
extern PACKAGE bool __cdecl QPainter_hasWorldXForm(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setViewXForm(QPainterH* handle, bool p1);
extern PACKAGE void __cdecl QPainter_window(QPainterH* handle, Types::PRect retval);
extern PACKAGE void __cdecl QPainter_setWindow(QPainterH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPainter_setWindow(QPainterH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QPainter_viewport(QPainterH* handle, Types::PRect retval);
extern PACKAGE void __cdecl QPainter_setViewport(QPainterH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPainter_setViewport(QPainterH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QPainter_setWorldXForm(QPainterH* handle, bool p1);
extern PACKAGE QWMatrixH* __cdecl QPainter_worldMatrix(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setWorldMatrix(QPainterH* handle, QWMatrixH* p1, bool combine);
extern PACKAGE void __cdecl QPainter_saveWorldMatrix(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_restoreWorldMatrix(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_scale(QPainterH* handle, double sx, double sy);
extern PACKAGE void __cdecl QPainter_shear(QPainterH* handle, double sh, double sv);
extern PACKAGE void __cdecl QPainter_rotate(QPainterH* handle, double a);
extern PACKAGE void __cdecl QPainter_translate(QPainterH* handle, double dx, double dy);
extern PACKAGE void __cdecl QPainter_resetXForm(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_xForm(QPainterH* handle, Types::PPoint retval, Types::PPoint p1)/* overload */;
extern PACKAGE void __cdecl QPainter_xForm(QPainterH* handle, Types::PRect retval, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPainter_xForm(QPainterH* handle, PPointArray retval, PPointArray p1)/* overload */;
extern PACKAGE void __cdecl QPainter_xForm(QPainterH* handle, PPointArray retval, PPointArray p1, int index, int npoints)/* overload */;
extern PACKAGE void __cdecl QPainter_xFormDev(QPainterH* handle, Types::PPoint retval, Types::PPoint p1)/* overload */;
extern PACKAGE void __cdecl QPainter_xFormDev(QPainterH* handle, Types::PRect retval, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPainter_xFormDev(QPainterH* handle, PPointArray retval, PPointArray p1)/* overload */;
extern PACKAGE void __cdecl QPainter_xFormDev(QPainterH* handle, PPointArray retval, PPointArray p1, int index, int npoints)/* overload */;
extern PACKAGE void __cdecl QPainter_setClipping(QPainterH* handle, bool p1);
extern PACKAGE bool __cdecl QPainter_hasClipping(QPainterH* handle);
extern PACKAGE QRegionH* __cdecl QPainter_clipRegion(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setClipRect(QPainterH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPainter_setClipRect(QPainterH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QPainter_setClipRegion(QPainterH* handle, QRegionH* p1);
extern PACKAGE void __cdecl QPainter_drawPoint(QPainterH* handle, int x, int y)/* overload */;
extern PACKAGE void __cdecl QPainter_drawPoint(QPainterH* handle, Types::PPoint p1)/* overload */;
extern PACKAGE void __cdecl QPainter_drawPoints(QPainterH* handle, PPointArray a, int index, int npoints);
extern PACKAGE void __cdecl QPainter_moveTo(QPainterH* handle, int x, int y)/* overload */;
extern PACKAGE void __cdecl QPainter_moveTo(QPainterH* handle, Types::PPoint p1)/* overload */;
extern PACKAGE void __cdecl QPainter_lineTo(QPainterH* handle, int x, int y)/* overload */;
extern PACKAGE void __cdecl QPainter_lineTo(QPainterH* handle, Types::PPoint p1)/* overload */;
extern PACKAGE void __cdecl QPainter_drawLine(QPainterH* handle, int x1, int y1, int x2, int y2)/* overload */;
extern PACKAGE void __cdecl QPainter_drawLine(QPainterH* handle, Types::PPoint p1, Types::PPoint p2)/* overload */;
extern PACKAGE void __cdecl QPainter_drawRect(QPainterH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QPainter_drawRect(QPainterH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPainter_drawWinFocusRect(QPainterH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QPainter_drawWinFocusRect(QPainterH* handle, int x, int y, int w, int h, QColorH* bgColor)/* overload */;
extern PACKAGE void __cdecl QPainter_drawWinFocusRect(QPainterH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPainter_drawWinFocusRect(QPainterH* handle, Types::PRect p1, QColorH* bgColor)/* overload */;
extern PACKAGE void __cdecl QPainter_drawRoundRect(QPainterH* handle, int x, int y, int w, int h, int p5, int p6)/* overload */;
extern PACKAGE void __cdecl QPainter_drawRoundRect(QPainterH* handle, Types::PRect p1, int p2, int p3)/* overload */;
extern PACKAGE void __cdecl QPainter_drawRoundRect(QPainterH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QPainter_drawRoundRect(QPainterH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPainter_drawEllipse(QPainterH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QPainter_drawEllipse(QPainterH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPainter_drawArc(QPainterH* handle, int x, int y, int w, int h, int a, int alen)/* overload */;
extern PACKAGE void __cdecl QPainter_drawArc(QPainterH* handle, Types::PRect p1, int a, int alen)/* overload */;
extern PACKAGE void __cdecl QPainter_drawPie(QPainterH* handle, int x, int y, int w, int h, int a, int alen)/* overload */;
extern PACKAGE void __cdecl QPainter_drawPie(QPainterH* handle, Types::PRect p1, int a, int alen)/* overload */;
extern PACKAGE void __cdecl QPainter_drawChord(QPainterH* handle, int x, int y, int w, int h, int a, int alen)/* overload */;
extern PACKAGE void __cdecl QPainter_drawChord(QPainterH* handle, Types::PRect p1, int a, int alen)/* overload */;
extern PACKAGE void __cdecl QPainter_drawLineSegments(QPainterH* handle, PPointArray p1, int index, int nlines);
extern PACKAGE void __cdecl QPainter_drawPolyline(QPainterH* handle, PPointArray p1, int index, int npoints);
extern PACKAGE void __cdecl QPainter_drawPolygon(QPainterH* handle, PPointArray p1, bool winding, int index, int npoints);
extern PACKAGE void __cdecl QPainter_drawQuadBezier(QPainterH* handle, PPointArray p1, int index);
extern PACKAGE void __cdecl QPainter_drawPixmap(QPainterH* handle, int x, int y, QPixmapH* p3, int sx, int sy, int sw, int sh)/* overload */;
extern PACKAGE void __cdecl QPainter_drawPixmap(QPainterH* handle, Types::PPoint p1, QPixmapH* p2, Types::PRect sr)/* overload */;
extern PACKAGE void __cdecl QPainter_drawPixmap(QPainterH* handle, Types::PPoint p1, QPixmapH* p2)/* overload */;
extern PACKAGE void __cdecl QPainter_drawImage(QPainterH* handle, int x, int y, QImageH* p3, int sx, int sy, int sw, int sh)/* overload */;
extern PACKAGE void __cdecl QPainter_drawImage(QPainterH* handle, Types::PPoint p1, QImageH* p2, Types::PRect sr)/* overload */;
extern PACKAGE void __cdecl QPainter_drawImage(QPainterH* handle, Types::PPoint p1, QImageH* p2)/* overload */;
extern PACKAGE void __cdecl QPainter_drawImage(QPainterH* handle, int x, int y, QImageH* p3, int sx, int sy, int sw, int sh, int conversion_flags)/* overload */;
extern PACKAGE void __cdecl QPainter_drawImage(QPainterH* handle, Types::PPoint p1, QImageH* p2, Types::PRect sr, int conversion_flags)/* overload */;
extern PACKAGE void __cdecl QPainter_drawImage(QPainterH* handle, Types::PPoint p1, QImageH* p2, int conversion_flags)/* overload */;
extern PACKAGE void __cdecl QPainter_drawTiledPixmap(QPainterH* handle, int x, int y, int w, int h, QPixmapH* p5, int sx, int sy)/* overload */;
extern PACKAGE void __cdecl QPainter_drawTiledPixmap(QPainterH* handle, Types::PRect p1, QPixmapH* p2, Types::PPoint p3)/* overload */;
extern PACKAGE void __cdecl QPainter_drawTiledPixmap(QPainterH* handle, Types::PRect p1, QPixmapH* p2)/* overload */;
extern PACKAGE void __cdecl QPainter_drawPicture(QPainterH* handle, QPictureH* p1);
extern PACKAGE void __cdecl QPainter_fillRect(QPainterH* handle, int x, int y, int w, int h, QBrushH* p5)/* overload */;
extern PACKAGE void __cdecl QPainter_fillRect(QPainterH* handle, Types::PRect p1, QBrushH* p2)/* overload */;
extern PACKAGE void __cdecl QPainter_eraseRect(QPainterH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QPainter_eraseRect(QPainterH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPainter_drawText(QPainterH* handle, int x, int y, System::PWideString p3, int len)/* overload */;
extern PACKAGE void __cdecl QPainter_drawText(QPainterH* handle, Types::PPoint p1, System::PWideString p2, int len)/* overload */;
extern PACKAGE void __cdecl QPainter_drawText(QPainterH* handle, int x, int y, int w, int h, int flags, System::PWideString p6, int len, Types::PRect br, System::PPChar internal)/* overload */;
extern PACKAGE void __cdecl QPainter_drawText(QPainterH* handle, Types::PRect p1, int flags, System::PWideString p3, int len, Types::PRect br, System::PPChar internal)/* overload */;
extern PACKAGE void __cdecl QPainter_boundingRect(QPainterH* handle, Types::PRect retval, int x, int y, int w, int h, int flags, System::PWideString p6, int len, System::PPChar intern)/* overload */;
extern PACKAGE void __cdecl QPainter_boundingRect(QPainterH* handle, Types::PRect retval, Types::PRect p1, int flags, System::PWideString p3, int len, System::PPChar intern)/* overload */;
extern PACKAGE int __cdecl QPainter_tabStops(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setTabStops(QPainterH* handle, int p1);
extern PACKAGE PInteger __cdecl QPainter_tabArray(QPainterH* handle);
extern PACKAGE void __cdecl QPainter_setTabArray(QPainterH* handle, PInteger p1);
extern PACKAGE HDC __cdecl QPainter_handle(QPainterH* handle)/* overload */;
extern PACKAGE void __cdecl QPainter_initialize(void);
extern PACKAGE void __cdecl QPainter_cleanup(void);
extern PACKAGE void __cdecl QPen_destroy(QPenH* handle);
extern PACKAGE QPenH* __cdecl QPen_create(void)/* overload */;
extern PACKAGE QPenH* __cdecl QPen_create(PenStyle p1)/* overload */;
extern PACKAGE QPenH* __cdecl QPen_create(QColorH* color, unsigned width, PenStyle style)/* overload */;
extern PACKAGE QPenH* __cdecl QPen_create(QColorH* cl, unsigned w, PenStyle s, PenCapStyle c, PenJoinStyle j)/* overload */;
extern PACKAGE QPenH* __cdecl QPen_create(QPenH* p1)/* overload */;
extern PACKAGE PenStyle __cdecl QPen_style(QPenH* handle);
extern PACKAGE void __cdecl QPen_setStyle(QPenH* handle, PenStyle p1);
extern PACKAGE unsigned __cdecl QPen_width(QPenH* handle);
extern PACKAGE void __cdecl QPen_setWidth(QPenH* handle, unsigned p1);
extern PACKAGE QColorH* __cdecl QPen_color(QPenH* handle);
extern PACKAGE void __cdecl QPen_setColor(QPenH* handle, QColorH* p1);
extern PACKAGE PenCapStyle __cdecl QPen_capStyle(QPenH* handle);
extern PACKAGE void __cdecl QPen_setCapStyle(QPenH* handle, PenCapStyle p1);
extern PACKAGE PenJoinStyle __cdecl QPen_joinStyle(QPenH* handle);
extern PACKAGE void __cdecl QPen_setJoinStyle(QPenH* handle, PenJoinStyle p1);
extern PACKAGE void __cdecl QPopupMenu_destroy(QPopupMenuH* handle);
extern PACKAGE QPopupMenuH* __cdecl QPopupMenu_create(QWidgetH* parent, char * name);
extern PACKAGE void __cdecl QPopupMenu_popup(QPopupMenuH* handle, Types::PPoint pos, int indexAtPoint);
extern PACKAGE void __cdecl QPopupMenu_updateItem(QPopupMenuH* handle, int id);
extern PACKAGE void __cdecl QPopupMenu_setCheckable(QPopupMenuH* handle, bool p1);
extern PACKAGE bool __cdecl QPopupMenu_isCheckable(QPopupMenuH* handle);
extern PACKAGE void __cdecl QPopupMenu_setFont(QPopupMenuH* handle, QFontH* p1);
extern PACKAGE void __cdecl QPopupMenu_show(QPopupMenuH* handle);
extern PACKAGE void __cdecl QPopupMenu_hide(QPopupMenuH* handle);
extern PACKAGE int __cdecl QPopupMenu_exec(QPopupMenuH* handle)/* overload */;
extern PACKAGE int __cdecl QPopupMenu_exec(QPopupMenuH* handle, Types::PPoint pos, int indexAtPoint)/* overload */;
extern PACKAGE void __cdecl QPopupMenu_setActiveItem(QPopupMenuH* handle, int p1);
extern PACKAGE void __cdecl QPopupMenu_sizeHint(QPopupMenuH* handle, Types::PSize retval);
extern PACKAGE int __cdecl QPopupMenu_idAt(QPopupMenuH* handle, int index)/* overload */;
extern PACKAGE int __cdecl QPopupMenu_idAt(QPopupMenuH* handle, Types::PPoint pos)/* overload */;
extern PACKAGE bool __cdecl QPopupMenu_customWhatsThis(QPopupMenuH* handle);
extern PACKAGE int __cdecl QPopupMenu_insertTearOffHandle(QPopupMenuH* handle, int id, int index);
extern PACKAGE void __cdecl QPopupMenu_activateItemAt(QPopupMenuH* handle, int index);
extern PACKAGE QMenuDataH* __cdecl QPopupMenu_to_QMenuData(QPopupMenuH* handle);
extern PACKAGE void __cdecl QPushButton_destroy(QPushButtonH* handle);
extern PACKAGE QPushButtonH* __cdecl QPushButton_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QPushButtonH* __cdecl QPushButton_create(System::PWideString text, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QPushButtonH* __cdecl QPushButton_create(QIconSetH* icon, System::PWideString text, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QPushButton_sizeHint(QPushButtonH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QPushButton_sizePolicy(QPushButtonH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QPushButton_move(QPushButtonH* handle, int x, int y)/* overload */;
extern PACKAGE void __cdecl QPushButton_move(QPushButtonH* handle, Types::PPoint p)/* overload */;
extern PACKAGE void __cdecl QPushButton_resize(QPushButtonH* handle, int w, int h)/* overload */;
extern PACKAGE void __cdecl QPushButton_resize(QPushButtonH* handle, Types::PSize p1)/* overload */;
extern PACKAGE void __cdecl QPushButton_setGeometry(QPushButtonH* handle, int x, int y, int w, int h)/* overload */;
extern PACKAGE void __cdecl QPushButton_setGeometry(QPushButtonH* handle, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QPushButton_setToggleButton(QPushButtonH* handle, bool p1);
extern PACKAGE bool __cdecl QPushButton_autoDefault(QPushButtonH* handle);
extern PACKAGE void __cdecl QPushButton_setAutoDefault(QPushButtonH* handle, bool autoDef);
extern PACKAGE bool __cdecl QPushButton_isDefault(QPushButtonH* handle);
extern PACKAGE void __cdecl QPushButton_setDefault(QPushButtonH* handle, bool def);
extern PACKAGE void __cdecl QPushButton_setIsMenuButton(QPushButtonH* handle, bool p1);
extern PACKAGE bool __cdecl QPushButton_isMenuButton(QPushButtonH* handle);
extern PACKAGE void __cdecl QPushButton_setPopup(QPushButtonH* handle, QPopupMenuH* popup);
extern PACKAGE QPopupMenuH* __cdecl QPushButton_popup(QPushButtonH* handle);
extern PACKAGE void __cdecl QPushButton_setIconSet(QPushButtonH* handle, QIconSetH* p1);
extern PACKAGE QIconSetH* __cdecl QPushButton_iconSet(QPushButtonH* handle);
extern PACKAGE void __cdecl QPushButton_setFlat(QPushButtonH* handle, bool p1);
extern PACKAGE bool __cdecl QPushButton_isFlat(QPushButtonH* handle);
extern PACKAGE void __cdecl QPushButton_setOn(QPushButtonH* handle, bool p1);
extern PACKAGE void __cdecl QPushButton_toggle(QPushButtonH* handle);
extern PACKAGE void __cdecl QRadioButton_destroy(QRadioButtonH* handle);
extern PACKAGE QRadioButtonH* __cdecl QRadioButton_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QRadioButtonH* __cdecl QRadioButton_create(System::PWideString text, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE bool __cdecl QRadioButton_isChecked(QRadioButtonH* handle);
extern PACKAGE void __cdecl QRadioButton_setChecked(QRadioButtonH* handle, bool check);
extern PACKAGE void __cdecl QRadioButton_sizeHint(QRadioButtonH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QRadioButton_sizePolicy(QRadioButtonH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QScrollBar_destroy(QScrollBarH* handle);
extern PACKAGE QScrollBarH* __cdecl QScrollBar_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QScrollBarH* __cdecl QScrollBar_create(Orientation p1, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QScrollBarH* __cdecl QScrollBar_create(int minValue, int maxValue, int LineStep, int PageStep, int value, Orientation p6, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QScrollBar_setOrientation(QScrollBarH* handle, Orientation p1);
extern PACKAGE Orientation __cdecl QScrollBar_orientation(QScrollBarH* handle);
extern PACKAGE void __cdecl QScrollBar_setTracking(QScrollBarH* handle, bool enable);
extern PACKAGE bool __cdecl QScrollBar_tracking(QScrollBarH* handle);
extern PACKAGE bool __cdecl QScrollBar_draggingSlider(QScrollBarH* handle);
extern PACKAGE void __cdecl QScrollBar_setPalette(QScrollBarH* handle, QPaletteH* p1);
extern PACKAGE void __cdecl QScrollBar_sizeHint(QScrollBarH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QScrollBar_sizePolicy(QScrollBarH* handle, PSizePolicy retval);
extern PACKAGE int __cdecl QScrollBar_minValue(QScrollBarH* handle);
extern PACKAGE int __cdecl QScrollBar_maxValue(QScrollBarH* handle);
extern PACKAGE void __cdecl QScrollBar_setMinValue(QScrollBarH* handle, int p1);
extern PACKAGE void __cdecl QScrollBar_setMaxValue(QScrollBarH* handle, int p1);
extern PACKAGE int __cdecl QScrollBar_lineStep(QScrollBarH* handle);
extern PACKAGE int __cdecl QScrollBar_pageStep(QScrollBarH* handle);
extern PACKAGE void __cdecl QScrollBar_setLineStep(QScrollBarH* handle, int p1);
extern PACKAGE void __cdecl QScrollBar_setPageStep(QScrollBarH* handle, int p1);
extern PACKAGE int __cdecl QScrollBar_value(QScrollBarH* handle);
extern PACKAGE void __cdecl QScrollBar_setValue(QScrollBarH* handle, int p1);
extern PACKAGE QRangeControlH* __cdecl QScrollBar_to_QRangeControl(QScrollBarH* handle);
extern PACKAGE void __cdecl QSizeGrip_destroy(QSizeGripH* handle);
extern PACKAGE QSizeGripH* __cdecl QSizeGrip_create(QWidgetH* parent, char * name);
extern PACKAGE void __cdecl QSizeGrip_sizeHint(QSizeGripH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QSizeGrip_sizePolicy(QSizeGripH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QTableView_setBackgroundColor(QTableViewH* handle, QColorH* p1);
extern PACKAGE void __cdecl QTableView_setPalette(QTableViewH* handle, QPaletteH* p1);
extern PACKAGE void __cdecl QTableView_show(QTableViewH* handle);
extern PACKAGE void __cdecl QTableView_repaint(QTableViewH* handle, bool erase)/* overload */;
extern PACKAGE void __cdecl QTableView_repaint(QTableViewH* handle, int x, int y, int w, int h, bool erase)/* overload */;
extern PACKAGE void __cdecl QTableView_repaint(QTableViewH* handle, Types::PRect p1, bool erase)/* overload */;
extern PACKAGE void __cdecl QTextBrowser_destroy(QTextBrowserH* handle);
extern PACKAGE QTextBrowserH* __cdecl QTextBrowser_create(QWidgetH* parent, char * name);
extern PACKAGE void __cdecl QTextBrowser_setSource(QTextBrowserH* handle, System::PWideString name);
extern PACKAGE void __cdecl QTextBrowser_source(QTextBrowserH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QTextBrowser_setText(QTextBrowserH* handle, System::PWideString contents, System::PWideString context);
extern PACKAGE void __cdecl QTextBrowser_scrollToAnchor(QTextBrowserH* handle, System::PWideString name);
extern PACKAGE void __cdecl QTextBrowser_backward(QTextBrowserH* handle);
extern PACKAGE void __cdecl QTextBrowser_forward(QTextBrowserH* handle);
extern PACKAGE void __cdecl QTextBrowser_home(QTextBrowserH* handle);
extern PACKAGE void __cdecl QTextView_destroy(QTextViewH* handle);
extern PACKAGE QTextViewH* __cdecl QTextView_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QTextViewH* __cdecl QTextView_create(System::PWideString text, System::PWideString context, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QTextView_setText(QTextViewH* handle, System::PWideString text, System::PWideString context)/* overload */;
extern PACKAGE void __cdecl QTextView_setText(QTextViewH* handle, System::PWideString text)/* overload */;
extern PACKAGE void __cdecl QTextView_text(QTextViewH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QTextView_context(QTextViewH* handle, System::PWideString retval);
extern PACKAGE TextFormat __cdecl QTextView_textFormat(QTextViewH* handle);
extern PACKAGE void __cdecl QTextView_setTextFormat(QTextViewH* handle, TextFormat p1);
extern PACKAGE QStyleSheetH* __cdecl QTextView_styleSheet(QTextViewH* handle);
extern PACKAGE void __cdecl QTextView_setStyleSheet(QTextViewH* handle, QStyleSheetH* styleSheet);
extern PACKAGE void __cdecl QTextView_setPaper(QTextViewH* handle, QBrushH* pap);
extern PACKAGE QBrushH* __cdecl QTextView_paper(QTextViewH* handle)/* overload */;
extern PACKAGE void __cdecl QTextView_setPaperColorGroup(QTextViewH* handle, QColorGroupH* colgrp);
extern PACKAGE QColorGroupH* __cdecl QTextView_paperColorGroup(QTextViewH* handle);
extern PACKAGE void __cdecl QTextView_setLinkColor(QTextViewH* handle, QColorH* p1);
extern PACKAGE QColorH* __cdecl QTextView_linkColor(QTextViewH* handle);
extern PACKAGE void __cdecl QTextView_setLinkUnderline(QTextViewH* handle, bool p1);
extern PACKAGE bool __cdecl QTextView_linkUnderline(QTextViewH* handle);
extern PACKAGE void __cdecl QTextView_setMimeSourceFactory(QTextViewH* handle, QMimeSourceFactoryH* factory);
extern PACKAGE QMimeSourceFactoryH* __cdecl QTextView_mimeSourceFactory(QTextViewH* handle);
extern PACKAGE void __cdecl QTextView_documentTitle(QTextViewH* handle, System::PWideString retval);
extern PACKAGE int __cdecl QTextView_heightForWidth(QTextViewH* handle, int w);
extern PACKAGE void __cdecl QTextView_append(QTextViewH* handle, System::PWideString text);
extern PACKAGE bool __cdecl QTextView_hasSelectedText(QTextViewH* handle);
extern PACKAGE void __cdecl QTextView_selectedText(QTextViewH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QTextView_copy(QTextViewH* handle);
extern PACKAGE void __cdecl QTextView_selectAll(QTextViewH* handle);
extern PACKAGE void __cdecl QWhatsThis_destroy(QWhatsThisH* handle);
extern PACKAGE QWhatsThisH* __cdecl QWhatsThis_create(QWidgetH* p1);
extern PACKAGE void __cdecl QWhatsThis_text(QWhatsThisH* handle, System::PWideString retval, Types::PPoint p1);
extern PACKAGE void __cdecl QWhatsThis_add(QWidgetH* p1, System::PWideString p2);
extern PACKAGE void __cdecl QWhatsThis_remove(QWidgetH* p1);
extern PACKAGE void __cdecl QWhatsThis_textFor(System::PWideString retval, QWidgetH* p1, Types::PPoint pos);
extern PACKAGE QToolButtonH* __cdecl QWhatsThis_whatsThisButton(QWidgetH* parent);
extern PACKAGE void __cdecl QWhatsThis_enterWhatsThisMode(void);
extern PACKAGE bool __cdecl QWhatsThis_inWhatsThisMode(void);
extern PACKAGE void __cdecl QWhatsThis_leaveWhatsThisMode(System::PWideString p1, Types::PPoint pos);
extern PACKAGE void __cdecl QWindowsStyle_destroy(QWindowsStyleH* handle);
extern PACKAGE QWindowsStyleH* __cdecl QWindowsStyle_create(void);
extern PACKAGE void __cdecl QWindowsStyle_drawButton(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill);
extern PACKAGE void __cdecl QWindowsStyle_drawBevelButton(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill);
extern PACKAGE void __cdecl QWindowsStyle_drawFocusRect(QWindowsStyleH* handle, QPainterH* p1, Types::PRect p2, QColorGroupH* p3, QColorH* p4, bool p5);
extern PACKAGE void __cdecl QWindowsStyle_drawPushButton(QWindowsStyleH* handle, QPushButtonH* btn, QPainterH* p);
extern PACKAGE void __cdecl QWindowsStyle_getButtonShift(QWindowsStyleH* handle, PInteger x, PInteger y);
extern PACKAGE void __cdecl QWindowsStyle_drawPanel(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* p6, bool sunken, int lineWidth, QBrushH* fill);
extern PACKAGE void __cdecl QWindowsStyle_drawPopupPanel(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* p6, int lineWidth, QBrushH* fill);
extern PACKAGE void __cdecl QWindowsStyle_drawArrow(QWindowsStyleH* handle, QPainterH* p, ArrowType _type, bool down, int x, int y, int w, int h, QColorGroupH* g, bool enabled, QBrushH* fill);
extern PACKAGE void __cdecl QWindowsStyle_indicatorSize(QWindowsStyleH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QWindowsStyle_drawIndicator(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, int s, bool down, bool enabled);
extern PACKAGE void __cdecl QWindowsStyle_exclusiveIndicatorSize(QWindowsStyleH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QWindowsStyle_drawExclusiveIndicator(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool on, bool down, bool enabled);
extern PACKAGE void __cdecl QWindowsStyle_drawExclusiveIndicatorMask(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, bool on);
extern PACKAGE void __cdecl QWindowsStyle_drawComboButton(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, bool editable, bool enabled, QBrushH* fill);
extern PACKAGE void __cdecl QWindowsStyle_comboButtonRect(QWindowsStyleH* handle, Types::PRect retval, int x, int y, int w, int h);
extern PACKAGE void __cdecl QWindowsStyle_comboButtonFocusRect(QWindowsStyleH* handle, Types::PRect retval, int x, int y, int w, int h);
extern PACKAGE void __cdecl QWindowsStyle_tabbarMetrics(QWindowsStyleH* handle, QTabBarH* p1, PInteger p2, PInteger p3, PInteger p4);
extern PACKAGE void __cdecl QWindowsStyle_drawTab(QWindowsStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected);
extern PACKAGE void __cdecl QWindowsStyle_drawTabMask(QWindowsStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected);
extern PACKAGE void __cdecl QWindowsStyle_scrollBarMetrics(QWindowsStyleH* handle, QScrollBarH* p1, PInteger p2, PInteger p3, PInteger p4, PInteger p5);
extern PACKAGE void __cdecl QWindowsStyle_drawScrollBarControls(QWindowsStyleH* handle, QPainterH* p1, QScrollBarH* p2, int sliderStart, unsigned controls, unsigned activeControl);
extern PACKAGE int __cdecl QWindowsStyle_sliderLength(QWindowsStyleH* handle);
extern PACKAGE void __cdecl QWindowsStyle_drawSlider(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, Orientation p7, bool tickAbove, bool tickBelow);
extern PACKAGE void __cdecl QWindowsStyle_drawSliderMask(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, Orientation p6, bool tickAbove, bool tickBelow);
extern PACKAGE void __cdecl QWindowsStyle_drawSliderGroove(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, QCOORD c, Orientation p8);
extern PACKAGE int __cdecl QWindowsStyle_maximumSliderDragDistance(QWindowsStyleH* handle);
extern PACKAGE int __cdecl QWindowsStyle_splitterWidth(QWindowsStyleH* handle);
extern PACKAGE void __cdecl QWindowsStyle_drawSplitter(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, Orientation p7);
extern PACKAGE void __cdecl QWindowsStyle_drawCheckMark(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool act, bool dis);
extern PACKAGE void __cdecl QWindowsStyle_polishPopupMenu(QWindowsStyleH* handle, QPopupMenuH* p1);
extern PACKAGE int __cdecl QWindowsStyle_extraPopupMenuItemWidth(QWindowsStyleH* handle, bool checkable, int maxpmw, QMenuItemH* mi, QFontMetricsH* fm);
extern PACKAGE int __cdecl QWindowsStyle_popupMenuItemHeight(QWindowsStyleH* handle, bool checkable, QMenuItemH* mi, QFontMetricsH* fm);
extern PACKAGE void __cdecl QWindowsStyle_drawPopupMenuItem(QWindowsStyleH* handle, QPainterH* p, bool checkable, int maxpmw, int tab, QMenuItemH* mi, QPaletteH* pal, bool act, bool enabled, int x, int y, int w, int h);
extern PACKAGE void __cdecl QTimer_destroy(QTimerH* handle);
extern PACKAGE QTimerH* __cdecl QTimer_create(QObjectH* parent, char * name);
extern PACKAGE bool __cdecl QTimer_isActive(QTimerH* handle);
extern PACKAGE int __cdecl QTimer_start(QTimerH* handle, int msec, bool sshot);
extern PACKAGE void __cdecl QTimer_changeInterval(QTimerH* handle, int msec);
extern PACKAGE void __cdecl QTimer_stop(QTimerH* handle);
extern PACKAGE void __cdecl QTimer_singleShot(int msec, QObjectH* receiver, char * member);
extern PACKAGE void __cdecl QWorkspace_destroy(QWorkspaceH* handle);
extern PACKAGE QWorkspaceH* __cdecl QWorkspace_create(QWidgetH* parent, char * name);
extern PACKAGE QWidgetH* __cdecl QWorkspace_activeWindow(QWorkspaceH* handle);
extern PACKAGE void __cdecl QWorkspace_sizePolicy(QWorkspaceH* handle, PSizePolicy retval);
extern PACKAGE void __cdecl QWorkspace_sizeHint(QWorkspaceH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QWorkspace_cascade(QWorkspaceH* handle);
extern PACKAGE void __cdecl QWorkspace_tile(QWorkspaceH* handle);
extern PACKAGE void __cdecl QBitmap_destroy(QBitmapH* handle);
extern PACKAGE QBitmapH* __cdecl QBitmap_create(void)/* overload */;
extern PACKAGE QBitmapH* __cdecl QBitmap_create(int w, int h, bool clear, QPixmapOptimization p4)/* overload */;
extern PACKAGE QBitmapH* __cdecl QBitmap_create(Types::PSize p1, bool clear, QPixmapOptimization p3)/* overload */;
extern PACKAGE QBitmapH* __cdecl QBitmap_create(int w, int h, System::PByte bits, bool isXbitmap)/* overload */;
extern PACKAGE QBitmapH* __cdecl QBitmap_create(Types::PSize p1, System::PByte bits, bool isXbitmap)/* overload */;
extern PACKAGE QBitmapH* __cdecl QBitmap_create(QBitmapH* p1)/* overload */;
extern PACKAGE QBitmapH* __cdecl QBitmap_create(System::PWideString fileName, char * format)/* overload */;
extern PACKAGE void __cdecl QBitmap_xForm(QBitmapH* handle, QBitmapH* retval, QWMatrixH* p1);
extern PACKAGE QCursorH* __cdecl QCursor_create(void)/* overload */;
extern PACKAGE QCursorH* __cdecl QCursor_create(int shape)/* overload */;
extern PACKAGE QCursorH* __cdecl QCursor_create(QBitmapH* bitmap, QBitmapH* mask, int hotX, int hotY)/* overload */;
extern PACKAGE QCursorH* __cdecl QCursor_create(QPixmapH* pixmap, int hotX, int hotY)/* overload */;
extern PACKAGE QCursorH* __cdecl QCursor_create(QCursorH* p1)/* overload */;
extern PACKAGE int __cdecl QCursor_shape(QCursorH* handle);
extern PACKAGE void __cdecl QCursor_setShape(QCursorH* handle, int p1);
extern PACKAGE QBitmapH* __cdecl QCursor_bitmap(QCursorH* handle);
extern PACKAGE QBitmapH* __cdecl QCursor_mask(QCursorH* handle);
extern PACKAGE void __cdecl QCursor_hotSpot(QCursorH* handle, Types::PPoint retval);
extern PACKAGE HCURSOR __cdecl QCursor_handle(QCursorH* handle)/* overload */;
extern PACKAGE void __cdecl QCursor_initialize(void);
extern PACKAGE void __cdecl QCursor_cleanup(void);
extern PACKAGE void __cdecl QCursor_destroy(QCursorH* handle);
extern PACKAGE void __cdecl QCursor_pos(Types::PPoint retval);
extern PACKAGE void __cdecl QCursor_setPos(int x, int y)/* overload */;
extern PACKAGE void __cdecl QCursor_setPos(Types::PPoint p1)/* overload */;
extern PACKAGE void __cdecl QFontDatabase_destroy(QFontDatabaseH* handle);
extern PACKAGE QFontDatabaseH* __cdecl QFontDatabase_create(void);
extern PACKAGE void __cdecl QFontDatabase_families(QFontDatabaseH* handle, QStringListH* retval, bool onlyForLocale);
extern PACKAGE void __cdecl QFontDatabase_pointSizes(QFontDatabaseH* handle, PIntArray retval, System::PWideString family, System::PWideString style, System::PWideString charSet);
extern PACKAGE void __cdecl QFontDatabase_styles(QFontDatabaseH* handle, QStringListH* retval, System::PWideString family, System::PWideString charSet);
extern PACKAGE void __cdecl QFontDatabase_charSets(QFontDatabaseH* handle, QStringListH* retval, System::PWideString familyName, bool onlyForLocale)/* overload */;
extern PACKAGE void __cdecl QFontDatabase_font(QFontDatabaseH* handle, QFontH* retval, System::PWideString familyName, System::PWideString style, int pointSize, System::PWideString charSetName);
extern PACKAGE bool __cdecl QFontDatabase_isBitmapScalable(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet);
extern PACKAGE bool __cdecl QFontDatabase_isSmoothlyScalable(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet);
extern PACKAGE bool __cdecl QFontDatabase_isScalable(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet);
extern PACKAGE void __cdecl QFontDatabase_smoothSizes(QFontDatabaseH* handle, PIntArray retval, System::PWideString family, System::PWideString style, System::PWideString charSet);
extern PACKAGE void __cdecl QFontDatabase_standardSizes(PIntArray retval);
extern PACKAGE bool __cdecl QFontDatabase_italic(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet);
extern PACKAGE bool __cdecl QFontDatabase_bold(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet);
extern PACKAGE int __cdecl QFontDatabase_weight(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet);
extern PACKAGE void __cdecl QFontDatabase_styleString(QFontDatabaseH* handle, System::PWideString retval, QFontH* p1);
extern PACKAGE void __cdecl QFontDatabase_verboseCharSetName(System::PWideString retval, System::PWideString charSetName);
extern PACKAGE void __cdecl QFontDatabase_charSetSample(System::PWideString retval, System::PWideString charSetName);
extern PACKAGE void __cdecl QFontInfo_destroy(QFontInfoH* handle);
extern PACKAGE QFontInfoH* __cdecl QFontInfo_create(QFontH* p1)/* overload */;
extern PACKAGE QFontInfoH* __cdecl QFontInfo_create(QFontInfoH* p1)/* overload */;
extern PACKAGE void __cdecl QFontInfo_family(QFontInfoH* handle, System::PWideString retval);
extern PACKAGE int __cdecl QFontInfo_pointSize(QFontInfoH* handle);
extern PACKAGE bool __cdecl QFontInfo_italic(QFontInfoH* handle);
extern PACKAGE int __cdecl QFontInfo_weight(QFontInfoH* handle);
extern PACKAGE bool __cdecl QFontInfo_bold(QFontInfoH* handle);
extern PACKAGE bool __cdecl QFontInfo_underline(QFontInfoH* handle);
extern PACKAGE bool __cdecl QFontInfo_strikeOut(QFontInfoH* handle);
extern PACKAGE bool __cdecl QFontInfo_fixedPitch(QFontInfoH* handle);
extern PACKAGE QFontStyleHint __cdecl QFontInfo_styleHint(QFontInfoH* handle);
extern PACKAGE QFontCharSet __cdecl QFontInfo_charSet(QFontInfoH* handle);
extern PACKAGE bool __cdecl QFontInfo_rawMode(QFontInfoH* handle);
extern PACKAGE bool __cdecl QFontInfo_exactMatch(QFontInfoH* handle);
extern PACKAGE QFontH* __cdecl QFontInfo_font(QFontInfoH* handle);
extern PACKAGE void __cdecl QFontMetrics_destroy(QFontMetricsH* handle);
extern PACKAGE QFontMetricsH* __cdecl QFontMetrics_create(QFontH* p1)/* overload */;
extern PACKAGE QFontMetricsH* __cdecl QFontMetrics_create(QFontMetricsH* p1)/* overload */;
extern PACKAGE int __cdecl QFontMetrics_ascent(QFontMetricsH* handle);
extern PACKAGE int __cdecl QFontMetrics_descent(QFontMetricsH* handle);
extern PACKAGE int __cdecl QFontMetrics_height(QFontMetricsH* handle);
extern PACKAGE int __cdecl QFontMetrics_leading(QFontMetricsH* handle);
extern PACKAGE int __cdecl QFontMetrics_lineSpacing(QFontMetricsH* handle);
extern PACKAGE int __cdecl QFontMetrics_minLeftBearing(QFontMetricsH* handle);
extern PACKAGE int __cdecl QFontMetrics_minRightBearing(QFontMetricsH* handle);
extern PACKAGE int __cdecl QFontMetrics_maxWidth(QFontMetricsH* handle);
extern PACKAGE bool __cdecl QFontMetrics_inFont(QFontMetricsH* handle, wchar_t * p1);
extern PACKAGE int __cdecl QFontMetrics_leftBearing(QFontMetricsH* handle, wchar_t * p1);
extern PACKAGE int __cdecl QFontMetrics_rightBearing(QFontMetricsH* handle, wchar_t * p1);
extern PACKAGE int __cdecl QFontMetrics_width(QFontMetricsH* handle, System::PWideString p1, int len)/* overload */;
extern PACKAGE int __cdecl QFontMetrics_width(QFontMetricsH* handle, wchar_t * p1)/* overload */;
extern PACKAGE int __cdecl QFontMetrics_width(QFontMetricsH* handle, char c)/* overload */;
extern PACKAGE void __cdecl QFontMetrics_boundingRect(QFontMetricsH* handle, Types::PRect retval, System::PWideString p1, int len)/* overload */;
extern PACKAGE void __cdecl QFontMetrics_boundingRect(QFontMetricsH* handle, Types::PRect retval, wchar_t * p1)/* overload */;
extern PACKAGE void __cdecl QFontMetrics_boundingRect(QFontMetricsH* handle, Types::PRect retval, int x, int y, int w, int h, int flags, System::PWideString str, int len, int tabstops, PInteger tabarray, System::PPChar intern)/* overload */;
extern PACKAGE void __cdecl QFontMetrics_size(QFontMetricsH* handle, Types::PSize retval, int flags, System::PWideString str, int len, int tabstops, PInteger tabarray, System::PPChar intern);
extern PACKAGE int __cdecl QFontMetrics_underlinePos(QFontMetricsH* handle);
extern PACKAGE int __cdecl QFontMetrics_strikeOutPos(QFontMetricsH* handle);
extern PACKAGE int __cdecl QFontMetrics_lineWidth(QFontMetricsH* handle);
extern PACKAGE void __cdecl QInputDialog_getText(System::PWideString retval, System::PWideString caption, System::PWideString _label, System::PWideString text, System::PBoolean ok, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QInputDialog_getText(System::PWideString retval, System::PWideString caption, System::PWideString _label, QLineEditEchoMode echo, System::PWideString text, System::PBoolean ok, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE int __cdecl QInputDialog_getInteger(System::PWideString caption, System::PWideString _label, int num, int from, int _to, int step, System::PBoolean ok, QWidgetH* parent, char * name);
extern PACKAGE double __cdecl QInputDialog_getDouble(System::PWideString caption, System::PWideString _label, double num, double from, double _to, int decimals, System::PBoolean ok, QWidgetH* parent, char * name);
extern PACKAGE void __cdecl QInputDialog_getItem(System::PWideString retval, System::PWideString caption, System::PWideString _label, QStringListH* list, int current, bool editable, System::PBoolean ok, QWidgetH* parent, char * name);
extern PACKAGE void __cdecl QIODevice_destroy(QIODeviceH* handle);
extern PACKAGE QIODeviceH* __cdecl QIODevice_create(void);
extern PACKAGE int __cdecl QIODevice_flags(QIODeviceH* handle);
extern PACKAGE int __cdecl QIODevice_mode(QIODeviceH* handle);
extern PACKAGE int __cdecl QIODevice_state(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isDirectAccess(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isSequentialAccess(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isCombinedAccess(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isBuffered(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isRaw(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isSynchronous(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isAsynchronous(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isTranslated(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isReadable(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isWritable(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isReadWrite(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isInactive(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_isOpen(QIODeviceH* handle);
extern PACKAGE int __cdecl QIODevice_status(QIODeviceH* handle);
extern PACKAGE void __cdecl QIODevice_resetStatus(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_open(QIODeviceH* handle, int mode);
extern PACKAGE void __cdecl QIODevice_close(QIODeviceH* handle);
extern PACKAGE void __cdecl QIODevice_flush(QIODeviceH* handle);
extern PACKAGE unsigned __cdecl QIODevice_size(QIODeviceH* handle);
extern PACKAGE int __cdecl QIODevice_at(QIODeviceH* handle)/* overload */;
extern PACKAGE bool __cdecl QIODevice_at(QIODeviceH* handle, int p1)/* overload */;
extern PACKAGE bool __cdecl QIODevice_atEnd(QIODeviceH* handle);
extern PACKAGE bool __cdecl QIODevice_reset(QIODeviceH* handle);
extern PACKAGE int __cdecl QIODevice_readBlock(QIODeviceH* handle, char * data, unsigned maxlen);
extern PACKAGE int __cdecl QIODevice_writeBlock(QIODeviceH* handle, char * data, unsigned len)/* overload */;
extern PACKAGE int __cdecl QIODevice_readLine(QIODeviceH* handle, char * data, unsigned maxlen);
extern PACKAGE int __cdecl QIODevice_writeBlock(QIODeviceH* handle, QByteArrayH* data)/* overload */;
extern PACKAGE void __cdecl QIODevice_readAll(QIODeviceH* handle, QByteArrayH* retval);
extern PACKAGE int __cdecl QIODevice_getch(QIODeviceH* handle);
extern PACKAGE int __cdecl QIODevice_putch(QIODeviceH* handle, int p1);
extern PACKAGE int __cdecl QIODevice_ungetch(QIODeviceH* handle, int p1);
extern PACKAGE void __cdecl QMenuItem_destroy(QMenuItemH* handle);
extern PACKAGE QMenuItemH* __cdecl QMenuItem_create(void);
extern PACKAGE int __cdecl QMenuItem_id(QMenuItemH* handle);
extern PACKAGE QIconSetH* __cdecl QMenuItem_iconSet(QMenuItemH* handle);
extern PACKAGE void __cdecl QMenuItem_text(QMenuItemH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QMenuItem_whatsThis(QMenuItemH* handle, System::PWideString retval);
extern PACKAGE QPixmapH* __cdecl QMenuItem_pixmap(QMenuItemH* handle);
extern PACKAGE QPopupMenuH* __cdecl QMenuItem_popup(QMenuItemH* handle);
extern PACKAGE QWidgetH* __cdecl QMenuItem_widget(QMenuItemH* handle);
extern PACKAGE QCustomMenuItemH* __cdecl QMenuItem_custom(QMenuItemH* handle);
extern PACKAGE int __cdecl QMenuItem_key(QMenuItemH* handle);
extern PACKAGE QSignalH* __cdecl QMenuItem_signal(QMenuItemH* handle);
extern PACKAGE bool __cdecl QMenuItem_isSeparator(QMenuItemH* handle);
extern PACKAGE bool __cdecl QMenuItem_isEnabled(QMenuItemH* handle);
extern PACKAGE bool __cdecl QMenuItem_isChecked(QMenuItemH* handle);
extern PACKAGE bool __cdecl QMenuItem_isDirty(QMenuItemH* handle);
extern PACKAGE void __cdecl QMenuItem_setText(QMenuItemH* handle, System::PWideString text);
extern PACKAGE void __cdecl QMenuItem_setDirty(QMenuItemH* handle, bool dirty);
extern PACKAGE void __cdecl QMenuItem_setWhatsThis(QMenuItemH* handle, System::PWideString text);
extern PACKAGE void __cdecl QCustomMenuItem_destroy(QCustomMenuItemH* handle);
extern PACKAGE QCustomMenuItemH* __cdecl QCustomMenuItem_create(void);
extern PACKAGE bool __cdecl QCustomMenuItem_fullSpan(QCustomMenuItemH* handle);
extern PACKAGE bool __cdecl QCustomMenuItem_isSeparator(QCustomMenuItemH* handle);
extern PACKAGE void __cdecl QCustomMenuItem_setFont(QCustomMenuItemH* handle, QFontH* font);
extern PACKAGE void __cdecl QCustomMenuItem_paint(QCustomMenuItemH* handle, QPainterH* p, QColorGroupH* cg, bool act, bool enabled, int x, int y, int w, int h);
extern PACKAGE void __cdecl QCustomMenuItem_sizeHint(QCustomMenuItemH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QMenuData_destroy(QMenuDataH* handle);
extern PACKAGE QMenuDataH* __cdecl QMenuData_create(void);
extern PACKAGE unsigned __cdecl QMenuData_count(QMenuDataH* handle);
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, System::PWideString text, QObjectH* receiver, char * member, int accel, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, System::PWideString text, QObjectH* receiver, char * member, int accel, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QPixmapH* pixmap, QObjectH* receiver, char * member, int accel, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, QPixmapH* pixmap, QObjectH* receiver, char * member, int accel, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, System::PWideString text, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, System::PWideString text, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, System::PWideString text, QPopupMenuH* popup, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, System::PWideString text, QPopupMenuH* popup, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QPixmapH* pixmap, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, QPixmapH* pixmap, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QPixmapH* pixmap, QPopupMenuH* popup, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, QPixmapH* pixmap, QPopupMenuH* popup, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QWidgetH* widget, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, QCustomMenuItemH* custom, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertItem(QMenuDataH* handle, QCustomMenuItemH* custom, int id, int index)/* overload */;
extern PACKAGE int __cdecl QMenuData_insertSeparator(QMenuDataH* handle, int index);
extern PACKAGE void __cdecl QMenuData_removeItem(QMenuDataH* handle, int id);
extern PACKAGE void __cdecl QMenuData_removeItemAt(QMenuDataH* handle, int index);
extern PACKAGE void __cdecl QMenuData_clear(QMenuDataH* handle);
extern PACKAGE int __cdecl QMenuData_accel(QMenuDataH* handle, int id);
extern PACKAGE void __cdecl QMenuData_setAccel(QMenuDataH* handle, int key, int id);
extern PACKAGE QIconSetH* __cdecl QMenuData_iconSet(QMenuDataH* handle, int id);
extern PACKAGE void __cdecl QMenuData_text(QMenuDataH* handle, System::PWideString retval, int id);
extern PACKAGE QPixmapH* __cdecl QMenuData_pixmap(QMenuDataH* handle, int id);
extern PACKAGE void __cdecl QMenuData_setWhatsThis(QMenuDataH* handle, int id, System::PWideString p2);
extern PACKAGE void __cdecl QMenuData_whatsThis(QMenuDataH* handle, System::PWideString retval, int id);
extern PACKAGE void __cdecl QMenuData_changeItem(QMenuDataH* handle, int id, System::PWideString text)/* overload */;
extern PACKAGE void __cdecl QMenuData_changeItem(QMenuDataH* handle, int id, QPixmapH* pixmap)/* overload */;
extern PACKAGE void __cdecl QMenuData_changeItem(QMenuDataH* handle, int id, QIconSetH* icon, System::PWideString text)/* overload */;
extern PACKAGE void __cdecl QMenuData_changeItem(QMenuDataH* handle, int id, QIconSetH* icon, QPixmapH* pixmap)/* overload */;
extern PACKAGE void __cdecl QMenuData_changeItem(QMenuDataH* handle, System::PWideString text, int id)/* overload */;
extern PACKAGE void __cdecl QMenuData_changeItem(QMenuDataH* handle, QPixmapH* pixmap, int id)/* overload */;
extern PACKAGE void __cdecl QMenuData_changeItem(QMenuDataH* handle, QIconSetH* icon, System::PWideString text, int id)/* overload */;
extern PACKAGE bool __cdecl QMenuData_isItemEnabled(QMenuDataH* handle, int id);
extern PACKAGE void __cdecl QMenuData_setItemEnabled(QMenuDataH* handle, int id, bool enable);
extern PACKAGE bool __cdecl QMenuData_isItemChecked(QMenuDataH* handle, int id);
extern PACKAGE void __cdecl QMenuData_setItemChecked(QMenuDataH* handle, int id, bool check);
extern PACKAGE void __cdecl QMenuData_updateItem(QMenuDataH* handle, int id);
extern PACKAGE int __cdecl QMenuData_indexOf(QMenuDataH* handle, int id);
extern PACKAGE int __cdecl QMenuData_idAt(QMenuDataH* handle, int index);
extern PACKAGE void __cdecl QMenuData_setId(QMenuDataH* handle, int index, int id);
extern PACKAGE bool __cdecl QMenuData_connectItem(QMenuDataH* handle, int id, QObjectH* receiver, char * member);
extern PACKAGE bool __cdecl QMenuData_disconnectItem(QMenuDataH* handle, int id, QObjectH* receiver, char * member);
extern PACKAGE bool __cdecl QMenuData_setItemParameter(QMenuDataH* handle, int id, int param);
extern PACKAGE int __cdecl QMenuData_itemParameter(QMenuDataH* handle, int id);
extern PACKAGE QMenuItemH* __cdecl QMenuData_findItem(QMenuDataH* handle, int id)/* overload */;
extern PACKAGE QMenuItemH* __cdecl QMenuData_findItem(QMenuDataH* handle, int id, QMenuDataHH parent)/* overload */;
extern PACKAGE void __cdecl QMenuData_activateItemAt(QMenuDataH* handle, int index);
extern PACKAGE void __cdecl QMimeSource_destroy(QMimeSourceH* mime);
extern PACKAGE char * __cdecl QMimeSource_format(QMimeSourceH* handle, int n);
extern PACKAGE bool __cdecl QMimeSource_provides(QMimeSourceH* handle, char * p1);
extern PACKAGE void __cdecl QMimeSource_encodedData(QMimeSourceH* handle, QByteArrayH* retval, char * p1);
extern PACKAGE void __cdecl QMimeSourceFactory_destroy(QMimeSourceFactoryH* handle);
extern PACKAGE QMimeSourceFactoryH* __cdecl QMimeSourceFactory_create(void);
extern PACKAGE QMimeSourceFactoryH* __cdecl QMimeSourceFactory_defaultFactory(void);
extern PACKAGE void __cdecl QMimeSourceFactory_setDefaultFactory(QMimeSourceFactoryH* p1);
extern PACKAGE QMimeSourceH* __cdecl QMimeSourceFactory_data(QMimeSourceFactoryH* handle, System::PWideString abs_name)/* overload */;
extern PACKAGE void __cdecl QMimeSourceFactory_makeAbsolute(QMimeSourceFactoryH* handle, System::PWideString retval, System::PWideString abs_or_rel_name, System::PWideString context);
extern PACKAGE QMimeSourceH* __cdecl QMimeSourceFactory_data(QMimeSourceFactoryH* handle, System::PWideString abs_or_rel_name, System::PWideString context)/* overload */;
extern PACKAGE void __cdecl QMimeSourceFactory_setText(QMimeSourceFactoryH* handle, System::PWideString abs_name, System::PWideString text);
extern PACKAGE void __cdecl QMimeSourceFactory_setImage(QMimeSourceFactoryH* handle, System::PWideString abs_name, QImageH* im);
extern PACKAGE void __cdecl QMimeSourceFactory_setPixmap(QMimeSourceFactoryH* handle, System::PWideString abs_name, QPixmapH* pm);
extern PACKAGE void __cdecl QMimeSourceFactory_setData(QMimeSourceFactoryH* handle, System::PWideString abs_name, QMimeSourceH* data);
extern PACKAGE void __cdecl QMimeSourceFactory_setFilePath(QMimeSourceFactoryH* handle, QStringListH* p1);
extern PACKAGE void __cdecl QMimeSourceFactory_filePath(QMimeSourceFactoryH* handle, QStringListH* retval);
extern PACKAGE void __cdecl QMimeSourceFactory_addFilePath(QMimeSourceFactoryH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QMimeSourceFactory_setExtensionType(QMimeSourceFactoryH* handle, System::PWideString ext, char * mimetype);
extern PACKAGE int __cdecl QWindowsMime_registerMimeType(char * mime);
extern PACKAGE void __cdecl QPaintDeviceMetrics_destroy(QPaintDeviceMetricsH* handle);
extern PACKAGE QPaintDeviceMetricsH* __cdecl QPaintDeviceMetrics_create(QPaintDeviceH* p1);
extern PACKAGE int __cdecl QPaintDeviceMetrics_width(QPaintDeviceMetricsH* handle);
extern PACKAGE int __cdecl QPaintDeviceMetrics_height(QPaintDeviceMetricsH* handle);
extern PACKAGE int __cdecl QPaintDeviceMetrics_widthMM(QPaintDeviceMetricsH* handle);
extern PACKAGE int __cdecl QPaintDeviceMetrics_heightMM(QPaintDeviceMetricsH* handle);
extern PACKAGE int __cdecl QPaintDeviceMetrics_logicalDpiX(QPaintDeviceMetricsH* handle);
extern PACKAGE int __cdecl QPaintDeviceMetrics_logicalDpiY(QPaintDeviceMetricsH* handle);
extern PACKAGE int __cdecl QPaintDeviceMetrics_numColors(QPaintDeviceMetricsH* handle);
extern PACKAGE int __cdecl QPaintDeviceMetrics_depth(QPaintDeviceMetricsH* handle);
extern PACKAGE void __cdecl QPicture_destroy(QPictureH* handle);
extern PACKAGE QPictureH* __cdecl QPicture_create(int formatVersion);
extern PACKAGE bool __cdecl QPicture_isNull(QPictureH* handle);
extern PACKAGE unsigned __cdecl QPicture_size(QPictureH* handle);
extern PACKAGE char * __cdecl QPicture_data(QPictureH* handle);
extern PACKAGE void __cdecl QPicture_setData(QPictureH* handle, char * data, unsigned size);
extern PACKAGE bool __cdecl QPicture_play(QPictureH* handle, QPainterH* p1);
extern PACKAGE bool __cdecl QPicture_load(QPictureH* handle, System::PWideString fileName);
extern PACKAGE bool __cdecl QPicture_save(QPictureH* handle, System::PWideString fileName);
extern PACKAGE int __cdecl QPixmapCache_cacheLimit(void);
extern PACKAGE void __cdecl QPixmapCache_setCacheLimit(int p1);
extern PACKAGE QPixmapH* __cdecl QPixmapCache_find(System::PWideString key)/* overload */;
extern PACKAGE bool __cdecl QPixmapCache_find(System::PWideString key, QPixmapH* p2)/* overload */;
extern PACKAGE bool __cdecl QPixmapCache_insert(System::PWideString key, QPixmapH* p2)/* overload */;
extern PACKAGE void __cdecl QPixmapCache_clear(void);
extern PACKAGE void __cdecl QPoint_destroy(QPointH* handle);
extern PACKAGE QPointH* __cdecl QPoint_create(void)/* overload */;
extern PACKAGE QPointH* __cdecl QPoint_create(int xpos, int ypos)/* overload */;
extern PACKAGE bool __cdecl QPoint_isNull(QPointH* handle);
extern PACKAGE int __cdecl QPoint_x(QPointH* handle);
extern PACKAGE int __cdecl QPoint_y(QPointH* handle);
extern PACKAGE void __cdecl QPoint_setX(QPointH* handle, int x);
extern PACKAGE void __cdecl QPoint_setY(QPointH* handle, int y);
extern PACKAGE int __cdecl QPoint_manhattanLength(QPointH* handle);
extern PACKAGE QCOORD __cdecl QPoint_rx(QPointH* handle);
extern PACKAGE QCOORD __cdecl QPoint_ry(QPointH* handle);
extern PACKAGE void __cdecl QRangeControl_destroy(QRangeControlH* handle);
extern PACKAGE QRangeControlH* __cdecl QRangeControl_create(void)/* overload */;
extern PACKAGE QRangeControlH* __cdecl QRangeControl_create(int minValue, int maxValue, int lineStep, int pageStep, int value)/* overload */;
extern PACKAGE int __cdecl QRangeControl_value(QRangeControlH* handle);
extern PACKAGE void __cdecl QRangeControl_setValue(QRangeControlH* handle, int p1);
extern PACKAGE void __cdecl QRangeControl_addPage(QRangeControlH* handle);
extern PACKAGE void __cdecl QRangeControl_subtractPage(QRangeControlH* handle);
extern PACKAGE void __cdecl QRangeControl_addLine(QRangeControlH* handle);
extern PACKAGE void __cdecl QRangeControl_subtractLine(QRangeControlH* handle);
extern PACKAGE int __cdecl QRangeControl_minValue(QRangeControlH* handle);
extern PACKAGE int __cdecl QRangeControl_maxValue(QRangeControlH* handle);
extern PACKAGE void __cdecl QRangeControl_setRange(QRangeControlH* handle, int minValue, int maxValue);
extern PACKAGE int __cdecl QRangeControl_lineStep(QRangeControlH* handle);
extern PACKAGE int __cdecl QRangeControl_pageStep(QRangeControlH* handle);
extern PACKAGE void __cdecl QRangeControl_setSteps(QRangeControlH* handle, int line, int page);
extern PACKAGE int __cdecl QRangeControl_bound(QRangeControlH* handle, int p1);
extern PACKAGE void __cdecl QRect_destroy(QRectH* handle);
extern PACKAGE QRectH* __cdecl QRect_create(void)/* overload */;
extern PACKAGE QRectH* __cdecl QRect_create(Types::PPoint topleft, Types::PPoint bottomright)/* overload */;
extern PACKAGE QRectH* __cdecl QRect_create(Types::PPoint topleft, Types::PSize size)/* overload */;
extern PACKAGE QRectH* __cdecl QRect_create(int left, int top, int width, int height)/* overload */;
extern PACKAGE bool __cdecl QRect_isNull(QRectH* handle);
extern PACKAGE bool __cdecl QRect_isEmpty(QRectH* handle);
extern PACKAGE bool __cdecl QRect_isValid(QRectH* handle);
extern PACKAGE void __cdecl QRect_normalize(QRectH* handle, Types::PRect retval);
extern PACKAGE int __cdecl QRect_left(QRectH* handle);
extern PACKAGE int __cdecl QRect_top(QRectH* handle);
extern PACKAGE int __cdecl QRect_right(QRectH* handle);
extern PACKAGE int __cdecl QRect_bottom(QRectH* handle);
extern PACKAGE QCOORD __cdecl QRect_rLeft(QRectH* handle);
extern PACKAGE QCOORD __cdecl QRect_rTop(QRectH* handle);
extern PACKAGE QCOORD __cdecl QRect_rRight(QRectH* handle);
extern PACKAGE QCOORD __cdecl QRect_rBottom(QRectH* handle);
extern PACKAGE int __cdecl QRect_x(QRectH* handle);
extern PACKAGE int __cdecl QRect_y(QRectH* handle);
extern PACKAGE void __cdecl QRect_setLeft(QRectH* handle, int pos);
extern PACKAGE void __cdecl QRect_setTop(QRectH* handle, int pos);
extern PACKAGE void __cdecl QRect_setRight(QRectH* handle, int pos);
extern PACKAGE void __cdecl QRect_setBottom(QRectH* handle, int pos);
extern PACKAGE void __cdecl QRect_setX(QRectH* handle, int x);
extern PACKAGE void __cdecl QRect_setY(QRectH* handle, int y);
extern PACKAGE void __cdecl QRect_topLeft(QRectH* handle, Types::PPoint retval);
extern PACKAGE void __cdecl QRect_bottomRight(QRectH* handle, Types::PPoint retval);
extern PACKAGE void __cdecl QRect_topRight(QRectH* handle, Types::PPoint retval);
extern PACKAGE void __cdecl QRect_bottomLeft(QRectH* handle, Types::PPoint retval);
extern PACKAGE void __cdecl QRect_center(QRectH* handle, Types::PPoint retval);
extern PACKAGE void __cdecl QRect_rect(QRectH* handle, PInteger x, PInteger y, PInteger w, PInteger h);
extern PACKAGE void __cdecl QRect_coords(QRectH* handle, PInteger x1, PInteger y1, PInteger x2, PInteger y2);
extern PACKAGE void __cdecl QRect_moveTopLeft(QRectH* handle, Types::PPoint p);
extern PACKAGE void __cdecl QRect_moveBottomRight(QRectH* handle, Types::PPoint p);
extern PACKAGE void __cdecl QRect_moveTopRight(QRectH* handle, Types::PPoint p);
extern PACKAGE void __cdecl QRect_moveBottomLeft(QRectH* handle, Types::PPoint p);
extern PACKAGE void __cdecl QRect_moveCenter(QRectH* handle, Types::PPoint p);
extern PACKAGE void __cdecl QRect_moveBy(QRectH* handle, int dx, int dy);
extern PACKAGE void __cdecl QRect_setRect(QRectH* handle, int x, int y, int w, int h);
extern PACKAGE void __cdecl QRect_setCoords(QRectH* handle, int x1, int y1, int x2, int y2);
extern PACKAGE void __cdecl QRect_size(QRectH* handle, Types::PSize retval);
extern PACKAGE int __cdecl QRect_width(QRectH* handle);
extern PACKAGE int __cdecl QRect_height(QRectH* handle);
extern PACKAGE void __cdecl QRect_setWidth(QRectH* handle, int w);
extern PACKAGE void __cdecl QRect_setHeight(QRectH* handle, int h);
extern PACKAGE void __cdecl QRect_setSize(QRectH* handle, Types::PSize s);
extern PACKAGE bool __cdecl QRect_contains(QRectH* handle, Types::PPoint p, bool proper)/* overload */;
extern PACKAGE bool __cdecl QRect_contains(QRectH* handle, int x, int y, bool proper)/* overload */;
extern PACKAGE bool __cdecl QRect_contains(QRectH* handle, Types::PRect r, bool proper)/* overload */;
extern PACKAGE void __cdecl QRect_unite(QRectH* handle, Types::PRect retval, Types::PRect r);
extern PACKAGE void __cdecl QRect_intersect(QRectH* handle, Types::PRect retval, Types::PRect r);
extern PACKAGE bool __cdecl QRect_intersects(QRectH* handle, Types::PRect r);
extern PACKAGE void __cdecl QSize_destroy(QSizeH* handle);
extern PACKAGE QSizeH* __cdecl QSize_create(void)/* overload */;
extern PACKAGE QSizeH* __cdecl QSize_create(int w, int h)/* overload */;
extern PACKAGE bool __cdecl QSize_isNull(QSizeH* handle);
extern PACKAGE bool __cdecl QSize_isEmpty(QSizeH* handle);
extern PACKAGE bool __cdecl QSize_isValid(QSizeH* handle);
extern PACKAGE int __cdecl QSize_width(QSizeH* handle);
extern PACKAGE int __cdecl QSize_height(QSizeH* handle);
extern PACKAGE void __cdecl QSize_setWidth(QSizeH* handle, int w);
extern PACKAGE void __cdecl QSize_setHeight(QSizeH* handle, int h);
extern PACKAGE void __cdecl QSize_transpose(QSizeH* handle);
extern PACKAGE void __cdecl QSize_expandedTo(QSizeH* handle, Types::PSize retval, Types::PSize p1);
extern PACKAGE void __cdecl QSize_boundedTo(QSizeH* handle, Types::PSize retval, Types::PSize p1);
extern PACKAGE QCOORD __cdecl QSize_rwidth(QSizeH* handle);
extern PACKAGE QCOORD __cdecl QSize_rheight(QSizeH* handle);
extern PACKAGE void __cdecl QStringList_destroy(QStringListH* handle);
extern PACKAGE QStringListH* __cdecl QStringList_create(void)/* overload */;
extern PACKAGE QStringListH* __cdecl QStringList_create(QStringListH* l)/* overload */;
extern PACKAGE QStringListH* __cdecl QStringList_create(System::PWideString i)/* overload */;
extern PACKAGE QStringListH* __cdecl QStringList_create(char * i)/* overload */;
extern PACKAGE void __cdecl QStringList_fromStrList(QStringListH* retval, QStrListH* p1);
extern PACKAGE void __cdecl QStringList_sort(QStringListH* handle);
extern PACKAGE void __cdecl QStringList_split(QStringListH* retval, System::PWideString sep, System::PWideString str, bool allowEmptyEntries)/* overload */;
extern PACKAGE void __cdecl QStringList_split(QStringListH* retval, wchar_t * sep, System::PWideString str, bool allowEmptyEntries)/* overload */;
extern PACKAGE void __cdecl QStringList_split(QStringListH* retval, QRegExpH* sep, System::PWideString str, bool allowEmptyEntries)/* overload */;
extern PACKAGE void __cdecl QStringList_join(QStringListH* handle, System::PWideString retval, System::PWideString sep);
extern PACKAGE void __cdecl QStringList_grep(QStringListH* handle, QStringListH* retval, System::PWideString str, bool cs)/* overload */;
extern PACKAGE void __cdecl QStringList_grep(QStringListH* handle, QStringListH* retval, QRegExpH* expr)/* overload */;
extern PACKAGE void __cdecl QWMatrix_destroy(QWMatrixH* handle);
extern PACKAGE QWMatrixH* __cdecl QWMatrix_create(void)/* overload */;
extern PACKAGE QWMatrixH* __cdecl QWMatrix_create(double m11, double m12, double m21, double m22, double dx, double dy)/* overload */;
extern PACKAGE void __cdecl QWMatrix_setMatrix(QWMatrixH* handle, double m11, double m12, double m21, double m22, double dx, double dy);
extern PACKAGE double __cdecl QWMatrix_m11(QWMatrixH* handle);
extern PACKAGE double __cdecl QWMatrix_m12(QWMatrixH* handle);
extern PACKAGE double __cdecl QWMatrix_m21(QWMatrixH* handle);
extern PACKAGE double __cdecl QWMatrix_m22(QWMatrixH* handle);
extern PACKAGE double __cdecl QWMatrix_dx(QWMatrixH* handle);
extern PACKAGE double __cdecl QWMatrix_dy(QWMatrixH* handle);
extern PACKAGE void __cdecl QWMatrix_map(QWMatrixH* handle, int x, int y, PInteger tx, PInteger ty)/* overload */;
extern PACKAGE void __cdecl QWMatrix_map(QWMatrixH* handle, double x, double y, System::PDouble tx, System::PDouble ty)/* overload */;
extern PACKAGE void __cdecl QWMatrix_map(QWMatrixH* handle, Types::PPoint retval, Types::PPoint p1)/* overload */;
extern PACKAGE void __cdecl QWMatrix_map(QWMatrixH* handle, Types::PRect retval, Types::PRect p1)/* overload */;
extern PACKAGE void __cdecl QWMatrix_map(QWMatrixH* handle, PPointArray retval, PPointArray p1)/* overload */;
extern PACKAGE void __cdecl QWMatrix_reset(QWMatrixH* handle);
extern PACKAGE QWMatrixH* __cdecl QWMatrix_translate(QWMatrixH* handle, double dx, double dy);
extern PACKAGE QWMatrixH* __cdecl QWMatrix_scale(QWMatrixH* handle, double sx, double sy);
extern PACKAGE QWMatrixH* __cdecl QWMatrix_shear(QWMatrixH* handle, double sh, double sv);
extern PACKAGE QWMatrixH* __cdecl QWMatrix_rotate(QWMatrixH* handle, double a);
extern PACKAGE void __cdecl QWMatrix_invert(QWMatrixH* handle, QWMatrixH* retval, System::PBoolean p1);
extern PACKAGE void __cdecl QClxObjectMap_setAddCallback(void * ptr);
extern PACKAGE void __cdecl QClxObjectMap_setRemoveCallback(void * ptr);
extern PACKAGE void __cdecl QClxObjectMap_add(void * obj, int value);
extern PACKAGE void __cdecl QClxObjectMap_remove(void * obj);
extern PACKAGE int __cdecl QClxObjectMap_find(void * obj);
extern PACKAGE int __cdecl QClxObjectMap_findClxObject(void * obj);
extern PACKAGE void __cdecl QClxIODevice_destroy(QClxIODeviceH* handle);
extern PACKAGE QClxIODeviceH* __cdecl QClxIODevice_create(void * stream);
extern PACKAGE void __cdecl QClxLineEdit_destroy(QClxLineEditH* handle);
extern PACKAGE QClxLineEditH* __cdecl QClxLineEdit_create(QWidgetH* parent, char * name);
extern PACKAGE bool __cdecl QClxLineEdit_autoSelect(QClxLineEditH* handle);
extern PACKAGE void __cdecl QClxLineEdit_setAutoSelect(QClxLineEditH* handle, bool value);
extern PACKAGE bool __cdecl QClxLineEdit_hideSelection(QClxLineEditH* handle);
extern PACKAGE void __cdecl QClxLineEdit_setHideSelection(QClxLineEditH* handle, bool value);
extern PACKAGE void __cdecl QClxLineEdit_clearSelection(QClxLineEditH* handle);
extern PACKAGE void __cdecl QClxLineEdit_resetSelection(QClxLineEditH* handle);
extern PACKAGE int __cdecl QClxLineEdit_selStart(QClxLineEditH* handle);
extern PACKAGE void __cdecl QClxLineEdit_setSelStart(QClxLineEditH* handle, int pos);
extern PACKAGE void __cdecl QClxLineEdit_updateSelection(QClxLineEditH* handle);
extern PACKAGE void __cdecl QClxLineEdit_setSelection(QClxLineEditH* handle, int start, int len);
extern PACKAGE int __cdecl QClxLineEdit_selLen(QClxLineEditH* handle);
extern PACKAGE void __cdecl QClxLineEdit_setMarkedText(QClxLineEditH* handle, System::PWideString s);
extern PACKAGE bool __cdecl QClxLineEdit_hasMarkedText(QClxLineEditH* handle);
extern PACKAGE void __cdecl QClxLineEdit_markedText(QClxLineEditH* handle, System::PWideString retval);
extern PACKAGE bool __cdecl QOpenWidget_event(QOpenWidgetH* handle, QEventH* e);
extern PACKAGE void __cdecl QOpenWidget_mousePressEvent(QOpenWidgetH* handle, QMouseEventH* e);
extern PACKAGE void __cdecl QOpenWidget_mouseReleaseEvent(QOpenWidgetH* handle, QMouseEventH* e);
extern PACKAGE void __cdecl QOpenWidget_mouseDoubleClickEvent(QOpenWidgetH* handle, QMouseEventH* e);
extern PACKAGE void __cdecl QOpenWidget_mouseMoveEvent(QOpenWidgetH* handle, QMouseEventH* e);
extern PACKAGE void __cdecl QOpenWidget_wheelEvent(QOpenWidgetH* handle, QWheelEventH* e);
extern PACKAGE void __cdecl QOpenWidget_keyPressEvent(QOpenWidgetH* handle, QKeyEventH* e);
extern PACKAGE void __cdecl QOpenWidget_keyReleaseEvent(QOpenWidgetH* handle, QKeyEventH* e);
extern PACKAGE void __cdecl QOpenWidget_focusInEvent(QOpenWidgetH* handle, QFocusEventH* e);
extern PACKAGE void __cdecl QOpenWidget_focusOutEvent(QOpenWidgetH* handle, QFocusEventH* e);
extern PACKAGE void __cdecl QOpenWidget_enterEvent(QOpenWidgetH* handle, QEventH* e);
extern PACKAGE void __cdecl QOpenWidget_leaveEvent(QOpenWidgetH* handle, QEventH* e);
extern PACKAGE void __cdecl QOpenWidget_paintEvent(QOpenWidgetH* handle, QPaintEventH* e);
extern PACKAGE void __cdecl QOpenWidget_moveEvent(QOpenWidgetH* handle, QMoveEventH* e);
extern PACKAGE void __cdecl QOpenWidget_resizeEvent(QOpenWidgetH* handle, QResizeEventH* e);
extern PACKAGE void __cdecl QOpenWidget_closeEvent(QOpenWidgetH* handle, QCloseEventH* e);
extern PACKAGE void __cdecl QOpenWidget_dragEnterEvent(QOpenWidgetH* handle, QDragEnterEventH* e);
extern PACKAGE void __cdecl QOpenWidget_dragMoveEvent(QOpenWidgetH* handle, QDragMoveEventH* e);
extern PACKAGE void __cdecl QOpenWidget_dragLeaveEvent(QOpenWidgetH* handle, QDragLeaveEventH* e);
extern PACKAGE void __cdecl QOpenWidget_dropEvent(QOpenWidgetH* handle, QDropEventH* e);
extern PACKAGE void __cdecl QOpenWidget_showEvent(QOpenWidgetH* handle, QShowEventH* e);
extern PACKAGE void __cdecl QOpenWidget_hideEvent(QOpenWidgetH* handle, QHideEventH* e);
extern PACKAGE void __cdecl QOpenWidget_customEvent(QOpenWidgetH* handle, QCustomEventH* e);
extern PACKAGE unsigned __cdecl QOpenWidget_getWState(QOpenWidgetH* handle);
extern PACKAGE void __cdecl QOpenWidget_setWState(QOpenWidgetH* handle, unsigned n);
extern PACKAGE void __cdecl QOpenWidget_clearWState(QOpenWidgetH* handle, unsigned n);
extern PACKAGE int __cdecl QOpenWidget_getWFlags(QOpenWidgetH* handle);
extern PACKAGE void __cdecl QOpenWidget_setWFlags(QOpenWidgetH* handle, int n);
extern PACKAGE void __cdecl QOpenWidget_clearWFlags(QOpenWidgetH* handle, int n);
extern PACKAGE bool __cdecl QOpenWidget_focusNextPrevChild(QOpenWidgetH* handle, bool next);
extern PACKAGE void __cdecl QOpenWidget_updateMask(QOpenWidgetH* handle);
extern PACKAGE int __cdecl QOpenStringList_count(QOpenStringListH* handle);
extern PACKAGE void __cdecl QOpenStringList_value(QOpenStringListH* handle, System::PWideString retval, int index);
extern PACKAGE void __cdecl QOpenStringList_append(QOpenStringListH* handle, System::PWideString value);
extern PACKAGE void __cdecl QClxDrawUtil_DrawItem(QPainterH* p, int x, int y, int w, int h, int flags, QColorGroupH* g, bool enabled, QPixmapH* pixmap, System::PWideString text, int len, QColorH* penColor);
extern PACKAGE void __cdecl QClxDrawUtil_DrawShadeLine(QPainterH* p, int x1, int y1, int x2, int y2, QColorGroupH* g, bool sunken, int lineWidth, int midLineWidth)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawShadeLine(QPainterH* p, Types::PPoint p1, Types::PPoint p2, QColorGroupH* g, bool sunken, int lineWidth, int midLineWidth)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawShadeRect(QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, int lineWidth, int midLineWidth, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawShadeRect(QPainterH* p, Types::PRect r, QColorGroupH* g, bool sunken, int lineWidth, int midLineWidth, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawShadePanel(QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, int lineWidth, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawShadePanel(QPainterH* p, Types::PRect r, QColorGroupH* g, bool sunken, int lineWidth, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawWinButton(QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawWinButton(QPainterH* p, Types::PRect r, QColorGroupH* g, bool sunken, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawWinPanel(QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawWinPanel(QPainterH* p, Types::PRect r, QColorGroupH* g, bool sunken, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawPlainRect(QPainterH* p, int x, int y, int w, int h, QColorH* c, int lineWidth, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QClxDrawUtil_DrawPlainRect(QPainterH* p, Types::PRect r, QColorH* c, int lineWidth, QBrushH* fill)/* overload */;
extern PACKAGE void __cdecl QClxListBoxHooks_destroy(QClxListBoxHooksH* handle);
extern PACKAGE QClxListBoxHooksH* __cdecl QClxListBoxHooks_create(void);
extern PACKAGE void __cdecl QClxListBoxHooks_hook_paint(QClxListBoxHooksH* handle, const System::TMethod paintHook);
extern PACKAGE void __cdecl QClxListBoxHooks_hook_measure(QClxListBoxHooksH* handle, const System::TMethod measureHook);
extern PACKAGE void __cdecl QClxListBoxItem_destroy(QClxListBoxItemH* handle);
extern PACKAGE QClxListBoxItemH* __cdecl QClxListBoxItem_create(System::PWideString text, QClxListBoxHooksH* listBox_hooks, void * d);
extern PACKAGE int __cdecl QClxListBoxItem_width(QClxListBoxItemH* handle, QListBoxH* lb);
extern PACKAGE int __cdecl QClxListBoxItem_height(QClxListBoxItemH* handle, QListBoxH* lb);
extern PACKAGE void * __cdecl QClxListBoxItem_getData(QClxListBoxItemH* handle);
extern PACKAGE void __cdecl QClxListBoxItem_setData(QClxListBoxItemH* handle, void * d);
extern PACKAGE void __cdecl QClxListBoxItem_setCustomHighlighting(QClxListBoxItemH* handle, bool value);
extern PACKAGE void __cdecl QClxListViewHooks_destroy(QClxListViewHooksH* handle);
extern PACKAGE QClxListViewHooksH* __cdecl QClxListViewHooks_create(void);
extern PACKAGE void __cdecl QClxListViewHooks_hook_PaintCell(QClxListViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxListViewHooks_hook_PaintBranches(QClxListViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxListViewHooks_hook_setSelected(QClxListViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxListViewHooks_hook_change(QClxListViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxListViewHooks_hook_changing(QClxListViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxListViewHooks_hook_expanding(QClxListViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxListViewHooks_hook_expanded(QClxListViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxListViewHooks_hook_checked(QClxListViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxListViewHooks_hook_destroyed(QClxListViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxListViewItem_destroy(QClxListViewItemH* handle);
extern PACKAGE QClxListViewItemH* __cdecl QClxListViewItem_create(QListViewH* parent, QListViewItemH* after, QClxListViewHooksH* h)/* overload */;
extern PACKAGE QClxListViewItemH* __cdecl QClxListViewItem_create(QListViewItemH* parent, QListViewItemH* after, QClxListViewHooksH* h)/* overload */;
extern PACKAGE void __cdecl QClxCheckListItem_destroy(QClxCheckListItemH* handle);
extern PACKAGE QClxCheckListItemH* __cdecl QClxCheckListItem_create(QListViewH* parent, System::PWideString text, QCheckListItemType t, QClxListViewHooksH* h)/* overload */;
extern PACKAGE QClxCheckListItemH* __cdecl QClxCheckListItem_create(QListViewItemH* parent, System::PWideString text, QCheckListItemType t, QClxListViewHooksH* h)/* overload */;
extern PACKAGE void __cdecl QClxIconViewHooks_destroy(QClxIconViewHooksH* handle);
extern PACKAGE QClxIconViewHooksH* __cdecl QClxIconViewHooks_create(void);
extern PACKAGE void __cdecl QClxIconViewHooks_hook_PaintItem(QClxIconViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxIconViewHooks_hook_PaintFocus(QClxIconViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxIconViewHooks_hook_setSelected(QClxIconViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxIconViewHooks_hook_change(QClxIconViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxIconViewHooks_hook_changing(QClxIconViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxIconViewHooks_hook_destroyed(QClxIconViewHooksH* handle, const System::TMethod h);
extern PACKAGE void __cdecl QClxIconViewItem_destroy(QClxIconViewItemH* handle);
extern PACKAGE QClxIconViewItemH* __cdecl QClxIconViewItem_create(QIconViewH* parent, QClxIconViewHooksH* h)/* overload */;
extern PACKAGE QClxIconViewItemH* __cdecl QClxIconViewItem_create(QIconViewH* parent, QIconViewItemH* after, QClxIconViewHooksH* h)/* overload */;
extern PACKAGE void __cdecl QClxDragObject_destroy(QClxDragObjectH* handle);
extern PACKAGE QClxDragObjectH* __cdecl QClxDragObject_create(QWidgetH* dragSource, char * name);
extern PACKAGE char * __cdecl QClxDragObject_format(QClxDragObjectH* handle, int n);
extern PACKAGE void __cdecl QClxDragObject_encodedData(QClxDragObjectH* handle, QByteArrayH* retval, char * format);
extern PACKAGE bool __cdecl QClxDragObject_provides(QClxDragObjectH* handle, char * mimeType);
extern PACKAGE void __cdecl QClxDragObject_addFormat(QClxDragObjectH* handle, char * format, QByteArrayH* ByteArray);
extern PACKAGE void __cdecl QOpenComboBox_destroy(QOpenComboBoxH* handle);
extern PACKAGE QOpenComboBoxH* __cdecl QOpenComboBox_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QOpenComboBoxH* __cdecl QOpenComboBox_create(bool rw, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QOpenComboBox_popup(QOpenComboBoxH* handle);
extern PACKAGE void __cdecl QClxBitBtn_destroy(QClxBitBtnH* handle);
extern PACKAGE QClxBitBtnH* __cdecl QClxBitBtn_create(QWidgetH* parent, char * name, const System::TMethod paintCB);
extern PACKAGE void __cdecl QClxMimeSource_destroy(QClxMimeSourceH* handle);
extern PACKAGE QClxMimeSourceH* __cdecl QClxMimeSource_create(void)/* overload */;
extern PACKAGE QClxMimeSourceH* __cdecl QClxMimeSource_create(QMimeSourceH* source)/* overload */;
extern PACKAGE char * __cdecl QClxMimeSource_format(QClxMimeSourceH* handle, int n);
extern PACKAGE void __cdecl QClxMimeSource_encodedData(QClxMimeSourceH* handle, QByteArrayH* retval, char * format);
extern PACKAGE bool __cdecl QClxMimeSource_provides(QClxMimeSourceH* handle, char * mimeType);
extern PACKAGE void __cdecl QClxMimeSource_addFormat(QClxMimeSourceH* handle, char * format, QByteArrayH* ByteArray);
extern PACKAGE void __cdecl QClxMimeSourceFactory_destroy(QClxMimeSourceFactoryH* handle);
extern PACKAGE QClxMimeSourceFactoryH* __cdecl QClxMimeSourceFactory_create(void);
extern PACKAGE void __cdecl QClxMimeSourceFactory_setDataCallBack(QClxMimeSourceFactoryH* handle, const System::TMethod hook);
extern PACKAGE QMimeSourceH* __cdecl QClxMimeSourceFactory_data(QClxMimeSourceFactoryH* handle, System::PWideString abs_name);
extern PACKAGE void __cdecl QClxSlider_destroy(QClxSliderH* handle);
extern PACKAGE QClxSliderH* __cdecl QClxSlider_create(QWidgetH* parent, char * name, const System::TMethod drawTickCB);
extern PACKAGE void __cdecl QClxSlider_drawTicks(QClxSliderH* handle, QPainterH* p, QColorGroupH* cg, int dist, int w, int i);
extern PACKAGE void __cdecl QClxStyleHooks_destroy(QClxStyleHooksH* handle);
extern PACKAGE QClxStyleHooksH* __cdecl QClxStyleHooks_create(void);
extern PACKAGE void __cdecl QClxStyleHooks_hook_polish(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_unPolish(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_polish2(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_unPolish2(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_polish3(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_itemRect(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawItem(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawSeparator(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawRect(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawRectStrong(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawButton(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_buttonRect(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawButtonMask(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawBevelButton(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_bevelButtonRect(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawToolButton(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawToolButton2(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_toolButtonRect(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawPanel(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawPopupPanel(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawArrow(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawExclusiveIndicator(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawExclusiveIndicatorMask(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawIndicatorMask(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawIndicator(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawFocusRect(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawComboButton(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_comboButtonRect(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_comboButtonFocusRect(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawComboButtonMask(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawPushButton(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawPushButtonLabel(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_pushButtonContentsRect(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_tabbarMetrics(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawTab(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawTabMask(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_scrollBarMetrics(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawScrollBarControls(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawSlider(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawSliderMask(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawSliderGroove(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawSliderGrooveMask(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawSplitter(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawCheckMark(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_polishPopupMenu(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_extraPopupMenuItemWidth(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_popupSubmenuIndicatorWidth(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_popupMenuItemHeight(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_drawPopupMenuItem(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyleHooks_hook_StyleDestroyed(QClxStyleHooksH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxStyle_destroy(QClxStyleH* handle);
extern PACKAGE void __cdecl QClxStyle_init(QClxStyleH* handle);
extern PACKAGE QClxStyleH* __cdecl QClxStyle_create(QStyleH* aStyle, QClxStyleHooksH* h)/* overload */;
extern PACKAGE QClxStyleH* __cdecl QClxStyle_create(System::PWideString styleName, QClxStyleHooksH* h)/* overload */;
extern PACKAGE void __cdecl QClxStyle_refresh(QClxStyleH* handle);
extern PACKAGE int __cdecl QClxStyle_defaultFrameWidth(QClxStyleH* handle);
extern PACKAGE void __cdecl QClxStyle_setDefaultFrameWidth(QClxStyleH* handle, int Val);
extern PACKAGE int __cdecl QClxStyle_sliderLength(QClxStyleH* handle);
extern PACKAGE void __cdecl QClxStyle_setSliderLength(QClxStyleH* handle, int Val);
extern PACKAGE int __cdecl QClxStyle_maximumSliderDragDistance(QClxStyleH* handle);
extern PACKAGE void __cdecl QClxStyle_setMaximumSliderDragDistance(QClxStyleH* handle, int Val);
extern PACKAGE int __cdecl QClxStyle_splitterWidth(QClxStyleH* handle);
extern PACKAGE void __cdecl QClxStyle_setSplitterWidth(QClxStyleH* handle, int Val);
extern PACKAGE void __cdecl QClxStyle_scrollBarExtent(QClxStyleH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QClxStyle_setScrollBarExtent(QClxStyleH* handle, Types::PSize Val);
extern PACKAGE void __cdecl QClxStyle_indicatorSize(QClxStyleH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QClxStyle_setIndicatorSize(QClxStyleH* handle, Types::PSize Val);
extern PACKAGE void __cdecl QClxStyle_exclusiveIndicatorSize(QClxStyleH* handle, Types::PSize retval);
extern PACKAGE void __cdecl QClxStyle_setExclusiveIndicatorSize(QClxStyleH* handle, Types::PSize Val);
extern PACKAGE void __cdecl QClxStyle_buttonShift(QClxStyleH* handle, PInteger x, PInteger y);
extern PACKAGE void __cdecl QClxStyle_setButtonShift(QClxStyleH* handle, int x, int y);
extern PACKAGE void __cdecl QClxStyle_scrollBarMetrics(QClxStyleH* handle, QScrollBarH* p1, PInteger p2, PInteger p3, PInteger p4, PInteger p5);
extern PACKAGE void __cdecl QClxStyle_tabbarMetrics(QClxStyleH* handle, QTabBarH* p1, PInteger p2, PInteger p3, PInteger p4);
extern PACKAGE void __cdecl QClxSpinBox_destroy(QClxSpinBoxH* handle);
extern PACKAGE QClxSpinBoxH* __cdecl QClxSpinBox_create(QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QClxSpinBoxH* __cdecl QClxSpinBox_create(int minValue, int maxValue, int step, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE QPushButtonH* __cdecl QClxSpinBox_upButton(QClxSpinBoxH* handle);
extern PACKAGE QPushButtonH* __cdecl QClxSpinBox_downButton(QClxSpinBoxH* handle);
extern PACKAGE QLineEditH* __cdecl QClxSpinBox_editor(QClxSpinBoxH* handle);
extern PACKAGE void __cdecl QOpenScrollView_destroy(QOpenScrollViewH* handle);
extern PACKAGE QOpenScrollViewH* __cdecl QOpenScrollView_create(const System::TMethod scrollBarGeometry_hook, QWidgetH* parent, char * name, int f);
extern PACKAGE void __cdecl QOpenScrollView_resizeContents(QOpenScrollViewH* handle, int w, int h);
extern PACKAGE void __cdecl QOpenScrollView_setVBarGeometry(QOpenScrollViewH* handle, QScrollBarH* vbar, int x, int y, int w, int h);
extern PACKAGE void __cdecl QOpenScrollView_setHBarGeometry(QOpenScrollViewH* handle, QScrollBarH* hbar, int x, int y, int w, int h);
extern PACKAGE void __cdecl QOpenScrollView_getScrollBarGeometry(QOpenScrollViewH* handle, QScrollBarH* sb, PInteger x, PInteger y, PInteger w, PInteger h);
extern PACKAGE void __cdecl QOpenScrollView_setMargins(QOpenScrollViewH* handle, int left, int top, int right, int bottom);
extern PACKAGE int __cdecl QOpenScrollView_leftMargin(QOpenScrollViewH* handle);
extern PACKAGE int __cdecl QOpenScrollView_topMargin(QOpenScrollViewH* handle);
extern PACKAGE int __cdecl QOpenScrollView_rightMargin(QOpenScrollViewH* handle);
extern PACKAGE int __cdecl QOpenScrollView_bottomMargin(QOpenScrollViewH* handle);
extern PACKAGE void __cdecl QClxDesign_setDesignOptions(void);
extern PACKAGE void __cdecl QOpenMultiLineEdit_destroy(QOpenMultiLineEditH* handle);
extern PACKAGE QOpenMultiLineEditH* __cdecl QOpenMultiLineEdit_create(QWidgetH* parent, char * name);
extern PACKAGE bool __cdecl QOpenMultiLineEdit_hasMarkedText(QOpenMultiLineEditH* handle);
extern PACKAGE void __cdecl QOpenMultiLineEdit_markedText(QOpenMultiLineEditH* handle, System::PWideString retval);
extern PACKAGE int __cdecl QOpenMultiLineEdit_textWidth(QOpenMultiLineEditH* handle, int i)/* overload */;
extern PACKAGE int __cdecl QOpenMultiLineEdit_textWidth(QOpenMultiLineEditH* handle, System::PWideString text)/* overload */;
extern PACKAGE void __cdecl QOpenMultiLineEdit_cursorPoint(QOpenMultiLineEditH* handle, Types::PPoint retval);
extern PACKAGE void __cdecl QOpenMultiLineEdit_insert(QOpenMultiLineEditH* handle, System::PWideString text, bool mark);
extern PACKAGE void __cdecl QOpenMultiLineEdit_newLine(QOpenMultiLineEditH* handle);
extern PACKAGE void __cdecl QOpenMultiLineEdit_killLine(QOpenMultiLineEditH* handle);
extern PACKAGE void __cdecl QOpenMultiLineEdit_pageUp(QOpenMultiLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QOpenMultiLineEdit_pageDown(QOpenMultiLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QOpenMultiLineEdit_cursorLeft(QOpenMultiLineEditH* handle, bool mark, bool wrap);
extern PACKAGE void __cdecl QOpenMultiLineEdit_cursorRight(QOpenMultiLineEditH* handle, bool mark, bool wrap);
extern PACKAGE void __cdecl QOpenMultiLineEdit_cursorUp(QOpenMultiLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QOpenMultiLineEdit_cursorDown(QOpenMultiLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QOpenMultiLineEdit_backspace(QOpenMultiLineEditH* handle);
extern PACKAGE void __cdecl QOpenMultiLineEdit_del(QOpenMultiLineEditH* handle);
extern PACKAGE void __cdecl QOpenMultiLineEdit_home(QOpenMultiLineEditH* handle, bool mark);
extern PACKAGE void __cdecl QOpenMultiLineEdit_end(QOpenMultiLineEditH* handle, bool mark);
extern PACKAGE bool __cdecl QOpenMultiLineEdit_getMarkedRegion(QOpenMultiLineEditH* handle, PInteger line1, PInteger col1, PInteger line2, PInteger col2);
extern PACKAGE int __cdecl QOpenMultiLineEdit_lineLength(QOpenMultiLineEditH* handle, int row);
extern PACKAGE char * __cdecl QOpenMultiLineEdit_getString(QOpenMultiLineEditH* handle, int row);
extern PACKAGE void __cdecl QOpenMultiLineEdit_stringShown(QOpenMultiLineEditH* handle, System::PWideString retval, int row);
extern PACKAGE int __cdecl QOpenMultiLineEdit_textLength(QOpenMultiLineEditH* handle);
extern PACKAGE bool __cdecl QOpenMultiLineEdit_isEndOfParagraph(QOpenMultiLineEditH* handle, int row);
extern PACKAGE void __cdecl QOpenMultiLineEdit_getText(QOpenMultiLineEditH* handle, System::PWideString retval);
extern PACKAGE unsigned __cdecl QOpenMultiLineEdit_tableFlags(QOpenMultiLineEditH* handle);
extern PACKAGE bool __cdecl QOpenMultiLineEdit_testTableFlags(QOpenMultiLineEditH* handle, unsigned f);
extern PACKAGE void __cdecl QOpenMultiLineEdit_setTableFlags(QOpenMultiLineEditH* handle, unsigned f);
extern PACKAGE void __cdecl QOpenMultiLineEdit_clearTableFlags(QOpenMultiLineEditH* handle, unsigned f);
extern PACKAGE void __cdecl QClxFileIconProvider_destroy(QClxFileIconProviderH* handle);
extern PACKAGE QClxFileIconProviderH* __cdecl QClxFileIconProvider_create(QObjectH* parent, char * name);
extern PACKAGE QPixmapH* __cdecl QClxFileIconProvider_pixmap(QClxFileIconProviderH* handle, QFileInfoH* p1);
extern PACKAGE void __cdecl QClxFilePreview_destroy(QClxFilePreviewH* handle);
extern PACKAGE void __cdecl QClxFileDialog_destroy(QClxFileDialogH* handle);
extern PACKAGE QClxFileDialogH* __cdecl QClxFileDialog_create(System::PWideString dirName, System::PWideString filter, QWidgetH* parent, char * name, bool modal)/* overload */;
extern PACKAGE QClxFileDialogH* __cdecl QClxFileDialog_create(QWidgetH* parent, char * name, bool modal)/* overload */;
extern PACKAGE QClxFileDialogH* __cdecl QClxFileDialog_create(QWidgetH* parent, bool modal, int f)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_getOpenFileName(System::PWideString retval, System::PWideString initially, System::PWideString filter, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_getOpenFileName(System::PWideString retval, System::PWideString initially, System::PWideString filter, QWidgetH* parent, char * name, System::PWideString caption)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_getSaveFileName(System::PWideString retval, System::PWideString initially, System::PWideString filter, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_getSaveFileName(System::PWideString retval, System::PWideString initially, System::PWideString filter, QWidgetH* parent, char * name, System::PWideString caption)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_getExistingDirectory(System::PWideString retval, System::PWideString dir, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_getExistingDirectory(System::PWideString retval, System::PWideString dir, QWidgetH* parent, char * name, System::PWideString caption)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_getExistingDirectory(System::PWideString retval, System::PWideString dir, QWidgetH* parent, char * name, System::PWideString caption, bool dirOnly)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_getOpenFileNames(QStringListH* retval, System::PWideString filter, System::PWideString dir, QWidgetH* parent, char * name)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_getOpenFileNames(QStringListH* retval, System::PWideString filter, System::PWideString dir, QWidgetH* parent, char * name, System::PWideString caption)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_setIconProvider(QClxFileIconProviderH* p1);
extern PACKAGE QClxFileIconProviderH* __cdecl QClxFileDialog_iconProvider(void);
extern PACKAGE void __cdecl QClxFileDialog_selectedFile(QClxFileDialogH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QClxFileDialog_selectedFilter(QClxFileDialogH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QClxFileDialog_setSelection(QClxFileDialogH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QClxFileDialog_selectAll(QClxFileDialogH* handle, bool b);
extern PACKAGE void __cdecl QClxFileDialog_selectedFiles(QClxFileDialogH* handle, QStringListH* retval);
extern PACKAGE void __cdecl QClxFileDialog_dirPath(QClxFileDialogH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QClxFileDialog_setDir(QClxFileDialogH* handle, QDirH* p1)/* overload */;
extern PACKAGE QDirH* __cdecl QClxFileDialog_dir(QClxFileDialogH* handle);
extern PACKAGE void __cdecl QClxFileDialog_setShowHiddenFiles(QClxFileDialogH* handle, bool s);
extern PACKAGE bool __cdecl QClxFileDialog_showHiddenFiles(QClxFileDialogH* handle);
extern PACKAGE void __cdecl QClxFileDialog_rereadDir(QClxFileDialogH* handle);
extern PACKAGE void __cdecl QClxFileDialog_resortDir(QClxFileDialogH* handle);
extern PACKAGE void __cdecl QClxFileDialog_setMode(QClxFileDialogH* handle, QClxFileDialogMode p1);
extern PACKAGE QClxFileDialogMode __cdecl QClxFileDialog_mode(QClxFileDialogH* handle);
extern PACKAGE void __cdecl QClxFileDialog_setViewMode(QClxFileDialogH* handle, QClxFileDialogViewMode m);
extern PACKAGE QClxFileDialogViewMode __cdecl QClxFileDialog_viewMode(QClxFileDialogH* handle);
extern PACKAGE void __cdecl QClxFileDialog_setPreviewMode(QClxFileDialogH* handle, QClxFileDialogPreviewMode m);
extern PACKAGE QClxFileDialogPreviewMode __cdecl QClxFileDialog_previewMode(QClxFileDialogH* handle);
extern PACKAGE bool __cdecl QClxFileDialog_eventFilter(QClxFileDialogH* handle, QObjectH* p1, QEventH* p2);
extern PACKAGE bool __cdecl QClxFileDialog_isInfoPreviewEnabled(QClxFileDialogH* handle);
extern PACKAGE bool __cdecl QClxFileDialog_isContentsPreviewEnabled(QClxFileDialogH* handle);
extern PACKAGE void __cdecl QClxFileDialog_setInfoPreviewEnabled(QClxFileDialogH* handle, bool p1);
extern PACKAGE void __cdecl QClxFileDialog_setContentsPreviewEnabled(QClxFileDialogH* handle, bool p1);
extern PACKAGE void __cdecl QClxFileDialog_setInfoPreview(QClxFileDialogH* handle, QWidgetH* w, QClxFilePreviewH* preview);
extern PACKAGE void __cdecl QClxFileDialog_setContentsPreview(QClxFileDialogH* handle, QWidgetH* w, QClxFilePreviewH* preview);
extern PACKAGE void __cdecl QClxFileDialog_setEditText(QClxFileDialogH* handle, System::PWideString s);
extern PACKAGE void __cdecl QClxFileDialog_setFilterIndex(QClxFileDialogH* handle, int index);
extern PACKAGE void __cdecl QClxFileDialog_hook_addFile(QClxFileDialogH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxFileDialog_selectedExt(QClxFileDialogH* handle, System::PWideString retval);
extern PACKAGE void __cdecl QClxFileDialog_setDefaultExt(QClxFileDialogH* handle, System::PWideString ext);
extern PACKAGE void __cdecl QClxFileDialog_defaultExt(QClxFileDialogH* handle, System::PWideString retval);
extern PACKAGE bool __cdecl QClxFileDialog_isRegisteredExtension(QClxFileDialogH* handle, System::PWideString ext);
extern PACKAGE void __cdecl QClxFileDialog_done(QClxFileDialogH* handle, int p1);
extern PACKAGE void __cdecl QClxFileDialog_setDir(QClxFileDialogH* handle, System::PWideString p1)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_setFilter(QClxFileDialogH* handle, System::PWideString p1);
extern PACKAGE void __cdecl QClxFileDialog_setFilters(QClxFileDialogH* handle, System::PWideString p1)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_setFilters(QClxFileDialogH* handle, System::PPChar p1)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_setFilters(QClxFileDialogH* handle, QStringListH* p1)/* overload */;
extern PACKAGE void __cdecl QClxFileDialog_show(QClxFileDialogH* handle);
extern PACKAGE int __cdecl QOpenTableView_numRows(QOpenTableViewH* handle);
extern PACKAGE void __cdecl QOpenTableView_setNumRows(QOpenTableViewH* handle, int r);
extern PACKAGE int __cdecl QOpenTableView_numCols(QOpenTableViewH* handle);
extern PACKAGE void __cdecl QOpenTableView_setNumCols(QOpenTableViewH* handle, int c);
extern PACKAGE int __cdecl QOpenTableView_topCell(QOpenTableViewH* handle);
extern PACKAGE void __cdecl QOpenTableView_setTopCell(QOpenTableViewH* handle, int row);
extern PACKAGE int __cdecl QOpenTableView_leftCell(QOpenTableViewH* handle);
extern PACKAGE void __cdecl QOpenTableView_setLeftCell(QOpenTableViewH* handle, int col);
extern PACKAGE void __cdecl QOpenTableView_setTopLeftCell(QOpenTableViewH* handle, int row, int col);
extern PACKAGE int __cdecl QOpenTableView_xOffset(QOpenTableViewH* handle);
extern PACKAGE void __cdecl QOpenTableView_setXOffset(QOpenTableViewH* handle, int xofs);
extern PACKAGE int __cdecl QOpenTableView_yOffset(QOpenTableViewH* handle);
extern PACKAGE void __cdecl QOpenTableView_setYOffset(QOpenTableViewH* handle, int yofs);
extern PACKAGE void __cdecl QOpenTableView_setOffset(QOpenTableViewH* handle, int x, int y, bool updateScrBars);
extern PACKAGE int __cdecl QOpenTableView_cellWidth(QOpenTableViewH* handle, int col)/* overload */;
extern PACKAGE int __cdecl QOpenTableView_cellHeight(QOpenTableViewH* handle, int row)/* overload */;
extern PACKAGE int __cdecl QOpenTableView_cellWidth(QOpenTableViewH* handle)/* overload */;
extern PACKAGE int __cdecl QOpenTableView_cellHeight(QOpenTableViewH* handle)/* overload */;
extern PACKAGE void __cdecl QOpenTableView_setCellWidth(QOpenTableViewH* handle, int w);
extern PACKAGE void __cdecl QOpenTableView_setCellHeight(QOpenTableViewH* handle, int h);
extern PACKAGE int __cdecl QOpenTableView_totalWidth(QOpenTableViewH* handle);
extern PACKAGE int __cdecl QOpenTableView_totalHeight(QOpenTableViewH* handle);
extern PACKAGE unsigned __cdecl QOpenTableView_tableFlags(QOpenTableViewH* handle);
extern PACKAGE bool __cdecl QOpenTableView_testTableFlags(QOpenTableViewH* handle, unsigned f);
extern PACKAGE void __cdecl QOpenTableView_setTableFlags(QOpenTableViewH* handle, unsigned f);
extern PACKAGE void __cdecl QOpenTableView_clearTableFlags(QOpenTableViewH* handle, unsigned f);
extern PACKAGE bool __cdecl QOpenTableView_autoUpdate(QOpenTableViewH* handle);
extern PACKAGE void __cdecl QOpenTableView_setAutoUpdate(QOpenTableViewH* handle, bool b);
extern PACKAGE void __cdecl QOpenTableView_updateCell(QOpenTableViewH* handle, int row, int column, bool erase);
extern PACKAGE void __cdecl QOpenTableView_cellUpdateRect(QOpenTableViewH* handle, Types::PRect retval);
extern PACKAGE void __cdecl QOpenTableView_viewRect(QOpenTableViewH* handle, Types::PRect retval);
extern PACKAGE int __cdecl QOpenTableView_lastRowVisible(QOpenTableViewH* handle);
extern PACKAGE int __cdecl QOpenTableView_lastColVisible(QOpenTableViewH* handle);
extern PACKAGE bool __cdecl QOpenTableView_rowIsVisible(QOpenTableViewH* handle, int row);
extern PACKAGE bool __cdecl QOpenTableView_colIsVisible(QOpenTableViewH* handle, int col);
extern PACKAGE QScrollBarH* __cdecl QOpenTableView_verticalScrollBar(QOpenTableViewH* handle);
extern PACKAGE QScrollBarH* __cdecl QOpenTableView_horizontalScrollBar(QOpenTableViewH* handle);
extern PACKAGE void __cdecl QOpenTableView_scroll(QOpenTableViewH* handle, int xPixels, int yPixels);
extern PACKAGE void __cdecl QOpenTableView_updateScrollBars(QOpenTableViewH* handle);
extern PACKAGE void __cdecl QOpenTableView_updateTableSize(QOpenTableViewH* handle);
extern PACKAGE void __cdecl QObject_hook_destroy(QObject_hookH* handle);
extern PACKAGE QObject_hookH* __cdecl QObject_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QObject_hook_hook_destroyed(QObject_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QSenderObject_hook_destroy(QSenderObject_hookH* handle);
extern PACKAGE QSenderObject_hookH* __cdecl QSenderObject_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QWidget_hook_destroy(QWidget_hookH* handle);
extern PACKAGE QWidget_hookH* __cdecl QWidget_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QApplication_hook_destroy(QApplication_hookH* handle);
extern PACKAGE QApplication_hookH* __cdecl QApplication_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QApplication_hook_hook_lastWindowClosed(QApplication_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QApplication_hook_hook_aboutToQuit(QApplication_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QApplication_hook_hook_guiThreadAwake(QApplication_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QButton_hook_destroy(QButton_hookH* handle);
extern PACKAGE QButton_hookH* __cdecl QButton_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QButton_hook_hook_pressed(QButton_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QButton_hook_hook_released(QButton_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QButton_hook_hook_clicked(QButton_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QButton_hook_hook_toggled(QButton_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QButton_hook_hook_stateChanged(QButton_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QComboBox_hook_destroy(QComboBox_hookH* handle);
extern PACKAGE QComboBox_hookH* __cdecl QComboBox_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QComboBox_hook_hook_activated(QComboBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QComboBox_hook_hook_highlighted(QComboBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QComboBox_hook_hook_activated2(QComboBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QComboBox_hook_hook_highlighted2(QComboBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QComboBox_hook_hook_textChanged(QComboBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QDialog_hook_destroy(QDialog_hookH* handle);
extern PACKAGE QDialog_hookH* __cdecl QDialog_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QDragObject_hook_destroy(QDragObject_hookH* handle);
extern PACKAGE QDragObject_hookH* __cdecl QDragObject_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QStoredDrag_hook_destroy(QStoredDrag_hookH* handle);
extern PACKAGE QStoredDrag_hookH* __cdecl QStoredDrag_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QTextDrag_hook_destroy(QTextDrag_hookH* handle);
extern PACKAGE QTextDrag_hookH* __cdecl QTextDrag_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QImageDrag_hook_destroy(QImageDrag_hookH* handle);
extern PACKAGE QImageDrag_hookH* __cdecl QImageDrag_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QUriDrag_hook_destroy(QUriDrag_hookH* handle);
extern PACKAGE QUriDrag_hookH* __cdecl QUriDrag_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QColorDrag_hook_destroy(QColorDrag_hookH* handle);
extern PACKAGE QColorDrag_hookH* __cdecl QColorDrag_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QEvent_hook_destroy(QEvent_hookH* handle);
extern PACKAGE QEvent_hookH* __cdecl QEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QTimerEvent_hook_destroy(QTimerEvent_hookH* handle);
extern PACKAGE QTimerEvent_hookH* __cdecl QTimerEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QMouseEvent_hook_destroy(QMouseEvent_hookH* handle);
extern PACKAGE QMouseEvent_hookH* __cdecl QMouseEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QWheelEvent_hook_destroy(QWheelEvent_hookH* handle);
extern PACKAGE QWheelEvent_hookH* __cdecl QWheelEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QKeyEvent_hook_destroy(QKeyEvent_hookH* handle);
extern PACKAGE QKeyEvent_hookH* __cdecl QKeyEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QFocusEvent_hook_destroy(QFocusEvent_hookH* handle);
extern PACKAGE QFocusEvent_hookH* __cdecl QFocusEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QPaintEvent_hook_destroy(QPaintEvent_hookH* handle);
extern PACKAGE QPaintEvent_hookH* __cdecl QPaintEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QMoveEvent_hook_destroy(QMoveEvent_hookH* handle);
extern PACKAGE QMoveEvent_hookH* __cdecl QMoveEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QResizeEvent_hook_destroy(QResizeEvent_hookH* handle);
extern PACKAGE QResizeEvent_hookH* __cdecl QResizeEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QCloseEvent_hook_destroy(QCloseEvent_hookH* handle);
extern PACKAGE QCloseEvent_hookH* __cdecl QCloseEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QShowEvent_hook_destroy(QShowEvent_hookH* handle);
extern PACKAGE QShowEvent_hookH* __cdecl QShowEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QHideEvent_hook_destroy(QHideEvent_hookH* handle);
extern PACKAGE QHideEvent_hookH* __cdecl QHideEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QDropEvent_hook_destroy(QDropEvent_hookH* handle);
extern PACKAGE QDropEvent_hookH* __cdecl QDropEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QDragMoveEvent_hook_destroy(QDragMoveEvent_hookH* handle);
extern PACKAGE QDragMoveEvent_hookH* __cdecl QDragMoveEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QDragEnterEvent_hook_destroy(QDragEnterEvent_hookH* handle);
extern PACKAGE QDragEnterEvent_hookH* __cdecl QDragEnterEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QDragResponseEvent_hook_destroy(QDragResponseEvent_hookH* handle);
extern PACKAGE QDragResponseEvent_hookH* __cdecl QDragResponseEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QDragLeaveEvent_hook_destroy(QDragLeaveEvent_hookH* handle);
extern PACKAGE QDragLeaveEvent_hookH* __cdecl QDragLeaveEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QChildEvent_hook_destroy(QChildEvent_hookH* handle);
extern PACKAGE QChildEvent_hookH* __cdecl QChildEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QCustomEvent_hook_destroy(QCustomEvent_hookH* handle);
extern PACKAGE QCustomEvent_hookH* __cdecl QCustomEvent_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QFrame_hook_destroy(QFrame_hookH* handle);
extern PACKAGE QFrame_hookH* __cdecl QFrame_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QIconView_hook_destroy(QIconView_hookH* handle);
extern PACKAGE QIconView_hookH* __cdecl QIconView_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QIconView_hook_hook_selectionChanged(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_selectionChanged2(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_currentChanged(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_clicked(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_clicked2(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_pressed(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_pressed2(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_doubleClicked(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_returnPressed(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_rightButtonClicked(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_rightButtonPressed(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_mouseButtonPressed(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_mouseButtonClicked(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_dropped(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_moved(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_onItem(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_onViewport(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_itemRenamed(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QIconView_hook_hook_itemRenamed2(QIconView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QLCDNumber_hook_destroy(QLCDNumber_hookH* handle);
extern PACKAGE QLCDNumber_hookH* __cdecl QLCDNumber_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QLCDNumber_hook_hook_overflow(QLCDNumber_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QLineEdit_hook_destroy(QLineEdit_hookH* handle);
extern PACKAGE QLineEdit_hookH* __cdecl QLineEdit_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QLineEdit_hook_hook_textChanged(QLineEdit_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QLineEdit_hook_hook_returnPressed(QLineEdit_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_destroy(QListBox_hookH* handle);
extern PACKAGE QListBox_hookH* __cdecl QListBox_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QListBox_hook_hook_highlighted(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_selected(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_highlighted2(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_selected2(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_highlighted3(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_selected3(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_selectionChanged(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_selectionChanged2(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_currentChanged(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_clicked(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_clicked2(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_pressed(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_pressed2(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_doubleClicked(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_returnPressed(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_rightButtonClicked(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_rightButtonPressed(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_mouseButtonPressed(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_mouseButtonClicked(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_onItem(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListBox_hook_hook_onViewport(QListBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListViewItem_hook_destroy(QListViewItem_hookH* handle);
extern PACKAGE QListViewItem_hookH* __cdecl QListViewItem_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QListView_hook_destroy(QListView_hookH* handle);
extern PACKAGE QListView_hookH* __cdecl QListView_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QListView_hook_hook_selectionChanged(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_selectionChanged2(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_currentChanged(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_clicked(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_clicked2(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_pressed(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_pressed2(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_doubleClicked(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_returnPressed(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_rightButtonClicked(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_rightButtonPressed(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_mouseButtonPressed(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_mouseButtonClicked(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_onItem(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_onViewport(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_expanded(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QListView_hook_hook_collapsed(QListView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QCheckListItem_hook_destroy(QCheckListItem_hookH* handle);
extern PACKAGE QCheckListItem_hookH* __cdecl QCheckListItem_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QMenuBar_hook_destroy(QMenuBar_hookH* handle);
extern PACKAGE QMenuBar_hookH* __cdecl QMenuBar_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QMenuBar_hook_hook_activated(QMenuBar_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QMenuBar_hook_hook_highlighted(QMenuBar_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QMessageBox_hook_destroy(QMessageBox_hookH* handle);
extern PACKAGE QMessageBox_hookH* __cdecl QMessageBox_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_hook_destroy(QMultiLineEdit_hookH* handle);
extern PACKAGE QMultiLineEdit_hookH* __cdecl QMultiLineEdit_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QMultiLineEdit_hook_hook_textChanged(QMultiLineEdit_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QMultiLineEdit_hook_hook_returnPressed(QMultiLineEdit_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QMultiLineEdit_hook_hook_undoAvailable(QMultiLineEdit_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QMultiLineEdit_hook_hook_redoAvailable(QMultiLineEdit_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QMultiLineEdit_hook_hook_copyAvailable(QMultiLineEdit_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QScrollView_hook_destroy(QScrollView_hookH* handle);
extern PACKAGE QScrollView_hookH* __cdecl QScrollView_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QScrollView_hook_hook_contentsMoving(QScrollView_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QSlider_hook_destroy(QSlider_hookH* handle);
extern PACKAGE QSlider_hookH* __cdecl QSlider_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QSlider_hook_hook_valueChanged(QSlider_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QSlider_hook_hook_sliderPressed(QSlider_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QSlider_hook_hook_sliderMoved(QSlider_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QSlider_hook_hook_sliderReleased(QSlider_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QSocketNotifier_hook_destroy(QSocketNotifier_hookH* handle);
extern PACKAGE QSocketNotifier_hookH* __cdecl QSocketNotifier_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QSocketNotifier_hook_hook_activated(QSocketNotifier_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QSpinBox_hook_destroy(QSpinBox_hookH* handle);
extern PACKAGE QSpinBox_hookH* __cdecl QSpinBox_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QSpinBox_hook_hook_valueChanged(QSpinBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QSpinBox_hook_hook_valueChanged2(QSpinBox_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QStyle_hook_destroy(QStyle_hookH* handle);
extern PACKAGE QStyle_hookH* __cdecl QStyle_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QTranslator_hook_destroy(QTranslator_hookH* handle);
extern PACKAGE QTranslator_hookH* __cdecl QTranslator_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QBrush_hook_destroy(QBrush_hookH* handle);
extern PACKAGE QBrush_hookH* __cdecl QBrush_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QButtonGroup_hook_destroy(QButtonGroup_hookH* handle);
extern PACKAGE QButtonGroup_hookH* __cdecl QButtonGroup_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QButtonGroup_hook_hook_pressed(QButtonGroup_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QButtonGroup_hook_hook_released(QButtonGroup_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QButtonGroup_hook_hook_clicked(QButtonGroup_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QCheckBox_hook_destroy(QCheckBox_hookH* handle);
extern PACKAGE QCheckBox_hookH* __cdecl QCheckBox_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QClipboard_hook_destroy(QClipboard_hookH* handle);
extern PACKAGE QClipboard_hookH* __cdecl QClipboard_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QClipboard_hook_hook_dataChanged(QClipboard_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QColorDialog_hook_destroy(QColorDialog_hookH* handle);
extern PACKAGE QColorDialog_hookH* __cdecl QColorDialog_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QCommonStyle_hook_destroy(QCommonStyle_hookH* handle);
extern PACKAGE QCommonStyle_hookH* __cdecl QCommonStyle_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QFontDialog_hook_destroy(QFontDialog_hookH* handle);
extern PACKAGE QFontDialog_hookH* __cdecl QFontDialog_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QFontDialog_hook_hook_fontSelected(QFontDialog_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QFontDialog_hook_hook_fontHighlighted(QFontDialog_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QGroupBox_hook_destroy(QGroupBox_hookH* handle);
extern PACKAGE QGroupBox_hookH* __cdecl QGroupBox_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QHeader_hook_destroy(QHeader_hookH* handle);
extern PACKAGE QHeader_hookH* __cdecl QHeader_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QHeader_hook_hook_clicked(QHeader_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QHeader_hook_hook_pressed(QHeader_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QHeader_hook_hook_released(QHeader_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QHeader_hook_hook_sizeChange(QHeader_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QHeader_hook_hook_indexChange(QHeader_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QHeader_hook_hook_sectionClicked(QHeader_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QHeader_hook_hook_moved(QHeader_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QLabel_hook_destroy(QLabel_hookH* handle);
extern PACKAGE QLabel_hookH* __cdecl QLabel_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QPainter_hook_destroy(QPainter_hookH* handle);
extern PACKAGE QPainter_hookH* __cdecl QPainter_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QPen_hook_destroy(QPen_hookH* handle);
extern PACKAGE QPen_hookH* __cdecl QPen_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QPopupMenu_hook_destroy(QPopupMenu_hookH* handle);
extern PACKAGE QPopupMenu_hookH* __cdecl QPopupMenu_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QPopupMenu_hook_hook_activated(QPopupMenu_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QPopupMenu_hook_hook_highlighted(QPopupMenu_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QPopupMenu_hook_hook_activatedRedirect(QPopupMenu_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QPopupMenu_hook_hook_highlightedRedirect(QPopupMenu_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QPopupMenu_hook_hook_aboutToShow(QPopupMenu_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QPopupMenu_hook_hook_aboutToHide(QPopupMenu_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QPushButton_hook_destroy(QPushButton_hookH* handle);
extern PACKAGE QPushButton_hookH* __cdecl QPushButton_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QRadioButton_hook_destroy(QRadioButton_hookH* handle);
extern PACKAGE QRadioButton_hookH* __cdecl QRadioButton_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QScrollBar_hook_destroy(QScrollBar_hookH* handle);
extern PACKAGE QScrollBar_hookH* __cdecl QScrollBar_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QScrollBar_hook_hook_valueChanged(QScrollBar_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QScrollBar_hook_hook_sliderPressed(QScrollBar_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QScrollBar_hook_hook_sliderMoved(QScrollBar_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QScrollBar_hook_hook_sliderReleased(QScrollBar_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QScrollBar_hook_hook_nextLine(QScrollBar_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QScrollBar_hook_hook_prevLine(QScrollBar_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QScrollBar_hook_hook_nextPage(QScrollBar_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QScrollBar_hook_hook_prevPage(QScrollBar_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QSizeGrip_hook_destroy(QSizeGrip_hookH* handle);
extern PACKAGE QSizeGrip_hookH* __cdecl QSizeGrip_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QTableView_hook_destroy(QTableView_hookH* handle);
extern PACKAGE QTableView_hookH* __cdecl QTableView_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QTextBrowser_hook_destroy(QTextBrowser_hookH* handle);
extern PACKAGE QTextBrowser_hookH* __cdecl QTextBrowser_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QTextBrowser_hook_hook_backwardAvailable(QTextBrowser_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QTextBrowser_hook_hook_forwardAvailable(QTextBrowser_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QTextBrowser_hook_hook_highlighted(QTextBrowser_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QTextBrowser_hook_hook_textChanged(QTextBrowser_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QTextView_hook_destroy(QTextView_hookH* handle);
extern PACKAGE QTextView_hookH* __cdecl QTextView_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QWhatsThis_hook_destroy(QWhatsThis_hookH* handle);
extern PACKAGE QWhatsThis_hookH* __cdecl QWhatsThis_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QWindowsStyle_hook_destroy(QWindowsStyle_hookH* handle);
extern PACKAGE QWindowsStyle_hookH* __cdecl QWindowsStyle_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QTimer_hook_destroy(QTimer_hookH* handle);
extern PACKAGE QTimer_hookH* __cdecl QTimer_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QTimer_hook_hook_timeout(QTimer_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QWorkspace_hook_destroy(QWorkspace_hookH* handle);
extern PACKAGE QWorkspace_hookH* __cdecl QWorkspace_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QWorkspace_hook_hook_windowActivated(QWorkspace_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxFileIconProvider_hook_destroy(QClxFileIconProvider_hookH* handle);
extern PACKAGE QClxFileIconProvider_hookH* __cdecl QClxFileIconProvider_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QClxFileDialog_hook_destroy(QClxFileDialog_hookH* handle);
extern PACKAGE QClxFileDialog_hookH* __cdecl QClxFileDialog_hook_create(QObjectH* handle);
extern PACKAGE void __cdecl QClxFileDialog_hook_hook_fileHighlighted(QClxFileDialog_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxFileDialog_hook_hook_fileSelected(QClxFileDialog_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxFileDialog_hook_hook_dirEntered(QClxFileDialog_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxFileDialog_hook_hook_closeRequest(QClxFileDialog_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl QClxFileDialog_hook_hook_filterChanged(QClxFileDialog_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl Qt_hook_hook_events(QObject_hookH* handle, const System::TMethod hook);
extern PACKAGE void __cdecl InitializePAnsiString(void * CCPS, void * COPS, void * IPS, void * FPS);
extern PACKAGE void __cdecl InitializePWideString(void * CUPS, void * UOPS, void * LOPS, void * IPS, void * FPS);
extern PACKAGE void __cdecl InitializePPointArray(void * GPP, void * GPL, void * SPL);
extern PACKAGE void __cdecl InitializePIntArray(void * GPP, void * GPL, void * SPL);
extern PACKAGE void __cdecl bitBlt(QPaintDeviceH* dst, Types::PPoint dp, QPaintDeviceH* src, Types::PRect sr, RasterOp rop)/* overload */;
extern PACKAGE void __cdecl bitBlt(QPaintDeviceH* dst, int dx, int dy, QPaintDeviceH* src, int sx, int sy, int sw, int sh, RasterOp rop, bool IgnoreMask)/* overload */;
extern PACKAGE unsigned __cdecl QClxWidget_MaxWidgetSize(void);
extern PACKAGE void __cdecl QWorkspace_next(QWorkspaceH* workspace);
extern PACKAGE void __cdecl QWorkspace_previous(QWorkspaceH* workspace);
extern PACKAGE void __cdecl setPopupParent(unsigned newPopupParent);
extern PACKAGE bool __cdecl QMimeSource_is_QClxMimeSource(QMimeSourceH* mime);
extern PACKAGE QByteArrayH* __cdecl QByteArray_create(int Size);
extern PACKAGE void __cdecl QByteArray_destroy(QByteArrayH* ba);
extern PACKAGE bool __cdecl QEvent_isQCustomEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQShowEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQTimerEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQMouseEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQWheelEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQKeyEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQFocusEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQPaintEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQMoveEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQResizeEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQCloseEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQHideEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQDropEventEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQDragMoveEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQDragEnterEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQDragResponseEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQDragLeaveEvent(QEventH* e);
extern PACKAGE bool __cdecl QEvent_isQChildEvent(QEventH* e);
extern PACKAGE QObjectListH* __cdecl QObjectList_create(void)/* overload */;
extern PACKAGE QObjectListH* __cdecl QObjectList_create(QObjectListH* list)/* overload */;
extern PACKAGE void __fastcall QObjectList_destroy(QObjectListH* obj);
extern PACKAGE unsigned __cdecl QObjectList_count(QObjectListH* obj);
extern PACKAGE bool __cdecl QObjectList_isEmpty(QObjectListH* obj);
extern PACKAGE bool __cdecl QObjectList_insert(QObjectListH* obj, unsigned i, QObjectH* d);
extern PACKAGE void __fastcall QObjectList_inSort(QObjectListH* obj, QObjectH* d);
extern PACKAGE void __fastcall QObjectList_prepend(QObjectListH* obj, QObjectH* d);
extern PACKAGE void __fastcall QObjectList_append(QObjectListH* obj, QObjectH* d);
extern PACKAGE bool __cdecl QObjectList_remove(QObjectListH* obj, unsigned i)/* overload */;
extern PACKAGE bool __cdecl QObjectList_remove(QObjectListH* obj)/* overload */;
extern PACKAGE bool __cdecl QObjectList_remove(QObjectListH* obj, QObjectH* d)/* overload */;
extern PACKAGE bool __cdecl QObjectList_removeRef(QObjectListH* obj, QObjectH* d);
extern PACKAGE bool __cdecl QObjectList_removeFirst(QObjectListH* obj);
extern PACKAGE bool __cdecl QObjectList_removeLast(QObjectListH* obj);
extern PACKAGE QObjectH* __cdecl QObjectList_take(QObjectListH* obj, unsigned i)/* overload */;
extern PACKAGE QObjectH* __cdecl QObjectList_take(QObjectListH* obj)/* overload */;
extern PACKAGE void __fastcall QObjectList_clear(QObjectListH* obj);
extern PACKAGE void __fastcall QObjectList_sort(QObjectListH* obj);
extern PACKAGE int __cdecl QObjectList_find(QObjectListH* obj, QObjectH* d);
extern PACKAGE int __cdecl QObjectList_findNext(QObjectListH* obj, QObjectH* d);
extern PACKAGE int __cdecl QObjectList_findRef(QObjectListH* obj, QObjectH* d);
extern PACKAGE int __cdecl QObjectList_findNextRef(QObjectListH* obj, QObjectH* d);
extern PACKAGE unsigned __cdecl QObjectList_contains(QObjectListH* obj, QObjectH* d);
extern PACKAGE unsigned __cdecl QObjectList_containsRef(QObjectListH* obj, QObjectH* d);
extern PACKAGE QObjectH* __cdecl QObjectList_at(QObjectListH* obj, unsigned i)/* overload */;
extern PACKAGE int __cdecl QObjectList_at(QObjectListH* obj)/* overload */;
extern PACKAGE QObjectH* __cdecl QObjectList_current(QObjectListH* obj);
extern PACKAGE QObjectH* __cdecl QObjectList_getFirst(QObjectListH* obj);
extern PACKAGE QObjectH* __cdecl QObjectList_getLast(QObjectListH* obj);
extern PACKAGE QObjectH* __cdecl QObjectList_first(QObjectListH* obj);
extern PACKAGE QObjectH* __cdecl QObjectList_last(QObjectListH* obj);
extern PACKAGE QObjectH* __cdecl QObjectList_next(QObjectListH* obj);
extern PACKAGE QObjectH* __cdecl QObjectList_prev(QObjectListH* obj);
extern PACKAGE QWidgetListH* __cdecl QWidgetList_create(void)/* overload */;
extern PACKAGE QWidgetListH* __cdecl QWidgetList_create(QWidgetListH* list)/* overload */;
extern PACKAGE void __cdecl QWidgetList_destroy(QWidgetListH* obj);
extern PACKAGE unsigned __cdecl QWidgetList_count(QWidgetListH* obj);
extern PACKAGE bool __cdecl QWidgetList_insert(QWidgetListH* obj, unsigned i, QWidgetH* d);
extern PACKAGE bool __cdecl QWidgetList_remove(QWidgetListH* obj, unsigned i)/* overload */;
extern PACKAGE bool __cdecl QWidgetList_remove(QWidgetListH* obj, QWidgetH* d)/* overload */;
extern PACKAGE void __cdecl QWidgetList_clear(QWidgetListH* obj);
extern PACKAGE int __cdecl QWidgetList_find(QWidgetListH* obj, QWidgetH* d);
extern PACKAGE int __cdecl QWidgetList_findNext(QWidgetListH* obj, QWidgetH* d);
extern PACKAGE unsigned __cdecl QWidgetList_contains(QWidgetListH* obj, QWidgetH* d);
extern PACKAGE QWidgetH* __cdecl QWidgetList_at(QWidgetListH* obj, unsigned i)/* overload */;
extern PACKAGE QWidgetH* __cdecl QWidgetList_current(QWidgetListH* obj);
extern PACKAGE QWidgetH* __cdecl QWidgetList_first(QWidgetListH* obj);
extern PACKAGE QWidgetH* __cdecl QWidgetList_last(QWidgetListH* obj);
extern PACKAGE QWidgetH* __cdecl QWidgetList_next(QWidgetListH* obj);
extern PACKAGE QWidgetH* __cdecl QWidgetList_prev(QWidgetListH* obj);
extern PACKAGE QBitmapH* __cdecl QBitmap_from_QPixmap(QBitmapH* bm, QPixmapH* pm);
#pragma option push -w-inl
inline void __cdecl Qt_hook_hook_events(QObject_hookH* handle, const System::TMethod hook)
{
	Qt_hook_hook_events(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidget_create(QWidgetH* parent, char * name, int f)
{
	return QWidget_create(parent, name, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_destroy(QWidgetH* handle)
{
	QWidget_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QWidget_winId(QWidgetH* handle)
{
	return QWidget_winId(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setName(QWidgetH* handle, char * name)
{
	QWidget_setName(handle, name);
}
#pragma option pop


#pragma option push -w-inl
inline QStyleH* __cdecl QWidget_style(QWidgetH* handle)
{
	return QWidget_style(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setStyle(QWidgetH* handle, QStyleH* p1)
{
	QWidget_setStyle(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isTopLevel(QWidgetH* handle)
{
	return QWidget_isTopLevel(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isModal(QWidgetH* handle)
{
	return QWidget_isModal(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isPopup(QWidgetH* handle)
{
	return QWidget_isPopup(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isDesktop(QWidgetH* handle)
{
	return QWidget_isDesktop(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isEnabled(QWidgetH* handle)
{
	return QWidget_isEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isEnabledTo(QWidgetH* handle, QWidgetH* p1)
{
	return QWidget_isEnabledTo(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isEnabledToTLW(QWidgetH* handle)
{
	return QWidget_isEnabledToTLW(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setEnabled(QWidgetH* handle, bool p1)
{
	QWidget_setEnabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setDisabled(QWidgetH* handle, bool p1)
{
	QWidget_setDisabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_frameGeometry(QWidgetH* handle, Types::PRect retval)
{
	QWidget_frameGeometry(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_geometry(QWidgetH* handle, Types::PRect retval)
{
	QWidget_geometry(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidget_x(QWidgetH* handle)
{
	return QWidget_x(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidget_y(QWidgetH* handle)
{
	return QWidget_y(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_pos(QWidgetH* handle, Types::PPoint retval)
{
	QWidget_pos(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_frameSize(QWidgetH* handle, Types::PSize retval)
{
	QWidget_frameSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_size(QWidgetH* handle, Types::PSize retval)
{
	QWidget_size(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidget_width(QWidgetH* handle)
{
	return QWidget_width(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidget_height(QWidgetH* handle)
{
	return QWidget_height(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_rect(QWidgetH* handle, Types::PRect retval)
{
	QWidget_rect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_childrenRect(QWidgetH* handle, Types::PRect retval)
{
	QWidget_childrenRect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_childrenRegion(QWidgetH* handle, QRegionH* retval)
{
	QWidget_childrenRegion(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_minimumSize(QWidgetH* handle, Types::PSize retval)
{
	QWidget_minimumSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_maximumSize(QWidgetH* handle, Types::PSize retval)
{
	QWidget_maximumSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidget_minimumWidth(QWidgetH* handle)
{
	return QWidget_minimumWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidget_minimumHeight(QWidgetH* handle)
{
	return QWidget_minimumHeight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidget_maximumWidth(QWidgetH* handle)
{
	return QWidget_maximumWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidget_maximumHeight(QWidgetH* handle)
{
	return QWidget_maximumHeight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMinimumSize(QWidgetH* handle, Types::PSize p1)/* overload */
{
	QWidget_setMinimumSize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMinimumSize(QWidgetH* handle, int minw, int minh)/* overload */
{
	QWidget_setMinimumSize(handle, minw, minh);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMaximumSize(QWidgetH* handle, Types::PSize p1)/* overload */
{
	QWidget_setMaximumSize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMaximumSize(QWidgetH* handle, int maxw, int maxh)/* overload */
{
	QWidget_setMaximumSize(handle, maxw, maxh);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMinimumWidth(QWidgetH* handle, int minw)
{
	QWidget_setMinimumWidth(handle, minw);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMinimumHeight(QWidgetH* handle, int minh)
{
	QWidget_setMinimumHeight(handle, minh);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMaximumWidth(QWidgetH* handle, int maxw)
{
	QWidget_setMaximumWidth(handle, maxw);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMaximumHeight(QWidgetH* handle, int maxh)
{
	QWidget_setMaximumHeight(handle, maxh);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_sizeIncrement(QWidgetH* handle, Types::PSize retval)
{
	QWidget_sizeIncrement(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setSizeIncrement(QWidgetH* handle, Types::PSize p1)/* overload */
{
	QWidget_setSizeIncrement(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setSizeIncrement(QWidgetH* handle, int w, int h)/* overload */
{
	QWidget_setSizeIncrement(handle, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_baseSize(QWidgetH* handle, Types::PSize retval)
{
	QWidget_baseSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setBaseSize(QWidgetH* handle, Types::PSize p1)/* overload */
{
	QWidget_setBaseSize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setBaseSize(QWidgetH* handle, int basew, int baseh)/* overload */
{
	QWidget_setBaseSize(handle, basew, baseh);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setFixedSize(QWidgetH* handle, Types::PSize p1)/* overload */
{
	QWidget_setFixedSize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setFixedSize(QWidgetH* handle, int w, int h)/* overload */
{
	QWidget_setFixedSize(handle, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setFixedWidth(QWidgetH* handle, int w)
{
	QWidget_setFixedWidth(handle, w);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setFixedHeight(QWidgetH* handle, int h)
{
	QWidget_setFixedHeight(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_mapToGlobal(QWidgetH* handle, Types::PPoint retval, Types::PPoint p1)
{
	QWidget_mapToGlobal(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_mapFromGlobal(QWidgetH* handle, Types::PPoint retval, Types::PPoint p1)
{
	QWidget_mapFromGlobal(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_mapToParent(QWidgetH* handle, Types::PPoint retval, Types::PPoint p1)
{
	QWidget_mapToParent(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_mapFromParent(QWidgetH* handle, Types::PPoint retval, Types::PPoint p1)
{
	QWidget_mapFromParent(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_mapTo(QWidgetH* handle, Types::PPoint retval, QWidgetH* p1, Types::PPoint p2)
{
	QWidget_mapTo(handle, retval, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_mapFrom(QWidgetH* handle, Types::PPoint retval, QWidgetH* p1, Types::PPoint p2)
{
	QWidget_mapFrom(handle, retval, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidget_topLevelWidget(QWidgetH* handle)
{
	return QWidget_topLevelWidget(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetBackgroundMode __cdecl QWidget_backgroundMode(QWidgetH* handle)
{
	return QWidget_backgroundMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setBackgroundMode(QWidgetH* handle, QWidgetBackgroundMode p1)
{
	QWidget_setBackgroundMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QWidget_backgroundColor(QWidgetH* handle)
{
	return QWidget_backgroundColor(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QWidget_foregroundColor(QWidgetH* handle)
{
	return QWidget_foregroundColor(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setBackgroundColor(QWidgetH* handle, QColorH* p1)
{
	QWidget_setBackgroundColor(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QWidget_backgroundPixmap(QWidgetH* handle)
{
	return QWidget_backgroundPixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setBackgroundPixmap(QWidgetH* handle, QPixmapH* p1)
{
	QWidget_setBackgroundPixmap(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QColorGroupH* __cdecl QWidget_colorGroup(QWidgetH* handle)
{
	return QWidget_colorGroup(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPaletteH* __cdecl QWidget_palette(QWidgetH* handle)
{
	return QWidget_palette(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_ownPalette(QWidgetH* handle)
{
	return QWidget_ownPalette(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setPalette(QWidgetH* handle, QPaletteH* p1)/* overload */
{
	QWidget_setPalette(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_unsetPalette(QWidgetH* handle)
{
	QWidget_unsetPalette(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_font(QWidgetH* handle, QFontH* retval)
{
	QWidget_font(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_ownFont(QWidgetH* handle)
{
	return QWidget_ownFont(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setFont(QWidgetH* handle, QFontH* p1)/* overload */
{
	QWidget_setFont(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_unsetFont(QWidgetH* handle)
{
	QWidget_unsetFont(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_fontMetrics(QWidgetH* handle, QFontMetricsH* retval)
{
	QWidget_fontMetrics(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_fontInfo(QWidgetH* handle, QFontInfoH* retval)
{
	QWidget_fontInfo(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetPropagationMode __cdecl QWidget_fontPropagation(QWidgetH* handle)
{
	return QWidget_fontPropagation(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setFontPropagation(QWidgetH* handle, QWidgetPropagationMode p1)
{
	QWidget_setFontPropagation(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetPropagationMode __cdecl QWidget_palettePropagation(QWidgetH* handle)
{
	return QWidget_palettePropagation(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setPalettePropagation(QWidgetH* handle, QWidgetPropagationMode p1)
{
	QWidget_setPalettePropagation(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QCursorH* __cdecl QWidget_cursor(QWidgetH* handle)
{
	return QWidget_cursor(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_ownCursor(QWidgetH* handle)
{
	return QWidget_ownCursor(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setCursor(QWidgetH* handle, QCursorH* p1)
{
	QWidget_setCursor(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_unsetCursor(QWidgetH* handle)
{
	QWidget_unsetCursor(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_caption(QWidgetH* handle, System::PWideString retval)
{
	QWidget_caption(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QWidget_icon(QWidgetH* handle)
{
	return QWidget_icon(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_iconText(QWidgetH* handle, System::PWideString retval)
{
	QWidget_iconText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_hasMouseTracking(QWidgetH* handle)
{
	return QWidget_hasMouseTracking(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMask(QWidgetH* handle, QBitmapH* p1)/* overload */
{
	QWidget_setMask(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMask(QWidgetH* handle, QRegionH* p1)/* overload */
{
	QWidget_setMask(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_clearMask(QWidgetH* handle)
{
	QWidget_clearMask(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setCaption(QWidgetH* handle, System::PWideString p1)
{
	QWidget_setCaption(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setIcon(QWidgetH* handle, QPixmapH* p1)
{
	QWidget_setIcon(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setIconText(QWidgetH* handle, System::PWideString p1)
{
	QWidget_setIconText(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setMouseTracking(QWidgetH* handle, bool enable)
{
	QWidget_setMouseTracking(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setFocus(QWidgetH* handle)
{
	QWidget_setFocus(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_clearFocus(QWidgetH* handle)
{
	QWidget_clearFocus(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isActiveWindow(QWidgetH* handle)
{
	return QWidget_isActiveWindow(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setActiveWindow(QWidgetH* handle)
{
	QWidget_setActiveWindow(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isFocusEnabled(QWidgetH* handle)
{
	return QWidget_isFocusEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetFocusPolicy __cdecl QWidget_focusPolicy(QWidgetH* handle)
{
	return QWidget_focusPolicy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setFocusPolicy(QWidgetH* handle, QWidgetFocusPolicy p1)
{
	QWidget_setFocusPolicy(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_hasFocus(QWidgetH* handle)
{
	return QWidget_hasFocus(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setTabOrder(QWidgetH* p1, QWidgetH* p2)
{
	QWidget_setTabOrder(p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setFocusProxy(QWidgetH* handle, QWidgetH* p1)
{
	QWidget_setFocusProxy(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidget_focusProxy(QWidgetH* handle)
{
	return QWidget_focusProxy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_grabMouse(QWidgetH* handle)/* overload */
{
	QWidget_grabMouse(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_grabMouse(QWidgetH* handle, QCursorH* p1)/* overload */
{
	QWidget_grabMouse(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_releaseMouse(QWidgetH* handle)
{
	QWidget_releaseMouse(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_grabKeyboard(QWidgetH* handle)
{
	QWidget_grabKeyboard(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_releaseKeyboard(QWidgetH* handle)
{
	QWidget_releaseKeyboard(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidget_mouseGrabber(void)
{
	return QWidget_mouseGrabber();
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidget_keyboardGrabber(void)
{
	return QWidget_keyboardGrabber();
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isUpdatesEnabled(QWidgetH* handle)
{
	return QWidget_isUpdatesEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_repaintUnclipped(QWidgetH* handle, QRegionH* p1, bool erase)
{
	QWidget_repaintUnclipped(handle, p1, erase);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setUpdatesEnabled(QWidgetH* handle, bool enable)
{
	QWidget_setUpdatesEnabled(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_update(QWidgetH* handle)/* overload */
{
	QWidget_update(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_update(QWidgetH* handle, int x, int y, int w, int h)/* overload */
{
	QWidget_update(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_update(QWidgetH* handle, Types::PRect p1)/* overload */
{
	QWidget_update(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_repaint(QWidgetH* handle)/* overload */
{
	QWidget_repaint(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_repaint(QWidgetH* handle, bool erase)/* overload */
{
	QWidget_repaint(handle, erase);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_repaint(QWidgetH* handle, int x, int y, int w, int h, bool erase)/* overload */
{
	QWidget_repaint(handle, x, y, w, h, erase);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_repaint(QWidgetH* handle, Types::PRect p1, bool erase)/* overload */
{
	QWidget_repaint(handle, p1, erase);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_repaint(QWidgetH* handle, QRegionH* p1, bool erase)/* overload */
{
	QWidget_repaint(handle, p1, erase);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_show(QWidgetH* handle)
{
	QWidget_show(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_hide(QWidgetH* handle)
{
	QWidget_hide(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_iconify(QWidgetH* handle)
{
	QWidget_iconify(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_showMinimized(QWidgetH* handle)
{
	QWidget_showMinimized(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_showMaximized(QWidgetH* handle)
{
	QWidget_showMaximized(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_showFullScreen(QWidgetH* handle)
{
	QWidget_showFullScreen(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_showNormal(QWidgetH* handle)
{
	QWidget_showNormal(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_polish(QWidgetH* handle)
{
	QWidget_polish(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_constPolish(QWidgetH* handle)
{
	QWidget_constPolish(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_close(QWidgetH* handle)/* overload */
{
	return QWidget_close(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_raise(QWidgetH* handle)
{
	QWidget_raise(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_lower(QWidgetH* handle)
{
	QWidget_lower(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_stackUnder(QWidgetH* handle, QWidgetH* p1)
{
	QWidget_stackUnder(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_move(QWidgetH* handle, int x, int y)/* overload */
{
	QWidget_move(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_move(QWidgetH* handle, Types::PPoint p1)/* overload */
{
	QWidget_move(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_resize(QWidgetH* handle, int w, int h)/* overload */
{
	QWidget_resize(handle, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_resize(QWidgetH* handle, Types::PSize p1)/* overload */
{
	QWidget_resize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setGeometry(QWidgetH* handle, int x, int y, int w, int h)/* overload */
{
	QWidget_setGeometry(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setGeometry(QWidgetH* handle, Types::PRect p1)/* overload */
{
	QWidget_setGeometry(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_close(QWidgetH* handle, bool alsoDelete)/* overload */
{
	return QWidget_close(handle, alsoDelete);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isVisible(QWidgetH* handle)
{
	return QWidget_isVisible(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isVisibleTo(QWidgetH* handle, QWidgetH* p1)
{
	return QWidget_isVisibleTo(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isVisibleToTLW(QWidgetH* handle)
{
	return QWidget_isVisibleToTLW(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_visibleRect(QWidgetH* handle, Types::PRect retval)
{
	QWidget_visibleRect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isHidden(QWidgetH* handle)
{
	return QWidget_isHidden(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isMinimized(QWidgetH* handle)
{
	return QWidget_isMinimized(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_isMaximized(QWidgetH* handle)
{
	return QWidget_isMaximized(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_sizeHint(QWidgetH* handle, Types::PSize retval)
{
	QWidget_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_minimumSizeHint(QWidgetH* handle, Types::PSize retval)
{
	QWidget_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_sizePolicy(QWidgetH* handle, PSizePolicy retval)
{
	QWidget_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setSizePolicy(QWidgetH* handle, PSizePolicy p1)
{
	QWidget_setSizePolicy(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidget_heightForWidth(QWidgetH* handle, int p1)
{
	return QWidget_heightForWidth(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_adjustSize(QWidgetH* handle)
{
	QWidget_adjustSize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QLayoutH* __cdecl QWidget_layout(QWidgetH* handle)
{
	return QWidget_layout(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_updateGeometry(QWidgetH* handle)
{
	QWidget_updateGeometry(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_reparent(QWidgetH* handle, QWidgetH* parent, int p2, Types::PPoint p3, bool showIt)/* overload */
{
	QWidget_reparent(handle, parent, p2, p3, showIt);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_reparent(QWidgetH* handle, QWidgetH* parent, Types::PPoint p2, bool showIt)/* overload */
{
	QWidget_reparent(handle, parent, p2, showIt);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_recreate(QWidgetH* handle, QWidgetH* parent, int f, Types::PPoint p, bool showIt)
{
	QWidget_recreate(handle, parent, f, p, showIt);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_erase(QWidgetH* handle)/* overload */
{
	QWidget_erase(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_erase(QWidgetH* handle, int x, int y, int w, int h)/* overload */
{
	QWidget_erase(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_erase(QWidgetH* handle, Types::PRect p1)/* overload */
{
	QWidget_erase(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_erase(QWidgetH* handle, QRegionH* p1)/* overload */
{
	QWidget_erase(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_scroll(QWidgetH* handle, int dx, int dy)/* overload */
{
	QWidget_scroll(handle, dx, dy);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_scroll(QWidgetH* handle, int dx, int dy, Types::PRect p3)/* overload */
{
	QWidget_scroll(handle, dx, dy, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_drawText(QWidgetH* handle, int x, int y, System::PWideString p3)/* overload */
{
	QWidget_drawText(handle, x, y, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_drawText(QWidgetH* handle, Types::PPoint p1, System::PWideString p2)/* overload */
{
	QWidget_drawText(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidget_focusWidget(QWidgetH* handle)
{
	return QWidget_focusWidget(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_microFocusHint(QWidgetH* handle, Types::PRect retval)
{
	QWidget_microFocusHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_acceptDrops(QWidgetH* handle)
{
	return QWidget_acceptDrops(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setAcceptDrops(QWidgetH* handle, bool on)
{
	QWidget_setAcceptDrops(handle, on);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setAutoMask(QWidgetH* handle, bool p1)
{
	QWidget_setAutoMask(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_autoMask(QWidgetH* handle)
{
	return QWidget_autoMask(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setBackgroundOrigin(QWidgetH* handle, QWidgetBackgroundOrigin p1)
{
	QWidget_setBackgroundOrigin(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetBackgroundOrigin __cdecl QWidget_backgroundOrigin(QWidgetH* handle)
{
	return QWidget_backgroundOrigin(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_customWhatsThis(QWidgetH* handle)
{
	return QWidget_customWhatsThis(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidget_parentWidget(QWidgetH* handle)
{
	return QWidget_parentWidget(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_testWState(QWidgetH* handle, unsigned n)
{
	return QWidget_testWState(handle, n);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidget_testWFlags(QWidgetH* handle, int f)
{
	return QWidget_testWFlags(handle, f);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidget_find(unsigned p1)
{
	return QWidget_find(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetMapperH* __cdecl QWidget_wmapper(void)
{
	return QWidget_wmapper();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setPalette(QWidgetH* handle, QPaletteH* p1, bool iReallyMeanIt)/* overload */
{
	QWidget_setPalette(handle, p1, iReallyMeanIt);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_setFont(QWidgetH* handle, QFontH* p1, bool iReallyMeanIt)/* overload */
{
	QWidget_setFont(handle, p1, iReallyMeanIt);
}
#pragma option pop


#pragma option push -w-inl
inline QPaintDeviceH* __cdecl QWidget_to_QPaintDevice(QWidgetH* handle)
{
	return QWidget_to_QPaintDevice(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_argc(QApplicationH* handle)
{
	return QApplication_argc(handle);
}
#pragma option pop


#pragma option push -w-inl
inline System::PPChar __cdecl QApplication_argv(QApplicationH* handle)
{
	return QApplication_argv(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QStyleH* __cdecl QApplication_style(void)
{
	return QApplication_style();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setStyle(QStyleH* p1)
{
	QApplication_setStyle(p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_colorSpec(void)
{
	return QApplication_colorSpec();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setColorSpec(int p1)
{
	QApplication_setColorSpec(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QCursorH* __cdecl QApplication_overrideCursor(void)
{
	return QApplication_overrideCursor();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setOverrideCursor(QCursorH* p1, bool replace)
{
	QApplication_setOverrideCursor(p1, replace);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_restoreOverrideCursor(void)
{
	QApplication_restoreOverrideCursor();
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QApplication_hasGlobalMouseTracking(void)
{
	return QApplication_hasGlobalMouseTracking();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setGlobalMouseTracking(bool enable)
{
	QApplication_setGlobalMouseTracking(enable);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_palette(QPaletteH* retval, QWidgetH* p1)
{
	QApplication_palette(retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setPalette(QPaletteH* p1, bool informWidgets, char * className)
{
	QApplication_setPalette(p1, informWidgets, className);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_font(QFontH* retval, QWidgetH* p1)
{
	QApplication_font(retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setFont(QFontH* p1, bool informWidgets, char * className)
{
	QApplication_setFont(p1, informWidgets, className);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_fontMetrics(QFontMetricsH* retval)
{
	QApplication_fontMetrics(retval);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QApplication_mainWidget(QApplicationH* handle)
{
	return QApplication_mainWidget(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setMainWidget(QApplicationH* handle, QWidgetH* p1)
{
	QApplication_setMainWidget(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_polish(QApplicationH* handle, QWidgetH* p1)
{
	QApplication_polish(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetListH* __cdecl QApplication_allWidgets(void)
{
	return QApplication_allWidgets();
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetListH* __cdecl QApplication_topLevelWidgets(void)
{
	return QApplication_topLevelWidgets();
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QApplication_desktop(void)
{
	return QApplication_desktop();
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QApplication_activePopupWidget(void)
{
	return QApplication_activePopupWidget();
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QApplication_activeModalWidget(void)
{
	return QApplication_activeModalWidget();
}
#pragma option pop


#pragma option push -w-inl
inline QClipboardH* __cdecl QApplication_clipboard(void)
{
	return QApplication_clipboard();
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QApplication_focusWidget(QApplicationH* handle)
{
	return QApplication_focusWidget(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QApplication_activeWindow(QApplicationH* handle)
{
	return QApplication_activeWindow(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QApplication_widgetAt(int x, int y, bool child)/* overload */
{
	return QApplication_widgetAt(x, y, child);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QApplication_widgetAt(Types::PPoint p1, bool child)/* overload */
{
	return QApplication_widgetAt(p1, child);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_exec(QApplicationH* handle)
{
	return QApplication_exec(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_processEvents(QApplicationH* handle)/* overload */
{
	QApplication_processEvents(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_processEvents(QApplicationH* handle, int maxtime)/* overload */
{
	QApplication_processEvents(handle, maxtime);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_processOneEvent(QApplicationH* handle)
{
	QApplication_processOneEvent(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_enter_loop(QApplicationH* handle)
{
	return QApplication_enter_loop(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_exit_loop(QApplicationH* handle)
{
	QApplication_exit_loop(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_loopLevel(QApplicationH* handle)
{
	return QApplication_loopLevel(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_exit(int retcode)
{
	QApplication_exit(retcode);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QApplication_sendEvent(QObjectH* receiver, QEventH* event)
{
	return QApplication_sendEvent(receiver, event);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_postEvent(QObjectH* receiver, QEventH* event)
{
	QApplication_postEvent(receiver, event);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_sendPostedEvents(QObjectH* receiver, int event_type)/* overload */
{
	QApplication_sendPostedEvents(receiver, event_type);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_sendPostedEvents(void)/* overload */
{
	QApplication_sendPostedEvents();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_removePostedEvents(QObjectH* receiver)
{
	QApplication_removePostedEvents(receiver);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QApplication_notify(QApplicationH* handle, QObjectH* p1, QEventH* p2)
{
	return QApplication_notify(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QApplication_startingUp(void)
{
	return QApplication_startingUp();
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QApplication_closingDown(void)
{
	return QApplication_closingDown();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_flushX(void)
{
	QApplication_flushX();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_syncX(void)
{
	QApplication_syncX();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_beep(void)
{
	QApplication_beep();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setDefaultCodec(QApplicationH* handle, QTextCodecH* p1)
{
	QApplication_setDefaultCodec(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QTextCodecH* __cdecl QApplication_defaultCodec(QApplicationH* handle)
{
	return QApplication_defaultCodec(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_installTranslator(QApplicationH* handle, QTranslatorH* p1)
{
	QApplication_installTranslator(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_removeTranslator(QApplicationH* handle, QTranslatorH* p1)
{
	QApplication_removeTranslator(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_translate(QApplicationH* handle, System::PWideString retval, char * p1, char * p2)/* overload */
{
	QApplication_translate(handle, retval, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_translate(QApplicationH* handle, System::PWideString retval, char * p1, char * p2, char * p3)/* overload */
{
	QApplication_translate(handle, retval, p1, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setWinStyleHighlightColor(QColorH* p1)
{
	QApplication_setWinStyleHighlightColor(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QApplication_winStyleHighlightColor(void)
{
	return QApplication_winStyleHighlightColor();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setDesktopSettingsAware(bool p1)
{
	QApplication_setDesktopSettingsAware(p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QApplication_desktopSettingsAware(void)
{
	return QApplication_desktopSettingsAware();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setCursorFlashTime(int p1)
{
	QApplication_setCursorFlashTime(p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_cursorFlashTime(void)
{
	return QApplication_cursorFlashTime();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setDoubleClickInterval(int p1)
{
	QApplication_setDoubleClickInterval(p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_doubleClickInterval(void)
{
	return QApplication_doubleClickInterval();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setWheelScrollLines(int p1)
{
	QApplication_setWheelScrollLines(p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_wheelScrollLines(void)
{
	return QApplication_wheelScrollLines();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setGlobalStrut(Types::PSize p1)
{
	QApplication_setGlobalStrut(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_globalStrut(Types::PSize retval)
{
	QApplication_globalStrut(retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setStartDragTime(int ms)
{
	QApplication_setStartDragTime(ms);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_startDragTime(void)
{
	return QApplication_startDragTime();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setStartDragDistance(int l)
{
	QApplication_setStartDragDistance(l);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_startDragDistance(void)
{
	return QApplication_startDragDistance();
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QApplication_isEffectEnabled(UIEffect p1)
{
	return QApplication_isEffectEnabled(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_setEffectEnabled(UIEffect p1, bool enable)
{
	QApplication_setEffectEnabled(p1, enable);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_do_mouse_down(QApplicationH* handle, void * p1)
{
	QApplication_do_mouse_down(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QApplication_macProcessEvent(QApplicationH* handle, void * p1)
{
	return QApplication_macProcessEvent(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QApplication_winEventFilter(QApplicationH* handle, void * p1)
{
	return QApplication_winEventFilter(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline WindowsVersion __cdecl QApplication_winVersion(void)
{
	return QApplication_winVersion();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_winFocus(QApplicationH* handle, QWidgetH* p1, bool p2)
{
	QApplication_winFocus(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_winMouseButtonUp(void)
{
	QApplication_winMouseButtonUp();
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QApplication_isSessionRestored(QApplicationH* handle)
{
	return QApplication_isSessionRestored(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_sessionId(QApplicationH* handle, System::PWideString retval)
{
	QApplication_sessionId(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_commitData(QApplicationH* handle, QSessionManagerH* sm)
{
	QApplication_commitData(handle, sm);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_saveState(QApplicationH* handle, QSessionManagerH* sm)
{
	QApplication_saveState(handle, sm);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_create_xim(void)
{
	QApplication_create_xim();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_close_xim(void)
{
	QApplication_close_xim();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_wakeUpGuiThread(QApplicationH* handle)
{
	QApplication_wakeUpGuiThread(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_quit(QApplicationH* handle)
{
	QApplication_quit(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_closeAllWindows(QApplicationH* handle)
{
	QApplication_closeAllWindows(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonH* __cdecl QButton_create(QWidgetH* parent, char * name, int f)
{
	return QButton_create(parent, name, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_destroy(QButtonH* handle)
{
	QButton_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_text(QButtonH* handle, System::PWideString retval)
{
	QButton_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_setText(QButtonH* handle, System::PWideString p1)
{
	QButton_setText(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QButton_pixmap(QButtonH* handle)
{
	return QButton_pixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_setPixmap(QButtonH* handle, QPixmapH* p1)
{
	QButton_setPixmap(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QButton_accel(QButtonH* handle)
{
	return QButton_accel(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_setAccel(QButtonH* handle, int p1)
{
	QButton_setAccel(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QButton_isToggleButton(QButtonH* handle)
{
	return QButton_isToggleButton(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonToggleType __cdecl QButton_toggleType(QButtonH* handle)
{
	return QButton_toggleType(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_setDown(QButtonH* handle, bool p1)
{
	QButton_setDown(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QButton_isDown(QButtonH* handle)
{
	return QButton_isDown(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QButton_isOn(QButtonH* handle)
{
	return QButton_isOn(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonToggleState __cdecl QButton_state(QButtonH* handle)
{
	return QButton_state(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QButton_autoResize(QButtonH* handle)
{
	return QButton_autoResize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_setAutoResize(QButtonH* handle, bool p1)
{
	QButton_setAutoResize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QButton_autoRepeat(QButtonH* handle)
{
	return QButton_autoRepeat(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_setAutoRepeat(QButtonH* handle, bool p1)
{
	QButton_setAutoRepeat(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QButton_isExclusiveToggle(QButtonH* handle)
{
	return QButton_isExclusiveToggle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QButton_focusNextPrevChild(QButtonH* handle, bool next)
{
	return QButton_focusNextPrevChild(handle, next);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonGroupH* __cdecl QButton_group(QButtonH* handle)
{
	return QButton_group(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_animateClick(QButtonH* handle)
{
	QButton_animateClick(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_toggle(QButtonH* handle)
{
	QButton_toggle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QComboBoxH* __cdecl QComboBox_create(QWidgetH* parent, char * name)/* overload */
{
	return QComboBox_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_destroy(QComboBoxH* handle)
{
	QComboBox_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QComboBoxH* __cdecl QComboBox_create(bool rw, QWidgetH* parent, char * name)/* overload */
{
	return QComboBox_create(rw, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QComboBox_count(QComboBoxH* handle)
{
	return QComboBox_count(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_insertStringList(QComboBoxH* handle, QStringListH* p1, int index)
{
	QComboBox_insertStringList(handle, p1, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_insertStrList(QComboBoxH* handle, QStrListH* p1, int index)/* overload */
{
	QComboBox_insertStrList(handle, p1, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_insertStrList(QComboBoxH* handle, System::PPChar p1, int numStrings, int index)/* overload */
{
	QComboBox_insertStrList(handle, p1, numStrings, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_insertItem(QComboBoxH* handle, System::PWideString text, int index)/* overload */
{
	QComboBox_insertItem(handle, text, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_insertItem(QComboBoxH* handle, QPixmapH* pixmap, int index)/* overload */
{
	QComboBox_insertItem(handle, pixmap, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_insertItem(QComboBoxH* handle, QPixmapH* pixmap, System::PWideString text, int index)/* overload */
{
	QComboBox_insertItem(handle, pixmap, text, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_removeItem(QComboBoxH* handle, int index)
{
	QComboBox_removeItem(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_clear(QComboBoxH* handle)
{
	QComboBox_clear(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_currentText(QComboBoxH* handle, System::PWideString retval)
{
	QComboBox_currentText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_text(QComboBoxH* handle, System::PWideString retval, int index)
{
	QComboBox_text(handle, retval, index);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QComboBox_pixmap(QComboBoxH* handle, int index)
{
	return QComboBox_pixmap(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_changeItem(QComboBoxH* handle, System::PWideString text, int index)/* overload */
{
	QComboBox_changeItem(handle, text, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_changeItem(QComboBoxH* handle, QPixmapH* pixmap, int index)/* overload */
{
	QComboBox_changeItem(handle, pixmap, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_changeItem(QComboBoxH* handle, QPixmapH* pixmap, System::PWideString text, int index)/* overload */
{
	QComboBox_changeItem(handle, pixmap, text, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QComboBox_currentItem(QComboBoxH* handle)
{
	return QComboBox_currentItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setCurrentItem(QComboBoxH* handle, int index)
{
	QComboBox_setCurrentItem(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QComboBox_autoResize(QComboBoxH* handle)
{
	return QComboBox_autoResize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setAutoResize(QComboBoxH* handle, bool p1)
{
	QComboBox_setAutoResize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_sizeHint(QComboBoxH* handle, Types::PSize retval)
{
	QComboBox_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_sizePolicy(QComboBoxH* handle, PSizePolicy retval)
{
	QComboBox_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setBackgroundColor(QComboBoxH* handle, QColorH* p1)
{
	QComboBox_setBackgroundColor(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setPalette(QComboBoxH* handle, QPaletteH* p1)
{
	QComboBox_setPalette(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setFont(QComboBoxH* handle, QFontH* p1)
{
	QComboBox_setFont(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setEnabled(QComboBoxH* handle, bool p1)
{
	QComboBox_setEnabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setSizeLimit(QComboBoxH* handle, int p1)
{
	QComboBox_setSizeLimit(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QComboBox_sizeLimit(QComboBoxH* handle)
{
	return QComboBox_sizeLimit(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setMaxCount(QComboBoxH* handle, int p1)
{
	QComboBox_setMaxCount(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QComboBox_maxCount(QComboBoxH* handle)
{
	return QComboBox_maxCount(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setInsertionPolicy(QComboBoxH* handle, QComboBoxPolicy policy)
{
	QComboBox_setInsertionPolicy(handle, policy);
}
#pragma option pop


#pragma option push -w-inl
inline QComboBoxPolicy __cdecl QComboBox_insertionPolicy(QComboBoxH* handle)
{
	return QComboBox_insertionPolicy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setValidator(QComboBoxH* handle, QValidatorH* p1)
{
	QComboBox_setValidator(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QValidatorH* __cdecl QComboBox_validator(QComboBoxH* handle)
{
	return QComboBox_validator(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setListBox(QComboBoxH* handle, QListBoxH* p1)
{
	QComboBox_setListBox(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxH* __cdecl QComboBox_listBox(QComboBoxH* handle)
{
	return QComboBox_listBox(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QLineEditH* __cdecl QComboBox_lineEdit(QComboBoxH* handle)
{
	return QComboBox_lineEdit(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setAutoCompletion(QComboBoxH* handle, bool p1)
{
	QComboBox_setAutoCompletion(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QComboBox_autoCompletion(QComboBoxH* handle)
{
	return QComboBox_autoCompletion(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QComboBox_eventFilter(QComboBoxH* handle, QObjectH* AnObject, QEventH* event)
{
	return QComboBox_eventFilter(handle, AnObject, event);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setDuplicatesEnabled(QComboBoxH* handle, bool enable)
{
	QComboBox_setDuplicatesEnabled(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QComboBox_duplicatesEnabled(QComboBoxH* handle)
{
	return QComboBox_duplicatesEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QComboBox_editable(QComboBoxH* handle)
{
	return QComboBox_editable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setEditable(QComboBoxH* handle, bool p1)
{
	QComboBox_setEditable(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_clearValidator(QComboBoxH* handle)
{
	QComboBox_clearValidator(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_clearEdit(QComboBoxH* handle)
{
	QComboBox_clearEdit(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_setEditText(QComboBoxH* handle, System::PWideString p1)
{
	QComboBox_setEditText(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QDialogH* __cdecl QDialog_create(QWidgetH* parent, char * name, bool modal, int f)
{
	return QDialog_create(parent, name, modal, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_destroy(QDialogH* handle)
{
	QDialog_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QDialog_exec(QDialogH* handle)
{
	return QDialog_exec(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QDialog_result(QDialogH* handle)
{
	return QDialog_result(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_show(QDialogH* handle)
{
	QDialog_show(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_hide(QDialogH* handle)
{
	QDialog_hide(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_move(QDialogH* handle, int x, int y)/* overload */
{
	QDialog_move(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_move(QDialogH* handle, Types::PPoint p)/* overload */
{
	QDialog_move(handle, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_resize(QDialogH* handle, int w, int h)/* overload */
{
	QDialog_resize(handle, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_resize(QDialogH* handle, Types::PSize p1)/* overload */
{
	QDialog_resize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_setGeometry(QDialogH* handle, int x, int y, int w, int h)/* overload */
{
	QDialog_setGeometry(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_setGeometry(QDialogH* handle, Types::PRect p1)/* overload */
{
	QDialog_setGeometry(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_setOrientation(QDialogH* handle, Orientation orientation)
{
	QDialog_setOrientation(handle, orientation);
}
#pragma option pop


#pragma option push -w-inl
inline Orientation __cdecl QDialog_orientation(QDialogH* handle)
{
	return QDialog_orientation(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_setExtension(QDialogH* handle, QWidgetH* extension)
{
	QDialog_setExtension(handle, extension);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QDialog_extension(QDialogH* handle)
{
	return QDialog_extension(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_sizeHint(QDialogH* handle, Types::PSize retval)
{
	QDialog_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_minimumSizeHint(QDialogH* handle, Types::PSize retval)
{
	QDialog_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_setSizeGripEnabled(QDialogH* handle, bool p1)
{
	QDialog_setSizeGripEnabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QDialog_isSizeGripEnabled(QDialogH* handle)
{
	return QDialog_isSizeGripEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragObject_destroy(QDragObjectH* handle)
{
	QDragObject_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QDragObject_drag(QDragObjectH* handle)
{
	return QDragObject_drag(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QDragObject_dragMove(QDragObjectH* handle)
{
	return QDragObject_dragMove(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragObject_dragCopy(QDragObjectH* handle)
{
	QDragObject_dragCopy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragObject_setPixmap(QDragObjectH* handle, QPixmapH* p1)/* overload */
{
	QDragObject_setPixmap(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragObject_setPixmap(QDragObjectH* handle, QPixmapH* p1, Types::PPoint hotspot)/* overload */
{
	QDragObject_setPixmap(handle, p1, hotspot);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragObject_pixmap(QDragObjectH* handle, QPixmapH* retval)
{
	QDragObject_pixmap(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragObject_pixmapHotSpot(QDragObjectH* handle, Types::PPoint retval)
{
	QDragObject_pixmapHotSpot(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QDragObject_source(QDragObjectH* handle)
{
	return QDragObject_source(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QDragObject_target(void)
{
	return QDragObject_target();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragObject_setTarget(QWidgetH* p1)
{
	QDragObject_setTarget(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QMimeSourceH* __cdecl QDragObject_to_QMimeSource(QDragObjectH* handle)
{
	return QDragObject_to_QMimeSource(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QStoredDragH* __cdecl QStoredDrag_create(char * mimeType, QWidgetH* dragSource, char * name)
{
	return QStoredDrag_create(mimeType, dragSource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStoredDrag_destroy(QStoredDragH* handle)
{
	QStoredDrag_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStoredDrag_setEncodedData(QStoredDragH* handle, QByteArrayH* p1)
{
	QStoredDrag_setEncodedData(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QStoredDrag_format(QStoredDragH* handle, int i)
{
	return QStoredDrag_format(handle, i);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStoredDrag_encodedData(QStoredDragH* handle, QByteArrayH* retval, char * p1)
{
	QStoredDrag_encodedData(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QTextDragH* __cdecl QTextDrag_create(System::PWideString p1, QWidgetH* dragSource, char * name)/* overload */
{
	return QTextDrag_create(p1, dragSource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextDrag_destroy(QTextDragH* handle)
{
	QTextDrag_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTextDragH* __cdecl QTextDrag_create(QWidgetH* dragSource, char * name)/* overload */
{
	return QTextDrag_create(dragSource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextDrag_setText(QTextDragH* handle, System::PWideString p1)
{
	QTextDrag_setText(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextDrag_setSubtype(QTextDragH* handle, System::PAnsiString p1)
{
	QTextDrag_setSubtype(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QTextDrag_format(QTextDragH* handle, int i)
{
	return QTextDrag_format(handle, i);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextDrag_encodedData(QTextDragH* handle, QByteArrayH* retval, char * p1)
{
	QTextDrag_encodedData(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QTextDrag_canDecode(QMimeSourceH* e)
{
	return QTextDrag_canDecode(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QTextDrag_decode(QMimeSourceH* e, System::PWideString s)/* overload */
{
	return QTextDrag_decode(e, s);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QTextDrag_decode(QMimeSourceH* e, System::PWideString s, System::PAnsiString subtype)/* overload */
{
	return QTextDrag_decode(e, s, subtype);
}
#pragma option pop


#pragma option push -w-inl
inline QImageDragH* __cdecl QImageDrag_create(QImageH* image, QWidgetH* dragSource, char * name)/* overload */
{
	return QImageDrag_create(image, dragSource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageDrag_destroy(QImageDragH* handle)
{
	QImageDrag_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QImageDragH* __cdecl QImageDrag_create(QWidgetH* dragSource, char * name)/* overload */
{
	return QImageDrag_create(dragSource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageDrag_setImage(QImageDragH* handle, QImageH* image)
{
	QImageDrag_setImage(handle, image);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QImageDrag_format(QImageDragH* handle, int i)
{
	return QImageDrag_format(handle, i);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageDrag_encodedData(QImageDragH* handle, QByteArrayH* retval, char * p1)
{
	QImageDrag_encodedData(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImageDrag_canDecode(QMimeSourceH* e)
{
	return QImageDrag_canDecode(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImageDrag_decode(QMimeSourceH* e, QImageH* i)/* overload */
{
	return QImageDrag_decode(e, i);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImageDrag_decode(QMimeSourceH* e, QPixmapH* i)/* overload */
{
	return QImageDrag_decode(e, i);
}
#pragma option pop


#pragma option push -w-inl
inline QUriDragH* __cdecl QUriDrag_create(QStrListH* uris, QWidgetH* dragSource, char * name)/* overload */
{
	return QUriDrag_create(uris, dragSource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QUriDrag_destroy(QUriDragH* handle)
{
	QUriDrag_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QUriDragH* __cdecl QUriDrag_create(QWidgetH* dragSource, char * name)/* overload */
{
	return QUriDrag_create(dragSource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QUriDrag_setFilenames(QUriDragH* handle, QStringListH* fnames)
{
	QUriDrag_setFilenames(handle, fnames);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QUriDrag_setUnicodeUris(QUriDragH* handle, QStringListH* uuris)
{
	QUriDrag_setUnicodeUris(handle, uuris);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QUriDrag_setUris(QUriDragH* handle, QStrListH* uris)
{
	QUriDrag_setUris(handle, uris);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QUriDrag_uriToLocalFile(System::PWideString retval, char * p1)
{
	QUriDrag_uriToLocalFile(retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QUriDrag_localFileToUri(System::PAnsiString retval, System::PWideString p1)
{
	QUriDrag_localFileToUri(retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QUriDrag_uriToUnicodeUri(System::PWideString retval, char * p1)
{
	QUriDrag_uriToUnicodeUri(retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QUriDrag_unicodeUriToUri(System::PAnsiString retval, System::PWideString p1)
{
	QUriDrag_unicodeUriToUri(retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QUriDrag_canDecode(QMimeSourceH* e)
{
	return QUriDrag_canDecode(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QUriDrag_decode(QMimeSourceH* e, QStrListH* i)
{
	return QUriDrag_decode(e, i);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QUriDrag_decodeToUnicodeUris(QMimeSourceH* e, QStringListH* i)
{
	return QUriDrag_decodeToUnicodeUris(e, i);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QUriDrag_decodeLocalFiles(QMimeSourceH* e, QStringListH* i)
{
	return QUriDrag_decodeLocalFiles(e, i);
}
#pragma option pop


#pragma option push -w-inl
inline QColorDragH* __cdecl QColorDrag_create(QColorH* col, QWidgetH* dragsource, char * name)/* overload */
{
	return QColorDrag_create(col, dragsource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorDrag_destroy(QColorDragH* handle)
{
	QColorDrag_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorDragH* __cdecl QColorDrag_create(QWidgetH* dragSource, char * name)/* overload */
{
	return QColorDrag_create(dragSource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorDrag_setColor(QColorDragH* handle, QColorH* col)
{
	QColorDrag_setColor(handle, col);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QColorDrag_canDecode(QMimeSourceH* p1)
{
	return QColorDrag_canDecode(p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QColorDrag_decode(QMimeSourceH* p1, QColorH* col)
{
	return QColorDrag_decode(p1, col);
}
#pragma option pop


#pragma option push -w-inl
inline QEventH* __cdecl QEvent_create(QEventType _type)
{
	return QEvent_create(_type);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QEvent_destroy(QEventH* handle)
{
	QEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QEventType __cdecl QEvent_type(QEventH* handle)
{
	return QEvent_type(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTimerEventH* __cdecl QTimerEvent_create(int timerId)
{
	return QTimerEvent_create(timerId);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTimerEvent_destroy(QTimerEventH* handle)
{
	QTimerEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QTimerEvent_timerId(QTimerEventH* handle)
{
	return QTimerEvent_timerId(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMouseEventH* __cdecl QMouseEvent_create(QEventType _type, Types::PPoint pos, int button, int state)/* overload */
{
	return QMouseEvent_create(_type, pos, button, state);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMouseEvent_destroy(QMouseEventH* handle)
{
	QMouseEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMouseEventH* __cdecl QMouseEvent_create(QEventType _type, Types::PPoint pos, Types::PPoint globalPos, int button, int state)/* overload */
{
	return QMouseEvent_create(_type, pos, globalPos, button, state);
}
#pragma option pop


#pragma option push -w-inl
inline Types::PPoint __cdecl QMouseEvent_pos(QMouseEventH* handle)
{
	return QMouseEvent_pos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline Types::PPoint __cdecl QMouseEvent_globalPos(QMouseEventH* handle)
{
	return QMouseEvent_globalPos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMouseEvent_x(QMouseEventH* handle)
{
	return QMouseEvent_x(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMouseEvent_y(QMouseEventH* handle)
{
	return QMouseEvent_y(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMouseEvent_globalX(QMouseEventH* handle)
{
	return QMouseEvent_globalX(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMouseEvent_globalY(QMouseEventH* handle)
{
	return QMouseEvent_globalY(handle);
}
#pragma option pop


#pragma option push -w-inl
inline ButtonState __cdecl QMouseEvent_button(QMouseEventH* handle)
{
	return QMouseEvent_button(handle);
}
#pragma option pop


#pragma option push -w-inl
inline ButtonState __cdecl QMouseEvent_state(QMouseEventH* handle)
{
	return QMouseEvent_state(handle);
}
#pragma option pop


#pragma option push -w-inl
inline ButtonState __cdecl QMouseEvent_stateAfter(QMouseEventH* handle)
{
	return QMouseEvent_stateAfter(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWheelEventH* __cdecl QWheelEvent_create(Types::PPoint pos, int delta, int state)/* overload */
{
	return QWheelEvent_create(pos, delta, state);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWheelEvent_destroy(QWheelEventH* handle)
{
	QWheelEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWheelEventH* __cdecl QWheelEvent_create(Types::PPoint pos, Types::PPoint globalPos, int delta, int state)/* overload */
{
	return QWheelEvent_create(pos, globalPos, delta, state);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWheelEvent_delta(QWheelEventH* handle)
{
	return QWheelEvent_delta(handle);
}
#pragma option pop


#pragma option push -w-inl
inline Types::PPoint __cdecl QWheelEvent_pos(QWheelEventH* handle)
{
	return QWheelEvent_pos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline Types::PPoint __cdecl QWheelEvent_globalPos(QWheelEventH* handle)
{
	return QWheelEvent_globalPos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWheelEvent_x(QWheelEventH* handle)
{
	return QWheelEvent_x(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWheelEvent_y(QWheelEventH* handle)
{
	return QWheelEvent_y(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWheelEvent_globalX(QWheelEventH* handle)
{
	return QWheelEvent_globalX(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWheelEvent_globalY(QWheelEventH* handle)
{
	return QWheelEvent_globalY(handle);
}
#pragma option pop


#pragma option push -w-inl
inline ButtonState __cdecl QWheelEvent_state(QWheelEventH* handle)
{
	return QWheelEvent_state(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWheelEvent_isAccepted(QWheelEventH* handle)
{
	return QWheelEvent_isAccepted(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWheelEvent_accept(QWheelEventH* handle)
{
	QWheelEvent_accept(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWheelEvent_ignore(QWheelEventH* handle)
{
	QWheelEvent_ignore(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QKeyEventH* __cdecl QKeyEvent_create(QEventType _type, int key, int ascii, int state, System::PWideString text, bool autorep, Word count)
{
	return QKeyEvent_create(_type, key, ascii, state, text, autorep, count);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QKeyEvent_destroy(QKeyEventH* handle)
{
	QKeyEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QKeyEvent_key(QKeyEventH* handle)
{
	return QKeyEvent_key(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QKeyEvent_ascii(QKeyEventH* handle)
{
	return QKeyEvent_ascii(handle);
}
#pragma option pop


#pragma option push -w-inl
inline ButtonState __cdecl QKeyEvent_state(QKeyEventH* handle)
{
	return QKeyEvent_state(handle);
}
#pragma option pop


#pragma option push -w-inl
inline ButtonState __cdecl QKeyEvent_stateAfter(QKeyEventH* handle)
{
	return QKeyEvent_stateAfter(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QKeyEvent_isAccepted(QKeyEventH* handle)
{
	return QKeyEvent_isAccepted(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QKeyEvent_text(QKeyEventH* handle, System::PWideString retval)
{
	QKeyEvent_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QKeyEvent_isAutoRepeat(QKeyEventH* handle)
{
	return QKeyEvent_isAutoRepeat(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QKeyEvent_count(QKeyEventH* handle)
{
	return QKeyEvent_count(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QKeyEvent_accept(QKeyEventH* handle)
{
	QKeyEvent_accept(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QKeyEvent_ignore(QKeyEventH* handle)
{
	QKeyEvent_ignore(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFocusEventH* __cdecl QFocusEvent_create(QEventType _type)
{
	return QFocusEvent_create(_type);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFocusEvent_destroy(QFocusEventH* handle)
{
	QFocusEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFocusEvent_gotFocus(QFocusEventH* handle)
{
	return QFocusEvent_gotFocus(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFocusEvent_lostFocus(QFocusEventH* handle)
{
	return QFocusEvent_lostFocus(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFocusEventReason __cdecl QFocusEvent_reason(void)
{
	return QFocusEvent_reason();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFocusEvent_setReason(QFocusEventReason reason)
{
	QFocusEvent_setReason(reason);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFocusEvent_resetReason(void)
{
	QFocusEvent_resetReason();
}
#pragma option pop


#pragma option push -w-inl
inline QPaintEventH* __cdecl QPaintEvent_create(QRegionH* paintRegion, bool erased)/* overload */
{
	return QPaintEvent_create(paintRegion, erased);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPaintEvent_destroy(QPaintEventH* handle)
{
	QPaintEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPaintEventH* __cdecl QPaintEvent_create(Types::PRect paintRect, bool erased)/* overload */
{
	return QPaintEvent_create(paintRect, erased);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPaintEvent_rect(QPaintEventH* handle, Types::PRect retval)
{
	QPaintEvent_rect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QRegionH* __cdecl QPaintEvent_region(QPaintEventH* handle)
{
	return QPaintEvent_region(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPaintEvent_erased(QPaintEventH* handle)
{
	return QPaintEvent_erased(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMoveEventH* __cdecl QMoveEvent_create(Types::PPoint pos, Types::PPoint oldPos)
{
	return QMoveEvent_create(pos, oldPos);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMoveEvent_destroy(QMoveEventH* handle)
{
	QMoveEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline Types::PPoint __cdecl QMoveEvent_pos(QMoveEventH* handle)
{
	return QMoveEvent_pos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline Types::PPoint __cdecl QMoveEvent_oldPos(QMoveEventH* handle)
{
	return QMoveEvent_oldPos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QResizeEventH* __cdecl QResizeEvent_create(Types::PSize size, Types::PSize oldSize)
{
	return QResizeEvent_create(size, oldSize);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QResizeEvent_destroy(QResizeEventH* handle)
{
	QResizeEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline Types::PSize __cdecl QResizeEvent_size(QResizeEventH* handle)
{
	return QResizeEvent_size(handle);
}
#pragma option pop


#pragma option push -w-inl
inline Types::PSize __cdecl QResizeEvent_oldSize(QResizeEventH* handle)
{
	return QResizeEvent_oldSize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCloseEventH* __cdecl QCloseEvent_create(void)
{
	return QCloseEvent_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCloseEvent_destroy(QCloseEventH* handle)
{
	QCloseEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QCloseEvent_isAccepted(QCloseEventH* handle)
{
	return QCloseEvent_isAccepted(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCloseEvent_accept(QCloseEventH* handle)
{
	QCloseEvent_accept(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCloseEvent_ignore(QCloseEventH* handle)
{
	QCloseEvent_ignore(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QShowEventH* __cdecl QShowEvent_create(bool spontaneous)
{
	return QShowEvent_create(spontaneous);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QShowEvent_destroy(QShowEventH* handle)
{
	QShowEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QShowEvent_spontaneous(QShowEventH* handle)
{
	return QShowEvent_spontaneous(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QHideEventH* __cdecl QHideEvent_create(bool spontaneous)
{
	return QHideEvent_create(spontaneous);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHideEvent_destroy(QHideEventH* handle)
{
	QHideEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QHideEvent_spontaneous(QHideEventH* handle)
{
	return QHideEvent_spontaneous(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDropEventH* __cdecl QDropEvent_create(Types::PPoint pos, QEventType typ)
{
	return QDropEvent_create(pos, typ);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDropEvent_destroy(QDropEventH* handle)
{
	QDropEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline Types::PPoint __cdecl QDropEvent_pos(QDropEventH* handle)
{
	return QDropEvent_pos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QDropEvent_isAccepted(QDropEventH* handle)
{
	return QDropEvent_isAccepted(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDropEvent_accept(QDropEventH* handle, bool y)
{
	QDropEvent_accept(handle, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDropEvent_ignore(QDropEventH* handle)
{
	QDropEvent_ignore(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QDropEvent_isActionAccepted(QDropEventH* handle)
{
	return QDropEvent_isActionAccepted(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDropEvent_acceptAction(QDropEventH* handle, bool y)
{
	QDropEvent_acceptAction(handle, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDropEvent_setAction(QDropEventH* handle, QDropEventAction a)
{
	QDropEvent_setAction(handle, a);
}
#pragma option pop


#pragma option push -w-inl
inline QDropEventAction __cdecl QDropEvent_action(QDropEventH* handle)
{
	return QDropEvent_action(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QDropEvent_source(QDropEventH* handle)
{
	return QDropEvent_source(handle);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QDropEvent_format(QDropEventH* handle, int n)
{
	return QDropEvent_format(handle, n);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDropEvent_encodedData(QDropEventH* handle, QByteArrayH* retval, char * p1)
{
	QDropEvent_encodedData(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QDropEvent_provides(QDropEventH* handle, char * p1)
{
	return QDropEvent_provides(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDropEvent_data(QDropEventH* handle, QByteArrayH* retval, char * f)
{
	QDropEvent_data(handle, retval, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDropEvent_setPoint(QDropEventH* handle, Types::PPoint np)
{
	QDropEvent_setPoint(handle, np);
}
#pragma option pop


#pragma option push -w-inl
inline QMimeSourceH* __cdecl QDropEvent_to_QMimeSource(QDropEventH* handle)
{
	return QDropEvent_to_QMimeSource(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDragMoveEventH* __cdecl QDragMoveEvent_create(Types::PPoint pos, QEventType typ)
{
	return QDragMoveEvent_create(pos, typ);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragMoveEvent_destroy(QDragMoveEventH* handle)
{
	QDragMoveEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragMoveEvent_answerRect(QDragMoveEventH* handle, Types::PRect retval)
{
	QDragMoveEvent_answerRect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragMoveEvent_accept(QDragMoveEventH* handle, bool y)/* overload */
{
	QDragMoveEvent_accept(handle, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragMoveEvent_accept(QDragMoveEventH* handle, Types::PRect r)/* overload */
{
	QDragMoveEvent_accept(handle, r);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragMoveEvent_ignore(QDragMoveEventH* handle, Types::PRect r)/* overload */
{
	QDragMoveEvent_ignore(handle, r);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragMoveEvent_ignore(QDragMoveEventH* handle)/* overload */
{
	QDragMoveEvent_ignore(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDragEnterEventH* __cdecl QDragEnterEvent_create(Types::PPoint pos)
{
	return QDragEnterEvent_create(pos);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragEnterEvent_destroy(QDragEnterEventH* handle)
{
	QDragEnterEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDragResponseEventH* __cdecl QDragResponseEvent_create(bool accepted)
{
	return QDragResponseEvent_create(accepted);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragResponseEvent_destroy(QDragResponseEventH* handle)
{
	QDragResponseEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QDragResponseEvent_dragAccepted(QDragResponseEventH* handle)
{
	return QDragResponseEvent_dragAccepted(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDragLeaveEventH* __cdecl QDragLeaveEvent_create(void)
{
	return QDragLeaveEvent_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragLeaveEvent_destroy(QDragLeaveEventH* handle)
{
	QDragLeaveEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QChildEventH* __cdecl QChildEvent_create(QEventType _type, QObjectH* child)
{
	return QChildEvent_create(_type, child);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QChildEvent_destroy(QChildEventH* handle)
{
	QChildEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QChildEvent_child(QChildEventH* handle)
{
	return QChildEvent_child(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QChildEvent_inserted(QChildEventH* handle)
{
	return QChildEvent_inserted(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QChildEvent_removed(QChildEventH* handle)
{
	return QChildEvent_removed(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCustomEventH* __cdecl QCustomEvent_create(int _type)/* overload */
{
	return QCustomEvent_create(_type);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCustomEvent_destroy(QCustomEventH* handle)
{
	QCustomEvent_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCustomEventH* __cdecl QCustomEvent_create(QEventType _type, void * data)/* overload */
{
	return QCustomEvent_create(_type, data);
}
#pragma option pop


#pragma option push -w-inl
inline void * __cdecl QCustomEvent_data(QCustomEventH* handle)
{
	return QCustomEvent_data(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCustomEvent_setData(QCustomEventH* handle, void * data)
{
	QCustomEvent_setData(handle, data);
}
#pragma option pop


#pragma option push -w-inl
inline QFrameH* __cdecl QFrame_create(QWidgetH* parent, char * name, int f, bool p4)
{
	return QFrame_create(parent, name, f, p4);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_destroy(QFrameH* handle)
{
	QFrame_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFrame_frameStyle(QFrameH* handle)
{
	return QFrame_frameStyle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_setFrameStyle(QFrameH* handle, int p1)
{
	QFrame_setFrameStyle(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFrame_frameWidth(QFrameH* handle)
{
	return QFrame_frameWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_contentsRect(QFrameH* handle, Types::PRect retval)
{
	QFrame_contentsRect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFrame_lineShapesOk(QFrameH* handle)
{
	return QFrame_lineShapesOk(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_sizeHint(QFrameH* handle, Types::PSize retval)
{
	QFrame_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_sizePolicy(QFrameH* handle, PSizePolicy retval)
{
	QFrame_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QFrameShape __cdecl QFrame_frameShape(QFrameH* handle)
{
	return QFrame_frameShape(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_setFrameShape(QFrameH* handle, QFrameShape p1)
{
	QFrame_setFrameShape(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QFrameShadow __cdecl QFrame_frameShadow(QFrameH* handle)
{
	return QFrame_frameShadow(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_setFrameShadow(QFrameH* handle, QFrameShadow p1)
{
	QFrame_setFrameShadow(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFrame_lineWidth(QFrameH* handle)
{
	return QFrame_lineWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_setLineWidth(QFrameH* handle, int p1)
{
	QFrame_setLineWidth(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFrame_margin(QFrameH* handle)
{
	return QFrame_margin(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_setMargin(QFrameH* handle, int p1)
{
	QFrame_setMargin(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFrame_midLineWidth(QFrameH* handle)
{
	return QFrame_midLineWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_setMidLineWidth(QFrameH* handle, int p1)
{
	QFrame_setMidLineWidth(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_frameRect(QFrameH* handle, Types::PRect retval)
{
	QFrame_frameRect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_setFrameRect(QFrameH* handle, Types::PRect p1)
{
	QFrame_setFrameRect(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QIconDragItemH* __cdecl QIconDragItem_create(void)
{
	return QIconDragItem_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconDragItem_destroy(QIconDragItemH* handle)
{
	QIconDragItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconDragItem_data(QIconDragItemH* handle, QByteArrayH* retval)
{
	QIconDragItem_data(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconDragItem_setData(QIconDragItemH* handle, QByteArrayH* d)
{
	QIconDragItem_setData(handle, d);
}
#pragma option pop


#pragma option push -w-inl
inline QIconDragH* __cdecl QIconDrag_create(QWidgetH* dragSource, char * name)
{
	return QIconDrag_create(dragSource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconDrag_destroy(QIconDragH* handle)
{
	QIconDrag_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconDrag_append(QIconDragH* handle, QIconDragItemH* item, Types::PRect pr, Types::PRect tr)
{
	QIconDrag_append(handle, item, pr, tr);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QIconDrag_format(QIconDragH* handle, int i)
{
	return QIconDrag_format(handle, i);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconDrag_canDecode(QMimeSourceH* e)
{
	return QIconDrag_canDecode(e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconDrag_encodedData(QIconDragH* handle, QByteArrayH* retval, char * mime)
{
	QIconDrag_encodedData(handle, retval, mime);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent)/* overload */
{
	return QIconViewItem_create(parent);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_destroy(QIconViewItemH* handle)
{
	QIconViewItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent, QIconViewItemH* after)/* overload */
{
	return QIconViewItem_create(parent, after);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent, System::PWideString text)/* overload */
{
	return QIconViewItem_create(parent, text);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent, QIconViewItemH* after, System::PWideString text)/* overload */
{
	return QIconViewItem_create(parent, after, text);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent, System::PWideString text, QPixmapH* icon)/* overload */
{
	return QIconViewItem_create(parent, text, icon);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconViewItem_create(QIconViewH* parent, QIconViewItemH* after, System::PWideString text, QPixmapH* icon)/* overload */
{
	return QIconViewItem_create(parent, after, text, icon);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setRenameEnabled(QIconViewItemH* handle, bool allow)
{
	QIconViewItem_setRenameEnabled(handle, allow);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setDragEnabled(QIconViewItemH* handle, bool allow)
{
	QIconViewItem_setDragEnabled(handle, allow);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setDropEnabled(QIconViewItemH* handle, bool allow)
{
	QIconViewItem_setDropEnabled(handle, allow);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_text(QIconViewItemH* handle, System::PWideString retval)
{
	QIconViewItem_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QIconViewItem_pixmap(QIconViewItemH* handle)
{
	return QIconViewItem_pixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_key(QIconViewItemH* handle, System::PWideString retval)
{
	QIconViewItem_key(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconViewItem_renameEnabled(QIconViewItemH* handle)
{
	return QIconViewItem_renameEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconViewItem_dragEnabled(QIconViewItemH* handle)
{
	return QIconViewItem_dragEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconViewItem_dropEnabled(QIconViewItemH* handle)
{
	return QIconViewItem_dropEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewH* __cdecl QIconViewItem_iconView(QIconViewItemH* handle)
{
	return QIconViewItem_iconView(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconViewItem_prevItem(QIconViewItemH* handle)
{
	return QIconViewItem_prevItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconViewItem_nextItem(QIconViewItemH* handle)
{
	return QIconViewItem_nextItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconViewItem_index(QIconViewItemH* handle)
{
	return QIconViewItem_index(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setSelected(QIconViewItemH* handle, bool s, bool cb)/* overload */
{
	QIconViewItem_setSelected(handle, s, cb);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setSelected(QIconViewItemH* handle, bool s)/* overload */
{
	QIconViewItem_setSelected(handle, s);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setSelectable(QIconViewItemH* handle, bool s)
{
	QIconViewItem_setSelectable(handle, s);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconViewItem_isSelected(QIconViewItemH* handle)
{
	return QIconViewItem_isSelected(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconViewItem_isSelectable(QIconViewItemH* handle)
{
	return QIconViewItem_isSelectable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_repaint(QIconViewItemH* handle)
{
	QIconViewItem_repaint(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_move(QIconViewItemH* handle, int x, int y)/* overload */
{
	QIconViewItem_move(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_moveBy(QIconViewItemH* handle, int dx, int dy)/* overload */
{
	QIconViewItem_moveBy(handle, dx, dy);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_move(QIconViewItemH* handle, Types::PPoint pnt)/* overload */
{
	QIconViewItem_move(handle, pnt);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_moveBy(QIconViewItemH* handle, Types::PPoint pnt)/* overload */
{
	QIconViewItem_moveBy(handle, pnt);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_rect(QIconViewItemH* handle, Types::PRect retval)
{
	QIconViewItem_rect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconViewItem_x(QIconViewItemH* handle)
{
	return QIconViewItem_x(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconViewItem_y(QIconViewItemH* handle)
{
	return QIconViewItem_y(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconViewItem_width(QIconViewItemH* handle)
{
	return QIconViewItem_width(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconViewItem_height(QIconViewItemH* handle)
{
	return QIconViewItem_height(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_size(QIconViewItemH* handle, Types::PSize retval)
{
	QIconViewItem_size(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_pos(QIconViewItemH* handle, Types::PPoint retval)
{
	QIconViewItem_pos(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_textRect(QIconViewItemH* handle, Types::PRect retval, bool relative)
{
	QIconViewItem_textRect(handle, retval, relative);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_pixmapRect(QIconViewItemH* handle, Types::PRect retval, bool relative)
{
	QIconViewItem_pixmapRect(handle, retval, relative);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconViewItem_contains(QIconViewItemH* handle, Types::PPoint pnt)
{
	return QIconViewItem_contains(handle, pnt);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconViewItem_intersects(QIconViewItemH* handle, Types::PRect r)
{
	return QIconViewItem_intersects(handle, r);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconViewItem_acceptDrop(QIconViewItemH* handle, QMimeSourceH* mime)
{
	return QIconViewItem_acceptDrop(handle, mime);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_rename(QIconViewItemH* handle)
{
	QIconViewItem_rename(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconViewItem_compare(QIconViewItemH* handle, QIconViewItemH* i)
{
	return QIconViewItem_compare(handle, i);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setText(QIconViewItemH* handle, System::PWideString text)/* overload */
{
	QIconViewItem_setText(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setPixmap(QIconViewItemH* handle, QPixmapH* icon)/* overload */
{
	QIconViewItem_setPixmap(handle, icon);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setText(QIconViewItemH* handle, System::PWideString text, bool recalc, bool redraw)/* overload */
{
	QIconViewItem_setText(handle, text, recalc, redraw);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setPixmap(QIconViewItemH* handle, QPixmapH* icon, bool recalc, bool redraw)/* overload */
{
	QIconViewItem_setPixmap(handle, icon, recalc, redraw);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconViewItem_setKey(QIconViewItemH* handle, System::PWideString k)
{
	QIconViewItem_setKey(handle, k);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewH* __cdecl QIconView_create(QWidgetH* parent, char * name, int f)
{
	return QIconView_create(parent, name, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_destroy(QIconViewH* handle)
{
	QIconView_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_insertItem(QIconViewH* handle, QIconViewItemH* item, QIconViewItemH* after)
{
	QIconView_insertItem(handle, item, after);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_takeItem(QIconViewH* handle, QIconViewItemH* item)
{
	QIconView_takeItem(handle, item);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconView_index(QIconViewH* handle, QIconViewItemH* item)
{
	return QIconView_index(handle, item);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconView_firstItem(QIconViewH* handle)
{
	return QIconView_firstItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconView_lastItem(QIconViewH* handle)
{
	return QIconView_lastItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconView_currentItem(QIconViewH* handle)
{
	return QIconView_currentItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setCurrentItem(QIconViewH* handle, QIconViewItemH* item)
{
	QIconView_setCurrentItem(handle, item);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setSelected(QIconViewH* handle, QIconViewItemH* item, bool s, bool cb)
{
	QIconView_setSelected(handle, item, s, cb);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QIconView_count(QIconViewH* handle)
{
	return QIconView_count(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_showEvent(QIconViewH* handle, QShowEventH* p1)
{
	QIconView_showEvent(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setSelectionMode(QIconViewH* handle, QIconViewSelectionMode m)
{
	QIconView_setSelectionMode(handle, m);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewSelectionMode __cdecl QIconView_selectionMode(QIconViewH* handle)
{
	return QIconView_selectionMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconView_findItem(QIconViewH* handle, Types::PPoint pos)/* overload */
{
	return QIconView_findItem(handle, pos);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconView_findItem(QIconViewH* handle, System::PWideString text)/* overload */
{
	return QIconView_findItem(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_selectAll(QIconViewH* handle, bool select)
{
	QIconView_selectAll(handle, select);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_clearSelection(QIconViewH* handle)
{
	QIconView_clearSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_invertSelection(QIconViewH* handle)
{
	QIconView_invertSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_repaintItem(QIconViewH* handle, QIconViewItemH* item)
{
	QIconView_repaintItem(handle, item);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_ensureItemVisible(QIconViewH* handle, QIconViewItemH* item)
{
	QIconView_ensureItemVisible(handle, item);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconView_findFirstVisibleItem(QIconViewH* handle, Types::PRect r)
{
	return QIconView_findFirstVisibleItem(handle, r);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemH* __cdecl QIconView_findLastVisibleItem(QIconViewH* handle, Types::PRect r)
{
	return QIconView_findLastVisibleItem(handle, r);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_clear(QIconViewH* handle)
{
	QIconView_clear(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setGridX(QIconViewH* handle, int rx)
{
	QIconView_setGridX(handle, rx);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setGridY(QIconViewH* handle, int ry)
{
	QIconView_setGridY(handle, ry);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconView_gridX(QIconViewH* handle)
{
	return QIconView_gridX(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconView_gridY(QIconViewH* handle)
{
	return QIconView_gridY(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setSpacing(QIconViewH* handle, int sp)
{
	QIconView_setSpacing(handle, sp);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconView_spacing(QIconViewH* handle)
{
	return QIconView_spacing(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setItemTextPos(QIconViewH* handle, QIconViewItemTextPos pos)
{
	QIconView_setItemTextPos(handle, pos);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewItemTextPos __cdecl QIconView_itemTextPos(QIconViewH* handle)
{
	return QIconView_itemTextPos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setItemTextBackground(QIconViewH* handle, QBrushH* b)
{
	QIconView_setItemTextBackground(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline QBrushH* __cdecl QIconView_itemTextBackground(QIconViewH* handle)
{
	return QIconView_itemTextBackground(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setArrangement(QIconViewH* handle, QIconViewArrangement am)
{
	QIconView_setArrangement(handle, am);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewArrangement __cdecl QIconView_arrangement(QIconViewH* handle)
{
	return QIconView_arrangement(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setResizeMode(QIconViewH* handle, QIconViewResizeMode am)
{
	QIconView_setResizeMode(handle, am);
}
#pragma option pop


#pragma option push -w-inl
inline QIconViewResizeMode __cdecl QIconView_resizeMode(QIconViewH* handle)
{
	return QIconView_resizeMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setMaxItemWidth(QIconViewH* handle, int w)
{
	QIconView_setMaxItemWidth(handle, w);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconView_maxItemWidth(QIconViewH* handle)
{
	return QIconView_maxItemWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setMaxItemTextLength(QIconViewH* handle, int w)
{
	QIconView_setMaxItemTextLength(handle, w);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIconView_maxItemTextLength(QIconViewH* handle)
{
	return QIconView_maxItemTextLength(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setAutoArrange(QIconViewH* handle, bool b)
{
	QIconView_setAutoArrange(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconView_autoArrange(QIconViewH* handle)
{
	return QIconView_autoArrange(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setShowToolTips(QIconViewH* handle, bool b)
{
	QIconView_setShowToolTips(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconView_showToolTips(QIconViewH* handle)
{
	return QIconView_showToolTips(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setSorting(QIconViewH* handle, bool sort, bool ascending)
{
	QIconView_setSorting(handle, sort, ascending);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconView_sorting(QIconViewH* handle)
{
	return QIconView_sorting(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconView_sortDirection(QIconViewH* handle)
{
	return QIconView_sortDirection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setItemsMovable(QIconViewH* handle, bool b)
{
	QIconView_setItemsMovable(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconView_itemsMovable(QIconViewH* handle)
{
	return QIconView_itemsMovable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setWordWrapIconText(QIconViewH* handle, bool b)
{
	QIconView_setWordWrapIconText(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconView_wordWrapIconText(QIconViewH* handle)
{
	return QIconView_wordWrapIconText(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconView_eventFilter(QIconViewH* handle, QObjectH* o, QEventH* p2)
{
	return QIconView_eventFilter(handle, o, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_minimumSizeHint(QIconViewH* handle, Types::PSize retval)
{
	QIconView_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_sizePolicy(QIconViewH* handle, PSizePolicy retval)
{
	QIconView_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_sizeHint(QIconViewH* handle, Types::PSize retval)
{
	QIconView_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_sort(QIconViewH* handle, bool ascending)
{
	QIconView_sort(handle, ascending);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setFont(QIconViewH* handle, QFontH* p1)
{
	QIconView_setFont(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setPalette(QIconViewH* handle, QPaletteH* p1)
{
	QIconView_setPalette(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_arrangeItemsInGrid(QIconViewH* handle, Types::PSize grid, bool update)/* overload */
{
	QIconView_arrangeItemsInGrid(handle, grid, update);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_arrangeItemsInGrid(QIconViewH* handle, bool update)/* overload */
{
	QIconView_arrangeItemsInGrid(handle, update);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_setContentsPos(QIconViewH* handle, int x, int y)
{
	QIconView_setContentsPos(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_updateContents(QIconViewH* handle)
{
	QIconView_updateContents(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QLCDNumberH* __cdecl QLCDNumber_create(QWidgetH* parent, char * name)/* overload */
{
	return QLCDNumber_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_destroy(QLCDNumberH* handle)
{
	QLCDNumber_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QLCDNumberH* __cdecl QLCDNumber_create(unsigned numDigits, QWidgetH* parent, char * name)/* overload */
{
	return QLCDNumber_create(numDigits, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QLCDNumber_smallDecimalPoint(QLCDNumberH* handle)
{
	return QLCDNumber_smallDecimalPoint(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QLCDNumber_numDigits(QLCDNumberH* handle)
{
	return QLCDNumber_numDigits(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_setNumDigits(QLCDNumberH* handle, int nDigits)
{
	QLCDNumber_setNumDigits(handle, nDigits);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QLCDNumber_checkOverflow(QLCDNumberH* handle, double num)/* overload */
{
	return QLCDNumber_checkOverflow(handle, num);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QLCDNumber_checkOverflow(QLCDNumberH* handle, int num)/* overload */
{
	return QLCDNumber_checkOverflow(handle, num);
}
#pragma option pop


#pragma option push -w-inl
inline QLCDNumberMode __cdecl QLCDNumber_mode(QLCDNumberH* handle)
{
	return QLCDNumber_mode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_setMode(QLCDNumberH* handle, QLCDNumberMode p1)
{
	QLCDNumber_setMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QLCDNumberSegmentStyle __cdecl QLCDNumber_segmentStyle(QLCDNumberH* handle)
{
	return QLCDNumber_segmentStyle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_setSegmentStyle(QLCDNumberH* handle, QLCDNumberSegmentStyle p1)
{
	QLCDNumber_setSegmentStyle(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline double __cdecl QLCDNumber_value(QLCDNumberH* handle)
{
	return QLCDNumber_value(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QLCDNumber_intValue(QLCDNumberH* handle)
{
	return QLCDNumber_intValue(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_sizeHint(QLCDNumberH* handle, Types::PSize retval)
{
	QLCDNumber_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_sizePolicy(QLCDNumberH* handle, PSizePolicy retval)
{
	QLCDNumber_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_display(QLCDNumberH* handle, int num)/* overload */
{
	QLCDNumber_display(handle, num);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_display(QLCDNumberH* handle, double num)/* overload */
{
	QLCDNumber_display(handle, num);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_display(QLCDNumberH* handle, System::PWideString str)/* overload */
{
	QLCDNumber_display(handle, str);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_setHexMode(QLCDNumberH* handle)
{
	QLCDNumber_setHexMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_setDecMode(QLCDNumberH* handle)
{
	QLCDNumber_setDecMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_setOctMode(QLCDNumberH* handle)
{
	QLCDNumber_setOctMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_setBinMode(QLCDNumberH* handle)
{
	QLCDNumber_setBinMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_setSmallDecimalPoint(QLCDNumberH* handle, bool p1)
{
	QLCDNumber_setSmallDecimalPoint(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QLineEditH* __cdecl QLineEdit_create(QWidgetH* parent, char * name)/* overload */
{
	return QLineEdit_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_destroy(QLineEditH* handle)
{
	QLineEdit_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QLineEditH* __cdecl QLineEdit_create(System::PWideString p1, QWidgetH* parent, char * name)/* overload */
{
	return QLineEdit_create(p1, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_text(QLineEditH* handle, System::PWideString retval)
{
	QLineEdit_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_displayText(QLineEditH* handle, System::PWideString retval)
{
	QLineEdit_displayText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QLineEdit_maxLength(QLineEditH* handle)
{
	return QLineEdit_maxLength(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setMaxLength(QLineEditH* handle, int p1)
{
	QLineEdit_setMaxLength(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setFrame(QLineEditH* handle, bool p1)
{
	QLineEdit_setFrame(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QLineEdit_frame(QLineEditH* handle)
{
	return QLineEdit_frame(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setEchoMode(QLineEditH* handle, QLineEditEchoMode p1)
{
	QLineEdit_setEchoMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QLineEditEchoMode __cdecl QLineEdit_echoMode(QLineEditH* handle)
{
	return QLineEdit_echoMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setReadOnly(QLineEditH* handle, bool p1)
{
	QLineEdit_setReadOnly(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QLineEdit_isReadOnly(QLineEditH* handle)
{
	return QLineEdit_isReadOnly(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setValidator(QLineEditH* handle, QValidatorH* p1)
{
	QLineEdit_setValidator(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QValidatorH* __cdecl QLineEdit_validator(QLineEditH* handle)
{
	return QLineEdit_validator(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_sizeHint(QLineEditH* handle, Types::PSize retval)
{
	QLineEdit_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_minimumSizeHint(QLineEditH* handle, Types::PSize retval)
{
	QLineEdit_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_sizePolicy(QLineEditH* handle, PSizePolicy retval)
{
	QLineEdit_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setEnabled(QLineEditH* handle, bool p1)
{
	QLineEdit_setEnabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setFont(QLineEditH* handle, QFontH* p1)
{
	QLineEdit_setFont(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setPalette(QLineEditH* handle, QPaletteH* p1)
{
	QLineEdit_setPalette(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setSelection(QLineEditH* handle, int p1, int p2)
{
	QLineEdit_setSelection(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setCursorPosition(QLineEditH* handle, int p1)
{
	QLineEdit_setCursorPosition(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QLineEdit_cursorPosition(QLineEditH* handle)
{
	return QLineEdit_cursorPosition(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QLineEdit_validateAndSet(QLineEditH* handle, System::PWideString p1, int p2, int p3, int p4)
{
	return QLineEdit_validateAndSet(handle, p1, p2, p3, p4);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_cut(QLineEditH* handle)
{
	QLineEdit_cut(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_copy(QLineEditH* handle)
{
	QLineEdit_copy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_paste(QLineEditH* handle)
{
	QLineEdit_paste(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setAlignment(QLineEditH* handle, int flag)
{
	QLineEdit_setAlignment(handle, flag);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QLineEdit_alignment(QLineEditH* handle)
{
	return QLineEdit_alignment(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_cursorLeft(QLineEditH* handle, bool mark, int steps)
{
	QLineEdit_cursorLeft(handle, mark, steps);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_cursorRight(QLineEditH* handle, bool mark, int steps)
{
	QLineEdit_cursorRight(handle, mark, steps);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_cursorWordForward(QLineEditH* handle, bool mark)
{
	QLineEdit_cursorWordForward(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_cursorWordBackward(QLineEditH* handle, bool mark)
{
	QLineEdit_cursorWordBackward(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_backspace(QLineEditH* handle)
{
	QLineEdit_backspace(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_del(QLineEditH* handle)
{
	QLineEdit_del(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_home(QLineEditH* handle, bool mark)
{
	QLineEdit_home(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_end(QLineEditH* handle, bool mark)
{
	QLineEdit_end(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setEdited(QLineEditH* handle, bool p1)
{
	QLineEdit_setEdited(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QLineEdit_edited(QLineEditH* handle)
{
	return QLineEdit_edited(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QLineEdit_hasMarkedText(QLineEditH* handle)
{
	return QLineEdit_hasMarkedText(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_markedText(QLineEditH* handle, System::PWideString retval)
{
	QLineEdit_markedText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_setText(QLineEditH* handle, System::PWideString p1)
{
	QLineEdit_setText(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_selectAll(QLineEditH* handle)
{
	QLineEdit_selectAll(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_deselect(QLineEditH* handle)
{
	QLineEdit_deselect(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_clearValidator(QLineEditH* handle)
{
	QLineEdit_clearValidator(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_insert(QLineEditH* handle, System::PWideString p1)
{
	QLineEdit_insert(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_clear(QLineEditH* handle)
{
	QLineEdit_clear(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxH* __cdecl QListBox_create(QWidgetH* parent, char * name, int f)
{
	return QListBox_create(parent, name, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_destroy(QListBoxH* handle)
{
	QListBox_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setFont(QListBoxH* handle, QFontH* p1)
{
	QListBox_setFont(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QListBox_count(QListBoxH* handle)
{
	return QListBox_count(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_insertStringList(QListBoxH* handle, QStringListH* p1, int index)
{
	QListBox_insertStringList(handle, p1, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_insertStrList(QListBoxH* handle, QStrListH* p1, int index)/* overload */
{
	QListBox_insertStrList(handle, p1, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_insertStrList(QListBoxH* handle, System::PPChar p1, int numStrings, int index)/* overload */
{
	QListBox_insertStrList(handle, p1, numStrings, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_insertItem(QListBoxH* handle, QListBoxItemH* p1, int index)/* overload */
{
	QListBox_insertItem(handle, p1, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_insertItem(QListBoxH* handle, QListBoxItemH* p1, QListBoxItemH* after)/* overload */
{
	QListBox_insertItem(handle, p1, after);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_insertItem(QListBoxH* handle, System::PWideString text, int index)/* overload */
{
	QListBox_insertItem(handle, text, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_insertItem(QListBoxH* handle, QPixmapH* pixmap, int index)/* overload */
{
	QListBox_insertItem(handle, pixmap, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_insertItem(QListBoxH* handle, QPixmapH* pixmap, System::PWideString text, int index)/* overload */
{
	QListBox_insertItem(handle, pixmap, text, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_removeItem(QListBoxH* handle, int index)
{
	QListBox_removeItem(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_clear(QListBoxH* handle)
{
	QListBox_clear(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_text(QListBoxH* handle, System::PWideString retval, int index)
{
	QListBox_text(handle, retval, index);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QListBox_pixmap(QListBoxH* handle, int index)
{
	return QListBox_pixmap(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_changeItem(QListBoxH* handle, QListBoxItemH* p1, int index)/* overload */
{
	QListBox_changeItem(handle, p1, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_changeItem(QListBoxH* handle, System::PWideString text, int index)/* overload */
{
	QListBox_changeItem(handle, text, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_changeItem(QListBoxH* handle, QPixmapH* pixmap, int index)/* overload */
{
	QListBox_changeItem(handle, pixmap, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_changeItem(QListBoxH* handle, QPixmapH* pixmap, System::PWideString text, int index)/* overload */
{
	QListBox_changeItem(handle, pixmap, text, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_takeItem(QListBoxH* handle, QListBoxItemH* p1)
{
	QListBox_takeItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_numItemsVisible(QListBoxH* handle)
{
	return QListBox_numItemsVisible(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_currentItem(QListBoxH* handle)
{
	return QListBox_currentItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_currentText(QListBoxH* handle, System::PWideString retval)
{
	QListBox_currentText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setCurrentItem(QListBoxH* handle, int index)/* overload */
{
	QListBox_setCurrentItem(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setCurrentItem(QListBoxH* handle, QListBoxItemH* p1)/* overload */
{
	QListBox_setCurrentItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_centerCurrentItem(QListBoxH* handle)
{
	QListBox_centerCurrentItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_topItem(QListBoxH* handle)
{
	return QListBox_topItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setTopItem(QListBoxH* handle, int index)
{
	QListBox_setTopItem(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setBottomItem(QListBoxH* handle, int index)
{
	QListBox_setBottomItem(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_maxItemWidth(QListBoxH* handle)
{
	return QListBox_maxItemWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setSelectionMode(QListBoxH* handle, QListBoxSelectionMode p1)
{
	QListBox_setSelectionMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxSelectionMode __cdecl QListBox_selectionMode(QListBoxH* handle)
{
	return QListBox_selectionMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setMultiSelection(QListBoxH* handle, bool multi)
{
	QListBox_setMultiSelection(handle, multi);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_isMultiSelection(QListBoxH* handle)
{
	return QListBox_isMultiSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setSelected(QListBoxH* handle, QListBoxItemH* p1, bool p2)/* overload */
{
	QListBox_setSelected(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setSelected(QListBoxH* handle, int p1, bool p2)/* overload */
{
	QListBox_setSelected(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_isSelected(QListBoxH* handle, int p1)/* overload */
{
	return QListBox_isSelected(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_isSelected(QListBoxH* handle, QListBoxItemH* p1)/* overload */
{
	return QListBox_isSelected(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_sizeHint(QListBoxH* handle, Types::PSize retval)
{
	QListBox_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_minimumSizeHint(QListBoxH* handle, Types::PSize retval)
{
	QListBox_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxItemH* __cdecl QListBox_item(QListBoxH* handle, int index)
{
	return QListBox_item(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_index(QListBoxH* handle, QListBoxItemH* p1)
{
	return QListBox_index(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxItemH* __cdecl QListBox_findItem(QListBoxH* handle, System::PWideString text)
{
	return QListBox_findItem(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_triggerUpdate(QListBoxH* handle, bool doLayout)
{
	QListBox_triggerUpdate(handle, doLayout);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_itemVisible(QListBoxH* handle, int index)/* overload */
{
	return QListBox_itemVisible(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_itemVisible(QListBoxH* handle, QListBoxItemH* p1)/* overload */
{
	return QListBox_itemVisible(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setColumnMode(QListBoxH* handle, QListBoxLayoutMode p1)/* overload */
{
	QListBox_setColumnMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setColumnMode(QListBoxH* handle, int p1)/* overload */
{
	QListBox_setColumnMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setRowMode(QListBoxH* handle, QListBoxLayoutMode p1)/* overload */
{
	QListBox_setRowMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setRowMode(QListBoxH* handle, int p1)/* overload */
{
	QListBox_setRowMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxLayoutMode __cdecl QListBox_columnMode(QListBoxH* handle)
{
	return QListBox_columnMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxLayoutMode __cdecl QListBox_rowMode(QListBoxH* handle)
{
	return QListBox_rowMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_numColumns(QListBoxH* handle)
{
	return QListBox_numColumns(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_numRows(QListBoxH* handle)
{
	return QListBox_numRows(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_variableWidth(QListBoxH* handle)
{
	return QListBox_variableWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setVariableWidth(QListBoxH* handle, bool p1)
{
	QListBox_setVariableWidth(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_variableHeight(QListBoxH* handle)
{
	return QListBox_variableHeight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setVariableHeight(QListBoxH* handle, bool p1)
{
	QListBox_setVariableHeight(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_viewportPaintEvent(QListBoxH* handle, QPaintEventH* p1)
{
	QListBox_viewportPaintEvent(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_dragSelect(QListBoxH* handle)
{
	return QListBox_dragSelect(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setDragSelect(QListBoxH* handle, bool p1)
{
	QListBox_setDragSelect(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_autoScroll(QListBoxH* handle)
{
	return QListBox_autoScroll(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setAutoScroll(QListBoxH* handle, bool p1)
{
	QListBox_setAutoScroll(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_autoScrollBar(QListBoxH* handle)
{
	return QListBox_autoScrollBar(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setAutoScrollBar(QListBoxH* handle, bool enable)
{
	QListBox_setAutoScrollBar(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_scrollBar(QListBoxH* handle)
{
	return QListBox_scrollBar(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setScrollBar(QListBoxH* handle, bool enable)
{
	QListBox_setScrollBar(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_autoBottomScrollBar(QListBoxH* handle)
{
	return QListBox_autoBottomScrollBar(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setAutoBottomScrollBar(QListBoxH* handle, bool enable)
{
	QListBox_setAutoBottomScrollBar(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_bottomScrollBar(QListBoxH* handle)
{
	return QListBox_bottomScrollBar(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setBottomScrollBar(QListBoxH* handle, bool enable)
{
	QListBox_setBottomScrollBar(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_smoothScrolling(QListBoxH* handle)
{
	return QListBox_smoothScrolling(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setSmoothScrolling(QListBoxH* handle, bool p1)
{
	QListBox_setSmoothScrolling(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBox_autoUpdate(QListBoxH* handle)
{
	return QListBox_autoUpdate(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setAutoUpdate(QListBoxH* handle, bool p1)
{
	QListBox_setAutoUpdate(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_setFixedVisibleLines(QListBoxH* handle, int lines)
{
	QListBox_setFixedVisibleLines(handle, lines);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_inSort(QListBoxH* handle, QListBoxItemH* p1)/* overload */
{
	QListBox_inSort(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_inSort(QListBoxH* handle, System::PWideString text)/* overload */
{
	QListBox_inSort(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_cellHeight(QListBoxH* handle, int i)/* overload */
{
	return QListBox_cellHeight(handle, i);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_cellHeight(QListBoxH* handle)/* overload */
{
	return QListBox_cellHeight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_cellWidth(QListBoxH* handle)/* overload */
{
	return QListBox_cellWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_cellWidth(QListBoxH* handle, int i)/* overload */
{
	return QListBox_cellWidth(handle, i);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_numCols(QListBoxH* handle)
{
	return QListBox_numCols(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBox_itemHeight(QListBoxH* handle, int index)
{
	return QListBox_itemHeight(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxItemH* __cdecl QListBox_itemAt(QListBoxH* handle, Types::PPoint p1)
{
	return QListBox_itemAt(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_itemRect(QListBoxH* handle, Types::PRect retval, QListBoxItemH* item)
{
	QListBox_itemRect(handle, retval, item);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxItemH* __cdecl QListBox_firstItem(QListBoxH* handle)
{
	return QListBox_firstItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_sort(QListBoxH* handle, bool ascending)
{
	QListBox_sort(handle, ascending);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_ensureCurrentVisible(QListBoxH* handle)
{
	QListBox_ensureCurrentVisible(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_clearSelection(QListBoxH* handle)
{
	QListBox_clearSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_selectAll(QListBoxH* handle, bool select)
{
	QListBox_selectAll(handle, select);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_invertSelection(QListBoxH* handle)
{
	QListBox_invertSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxItemH* __cdecl QListBoxItem_create(QListBoxH* listbox)/* overload */
{
	return QListBoxItem_create(listbox);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBoxItem_destroy(QListBoxItemH* handle)
{
	QListBoxItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxItemH* __cdecl QListBoxItem_create(QListBoxH* listbox, QListBoxItemH* after)/* overload */
{
	return QListBoxItem_create(listbox, after);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBoxItem_text(QListBoxItemH* handle, System::PWideString retval)
{
	QListBoxItem_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QListBoxItem_pixmap(QListBoxItemH* handle)
{
	return QListBoxItem_pixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBoxItem_height(QListBoxItemH* handle, QListBoxH* p1)
{
	return QListBoxItem_height(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBoxItem_width(QListBoxItemH* handle, QListBoxH* p1)
{
	return QListBoxItem_width(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBoxItem_selected(QListBoxItemH* handle)
{
	return QListBoxItem_selected(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBoxItem_current(QListBoxItemH* handle)
{
	return QListBoxItem_current(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxH* __cdecl QListBoxItem_listBox(QListBoxItemH* handle)
{
	return QListBoxItem_listBox(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBoxItem_setSelectable(QListBoxItemH* handle, bool b)
{
	QListBoxItem_setSelectable(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListBoxItem_isSelectable(QListBoxItemH* handle)
{
	return QListBoxItem_isSelectable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxItemH* __cdecl QListBoxItem_next(QListBoxItemH* handle)
{
	return QListBoxItem_next(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxItemH* __cdecl QListBoxItem_prev(QListBoxItemH* handle)
{
	return QListBoxItem_prev(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxTextH* __cdecl QListBoxText_create(QListBoxH* listbox, System::PWideString text)/* overload */
{
	return QListBoxText_create(listbox, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBoxText_destroy(QListBoxTextH* handle)
{
	QListBoxText_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxTextH* __cdecl QListBoxText_create(System::PWideString text)/* overload */
{
	return QListBoxText_create(text);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxTextH* __cdecl QListBoxText_create(QListBoxH* listbox, System::PWideString text, QListBoxItemH* after)/* overload */
{
	return QListBoxText_create(listbox, text, after);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBoxText_height(QListBoxTextH* handle, QListBoxH* p1)
{
	return QListBoxText_height(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBoxText_width(QListBoxTextH* handle, QListBoxH* p1)
{
	return QListBoxText_width(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxPixmapH* __cdecl QListBoxPixmap_create(QListBoxH* listbox, QPixmapH* p2)/* overload */
{
	return QListBoxPixmap_create(listbox, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBoxPixmap_destroy(QListBoxPixmapH* handle)
{
	QListBoxPixmap_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxPixmapH* __cdecl QListBoxPixmap_create(QPixmapH* p1)/* overload */
{
	return QListBoxPixmap_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxPixmapH* __cdecl QListBoxPixmap_create(QListBoxH* listbox, QPixmapH* pix, QListBoxItemH* after)/* overload */
{
	return QListBoxPixmap_create(listbox, pix, after);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxPixmapH* __cdecl QListBoxPixmap_create(QListBoxH* listbox, QPixmapH* p2, System::PWideString p3)/* overload */
{
	return QListBoxPixmap_create(listbox, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxPixmapH* __cdecl QListBoxPixmap_create(QPixmapH* p1, System::PWideString p2)/* overload */
{
	return QListBoxPixmap_create(p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QListBoxPixmapH* __cdecl QListBoxPixmap_create(QListBoxH* listbox, QPixmapH* pix, System::PWideString p3, QListBoxItemH* after)/* overload */
{
	return QListBoxPixmap_create(listbox, pix, p3, after);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QListBoxPixmap_pixmap(QListBoxPixmapH* handle)
{
	return QListBoxPixmap_pixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBoxPixmap_height(QListBoxPixmapH* handle, QListBoxH* p1)
{
	return QListBoxPixmap_height(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListBoxPixmap_width(QListBoxPixmapH* handle, QListBoxH* p1)
{
	return QListBoxPixmap_width(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_create(QListViewH* parent)/* overload */
{
	return QListViewItem_create(parent);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_destroy(QListViewItemH* handle)
{
	QListViewItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_create(QListViewItemH* parent)/* overload */
{
	return QListViewItem_create(parent);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_create(QListViewH* parent, QListViewItemH* after)/* overload */
{
	return QListViewItem_create(parent, after);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_create(QListViewItemH* parent, QListViewItemH* after)/* overload */
{
	return QListViewItem_create(parent, after);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_create(QListViewH* parent, System::PWideString p2, System::PWideString p3, System::PWideString p4, System::PWideString p5, System::PWideString p6, System::PWideString p7, System::PWideString p8, System::PWideString p9)/* overload */
{
	return QListViewItem_create(parent, p2, p3, p4, p5, p6, p7, p8, p9);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_create(QListViewItemH* parent, System::PWideString p2, System::PWideString p3, System::PWideString p4, System::PWideString p5, System::PWideString p6, System::PWideString p7, System::PWideString p8, System::PWideString p9)/* overload */
{
	return QListViewItem_create(parent, p2, p3, p4, p5, p6, p7, p8, p9);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_create(QListViewH* parent, QListViewItemH* after, System::PWideString p3, System::PWideString p4, System::PWideString p5, System::PWideString p6, System::PWideString p7, System::PWideString p8, System::PWideString p9, System::PWideString p10)/* overload */
{
	return QListViewItem_create(parent, after, p3, p4, p5, p6, p7, p8, p9, p10);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_create(QListViewItemH* parent, QListViewItemH* after, System::PWideString p3, System::PWideString p4, System::PWideString p5, System::PWideString p6, System::PWideString p7, System::PWideString p8, System::PWideString p9, System::PWideString p10)/* overload */
{
	return QListViewItem_create(parent, after, p3, p4, p5, p6, p7, p8, p9, p10);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_insertItem(QListViewItemH* handle, QListViewItemH* p1)
{
	QListViewItem_insertItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_takeItem(QListViewItemH* handle, QListViewItemH* p1)
{
	QListViewItem_takeItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_removeItem(QListViewItemH* handle, QListViewItemH* p1)
{
	QListViewItem_removeItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListViewItem_height(QListViewItemH* handle)
{
	return QListViewItem_height(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_invalidateHeight(QListViewItemH* handle)
{
	QListViewItem_invalidateHeight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListViewItem_totalHeight(QListViewItemH* handle)
{
	return QListViewItem_totalHeight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListViewItem_width(QListViewItemH* handle, QFontMetricsH* p1, QListViewH* p2, int column)
{
	return QListViewItem_width(handle, p1, p2, column);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_widthChanged(QListViewItemH* handle, int column)
{
	QListViewItem_widthChanged(handle, column);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListViewItem_depth(QListViewItemH* handle)
{
	return QListViewItem_depth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_setText(QListViewItemH* handle, int p1, System::PWideString p2)
{
	QListViewItem_setText(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_text(QListViewItemH* handle, System::PWideString retval, int p1)
{
	QListViewItem_text(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_setPixmap(QListViewItemH* handle, int p1, QPixmapH* p2)
{
	QListViewItem_setPixmap(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QListViewItem_pixmap(QListViewItemH* handle, int p1)
{
	return QListViewItem_pixmap(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_key(QListViewItemH* handle, System::PWideString retval, int p1, bool p2)
{
	QListViewItem_key(handle, retval, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_sortChildItems(QListViewItemH* handle, int p1, bool p2)
{
	QListViewItem_sortChildItems(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListViewItem_childCount(QListViewItemH* handle)
{
	return QListViewItem_childCount(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListViewItem_isOpen(QListViewItemH* handle)
{
	return QListViewItem_isOpen(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_setOpen(QListViewItemH* handle, bool p1)
{
	QListViewItem_setOpen(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_setup(QListViewItemH* handle)
{
	QListViewItem_setup(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_setSelected(QListViewItemH* handle, bool p1)
{
	QListViewItem_setSelected(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListViewItem_isSelected(QListViewItemH* handle)
{
	return QListViewItem_isSelected(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_paintCell(QListViewItemH* handle, QPainterH* p1, QColorGroupH* cg, int column, int width, int alignment)
{
	QListViewItem_paintCell(handle, p1, cg, column, width, alignment);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_paintBranches(QListViewItemH* handle, QPainterH* p, QColorGroupH* cg, int w, int y, int h, GUIStyle s)
{
	QListViewItem_paintBranches(handle, p, cg, w, y, h, s);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_paintFocus(QListViewItemH* handle, QPainterH* p1, QColorGroupH* cg, Types::PRect r)
{
	QListViewItem_paintFocus(handle, p1, cg, r);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_firstChild(QListViewItemH* handle)
{
	return QListViewItem_firstChild(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_nextSibling(QListViewItemH* handle)
{
	return QListViewItem_nextSibling(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_parent(QListViewItemH* handle)
{
	return QListViewItem_parent(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_itemAbove(QListViewItemH* handle)
{
	return QListViewItem_itemAbove(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItem_itemBelow(QListViewItemH* handle)
{
	return QListViewItem_itemBelow(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListViewItem_itemPos(QListViewItemH* handle)
{
	return QListViewItem_itemPos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewH* __cdecl QListViewItem_listView(QListViewItemH* handle)
{
	return QListViewItem_listView(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_setSelectable(QListViewItemH* handle, bool enable)
{
	QListViewItem_setSelectable(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListViewItem_isSelectable(QListViewItemH* handle)
{
	return QListViewItem_isSelectable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_setExpandable(QListViewItemH* handle, bool p1)
{
	QListViewItem_setExpandable(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListViewItem_isExpandable(QListViewItemH* handle)
{
	return QListViewItem_isExpandable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_repaint(QListViewItemH* handle)
{
	QListViewItem_repaint(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_sort(QListViewItemH* handle)
{
	QListViewItem_sort(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_moveItem(QListViewItemH* handle, QListViewItemH* after)
{
	QListViewItem_moveItem(handle, after);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewH* __cdecl QListView_create(QWidgetH* parent, char * name, int f)/* overload */
{
	return QListView_create(parent, name, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_destroy(QListViewH* handle)
{
	QListView_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewH* __cdecl QListView_create(QWidgetH* parent, char * name)/* overload */
{
	return QListView_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListView_treeStepSize(QListViewH* handle)
{
	return QListView_treeStepSize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setTreeStepSize(QListViewH* handle, int p1)
{
	QListView_setTreeStepSize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_insertItem(QListViewH* handle, QListViewItemH* p1)
{
	QListView_insertItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_takeItem(QListViewH* handle, QListViewItemH* p1)
{
	QListView_takeItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_removeItem(QListViewH* handle, QListViewItemH* p1)
{
	QListView_removeItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_clear(QListViewH* handle)
{
	QListView_clear(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QHeaderH* __cdecl QListView_header(QListViewH* handle)
{
	return QListView_header(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListView_addColumn(QListViewH* handle, System::PWideString _label, int size)/* overload */
{
	return QListView_addColumn(handle, _label, size);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListView_addColumn(QListViewH* handle, QIconSetH* iconset, System::PWideString _label, int size)/* overload */
{
	return QListView_addColumn(handle, iconset, _label, size);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_removeColumn(QListViewH* handle, int index)
{
	QListView_removeColumn(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setColumnText(QListViewH* handle, int column, System::PWideString _label)/* overload */
{
	QListView_setColumnText(handle, column, _label);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setColumnText(QListViewH* handle, int column, QIconSetH* iconset, System::PWideString _label)/* overload */
{
	QListView_setColumnText(handle, column, iconset, _label);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_columnText(QListViewH* handle, System::PWideString retval, int column)
{
	QListView_columnText(handle, retval, column);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setColumnWidth(QListViewH* handle, int column, int width)
{
	QListView_setColumnWidth(handle, column, width);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListView_columnWidth(QListViewH* handle, int column)
{
	return QListView_columnWidth(handle, column);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setColumnWidthMode(QListViewH* handle, int column, QListViewWidthMode p2)
{
	QListView_setColumnWidthMode(handle, column, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewWidthMode __cdecl QListView_columnWidthMode(QListViewH* handle, int column)
{
	return QListView_columnWidthMode(handle, column);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListView_columns(QListViewH* handle)
{
	return QListView_columns(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setColumnAlignment(QListViewH* handle, int p1, int p2)
{
	QListView_setColumnAlignment(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListView_columnAlignment(QListViewH* handle, int p1)
{
	return QListView_columnAlignment(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_show(QListViewH* handle)
{
	QListView_show(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListView_itemAt(QListViewH* handle, Types::PPoint screenPos)
{
	return QListView_itemAt(handle, screenPos);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_itemRect(QListViewH* handle, Types::PRect retval, QListViewItemH* p1)
{
	QListView_itemRect(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListView_itemPos(QListViewH* handle, QListViewItemH* p1)
{
	return QListView_itemPos(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_ensureItemVisible(QListViewH* handle, QListViewItemH* p1)
{
	QListView_ensureItemVisible(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_repaintItem(QListViewH* handle, QListViewItemH* p1)
{
	QListView_repaintItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setMultiSelection(QListViewH* handle, bool enable)
{
	QListView_setMultiSelection(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListView_isMultiSelection(QListViewH* handle)
{
	return QListView_isMultiSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setSelectionMode(QListViewH* handle, QListViewSelectionMode mode)
{
	QListView_setSelectionMode(handle, mode);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewSelectionMode __cdecl QListView_selectionMode(QListViewH* handle)
{
	return QListView_selectionMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_clearSelection(QListViewH* handle)
{
	QListView_clearSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setSelected(QListViewH* handle, QListViewItemH* p1, bool p2)
{
	QListView_setSelected(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListView_isSelected(QListViewH* handle, QListViewItemH* p1)
{
	return QListView_isSelected(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListView_selectedItem(QListViewH* handle)
{
	return QListView_selectedItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setOpen(QListViewH* handle, QListViewItemH* p1, bool p2)
{
	QListView_setOpen(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListView_isOpen(QListViewH* handle, QListViewItemH* p1)
{
	return QListView_isOpen(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setCurrentItem(QListViewH* handle, QListViewItemH* p1)
{
	QListView_setCurrentItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListView_currentItem(QListViewH* handle)
{
	return QListView_currentItem(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListView_firstChild(QListViewH* handle)
{
	return QListView_firstChild(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListView_childCount(QListViewH* handle)
{
	return QListView_childCount(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setAllColumnsShowFocus(QListViewH* handle, bool p1)
{
	QListView_setAllColumnsShowFocus(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListView_allColumnsShowFocus(QListViewH* handle)
{
	return QListView_allColumnsShowFocus(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setItemMargin(QListViewH* handle, int p1)
{
	QListView_setItemMargin(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QListView_itemMargin(QListViewH* handle)
{
	return QListView_itemMargin(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setRootIsDecorated(QListViewH* handle, bool p1)
{
	QListView_setRootIsDecorated(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListView_rootIsDecorated(QListViewH* handle)
{
	return QListView_rootIsDecorated(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setSorting(QListViewH* handle, int column, bool increasing)
{
	QListView_setSorting(handle, column, increasing);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_sort(QListViewH* handle)
{
	QListView_sort(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setFont(QListViewH* handle, QFontH* p1)
{
	QListView_setFont(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setPalette(QListViewH* handle, QPaletteH* p1)
{
	QListView_setPalette(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListView_eventFilter(QListViewH* handle, QObjectH* o, QEventH* p2)
{
	return QListView_eventFilter(handle, o, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_sizeHint(QListViewH* handle, Types::PSize retval)
{
	QListView_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_minimumSizeHint(QListViewH* handle, Types::PSize retval)
{
	QListView_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setShowSortIndicator(QListViewH* handle, bool show)
{
	QListView_setShowSortIndicator(handle, show);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QListView_showSortIndicator(QListViewH* handle)
{
	return QListView_showSortIndicator(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_invertSelection(QListViewH* handle)
{
	QListView_invertSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_selectAll(QListViewH* handle, bool select)
{
	QListView_selectAll(handle, select);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_triggerUpdate(QListViewH* handle)
{
	QListView_triggerUpdate(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_setContentsPos(QListViewH* handle, int x, int y)
{
	QListView_setContentsPos(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline QCheckListItemH* __cdecl QCheckListItem_create(QCheckListItemH* parent, System::PWideString text, QCheckListItemType p3)/* overload */
{
	return QCheckListItem_create(parent, text, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckListItem_destroy(QCheckListItemH* handle)
{
	QCheckListItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCheckListItemH* __cdecl QCheckListItem_create(QListViewItemH* parent, System::PWideString text, QCheckListItemType p3)/* overload */
{
	return QCheckListItem_create(parent, text, p3);
}
#pragma option pop


#pragma option push -w-inl
inline QCheckListItemH* __cdecl QCheckListItem_create(QListViewH* parent, System::PWideString text, QCheckListItemType p3)/* overload */
{
	return QCheckListItem_create(parent, text, p3);
}
#pragma option pop


#pragma option push -w-inl
inline QCheckListItemH* __cdecl QCheckListItem_create(QListViewItemH* parent, System::PWideString text, QPixmapH* p3)/* overload */
{
	return QCheckListItem_create(parent, text, p3);
}
#pragma option pop


#pragma option push -w-inl
inline QCheckListItemH* __cdecl QCheckListItem_create(QListViewH* parent, System::PWideString text, QPixmapH* p3)/* overload */
{
	return QCheckListItem_create(parent, text, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckListItem_paintCell(QCheckListItemH* handle, QPainterH* p1, QColorGroupH* cg, int column, int width, int alignment)
{
	QCheckListItem_paintCell(handle, p1, cg, column, width, alignment);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckListItem_paintFocus(QCheckListItemH* handle, QPainterH* p1, QColorGroupH* cg, Types::PRect r)
{
	QCheckListItem_paintFocus(handle, p1, cg, r);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QCheckListItem_width(QCheckListItemH* handle, QFontMetricsH* p1, QListViewH* p2, int column)
{
	return QCheckListItem_width(handle, p1, p2, column);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckListItem_setup(QCheckListItemH* handle)
{
	QCheckListItem_setup(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckListItem_setOn(QCheckListItemH* handle, bool p1)
{
	QCheckListItem_setOn(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QCheckListItem_isOn(QCheckListItemH* handle)
{
	return QCheckListItem_isOn(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCheckListItemType __cdecl QCheckListItem_type(QCheckListItemH* handle)
{
	return QCheckListItem_type(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckListItem_text(QCheckListItemH* handle, System::PWideString retval)/* overload */
{
	QCheckListItem_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckListItem_text(QCheckListItemH* handle, System::PWideString retval, int n)/* overload */
{
	QCheckListItem_text(handle, retval, n);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckListItem_setEnabled(QCheckListItemH* handle, bool b)
{
	QCheckListItem_setEnabled(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QCheckListItem_isEnabled(QCheckListItemH* handle)
{
	return QCheckListItem_isEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemIteratorH* __cdecl QListViewItemIterator_create(void)/* overload */
{
	return QListViewItemIterator_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItemIterator_destroy(QListViewItemIteratorH* handle)
{
	QListViewItemIterator_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemIteratorH* __cdecl QListViewItemIterator_create(QListViewItemH* item)/* overload */
{
	return QListViewItemIterator_create(item);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemIteratorH* __cdecl QListViewItemIterator_create(QListViewItemIteratorH* it)/* overload */
{
	return QListViewItemIterator_create(it);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemIteratorH* __cdecl QListViewItemIterator_create(QListViewH* lv)/* overload */
{
	return QListViewItemIterator_create(lv);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItemH* __cdecl QListViewItemIterator_current(QListViewItemIteratorH* handle)
{
	return QListViewItemIterator_current(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMenuBarH* __cdecl QMenuBar_create(QWidgetH* parent, char * name)
{
	return QMenuBar_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_destroy(QMenuBarH* handle)
{
	QMenuBar_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_updateItem(QMenuBarH* handle, int id)
{
	QMenuBar_updateItem(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_show(QMenuBarH* handle)
{
	QMenuBar_show(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_hide(QMenuBarH* handle)
{
	QMenuBar_hide(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuBar_eventFilter(QMenuBarH* handle, QObjectH* p1, QEventH* p2)
{
	return QMenuBar_eventFilter(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuBar_heightForWidth(QMenuBarH* handle, int p1)
{
	return QMenuBar_heightForWidth(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QMenuBarSeparator __cdecl QMenuBar_separator(QMenuBarH* handle)
{
	return QMenuBar_separator(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_setSeparator(QMenuBarH* handle, QMenuBarSeparator when)
{
	QMenuBar_setSeparator(handle, when);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_setDefaultUp(QMenuBarH* handle, bool p1)
{
	QMenuBar_setDefaultUp(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuBar_isDefaultUp(QMenuBarH* handle)
{
	return QMenuBar_isDefaultUp(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuBar_customWhatsThis(QMenuBarH* handle)
{
	return QMenuBar_customWhatsThis(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_sizeHint(QMenuBarH* handle, Types::PSize retval)
{
	QMenuBar_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_minimumSize(QMenuBarH* handle, Types::PSize retval)
{
	QMenuBar_minimumSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_minimumSizeHint(QMenuBarH* handle, Types::PSize retval)
{
	QMenuBar_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_activateItemAt(QMenuBarH* handle, int index)
{
	QMenuBar_activateItemAt(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline QMenuDataH* __cdecl QMenuBar_to_QMenuData(QMenuBarH* handle)
{
	return QMenuBar_to_QMenuData(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMessageBoxH* __cdecl QMessageBox_create(QWidgetH* parent, char * name)/* overload */
{
	return QMessageBox_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_destroy(QMessageBoxH* handle)
{
	QMessageBox_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMessageBoxH* __cdecl QMessageBox_create(System::PWideString caption, System::PWideString text, QMessageBoxIcon icon, int button0, int button1, int button2, QWidgetH* parent, char * name, bool modal, int f)/* overload */
{
	return QMessageBox_create(caption, text, icon, button0, button1, button2, parent, name, modal, f);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMessageBox_information(QWidgetH* parent, System::PWideString caption, System::PWideString text, int button0, int button1, int button2)/* overload */
{
	return QMessageBox_information(parent, caption, text, button0, button1, button2);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMessageBox_information(QWidgetH* parent, System::PWideString caption, System::PWideString text, System::PWideString button0Text, System::PWideString button1Text, System::PWideString button2Text, int defaultButtonNumber, int escapeButtonNumber)/* overload */
{
	return QMessageBox_information(parent, caption, text, button0Text, button1Text, button2Text, defaultButtonNumber, escapeButtonNumber);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMessageBox_warning(QWidgetH* parent, System::PWideString caption, System::PWideString text, int button0, int button1, int button2)/* overload */
{
	return QMessageBox_warning(parent, caption, text, button0, button1, button2);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMessageBox_warning(QWidgetH* parent, System::PWideString caption, System::PWideString text, System::PWideString button0Text, System::PWideString button1Text, System::PWideString button2Text, int defaultButtonNumber, int escapeButtonNumber)/* overload */
{
	return QMessageBox_warning(parent, caption, text, button0Text, button1Text, button2Text, defaultButtonNumber, escapeButtonNumber);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMessageBox_critical(QWidgetH* parent, System::PWideString caption, System::PWideString text, int button0, int button1, int button2)/* overload */
{
	return QMessageBox_critical(parent, caption, text, button0, button1, button2);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMessageBox_critical(QWidgetH* parent, System::PWideString caption, System::PWideString text, System::PWideString button0Text, System::PWideString button1Text, System::PWideString button2Text, int defaultButtonNumber, int escapeButtonNumber)/* overload */
{
	return QMessageBox_critical(parent, caption, text, button0Text, button1Text, button2Text, defaultButtonNumber, escapeButtonNumber);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_about(QWidgetH* parent, System::PWideString caption, System::PWideString text)
{
	QMessageBox_about(parent, caption, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_aboutQt(QWidgetH* parent, System::PWideString caption)
{
	QMessageBox_aboutQt(parent, caption);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMessageBox_message(System::PWideString caption, System::PWideString text, System::PWideString buttonText, QWidgetH* parent, char * name)
{
	return QMessageBox_message(caption, text, buttonText, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMessageBox_query(System::PWideString caption, System::PWideString text, System::PWideString yesButtonText, System::PWideString noButtonText, QWidgetH* parent, char * name)
{
	return QMessageBox_query(caption, text, yesButtonText, noButtonText, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_text(QMessageBoxH* handle, System::PWideString retval)
{
	QMessageBox_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_setText(QMessageBoxH* handle, System::PWideString p1)
{
	QMessageBox_setText(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QMessageBoxIcon __cdecl QMessageBox_icon(QMessageBoxH* handle)
{
	return QMessageBox_icon(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_setIcon(QMessageBoxH* handle, QMessageBoxIcon p1)/* overload */
{
	QMessageBox_setIcon(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_setIcon(QMessageBoxH* handle, QPixmapH* p1)/* overload */
{
	QMessageBox_setIcon(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QMessageBox_iconPixmap(QMessageBoxH* handle)
{
	return QMessageBox_iconPixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_setIconPixmap(QMessageBoxH* handle, QPixmapH* p1)
{
	QMessageBox_setIconPixmap(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_buttonText(QMessageBoxH* handle, System::PWideString retval, int button)
{
	QMessageBox_buttonText(handle, retval, button);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_setButtonText(QMessageBoxH* handle, int button, System::PWideString p2)
{
	QMessageBox_setButtonText(handle, button, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_adjustSize(QMessageBoxH* handle)
{
	QMessageBox_adjustSize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_standardIcon(QPixmapH* retval, QMessageBoxIcon icon, GUIStyle style)
{
	QMessageBox_standardIcon(retval, icon, style);
}
#pragma option pop


#pragma option push -w-inl
inline TextFormat __cdecl QMessageBox_textFormat(QMessageBoxH* handle)
{
	return QMessageBox_textFormat(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_setTextFormat(QMessageBoxH* handle, TextFormat p1)
{
	QMessageBox_setTextFormat(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QMultiLineEditH* __cdecl QMultiLineEdit_create(QWidgetH* parent, char * name)
{
	return QMultiLineEdit_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_destroy(QMultiLineEditH* handle)
{
	QMultiLineEdit_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_textLine(QMultiLineEditH* handle, System::PWideString retval, int line)
{
	QMultiLineEdit_textLine(handle, retval, line);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_numLines(QMultiLineEditH* handle)
{
	return QMultiLineEdit_numLines(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_sizeHint(QMultiLineEditH* handle, Types::PSize retval)
{
	QMultiLineEdit_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_minimumSizeHint(QMultiLineEditH* handle, Types::PSize retval)
{
	QMultiLineEdit_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_sizePolicy(QMultiLineEditH* handle, PSizePolicy retval)
{
	QMultiLineEdit_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setFont(QMultiLineEditH* handle, QFontH* font)
{
	QMultiLineEdit_setFont(handle, font);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_insertLine(QMultiLineEditH* handle, System::PWideString s, int line)
{
	QMultiLineEdit_insertLine(handle, s, line);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_insertAt(QMultiLineEditH* handle, System::PWideString s, int line, int col, bool mark)
{
	QMultiLineEdit_insertAt(handle, s, line, col, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_removeLine(QMultiLineEditH* handle, int line)
{
	QMultiLineEdit_removeLine(handle, line);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_cursorPosition(QMultiLineEditH* handle, PInteger line, PInteger col)
{
	QMultiLineEdit_cursorPosition(handle, line, col);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setCursorPosition(QMultiLineEditH* handle, int line, int col, bool mark)
{
	QMultiLineEdit_setCursorPosition(handle, line, col, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_getCursorPosition(QMultiLineEditH* handle, PInteger line, PInteger col)
{
	QMultiLineEdit_getCursorPosition(handle, line, col);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMultiLineEdit_atBeginning(QMultiLineEditH* handle)
{
	return QMultiLineEdit_atBeginning(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMultiLineEdit_atEnd(QMultiLineEditH* handle)
{
	return QMultiLineEdit_atEnd(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setFixedVisibleLines(QMultiLineEditH* handle, int lines)
{
	QMultiLineEdit_setFixedVisibleLines(handle, lines);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_maxLineWidth(QMultiLineEditH* handle)
{
	return QMultiLineEdit_maxLineWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setAlignment(QMultiLineEditH* handle, int flags)
{
	QMultiLineEdit_setAlignment(handle, flags);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_alignment(QMultiLineEditH* handle)
{
	return QMultiLineEdit_alignment(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setValidator(QMultiLineEditH* handle, QValidatorH* p1)
{
	QMultiLineEdit_setValidator(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QValidatorH* __cdecl QMultiLineEdit_validator(QMultiLineEditH* handle)
{
	return QMultiLineEdit_validator(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setEdited(QMultiLineEditH* handle, bool p1)
{
	QMultiLineEdit_setEdited(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMultiLineEdit_edited(QMultiLineEditH* handle)
{
	return QMultiLineEdit_edited(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_cursorWordForward(QMultiLineEditH* handle, bool mark)
{
	QMultiLineEdit_cursorWordForward(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_cursorWordBackward(QMultiLineEditH* handle, bool mark)
{
	QMultiLineEdit_cursorWordBackward(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setEchoMode(QMultiLineEditH* handle, QMultiLineEditEchoMode p1)
{
	QMultiLineEdit_setEchoMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QMultiLineEditEchoMode __cdecl QMultiLineEdit_echoMode(QMultiLineEditH* handle)
{
	return QMultiLineEdit_echoMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setMaxLength(QMultiLineEditH* handle, int p1)
{
	QMultiLineEdit_setMaxLength(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_maxLength(QMultiLineEditH* handle)
{
	return QMultiLineEdit_maxLength(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setMaxLineLength(QMultiLineEditH* handle, int p1)
{
	QMultiLineEdit_setMaxLineLength(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_maxLineLength(QMultiLineEditH* handle)
{
	return QMultiLineEdit_maxLineLength(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setMaxLines(QMultiLineEditH* handle, int p1)
{
	QMultiLineEdit_setMaxLines(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_maxLines(QMultiLineEditH* handle)
{
	return QMultiLineEdit_maxLines(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setHMargin(QMultiLineEditH* handle, int p1)
{
	QMultiLineEdit_setHMargin(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_hMargin(QMultiLineEditH* handle)
{
	return QMultiLineEdit_hMargin(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setSelection(QMultiLineEditH* handle, int row_from, int col_from, int row_to, int col_t)
{
	QMultiLineEdit_setSelection(handle, row_from, col_from, row_to, col_t);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setWordWrap(QMultiLineEditH* handle, QMultiLineEditWordWrap mode)
{
	QMultiLineEdit_setWordWrap(handle, mode);
}
#pragma option pop


#pragma option push -w-inl
inline QMultiLineEditWordWrap __cdecl QMultiLineEdit_wordWrap(QMultiLineEditH* handle)
{
	return QMultiLineEdit_wordWrap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setWrapColumnOrWidth(QMultiLineEditH* handle, int p1)
{
	QMultiLineEdit_setWrapColumnOrWidth(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_wrapColumnOrWidth(QMultiLineEditH* handle)
{
	return QMultiLineEdit_wrapColumnOrWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setWrapPolicy(QMultiLineEditH* handle, QMultiLineEditWrapPolicy policy)
{
	QMultiLineEdit_setWrapPolicy(handle, policy);
}
#pragma option pop


#pragma option push -w-inl
inline QMultiLineEditWrapPolicy __cdecl QMultiLineEdit_wrapPolicy(QMultiLineEditH* handle)
{
	return QMultiLineEdit_wrapPolicy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMultiLineEdit_autoUpdate(QMultiLineEditH* handle)
{
	return QMultiLineEdit_autoUpdate(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setAutoUpdate(QMultiLineEditH* handle, bool p1)
{
	QMultiLineEdit_setAutoUpdate(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setUndoEnabled(QMultiLineEditH* handle, bool p1)
{
	QMultiLineEdit_setUndoEnabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMultiLineEdit_isUndoEnabled(QMultiLineEditH* handle)
{
	return QMultiLineEdit_isUndoEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setUndoDepth(QMultiLineEditH* handle, int p1)
{
	QMultiLineEdit_setUndoDepth(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_undoDepth(QMultiLineEditH* handle)
{
	return QMultiLineEdit_undoDepth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMultiLineEdit_isReadOnly(QMultiLineEditH* handle)
{
	return QMultiLineEdit_isReadOnly(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMultiLineEdit_isOverwriteMode(QMultiLineEditH* handle)
{
	return QMultiLineEdit_isOverwriteMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_text(QMultiLineEditH* handle, System::PWideString retval)
{
	QMultiLineEdit_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_length(QMultiLineEditH* handle)
{
	return QMultiLineEdit_length(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setDefaultTabStop(int ex)
{
	QMultiLineEdit_setDefaultTabStop(ex);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMultiLineEdit_defaultTabStop(void)
{
	return QMultiLineEdit_defaultTabStop();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setText(QMultiLineEditH* handle, System::PWideString p1)
{
	QMultiLineEdit_setText(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setReadOnly(QMultiLineEditH* handle, bool p1)
{
	QMultiLineEdit_setReadOnly(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_setOverwriteMode(QMultiLineEditH* handle, bool p1)
{
	QMultiLineEdit_setOverwriteMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_clear(QMultiLineEditH* handle)
{
	QMultiLineEdit_clear(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_append(QMultiLineEditH* handle, System::PWideString p1)
{
	QMultiLineEdit_append(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_deselect(QMultiLineEditH* handle)
{
	QMultiLineEdit_deselect(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_selectAll(QMultiLineEditH* handle)
{
	QMultiLineEdit_selectAll(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_paste(QMultiLineEditH* handle)
{
	QMultiLineEdit_paste(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_pasteSubType(QMultiLineEditH* handle, System::PAnsiString subtype)
{
	QMultiLineEdit_pasteSubType(handle, subtype);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_copyText(QMultiLineEditH* handle)
{
	QMultiLineEdit_copyText(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_copy(QMultiLineEditH* handle)
{
	QMultiLineEdit_copy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_cut(QMultiLineEditH* handle)
{
	QMultiLineEdit_cut(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_insert(QMultiLineEditH* handle, System::PWideString p1)
{
	QMultiLineEdit_insert(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_undo(QMultiLineEditH* handle)
{
	QMultiLineEdit_undo(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_redo(QMultiLineEditH* handle)
{
	QMultiLineEdit_redo(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollViewH* __cdecl QScrollView_create(QWidgetH* parent, char * name, int f)
{
	return QScrollView_create(parent, name, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_destroy(QScrollViewH* handle)
{
	QScrollView_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_setResizePolicy(QScrollViewH* handle, QScrollViewResizePolicy p1)
{
	QScrollView_setResizePolicy(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollViewResizePolicy __cdecl QScrollView_resizePolicy(QScrollViewH* handle)
{
	return QScrollView_resizePolicy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_styleChange(QScrollViewH* handle, QStyleH* p1)
{
	QScrollView_styleChange(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_removeChild(QScrollViewH* handle, QWidgetH* child)/* overload */
{
	QScrollView_removeChild(handle, child);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_addChild(QScrollViewH* handle, QWidgetH* child, int x, int y)
{
	QScrollView_addChild(handle, child, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_moveChild(QScrollViewH* handle, QWidgetH* child, int x, int y)
{
	QScrollView_moveChild(handle, child, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollView_childX(QScrollViewH* handle, QWidgetH* child)
{
	return QScrollView_childX(handle, child);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollView_childY(QScrollViewH* handle, QWidgetH* child)
{
	return QScrollView_childY(handle, child);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QScrollView_childIsVisible(QScrollViewH* handle, QWidgetH* child)
{
	return QScrollView_childIsVisible(handle, child);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_showChild(QScrollViewH* handle, QWidgetH* child, bool yes)
{
	QScrollView_showChild(handle, child, yes);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollViewScrollBarMode __cdecl QScrollView_vScrollBarMode(QScrollViewH* handle)
{
	return QScrollView_vScrollBarMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_setVScrollBarMode(QScrollViewH* handle, QScrollViewScrollBarMode p1)
{
	QScrollView_setVScrollBarMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollViewScrollBarMode __cdecl QScrollView_hScrollBarMode(QScrollViewH* handle)
{
	return QScrollView_hScrollBarMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_setHScrollBarMode(QScrollViewH* handle, QScrollViewScrollBarMode p1)
{
	QScrollView_setHScrollBarMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QScrollView_cornerWidget(QScrollViewH* handle)
{
	return QScrollView_cornerWidget(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_setCornerWidget(QScrollViewH* handle, QWidgetH* p1)
{
	QScrollView_setCornerWidget(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollBarH* __cdecl QScrollView_horizontalScrollBar(QScrollViewH* handle)
{
	return QScrollView_horizontalScrollBar(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollBarH* __cdecl QScrollView_verticalScrollBar(QScrollViewH* handle)
{
	return QScrollView_verticalScrollBar(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QScrollView_viewport(QScrollViewH* handle)
{
	return QScrollView_viewport(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QScrollView_clipper(QScrollViewH* handle)
{
	return QScrollView_clipper(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollView_visibleWidth(QScrollViewH* handle)
{
	return QScrollView_visibleWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollView_visibleHeight(QScrollViewH* handle)
{
	return QScrollView_visibleHeight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollView_contentsWidth(QScrollViewH* handle)
{
	return QScrollView_contentsWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollView_contentsHeight(QScrollViewH* handle)
{
	return QScrollView_contentsHeight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollView_contentsX(QScrollViewH* handle)
{
	return QScrollView_contentsX(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollView_contentsY(QScrollViewH* handle)
{
	return QScrollView_contentsY(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_resize(QScrollViewH* handle, int w, int h)/* overload */
{
	QScrollView_resize(handle, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_resize(QScrollViewH* handle, Types::PSize p1)/* overload */
{
	QScrollView_resize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_show(QScrollViewH* handle)
{
	QScrollView_show(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_updateContents(QScrollViewH* handle, int x, int y, int w, int h)/* overload */
{
	QScrollView_updateContents(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_updateContents(QScrollViewH* handle, Types::PRect r)/* overload */
{
	QScrollView_updateContents(handle, r);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_repaintContents(QScrollViewH* handle, int x, int y, int w, int h, bool erase)/* overload */
{
	QScrollView_repaintContents(handle, x, y, w, h, erase);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_repaintContents(QScrollViewH* handle, Types::PRect r, bool erase)/* overload */
{
	QScrollView_repaintContents(handle, r, erase);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_contentsToViewport(QScrollViewH* handle, int x, int y, PInteger vx, PInteger vy)/* overload */
{
	QScrollView_contentsToViewport(handle, x, y, vx, vy);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_viewportToContents(QScrollViewH* handle, int vx, int vy, PInteger x, PInteger y)/* overload */
{
	QScrollView_viewportToContents(handle, vx, vy, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_contentsToViewport(QScrollViewH* handle, Types::PPoint retval, Types::PPoint p1)/* overload */
{
	QScrollView_contentsToViewport(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_viewportToContents(QScrollViewH* handle, Types::PPoint retval, Types::PPoint p1)/* overload */
{
	QScrollView_viewportToContents(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_enableClipper(QScrollViewH* handle, bool y)
{
	QScrollView_enableClipper(handle, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_setStaticBackground(QScrollViewH* handle, bool y)
{
	QScrollView_setStaticBackground(handle, y);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QScrollView_hasStaticBackground(QScrollViewH* handle)
{
	return QScrollView_hasStaticBackground(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_viewportSize(QScrollViewH* handle, Types::PSize retval, int p1, int p2)
{
	QScrollView_viewportSize(handle, retval, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_sizePolicy(QScrollViewH* handle, PSizePolicy retval)
{
	QScrollView_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_sizeHint(QScrollViewH* handle, Types::PSize retval)
{
	QScrollView_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_minimumSizeHint(QScrollViewH* handle, Types::PSize retval)
{
	QScrollView_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_removeChild(QScrollViewH* handle, QObjectH* child)/* overload */
{
	QScrollView_removeChild(handle, child);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_setDragAutoScroll(QScrollViewH* handle, bool b)
{
	QScrollView_setDragAutoScroll(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QScrollView_dragAutoScroll(QScrollViewH* handle)
{
	return QScrollView_dragAutoScroll(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_resizeContents(QScrollViewH* handle, int w, int h)
{
	QScrollView_resizeContents(handle, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_scrollBy(QScrollViewH* handle, int dx, int dy)
{
	QScrollView_scrollBy(handle, dx, dy);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_setContentsPos(QScrollViewH* handle, int x, int y)
{
	QScrollView_setContentsPos(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_ensureVisible(QScrollViewH* handle, int x, int y)/* overload */
{
	QScrollView_ensureVisible(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_ensureVisible(QScrollViewH* handle, int x, int y, int xmargin, int ymargin)/* overload */
{
	QScrollView_ensureVisible(handle, x, y, xmargin, ymargin);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_center(QScrollViewH* handle, int x, int y)/* overload */
{
	QScrollView_center(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_center(QScrollViewH* handle, int x, int y, float xmargin, float ymargin)/* overload */
{
	QScrollView_center(handle, x, y, xmargin, ymargin);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_updateScrollBars(QScrollViewH* handle)
{
	QScrollView_updateScrollBars(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_setEnabled(QScrollViewH* handle, bool enable)
{
	QScrollView_setEnabled(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline QSliderH* __cdecl QSlider_create(QWidgetH* parent, char * name)/* overload */
{
	return QSlider_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_destroy(QSliderH* handle)
{
	QSlider_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QSliderH* __cdecl QSlider_create(Orientation p1, QWidgetH* parent, char * name)/* overload */
{
	return QSlider_create(p1, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline QSliderH* __cdecl QSlider_create(int minValue, int maxValue, int pageStep, int value, Orientation p5, QWidgetH* parent, char * name)/* overload */
{
	return QSlider_create(minValue, maxValue, pageStep, value, p5, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_setOrientation(QSliderH* handle, Orientation p1)
{
	QSlider_setOrientation(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline Orientation __cdecl QSlider_orientation(QSliderH* handle)
{
	return QSlider_orientation(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_setTracking(QSliderH* handle, bool enable)
{
	QSlider_setTracking(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QSlider_tracking(QSliderH* handle)
{
	return QSlider_tracking(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_setPalette(QSliderH* handle, QPaletteH* p1)
{
	QSlider_setPalette(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_sliderRect(QSliderH* handle, Types::PRect retval)
{
	QSlider_sliderRect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_sizeHint(QSliderH* handle, Types::PSize retval)
{
	QSlider_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_sizePolicy(QSliderH* handle, PSizePolicy retval)
{
	QSlider_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_minimumSizeHint(QSliderH* handle, Types::PSize retval)
{
	QSlider_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_setTickmarks(QSliderH* handle, QSliderTickSetting p1)
{
	QSlider_setTickmarks(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QSliderTickSetting __cdecl QSlider_tickmarks(QSliderH* handle)
{
	return QSlider_tickmarks(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_setTickInterval(QSliderH* handle, int p1)
{
	QSlider_setTickInterval(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSlider_tickInterval(QSliderH* handle)
{
	return QSlider_tickInterval(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSlider_minValue(QSliderH* handle)
{
	return QSlider_minValue(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSlider_maxValue(QSliderH* handle)
{
	return QSlider_maxValue(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_setMinValue(QSliderH* handle, int p1)
{
	QSlider_setMinValue(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_setMaxValue(QSliderH* handle, int p1)
{
	QSlider_setMaxValue(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSlider_lineStep(QSliderH* handle)
{
	return QSlider_lineStep(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSlider_pageStep(QSliderH* handle)
{
	return QSlider_pageStep(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_setLineStep(QSliderH* handle, int p1)
{
	QSlider_setLineStep(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_setPageStep(QSliderH* handle, int p1)
{
	QSlider_setPageStep(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSlider_value(QSliderH* handle)
{
	return QSlider_value(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_setValue(QSliderH* handle, int p1)
{
	QSlider_setValue(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_addStep(QSliderH* handle)
{
	QSlider_addStep(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_subtractStep(QSliderH* handle)
{
	QSlider_subtractStep(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QRangeControlH* __cdecl QSlider_to_QRangeControl(QSliderH* handle)
{
	return QSlider_to_QRangeControl(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QSocketNotifierH* __cdecl QSocketNotifier_create(int socket, QSocketNotifierType p2, QObjectH* parent, char * name)
{
	return QSocketNotifier_create(socket, p2, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSocketNotifier_destroy(QSocketNotifierH* handle)
{
	QSocketNotifier_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSocketNotifier_socket(QSocketNotifierH* handle)
{
	return QSocketNotifier_socket(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QSocketNotifierType __cdecl QSocketNotifier_type(QSocketNotifierH* handle)
{
	return QSocketNotifier_type(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QSocketNotifier_isEnabled(QSocketNotifierH* handle)
{
	return QSocketNotifier_isEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSocketNotifier_setEnabled(QSocketNotifierH* handle, bool p1)
{
	QSocketNotifier_setEnabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QSpinBoxH* __cdecl QSpinBox_create(QWidgetH* parent, char * name)/* overload */
{
	return QSpinBox_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_destroy(QSpinBoxH* handle)
{
	QSpinBox_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QSpinBoxH* __cdecl QSpinBox_create(int minValue, int maxValue, int step, QWidgetH* parent, char * name)/* overload */
{
	return QSpinBox_create(minValue, maxValue, step, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_text(QSpinBoxH* handle, System::PWideString retval)
{
	QSpinBox_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_prefix(QSpinBoxH* handle, System::PWideString retval)
{
	QSpinBox_prefix(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_suffix(QSpinBoxH* handle, System::PWideString retval)
{
	QSpinBox_suffix(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_cleanText(QSpinBoxH* handle, System::PWideString retval)
{
	QSpinBox_cleanText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setSpecialValueText(QSpinBoxH* handle, System::PWideString text)
{
	QSpinBox_setSpecialValueText(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_specialValueText(QSpinBoxH* handle, System::PWideString retval)
{
	QSpinBox_specialValueText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setWrapping(QSpinBoxH* handle, bool on)
{
	QSpinBox_setWrapping(handle, on);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QSpinBox_wrapping(QSpinBoxH* handle)
{
	return QSpinBox_wrapping(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setButtonSymbols(QSpinBoxH* handle, QSpinBoxButtonSymbols p1)
{
	QSpinBox_setButtonSymbols(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QSpinBoxButtonSymbols __cdecl QSpinBox_buttonSymbols(QSpinBoxH* handle)
{
	return QSpinBox_buttonSymbols(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setValidator(QSpinBoxH* handle, QValidatorH* v)
{
	QSpinBox_setValidator(handle, v);
}
#pragma option pop


#pragma option push -w-inl
inline QValidatorH* __cdecl QSpinBox_validator(QSpinBoxH* handle)
{
	return QSpinBox_validator(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_sizeHint(QSpinBoxH* handle, Types::PSize retval)
{
	QSpinBox_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_sizePolicy(QSpinBoxH* handle, PSizePolicy retval)
{
	QSpinBox_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSpinBox_minValue(QSpinBoxH* handle)
{
	return QSpinBox_minValue(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSpinBox_maxValue(QSpinBoxH* handle)
{
	return QSpinBox_maxValue(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setMinValue(QSpinBoxH* handle, int p1)
{
	QSpinBox_setMinValue(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setMaxValue(QSpinBoxH* handle, int p1)
{
	QSpinBox_setMaxValue(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSpinBox_lineStep(QSpinBoxH* handle)
{
	return QSpinBox_lineStep(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setLineStep(QSpinBoxH* handle, int p1)
{
	QSpinBox_setLineStep(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSpinBox_value(QSpinBoxH* handle)
{
	return QSpinBox_value(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setValue(QSpinBoxH* handle, int value)
{
	QSpinBox_setValue(handle, value);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setPrefix(QSpinBoxH* handle, System::PWideString text)
{
	QSpinBox_setPrefix(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setSuffix(QSpinBoxH* handle, System::PWideString text)
{
	QSpinBox_setSuffix(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_stepUp(QSpinBoxH* handle)
{
	QSpinBox_stepUp(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_stepDown(QSpinBoxH* handle)
{
	QSpinBox_stepDown(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_setEnabled(QSpinBoxH* handle, bool p1)
{
	QSpinBox_setEnabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QRangeControlH* __cdecl QSpinBox_to_QRangeControl(QSpinBoxH* handle)
{
	return QSpinBox_to_QRangeControl(handle);
}
#pragma option pop


#pragma option push -w-inl
inline GUIStyle __cdecl QStyle_guiStyle(QStyleH* handle)
{
	return QStyle_guiStyle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_polish(QStyleH* handle, QWidgetH* p1)/* overload */
{
	QStyle_polish(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_unPolish(QStyleH* handle, QWidgetH* p1)/* overload */
{
	QStyle_unPolish(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_polish(QStyleH* handle, QApplicationH* p1)/* overload */
{
	QStyle_polish(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_unPolish(QStyleH* handle, QApplicationH* p1)/* overload */
{
	QStyle_unPolish(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_polish(QStyleH* handle, QPaletteH* p1)/* overload */
{
	QStyle_polish(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_itemRect(QStyleH* handle, Types::PRect retval, QPainterH* p, int x, int y, int w, int h, int flags, bool enabled, QPixmapH* pixmap, System::PWideString text, int len)
{
	QStyle_itemRect(handle, retval, p, x, y, w, h, flags, enabled, pixmap, text, len);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawItem(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, int flags, QColorGroupH* g, bool enabled, QPixmapH* pixmap, System::PWideString text, int len, QColorH* penColor)
{
	QStyle_drawItem(handle, p, x, y, w, h, flags, g, enabled, pixmap, text, len, penColor);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawSeparator(QStyleH* handle, QPainterH* p, int x1, int y1, int x2, int y2, QColorGroupH* g, bool sunken, int lineWidth, int midLineWidth)
{
	QStyle_drawSeparator(handle, p, x1, y1, x2, y2, g, sunken, lineWidth, midLineWidth);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawRect(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorH* p6, int lineWidth, QBrushH* fill)
{
	QStyle_drawRect(handle, p, x, y, w, h, p6, lineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawRectStrong(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* p6, bool sunken, int lineWidth, int midLineWidth, QBrushH* fill)
{
	QStyle_drawRectStrong(handle, p, x, y, w, h, p6, sunken, lineWidth, midLineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawButton(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill)
{
	QStyle_drawButton(handle, p, x, y, w, h, g, sunken, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_buttonRect(QStyleH* handle, Types::PRect retval, int x, int y, int w, int h)
{
	QStyle_buttonRect(handle, retval, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawButtonMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h)
{
	QStyle_drawButtonMask(handle, p, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawBevelButton(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill)
{
	QStyle_drawBevelButton(handle, p, x, y, w, h, g, sunken, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_bevelButtonRect(QStyleH* handle, Types::PRect retval, int x, int y, int w, int h)
{
	QStyle_bevelButtonRect(handle, retval, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawToolButton(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill)/* overload */
{
	QStyle_drawToolButton(handle, p, x, y, w, h, g, sunken, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawToolButton(QStyleH* handle, QToolButtonH* btn, QPainterH* p)/* overload */
{
	QStyle_drawToolButton(handle, btn, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_toolButtonRect(QStyleH* handle, Types::PRect retval, int x, int y, int w, int h)
{
	QStyle_toolButtonRect(handle, retval, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawPanel(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* p6, bool sunken, int lineWidth, QBrushH* fill)
{
	QStyle_drawPanel(handle, p, x, y, w, h, p6, sunken, lineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawPopupPanel(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* p6, int lineWidth, QBrushH* fill)
{
	QStyle_drawPopupPanel(handle, p, x, y, w, h, p6, lineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawArrow(QStyleH* handle, QPainterH* p, ArrowType _type, bool down, int x, int y, int w, int h, QColorGroupH* g, bool enabled, QBrushH* fill)
{
	QStyle_drawArrow(handle, p, _type, down, x, y, w, h, g, enabled, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_exclusiveIndicatorSize(QStyleH* handle, Types::PSize retval)
{
	QStyle_exclusiveIndicatorSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawExclusiveIndicator(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool on, bool down, bool enabled)
{
	QStyle_drawExclusiveIndicator(handle, p, x, y, w, h, g, on, down, enabled);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawExclusiveIndicatorMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, bool on)
{
	QStyle_drawExclusiveIndicatorMask(handle, p, x, y, w, h, on);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_indicatorSize(QStyleH* handle, Types::PSize retval)
{
	QStyle_indicatorSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawIndicator(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, int state, bool down, bool enabled)
{
	QStyle_drawIndicator(handle, p, x, y, w, h, g, state, down, enabled);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawIndicatorMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, int state)
{
	QStyle_drawIndicatorMask(handle, p, x, y, w, h, state);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawFocusRect(QStyleH* handle, QPainterH* p1, Types::PRect p2, QColorGroupH* p3, QColorH* bg, bool p5)
{
	QStyle_drawFocusRect(handle, p1, p2, p3, bg, p5);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawComboButton(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, bool editable, bool enabled, QBrushH* fill)
{
	QStyle_drawComboButton(handle, p, x, y, w, h, g, sunken, editable, enabled, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_comboButtonRect(QStyleH* handle, Types::PRect retval, int x, int y, int w, int h)
{
	QStyle_comboButtonRect(handle, retval, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_comboButtonFocusRect(QStyleH* handle, Types::PRect retval, int x, int y, int w, int h)
{
	QStyle_comboButtonFocusRect(handle, retval, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawComboButtonMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h)
{
	QStyle_drawComboButtonMask(handle, p, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawPushButton(QStyleH* handle, QPushButtonH* btn, QPainterH* p)
{
	QStyle_drawPushButton(handle, btn, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawPushButtonLabel(QStyleH* handle, QPushButtonH* btn, QPainterH* p)
{
	QStyle_drawPushButtonLabel(handle, btn, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_pushButtonContentsRect(QStyleH* handle, Types::PRect retval, QPushButtonH* btn)
{
	QStyle_pushButtonContentsRect(handle, retval, btn);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_menuButtonIndicatorWidth(QStyleH* handle, int h)
{
	return QStyle_menuButtonIndicatorWidth(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_getButtonShift(QStyleH* handle, PInteger x, PInteger y)
{
	QStyle_getButtonShift(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_defaultFrameWidth(QStyleH* handle)
{
	return QStyle_defaultFrameWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_tabbarMetrics(QStyleH* handle, QTabBarH* p1, PInteger p2, PInteger p3, PInteger p4)
{
	QStyle_tabbarMetrics(handle, p1, p2, p3, p4);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawTab(QStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected)
{
	QStyle_drawTab(handle, p1, p2, p3, selected);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawTabMask(QStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected)
{
	QStyle_drawTabMask(handle, p1, p2, p3, selected);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_scrollBarMetrics(QStyleH* handle, QScrollBarH* p1, PInteger p2, PInteger p3, PInteger p4, PInteger p5)
{
	QStyle_scrollBarMetrics(handle, p1, p2, p3, p4, p5);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawScrollBarControls(QStyleH* handle, QPainterH* p1, QScrollBarH* p2, int sliderStart, unsigned controls, unsigned activeControl)
{
	QStyle_drawScrollBarControls(handle, p1, p2, sliderStart, controls, activeControl);
}
#pragma option pop


#pragma option push -w-inl
inline QStyleScrollControl __cdecl QStyle_scrollBarPointOver(QStyleH* handle, QScrollBarH* p1, int sliderStart, Types::PPoint p3)
{
	return QStyle_scrollBarPointOver(handle, p1, sliderStart, p3);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_sliderLength(QStyleH* handle)
{
	return QStyle_sliderLength(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawSlider(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, Orientation p7, bool tickAbove, bool tickBelow)
{
	QStyle_drawSlider(handle, p, x, y, w, h, g, p7, tickAbove, tickBelow);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawSliderMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, Orientation p6, bool tickAbove, bool tickBelow)
{
	QStyle_drawSliderMask(handle, p, x, y, w, h, p6, tickAbove, tickBelow);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawSliderGroove(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, QCOORD c, Orientation p8)
{
	QStyle_drawSliderGroove(handle, p, x, y, w, h, g, c, p8);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawSliderGrooveMask(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QCOORD c, Orientation p7)
{
	QStyle_drawSliderGrooveMask(handle, p, x, y, w, h, c, p7);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_maximumSliderDragDistance(QStyleH* handle)
{
	return QStyle_maximumSliderDragDistance(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_splitterWidth(QStyleH* handle)
{
	return QStyle_splitterWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawSplitter(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, Orientation p7)
{
	QStyle_drawSplitter(handle, p, x, y, w, h, g, p7);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawCheckMark(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool act, bool dis)
{
	QStyle_drawCheckMark(handle, p, x, y, w, h, g, act, dis);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_polishPopupMenu(QStyleH* handle, QPopupMenuH* p1)
{
	QStyle_polishPopupMenu(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_extraPopupMenuItemWidth(QStyleH* handle, bool checkable, int maxpmw, QMenuItemH* mi, QFontMetricsH* fm)
{
	return QStyle_extraPopupMenuItemWidth(handle, checkable, maxpmw, mi, fm);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_popupSubmenuIndicatorWidth(QStyleH* handle, QFontMetricsH* fm)
{
	return QStyle_popupSubmenuIndicatorWidth(handle, fm);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_popupMenuItemHeight(QStyleH* handle, bool checkable, QMenuItemH* mi, QFontMetricsH* fm)
{
	return QStyle_popupMenuItemHeight(handle, checkable, mi, fm);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawPopupMenuItem(QStyleH* handle, QPainterH* p, bool checkable, int maxpmw, int tab, QMenuItemH* mi, QPaletteH* pal, bool act, bool enabled, int x, int y, int w, int h)
{
	QStyle_drawPopupMenuItem(handle, p, checkable, maxpmw, tab, mi, pal, act, enabled, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawMenuBarItem(QStyleH* handle, QPainterH* p, int x, int y, int w, int h, QMenuItemH* mi, QColorGroupH* g, bool enabled, bool active)
{
	QStyle_drawMenuBarItem(handle, p, x, y, w, h, mi, g, enabled, active);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_scrollBarExtent(QStyleH* handle, Types::PSize retval)
{
	QStyle_scrollBarExtent(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_buttonDefaultIndicatorWidth(QStyleH* handle)
{
	return QStyle_buttonDefaultIndicatorWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_buttonMargin(QStyleH* handle)
{
	return QStyle_buttonMargin(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_toolBarHandleExtent(QStyleH* handle)
{
	return QStyle_toolBarHandleExtent(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_toolBarHandleExtend(QStyleH* handle)
{
	return QStyle_toolBarHandleExtend(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QStyle_sliderThickness(QStyleH* handle)
{
	return QStyle_sliderThickness(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_drawToolBarHandle(QStyleH* handle, QPainterH* p, Types::PRect r, Orientation orientation, bool highlight, QColorGroupH* cg, bool drawBorder)
{
	QStyle_drawToolBarHandle(handle, p, r, orientation, highlight, cg, drawBorder);
}
#pragma option pop


#pragma option push -w-inl
inline QTranslatorMessageH* __cdecl QTranslatorMessage_create(void)/* overload */
{
	return QTranslatorMessage_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslatorMessage_destroy(QTranslatorMessageH* handle)
{
	QTranslatorMessage_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTranslatorMessageH* __cdecl QTranslatorMessage_create(char * context, char * sourceText, char * comment, System::PWideString translation)/* overload */
{
	return QTranslatorMessage_create(context, sourceText, comment, translation);
}
#pragma option pop


#pragma option push -w-inl
inline QTranslatorMessageH* __cdecl QTranslatorMessage_create(QDataStreamH* p1)/* overload */
{
	return QTranslatorMessage_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QTranslatorMessageH* __cdecl QTranslatorMessage_create(QTranslatorMessageH* m)/* overload */
{
	return QTranslatorMessage_create(m);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QTranslatorMessage_hash(QTranslatorMessageH* handle)
{
	return QTranslatorMessage_hash(handle);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QTranslatorMessage_context(QTranslatorMessageH* handle)
{
	return QTranslatorMessage_context(handle);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QTranslatorMessage_sourceText(QTranslatorMessageH* handle)
{
	return QTranslatorMessage_sourceText(handle);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QTranslatorMessage_comment(QTranslatorMessageH* handle)
{
	return QTranslatorMessage_comment(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslatorMessage_setTranslation(QTranslatorMessageH* handle, System::PWideString translation)
{
	QTranslatorMessage_setTranslation(handle, translation);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslatorMessage_translation(QTranslatorMessageH* handle, System::PWideString retval)
{
	QTranslatorMessage_translation(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslatorMessage_write(QTranslatorMessageH* handle, QDataStreamH* s, bool strip, QTranslatorMessagePrefix prefix)
{
	QTranslatorMessage_write(handle, s, strip, prefix);
}
#pragma option pop


#pragma option push -w-inl
inline QTranslatorMessagePrefix __cdecl QTranslatorMessage_commonPrefix(QTranslatorMessageH* handle, QTranslatorMessageH* p1)
{
	return QTranslatorMessage_commonPrefix(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QTranslatorH* __cdecl QTranslator_create(QObjectH* parent, char * name)
{
	return QTranslator_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_destroy(QTranslatorH* handle)
{
	QTranslator_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_find(QTranslatorH* handle, System::PWideString retval, char * p1, char * p2, char * p3)/* overload */
{
	QTranslator_find(handle, retval, p1, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_find(QTranslatorH* handle, System::PWideString retval, char * p1, char * p2)/* overload */
{
	QTranslator_find(handle, retval, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QTranslator_load(QTranslatorH* handle, System::PWideString filename, System::PWideString directory, System::PWideString search_delimiters, System::PWideString suffix)
{
	return QTranslator_load(handle, filename, directory, search_delimiters, suffix);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QTranslator_save(QTranslatorH* handle, System::PWideString filename, QTranslatorSaveMode mode)
{
	return QTranslator_save(handle, filename, mode);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_clear(QTranslatorH* handle)
{
	QTranslator_clear(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_insert(QTranslatorH* handle, QTranslatorMessageH* p1)/* overload */
{
	QTranslator_insert(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_insert(QTranslatorH* handle, char * p1, char * p2, System::PWideString p3)/* overload */
{
	QTranslator_insert(handle, p1, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_remove(QTranslatorH* handle, QTranslatorMessageH* p1)/* overload */
{
	QTranslator_remove(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_remove(QTranslatorH* handle, char * p1, char * p2)/* overload */
{
	QTranslator_remove(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QTranslator_contains(QTranslatorH* handle, char * p1, char * p2, char * p3)/* overload */
{
	return QTranslator_contains(handle, p1, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QTranslator_contains(QTranslatorH* handle, char * p1, char * p2)/* overload */
{
	return QTranslator_contains(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_squeeze(QTranslatorH* handle, QTranslatorSaveMode p1)/* overload */
{
	QTranslator_squeeze(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_squeeze(QTranslatorH* handle)/* overload */
{
	QTranslator_squeeze(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_unsqueeze(QTranslatorH* handle)
{
	QTranslator_unsqueeze(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColor_create(void)/* overload */
{
	return QColor_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_destroy(QColorH* handle)
{
	QColor_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColor_create(int r, int g, int b)/* overload */
{
	return QColor_create(r, g, b);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColor_create(int x, int y, int z, QColorSpec p4)/* overload */
{
	return QColor_create(x, y, z, p4);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColor_create(QRgbH rgb, unsigned pixel)/* overload */
{
	return QColor_create(rgb, pixel);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColor_create(System::PWideString name)/* overload */
{
	return QColor_create(name);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColor_create(char * name)/* overload */
{
	return QColor_create(name);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColor_create(QColorH* p1)/* overload */
{
	return QColor_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QColor_isValid(QColorH* handle)
{
	return QColor_isValid(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QColor_isDirty(QColorH* handle)
{
	return QColor_isDirty(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_name(QColorH* handle, System::PWideString retval)
{
	QColor_name(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_setNamedColor(QColorH* handle, System::PWideString name)
{
	QColor_setNamedColor(handle, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_rgb(QColorH* handle, PInteger r, PInteger g, PInteger b)/* overload */
{
	QColor_rgb(handle, r, g, b);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_rgb(QColorH* handle, QRgbH retval)/* overload */
{
	QColor_rgb(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_setRgb(QColorH* handle, int r, int g, int b)/* overload */
{
	QColor_setRgb(handle, r, g, b);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_setRgb(QColorH* handle, QRgbH rgb)/* overload */
{
	QColor_setRgb(handle, rgb);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QColor_red(QColorH* handle)
{
	return QColor_red(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QColor_green(QColorH* handle)
{
	return QColor_green(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QColor_blue(QColorH* handle)
{
	return QColor_blue(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_hsv(QColorH* handle, PInteger h, PInteger s, PInteger v)
{
	QColor_hsv(handle, h, s, v);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_getHsv(QColorH* handle, PInteger h, PInteger s, PInteger v)
{
	QColor_getHsv(handle, h, s, v);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_setHsv(QColorH* handle, int h, int s, int v)
{
	QColor_setHsv(handle, h, s, v);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_light(QColorH* handle, QColorH* retval, int f)
{
	QColor_light(handle, retval, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_dark(QColorH* handle, QColorH* retval, int f)
{
	QColor_dark(handle, retval, f);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QColor_lazyAlloc(void)
{
	return QColor_lazyAlloc();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_setLazyAlloc(bool p1)
{
	QColor_setLazyAlloc(p1);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QColor_alloc(QColorH* handle)
{
	return QColor_alloc(handle);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QColor_pixel(QColorH* handle)
{
	return QColor_pixel(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QColor_maxColors(void)
{
	return QColor_maxColors();
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QColor_numBitPlanes(void)
{
	return QColor_numBitPlanes();
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QColor_enterAllocContext(void)
{
	return QColor_enterAllocContext();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_leaveAllocContext(void)
{
	QColor_leaveAllocContext();
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QColor_currentAllocContext(void)
{
	return QColor_currentAllocContext();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_destroyAllocContext(int p1)
{
	QColor_destroyAllocContext(p1);
}
#pragma option pop


#pragma option push -w-inl
inline HPALETTE __cdecl QColor_hPal(void)
{
	return QColor_hPal();
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QColor_realizePal(QWidgetH* p1)
{
	return QColor_realizePal(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_initialize(void)
{
	QColor_initialize();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColor_cleanup(void)
{
	QColor_cleanup();
}
#pragma option pop


#pragma option push -w-inl
inline QFontH* __cdecl QFont_create(void)/* overload */
{
	return QFont_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_destroy(QFontH* handle)
{
	QFont_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFontH* __cdecl QFont_create(System::PWideString family, int pointSize, int weight, bool italic)/* overload */
{
	return QFont_create(family, pointSize, weight, italic);
}
#pragma option pop


#pragma option push -w-inl
inline QFontH* __cdecl QFont_create(System::PWideString family, int pointSize, int weight, bool italic, QFontCharSet charSet)/* overload */
{
	return QFont_create(family, pointSize, weight, italic, charSet);
}
#pragma option pop


#pragma option push -w-inl
inline QFontH* __cdecl QFont_create(QFontH* p1)/* overload */
{
	return QFont_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_family(QFontH* handle, System::PWideString retval)
{
	QFont_family(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setFamily(QFontH* handle, System::PWideString p1)
{
	QFont_setFamily(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFont_pointSize(QFontH* handle)
{
	return QFont_pointSize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline float __cdecl QFont_pointSizeFloat(QFontH* handle)
{
	return QFont_pointSizeFloat(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setPointSize(QFontH* handle, int p1)
{
	QFont_setPointSize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setPointSizeFloat(QFontH* handle, float p1)
{
	QFont_setPointSizeFloat(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFont_pixelSize(QFontH* handle)
{
	return QFont_pixelSize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setPixelSize(QFontH* handle, int p1)
{
	QFont_setPixelSize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setPixelSizeFloat(QFontH* handle, float p1)
{
	QFont_setPixelSizeFloat(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFont_weight(QFontH* handle)
{
	return QFont_weight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setWeight(QFontH* handle, int p1)
{
	QFont_setWeight(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFont_bold(QFontH* handle)
{
	return QFont_bold(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setBold(QFontH* handle, bool p1)
{
	QFont_setBold(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFont_italic(QFontH* handle)
{
	return QFont_italic(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setItalic(QFontH* handle, bool p1)
{
	QFont_setItalic(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFont_underline(QFontH* handle)
{
	return QFont_underline(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setUnderline(QFontH* handle, bool p1)
{
	QFont_setUnderline(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFont_strikeOut(QFontH* handle)
{
	return QFont_strikeOut(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setStrikeOut(QFontH* handle, bool p1)
{
	QFont_setStrikeOut(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFont_fixedPitch(QFontH* handle)
{
	return QFont_fixedPitch(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setFixedPitch(QFontH* handle, bool p1)
{
	QFont_setFixedPitch(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QFontStyleHint __cdecl QFont_styleHint(QFontH* handle)
{
	return QFont_styleHint(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setStyleHint(QFontH* handle, QFontStyleHint p1)/* overload */
{
	QFont_setStyleHint(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QFontStyleStrategy __cdecl QFont_styleStrategy(QFontH* handle)
{
	return QFont_styleStrategy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setStyleHint(QFontH* handle, QFontStyleHint p1, QFontStyleStrategy p2)/* overload */
{
	QFont_setStyleHint(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QFontCharSet __cdecl QFont_charSet(QFontH* handle)
{
	return QFont_charSet(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setCharSet(QFontH* handle, QFontCharSet p1)
{
	QFont_setCharSet(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QFontCharSet __cdecl QFont_charSetForLocale(void)
{
	return QFont_charSetForLocale();
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFont_rawMode(QFontH* handle)
{
	return QFont_rawMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setRawMode(QFontH* handle, bool p1)
{
	QFont_setRawMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFont_exactMatch(QFontH* handle)
{
	return QFont_exactMatch(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFont_isCopyOf(QFontH* handle, QFontH* p1)
{
	return QFont_isCopyOf(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline HFONT __cdecl QFont_handle(QFontH* handle)/* overload */
{
	return QFont_handle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setRawName(QFontH* handle, System::PWideString p1)
{
	QFont_setRawName(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_rawName(QFontH* handle, System::PWideString retval)
{
	QFont_rawName(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_key(QFontH* handle, System::PWideString retval)
{
	QFont_key(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_encodingName(System::PWideString retval, QFontCharSet p1)
{
	QFont_encodingName(retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_defaultFont(QFontH* retval)
{
	QFont_defaultFont(retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_setDefaultFont(QFontH* p1)
{
	QFont_setDefaultFont(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_substitute(System::PWideString retval, System::PWideString familyName)
{
	QFont_substitute(retval, familyName);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_insertSubstitution(System::PWideString p1, System::PWideString p2)
{
	QFont_insertSubstitution(p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_removeSubstitution(System::PWideString p1)
{
	QFont_removeSubstitution(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_substitutions(QStringListH* retval)
{
	QFont_substitutions(retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_initialize(void)
{
	QFont_initialize();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_locale_init(void)
{
	QFont_locale_init();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_cleanup(void)
{
	QFont_cleanup();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_cacheStatistics(void)
{
	QFont_cacheStatistics();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFont_qwsRenderToDisk(QFontH* handle, bool all)
{
	QFont_qwsRenderToDisk(handle, all);
}
#pragma option pop


#pragma option push -w-inl
inline QImageTextKeyLangH* __cdecl QImageTextKeyLang_create(char * k, char * l)/* overload */
{
	return QImageTextKeyLang_create(k, l);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageTextKeyLang_destroy(QImageTextKeyLangH* handle)
{
	QImageTextKeyLang_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QImageTextKeyLangH* __cdecl QImageTextKeyLang_create(void)/* overload */
{
	return QImageTextKeyLang_create();
}
#pragma option pop


#pragma option push -w-inl
inline QImageH* __cdecl QImage_create(void)/* overload */
{
	return QImage_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_destroy(QImageH* handle)
{
	QImage_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QImageH* __cdecl QImage_create(int width, int height, int depth, int numColors, QImageEndian bitOrder)/* overload */
{
	return QImage_create(width, height, depth, numColors, bitOrder);
}
#pragma option pop


#pragma option push -w-inl
inline QImageH* __cdecl QImage_create(Types::PSize p1, int depth, int numColors, QImageEndian bitOrder)/* overload */
{
	return QImage_create(p1, depth, numColors, bitOrder);
}
#pragma option pop


#pragma option push -w-inl
inline QImageH* __cdecl QImage_create(System::PWideString fileName, char * format)/* overload */
{
	return QImage_create(fileName, format);
}
#pragma option pop


#pragma option push -w-inl
inline QImageH* __cdecl QImage_create(QByteArrayH* data)/* overload */
{
	return QImage_create(data);
}
#pragma option pop


#pragma option push -w-inl
inline QImageH* __cdecl QImage_create(System::PByte data, int w, int h, int depth, QRgbH colortable, int numColors, QImageEndian bitOrder)/* overload */
{
	return QImage_create(data, w, h, depth, colortable, numColors, bitOrder);
}
#pragma option pop


#pragma option push -w-inl
inline QImageH* __cdecl QImage_create(QImageH* p1)/* overload */
{
	return QImage_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_detach(QImageH* handle)
{
	QImage_detach(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_copy(QImageH* handle, QImageH* retval)/* overload */
{
	QImage_copy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_copy(QImageH* handle, QImageH* retval, int x, int y, int w, int h, int conversion_flags)/* overload */
{
	QImage_copy(handle, retval, x, y, w, h, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_copy(QImageH* handle, QImageH* retval, Types::PRect p1)/* overload */
{
	QImage_copy(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_isNull(QImageH* handle)
{
	return QImage_isNull(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QImage_width(QImageH* handle)
{
	return QImage_width(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QImage_height(QImageH* handle)
{
	return QImage_height(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_size(QImageH* handle, Types::PSize retval)
{
	QImage_size(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_rect(QImageH* handle, Types::PRect retval)
{
	QImage_rect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QImage_depth(QImageH* handle)
{
	return QImage_depth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QImage_numColors(QImageH* handle)
{
	return QImage_numColors(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QImageEndian __cdecl QImage_bitOrder(QImageH* handle)
{
	return QImage_bitOrder(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_color(QImageH* handle, QRgbH retval, int i)
{
	QImage_color(handle, retval, i);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_setColor(QImageH* handle, int i, QRgbH c)
{
	QImage_setColor(handle, i, c);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_setNumColors(QImageH* handle, int p1)
{
	QImage_setNumColors(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_hasAlphaBuffer(QImageH* handle)
{
	return QImage_hasAlphaBuffer(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_setAlphaBuffer(QImageH* handle, bool p1)
{
	QImage_setAlphaBuffer(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_allGray(QImageH* handle)
{
	return QImage_allGray(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_isGrayscale(QImageH* handle)
{
	return QImage_isGrayscale(handle);
}
#pragma option pop


#pragma option push -w-inl
inline System::PByte __cdecl QImage_bits(QImageH* handle)
{
	return QImage_bits(handle);
}
#pragma option pop


#pragma option push -w-inl
inline System::PByte __cdecl QImage_scanLine(QImageH* handle, int p1)
{
	return QImage_scanLine(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline PPByte __cdecl QImage_jumpTable(QImageH* handle)
{
	return QImage_jumpTable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QRgbH __cdecl QImage_colorTable(QImageH* handle)
{
	return QImage_colorTable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QImage_numBytes(QImageH* handle)
{
	return QImage_numBytes(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QImage_bytesPerLine(QImageH* handle)
{
	return QImage_bytesPerLine(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_create(QImageH* handle, int width, int height, int depth, int numColors, QImageEndian bitOrder)/* overload */
{
	return QImage_create(handle, width, height, depth, numColors, bitOrder);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_create(QImageH* handle, Types::PSize p1, int depth, int numColors, QImageEndian bitOrder)/* overload */
{
	return QImage_create(handle, p1, depth, numColors, bitOrder);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_reset(QImageH* handle)
{
	QImage_reset(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_fill(QImageH* handle, unsigned pixel)
{
	QImage_fill(handle, pixel);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_invertPixels(QImageH* handle, bool invertAlpha)
{
	QImage_invertPixels(handle, invertAlpha);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_convertDepth(QImageH* handle, QImageH* retval, int p1)/* overload */
{
	QImage_convertDepth(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_convertDepthWithPalette(QImageH* handle, QImageH* retval, int p1, QRgbH p, int pc, int cf)
{
	QImage_convertDepthWithPalette(handle, retval, p1, p, pc, cf);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_convertDepth(QImageH* handle, QImageH* retval, int p1, int conversion_flags)/* overload */
{
	QImage_convertDepth(handle, retval, p1, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_convertBitOrder(QImageH* handle, QImageH* retval, QImageEndian p1)
{
	QImage_convertBitOrder(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_smoothScale(QImageH* handle, QImageH* retval, int width, int height)
{
	QImage_smoothScale(handle, retval, width, height);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_createAlphaMask(QImageH* handle, QImageH* retval, int conversion_flags)
{
	QImage_createAlphaMask(handle, retval, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_createHeuristicMask(QImageH* handle, QImageH* retval, bool clipTight)
{
	QImage_createHeuristicMask(handle, retval, clipTight);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_mirror(QImageH* handle, QImageH* retval)/* overload */
{
	QImage_mirror(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_mirror(QImageH* handle, QImageH* retval, bool horizontally, bool vertically)/* overload */
{
	QImage_mirror(handle, retval, horizontally, vertically);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_swapRGB(QImageH* handle, QImageH* retval)
{
	QImage_swapRGB(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QImageEndian __cdecl QImage_systemBitOrder(void)
{
	return QImage_systemBitOrder();
}
#pragma option pop


#pragma option push -w-inl
inline QImageEndian __cdecl QImage_systemByteOrder(void)
{
	return QImage_systemByteOrder();
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QImage_imageFormat(System::PWideString fileName)
{
	return QImage_imageFormat(fileName);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_inputFormats(QStrListH* retval)
{
	QImage_inputFormats(retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_outputFormats(QStrListH* retval)
{
	QImage_outputFormats(retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_inputFormatList(QStringListH* retval)
{
	QImage_inputFormatList(retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_outputFormatList(QStringListH* retval)
{
	QImage_outputFormatList(retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_load(QImageH* handle, System::PWideString fileName, char * format)
{
	return QImage_load(handle, fileName, format);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_loadFromData(QImageH* handle, System::PByte buf, unsigned len, char * format)/* overload */
{
	return QImage_loadFromData(handle, buf, len, format);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_loadFromData(QImageH* handle, QByteArrayH* data, char * format)/* overload */
{
	return QImage_loadFromData(handle, data, format);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_save(QImageH* handle, System::PWideString fileName, char * format)/* overload */
{
	return QImage_save(handle, fileName, format);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_save(QImageH* handle, System::PWideString fileName, char * format, int quality)/* overload */
{
	return QImage_save(handle, fileName, format, quality);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImage_valid(QImageH* handle, int x, int y)
{
	return QImage_valid(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QImage_pixelIndex(QImageH* handle, int x, int y)
{
	return QImage_pixelIndex(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_pixel(QImageH* handle, QRgbH retval, int x, int y)
{
	QImage_pixel(handle, retval, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_setPixel(QImageH* handle, int x, int y, unsigned index_or_rgb)
{
	QImage_setPixel(handle, x, y, index_or_rgb);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QImage_dotsPerMeterX(QImageH* handle)
{
	return QImage_dotsPerMeterX(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QImage_dotsPerMeterY(QImageH* handle)
{
	return QImage_dotsPerMeterY(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_setDotsPerMeterX(QImageH* handle, int p1)
{
	QImage_setDotsPerMeterX(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_setDotsPerMeterY(QImageH* handle, int p1)
{
	QImage_setDotsPerMeterY(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_offset(QImageH* handle, Types::PPoint retval)
{
	QImage_offset(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_setOffset(QImageH* handle, Types::PPoint p1)
{
	QImage_setOffset(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_textLanguages(QImageH* handle, QStringListH* retval)
{
	QImage_textLanguages(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_textKeys(QImageH* handle, QStringListH* retval)
{
	QImage_textKeys(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_text(QImageH* handle, System::PWideString retval, char * key, char * lang)/* overload */
{
	QImage_text(handle, retval, key, lang);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_text(QImageH* handle, System::PWideString retval, QImageTextKeyLangH* p1)/* overload */
{
	QImage_text(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImage_setText(QImageH* handle, char * key, char * lang, System::PWideString p3)
{
	QImage_setText(handle, key, lang, p3);
}
#pragma option pop


#pragma option push -w-inl
inline QImageIOH* __cdecl QImageIO_create(void)/* overload */
{
	return QImageIO_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_destroy(QImageIOH* handle)
{
	QImageIO_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QImageIOH* __cdecl QImageIO_create(QIODeviceH* ioDevice, char * format)/* overload */
{
	return QImageIO_create(ioDevice, format);
}
#pragma option pop


#pragma option push -w-inl
inline QImageIOH* __cdecl QImageIO_create(System::PWideString fileName, char * format)/* overload */
{
	return QImageIO_create(fileName, format);
}
#pragma option pop


#pragma option push -w-inl
inline QImageH* __cdecl QImageIO_image(QImageIOH* handle)
{
	return QImageIO_image(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QImageIO_status(QImageIOH* handle)
{
	return QImageIO_status(handle);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QImageIO_format(QImageIOH* handle)
{
	return QImageIO_format(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIODeviceH* __cdecl QImageIO_ioDevice(QImageIOH* handle)
{
	return QImageIO_ioDevice(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_fileName(QImageIOH* handle, System::PWideString retval)
{
	QImageIO_fileName(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QImageIO_parameters(QImageIOH* handle)
{
	return QImageIO_parameters(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_description(QImageIOH* handle, System::PWideString retval)
{
	QImageIO_description(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_setImage(QImageIOH* handle, QImageH* p1)
{
	QImageIO_setImage(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_setStatus(QImageIOH* handle, int p1)
{
	QImageIO_setStatus(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_setFormat(QImageIOH* handle, char * p1)
{
	QImageIO_setFormat(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_setIODevice(QImageIOH* handle, QIODeviceH* p1)
{
	QImageIO_setIODevice(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_setFileName(QImageIOH* handle, System::PWideString p1)
{
	QImageIO_setFileName(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_setParameters(QImageIOH* handle, char * p1)
{
	QImageIO_setParameters(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_setDescription(QImageIOH* handle, System::PWideString p1)
{
	QImageIO_setDescription(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImageIO_read(QImageIOH* handle)
{
	return QImageIO_read(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QImageIO_write(QImageIOH* handle)
{
	return QImageIO_write(handle);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QImageIO_imageFormat(System::PWideString fileName)/* overload */
{
	return QImageIO_imageFormat(fileName);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QImageIO_imageFormat(QIODeviceH* p1)/* overload */
{
	return QImageIO_imageFormat(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_inputFormats(QStrListH* retval)
{
	QImageIO_inputFormats(retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageIO_outputFormats(QStrListH* retval)
{
	QImageIO_outputFormats(retval);
}
#pragma option pop


#pragma option push -w-inl
inline QIconSetH* __cdecl QIconSet_create(void)/* overload */
{
	return QIconSet_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconSet_destroy(QIconSetH* handle)
{
	QIconSet_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIconSetH* __cdecl QIconSet_create(QPixmapH* p1, QIconSetSize p2)/* overload */
{
	return QIconSet_create(p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QIconSetH* __cdecl QIconSet_create(QPixmapH* smallPix, QPixmapH* largePix)/* overload */
{
	return QIconSet_create(smallPix, largePix);
}
#pragma option pop


#pragma option push -w-inl
inline QIconSetH* __cdecl QIconSet_create(QIconSetH* p1)/* overload */
{
	return QIconSet_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconSet_reset(QIconSetH* handle, QPixmapH* p1, QIconSetSize p2)
{
	QIconSet_reset(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconSet_setPixmap(QIconSetH* handle, QPixmapH* p1, QIconSetSize p2, QIconSetMode p3)/* overload */
{
	QIconSet_setPixmap(handle, p1, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconSet_setPixmap(QIconSetH* handle, System::PWideString p1, QIconSetSize p2, QIconSetMode p3)/* overload */
{
	QIconSet_setPixmap(handle, p1, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconSet_pixmap(QIconSetH* handle, QPixmapH* retval, QIconSetSize p1, QIconSetMode p2)/* overload */
{
	QIconSet_pixmap(handle, retval, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconSet_pixmap(QIconSetH* handle, QPixmapH* retval, QIconSetSize s, bool enabled)/* overload */
{
	QIconSet_pixmap(handle, retval, s, enabled);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconSet_pixmap(QIconSetH* handle, QPixmapH* retval)/* overload */
{
	QIconSet_pixmap(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconSet_isGenerated(QIconSetH* handle, QIconSetSize p1, QIconSetMode p2)
{
	return QIconSet_isGenerated(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIconSet_isNull(QIconSetH* handle)
{
	return QIconSet_isNull(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconSet_detach(QIconSetH* handle)
{
	QIconSet_detach(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMovieH* __cdecl QMovie_create(void)/* overload */
{
	return QMovie_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_destroy(QMovieH* handle)
{
	QMovie_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMovieH* __cdecl QMovie_create(int bufsize)/* overload */
{
	return QMovie_create(bufsize);
}
#pragma option pop


#pragma option push -w-inl
inline QMovieH* __cdecl QMovie_create(QDataSourceH* p1, int bufsize)/* overload */
{
	return QMovie_create(p1, bufsize);
}
#pragma option pop


#pragma option push -w-inl
inline QMovieH* __cdecl QMovie_create(System::PWideString fileName, int bufsize)/* overload */
{
	return QMovie_create(fileName, bufsize);
}
#pragma option pop


#pragma option push -w-inl
inline QMovieH* __cdecl QMovie_create(QByteArrayH* data, int bufsize)/* overload */
{
	return QMovie_create(data, bufsize);
}
#pragma option pop


#pragma option push -w-inl
inline QMovieH* __cdecl QMovie_create(QMovieH* p1)/* overload */
{
	return QMovie_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMovie_pushSpace(QMovieH* handle)
{
	return QMovie_pushSpace(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_pushData(QMovieH* handle, System::PByte data, int length)
{
	QMovie_pushData(handle, data, length);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QMovie_backgroundColor(QMovieH* handle)
{
	return QMovie_backgroundColor(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_setBackgroundColor(QMovieH* handle, QColorH* p1)
{
	QMovie_setBackgroundColor(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_getValidRect(QMovieH* handle, Types::PRect retval)
{
	QMovie_getValidRect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QMovie_framePixmap(QMovieH* handle)
{
	return QMovie_framePixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QImageH* __cdecl QMovie_frameImage(QMovieH* handle)
{
	return QMovie_frameImage(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMovie_isNull(QMovieH* handle)
{
	return QMovie_isNull(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMovie_frameNumber(QMovieH* handle)
{
	return QMovie_frameNumber(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMovie_steps(QMovieH* handle)
{
	return QMovie_steps(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMovie_paused(QMovieH* handle)
{
	return QMovie_paused(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMovie_finished(QMovieH* handle)
{
	return QMovie_finished(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMovie_running(QMovieH* handle)
{
	return QMovie_running(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_unpause(QMovieH* handle)
{
	QMovie_unpause(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_pause(QMovieH* handle)
{
	QMovie_pause(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_step(QMovieH* handle)/* overload */
{
	QMovie_step(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_step(QMovieH* handle, int p1)/* overload */
{
	QMovie_step(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_restart(QMovieH* handle)
{
	QMovie_restart(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMovie_speed(QMovieH* handle)
{
	return QMovie_speed(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_setSpeed(QMovieH* handle, int p1)
{
	QMovie_setSpeed(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_connectResize(QMovieH* handle, QObjectH* receiver, char * member)
{
	QMovie_connectResize(handle, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_disconnectResize(QMovieH* handle, QObjectH* receiver, char * member)
{
	QMovie_disconnectResize(handle, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_connectUpdate(QMovieH* handle, QObjectH* receiver, char * member)
{
	QMovie_connectUpdate(handle, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_disconnectUpdate(QMovieH* handle, QObjectH* receiver, char * member)
{
	QMovie_disconnectUpdate(handle, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_setDisplayWidget(QMovieH* handle, QWidgetH* w)
{
	QMovie_setDisplayWidget(handle, w);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_connectStatus(QMovieH* handle, QObjectH* receiver, char * member)
{
	QMovie_connectStatus(handle, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMovie_disconnectStatus(QMovieH* handle, QObjectH* receiver, char * member)
{
	QMovie_disconnectStatus(handle, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPaintDevice_devType(QPaintDeviceH* handle)
{
	return QPaintDevice_devType(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPaintDevice_isExtDev(QPaintDeviceH* handle)
{
	return QPaintDevice_isExtDev(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPaintDevice_paintingActive(QPaintDeviceH* handle)
{
	return QPaintDevice_paintingActive(handle);
}
#pragma option pop


#pragma option push -w-inl
inline HDC __cdecl QPaintDevice_handle(QPaintDeviceH* handle)/* overload */
{
	return QPaintDevice_handle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorGroupH* __cdecl QColorGroup_create(void)/* overload */
{
	return QColorGroup_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorGroup_destroy(QColorGroupH* handle)
{
	QColorGroup_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorGroupH* __cdecl QColorGroup_create(QColorH* foreground, QColorH* button, QColorH* light, QColorH* dark, QColorH* mid, QColorH* text, QColorH* base)/* overload */
{
	return QColorGroup_create(foreground, button, light, dark, mid, text, base);
}
#pragma option pop


#pragma option push -w-inl
inline QColorGroupH* __cdecl QColorGroup_create(QBrushH* foreground, QBrushH* button, QBrushH* light, QBrushH* dark, QBrushH* mid, QBrushH* text, QBrushH* bright_text, QBrushH* base, QBrushH* background)/* overload */
{
	return QColorGroup_create(foreground, button, light, dark, mid, text, bright_text, base, background);
}
#pragma option pop


#pragma option push -w-inl
inline QColorGroupH* __cdecl QColorGroup_create(QColorGroupH* p1)/* overload */
{
	return QColorGroup_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_color(QColorGroupH* handle, QColorGroupColorRole p1)
{
	return QColorGroup_color(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QBrushH* __cdecl QColorGroup_brush(QColorGroupH* handle, QColorGroupColorRole p1)
{
	return QColorGroup_brush(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorGroup_setColor(QColorGroupH* handle, QColorGroupColorRole p1, QColorH* p2)
{
	QColorGroup_setColor(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorGroup_setBrush(QColorGroupH* handle, QColorGroupColorRole p1, QBrushH* p2)
{
	QColorGroup_setBrush(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_foreground(QColorGroupH* handle)
{
	return QColorGroup_foreground(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_button(QColorGroupH* handle)
{
	return QColorGroup_button(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_light(QColorGroupH* handle)
{
	return QColorGroup_light(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_dark(QColorGroupH* handle)
{
	return QColorGroup_dark(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_mid(QColorGroupH* handle)
{
	return QColorGroup_mid(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_text(QColorGroupH* handle)
{
	return QColorGroup_text(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_base(QColorGroupH* handle)
{
	return QColorGroup_base(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_background(QColorGroupH* handle)
{
	return QColorGroup_background(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_midlight(QColorGroupH* handle)
{
	return QColorGroup_midlight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_brightText(QColorGroupH* handle)
{
	return QColorGroup_brightText(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_buttonText(QColorGroupH* handle)
{
	return QColorGroup_buttonText(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_shadow(QColorGroupH* handle)
{
	return QColorGroup_shadow(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_highlight(QColorGroupH* handle)
{
	return QColorGroup_highlight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QColorGroup_highlightedText(QColorGroupH* handle)
{
	return QColorGroup_highlightedText(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPaletteH* __cdecl QPalette_create(void)/* overload */
{
	return QPalette_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPalette_destroy(QPaletteH* handle)
{
	QPalette_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPaletteH* __cdecl QPalette_create(QColorH* button)/* overload */
{
	return QPalette_create(button);
}
#pragma option pop


#pragma option push -w-inl
inline QPaletteH* __cdecl QPalette_create(QColorH* button, QColorH* background)/* overload */
{
	return QPalette_create(button, background);
}
#pragma option pop


#pragma option push -w-inl
inline QPaletteH* __cdecl QPalette_create(QColorGroupH* active, QColorGroupH* disabled, QColorGroupH* inactive)/* overload */
{
	return QPalette_create(active, disabled, inactive);
}
#pragma option pop


#pragma option push -w-inl
inline QPaletteH* __cdecl QPalette_create(QPaletteH* p1)/* overload */
{
	return QPalette_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QPalette_color(QPaletteH* handle, QPaletteColorGroup p1, QColorGroupColorRole p2)
{
	return QPalette_color(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QBrushH* __cdecl QPalette_brush(QPaletteH* handle, QPaletteColorGroup p1, QColorGroupColorRole p2)
{
	return QPalette_brush(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPalette_setColor(QPaletteH* handle, QPaletteColorGroup p1, QColorGroupColorRole p2, QColorH* p3)/* overload */
{
	QPalette_setColor(handle, p1, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPalette_setBrush(QPaletteH* handle, QPaletteColorGroup p1, QColorGroupColorRole p2, QBrushH* p3)/* overload */
{
	QPalette_setBrush(handle, p1, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPalette_setColor(QPaletteH* handle, QColorGroupColorRole p1, QColorH* p2)/* overload */
{
	QPalette_setColor(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPalette_setBrush(QPaletteH* handle, QColorGroupColorRole p1, QBrushH* p2)/* overload */
{
	QPalette_setBrush(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPalette_copy(QPaletteH* handle, QPaletteH* retval)
{
	QPalette_copy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QColorGroupH* __cdecl QPalette_active(QPaletteH* handle)
{
	return QPalette_active(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorGroupH* __cdecl QPalette_disabled(QPaletteH* handle)
{
	return QPalette_disabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorGroupH* __cdecl QPalette_inactive(QPaletteH* handle)
{
	return QPalette_inactive(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorGroupH* __cdecl QPalette_normal(QPaletteH* handle)
{
	return QPalette_normal(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPalette_setActive(QPaletteH* handle, QColorGroupH* p1)
{
	QPalette_setActive(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPalette_setDisabled(QPaletteH* handle, QColorGroupH* p1)
{
	QPalette_setDisabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPalette_setInactive(QPaletteH* handle, QColorGroupH* p1)
{
	QPalette_setInactive(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPalette_setNormal(QPaletteH* handle, QColorGroupH* p1)
{
	QPalette_setNormal(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPalette_isCopyOf(QPaletteH* handle, QPaletteH* p1)
{
	return QPalette_isCopyOf(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPalette_serialNumber(QPaletteH* handle)
{
	return QPalette_serialNumber(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QPixmap_create(void)/* overload */
{
	return QPixmap_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_destroy(QPixmapH* handle)
{
	QPixmap_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QPixmap_create(int w, int h, int depth, QPixmapOptimization p4)/* overload */
{
	return QPixmap_create(w, h, depth, p4);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QPixmap_create(Types::PSize p1, int depth, QPixmapOptimization p3)/* overload */
{
	return QPixmap_create(p1, depth, p3);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QPixmap_create(System::PWideString fileName, char * format, QPixmapColorMode mode)/* overload */
{
	return QPixmap_create(fileName, format, mode);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QPixmap_create(System::PWideString fileName, char * format, int conversion_flags)/* overload */
{
	return QPixmap_create(fileName, format, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QPixmap_create(QByteArrayH* data)/* overload */
{
	return QPixmap_create(data);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QPixmap_create(QPixmapH* p1)/* overload */
{
	return QPixmap_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_isNull(QPixmapH* handle)
{
	return QPixmap_isNull(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPixmap_width(QPixmapH* handle)
{
	return QPixmap_width(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPixmap_height(QPixmapH* handle)
{
	return QPixmap_height(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_size(QPixmapH* handle, Types::PSize retval)
{
	QPixmap_size(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_rect(QPixmapH* handle, Types::PRect retval)
{
	QPixmap_rect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPixmap_depth(QPixmapH* handle)
{
	return QPixmap_depth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPixmap_defaultDepth(void)
{
	return QPixmap_defaultDepth();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_fill(QPixmapH* handle, QColorH* fillColor)/* overload */
{
	QPixmap_fill(handle, fillColor);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_fill(QPixmapH* handle, QWidgetH* p1, int xofs, int yofs)/* overload */
{
	QPixmap_fill(handle, p1, xofs, yofs);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_fill(QPixmapH* handle, QWidgetH* p1, Types::PPoint ofs)/* overload */
{
	QPixmap_fill(handle, p1, ofs);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_resize(QPixmapH* handle, int width, int height)/* overload */
{
	QPixmap_resize(handle, width, height);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_resize(QPixmapH* handle, Types::PSize p1)/* overload */
{
	QPixmap_resize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QPixmap_mask(QPixmapH* handle)
{
	return QPixmap_mask(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_setMask(QPixmapH* handle, QBitmapH* p1)
{
	QPixmap_setMask(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_selfMask(QPixmapH* handle)
{
	return QPixmap_selfMask(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_createHeuristicMask(QPixmapH* handle, QBitmapH* retval, bool clipTight)
{
	QPixmap_createHeuristicMask(handle, retval, clipTight);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_grabWindow(QPixmapH* retval, unsigned p1, int x, int y, int w, int h)
{
	QPixmap_grabWindow(retval, p1, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_grabWidget(QPixmapH* retval, QWidgetH* widget, int x, int y, int w, int h)
{
	QPixmap_grabWidget(retval, widget, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_xForm(QPixmapH* handle, QPixmapH* retval, QWMatrixH* p1)
{
	QPixmap_xForm(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_trueMatrix(QWMatrixH* retval, QWMatrixH* p1, int w, int h)
{
	QPixmap_trueMatrix(retval, p1, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_convertToImage(QPixmapH* handle, QImageH* retval)
{
	QPixmap_convertToImage(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_convertFromImage(QPixmapH* handle, QImageH* p1, QPixmapColorMode mode)/* overload */
{
	return QPixmap_convertFromImage(handle, p1, mode);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_convertFromImage(QPixmapH* handle, QImageH* p1, int conversion_flags)/* overload */
{
	return QPixmap_convertFromImage(handle, p1, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QPixmap_imageFormat(System::PWideString fileName)
{
	return QPixmap_imageFormat(fileName);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_load(QPixmapH* handle, System::PWideString fileName, char * format, QPixmapColorMode mode)/* overload */
{
	return QPixmap_load(handle, fileName, format, mode);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_load(QPixmapH* handle, System::PWideString fileName, char * format, int conversion_flags)/* overload */
{
	return QPixmap_load(handle, fileName, format, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_loadFromData(QPixmapH* handle, System::PByte buf, unsigned len, char * format, QPixmapColorMode mode)/* overload */
{
	return QPixmap_loadFromData(handle, buf, len, format, mode);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_loadFromData(QPixmapH* handle, System::PByte buf, unsigned len, char * format, int conversion_flags)/* overload */
{
	return QPixmap_loadFromData(handle, buf, len, format, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_loadFromData(QPixmapH* handle, QByteArrayH* data, char * format, int conversion_flags)/* overload */
{
	return QPixmap_loadFromData(handle, data, format, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_save(QPixmapH* handle, System::PWideString fileName, char * format)/* overload */
{
	return QPixmap_save(handle, fileName, format);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_save(QPixmapH* handle, System::PWideString fileName, char * format, int quality)/* overload */
{
	return QPixmap_save(handle, fileName, format, quality);
}
#pragma option pop


#pragma option push -w-inl
inline HBITMAP __cdecl QPixmap_hbm(QPixmapH* handle)
{
	return QPixmap_hbm(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPixmap_serialNumber(QPixmapH* handle)
{
	return QPixmap_serialNumber(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapOptimization __cdecl QPixmap_optimization(QPixmapH* handle)
{
	return QPixmap_optimization(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_setOptimization(QPixmapH* handle, QPixmapOptimization p1)
{
	QPixmap_setOptimization(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapOptimization __cdecl QPixmap_defaultOptimization(void)
{
	return QPixmap_defaultOptimization();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_setDefaultOptimization(QPixmapOptimization p1)
{
	QPixmap_setDefaultOptimization(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_detach(QPixmapH* handle)
{
	QPixmap_detach(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_isQBitmap(QPixmapH* handle)
{
	return QPixmap_isQBitmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmap_isMultiCellPixmap(QPixmapH* handle)
{
	return QPixmap_isMultiCellPixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline HDC __cdecl QPixmap_multiCellHandle(QPixmapH* handle)
{
	return QPixmap_multiCellHandle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline HBITMAP __cdecl QPixmap_multiCellBitmap(QPixmapH* handle)
{
	return QPixmap_multiCellBitmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPixmap_multiCellOffset(QPixmapH* handle)
{
	return QPixmap_multiCellOffset(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPixmap_allocCell(QPixmapH* handle)
{
	return QPixmap_allocCell(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmap_freeCell(QPixmapH* handle, bool p1)
{
	QPixmap_freeCell(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QRgbH __cdecl QPixmap_clut(QPixmapH* handle)
{
	return QPixmap_clut(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPixmap_numCols(QPixmapH* handle)
{
	return QPixmap_numCols(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPrinterH* __cdecl QPrinter_create(void)
{
	return QPrinter_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_destroy(QPrinterH* handle)
{
	QPrinter_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_printerName(QPrinterH* handle, System::PWideString retval)
{
	QPrinter_printerName(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setPrinterName(QPrinterH* handle, System::PWideString p1)
{
	QPrinter_setPrinterName(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPrinter_outputToFile(QPrinterH* handle)
{
	return QPrinter_outputToFile(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setOutputToFile(QPrinterH* handle, bool p1)
{
	QPrinter_setOutputToFile(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_outputFileName(QPrinterH* handle, System::PWideString retval)
{
	QPrinter_outputFileName(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setOutputFileName(QPrinterH* handle, System::PWideString p1)
{
	QPrinter_setOutputFileName(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_printProgram(QPrinterH* handle, System::PWideString retval)
{
	QPrinter_printProgram(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setPrintProgram(QPrinterH* handle, System::PWideString p1)
{
	QPrinter_setPrintProgram(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_printerSelectionOption(QPrinterH* handle, System::PWideString retval)
{
	QPrinter_printerSelectionOption(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setPrinterSelectionOption(QPrinterH* handle, System::PWideString p1)
{
	QPrinter_setPrinterSelectionOption(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_docName(QPrinterH* handle, System::PWideString retval)
{
	QPrinter_docName(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setDocName(QPrinterH* handle, System::PWideString p1)
{
	QPrinter_setDocName(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_creator(QPrinterH* handle, System::PWideString retval)
{
	QPrinter_creator(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setCreator(QPrinterH* handle, System::PWideString p1)
{
	QPrinter_setCreator(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPrinterOrientation __cdecl QPrinter_orientation(QPrinterH* handle)
{
	return QPrinter_orientation(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setOrientation(QPrinterH* handle, QPrinterOrientation p1)
{
	QPrinter_setOrientation(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPrinterPageSize __cdecl QPrinter_pageSize(QPrinterH* handle)
{
	return QPrinter_pageSize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setPageSize(QPrinterH* handle, QPrinterPageSize p1)
{
	QPrinter_setPageSize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setPageOrder(QPrinterH* handle, QPrinterPageOrder p1)
{
	QPrinter_setPageOrder(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPrinterPageOrder __cdecl QPrinter_pageOrder(QPrinterH* handle)
{
	return QPrinter_pageOrder(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setColorMode(QPrinterH* handle, QPrinterColorMode p1)
{
	QPrinter_setColorMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPrinterColorMode __cdecl QPrinter_colorMode(QPrinterH* handle)
{
	return QPrinter_colorMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setFullPage(QPrinterH* handle, bool p1)
{
	QPrinter_setFullPage(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPrinter_fullPage(QPrinterH* handle)
{
	return QPrinter_fullPage(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_margins(QPrinterH* handle, Types::PSize retval)
{
	QPrinter_margins(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPrinter_fromPage(QPrinterH* handle)
{
	return QPrinter_fromPage(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPrinter_toPage(QPrinterH* handle)
{
	return QPrinter_toPage(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setFromTo(QPrinterH* handle, int fromPage, int toPage)
{
	QPrinter_setFromTo(handle, fromPage, toPage);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPrinter_minPage(QPrinterH* handle)
{
	return QPrinter_minPage(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPrinter_maxPage(QPrinterH* handle)
{
	return QPrinter_maxPage(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setMinMax(QPrinterH* handle, int minPage, int maxPage)
{
	QPrinter_setMinMax(handle, minPage, maxPage);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPrinter_numCopies(QPrinterH* handle)
{
	return QPrinter_numCopies(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPrinter_setNumCopies(QPrinterH* handle, int p1)
{
	QPrinter_setNumCopies(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPrinter_newPage(QPrinterH* handle)
{
	return QPrinter_newPage(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPrinter_abort(QPrinterH* handle)
{
	return QPrinter_abort(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPrinter_aborted(QPrinterH* handle)
{
	return QPrinter_aborted(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPrinter_setup(QPrinterH* handle, QWidgetH* parent)
{
	return QPrinter_setup(handle, parent);
}
#pragma option pop


#pragma option push -w-inl
inline QRegionH* __cdecl QRegion_create(void)/* overload */
{
	return QRegion_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRegion_destroy(QRegionH* handle)
{
	QRegion_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QRegionH* __cdecl QRegion_create(int x, int y, int w, int h, QRegionRegionType p5)/* overload */
{
	return QRegion_create(x, y, w, h, p5);
}
#pragma option pop


#pragma option push -w-inl
inline QRegionH* __cdecl QRegion_create(Types::PRect p1, QRegionRegionType p2)/* overload */
{
	return QRegion_create(p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QRegionH* __cdecl QRegion_create(PPointArray p1, bool winding)/* overload */
{
	return QRegion_create(p1, winding);
}
#pragma option pop


#pragma option push -w-inl
inline QRegionH* __cdecl QRegion_create(QRegionH* p1)/* overload */
{
	return QRegion_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QRegionH* __cdecl QRegion_create(QBitmapH* p1)/* overload */
{
	return QRegion_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRegion_isNull(QRegionH* handle)
{
	return QRegion_isNull(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRegion_isEmpty(QRegionH* handle)
{
	return QRegion_isEmpty(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRegion_contains(QRegionH* handle, Types::PPoint p)/* overload */
{
	return QRegion_contains(handle, p);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRegion_contains(QRegionH* handle, Types::PRect r)/* overload */
{
	return QRegion_contains(handle, r);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRegion_translate(QRegionH* handle, int dx, int dy)
{
	QRegion_translate(handle, dx, dy);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRegion_unite(QRegionH* handle, QRegionH* retval, QRegionH* p1)
{
	QRegion_unite(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRegion_intersect(QRegionH* handle, QRegionH* retval, QRegionH* p1)
{
	QRegion_intersect(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRegion_subtract(QRegionH* handle, QRegionH* retval, QRegionH* p1)
{
	QRegion_subtract(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRegion_eor(QRegionH* handle, QRegionH* retval, QRegionH* p1)
{
	QRegion_eor(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRegion_boundingRect(QRegionH* handle, Types::PRect retval)
{
	QRegion_boundingRect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRegion_setRects(QRegionH* handle, Types::PRect p1, int p2)
{
	QRegion_setRects(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline HRGN __cdecl QRegion_handle(QRegionH* handle)/* overload */
{
	return QRegion_handle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObject_create(QObjectH* parent, char * name)
{
	return QObject_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_destroy(QObjectH* handle)
{
	QObject_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_tr(System::PWideString retval, char * p1)/* overload */
{
	QObject_tr(retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_tr(System::PWideString retval, char * p1, char * p2)/* overload */
{
	QObject_tr(retval, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_event(QObjectH* handle, QEventH* p1)
{
	return QObject_event(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_eventFilter(QObjectH* handle, QObjectH* p1, QEventH* p2)
{
	return QObject_eventFilter(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QMetaObjectH* __cdecl QObject_metaObject(QObjectH* handle)
{
	return QObject_metaObject(handle);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QObject_className(QObjectH* handle)
{
	return QObject_className(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_isA(QObjectH* handle, char * p1)
{
	return QObject_isA(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_inherits(QObjectH* handle, char * p1)
{
	return QObject_inherits(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QObject_name(QObjectH* handle)/* overload */
{
	return QObject_name(handle);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QObject_name(QObjectH* handle, char * defaultName)/* overload */
{
	return QObject_name(handle, defaultName);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_setName(QObjectH* handle, char * name)
{
	QObject_setName(handle, name);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_isWidgetType(QObjectH* handle)
{
	return QObject_isWidgetType(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_highPriority(QObjectH* handle)
{
	return QObject_highPriority(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_signalsBlocked(QObjectH* handle)
{
	return QObject_signalsBlocked(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_blockSignals(QObjectH* handle, bool b)
{
	QObject_blockSignals(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QObject_startTimer(QObjectH* handle, int interval)
{
	return QObject_startTimer(handle, interval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_killTimer(QObjectH* handle, int id)
{
	QObject_killTimer(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_killTimers(QObjectH* handle)
{
	QObject_killTimers(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObject_child(QObjectH* handle, char * name, char * _type)
{
	return QObject_child(handle, name, _type);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectListH* __cdecl QObject_children(QObjectH* handle)
{
	return QObject_children(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectListH* __cdecl QObject_objectTrees(void)
{
	return QObject_objectTrees();
}
#pragma option pop


#pragma option push -w-inl
inline QObjectListH* __cdecl QObject_queryList(QObjectH* handle, char * inheritsClass, char * objName, bool regexpMatch, bool recursiveSearch)
{
	return QObject_queryList(handle, inheritsClass, objName, regexpMatch, recursiveSearch);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_insertChild(QObjectH* handle, QObjectH* p1)
{
	QObject_insertChild(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_removeChild(QObjectH* handle, QObjectH* p1)
{
	QObject_removeChild(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_installEventFilter(QObjectH* handle, QObjectH* p1)
{
	QObject_installEventFilter(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_removeEventFilter(QObjectH* handle, QObjectH* p1)
{
	QObject_removeEventFilter(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_connect(QObjectH* sender, char * signal, QObjectH* receiver, char * member)/* overload */
{
	return QObject_connect(sender, signal, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_connect(QObjectH* handle, QObjectH* sender, char * signal, char * member)/* overload */
{
	return QObject_connect(handle, sender, signal, member);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_disconnect(QObjectH* sender, char * signal, QObjectH* receiver, char * member)/* overload */
{
	return QObject_disconnect(sender, signal, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObject_disconnect(QObjectH* handle, QObjectH* receiver, char * member)/* overload */
{
	return QObject_disconnect(handle, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_dumpObjectTree(QObjectH* handle)
{
	QObject_dumpObjectTree(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_dumpObjectInfo(QObjectH* handle)
{
	QObject_dumpObjectInfo(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObject_parent(QObjectH* handle)
{
	return QObject_parent(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_superClasses(QObjectH* handle, QStringListH* retval, bool includeThis)
{
	QObject_superClasses(handle, retval, includeThis);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSenderObject_setSender(void * handle, QObjectH* s)
{
	QSenderObject_setSender(handle, s);
}
#pragma option pop


#pragma option push -w-inl
inline QBrushH* __cdecl QBrush_create(void)/* overload */
{
	return QBrush_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QBrush_destroy(QBrushH* handle)
{
	QBrush_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QBrushH* __cdecl QBrush_create(BrushStyle p1)/* overload */
{
	return QBrush_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QBrushH* __cdecl QBrush_create(QColorH* p1, BrushStyle p2)/* overload */
{
	return QBrush_create(p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QBrushH* __cdecl QBrush_create(QColorH* p1, QPixmapH* p2)/* overload */
{
	return QBrush_create(p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline QBrushH* __cdecl QBrush_create(QBrushH* p1)/* overload */
{
	return QBrush_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline BrushStyle __cdecl QBrush_style(QBrushH* handle)
{
	return QBrush_style(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QBrush_setStyle(QBrushH* handle, BrushStyle p1)
{
	QBrush_setStyle(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QBrush_color(QBrushH* handle)
{
	return QBrush_color(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QBrush_setColor(QBrushH* handle, QColorH* p1)
{
	QBrush_setColor(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QBrush_pixmap(QBrushH* handle)
{
	return QBrush_pixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QBrush_setPixmap(QBrushH* handle, QPixmapH* p1)
{
	QBrush_setPixmap(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonGroupH* __cdecl QButtonGroup_create(QWidgetH* parent, char * name)/* overload */
{
	return QButtonGroup_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButtonGroup_destroy(QButtonGroupH* handle)
{
	QButtonGroup_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonGroupH* __cdecl QButtonGroup_create(System::PWideString title, QWidgetH* parent, char * name)/* overload */
{
	return QButtonGroup_create(title, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonGroupH* __cdecl QButtonGroup_create(int columns, Orientation o, QWidgetH* parent, char * name)/* overload */
{
	return QButtonGroup_create(columns, o, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonGroupH* __cdecl QButtonGroup_create(int columns, Orientation o, System::PWideString title, QWidgetH* parent, char * name)/* overload */
{
	return QButtonGroup_create(columns, o, title, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QButtonGroup_isExclusive(QButtonGroupH* handle)
{
	return QButtonGroup_isExclusive(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QButtonGroup_isRadioButtonExclusive(QButtonGroupH* handle)
{
	return QButtonGroup_isRadioButtonExclusive(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButtonGroup_setExclusive(QButtonGroupH* handle, bool p1)
{
	QButtonGroup_setExclusive(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButtonGroup_setRadioButtonExclusive(QButtonGroupH* handle, bool p1)
{
	QButtonGroup_setRadioButtonExclusive(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QButtonGroup_insert(QButtonGroupH* handle, QButtonH* p1, int id)
{
	return QButtonGroup_insert(handle, p1, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButtonGroup_remove(QButtonGroupH* handle, QButtonH* p1)
{
	QButtonGroup_remove(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonH* __cdecl QButtonGroup_find(QButtonGroupH* handle, int id)
{
	return QButtonGroup_find(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QButtonGroup_id(QButtonGroupH* handle, QButtonH* p1)
{
	return QButtonGroup_id(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QButtonGroup_count(QButtonGroupH* handle)
{
	return QButtonGroup_count(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButtonGroup_setButton(QButtonGroupH* handle, int id)
{
	QButtonGroup_setButton(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButtonGroup_moveFocus(QButtonGroupH* handle, int p1)
{
	QButtonGroup_moveFocus(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonH* __cdecl QButtonGroup_selected(QButtonGroupH* handle)
{
	return QButtonGroup_selected(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCheckBoxH* __cdecl QCheckBox_create(QWidgetH* parent, char * name)/* overload */
{
	return QCheckBox_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckBox_destroy(QCheckBoxH* handle)
{
	QCheckBox_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCheckBoxH* __cdecl QCheckBox_create(System::PWideString text, QWidgetH* parent, char * name)/* overload */
{
	return QCheckBox_create(text, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QCheckBox_isChecked(QCheckBoxH* handle)
{
	return QCheckBox_isChecked(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckBox_setChecked(QCheckBoxH* handle, bool check)
{
	QCheckBox_setChecked(handle, check);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckBox_setNoChange(QCheckBoxH* handle)
{
	QCheckBox_setNoChange(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckBox_setTristate(QCheckBoxH* handle, bool y)
{
	QCheckBox_setTristate(handle, y);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QCheckBox_isTristate(QCheckBoxH* handle)
{
	return QCheckBox_isTristate(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckBox_sizeHint(QCheckBoxH* handle, Types::PSize retval)
{
	QCheckBox_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckBox_sizePolicy(QCheckBoxH* handle, PSizePolicy retval)
{
	QCheckBox_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_clear(QClipboardH* handle)
{
	QClipboard_clear(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClipboard_ownsSelection(QClipboardH* handle)
{
	return QClipboard_ownsSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMimeSourceH* __cdecl QClipboard_data(QClipboardH* handle)
{
	return QClipboard_data(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_setData(QClipboardH* handle, QMimeSourceH* p1)
{
	QClipboard_setData(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_text(QClipboardH* handle, System::PWideString retval)/* overload */
{
	QClipboard_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_text(QClipboardH* handle, System::PWideString retval, System::PAnsiString subtype)/* overload */
{
	QClipboard_text(handle, retval, subtype);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_setText(QClipboardH* handle, System::PWideString p1)
{
	QClipboard_setText(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_image(QClipboardH* handle, QImageH* retval)
{
	QClipboard_image(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_pixmap(QClipboardH* handle, QPixmapH* retval)
{
	QClipboard_pixmap(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_setImage(QClipboardH* handle, QImageH* p1)
{
	QClipboard_setImage(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_setPixmap(QClipboardH* handle, QPixmapH* p1)
{
	QClipboard_setPixmap(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorDialog_getColor(QColorH* retval, QColorH* p1, QWidgetH* parent, char * name)
{
	QColorDialog_getColor(retval, p1, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorDialog_getRgba(QRgbH retval, QRgbH p1, System::PBoolean ok, QWidgetH* parent, char * name)
{
	QColorDialog_getRgba(retval, p1, ok, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QColorDialog_customCount(void)
{
	return QColorDialog_customCount();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorDialog_customColor(QRgbH retval, int p1)
{
	QColorDialog_customColor(retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorDialog_setCustomColor(int p1, QRgbH p2)
{
	QColorDialog_setCustomColor(p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_drawComboButton(QCommonStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, bool editable, bool enabled, QBrushH* fill)
{
	QCommonStyle_drawComboButton(handle, p, x, y, w, h, g, sunken, editable, enabled, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_comboButtonRect(QCommonStyleH* handle, Types::PRect retval, int x, int y, int w, int h)
{
	QCommonStyle_comboButtonRect(handle, retval, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_comboButtonFocusRect(QCommonStyleH* handle, Types::PRect retval, int x, int y, int w, int h)
{
	QCommonStyle_comboButtonFocusRect(handle, retval, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_drawComboButtonMask(QCommonStyleH* handle, QPainterH* p, int x, int y, int w, int h)
{
	QCommonStyle_drawComboButtonMask(handle, p, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_drawPushButtonLabel(QCommonStyleH* handle, QPushButtonH* btn, QPainterH* p)
{
	QCommonStyle_drawPushButtonLabel(handle, btn, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_getButtonShift(QCommonStyleH* handle, PInteger x, PInteger y)
{
	QCommonStyle_getButtonShift(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QCommonStyle_defaultFrameWidth(QCommonStyleH* handle)
{
	return QCommonStyle_defaultFrameWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_tabbarMetrics(QCommonStyleH* handle, QTabBarH* p1, PInteger p2, PInteger p3, PInteger p4)
{
	QCommonStyle_tabbarMetrics(handle, p1, p2, p3, p4);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_drawTab(QCommonStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected)
{
	QCommonStyle_drawTab(handle, p1, p2, p3, selected);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_drawTabMask(QCommonStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected)
{
	QCommonStyle_drawTabMask(handle, p1, p2, p3, selected);
}
#pragma option pop


#pragma option push -w-inl
inline QStyleScrollControl __cdecl QCommonStyle_scrollBarPointOver(QCommonStyleH* handle, QScrollBarH* sb, int sliderStart, Types::PPoint p)
{
	return QCommonStyle_scrollBarPointOver(handle, sb, sliderStart, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_drawSliderMask(QCommonStyleH* handle, QPainterH* p, int x, int y, int w, int h, Orientation p6, bool tickAbove, bool tickBelow)
{
	QCommonStyle_drawSliderMask(handle, p, x, y, w, h, p6, tickAbove, tickBelow);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_drawSliderGrooveMask(QCommonStyleH* handle, QPainterH* p, int x, int y, int w, int h, QCOORD c, Orientation p7)
{
	QCommonStyle_drawSliderGrooveMask(handle, p, x, y, w, h, c, p7);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QCommonStyle_maximumSliderDragDistance(QCommonStyleH* handle)
{
	return QCommonStyle_maximumSliderDragDistance(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QCommonStyle_popupSubmenuIndicatorWidth(QCommonStyleH* handle, QFontMetricsH* fm)
{
	return QCommonStyle_popupSubmenuIndicatorWidth(handle, fm);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_drawMenuBarItem(QCommonStyleH* handle, QPainterH* p, int x, int y, int w, int h, QMenuItemH* mi, QColorGroupH* g, bool enabled, bool active)
{
	QCommonStyle_drawMenuBarItem(handle, p, x, y, w, h, mi, g, enabled, active);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDialog_getFont(QFontH* retval, System::PBoolean ok, QFontH* def, QWidgetH* parent, char * name)/* overload */
{
	QFontDialog_getFont(retval, ok, def, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDialog_getFont(QFontH* retval, System::PBoolean ok, QWidgetH* parent, char * name)/* overload */
{
	QFontDialog_getFont(retval, ok, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline QGroupBoxH* __cdecl QGroupBox_create(QWidgetH* parent, char * name)/* overload */
{
	return QGroupBox_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QGroupBox_destroy(QGroupBoxH* handle)
{
	QGroupBox_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QGroupBoxH* __cdecl QGroupBox_create(System::PWideString title, QWidgetH* parent, char * name)/* overload */
{
	return QGroupBox_create(title, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline QGroupBoxH* __cdecl QGroupBox_create(int columns, Orientation o, QWidgetH* parent, char * name)/* overload */
{
	return QGroupBox_create(columns, o, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline QGroupBoxH* __cdecl QGroupBox_create(int columns, Orientation o, System::PWideString title, QWidgetH* parent, char * name)/* overload */
{
	return QGroupBox_create(columns, o, title, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QGroupBox_setColumnLayout(QGroupBoxH* handle, int columns, Orientation o)
{
	QGroupBox_setColumnLayout(handle, columns, o);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QGroupBox_title(QGroupBoxH* handle, System::PWideString retval)
{
	QGroupBox_title(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QGroupBox_setTitle(QGroupBoxH* handle, System::PWideString p1)
{
	QGroupBox_setTitle(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QGroupBox_alignment(QGroupBoxH* handle)
{
	return QGroupBox_alignment(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QGroupBox_setAlignment(QGroupBoxH* handle, int p1)
{
	QGroupBox_setAlignment(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QGroupBox_columns(QGroupBoxH* handle)
{
	return QGroupBox_columns(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QGroupBox_setColumns(QGroupBoxH* handle, int p1)
{
	QGroupBox_setColumns(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline Orientation __cdecl QGroupBox_orientation(QGroupBoxH* handle)
{
	return QGroupBox_orientation(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QGroupBox_setOrientation(QGroupBoxH* handle, Orientation p1)
{
	QGroupBox_setOrientation(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QGroupBox_addSpace(QGroupBoxH* handle, int p1)
{
	QGroupBox_addSpace(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QGroupBox_sizeHint(QGroupBoxH* handle, Types::PSize retval)
{
	QGroupBox_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QHeaderH* __cdecl QHeader_create(QWidgetH* parent, char * name)/* overload */
{
	return QHeader_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_destroy(QHeaderH* handle)
{
	QHeader_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QHeaderH* __cdecl QHeader_create(int p1, QWidgetH* parent, char * name)/* overload */
{
	return QHeader_create(p1, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_addLabel(QHeaderH* handle, System::PWideString p1, int size)/* overload */
{
	return QHeader_addLabel(handle, p1, size);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_addLabel(QHeaderH* handle, QIconSetH* p1, System::PWideString p2, int size)/* overload */
{
	return QHeader_addLabel(handle, p1, p2, size);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_removeLabel(QHeaderH* handle, int section)
{
	QHeader_removeLabel(handle, section);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setLabel(QHeaderH* handle, int p1, System::PWideString p2, int size)/* overload */
{
	QHeader_setLabel(handle, p1, p2, size);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setLabel(QHeaderH* handle, int p1, QIconSetH* p2, System::PWideString p3, int size)/* overload */
{
	QHeader_setLabel(handle, p1, p2, p3, size);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_label(QHeaderH* handle, System::PWideString retval, int section)
{
	QHeader_label(handle, retval, section);
}
#pragma option pop


#pragma option push -w-inl
inline QIconSetH* __cdecl QHeader_iconSet(QHeaderH* handle, int section)
{
	return QHeader_iconSet(handle, section);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setOrientation(QHeaderH* handle, Orientation p1)
{
	QHeader_setOrientation(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline Orientation __cdecl QHeader_orientation(QHeaderH* handle)
{
	return QHeader_orientation(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setTracking(QHeaderH* handle, bool enable)
{
	QHeader_setTracking(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QHeader_tracking(QHeaderH* handle)
{
	return QHeader_tracking(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setClickEnabled(QHeaderH* handle, bool p1, int section)
{
	QHeader_setClickEnabled(handle, p1, section);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setResizeEnabled(QHeaderH* handle, bool p1, int section)
{
	QHeader_setResizeEnabled(handle, p1, section);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setMovingEnabled(QHeaderH* handle, bool p1)
{
	QHeader_setMovingEnabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QHeader_isClickEnabled(QHeaderH* handle, int section)
{
	return QHeader_isClickEnabled(handle, section);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QHeader_isResizeEnabled(QHeaderH* handle, int section)
{
	return QHeader_isResizeEnabled(handle, section);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QHeader_isMovingEnabled(QHeaderH* handle)
{
	return QHeader_isMovingEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_resizeSection(QHeaderH* handle, int section, int s)
{
	QHeader_resizeSection(handle, section, s);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_sectionSize(QHeaderH* handle, int section)
{
	return QHeader_sectionSize(handle, section);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_sectionPos(QHeaderH* handle, int section)
{
	return QHeader_sectionPos(handle, section);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_sectionAt(QHeaderH* handle, int pos)
{
	return QHeader_sectionAt(handle, pos);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_count(QHeaderH* handle)
{
	return QHeader_count(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setCellSize(QHeaderH* handle, int p1, int p2)
{
	QHeader_setCellSize(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_cellSize(QHeaderH* handle, int p1)
{
	return QHeader_cellSize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_cellPos(QHeaderH* handle, int p1)
{
	return QHeader_cellPos(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_cellAt(QHeaderH* handle, int p1)
{
	return QHeader_cellAt(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_offset(QHeaderH* handle)
{
	return QHeader_offset(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_sizeHint(QHeaderH* handle, Types::PSize retval)
{
	QHeader_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_sizePolicy(QHeaderH* handle, PSizePolicy retval)
{
	QHeader_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_mapToSection(QHeaderH* handle, int index)
{
	return QHeader_mapToSection(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_mapToIndex(QHeaderH* handle, int section)
{
	return QHeader_mapToIndex(handle, section);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_mapToLogical(QHeaderH* handle, int p1)
{
	return QHeader_mapToLogical(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QHeader_mapToActual(QHeaderH* handle, int p1)
{
	return QHeader_mapToActual(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_moveSection(QHeaderH* handle, int section, int toIndex)
{
	QHeader_moveSection(handle, section, toIndex);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_moveCell(QHeaderH* handle, int p1, int p2)
{
	QHeader_moveCell(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setSortIndicator(QHeaderH* handle, int section, bool increasing)
{
	QHeader_setSortIndicator(handle, section, increasing);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setUpdatesEnabled(QHeaderH* handle, bool enable)
{
	QHeader_setUpdatesEnabled(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_setOffset(QHeaderH* handle, int pos)
{
	QHeader_setOffset(handle, pos);
}
#pragma option pop


#pragma option push -w-inl
inline QLabelH* __cdecl QLabel_create(QWidgetH* parent, char * name, int f)/* overload */
{
	return QLabel_create(parent, name, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_destroy(QLabelH* handle)
{
	QLabel_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QLabelH* __cdecl QLabel_create(System::PWideString text, QWidgetH* parent, char * name, int f)/* overload */
{
	return QLabel_create(text, parent, name, f);
}
#pragma option pop


#pragma option push -w-inl
inline QLabelH* __cdecl QLabel_create(QWidgetH* buddy, System::PWideString p2, QWidgetH* parent, char * name, int f)/* overload */
{
	return QLabel_create(buddy, p2, parent, name, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_text(QLabelH* handle, System::PWideString retval)
{
	QLabel_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QLabel_pixmap(QLabelH* handle)
{
	return QLabel_pixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMovieH* __cdecl QLabel_movie(QLabelH* handle)
{
	return QLabel_movie(handle);
}
#pragma option pop


#pragma option push -w-inl
inline TextFormat __cdecl QLabel_textFormat(QLabelH* handle)
{
	return QLabel_textFormat(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setTextFormat(QLabelH* handle, TextFormat p1)
{
	QLabel_setTextFormat(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QLabel_alignment(QLabelH* handle)
{
	return QLabel_alignment(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setAlignment(QLabelH* handle, int p1)
{
	QLabel_setAlignment(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QLabel_indent(QLabelH* handle)
{
	return QLabel_indent(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setIndent(QLabelH* handle, int p1)
{
	QLabel_setIndent(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QLabel_autoResize(QLabelH* handle)
{
	return QLabel_autoResize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setAutoResize(QLabelH* handle, bool p1)
{
	QLabel_setAutoResize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QLabel_hasScaledContents(QLabelH* handle)
{
	return QLabel_hasScaledContents(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setScaledContents(QLabelH* handle, bool p1)
{
	QLabel_setScaledContents(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_sizeHint(QLabelH* handle, Types::PSize retval)
{
	QLabel_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_minimumSizeHint(QLabelH* handle, Types::PSize retval)
{
	QLabel_minimumSizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_sizePolicy(QLabelH* handle, PSizePolicy retval)
{
	QLabel_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setBuddy(QLabelH* handle, QWidgetH* p1)
{
	QLabel_setBuddy(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QLabel_buddy(QLabelH* handle)
{
	return QLabel_buddy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setAutoMask(QLabelH* handle, bool p1)
{
	QLabel_setAutoMask(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QLabel_heightForWidth(QLabelH* handle, int p1)
{
	return QLabel_heightForWidth(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setText(QLabelH* handle, System::PWideString p1)
{
	QLabel_setText(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setPixmap(QLabelH* handle, QPixmapH* p1)
{
	QLabel_setPixmap(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setMovie(QLabelH* handle, QMovieH* p1)
{
	QLabel_setMovie(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setNum(QLabelH* handle, int p1)/* overload */
{
	QLabel_setNum(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_setNum(QLabelH* handle, double p1)/* overload */
{
	QLabel_setNum(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_clear(QLabelH* handle)
{
	QLabel_clear(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPainterH* __cdecl QPainter_create(void)/* overload */
{
	return QPainter_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_destroy(QPainterH* handle)
{
	QPainter_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPainterH* __cdecl QPainter_create(QPaintDeviceH* p1)/* overload */
{
	return QPainter_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPainterH* __cdecl QPainter_create(QPaintDeviceH* p1, QWidgetH* p2)/* overload */
{
	return QPainter_create(p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPainter_begin(QPainterH* handle, QPaintDeviceH* p1)/* overload */
{
	return QPainter_begin(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPainter_begin(QPainterH* handle, QPaintDeviceH* p1, QWidgetH* p2)/* overload */
{
	return QPainter_begin(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPainter_end(QPainterH* handle)
{
	return QPainter_end(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPaintDeviceH* __cdecl QPainter_device(QPainterH* handle)
{
	return QPainter_device(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_redirect(QPaintDeviceH* pdev, QPaintDeviceH* replacement)
{
	QPainter_redirect(pdev, replacement);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPainter_isActive(QPainterH* handle)
{
	return QPainter_isActive(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_flush(QPainterH* handle)
{
	QPainter_flush(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_save(QPainterH* handle)
{
	QPainter_save(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_restore(QPainterH* handle)
{
	QPainter_restore(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_fontMetrics(QPainterH* handle, QFontMetricsH* retval)
{
	QPainter_fontMetrics(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_fontInfo(QPainterH* handle, QFontInfoH* retval)
{
	QPainter_fontInfo(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QFontH* __cdecl QPainter_font(QPainterH* handle)
{
	return QPainter_font(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setFont(QPainterH* handle, QFontH* p1)
{
	QPainter_setFont(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPenH* __cdecl QPainter_pen(QPainterH* handle)
{
	return QPainter_pen(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setPen(QPainterH* handle, QPenH* p1)/* overload */
{
	QPainter_setPen(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setPen(QPainterH* handle, PenStyle p1)/* overload */
{
	QPainter_setPen(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setPen(QPainterH* handle, QColorH* p1)/* overload */
{
	QPainter_setPen(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QBrushH* __cdecl QPainter_brush(QPainterH* handle)
{
	return QPainter_brush(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setBrush(QPainterH* handle, QBrushH* p1)/* overload */
{
	QPainter_setBrush(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setBrush(QPainterH* handle, BrushStyle p1)/* overload */
{
	QPainter_setBrush(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setBrush(QPainterH* handle, QColorH* p1)/* overload */
{
	QPainter_setBrush(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_pos(QPainterH* handle, Types::PPoint retval)
{
	QPainter_pos(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QPainter_backgroundColor(QPainterH* handle)
{
	return QPainter_backgroundColor(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setBackgroundColor(QPainterH* handle, QColorH* p1)
{
	QPainter_setBackgroundColor(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline BGMode __cdecl QPainter_backgroundMode(QPainterH* handle)
{
	return QPainter_backgroundMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setBackgroundMode(QPainterH* handle, BGMode p1)
{
	QPainter_setBackgroundMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline RasterOp __cdecl QPainter_rasterOp(QPainterH* handle)
{
	return QPainter_rasterOp(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setRasterOp(QPainterH* handle, RasterOp p1)
{
	QPainter_setRasterOp(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline Types::PPoint __cdecl QPainter_brushOrigin(QPainterH* handle)
{
	return QPainter_brushOrigin(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setBrushOrigin(QPainterH* handle, int x, int y)/* overload */
{
	QPainter_setBrushOrigin(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setBrushOrigin(QPainterH* handle, Types::PPoint p1)/* overload */
{
	QPainter_setBrushOrigin(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPainter_hasViewXForm(QPainterH* handle)
{
	return QPainter_hasViewXForm(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPainter_hasWorldXForm(QPainterH* handle)
{
	return QPainter_hasWorldXForm(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setViewXForm(QPainterH* handle, bool p1)
{
	QPainter_setViewXForm(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_window(QPainterH* handle, Types::PRect retval)
{
	QPainter_window(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setWindow(QPainterH* handle, Types::PRect p1)/* overload */
{
	QPainter_setWindow(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setWindow(QPainterH* handle, int x, int y, int w, int h)/* overload */
{
	QPainter_setWindow(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_viewport(QPainterH* handle, Types::PRect retval)
{
	QPainter_viewport(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setViewport(QPainterH* handle, Types::PRect p1)/* overload */
{
	QPainter_setViewport(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setViewport(QPainterH* handle, int x, int y, int w, int h)/* overload */
{
	QPainter_setViewport(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setWorldXForm(QPainterH* handle, bool p1)
{
	QPainter_setWorldXForm(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QWMatrixH* __cdecl QPainter_worldMatrix(QPainterH* handle)
{
	return QPainter_worldMatrix(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setWorldMatrix(QPainterH* handle, QWMatrixH* p1, bool combine)
{
	QPainter_setWorldMatrix(handle, p1, combine);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_saveWorldMatrix(QPainterH* handle)
{
	QPainter_saveWorldMatrix(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_restoreWorldMatrix(QPainterH* handle)
{
	QPainter_restoreWorldMatrix(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_scale(QPainterH* handle, double sx, double sy)
{
	QPainter_scale(handle, sx, sy);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_shear(QPainterH* handle, double sh, double sv)
{
	QPainter_shear(handle, sh, sv);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_rotate(QPainterH* handle, double a)
{
	QPainter_rotate(handle, a);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_translate(QPainterH* handle, double dx, double dy)
{
	QPainter_translate(handle, dx, dy);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_resetXForm(QPainterH* handle)
{
	QPainter_resetXForm(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_xForm(QPainterH* handle, Types::PPoint retval, Types::PPoint p1)/* overload */
{
	QPainter_xForm(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_xForm(QPainterH* handle, Types::PRect retval, Types::PRect p1)/* overload */
{
	QPainter_xForm(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_xForm(QPainterH* handle, PPointArray retval, PPointArray p1)/* overload */
{
	QPainter_xForm(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_xForm(QPainterH* handle, PPointArray retval, PPointArray p1, int index, int npoints)/* overload */
{
	QPainter_xForm(handle, retval, p1, index, npoints);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_xFormDev(QPainterH* handle, Types::PPoint retval, Types::PPoint p1)/* overload */
{
	QPainter_xFormDev(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_xFormDev(QPainterH* handle, Types::PRect retval, Types::PRect p1)/* overload */
{
	QPainter_xFormDev(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_xFormDev(QPainterH* handle, PPointArray retval, PPointArray p1)/* overload */
{
	QPainter_xFormDev(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_xFormDev(QPainterH* handle, PPointArray retval, PPointArray p1, int index, int npoints)/* overload */
{
	QPainter_xFormDev(handle, retval, p1, index, npoints);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setClipping(QPainterH* handle, bool p1)
{
	QPainter_setClipping(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPainter_hasClipping(QPainterH* handle)
{
	return QPainter_hasClipping(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QRegionH* __cdecl QPainter_clipRegion(QPainterH* handle)
{
	return QPainter_clipRegion(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setClipRect(QPainterH* handle, Types::PRect p1)/* overload */
{
	QPainter_setClipRect(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setClipRect(QPainterH* handle, int x, int y, int w, int h)/* overload */
{
	QPainter_setClipRect(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setClipRegion(QPainterH* handle, QRegionH* p1)
{
	QPainter_setClipRegion(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPoint(QPainterH* handle, int x, int y)/* overload */
{
	QPainter_drawPoint(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPoint(QPainterH* handle, Types::PPoint p1)/* overload */
{
	QPainter_drawPoint(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPoints(QPainterH* handle, PPointArray a, int index, int npoints)
{
	QPainter_drawPoints(handle, a, index, npoints);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_moveTo(QPainterH* handle, int x, int y)/* overload */
{
	QPainter_moveTo(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_moveTo(QPainterH* handle, Types::PPoint p1)/* overload */
{
	QPainter_moveTo(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_lineTo(QPainterH* handle, int x, int y)/* overload */
{
	QPainter_lineTo(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_lineTo(QPainterH* handle, Types::PPoint p1)/* overload */
{
	QPainter_lineTo(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawLine(QPainterH* handle, int x1, int y1, int x2, int y2)/* overload */
{
	QPainter_drawLine(handle, x1, y1, x2, y2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawLine(QPainterH* handle, Types::PPoint p1, Types::PPoint p2)/* overload */
{
	QPainter_drawLine(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawRect(QPainterH* handle, int x, int y, int w, int h)/* overload */
{
	QPainter_drawRect(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawRect(QPainterH* handle, Types::PRect p1)/* overload */
{
	QPainter_drawRect(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawWinFocusRect(QPainterH* handle, int x, int y, int w, int h)/* overload */
{
	QPainter_drawWinFocusRect(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawWinFocusRect(QPainterH* handle, int x, int y, int w, int h, QColorH* bgColor)/* overload */
{
	QPainter_drawWinFocusRect(handle, x, y, w, h, bgColor);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawWinFocusRect(QPainterH* handle, Types::PRect p1)/* overload */
{
	QPainter_drawWinFocusRect(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawWinFocusRect(QPainterH* handle, Types::PRect p1, QColorH* bgColor)/* overload */
{
	QPainter_drawWinFocusRect(handle, p1, bgColor);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawRoundRect(QPainterH* handle, int x, int y, int w, int h, int p5, int p6)/* overload */
{
	QPainter_drawRoundRect(handle, x, y, w, h, p5, p6);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawRoundRect(QPainterH* handle, Types::PRect p1, int p2, int p3)/* overload */
{
	QPainter_drawRoundRect(handle, p1, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawRoundRect(QPainterH* handle, int x, int y, int w, int h)/* overload */
{
	QPainter_drawRoundRect(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawRoundRect(QPainterH* handle, Types::PRect p1)/* overload */
{
	QPainter_drawRoundRect(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawEllipse(QPainterH* handle, int x, int y, int w, int h)/* overload */
{
	QPainter_drawEllipse(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawEllipse(QPainterH* handle, Types::PRect p1)/* overload */
{
	QPainter_drawEllipse(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawArc(QPainterH* handle, int x, int y, int w, int h, int a, int alen)/* overload */
{
	QPainter_drawArc(handle, x, y, w, h, a, alen);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawArc(QPainterH* handle, Types::PRect p1, int a, int alen)/* overload */
{
	QPainter_drawArc(handle, p1, a, alen);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPie(QPainterH* handle, int x, int y, int w, int h, int a, int alen)/* overload */
{
	QPainter_drawPie(handle, x, y, w, h, a, alen);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPie(QPainterH* handle, Types::PRect p1, int a, int alen)/* overload */
{
	QPainter_drawPie(handle, p1, a, alen);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawChord(QPainterH* handle, int x, int y, int w, int h, int a, int alen)/* overload */
{
	QPainter_drawChord(handle, x, y, w, h, a, alen);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawChord(QPainterH* handle, Types::PRect p1, int a, int alen)/* overload */
{
	QPainter_drawChord(handle, p1, a, alen);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawLineSegments(QPainterH* handle, PPointArray p1, int index, int nlines)
{
	QPainter_drawLineSegments(handle, p1, index, nlines);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPolyline(QPainterH* handle, PPointArray p1, int index, int npoints)
{
	QPainter_drawPolyline(handle, p1, index, npoints);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPolygon(QPainterH* handle, PPointArray p1, bool winding, int index, int npoints)
{
	QPainter_drawPolygon(handle, p1, winding, index, npoints);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawQuadBezier(QPainterH* handle, PPointArray p1, int index)
{
	QPainter_drawQuadBezier(handle, p1, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPixmap(QPainterH* handle, int x, int y, QPixmapH* p3, int sx, int sy, int sw, int sh)/* overload */
{
	QPainter_drawPixmap(handle, x, y, p3, sx, sy, sw, sh);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPixmap(QPainterH* handle, Types::PPoint p1, QPixmapH* p2, Types::PRect sr)/* overload */
{
	QPainter_drawPixmap(handle, p1, p2, sr);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPixmap(QPainterH* handle, Types::PPoint p1, QPixmapH* p2)/* overload */
{
	QPainter_drawPixmap(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawImage(QPainterH* handle, int x, int y, QImageH* p3, int sx, int sy, int sw, int sh)/* overload */
{
	QPainter_drawImage(handle, x, y, p3, sx, sy, sw, sh);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawImage(QPainterH* handle, Types::PPoint p1, QImageH* p2, Types::PRect sr)/* overload */
{
	QPainter_drawImage(handle, p1, p2, sr);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawImage(QPainterH* handle, Types::PPoint p1, QImageH* p2)/* overload */
{
	QPainter_drawImage(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawImage(QPainterH* handle, int x, int y, QImageH* p3, int sx, int sy, int sw, int sh, int conversion_flags)/* overload */
{
	QPainter_drawImage(handle, x, y, p3, sx, sy, sw, sh, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawImage(QPainterH* handle, Types::PPoint p1, QImageH* p2, Types::PRect sr, int conversion_flags)/* overload */
{
	QPainter_drawImage(handle, p1, p2, sr, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawImage(QPainterH* handle, Types::PPoint p1, QImageH* p2, int conversion_flags)/* overload */
{
	QPainter_drawImage(handle, p1, p2, conversion_flags);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawTiledPixmap(QPainterH* handle, int x, int y, int w, int h, QPixmapH* p5, int sx, int sy)/* overload */
{
	QPainter_drawTiledPixmap(handle, x, y, w, h, p5, sx, sy);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawTiledPixmap(QPainterH* handle, Types::PRect p1, QPixmapH* p2, Types::PPoint p3)/* overload */
{
	QPainter_drawTiledPixmap(handle, p1, p2, p3);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawTiledPixmap(QPainterH* handle, Types::PRect p1, QPixmapH* p2)/* overload */
{
	QPainter_drawTiledPixmap(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawPicture(QPainterH* handle, QPictureH* p1)
{
	QPainter_drawPicture(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_fillRect(QPainterH* handle, int x, int y, int w, int h, QBrushH* p5)/* overload */
{
	QPainter_fillRect(handle, x, y, w, h, p5);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_fillRect(QPainterH* handle, Types::PRect p1, QBrushH* p2)/* overload */
{
	QPainter_fillRect(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_eraseRect(QPainterH* handle, int x, int y, int w, int h)/* overload */
{
	QPainter_eraseRect(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_eraseRect(QPainterH* handle, Types::PRect p1)/* overload */
{
	QPainter_eraseRect(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawText(QPainterH* handle, int x, int y, System::PWideString p3, int len)/* overload */
{
	QPainter_drawText(handle, x, y, p3, len);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawText(QPainterH* handle, Types::PPoint p1, System::PWideString p2, int len)/* overload */
{
	QPainter_drawText(handle, p1, p2, len);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawText(QPainterH* handle, int x, int y, int w, int h, int flags, System::PWideString p6, int len, Types::PRect br, System::PPChar internal)/* overload */
{
	QPainter_drawText(handle, x, y, w, h, flags, p6, len, br, internal);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_drawText(QPainterH* handle, Types::PRect p1, int flags, System::PWideString p3, int len, Types::PRect br, System::PPChar internal)/* overload */
{
	QPainter_drawText(handle, p1, flags, p3, len, br, internal);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_boundingRect(QPainterH* handle, Types::PRect retval, int x, int y, int w, int h, int flags, System::PWideString p6, int len, System::PPChar intern)/* overload */
{
	QPainter_boundingRect(handle, retval, x, y, w, h, flags, p6, len, intern);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_boundingRect(QPainterH* handle, Types::PRect retval, Types::PRect p1, int flags, System::PWideString p3, int len, System::PPChar intern)/* overload */
{
	QPainter_boundingRect(handle, retval, p1, flags, p3, len, intern);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPainter_tabStops(QPainterH* handle)
{
	return QPainter_tabStops(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setTabStops(QPainterH* handle, int p1)
{
	QPainter_setTabStops(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline PInteger __cdecl QPainter_tabArray(QPainterH* handle)
{
	return QPainter_tabArray(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_setTabArray(QPainterH* handle, PInteger p1)
{
	QPainter_setTabArray(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline HDC __cdecl QPainter_handle(QPainterH* handle)/* overload */
{
	return QPainter_handle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_initialize(void)
{
	QPainter_initialize();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_cleanup(void)
{
	QPainter_cleanup();
}
#pragma option pop


#pragma option push -w-inl
inline QPenH* __cdecl QPen_create(void)/* overload */
{
	return QPen_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPen_destroy(QPenH* handle)
{
	QPen_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPenH* __cdecl QPen_create(PenStyle p1)/* overload */
{
	return QPen_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPenH* __cdecl QPen_create(QColorH* color, unsigned width, PenStyle style)/* overload */
{
	return QPen_create(color, width, style);
}
#pragma option pop


#pragma option push -w-inl
inline QPenH* __cdecl QPen_create(QColorH* cl, unsigned w, PenStyle s, PenCapStyle c, PenJoinStyle j)/* overload */
{
	return QPen_create(cl, w, s, c, j);
}
#pragma option pop


#pragma option push -w-inl
inline QPenH* __cdecl QPen_create(QPenH* p1)/* overload */
{
	return QPen_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline PenStyle __cdecl QPen_style(QPenH* handle)
{
	return QPen_style(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPen_setStyle(QPenH* handle, PenStyle p1)
{
	QPen_setStyle(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QPen_width(QPenH* handle)
{
	return QPen_width(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPen_setWidth(QPenH* handle, unsigned p1)
{
	QPen_setWidth(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QPen_color(QPenH* handle)
{
	return QPen_color(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPen_setColor(QPenH* handle, QColorH* p1)
{
	QPen_setColor(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline PenCapStyle __cdecl QPen_capStyle(QPenH* handle)
{
	return QPen_capStyle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPen_setCapStyle(QPenH* handle, PenCapStyle p1)
{
	QPen_setCapStyle(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline PenJoinStyle __cdecl QPen_joinStyle(QPenH* handle)
{
	return QPen_joinStyle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPen_setJoinStyle(QPenH* handle, PenJoinStyle p1)
{
	QPen_setJoinStyle(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPopupMenuH* __cdecl QPopupMenu_create(QWidgetH* parent, char * name)
{
	return QPopupMenu_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_destroy(QPopupMenuH* handle)
{
	QPopupMenu_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_popup(QPopupMenuH* handle, Types::PPoint pos, int indexAtPoint)
{
	QPopupMenu_popup(handle, pos, indexAtPoint);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_updateItem(QPopupMenuH* handle, int id)
{
	QPopupMenu_updateItem(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_setCheckable(QPopupMenuH* handle, bool p1)
{
	QPopupMenu_setCheckable(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPopupMenu_isCheckable(QPopupMenuH* handle)
{
	return QPopupMenu_isCheckable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_setFont(QPopupMenuH* handle, QFontH* p1)
{
	QPopupMenu_setFont(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_show(QPopupMenuH* handle)
{
	QPopupMenu_show(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_hide(QPopupMenuH* handle)
{
	QPopupMenu_hide(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPopupMenu_exec(QPopupMenuH* handle)/* overload */
{
	return QPopupMenu_exec(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPopupMenu_exec(QPopupMenuH* handle, Types::PPoint pos, int indexAtPoint)/* overload */
{
	return QPopupMenu_exec(handle, pos, indexAtPoint);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_setActiveItem(QPopupMenuH* handle, int p1)
{
	QPopupMenu_setActiveItem(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_sizeHint(QPopupMenuH* handle, Types::PSize retval)
{
	QPopupMenu_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPopupMenu_idAt(QPopupMenuH* handle, int index)/* overload */
{
	return QPopupMenu_idAt(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPopupMenu_idAt(QPopupMenuH* handle, Types::PPoint pos)/* overload */
{
	return QPopupMenu_idAt(handle, pos);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPopupMenu_customWhatsThis(QPopupMenuH* handle)
{
	return QPopupMenu_customWhatsThis(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPopupMenu_insertTearOffHandle(QPopupMenuH* handle, int id, int index)
{
	return QPopupMenu_insertTearOffHandle(handle, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_activateItemAt(QPopupMenuH* handle, int index)
{
	QPopupMenu_activateItemAt(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline QMenuDataH* __cdecl QPopupMenu_to_QMenuData(QPopupMenuH* handle)
{
	return QPopupMenu_to_QMenuData(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPushButtonH* __cdecl QPushButton_create(QWidgetH* parent, char * name)/* overload */
{
	return QPushButton_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_destroy(QPushButtonH* handle)
{
	QPushButton_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPushButtonH* __cdecl QPushButton_create(System::PWideString text, QWidgetH* parent, char * name)/* overload */
{
	return QPushButton_create(text, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline QPushButtonH* __cdecl QPushButton_create(QIconSetH* icon, System::PWideString text, QWidgetH* parent, char * name)/* overload */
{
	return QPushButton_create(icon, text, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_sizeHint(QPushButtonH* handle, Types::PSize retval)
{
	QPushButton_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_sizePolicy(QPushButtonH* handle, PSizePolicy retval)
{
	QPushButton_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_move(QPushButtonH* handle, int x, int y)/* overload */
{
	QPushButton_move(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_move(QPushButtonH* handle, Types::PPoint p)/* overload */
{
	QPushButton_move(handle, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_resize(QPushButtonH* handle, int w, int h)/* overload */
{
	QPushButton_resize(handle, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_resize(QPushButtonH* handle, Types::PSize p1)/* overload */
{
	QPushButton_resize(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_setGeometry(QPushButtonH* handle, int x, int y, int w, int h)/* overload */
{
	QPushButton_setGeometry(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_setGeometry(QPushButtonH* handle, Types::PRect p1)/* overload */
{
	QPushButton_setGeometry(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_setToggleButton(QPushButtonH* handle, bool p1)
{
	QPushButton_setToggleButton(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPushButton_autoDefault(QPushButtonH* handle)
{
	return QPushButton_autoDefault(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_setAutoDefault(QPushButtonH* handle, bool autoDef)
{
	QPushButton_setAutoDefault(handle, autoDef);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPushButton_isDefault(QPushButtonH* handle)
{
	return QPushButton_isDefault(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_setDefault(QPushButtonH* handle, bool def)
{
	QPushButton_setDefault(handle, def);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_setIsMenuButton(QPushButtonH* handle, bool p1)
{
	QPushButton_setIsMenuButton(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPushButton_isMenuButton(QPushButtonH* handle)
{
	return QPushButton_isMenuButton(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_setPopup(QPushButtonH* handle, QPopupMenuH* popup)
{
	QPushButton_setPopup(handle, popup);
}
#pragma option pop


#pragma option push -w-inl
inline QPopupMenuH* __cdecl QPushButton_popup(QPushButtonH* handle)
{
	return QPushButton_popup(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_setIconSet(QPushButtonH* handle, QIconSetH* p1)
{
	QPushButton_setIconSet(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QIconSetH* __cdecl QPushButton_iconSet(QPushButtonH* handle)
{
	return QPushButton_iconSet(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_setFlat(QPushButtonH* handle, bool p1)
{
	QPushButton_setFlat(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPushButton_isFlat(QPushButtonH* handle)
{
	return QPushButton_isFlat(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_setOn(QPushButtonH* handle, bool p1)
{
	QPushButton_setOn(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_toggle(QPushButtonH* handle)
{
	QPushButton_toggle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QRadioButtonH* __cdecl QRadioButton_create(QWidgetH* parent, char * name)/* overload */
{
	return QRadioButton_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRadioButton_destroy(QRadioButtonH* handle)
{
	QRadioButton_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QRadioButtonH* __cdecl QRadioButton_create(System::PWideString text, QWidgetH* parent, char * name)/* overload */
{
	return QRadioButton_create(text, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRadioButton_isChecked(QRadioButtonH* handle)
{
	return QRadioButton_isChecked(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRadioButton_setChecked(QRadioButtonH* handle, bool check)
{
	QRadioButton_setChecked(handle, check);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRadioButton_sizeHint(QRadioButtonH* handle, Types::PSize retval)
{
	QRadioButton_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRadioButton_sizePolicy(QRadioButtonH* handle, PSizePolicy retval)
{
	QRadioButton_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollBarH* __cdecl QScrollBar_create(QWidgetH* parent, char * name)/* overload */
{
	return QScrollBar_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_destroy(QScrollBarH* handle)
{
	QScrollBar_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollBarH* __cdecl QScrollBar_create(Orientation p1, QWidgetH* parent, char * name)/* overload */
{
	return QScrollBar_create(p1, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollBarH* __cdecl QScrollBar_create(int minValue, int maxValue, int LineStep, int PageStep, int value, Orientation p6, QWidgetH* parent, char * name)/* overload */
{
	return QScrollBar_create(minValue, maxValue, LineStep, PageStep, value, p6, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_setOrientation(QScrollBarH* handle, Orientation p1)
{
	QScrollBar_setOrientation(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline Orientation __cdecl QScrollBar_orientation(QScrollBarH* handle)
{
	return QScrollBar_orientation(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_setTracking(QScrollBarH* handle, bool enable)
{
	QScrollBar_setTracking(handle, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QScrollBar_tracking(QScrollBarH* handle)
{
	return QScrollBar_tracking(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QScrollBar_draggingSlider(QScrollBarH* handle)
{
	return QScrollBar_draggingSlider(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_setPalette(QScrollBarH* handle, QPaletteH* p1)
{
	QScrollBar_setPalette(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_sizeHint(QScrollBarH* handle, Types::PSize retval)
{
	QScrollBar_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_sizePolicy(QScrollBarH* handle, PSizePolicy retval)
{
	QScrollBar_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollBar_minValue(QScrollBarH* handle)
{
	return QScrollBar_minValue(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollBar_maxValue(QScrollBarH* handle)
{
	return QScrollBar_maxValue(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_setMinValue(QScrollBarH* handle, int p1)
{
	QScrollBar_setMinValue(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_setMaxValue(QScrollBarH* handle, int p1)
{
	QScrollBar_setMaxValue(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollBar_lineStep(QScrollBarH* handle)
{
	return QScrollBar_lineStep(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollBar_pageStep(QScrollBarH* handle)
{
	return QScrollBar_pageStep(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_setLineStep(QScrollBarH* handle, int p1)
{
	QScrollBar_setLineStep(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_setPageStep(QScrollBarH* handle, int p1)
{
	QScrollBar_setPageStep(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QScrollBar_value(QScrollBarH* handle)
{
	return QScrollBar_value(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_setValue(QScrollBarH* handle, int p1)
{
	QScrollBar_setValue(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QRangeControlH* __cdecl QScrollBar_to_QRangeControl(QScrollBarH* handle)
{
	return QScrollBar_to_QRangeControl(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QSizeGripH* __cdecl QSizeGrip_create(QWidgetH* parent, char * name)
{
	return QSizeGrip_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSizeGrip_destroy(QSizeGripH* handle)
{
	QSizeGrip_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSizeGrip_sizeHint(QSizeGripH* handle, Types::PSize retval)
{
	QSizeGrip_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSizeGrip_sizePolicy(QSizeGripH* handle, PSizePolicy retval)
{
	QSizeGrip_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTableView_setBackgroundColor(QTableViewH* handle, QColorH* p1)
{
	QTableView_setBackgroundColor(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTableView_setPalette(QTableViewH* handle, QPaletteH* p1)
{
	QTableView_setPalette(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTableView_show(QTableViewH* handle)
{
	QTableView_show(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTableView_repaint(QTableViewH* handle, bool erase)/* overload */
{
	QTableView_repaint(handle, erase);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTableView_repaint(QTableViewH* handle, int x, int y, int w, int h, bool erase)/* overload */
{
	QTableView_repaint(handle, x, y, w, h, erase);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTableView_repaint(QTableViewH* handle, Types::PRect p1, bool erase)/* overload */
{
	QTableView_repaint(handle, p1, erase);
}
#pragma option pop


#pragma option push -w-inl
inline QTextBrowserH* __cdecl QTextBrowser_create(QWidgetH* parent, char * name)
{
	return QTextBrowser_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_destroy(QTextBrowserH* handle)
{
	QTextBrowser_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_setSource(QTextBrowserH* handle, System::PWideString name)
{
	QTextBrowser_setSource(handle, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_source(QTextBrowserH* handle, System::PWideString retval)
{
	QTextBrowser_source(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_setText(QTextBrowserH* handle, System::PWideString contents, System::PWideString context)
{
	QTextBrowser_setText(handle, contents, context);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_scrollToAnchor(QTextBrowserH* handle, System::PWideString name)
{
	QTextBrowser_scrollToAnchor(handle, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_backward(QTextBrowserH* handle)
{
	QTextBrowser_backward(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_forward(QTextBrowserH* handle)
{
	QTextBrowser_forward(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_home(QTextBrowserH* handle)
{
	QTextBrowser_home(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTextViewH* __cdecl QTextView_create(QWidgetH* parent, char * name)/* overload */
{
	return QTextView_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_destroy(QTextViewH* handle)
{
	QTextView_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTextViewH* __cdecl QTextView_create(System::PWideString text, System::PWideString context, QWidgetH* parent, char * name)/* overload */
{
	return QTextView_create(text, context, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_setText(QTextViewH* handle, System::PWideString text, System::PWideString context)/* overload */
{
	QTextView_setText(handle, text, context);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_setText(QTextViewH* handle, System::PWideString text)/* overload */
{
	QTextView_setText(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_text(QTextViewH* handle, System::PWideString retval)
{
	QTextView_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_context(QTextViewH* handle, System::PWideString retval)
{
	QTextView_context(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline TextFormat __cdecl QTextView_textFormat(QTextViewH* handle)
{
	return QTextView_textFormat(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_setTextFormat(QTextViewH* handle, TextFormat p1)
{
	QTextView_setTextFormat(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QStyleSheetH* __cdecl QTextView_styleSheet(QTextViewH* handle)
{
	return QTextView_styleSheet(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_setStyleSheet(QTextViewH* handle, QStyleSheetH* styleSheet)
{
	QTextView_setStyleSheet(handle, styleSheet);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_setPaper(QTextViewH* handle, QBrushH* pap)
{
	QTextView_setPaper(handle, pap);
}
#pragma option pop


#pragma option push -w-inl
inline QBrushH* __cdecl QTextView_paper(QTextViewH* handle)/* overload */
{
	return QTextView_paper(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_setPaperColorGroup(QTextViewH* handle, QColorGroupH* colgrp)
{
	QTextView_setPaperColorGroup(handle, colgrp);
}
#pragma option pop


#pragma option push -w-inl
inline QColorGroupH* __cdecl QTextView_paperColorGroup(QTextViewH* handle)
{
	return QTextView_paperColorGroup(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_setLinkColor(QTextViewH* handle, QColorH* p1)
{
	QTextView_setLinkColor(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QColorH* __cdecl QTextView_linkColor(QTextViewH* handle)
{
	return QTextView_linkColor(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_setLinkUnderline(QTextViewH* handle, bool p1)
{
	QTextView_setLinkUnderline(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QTextView_linkUnderline(QTextViewH* handle)
{
	return QTextView_linkUnderline(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_setMimeSourceFactory(QTextViewH* handle, QMimeSourceFactoryH* factory)
{
	QTextView_setMimeSourceFactory(handle, factory);
}
#pragma option pop


#pragma option push -w-inl
inline QMimeSourceFactoryH* __cdecl QTextView_mimeSourceFactory(QTextViewH* handle)
{
	return QTextView_mimeSourceFactory(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_documentTitle(QTextViewH* handle, System::PWideString retval)
{
	QTextView_documentTitle(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QTextView_heightForWidth(QTextViewH* handle, int w)
{
	return QTextView_heightForWidth(handle, w);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_append(QTextViewH* handle, System::PWideString text)
{
	QTextView_append(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QTextView_hasSelectedText(QTextViewH* handle)
{
	return QTextView_hasSelectedText(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_selectedText(QTextViewH* handle, System::PWideString retval)
{
	QTextView_selectedText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_copy(QTextViewH* handle)
{
	QTextView_copy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_selectAll(QTextViewH* handle)
{
	QTextView_selectAll(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWhatsThisH* __cdecl QWhatsThis_create(QWidgetH* p1)
{
	return QWhatsThis_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWhatsThis_destroy(QWhatsThisH* handle)
{
	QWhatsThis_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWhatsThis_text(QWhatsThisH* handle, System::PWideString retval, Types::PPoint p1)
{
	QWhatsThis_text(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWhatsThis_add(QWidgetH* p1, System::PWideString p2)
{
	QWhatsThis_add(p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWhatsThis_remove(QWidgetH* p1)
{
	QWhatsThis_remove(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWhatsThis_textFor(System::PWideString retval, QWidgetH* p1, Types::PPoint pos)
{
	QWhatsThis_textFor(retval, p1, pos);
}
#pragma option pop


#pragma option push -w-inl
inline QToolButtonH* __cdecl QWhatsThis_whatsThisButton(QWidgetH* parent)
{
	return QWhatsThis_whatsThisButton(parent);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWhatsThis_enterWhatsThisMode(void)
{
	QWhatsThis_enterWhatsThisMode();
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWhatsThis_inWhatsThisMode(void)
{
	return QWhatsThis_inWhatsThisMode();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWhatsThis_leaveWhatsThisMode(System::PWideString p1, Types::PPoint pos)
{
	QWhatsThis_leaveWhatsThisMode(p1, pos);
}
#pragma option pop


#pragma option push -w-inl
inline QWindowsStyleH* __cdecl QWindowsStyle_create(void)
{
	return QWindowsStyle_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_destroy(QWindowsStyleH* handle)
{
	QWindowsStyle_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawButton(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill)
{
	QWindowsStyle_drawButton(handle, p, x, y, w, h, g, sunken, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawBevelButton(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill)
{
	QWindowsStyle_drawBevelButton(handle, p, x, y, w, h, g, sunken, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawFocusRect(QWindowsStyleH* handle, QPainterH* p1, Types::PRect p2, QColorGroupH* p3, QColorH* p4, bool p5)
{
	QWindowsStyle_drawFocusRect(handle, p1, p2, p3, p4, p5);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawPushButton(QWindowsStyleH* handle, QPushButtonH* btn, QPainterH* p)
{
	QWindowsStyle_drawPushButton(handle, btn, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_getButtonShift(QWindowsStyleH* handle, PInteger x, PInteger y)
{
	QWindowsStyle_getButtonShift(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawPanel(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* p6, bool sunken, int lineWidth, QBrushH* fill)
{
	QWindowsStyle_drawPanel(handle, p, x, y, w, h, p6, sunken, lineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawPopupPanel(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* p6, int lineWidth, QBrushH* fill)
{
	QWindowsStyle_drawPopupPanel(handle, p, x, y, w, h, p6, lineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawArrow(QWindowsStyleH* handle, QPainterH* p, ArrowType _type, bool down, int x, int y, int w, int h, QColorGroupH* g, bool enabled, QBrushH* fill)
{
	QWindowsStyle_drawArrow(handle, p, _type, down, x, y, w, h, g, enabled, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_indicatorSize(QWindowsStyleH* handle, Types::PSize retval)
{
	QWindowsStyle_indicatorSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawIndicator(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, int s, bool down, bool enabled)
{
	QWindowsStyle_drawIndicator(handle, p, x, y, w, h, g, s, down, enabled);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_exclusiveIndicatorSize(QWindowsStyleH* handle, Types::PSize retval)
{
	QWindowsStyle_exclusiveIndicatorSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawExclusiveIndicator(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool on, bool down, bool enabled)
{
	QWindowsStyle_drawExclusiveIndicator(handle, p, x, y, w, h, g, on, down, enabled);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawExclusiveIndicatorMask(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, bool on)
{
	QWindowsStyle_drawExclusiveIndicatorMask(handle, p, x, y, w, h, on);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawComboButton(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, bool editable, bool enabled, QBrushH* fill)
{
	QWindowsStyle_drawComboButton(handle, p, x, y, w, h, g, sunken, editable, enabled, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_comboButtonRect(QWindowsStyleH* handle, Types::PRect retval, int x, int y, int w, int h)
{
	QWindowsStyle_comboButtonRect(handle, retval, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_comboButtonFocusRect(QWindowsStyleH* handle, Types::PRect retval, int x, int y, int w, int h)
{
	QWindowsStyle_comboButtonFocusRect(handle, retval, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_tabbarMetrics(QWindowsStyleH* handle, QTabBarH* p1, PInteger p2, PInteger p3, PInteger p4)
{
	QWindowsStyle_tabbarMetrics(handle, p1, p2, p3, p4);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawTab(QWindowsStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected)
{
	QWindowsStyle_drawTab(handle, p1, p2, p3, selected);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawTabMask(QWindowsStyleH* handle, QPainterH* p1, QTabBarH* p2, QTabH* p3, bool selected)
{
	QWindowsStyle_drawTabMask(handle, p1, p2, p3, selected);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_scrollBarMetrics(QWindowsStyleH* handle, QScrollBarH* p1, PInteger p2, PInteger p3, PInteger p4, PInteger p5)
{
	QWindowsStyle_scrollBarMetrics(handle, p1, p2, p3, p4, p5);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawScrollBarControls(QWindowsStyleH* handle, QPainterH* p1, QScrollBarH* p2, int sliderStart, unsigned controls, unsigned activeControl)
{
	QWindowsStyle_drawScrollBarControls(handle, p1, p2, sliderStart, controls, activeControl);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWindowsStyle_sliderLength(QWindowsStyleH* handle)
{
	return QWindowsStyle_sliderLength(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawSlider(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, Orientation p7, bool tickAbove, bool tickBelow)
{
	QWindowsStyle_drawSlider(handle, p, x, y, w, h, g, p7, tickAbove, tickBelow);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawSliderMask(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, Orientation p6, bool tickAbove, bool tickBelow)
{
	QWindowsStyle_drawSliderMask(handle, p, x, y, w, h, p6, tickAbove, tickBelow);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawSliderGroove(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, QCOORD c, Orientation p8)
{
	QWindowsStyle_drawSliderGroove(handle, p, x, y, w, h, g, c, p8);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWindowsStyle_maximumSliderDragDistance(QWindowsStyleH* handle)
{
	return QWindowsStyle_maximumSliderDragDistance(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWindowsStyle_splitterWidth(QWindowsStyleH* handle)
{
	return QWindowsStyle_splitterWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawSplitter(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, Orientation p7)
{
	QWindowsStyle_drawSplitter(handle, p, x, y, w, h, g, p7);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawCheckMark(QWindowsStyleH* handle, QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool act, bool dis)
{
	QWindowsStyle_drawCheckMark(handle, p, x, y, w, h, g, act, dis);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_polishPopupMenu(QWindowsStyleH* handle, QPopupMenuH* p1)
{
	QWindowsStyle_polishPopupMenu(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWindowsStyle_extraPopupMenuItemWidth(QWindowsStyleH* handle, bool checkable, int maxpmw, QMenuItemH* mi, QFontMetricsH* fm)
{
	return QWindowsStyle_extraPopupMenuItemWidth(handle, checkable, maxpmw, mi, fm);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWindowsStyle_popupMenuItemHeight(QWindowsStyleH* handle, bool checkable, QMenuItemH* mi, QFontMetricsH* fm)
{
	return QWindowsStyle_popupMenuItemHeight(handle, checkable, mi, fm);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_drawPopupMenuItem(QWindowsStyleH* handle, QPainterH* p, bool checkable, int maxpmw, int tab, QMenuItemH* mi, QPaletteH* pal, bool act, bool enabled, int x, int y, int w, int h)
{
	QWindowsStyle_drawPopupMenuItem(handle, p, checkable, maxpmw, tab, mi, pal, act, enabled, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline QTimerH* __cdecl QTimer_create(QObjectH* parent, char * name)
{
	return QTimer_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTimer_destroy(QTimerH* handle)
{
	QTimer_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QTimer_isActive(QTimerH* handle)
{
	return QTimer_isActive(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QTimer_start(QTimerH* handle, int msec, bool sshot)
{
	return QTimer_start(handle, msec, sshot);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTimer_changeInterval(QTimerH* handle, int msec)
{
	QTimer_changeInterval(handle, msec);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTimer_stop(QTimerH* handle)
{
	QTimer_stop(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTimer_singleShot(int msec, QObjectH* receiver, char * member)
{
	QTimer_singleShot(msec, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline QWorkspaceH* __cdecl QWorkspace_create(QWidgetH* parent, char * name)
{
	return QWorkspace_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWorkspace_destroy(QWorkspaceH* handle)
{
	QWorkspace_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWorkspace_activeWindow(QWorkspaceH* handle)
{
	return QWorkspace_activeWindow(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWorkspace_sizePolicy(QWorkspaceH* handle, PSizePolicy retval)
{
	QWorkspace_sizePolicy(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWorkspace_sizeHint(QWorkspaceH* handle, Types::PSize retval)
{
	QWorkspace_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWorkspace_cascade(QWorkspaceH* handle)
{
	QWorkspace_cascade(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWorkspace_tile(QWorkspaceH* handle)
{
	QWorkspace_tile(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QBitmap_create(void)/* overload */
{
	return QBitmap_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QBitmap_destroy(QBitmapH* handle)
{
	QBitmap_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QBitmap_create(int w, int h, bool clear, QPixmapOptimization p4)/* overload */
{
	return QBitmap_create(w, h, clear, p4);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QBitmap_create(Types::PSize p1, bool clear, QPixmapOptimization p3)/* overload */
{
	return QBitmap_create(p1, clear, p3);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QBitmap_create(int w, int h, System::PByte bits, bool isXbitmap)/* overload */
{
	return QBitmap_create(w, h, bits, isXbitmap);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QBitmap_create(Types::PSize p1, System::PByte bits, bool isXbitmap)/* overload */
{
	return QBitmap_create(p1, bits, isXbitmap);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QBitmap_create(QBitmapH* p1)/* overload */
{
	return QBitmap_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QBitmap_create(System::PWideString fileName, char * format)/* overload */
{
	return QBitmap_create(fileName, format);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QBitmap_xForm(QBitmapH* handle, QBitmapH* retval, QWMatrixH* p1)
{
	QBitmap_xForm(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QCursorH* __cdecl QCursor_create(void)/* overload */
{
	return QCursor_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCursor_destroy(QCursorH* handle)
{
	QCursor_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCursorH* __cdecl QCursor_create(int shape)/* overload */
{
	return QCursor_create(shape);
}
#pragma option pop


#pragma option push -w-inl
inline QCursorH* __cdecl QCursor_create(QBitmapH* bitmap, QBitmapH* mask, int hotX, int hotY)/* overload */
{
	return QCursor_create(bitmap, mask, hotX, hotY);
}
#pragma option pop


#pragma option push -w-inl
inline QCursorH* __cdecl QCursor_create(QPixmapH* pixmap, int hotX, int hotY)/* overload */
{
	return QCursor_create(pixmap, hotX, hotY);
}
#pragma option pop


#pragma option push -w-inl
inline QCursorH* __cdecl QCursor_create(QCursorH* p1)/* overload */
{
	return QCursor_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QCursor_shape(QCursorH* handle)
{
	return QCursor_shape(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCursor_setShape(QCursorH* handle, int p1)
{
	QCursor_setShape(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QCursor_bitmap(QCursorH* handle)
{
	return QCursor_bitmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QCursor_mask(QCursorH* handle)
{
	return QCursor_mask(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCursor_hotSpot(QCursorH* handle, Types::PPoint retval)
{
	QCursor_hotSpot(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline HCURSOR __cdecl QCursor_handle(QCursorH* handle)/* overload */
{
	return QCursor_handle(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCursor_initialize(void)
{
	QCursor_initialize();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCursor_cleanup(void)
{
	QCursor_cleanup();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCursor_pos(Types::PPoint retval)
{
	QCursor_pos(retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCursor_setPos(int x, int y)/* overload */
{
	QCursor_setPos(x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCursor_setPos(Types::PPoint p1)/* overload */
{
	QCursor_setPos(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QFontDatabaseH* __cdecl QFontDatabase_create(void)
{
	return QFontDatabase_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_destroy(QFontDatabaseH* handle)
{
	QFontDatabase_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_families(QFontDatabaseH* handle, QStringListH* retval, bool onlyForLocale)
{
	QFontDatabase_families(handle, retval, onlyForLocale);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_pointSizes(QFontDatabaseH* handle, PIntArray retval, System::PWideString family, System::PWideString style, System::PWideString charSet)
{
	QFontDatabase_pointSizes(handle, retval, family, style, charSet);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_styles(QFontDatabaseH* handle, QStringListH* retval, System::PWideString family, System::PWideString charSet)
{
	QFontDatabase_styles(handle, retval, family, charSet);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_charSets(QFontDatabaseH* handle, QStringListH* retval, System::PWideString familyName, bool onlyForLocale)/* overload */
{
	QFontDatabase_charSets(handle, retval, familyName, onlyForLocale);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_font(QFontDatabaseH* handle, QFontH* retval, System::PWideString familyName, System::PWideString style, int pointSize, System::PWideString charSetName)
{
	QFontDatabase_font(handle, retval, familyName, style, pointSize, charSetName);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontDatabase_isBitmapScalable(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet)
{
	return QFontDatabase_isBitmapScalable(handle, family, style, charSet);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontDatabase_isSmoothlyScalable(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet)
{
	return QFontDatabase_isSmoothlyScalable(handle, family, style, charSet);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontDatabase_isScalable(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet)
{
	return QFontDatabase_isScalable(handle, family, style, charSet);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_smoothSizes(QFontDatabaseH* handle, PIntArray retval, System::PWideString family, System::PWideString style, System::PWideString charSet)
{
	QFontDatabase_smoothSizes(handle, retval, family, style, charSet);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_standardSizes(PIntArray retval)
{
	QFontDatabase_standardSizes(retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontDatabase_italic(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet)
{
	return QFontDatabase_italic(handle, family, style, charSet);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontDatabase_bold(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet)
{
	return QFontDatabase_bold(handle, family, style, charSet);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontDatabase_weight(QFontDatabaseH* handle, System::PWideString family, System::PWideString style, System::PWideString charSet)
{
	return QFontDatabase_weight(handle, family, style, charSet);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_styleString(QFontDatabaseH* handle, System::PWideString retval, QFontH* p1)
{
	QFontDatabase_styleString(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_verboseCharSetName(System::PWideString retval, System::PWideString charSetName)
{
	QFontDatabase_verboseCharSetName(retval, charSetName);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDatabase_charSetSample(System::PWideString retval, System::PWideString charSetName)
{
	QFontDatabase_charSetSample(retval, charSetName);
}
#pragma option pop


#pragma option push -w-inl
inline QFontInfoH* __cdecl QFontInfo_create(QFontH* p1)/* overload */
{
	return QFontInfo_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontInfo_destroy(QFontInfoH* handle)
{
	QFontInfo_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFontInfoH* __cdecl QFontInfo_create(QFontInfoH* p1)/* overload */
{
	return QFontInfo_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontInfo_family(QFontInfoH* handle, System::PWideString retval)
{
	QFontInfo_family(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontInfo_pointSize(QFontInfoH* handle)
{
	return QFontInfo_pointSize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontInfo_italic(QFontInfoH* handle)
{
	return QFontInfo_italic(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontInfo_weight(QFontInfoH* handle)
{
	return QFontInfo_weight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontInfo_bold(QFontInfoH* handle)
{
	return QFontInfo_bold(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontInfo_underline(QFontInfoH* handle)
{
	return QFontInfo_underline(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontInfo_strikeOut(QFontInfoH* handle)
{
	return QFontInfo_strikeOut(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontInfo_fixedPitch(QFontInfoH* handle)
{
	return QFontInfo_fixedPitch(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFontStyleHint __cdecl QFontInfo_styleHint(QFontInfoH* handle)
{
	return QFontInfo_styleHint(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFontCharSet __cdecl QFontInfo_charSet(QFontInfoH* handle)
{
	return QFontInfo_charSet(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontInfo_rawMode(QFontInfoH* handle)
{
	return QFontInfo_rawMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontInfo_exactMatch(QFontInfoH* handle)
{
	return QFontInfo_exactMatch(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFontH* __cdecl QFontInfo_font(QFontInfoH* handle)
{
	return QFontInfo_font(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFontMetricsH* __cdecl QFontMetrics_create(QFontH* p1)/* overload */
{
	return QFontMetrics_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontMetrics_destroy(QFontMetricsH* handle)
{
	QFontMetrics_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFontMetricsH* __cdecl QFontMetrics_create(QFontMetricsH* p1)/* overload */
{
	return QFontMetrics_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_ascent(QFontMetricsH* handle)
{
	return QFontMetrics_ascent(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_descent(QFontMetricsH* handle)
{
	return QFontMetrics_descent(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_height(QFontMetricsH* handle)
{
	return QFontMetrics_height(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_leading(QFontMetricsH* handle)
{
	return QFontMetrics_leading(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_lineSpacing(QFontMetricsH* handle)
{
	return QFontMetrics_lineSpacing(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_minLeftBearing(QFontMetricsH* handle)
{
	return QFontMetrics_minLeftBearing(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_minRightBearing(QFontMetricsH* handle)
{
	return QFontMetrics_minRightBearing(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_maxWidth(QFontMetricsH* handle)
{
	return QFontMetrics_maxWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QFontMetrics_inFont(QFontMetricsH* handle, wchar_t * p1)
{
	return QFontMetrics_inFont(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_leftBearing(QFontMetricsH* handle, wchar_t * p1)
{
	return QFontMetrics_leftBearing(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_rightBearing(QFontMetricsH* handle, wchar_t * p1)
{
	return QFontMetrics_rightBearing(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_width(QFontMetricsH* handle, System::PWideString p1, int len)/* overload */
{
	return QFontMetrics_width(handle, p1, len);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_width(QFontMetricsH* handle, wchar_t * p1)/* overload */
{
	return QFontMetrics_width(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_width(QFontMetricsH* handle, char c)/* overload */
{
	return QFontMetrics_width(handle, c);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontMetrics_boundingRect(QFontMetricsH* handle, Types::PRect retval, System::PWideString p1, int len)/* overload */
{
	QFontMetrics_boundingRect(handle, retval, p1, len);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontMetrics_boundingRect(QFontMetricsH* handle, Types::PRect retval, wchar_t * p1)/* overload */
{
	QFontMetrics_boundingRect(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontMetrics_boundingRect(QFontMetricsH* handle, Types::PRect retval, int x, int y, int w, int h, int flags, System::PWideString str, int len, int tabstops, PInteger tabarray, System::PPChar intern)/* overload */
{
	QFontMetrics_boundingRect(handle, retval, x, y, w, h, flags, str, len, tabstops, tabarray, intern);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontMetrics_size(QFontMetricsH* handle, Types::PSize retval, int flags, System::PWideString str, int len, int tabstops, PInteger tabarray, System::PPChar intern)
{
	QFontMetrics_size(handle, retval, flags, str, len, tabstops, tabarray, intern);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_underlinePos(QFontMetricsH* handle)
{
	return QFontMetrics_underlinePos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_strikeOutPos(QFontMetricsH* handle)
{
	return QFontMetrics_strikeOutPos(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QFontMetrics_lineWidth(QFontMetricsH* handle)
{
	return QFontMetrics_lineWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QInputDialog_getText(System::PWideString retval, System::PWideString caption, System::PWideString _label, System::PWideString text, System::PBoolean ok, QWidgetH* parent, char * name)/* overload */
{
	QInputDialog_getText(retval, caption, _label, text, ok, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QInputDialog_getText(System::PWideString retval, System::PWideString caption, System::PWideString _label, QLineEditEchoMode echo, System::PWideString text, System::PBoolean ok, QWidgetH* parent, char * name)/* overload */
{
	QInputDialog_getText(retval, caption, _label, echo, text, ok, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QInputDialog_getInteger(System::PWideString caption, System::PWideString _label, int num, int from, int _to, int step, System::PBoolean ok, QWidgetH* parent, char * name)
{
	return QInputDialog_getInteger(caption, _label, num, from, _to, step, ok, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline double __cdecl QInputDialog_getDouble(System::PWideString caption, System::PWideString _label, double num, double from, double _to, int decimals, System::PBoolean ok, QWidgetH* parent, char * name)
{
	return QInputDialog_getDouble(caption, _label, num, from, _to, decimals, ok, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QInputDialog_getItem(System::PWideString retval, System::PWideString caption, System::PWideString _label, QStringListH* list, int current, bool editable, System::PBoolean ok, QWidgetH* parent, char * name)
{
	QInputDialog_getItem(retval, caption, _label, list, current, editable, ok, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline QIODeviceH* __cdecl QIODevice_create(void)
{
	return QIODevice_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIODevice_destroy(QIODeviceH* handle)
{
	QIODevice_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_flags(QIODeviceH* handle)
{
	return QIODevice_flags(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_mode(QIODeviceH* handle)
{
	return QIODevice_mode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_state(QIODeviceH* handle)
{
	return QIODevice_state(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isDirectAccess(QIODeviceH* handle)
{
	return QIODevice_isDirectAccess(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isSequentialAccess(QIODeviceH* handle)
{
	return QIODevice_isSequentialAccess(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isCombinedAccess(QIODeviceH* handle)
{
	return QIODevice_isCombinedAccess(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isBuffered(QIODeviceH* handle)
{
	return QIODevice_isBuffered(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isRaw(QIODeviceH* handle)
{
	return QIODevice_isRaw(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isSynchronous(QIODeviceH* handle)
{
	return QIODevice_isSynchronous(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isAsynchronous(QIODeviceH* handle)
{
	return QIODevice_isAsynchronous(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isTranslated(QIODeviceH* handle)
{
	return QIODevice_isTranslated(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isReadable(QIODeviceH* handle)
{
	return QIODevice_isReadable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isWritable(QIODeviceH* handle)
{
	return QIODevice_isWritable(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isReadWrite(QIODeviceH* handle)
{
	return QIODevice_isReadWrite(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isInactive(QIODeviceH* handle)
{
	return QIODevice_isInactive(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_isOpen(QIODeviceH* handle)
{
	return QIODevice_isOpen(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_status(QIODeviceH* handle)
{
	return QIODevice_status(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIODevice_resetStatus(QIODeviceH* handle)
{
	QIODevice_resetStatus(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_open(QIODeviceH* handle, int mode)
{
	return QIODevice_open(handle, mode);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIODevice_close(QIODeviceH* handle)
{
	QIODevice_close(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIODevice_flush(QIODeviceH* handle)
{
	QIODevice_flush(handle);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QIODevice_size(QIODeviceH* handle)
{
	return QIODevice_size(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_at(QIODeviceH* handle)/* overload */
{
	return QIODevice_at(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_at(QIODeviceH* handle, int p1)/* overload */
{
	return QIODevice_at(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_atEnd(QIODeviceH* handle)
{
	return QIODevice_atEnd(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QIODevice_reset(QIODeviceH* handle)
{
	return QIODevice_reset(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_readBlock(QIODeviceH* handle, char * data, unsigned maxlen)
{
	return QIODevice_readBlock(handle, data, maxlen);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_writeBlock(QIODeviceH* handle, char * data, unsigned len)/* overload */
{
	return QIODevice_writeBlock(handle, data, len);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_readLine(QIODeviceH* handle, char * data, unsigned maxlen)
{
	return QIODevice_readLine(handle, data, maxlen);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_writeBlock(QIODeviceH* handle, QByteArrayH* data)/* overload */
{
	return QIODevice_writeBlock(handle, data);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIODevice_readAll(QIODeviceH* handle, QByteArrayH* retval)
{
	QIODevice_readAll(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_getch(QIODeviceH* handle)
{
	return QIODevice_getch(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_putch(QIODeviceH* handle, int p1)
{
	return QIODevice_putch(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QIODevice_ungetch(QIODeviceH* handle, int p1)
{
	return QIODevice_ungetch(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QMenuItemH* __cdecl QMenuItem_create(void)
{
	return QMenuItem_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuItem_destroy(QMenuItemH* handle)
{
	QMenuItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuItem_id(QMenuItemH* handle)
{
	return QMenuItem_id(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIconSetH* __cdecl QMenuItem_iconSet(QMenuItemH* handle)
{
	return QMenuItem_iconSet(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuItem_text(QMenuItemH* handle, System::PWideString retval)
{
	QMenuItem_text(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuItem_whatsThis(QMenuItemH* handle, System::PWideString retval)
{
	QMenuItem_whatsThis(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QMenuItem_pixmap(QMenuItemH* handle)
{
	return QMenuItem_pixmap(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPopupMenuH* __cdecl QMenuItem_popup(QMenuItemH* handle)
{
	return QMenuItem_popup(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QMenuItem_widget(QMenuItemH* handle)
{
	return QMenuItem_widget(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCustomMenuItemH* __cdecl QMenuItem_custom(QMenuItemH* handle)
{
	return QMenuItem_custom(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuItem_key(QMenuItemH* handle)
{
	return QMenuItem_key(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QSignalH* __cdecl QMenuItem_signal(QMenuItemH* handle)
{
	return QMenuItem_signal(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuItem_isSeparator(QMenuItemH* handle)
{
	return QMenuItem_isSeparator(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuItem_isEnabled(QMenuItemH* handle)
{
	return QMenuItem_isEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuItem_isChecked(QMenuItemH* handle)
{
	return QMenuItem_isChecked(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuItem_isDirty(QMenuItemH* handle)
{
	return QMenuItem_isDirty(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuItem_setText(QMenuItemH* handle, System::PWideString text)
{
	QMenuItem_setText(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuItem_setDirty(QMenuItemH* handle, bool dirty)
{
	QMenuItem_setDirty(handle, dirty);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuItem_setWhatsThis(QMenuItemH* handle, System::PWideString text)
{
	QMenuItem_setWhatsThis(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline QCustomMenuItemH* __cdecl QCustomMenuItem_create(void)
{
	return QCustomMenuItem_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCustomMenuItem_destroy(QCustomMenuItemH* handle)
{
	QCustomMenuItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QCustomMenuItem_fullSpan(QCustomMenuItemH* handle)
{
	return QCustomMenuItem_fullSpan(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QCustomMenuItem_isSeparator(QCustomMenuItemH* handle)
{
	return QCustomMenuItem_isSeparator(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCustomMenuItem_setFont(QCustomMenuItemH* handle, QFontH* font)
{
	QCustomMenuItem_setFont(handle, font);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCustomMenuItem_paint(QCustomMenuItemH* handle, QPainterH* p, QColorGroupH* cg, bool act, bool enabled, int x, int y, int w, int h)
{
	QCustomMenuItem_paint(handle, p, cg, act, enabled, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCustomMenuItem_sizeHint(QCustomMenuItemH* handle, Types::PSize retval)
{
	QCustomMenuItem_sizeHint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline QMenuDataH* __cdecl QMenuData_create(void)
{
	return QMenuData_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_destroy(QMenuDataH* handle)
{
	QMenuData_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QMenuData_count(QMenuDataH* handle)
{
	return QMenuData_count(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, System::PWideString text, QObjectH* receiver, char * member, int accel, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, text, receiver, member, accel, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, System::PWideString text, QObjectH* receiver, char * member, int accel, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, icon, text, receiver, member, accel, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QPixmapH* pixmap, QObjectH* receiver, char * member, int accel, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, pixmap, receiver, member, accel, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, QPixmapH* pixmap, QObjectH* receiver, char * member, int accel, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, icon, pixmap, receiver, member, accel, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, System::PWideString text, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, text, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, System::PWideString text, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, icon, text, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, System::PWideString text, QPopupMenuH* popup, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, text, popup, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, System::PWideString text, QPopupMenuH* popup, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, icon, text, popup, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QPixmapH* pixmap, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, pixmap, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, QPixmapH* pixmap, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, icon, pixmap, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QPixmapH* pixmap, QPopupMenuH* popup, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, pixmap, popup, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, QPixmapH* pixmap, QPopupMenuH* popup, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, icon, pixmap, popup, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QWidgetH* widget, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, widget, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QIconSetH* icon, QCustomMenuItemH* custom, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, icon, custom, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertItem(QMenuDataH* handle, QCustomMenuItemH* custom, int id, int index)/* overload */
{
	return QMenuData_insertItem(handle, custom, id, index);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_insertSeparator(QMenuDataH* handle, int index)
{
	return QMenuData_insertSeparator(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_removeItem(QMenuDataH* handle, int id)
{
	QMenuData_removeItem(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_removeItemAt(QMenuDataH* handle, int index)
{
	QMenuData_removeItemAt(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_clear(QMenuDataH* handle)
{
	QMenuData_clear(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_accel(QMenuDataH* handle, int id)
{
	return QMenuData_accel(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_setAccel(QMenuDataH* handle, int key, int id)
{
	QMenuData_setAccel(handle, key, id);
}
#pragma option pop


#pragma option push -w-inl
inline QIconSetH* __cdecl QMenuData_iconSet(QMenuDataH* handle, int id)
{
	return QMenuData_iconSet(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_text(QMenuDataH* handle, System::PWideString retval, int id)
{
	QMenuData_text(handle, retval, id);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QMenuData_pixmap(QMenuDataH* handle, int id)
{
	return QMenuData_pixmap(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_setWhatsThis(QMenuDataH* handle, int id, System::PWideString p2)
{
	QMenuData_setWhatsThis(handle, id, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_whatsThis(QMenuDataH* handle, System::PWideString retval, int id)
{
	QMenuData_whatsThis(handle, retval, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_changeItem(QMenuDataH* handle, int id, System::PWideString text)/* overload */
{
	QMenuData_changeItem(handle, id, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_changeItem(QMenuDataH* handle, int id, QPixmapH* pixmap)/* overload */
{
	QMenuData_changeItem(handle, id, pixmap);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_changeItem(QMenuDataH* handle, int id, QIconSetH* icon, System::PWideString text)/* overload */
{
	QMenuData_changeItem(handle, id, icon, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_changeItem(QMenuDataH* handle, int id, QIconSetH* icon, QPixmapH* pixmap)/* overload */
{
	QMenuData_changeItem(handle, id, icon, pixmap);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_changeItem(QMenuDataH* handle, System::PWideString text, int id)/* overload */
{
	QMenuData_changeItem(handle, text, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_changeItem(QMenuDataH* handle, QPixmapH* pixmap, int id)/* overload */
{
	QMenuData_changeItem(handle, pixmap, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_changeItem(QMenuDataH* handle, QIconSetH* icon, System::PWideString text, int id)/* overload */
{
	QMenuData_changeItem(handle, icon, text, id);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuData_isItemEnabled(QMenuDataH* handle, int id)
{
	return QMenuData_isItemEnabled(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_setItemEnabled(QMenuDataH* handle, int id, bool enable)
{
	QMenuData_setItemEnabled(handle, id, enable);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuData_isItemChecked(QMenuDataH* handle, int id)
{
	return QMenuData_isItemChecked(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_setItemChecked(QMenuDataH* handle, int id, bool check)
{
	QMenuData_setItemChecked(handle, id, check);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_updateItem(QMenuDataH* handle, int id)
{
	QMenuData_updateItem(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_indexOf(QMenuDataH* handle, int id)
{
	return QMenuData_indexOf(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_idAt(QMenuDataH* handle, int index)
{
	return QMenuData_idAt(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_setId(QMenuDataH* handle, int index, int id)
{
	QMenuData_setId(handle, index, id);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuData_connectItem(QMenuDataH* handle, int id, QObjectH* receiver, char * member)
{
	return QMenuData_connectItem(handle, id, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuData_disconnectItem(QMenuDataH* handle, int id, QObjectH* receiver, char * member)
{
	return QMenuData_disconnectItem(handle, id, receiver, member);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMenuData_setItemParameter(QMenuDataH* handle, int id, int param)
{
	return QMenuData_setItemParameter(handle, id, param);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QMenuData_itemParameter(QMenuDataH* handle, int id)
{
	return QMenuData_itemParameter(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline QMenuItemH* __cdecl QMenuData_findItem(QMenuDataH* handle, int id)/* overload */
{
	return QMenuData_findItem(handle, id);
}
#pragma option pop


#pragma option push -w-inl
inline QMenuItemH* __cdecl QMenuData_findItem(QMenuDataH* handle, int id, QMenuDataHH parent)/* overload */
{
	return QMenuData_findItem(handle, id, parent);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuData_activateItemAt(QMenuDataH* handle, int index)
{
	QMenuData_activateItemAt(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QMimeSource_format(QMimeSourceH* handle, int n)
{
	return QMimeSource_format(handle, n);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMimeSource_provides(QMimeSourceH* handle, char * p1)
{
	return QMimeSource_provides(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSource_encodedData(QMimeSourceH* handle, QByteArrayH* retval, char * p1)
{
	QMimeSource_encodedData(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QMimeSourceFactoryH* __cdecl QMimeSourceFactory_create(void)
{
	return QMimeSourceFactory_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_destroy(QMimeSourceFactoryH* handle)
{
	QMimeSourceFactory_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMimeSourceFactoryH* __cdecl QMimeSourceFactory_defaultFactory(void)
{
	return QMimeSourceFactory_defaultFactory();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_setDefaultFactory(QMimeSourceFactoryH* p1)
{
	QMimeSourceFactory_setDefaultFactory(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QMimeSourceH* __cdecl QMimeSourceFactory_data(QMimeSourceFactoryH* handle, System::PWideString abs_name)/* overload */
{
	return QMimeSourceFactory_data(handle, abs_name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_makeAbsolute(QMimeSourceFactoryH* handle, System::PWideString retval, System::PWideString abs_or_rel_name, System::PWideString context)
{
	QMimeSourceFactory_makeAbsolute(handle, retval, abs_or_rel_name, context);
}
#pragma option pop


#pragma option push -w-inl
inline QMimeSourceH* __cdecl QMimeSourceFactory_data(QMimeSourceFactoryH* handle, System::PWideString abs_or_rel_name, System::PWideString context)/* overload */
{
	return QMimeSourceFactory_data(handle, abs_or_rel_name, context);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_setText(QMimeSourceFactoryH* handle, System::PWideString abs_name, System::PWideString text)
{
	QMimeSourceFactory_setText(handle, abs_name, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_setImage(QMimeSourceFactoryH* handle, System::PWideString abs_name, QImageH* im)
{
	QMimeSourceFactory_setImage(handle, abs_name, im);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_setPixmap(QMimeSourceFactoryH* handle, System::PWideString abs_name, QPixmapH* pm)
{
	QMimeSourceFactory_setPixmap(handle, abs_name, pm);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_setData(QMimeSourceFactoryH* handle, System::PWideString abs_name, QMimeSourceH* data)
{
	QMimeSourceFactory_setData(handle, abs_name, data);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_setFilePath(QMimeSourceFactoryH* handle, QStringListH* p1)
{
	QMimeSourceFactory_setFilePath(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_filePath(QMimeSourceFactoryH* handle, QStringListH* retval)
{
	QMimeSourceFactory_filePath(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_addFilePath(QMimeSourceFactoryH* handle, System::PWideString p1)
{
	QMimeSourceFactory_addFilePath(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSourceFactory_setExtensionType(QMimeSourceFactoryH* handle, System::PWideString ext, char * mimetype)
{
	QMimeSourceFactory_setExtensionType(handle, ext, mimetype);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWindowsMime_registerMimeType(char * mime)
{
	return QWindowsMime_registerMimeType(mime);
}
#pragma option pop


#pragma option push -w-inl
inline QPaintDeviceMetricsH* __cdecl QPaintDeviceMetrics_create(QPaintDeviceH* p1)
{
	return QPaintDeviceMetrics_create(p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPaintDeviceMetrics_destroy(QPaintDeviceMetricsH* handle)
{
	QPaintDeviceMetrics_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPaintDeviceMetrics_width(QPaintDeviceMetricsH* handle)
{
	return QPaintDeviceMetrics_width(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPaintDeviceMetrics_height(QPaintDeviceMetricsH* handle)
{
	return QPaintDeviceMetrics_height(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPaintDeviceMetrics_widthMM(QPaintDeviceMetricsH* handle)
{
	return QPaintDeviceMetrics_widthMM(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPaintDeviceMetrics_heightMM(QPaintDeviceMetricsH* handle)
{
	return QPaintDeviceMetrics_heightMM(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPaintDeviceMetrics_logicalDpiX(QPaintDeviceMetricsH* handle)
{
	return QPaintDeviceMetrics_logicalDpiX(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPaintDeviceMetrics_logicalDpiY(QPaintDeviceMetricsH* handle)
{
	return QPaintDeviceMetrics_logicalDpiY(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPaintDeviceMetrics_numColors(QPaintDeviceMetricsH* handle)
{
	return QPaintDeviceMetrics_numColors(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPaintDeviceMetrics_depth(QPaintDeviceMetricsH* handle)
{
	return QPaintDeviceMetrics_depth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPictureH* __cdecl QPicture_create(int formatVersion)
{
	return QPicture_create(formatVersion);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPicture_destroy(QPictureH* handle)
{
	QPicture_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPicture_isNull(QPictureH* handle)
{
	return QPicture_isNull(handle);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QPicture_size(QPictureH* handle)
{
	return QPicture_size(handle);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QPicture_data(QPictureH* handle)
{
	return QPicture_data(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPicture_setData(QPictureH* handle, char * data, unsigned size)
{
	QPicture_setData(handle, data, size);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPicture_play(QPictureH* handle, QPainterH* p1)
{
	return QPicture_play(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPicture_load(QPictureH* handle, System::PWideString fileName)
{
	return QPicture_load(handle, fileName);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPicture_save(QPictureH* handle, System::PWideString fileName)
{
	return QPicture_save(handle, fileName);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPixmapCache_cacheLimit(void)
{
	return QPixmapCache_cacheLimit();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmapCache_setCacheLimit(int p1)
{
	QPixmapCache_setCacheLimit(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QPixmapCache_find(System::PWideString key)/* overload */
{
	return QPixmapCache_find(key);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmapCache_find(System::PWideString key, QPixmapH* p2)/* overload */
{
	return QPixmapCache_find(key, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPixmapCache_insert(System::PWideString key, QPixmapH* p2)/* overload */
{
	return QPixmapCache_insert(key, p2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPixmapCache_clear(void)
{
	QPixmapCache_clear();
}
#pragma option pop


#pragma option push -w-inl
inline QPointH* __cdecl QPoint_create(void)/* overload */
{
	return QPoint_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPoint_destroy(QPointH* handle)
{
	QPoint_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPointH* __cdecl QPoint_create(int xpos, int ypos)/* overload */
{
	return QPoint_create(xpos, ypos);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QPoint_isNull(QPointH* handle)
{
	return QPoint_isNull(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPoint_x(QPointH* handle)
{
	return QPoint_x(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPoint_y(QPointH* handle)
{
	return QPoint_y(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPoint_setX(QPointH* handle, int x)
{
	QPoint_setX(handle, x);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPoint_setY(QPointH* handle, int y)
{
	QPoint_setY(handle, y);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QPoint_manhattanLength(QPointH* handle)
{
	return QPoint_manhattanLength(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCOORD __cdecl QPoint_rx(QPointH* handle)
{
	return QPoint_rx(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCOORD __cdecl QPoint_ry(QPointH* handle)
{
	return QPoint_ry(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QRangeControlH* __cdecl QRangeControl_create(void)/* overload */
{
	return QRangeControl_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRangeControl_destroy(QRangeControlH* handle)
{
	QRangeControl_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QRangeControlH* __cdecl QRangeControl_create(int minValue, int maxValue, int lineStep, int pageStep, int value)/* overload */
{
	return QRangeControl_create(minValue, maxValue, lineStep, pageStep, value);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRangeControl_value(QRangeControlH* handle)
{
	return QRangeControl_value(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRangeControl_setValue(QRangeControlH* handle, int p1)
{
	QRangeControl_setValue(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRangeControl_addPage(QRangeControlH* handle)
{
	QRangeControl_addPage(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRangeControl_subtractPage(QRangeControlH* handle)
{
	QRangeControl_subtractPage(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRangeControl_addLine(QRangeControlH* handle)
{
	QRangeControl_addLine(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRangeControl_subtractLine(QRangeControlH* handle)
{
	QRangeControl_subtractLine(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRangeControl_minValue(QRangeControlH* handle)
{
	return QRangeControl_minValue(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRangeControl_maxValue(QRangeControlH* handle)
{
	return QRangeControl_maxValue(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRangeControl_setRange(QRangeControlH* handle, int minValue, int maxValue)
{
	QRangeControl_setRange(handle, minValue, maxValue);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRangeControl_lineStep(QRangeControlH* handle)
{
	return QRangeControl_lineStep(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRangeControl_pageStep(QRangeControlH* handle)
{
	return QRangeControl_pageStep(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRangeControl_setSteps(QRangeControlH* handle, int line, int page)
{
	QRangeControl_setSteps(handle, line, page);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRangeControl_bound(QRangeControlH* handle, int p1)
{
	return QRangeControl_bound(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QRectH* __cdecl QRect_create(void)/* overload */
{
	return QRect_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_destroy(QRectH* handle)
{
	QRect_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QRectH* __cdecl QRect_create(Types::PPoint topleft, Types::PPoint bottomright)/* overload */
{
	return QRect_create(topleft, bottomright);
}
#pragma option pop


#pragma option push -w-inl
inline QRectH* __cdecl QRect_create(Types::PPoint topleft, Types::PSize size)/* overload */
{
	return QRect_create(topleft, size);
}
#pragma option pop


#pragma option push -w-inl
inline QRectH* __cdecl QRect_create(int left, int top, int width, int height)/* overload */
{
	return QRect_create(left, top, width, height);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRect_isNull(QRectH* handle)
{
	return QRect_isNull(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRect_isEmpty(QRectH* handle)
{
	return QRect_isEmpty(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRect_isValid(QRectH* handle)
{
	return QRect_isValid(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_normalize(QRectH* handle, Types::PRect retval)
{
	QRect_normalize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRect_left(QRectH* handle)
{
	return QRect_left(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRect_top(QRectH* handle)
{
	return QRect_top(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRect_right(QRectH* handle)
{
	return QRect_right(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRect_bottom(QRectH* handle)
{
	return QRect_bottom(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCOORD __cdecl QRect_rLeft(QRectH* handle)
{
	return QRect_rLeft(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCOORD __cdecl QRect_rTop(QRectH* handle)
{
	return QRect_rTop(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCOORD __cdecl QRect_rRight(QRectH* handle)
{
	return QRect_rRight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCOORD __cdecl QRect_rBottom(QRectH* handle)
{
	return QRect_rBottom(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRect_x(QRectH* handle)
{
	return QRect_x(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRect_y(QRectH* handle)
{
	return QRect_y(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setLeft(QRectH* handle, int pos)
{
	QRect_setLeft(handle, pos);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setTop(QRectH* handle, int pos)
{
	QRect_setTop(handle, pos);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setRight(QRectH* handle, int pos)
{
	QRect_setRight(handle, pos);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setBottom(QRectH* handle, int pos)
{
	QRect_setBottom(handle, pos);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setX(QRectH* handle, int x)
{
	QRect_setX(handle, x);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setY(QRectH* handle, int y)
{
	QRect_setY(handle, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_topLeft(QRectH* handle, Types::PPoint retval)
{
	QRect_topLeft(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_bottomRight(QRectH* handle, Types::PPoint retval)
{
	QRect_bottomRight(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_topRight(QRectH* handle, Types::PPoint retval)
{
	QRect_topRight(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_bottomLeft(QRectH* handle, Types::PPoint retval)
{
	QRect_bottomLeft(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_center(QRectH* handle, Types::PPoint retval)
{
	QRect_center(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_rect(QRectH* handle, PInteger x, PInteger y, PInteger w, PInteger h)
{
	QRect_rect(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_coords(QRectH* handle, PInteger x1, PInteger y1, PInteger x2, PInteger y2)
{
	QRect_coords(handle, x1, y1, x2, y2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_moveTopLeft(QRectH* handle, Types::PPoint p)
{
	QRect_moveTopLeft(handle, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_moveBottomRight(QRectH* handle, Types::PPoint p)
{
	QRect_moveBottomRight(handle, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_moveTopRight(QRectH* handle, Types::PPoint p)
{
	QRect_moveTopRight(handle, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_moveBottomLeft(QRectH* handle, Types::PPoint p)
{
	QRect_moveBottomLeft(handle, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_moveCenter(QRectH* handle, Types::PPoint p)
{
	QRect_moveCenter(handle, p);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_moveBy(QRectH* handle, int dx, int dy)
{
	QRect_moveBy(handle, dx, dy);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setRect(QRectH* handle, int x, int y, int w, int h)
{
	QRect_setRect(handle, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setCoords(QRectH* handle, int x1, int y1, int x2, int y2)
{
	QRect_setCoords(handle, x1, y1, x2, y2);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_size(QRectH* handle, Types::PSize retval)
{
	QRect_size(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRect_width(QRectH* handle)
{
	return QRect_width(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QRect_height(QRectH* handle)
{
	return QRect_height(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setWidth(QRectH* handle, int w)
{
	QRect_setWidth(handle, w);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setHeight(QRectH* handle, int h)
{
	QRect_setHeight(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_setSize(QRectH* handle, Types::PSize s)
{
	QRect_setSize(handle, s);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRect_contains(QRectH* handle, Types::PPoint p, bool proper)/* overload */
{
	return QRect_contains(handle, p, proper);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRect_contains(QRectH* handle, int x, int y, bool proper)/* overload */
{
	return QRect_contains(handle, x, y, proper);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRect_contains(QRectH* handle, Types::PRect r, bool proper)/* overload */
{
	return QRect_contains(handle, r, proper);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_unite(QRectH* handle, Types::PRect retval, Types::PRect r)
{
	QRect_unite(handle, retval, r);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRect_intersect(QRectH* handle, Types::PRect retval, Types::PRect r)
{
	QRect_intersect(handle, retval, r);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QRect_intersects(QRectH* handle, Types::PRect r)
{
	return QRect_intersects(handle, r);
}
#pragma option pop


#pragma option push -w-inl
inline QSizeH* __cdecl QSize_create(void)/* overload */
{
	return QSize_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSize_destroy(QSizeH* handle)
{
	QSize_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QSizeH* __cdecl QSize_create(int w, int h)/* overload */
{
	return QSize_create(w, h);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QSize_isNull(QSizeH* handle)
{
	return QSize_isNull(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QSize_isEmpty(QSizeH* handle)
{
	return QSize_isEmpty(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QSize_isValid(QSizeH* handle)
{
	return QSize_isValid(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSize_width(QSizeH* handle)
{
	return QSize_width(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QSize_height(QSizeH* handle)
{
	return QSize_height(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSize_setWidth(QSizeH* handle, int w)
{
	QSize_setWidth(handle, w);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSize_setHeight(QSizeH* handle, int h)
{
	QSize_setHeight(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSize_transpose(QSizeH* handle)
{
	QSize_transpose(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSize_expandedTo(QSizeH* handle, Types::PSize retval, Types::PSize p1)
{
	QSize_expandedTo(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSize_boundedTo(QSizeH* handle, Types::PSize retval, Types::PSize p1)
{
	QSize_boundedTo(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QCOORD __cdecl QSize_rwidth(QSizeH* handle)
{
	return QSize_rwidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCOORD __cdecl QSize_rheight(QSizeH* handle)
{
	return QSize_rheight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QStringListH* __cdecl QStringList_create(void)/* overload */
{
	return QStringList_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStringList_destroy(QStringListH* handle)
{
	QStringList_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QStringListH* __cdecl QStringList_create(QStringListH* l)/* overload */
{
	return QStringList_create(l);
}
#pragma option pop


#pragma option push -w-inl
inline QStringListH* __cdecl QStringList_create(System::PWideString i)/* overload */
{
	return QStringList_create(i);
}
#pragma option pop


#pragma option push -w-inl
inline QStringListH* __cdecl QStringList_create(char * i)/* overload */
{
	return QStringList_create(i);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStringList_fromStrList(QStringListH* retval, QStrListH* p1)
{
	QStringList_fromStrList(retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStringList_sort(QStringListH* handle)
{
	QStringList_sort(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStringList_split(QStringListH* retval, System::PWideString sep, System::PWideString str, bool allowEmptyEntries)/* overload */
{
	QStringList_split(retval, sep, str, allowEmptyEntries);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStringList_split(QStringListH* retval, wchar_t * sep, System::PWideString str, bool allowEmptyEntries)/* overload */
{
	QStringList_split(retval, sep, str, allowEmptyEntries);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStringList_split(QStringListH* retval, QRegExpH* sep, System::PWideString str, bool allowEmptyEntries)/* overload */
{
	QStringList_split(retval, sep, str, allowEmptyEntries);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStringList_join(QStringListH* handle, System::PWideString retval, System::PWideString sep)
{
	QStringList_join(handle, retval, sep);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStringList_grep(QStringListH* handle, QStringListH* retval, System::PWideString str, bool cs)/* overload */
{
	QStringList_grep(handle, retval, str, cs);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStringList_grep(QStringListH* handle, QStringListH* retval, QRegExpH* expr)/* overload */
{
	QStringList_grep(handle, retval, expr);
}
#pragma option pop


#pragma option push -w-inl
inline QWMatrixH* __cdecl QWMatrix_create(void)/* overload */
{
	return QWMatrix_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWMatrix_destroy(QWMatrixH* handle)
{
	QWMatrix_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWMatrixH* __cdecl QWMatrix_create(double m11, double m12, double m21, double m22, double dx, double dy)/* overload */
{
	return QWMatrix_create(m11, m12, m21, m22, dx, dy);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWMatrix_setMatrix(QWMatrixH* handle, double m11, double m12, double m21, double m22, double dx, double dy)
{
	QWMatrix_setMatrix(handle, m11, m12, m21, m22, dx, dy);
}
#pragma option pop


#pragma option push -w-inl
inline double __cdecl QWMatrix_m11(QWMatrixH* handle)
{
	return QWMatrix_m11(handle);
}
#pragma option pop


#pragma option push -w-inl
inline double __cdecl QWMatrix_m12(QWMatrixH* handle)
{
	return QWMatrix_m12(handle);
}
#pragma option pop


#pragma option push -w-inl
inline double __cdecl QWMatrix_m21(QWMatrixH* handle)
{
	return QWMatrix_m21(handle);
}
#pragma option pop


#pragma option push -w-inl
inline double __cdecl QWMatrix_m22(QWMatrixH* handle)
{
	return QWMatrix_m22(handle);
}
#pragma option pop


#pragma option push -w-inl
inline double __cdecl QWMatrix_dx(QWMatrixH* handle)
{
	return QWMatrix_dx(handle);
}
#pragma option pop


#pragma option push -w-inl
inline double __cdecl QWMatrix_dy(QWMatrixH* handle)
{
	return QWMatrix_dy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWMatrix_map(QWMatrixH* handle, int x, int y, PInteger tx, PInteger ty)/* overload */
{
	QWMatrix_map(handle, x, y, tx, ty);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWMatrix_map(QWMatrixH* handle, double x, double y, System::PDouble tx, System::PDouble ty)/* overload */
{
	QWMatrix_map(handle, x, y, tx, ty);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWMatrix_map(QWMatrixH* handle, Types::PPoint retval, Types::PPoint p1)/* overload */
{
	QWMatrix_map(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWMatrix_map(QWMatrixH* handle, Types::PRect retval, Types::PRect p1)/* overload */
{
	QWMatrix_map(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWMatrix_map(QWMatrixH* handle, PPointArray retval, PPointArray p1)/* overload */
{
	QWMatrix_map(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWMatrix_reset(QWMatrixH* handle)
{
	QWMatrix_reset(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWMatrixH* __cdecl QWMatrix_translate(QWMatrixH* handle, double dx, double dy)
{
	return QWMatrix_translate(handle, dx, dy);
}
#pragma option pop


#pragma option push -w-inl
inline QWMatrixH* __cdecl QWMatrix_scale(QWMatrixH* handle, double sx, double sy)
{
	return QWMatrix_scale(handle, sx, sy);
}
#pragma option pop


#pragma option push -w-inl
inline QWMatrixH* __cdecl QWMatrix_shear(QWMatrixH* handle, double sh, double sv)
{
	return QWMatrix_shear(handle, sh, sv);
}
#pragma option pop


#pragma option push -w-inl
inline QWMatrixH* __cdecl QWMatrix_rotate(QWMatrixH* handle, double a)
{
	return QWMatrix_rotate(handle, a);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWMatrix_invert(QWMatrixH* handle, QWMatrixH* retval, System::PBoolean p1)
{
	QWMatrix_invert(handle, retval, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxObjectMap_setAddCallback(void * ptr)
{
	QClxObjectMap_setAddCallback(ptr);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxObjectMap_setRemoveCallback(void * ptr)
{
	QClxObjectMap_setRemoveCallback(ptr);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxObjectMap_add(void * obj, int value)
{
	QClxObjectMap_add(obj, value);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxObjectMap_remove(void * obj)
{
	QClxObjectMap_remove(obj);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QClxObjectMap_find(void * obj)
{
	return QClxObjectMap_find(obj);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QClxObjectMap_findClxObject(void * obj)
{
	return QClxObjectMap_findClxObject(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QClxIODeviceH* __cdecl QClxIODevice_create(void * stream)
{
	return QClxIODevice_create(stream);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxIODevice_destroy(QClxIODeviceH* handle)
{
	QClxIODevice_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxLineEditH* __cdecl QClxLineEdit_create(QWidgetH* parent, char * name)
{
	return QClxLineEdit_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxLineEdit_destroy(QClxLineEditH* handle)
{
	QClxLineEdit_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClxLineEdit_autoSelect(QClxLineEditH* handle)
{
	return QClxLineEdit_autoSelect(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxLineEdit_setAutoSelect(QClxLineEditH* handle, bool value)
{
	QClxLineEdit_setAutoSelect(handle, value);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClxLineEdit_hideSelection(QClxLineEditH* handle)
{
	return QClxLineEdit_hideSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxLineEdit_setHideSelection(QClxLineEditH* handle, bool value)
{
	QClxLineEdit_setHideSelection(handle, value);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxLineEdit_clearSelection(QClxLineEditH* handle)
{
	QClxLineEdit_clearSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxLineEdit_resetSelection(QClxLineEditH* handle)
{
	QClxLineEdit_resetSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QClxLineEdit_selStart(QClxLineEditH* handle)
{
	return QClxLineEdit_selStart(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxLineEdit_setSelStart(QClxLineEditH* handle, int pos)
{
	QClxLineEdit_setSelStart(handle, pos);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxLineEdit_updateSelection(QClxLineEditH* handle)
{
	QClxLineEdit_updateSelection(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxLineEdit_setSelection(QClxLineEditH* handle, int start, int len)
{
	QClxLineEdit_setSelection(handle, start, len);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QClxLineEdit_selLen(QClxLineEditH* handle)
{
	return QClxLineEdit_selLen(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxLineEdit_setMarkedText(QClxLineEditH* handle, System::PWideString s)
{
	QClxLineEdit_setMarkedText(handle, s);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClxLineEdit_hasMarkedText(QClxLineEditH* handle)
{
	return QClxLineEdit_hasMarkedText(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxLineEdit_markedText(QClxLineEditH* handle, System::PWideString retval)
{
	QClxLineEdit_markedText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QOpenWidget_event(QOpenWidgetH* handle, QEventH* e)
{
	return QOpenWidget_event(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_mousePressEvent(QOpenWidgetH* handle, QMouseEventH* e)
{
	QOpenWidget_mousePressEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_mouseReleaseEvent(QOpenWidgetH* handle, QMouseEventH* e)
{
	QOpenWidget_mouseReleaseEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_mouseDoubleClickEvent(QOpenWidgetH* handle, QMouseEventH* e)
{
	QOpenWidget_mouseDoubleClickEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_mouseMoveEvent(QOpenWidgetH* handle, QMouseEventH* e)
{
	QOpenWidget_mouseMoveEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_wheelEvent(QOpenWidgetH* handle, QWheelEventH* e)
{
	QOpenWidget_wheelEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_keyPressEvent(QOpenWidgetH* handle, QKeyEventH* e)
{
	QOpenWidget_keyPressEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_keyReleaseEvent(QOpenWidgetH* handle, QKeyEventH* e)
{
	QOpenWidget_keyReleaseEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_focusInEvent(QOpenWidgetH* handle, QFocusEventH* e)
{
	QOpenWidget_focusInEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_focusOutEvent(QOpenWidgetH* handle, QFocusEventH* e)
{
	QOpenWidget_focusOutEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_enterEvent(QOpenWidgetH* handle, QEventH* e)
{
	QOpenWidget_enterEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_leaveEvent(QOpenWidgetH* handle, QEventH* e)
{
	QOpenWidget_leaveEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_paintEvent(QOpenWidgetH* handle, QPaintEventH* e)
{
	QOpenWidget_paintEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_moveEvent(QOpenWidgetH* handle, QMoveEventH* e)
{
	QOpenWidget_moveEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_resizeEvent(QOpenWidgetH* handle, QResizeEventH* e)
{
	QOpenWidget_resizeEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_closeEvent(QOpenWidgetH* handle, QCloseEventH* e)
{
	QOpenWidget_closeEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_dragEnterEvent(QOpenWidgetH* handle, QDragEnterEventH* e)
{
	QOpenWidget_dragEnterEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_dragMoveEvent(QOpenWidgetH* handle, QDragMoveEventH* e)
{
	QOpenWidget_dragMoveEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_dragLeaveEvent(QOpenWidgetH* handle, QDragLeaveEventH* e)
{
	QOpenWidget_dragLeaveEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_dropEvent(QOpenWidgetH* handle, QDropEventH* e)
{
	QOpenWidget_dropEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_showEvent(QOpenWidgetH* handle, QShowEventH* e)
{
	QOpenWidget_showEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_hideEvent(QOpenWidgetH* handle, QHideEventH* e)
{
	QOpenWidget_hideEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_customEvent(QOpenWidgetH* handle, QCustomEventH* e)
{
	QOpenWidget_customEvent(handle, e);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QOpenWidget_getWState(QOpenWidgetH* handle)
{
	return QOpenWidget_getWState(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_setWState(QOpenWidgetH* handle, unsigned n)
{
	QOpenWidget_setWState(handle, n);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_clearWState(QOpenWidgetH* handle, unsigned n)
{
	QOpenWidget_clearWState(handle, n);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenWidget_getWFlags(QOpenWidgetH* handle)
{
	return QOpenWidget_getWFlags(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_setWFlags(QOpenWidgetH* handle, int n)
{
	QOpenWidget_setWFlags(handle, n);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_clearWFlags(QOpenWidgetH* handle, int n)
{
	QOpenWidget_clearWFlags(handle, n);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QOpenWidget_focusNextPrevChild(QOpenWidgetH* handle, bool next)
{
	return QOpenWidget_focusNextPrevChild(handle, next);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenWidget_updateMask(QOpenWidgetH* handle)
{
	QOpenWidget_updateMask(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenStringList_count(QOpenStringListH* handle)
{
	return QOpenStringList_count(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenStringList_value(QOpenStringListH* handle, System::PWideString retval, int index)
{
	QOpenStringList_value(handle, retval, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenStringList_append(QOpenStringListH* handle, System::PWideString value)
{
	QOpenStringList_append(handle, value);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawItem(QPainterH* p, int x, int y, int w, int h, int flags, QColorGroupH* g, bool enabled, QPixmapH* pixmap, System::PWideString text, int len, QColorH* penColor)
{
	QClxDrawUtil_DrawItem(p, x, y, w, h, flags, g, enabled, pixmap, text, len, penColor);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawShadeLine(QPainterH* p, int x1, int y1, int x2, int y2, QColorGroupH* g, bool sunken, int lineWidth, int midLineWidth)/* overload */
{
	QClxDrawUtil_DrawShadeLine(p, x1, y1, x2, y2, g, sunken, lineWidth, midLineWidth);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawShadeLine(QPainterH* p, Types::PPoint p1, Types::PPoint p2, QColorGroupH* g, bool sunken, int lineWidth, int midLineWidth)/* overload */
{
	QClxDrawUtil_DrawShadeLine(p, p1, p2, g, sunken, lineWidth, midLineWidth);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawShadeRect(QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, int lineWidth, int midLineWidth, QBrushH* fill)/* overload */
{
	QClxDrawUtil_DrawShadeRect(p, x, y, w, h, g, sunken, lineWidth, midLineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawShadeRect(QPainterH* p, Types::PRect r, QColorGroupH* g, bool sunken, int lineWidth, int midLineWidth, QBrushH* fill)/* overload */
{
	QClxDrawUtil_DrawShadeRect(p, r, g, sunken, lineWidth, midLineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawShadePanel(QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, int lineWidth, QBrushH* fill)/* overload */
{
	QClxDrawUtil_DrawShadePanel(p, x, y, w, h, g, sunken, lineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawShadePanel(QPainterH* p, Types::PRect r, QColorGroupH* g, bool sunken, int lineWidth, QBrushH* fill)/* overload */
{
	QClxDrawUtil_DrawShadePanel(p, r, g, sunken, lineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawWinButton(QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill)/* overload */
{
	QClxDrawUtil_DrawWinButton(p, x, y, w, h, g, sunken, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawWinButton(QPainterH* p, Types::PRect r, QColorGroupH* g, bool sunken, QBrushH* fill)/* overload */
{
	QClxDrawUtil_DrawWinButton(p, r, g, sunken, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawWinPanel(QPainterH* p, int x, int y, int w, int h, QColorGroupH* g, bool sunken, QBrushH* fill)/* overload */
{
	QClxDrawUtil_DrawWinPanel(p, x, y, w, h, g, sunken, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawWinPanel(QPainterH* p, Types::PRect r, QColorGroupH* g, bool sunken, QBrushH* fill)/* overload */
{
	QClxDrawUtil_DrawWinPanel(p, r, g, sunken, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawPlainRect(QPainterH* p, int x, int y, int w, int h, QColorH* c, int lineWidth, QBrushH* fill)/* overload */
{
	QClxDrawUtil_DrawPlainRect(p, x, y, w, h, c, lineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDrawUtil_DrawPlainRect(QPainterH* p, Types::PRect r, QColorH* c, int lineWidth, QBrushH* fill)/* overload */
{
	QClxDrawUtil_DrawPlainRect(p, r, c, lineWidth, fill);
}
#pragma option pop


#pragma option push -w-inl
inline QClxListBoxHooksH* __cdecl QClxListBoxHooks_create(void)
{
	return QClxListBoxHooks_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListBoxHooks_destroy(QClxListBoxHooksH* handle)
{
	QClxListBoxHooks_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListBoxHooks_hook_paint(QClxListBoxHooksH* handle, const System::TMethod paintHook)
{
	QClxListBoxHooks_hook_paint(handle, paintHook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListBoxHooks_hook_measure(QClxListBoxHooksH* handle, const System::TMethod measureHook)
{
	QClxListBoxHooks_hook_measure(handle, measureHook);
}
#pragma option pop


#pragma option push -w-inl
inline QClxListBoxItemH* __cdecl QClxListBoxItem_create(System::PWideString text, QClxListBoxHooksH* listBox_hooks, void * d)
{
	return QClxListBoxItem_create(text, listBox_hooks, d);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListBoxItem_destroy(QClxListBoxItemH* handle)
{
	QClxListBoxItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QClxListBoxItem_width(QClxListBoxItemH* handle, QListBoxH* lb)
{
	return QClxListBoxItem_width(handle, lb);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QClxListBoxItem_height(QClxListBoxItemH* handle, QListBoxH* lb)
{
	return QClxListBoxItem_height(handle, lb);
}
#pragma option pop


#pragma option push -w-inl
inline void * __cdecl QClxListBoxItem_getData(QClxListBoxItemH* handle)
{
	return QClxListBoxItem_getData(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListBoxItem_setData(QClxListBoxItemH* handle, void * d)
{
	QClxListBoxItem_setData(handle, d);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListBoxItem_setCustomHighlighting(QClxListBoxItemH* handle, bool value)
{
	QClxListBoxItem_setCustomHighlighting(handle, value);
}
#pragma option pop


#pragma option push -w-inl
inline QClxListViewHooksH* __cdecl QClxListViewHooks_create(void)
{
	return QClxListViewHooks_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewHooks_destroy(QClxListViewHooksH* handle)
{
	QClxListViewHooks_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewHooks_hook_PaintCell(QClxListViewHooksH* handle, const System::TMethod h)
{
	QClxListViewHooks_hook_PaintCell(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewHooks_hook_PaintBranches(QClxListViewHooksH* handle, const System::TMethod h)
{
	QClxListViewHooks_hook_PaintBranches(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewHooks_hook_setSelected(QClxListViewHooksH* handle, const System::TMethod h)
{
	QClxListViewHooks_hook_setSelected(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewHooks_hook_change(QClxListViewHooksH* handle, const System::TMethod h)
{
	QClxListViewHooks_hook_change(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewHooks_hook_changing(QClxListViewHooksH* handle, const System::TMethod h)
{
	QClxListViewHooks_hook_changing(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewHooks_hook_expanding(QClxListViewHooksH* handle, const System::TMethod h)
{
	QClxListViewHooks_hook_expanding(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewHooks_hook_expanded(QClxListViewHooksH* handle, const System::TMethod h)
{
	QClxListViewHooks_hook_expanded(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewHooks_hook_checked(QClxListViewHooksH* handle, const System::TMethod h)
{
	QClxListViewHooks_hook_checked(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewHooks_hook_destroyed(QClxListViewHooksH* handle, const System::TMethod h)
{
	QClxListViewHooks_hook_destroyed(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline QClxListViewItemH* __cdecl QClxListViewItem_create(QListViewH* parent, QListViewItemH* after, QClxListViewHooksH* h)/* overload */
{
	return QClxListViewItem_create(parent, after, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxListViewItem_destroy(QClxListViewItemH* handle)
{
	QClxListViewItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxListViewItemH* __cdecl QClxListViewItem_create(QListViewItemH* parent, QListViewItemH* after, QClxListViewHooksH* h)/* overload */
{
	return QClxListViewItem_create(parent, after, h);
}
#pragma option pop


#pragma option push -w-inl
inline QClxCheckListItemH* __cdecl QClxCheckListItem_create(QListViewH* parent, System::PWideString text, QCheckListItemType t, QClxListViewHooksH* h)/* overload */
{
	return QClxCheckListItem_create(parent, text, t, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxCheckListItem_destroy(QClxCheckListItemH* handle)
{
	QClxCheckListItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxCheckListItemH* __cdecl QClxCheckListItem_create(QListViewItemH* parent, System::PWideString text, QCheckListItemType t, QClxListViewHooksH* h)/* overload */
{
	return QClxCheckListItem_create(parent, text, t, h);
}
#pragma option pop


#pragma option push -w-inl
inline QClxIconViewHooksH* __cdecl QClxIconViewHooks_create(void)
{
	return QClxIconViewHooks_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxIconViewHooks_destroy(QClxIconViewHooksH* handle)
{
	QClxIconViewHooks_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxIconViewHooks_hook_PaintItem(QClxIconViewHooksH* handle, const System::TMethod h)
{
	QClxIconViewHooks_hook_PaintItem(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxIconViewHooks_hook_PaintFocus(QClxIconViewHooksH* handle, const System::TMethod h)
{
	QClxIconViewHooks_hook_PaintFocus(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxIconViewHooks_hook_setSelected(QClxIconViewHooksH* handle, const System::TMethod h)
{
	QClxIconViewHooks_hook_setSelected(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxIconViewHooks_hook_change(QClxIconViewHooksH* handle, const System::TMethod h)
{
	QClxIconViewHooks_hook_change(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxIconViewHooks_hook_changing(QClxIconViewHooksH* handle, const System::TMethod h)
{
	QClxIconViewHooks_hook_changing(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxIconViewHooks_hook_destroyed(QClxIconViewHooksH* handle, const System::TMethod h)
{
	QClxIconViewHooks_hook_destroyed(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline QClxIconViewItemH* __cdecl QClxIconViewItem_create(QIconViewH* parent, QClxIconViewHooksH* h)/* overload */
{
	return QClxIconViewItem_create(parent, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxIconViewItem_destroy(QClxIconViewItemH* handle)
{
	QClxIconViewItem_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxIconViewItemH* __cdecl QClxIconViewItem_create(QIconViewH* parent, QIconViewItemH* after, QClxIconViewHooksH* h)/* overload */
{
	return QClxIconViewItem_create(parent, after, h);
}
#pragma option pop


#pragma option push -w-inl
inline QClxDragObjectH* __cdecl QClxDragObject_create(QWidgetH* dragSource, char * name)
{
	return QClxDragObject_create(dragSource, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDragObject_destroy(QClxDragObjectH* handle)
{
	QClxDragObject_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QClxDragObject_format(QClxDragObjectH* handle, int n)
{
	return QClxDragObject_format(handle, n);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDragObject_encodedData(QClxDragObjectH* handle, QByteArrayH* retval, char * format)
{
	QClxDragObject_encodedData(handle, retval, format);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClxDragObject_provides(QClxDragObjectH* handle, char * mimeType)
{
	return QClxDragObject_provides(handle, mimeType);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDragObject_addFormat(QClxDragObjectH* handle, char * format, QByteArrayH* ByteArray)
{
	QClxDragObject_addFormat(handle, format, ByteArray);
}
#pragma option pop


#pragma option push -w-inl
inline QOpenComboBoxH* __cdecl QOpenComboBox_create(QWidgetH* parent, char * name)/* overload */
{
	return QOpenComboBox_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenComboBox_destroy(QOpenComboBoxH* handle)
{
	QOpenComboBox_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QOpenComboBoxH* __cdecl QOpenComboBox_create(bool rw, QWidgetH* parent, char * name)/* overload */
{
	return QOpenComboBox_create(rw, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenComboBox_popup(QOpenComboBoxH* handle)
{
	QOpenComboBox_popup(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxBitBtnH* __cdecl QClxBitBtn_create(QWidgetH* parent, char * name, const System::TMethod paintCB)
{
	return QClxBitBtn_create(parent, name, paintCB);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxBitBtn_destroy(QClxBitBtnH* handle)
{
	QClxBitBtn_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxMimeSourceH* __cdecl QClxMimeSource_create(void)/* overload */
{
	return QClxMimeSource_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxMimeSource_destroy(QClxMimeSourceH* handle)
{
	QClxMimeSource_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxMimeSourceH* __cdecl QClxMimeSource_create(QMimeSourceH* source)/* overload */
{
	return QClxMimeSource_create(source);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QClxMimeSource_format(QClxMimeSourceH* handle, int n)
{
	return QClxMimeSource_format(handle, n);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxMimeSource_encodedData(QClxMimeSourceH* handle, QByteArrayH* retval, char * format)
{
	QClxMimeSource_encodedData(handle, retval, format);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClxMimeSource_provides(QClxMimeSourceH* handle, char * mimeType)
{
	return QClxMimeSource_provides(handle, mimeType);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxMimeSource_addFormat(QClxMimeSourceH* handle, char * format, QByteArrayH* ByteArray)
{
	QClxMimeSource_addFormat(handle, format, ByteArray);
}
#pragma option pop


#pragma option push -w-inl
inline QClxMimeSourceFactoryH* __cdecl QClxMimeSourceFactory_create(void)
{
	return QClxMimeSourceFactory_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxMimeSourceFactory_destroy(QClxMimeSourceFactoryH* handle)
{
	QClxMimeSourceFactory_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxMimeSourceFactory_setDataCallBack(QClxMimeSourceFactoryH* handle, const System::TMethod hook)
{
	QClxMimeSourceFactory_setDataCallBack(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QMimeSourceH* __cdecl QClxMimeSourceFactory_data(QClxMimeSourceFactoryH* handle, System::PWideString abs_name)
{
	return QClxMimeSourceFactory_data(handle, abs_name);
}
#pragma option pop


#pragma option push -w-inl
inline QClxSliderH* __cdecl QClxSlider_create(QWidgetH* parent, char * name, const System::TMethod drawTickCB)
{
	return QClxSlider_create(parent, name, drawTickCB);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxSlider_destroy(QClxSliderH* handle)
{
	QClxSlider_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxSlider_drawTicks(QClxSliderH* handle, QPainterH* p, QColorGroupH* cg, int dist, int w, int i)
{
	QClxSlider_drawTicks(handle, p, cg, dist, w, i);
}
#pragma option pop


#pragma option push -w-inl
inline QClxStyleHooksH* __cdecl QClxStyleHooks_create(void)
{
	return QClxStyleHooks_create();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_destroy(QClxStyleHooksH* handle)
{
	QClxStyleHooks_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_polish(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_polish(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_unPolish(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_unPolish(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_polish2(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_polish2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_unPolish2(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_unPolish2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_polish3(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_polish3(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_itemRect(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_itemRect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawItem(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawItem(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawSeparator(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawSeparator(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawRect(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawRect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawRectStrong(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawRectStrong(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawButton(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawButton(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_buttonRect(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_buttonRect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawButtonMask(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawButtonMask(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawBevelButton(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawBevelButton(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_bevelButtonRect(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_bevelButtonRect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawToolButton(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawToolButton(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawToolButton2(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawToolButton2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_toolButtonRect(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_toolButtonRect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawPanel(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawPanel(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawPopupPanel(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawPopupPanel(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawArrow(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawArrow(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawExclusiveIndicator(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawExclusiveIndicator(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawExclusiveIndicatorMask(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawExclusiveIndicatorMask(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawIndicatorMask(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawIndicatorMask(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawIndicator(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawIndicator(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawFocusRect(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawFocusRect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawComboButton(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawComboButton(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_comboButtonRect(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_comboButtonRect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_comboButtonFocusRect(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_comboButtonFocusRect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawComboButtonMask(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawComboButtonMask(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawPushButton(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawPushButton(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawPushButtonLabel(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawPushButtonLabel(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_pushButtonContentsRect(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_pushButtonContentsRect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_tabbarMetrics(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_tabbarMetrics(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawTab(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawTab(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawTabMask(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawTabMask(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_scrollBarMetrics(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_scrollBarMetrics(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawScrollBarControls(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawScrollBarControls(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawSlider(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawSlider(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawSliderMask(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawSliderMask(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawSliderGroove(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawSliderGroove(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawSliderGrooveMask(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawSliderGrooveMask(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawSplitter(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawSplitter(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawCheckMark(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawCheckMark(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_polishPopupMenu(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_polishPopupMenu(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_extraPopupMenuItemWidth(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_extraPopupMenuItemWidth(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_popupSubmenuIndicatorWidth(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_popupSubmenuIndicatorWidth(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_popupMenuItemHeight(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_popupMenuItemHeight(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_drawPopupMenuItem(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_drawPopupMenuItem(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyleHooks_hook_StyleDestroyed(QClxStyleHooksH* handle, const System::TMethod hook)
{
	QClxStyleHooks_hook_StyleDestroyed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_init(QClxStyleH* handle)
{
	QClxStyle_init(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxStyleH* __cdecl QClxStyle_create(QStyleH* aStyle, QClxStyleHooksH* h)/* overload */
{
	return QClxStyle_create(aStyle, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_destroy(QClxStyleH* handle)
{
	QClxStyle_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxStyleH* __cdecl QClxStyle_create(System::PWideString styleName, QClxStyleHooksH* h)/* overload */
{
	return QClxStyle_create(styleName, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_refresh(QClxStyleH* handle)
{
	QClxStyle_refresh(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QClxStyle_defaultFrameWidth(QClxStyleH* handle)
{
	return QClxStyle_defaultFrameWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_setDefaultFrameWidth(QClxStyleH* handle, int Val)
{
	QClxStyle_setDefaultFrameWidth(handle, Val);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QClxStyle_sliderLength(QClxStyleH* handle)
{
	return QClxStyle_sliderLength(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_setSliderLength(QClxStyleH* handle, int Val)
{
	QClxStyle_setSliderLength(handle, Val);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QClxStyle_maximumSliderDragDistance(QClxStyleH* handle)
{
	return QClxStyle_maximumSliderDragDistance(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_setMaximumSliderDragDistance(QClxStyleH* handle, int Val)
{
	QClxStyle_setMaximumSliderDragDistance(handle, Val);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QClxStyle_splitterWidth(QClxStyleH* handle)
{
	return QClxStyle_splitterWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_setSplitterWidth(QClxStyleH* handle, int Val)
{
	QClxStyle_setSplitterWidth(handle, Val);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_scrollBarExtent(QClxStyleH* handle, Types::PSize retval)
{
	QClxStyle_scrollBarExtent(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_setScrollBarExtent(QClxStyleH* handle, Types::PSize Val)
{
	QClxStyle_setScrollBarExtent(handle, Val);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_indicatorSize(QClxStyleH* handle, Types::PSize retval)
{
	QClxStyle_indicatorSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_setIndicatorSize(QClxStyleH* handle, Types::PSize Val)
{
	QClxStyle_setIndicatorSize(handle, Val);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_exclusiveIndicatorSize(QClxStyleH* handle, Types::PSize retval)
{
	QClxStyle_exclusiveIndicatorSize(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_setExclusiveIndicatorSize(QClxStyleH* handle, Types::PSize Val)
{
	QClxStyle_setExclusiveIndicatorSize(handle, Val);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_buttonShift(QClxStyleH* handle, PInteger x, PInteger y)
{
	QClxStyle_buttonShift(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_setButtonShift(QClxStyleH* handle, int x, int y)
{
	QClxStyle_setButtonShift(handle, x, y);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_scrollBarMetrics(QClxStyleH* handle, QScrollBarH* p1, PInteger p2, PInteger p3, PInteger p4, PInteger p5)
{
	QClxStyle_scrollBarMetrics(handle, p1, p2, p3, p4, p5);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxStyle_tabbarMetrics(QClxStyleH* handle, QTabBarH* p1, PInteger p2, PInteger p3, PInteger p4)
{
	QClxStyle_tabbarMetrics(handle, p1, p2, p3, p4);
}
#pragma option pop


#pragma option push -w-inl
inline QClxSpinBoxH* __cdecl QClxSpinBox_create(QWidgetH* parent, char * name)/* overload */
{
	return QClxSpinBox_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxSpinBox_destroy(QClxSpinBoxH* handle)
{
	QClxSpinBox_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxSpinBoxH* __cdecl QClxSpinBox_create(int minValue, int maxValue, int step, QWidgetH* parent, char * name)/* overload */
{
	return QClxSpinBox_create(minValue, maxValue, step, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline QPushButtonH* __cdecl QClxSpinBox_upButton(QClxSpinBoxH* handle)
{
	return QClxSpinBox_upButton(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPushButtonH* __cdecl QClxSpinBox_downButton(QClxSpinBoxH* handle)
{
	return QClxSpinBox_downButton(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QLineEditH* __cdecl QClxSpinBox_editor(QClxSpinBoxH* handle)
{
	return QClxSpinBox_editor(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QOpenScrollViewH* __cdecl QOpenScrollView_create(const System::TMethod scrollBarGeometry_hook, QWidgetH* parent, char * name, int f)
{
	return QOpenScrollView_create(scrollBarGeometry_hook, parent, name, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenScrollView_destroy(QOpenScrollViewH* handle)
{
	QOpenScrollView_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenScrollView_resizeContents(QOpenScrollViewH* handle, int w, int h)
{
	QOpenScrollView_resizeContents(handle, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenScrollView_setVBarGeometry(QOpenScrollViewH* handle, QScrollBarH* vbar, int x, int y, int w, int h)
{
	QOpenScrollView_setVBarGeometry(handle, vbar, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenScrollView_setHBarGeometry(QOpenScrollViewH* handle, QScrollBarH* hbar, int x, int y, int w, int h)
{
	QOpenScrollView_setHBarGeometry(handle, hbar, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenScrollView_getScrollBarGeometry(QOpenScrollViewH* handle, QScrollBarH* sb, PInteger x, PInteger y, PInteger w, PInteger h)
{
	QOpenScrollView_getScrollBarGeometry(handle, sb, x, y, w, h);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenScrollView_setMargins(QOpenScrollViewH* handle, int left, int top, int right, int bottom)
{
	QOpenScrollView_setMargins(handle, left, top, right, bottom);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenScrollView_leftMargin(QOpenScrollViewH* handle)
{
	return QOpenScrollView_leftMargin(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenScrollView_topMargin(QOpenScrollViewH* handle)
{
	return QOpenScrollView_topMargin(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenScrollView_rightMargin(QOpenScrollViewH* handle)
{
	return QOpenScrollView_rightMargin(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenScrollView_bottomMargin(QOpenScrollViewH* handle)
{
	return QOpenScrollView_bottomMargin(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxDesign_setDesignOptions(void)
{
	QClxDesign_setDesignOptions();
}
#pragma option pop


#pragma option push -w-inl
inline QOpenMultiLineEditH* __cdecl QOpenMultiLineEdit_create(QWidgetH* parent, char * name)
{
	return QOpenMultiLineEdit_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_destroy(QOpenMultiLineEditH* handle)
{
	QOpenMultiLineEdit_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QOpenMultiLineEdit_hasMarkedText(QOpenMultiLineEditH* handle)
{
	return QOpenMultiLineEdit_hasMarkedText(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_markedText(QOpenMultiLineEditH* handle, System::PWideString retval)
{
	QOpenMultiLineEdit_markedText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenMultiLineEdit_textWidth(QOpenMultiLineEditH* handle, int i)/* overload */
{
	return QOpenMultiLineEdit_textWidth(handle, i);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenMultiLineEdit_textWidth(QOpenMultiLineEditH* handle, System::PWideString text)/* overload */
{
	return QOpenMultiLineEdit_textWidth(handle, text);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_cursorPoint(QOpenMultiLineEditH* handle, Types::PPoint retval)
{
	QOpenMultiLineEdit_cursorPoint(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_insert(QOpenMultiLineEditH* handle, System::PWideString text, bool mark)
{
	QOpenMultiLineEdit_insert(handle, text, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_newLine(QOpenMultiLineEditH* handle)
{
	QOpenMultiLineEdit_newLine(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_killLine(QOpenMultiLineEditH* handle)
{
	QOpenMultiLineEdit_killLine(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_pageUp(QOpenMultiLineEditH* handle, bool mark)
{
	QOpenMultiLineEdit_pageUp(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_pageDown(QOpenMultiLineEditH* handle, bool mark)
{
	QOpenMultiLineEdit_pageDown(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_cursorLeft(QOpenMultiLineEditH* handle, bool mark, bool wrap)
{
	QOpenMultiLineEdit_cursorLeft(handle, mark, wrap);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_cursorRight(QOpenMultiLineEditH* handle, bool mark, bool wrap)
{
	QOpenMultiLineEdit_cursorRight(handle, mark, wrap);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_cursorUp(QOpenMultiLineEditH* handle, bool mark)
{
	QOpenMultiLineEdit_cursorUp(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_cursorDown(QOpenMultiLineEditH* handle, bool mark)
{
	QOpenMultiLineEdit_cursorDown(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_backspace(QOpenMultiLineEditH* handle)
{
	QOpenMultiLineEdit_backspace(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_del(QOpenMultiLineEditH* handle)
{
	QOpenMultiLineEdit_del(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_home(QOpenMultiLineEditH* handle, bool mark)
{
	QOpenMultiLineEdit_home(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_end(QOpenMultiLineEditH* handle, bool mark)
{
	QOpenMultiLineEdit_end(handle, mark);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QOpenMultiLineEdit_getMarkedRegion(QOpenMultiLineEditH* handle, PInteger line1, PInteger col1, PInteger line2, PInteger col2)
{
	return QOpenMultiLineEdit_getMarkedRegion(handle, line1, col1, line2, col2);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenMultiLineEdit_lineLength(QOpenMultiLineEditH* handle, int row)
{
	return QOpenMultiLineEdit_lineLength(handle, row);
}
#pragma option pop


#pragma option push -w-inl
inline char * __cdecl QOpenMultiLineEdit_getString(QOpenMultiLineEditH* handle, int row)
{
	return QOpenMultiLineEdit_getString(handle, row);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_stringShown(QOpenMultiLineEditH* handle, System::PWideString retval, int row)
{
	QOpenMultiLineEdit_stringShown(handle, retval, row);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenMultiLineEdit_textLength(QOpenMultiLineEditH* handle)
{
	return QOpenMultiLineEdit_textLength(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QOpenMultiLineEdit_isEndOfParagraph(QOpenMultiLineEditH* handle, int row)
{
	return QOpenMultiLineEdit_isEndOfParagraph(handle, row);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_getText(QOpenMultiLineEditH* handle, System::PWideString retval)
{
	QOpenMultiLineEdit_getText(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QOpenMultiLineEdit_tableFlags(QOpenMultiLineEditH* handle)
{
	return QOpenMultiLineEdit_tableFlags(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QOpenMultiLineEdit_testTableFlags(QOpenMultiLineEditH* handle, unsigned f)
{
	return QOpenMultiLineEdit_testTableFlags(handle, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_setTableFlags(QOpenMultiLineEditH* handle, unsigned f)
{
	QOpenMultiLineEdit_setTableFlags(handle, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenMultiLineEdit_clearTableFlags(QOpenMultiLineEditH* handle, unsigned f)
{
	QOpenMultiLineEdit_clearTableFlags(handle, f);
}
#pragma option pop


#pragma option push -w-inl
inline QClxFileIconProviderH* __cdecl QClxFileIconProvider_create(QObjectH* parent, char * name)
{
	return QClxFileIconProvider_create(parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileIconProvider_destroy(QClxFileIconProviderH* handle)
{
	QClxFileIconProvider_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPixmapH* __cdecl QClxFileIconProvider_pixmap(QClxFileIconProviderH* handle, QFileInfoH* p1)
{
	return QClxFileIconProvider_pixmap(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFilePreview_destroy(QClxFilePreviewH* handle)
{
	QClxFilePreview_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxFileDialogH* __cdecl QClxFileDialog_create(System::PWideString dirName, System::PWideString filter, QWidgetH* parent, char * name, bool modal)/* overload */
{
	return QClxFileDialog_create(dirName, filter, parent, name, modal);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_destroy(QClxFileDialogH* handle)
{
	QClxFileDialog_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxFileDialogH* __cdecl QClxFileDialog_create(QWidgetH* parent, char * name, bool modal)/* overload */
{
	return QClxFileDialog_create(parent, name, modal);
}
#pragma option pop


#pragma option push -w-inl
inline QClxFileDialogH* __cdecl QClxFileDialog_create(QWidgetH* parent, bool modal, int f)/* overload */
{
	return QClxFileDialog_create(parent, modal, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_getOpenFileName(System::PWideString retval, System::PWideString initially, System::PWideString filter, QWidgetH* parent, char * name)/* overload */
{
	QClxFileDialog_getOpenFileName(retval, initially, filter, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_getOpenFileName(System::PWideString retval, System::PWideString initially, System::PWideString filter, QWidgetH* parent, char * name, System::PWideString caption)/* overload */
{
	QClxFileDialog_getOpenFileName(retval, initially, filter, parent, name, caption);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_getSaveFileName(System::PWideString retval, System::PWideString initially, System::PWideString filter, QWidgetH* parent, char * name)/* overload */
{
	QClxFileDialog_getSaveFileName(retval, initially, filter, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_getSaveFileName(System::PWideString retval, System::PWideString initially, System::PWideString filter, QWidgetH* parent, char * name, System::PWideString caption)/* overload */
{
	QClxFileDialog_getSaveFileName(retval, initially, filter, parent, name, caption);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_getExistingDirectory(System::PWideString retval, System::PWideString dir, QWidgetH* parent, char * name)/* overload */
{
	QClxFileDialog_getExistingDirectory(retval, dir, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_getExistingDirectory(System::PWideString retval, System::PWideString dir, QWidgetH* parent, char * name, System::PWideString caption)/* overload */
{
	QClxFileDialog_getExistingDirectory(retval, dir, parent, name, caption);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_getExistingDirectory(System::PWideString retval, System::PWideString dir, QWidgetH* parent, char * name, System::PWideString caption, bool dirOnly)/* overload */
{
	QClxFileDialog_getExistingDirectory(retval, dir, parent, name, caption, dirOnly);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_getOpenFileNames(QStringListH* retval, System::PWideString filter, System::PWideString dir, QWidgetH* parent, char * name)/* overload */
{
	QClxFileDialog_getOpenFileNames(retval, filter, dir, parent, name);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_getOpenFileNames(QStringListH* retval, System::PWideString filter, System::PWideString dir, QWidgetH* parent, char * name, System::PWideString caption)/* overload */
{
	QClxFileDialog_getOpenFileNames(retval, filter, dir, parent, name, caption);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setIconProvider(QClxFileIconProviderH* p1)
{
	QClxFileDialog_setIconProvider(p1);
}
#pragma option pop


#pragma option push -w-inl
inline QClxFileIconProviderH* __cdecl QClxFileDialog_iconProvider(void)
{
	return QClxFileDialog_iconProvider();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_selectedFile(QClxFileDialogH* handle, System::PWideString retval)
{
	QClxFileDialog_selectedFile(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_selectedFilter(QClxFileDialogH* handle, System::PWideString retval)
{
	QClxFileDialog_selectedFilter(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setSelection(QClxFileDialogH* handle, System::PWideString p1)
{
	QClxFileDialog_setSelection(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_selectAll(QClxFileDialogH* handle, bool b)
{
	QClxFileDialog_selectAll(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_selectedFiles(QClxFileDialogH* handle, QStringListH* retval)
{
	QClxFileDialog_selectedFiles(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_dirPath(QClxFileDialogH* handle, System::PWideString retval)
{
	QClxFileDialog_dirPath(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setDir(QClxFileDialogH* handle, QDirH* p1)/* overload */
{
	QClxFileDialog_setDir(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QDirH* __cdecl QClxFileDialog_dir(QClxFileDialogH* handle)
{
	return QClxFileDialog_dir(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setShowHiddenFiles(QClxFileDialogH* handle, bool s)
{
	QClxFileDialog_setShowHiddenFiles(handle, s);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClxFileDialog_showHiddenFiles(QClxFileDialogH* handle)
{
	return QClxFileDialog_showHiddenFiles(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_rereadDir(QClxFileDialogH* handle)
{
	QClxFileDialog_rereadDir(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_resortDir(QClxFileDialogH* handle)
{
	QClxFileDialog_resortDir(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setMode(QClxFileDialogH* handle, QClxFileDialogMode p1)
{
	QClxFileDialog_setMode(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline QClxFileDialogMode __cdecl QClxFileDialog_mode(QClxFileDialogH* handle)
{
	return QClxFileDialog_mode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setViewMode(QClxFileDialogH* handle, QClxFileDialogViewMode m)
{
	QClxFileDialog_setViewMode(handle, m);
}
#pragma option pop


#pragma option push -w-inl
inline QClxFileDialogViewMode __cdecl QClxFileDialog_viewMode(QClxFileDialogH* handle)
{
	return QClxFileDialog_viewMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setPreviewMode(QClxFileDialogH* handle, QClxFileDialogPreviewMode m)
{
	QClxFileDialog_setPreviewMode(handle, m);
}
#pragma option pop


#pragma option push -w-inl
inline QClxFileDialogPreviewMode __cdecl QClxFileDialog_previewMode(QClxFileDialogH* handle)
{
	return QClxFileDialog_previewMode(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClxFileDialog_eventFilter(QClxFileDialogH* handle, QObjectH* p1, QEventH* p2)
{
	return QClxFileDialog_eventFilter(handle, p1, p2);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClxFileDialog_isInfoPreviewEnabled(QClxFileDialogH* handle)
{
	return QClxFileDialog_isInfoPreviewEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClxFileDialog_isContentsPreviewEnabled(QClxFileDialogH* handle)
{
	return QClxFileDialog_isContentsPreviewEnabled(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setInfoPreviewEnabled(QClxFileDialogH* handle, bool p1)
{
	QClxFileDialog_setInfoPreviewEnabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setContentsPreviewEnabled(QClxFileDialogH* handle, bool p1)
{
	QClxFileDialog_setContentsPreviewEnabled(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setInfoPreview(QClxFileDialogH* handle, QWidgetH* w, QClxFilePreviewH* preview)
{
	QClxFileDialog_setInfoPreview(handle, w, preview);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setContentsPreview(QClxFileDialogH* handle, QWidgetH* w, QClxFilePreviewH* preview)
{
	QClxFileDialog_setContentsPreview(handle, w, preview);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setEditText(QClxFileDialogH* handle, System::PWideString s)
{
	QClxFileDialog_setEditText(handle, s);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setFilterIndex(QClxFileDialogH* handle, int index)
{
	QClxFileDialog_setFilterIndex(handle, index);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_hook_addFile(QClxFileDialogH* handle, const System::TMethod hook)
{
	QClxFileDialog_hook_addFile(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_selectedExt(QClxFileDialogH* handle, System::PWideString retval)
{
	QClxFileDialog_selectedExt(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setDefaultExt(QClxFileDialogH* handle, System::PWideString ext)
{
	QClxFileDialog_setDefaultExt(handle, ext);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_defaultExt(QClxFileDialogH* handle, System::PWideString retval)
{
	QClxFileDialog_defaultExt(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QClxFileDialog_isRegisteredExtension(QClxFileDialogH* handle, System::PWideString ext)
{
	return QClxFileDialog_isRegisteredExtension(handle, ext);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_done(QClxFileDialogH* handle, int p1)
{
	QClxFileDialog_done(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setDir(QClxFileDialogH* handle, System::PWideString p1)/* overload */
{
	QClxFileDialog_setDir(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setFilter(QClxFileDialogH* handle, System::PWideString p1)
{
	QClxFileDialog_setFilter(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setFilters(QClxFileDialogH* handle, System::PWideString p1)/* overload */
{
	QClxFileDialog_setFilters(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setFilters(QClxFileDialogH* handle, System::PPChar p1)/* overload */
{
	QClxFileDialog_setFilters(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_setFilters(QClxFileDialogH* handle, QStringListH* p1)/* overload */
{
	QClxFileDialog_setFilters(handle, p1);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_show(QClxFileDialogH* handle)
{
	QClxFileDialog_show(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_numRows(QOpenTableViewH* handle)
{
	return QOpenTableView_numRows(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setNumRows(QOpenTableViewH* handle, int r)
{
	QOpenTableView_setNumRows(handle, r);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_numCols(QOpenTableViewH* handle)
{
	return QOpenTableView_numCols(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setNumCols(QOpenTableViewH* handle, int c)
{
	QOpenTableView_setNumCols(handle, c);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_topCell(QOpenTableViewH* handle)
{
	return QOpenTableView_topCell(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setTopCell(QOpenTableViewH* handle, int row)
{
	QOpenTableView_setTopCell(handle, row);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_leftCell(QOpenTableViewH* handle)
{
	return QOpenTableView_leftCell(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setLeftCell(QOpenTableViewH* handle, int col)
{
	QOpenTableView_setLeftCell(handle, col);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setTopLeftCell(QOpenTableViewH* handle, int row, int col)
{
	QOpenTableView_setTopLeftCell(handle, row, col);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_xOffset(QOpenTableViewH* handle)
{
	return QOpenTableView_xOffset(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setXOffset(QOpenTableViewH* handle, int xofs)
{
	QOpenTableView_setXOffset(handle, xofs);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_yOffset(QOpenTableViewH* handle)
{
	return QOpenTableView_yOffset(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setYOffset(QOpenTableViewH* handle, int yofs)
{
	QOpenTableView_setYOffset(handle, yofs);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setOffset(QOpenTableViewH* handle, int x, int y, bool updateScrBars)
{
	QOpenTableView_setOffset(handle, x, y, updateScrBars);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_cellWidth(QOpenTableViewH* handle, int col)/* overload */
{
	return QOpenTableView_cellWidth(handle, col);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_cellHeight(QOpenTableViewH* handle, int row)/* overload */
{
	return QOpenTableView_cellHeight(handle, row);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_cellWidth(QOpenTableViewH* handle)/* overload */
{
	return QOpenTableView_cellWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_cellHeight(QOpenTableViewH* handle)/* overload */
{
	return QOpenTableView_cellHeight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setCellWidth(QOpenTableViewH* handle, int w)
{
	QOpenTableView_setCellWidth(handle, w);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setCellHeight(QOpenTableViewH* handle, int h)
{
	QOpenTableView_setCellHeight(handle, h);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_totalWidth(QOpenTableViewH* handle)
{
	return QOpenTableView_totalWidth(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_totalHeight(QOpenTableViewH* handle)
{
	return QOpenTableView_totalHeight(handle);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QOpenTableView_tableFlags(QOpenTableViewH* handle)
{
	return QOpenTableView_tableFlags(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QOpenTableView_testTableFlags(QOpenTableViewH* handle, unsigned f)
{
	return QOpenTableView_testTableFlags(handle, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setTableFlags(QOpenTableViewH* handle, unsigned f)
{
	QOpenTableView_setTableFlags(handle, f);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_clearTableFlags(QOpenTableViewH* handle, unsigned f)
{
	QOpenTableView_clearTableFlags(handle, f);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QOpenTableView_autoUpdate(QOpenTableViewH* handle)
{
	return QOpenTableView_autoUpdate(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_setAutoUpdate(QOpenTableViewH* handle, bool b)
{
	QOpenTableView_setAutoUpdate(handle, b);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_updateCell(QOpenTableViewH* handle, int row, int column, bool erase)
{
	QOpenTableView_updateCell(handle, row, column, erase);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_cellUpdateRect(QOpenTableViewH* handle, Types::PRect retval)
{
	QOpenTableView_cellUpdateRect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_viewRect(QOpenTableViewH* handle, Types::PRect retval)
{
	QOpenTableView_viewRect(handle, retval);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_lastRowVisible(QOpenTableViewH* handle)
{
	return QOpenTableView_lastRowVisible(handle);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QOpenTableView_lastColVisible(QOpenTableViewH* handle)
{
	return QOpenTableView_lastColVisible(handle);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QOpenTableView_rowIsVisible(QOpenTableViewH* handle, int row)
{
	return QOpenTableView_rowIsVisible(handle, row);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QOpenTableView_colIsVisible(QOpenTableViewH* handle, int col)
{
	return QOpenTableView_colIsVisible(handle, col);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollBarH* __cdecl QOpenTableView_verticalScrollBar(QOpenTableViewH* handle)
{
	return QOpenTableView_verticalScrollBar(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollBarH* __cdecl QOpenTableView_horizontalScrollBar(QOpenTableViewH* handle)
{
	return QOpenTableView_horizontalScrollBar(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_scroll(QOpenTableViewH* handle, int xPixels, int yPixels)
{
	QOpenTableView_scroll(handle, xPixels, yPixels);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_updateScrollBars(QOpenTableViewH* handle)
{
	QOpenTableView_updateScrollBars(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QOpenTableView_updateTableSize(QOpenTableViewH* handle)
{
	QOpenTableView_updateTableSize(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QObject_hookH* __cdecl QObject_hook_create(QObjectH* handle)
{
	return QObject_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_hook_destroy(QObject_hookH* handle)
{
	QObject_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QObject_hook_hook_destroyed(QObject_hookH* handle, const System::TMethod hook)
{
	QObject_hook_hook_destroyed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QSenderObject_hookH* __cdecl QSenderObject_hook_create(QObjectH* handle)
{
	return QSenderObject_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSenderObject_hook_destroy(QSenderObject_hookH* handle)
{
	QSenderObject_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWidget_hookH* __cdecl QWidget_hook_create(QObjectH* handle)
{
	return QWidget_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidget_hook_destroy(QWidget_hookH* handle)
{
	QWidget_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QApplication_hookH* __cdecl QApplication_hook_create(QObjectH* handle)
{
	return QApplication_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_hook_destroy(QApplication_hookH* handle)
{
	QApplication_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_hook_hook_lastWindowClosed(QApplication_hookH* handle, const System::TMethod hook)
{
	QApplication_hook_hook_lastWindowClosed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_hook_hook_aboutToQuit(QApplication_hookH* handle, const System::TMethod hook)
{
	QApplication_hook_hook_aboutToQuit(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QApplication_hook_hook_guiThreadAwake(QApplication_hookH* handle, const System::TMethod hook)
{
	QApplication_hook_hook_guiThreadAwake(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QButton_hookH* __cdecl QButton_hook_create(QObjectH* handle)
{
	return QButton_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_hook_destroy(QButton_hookH* handle)
{
	QButton_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_hook_hook_pressed(QButton_hookH* handle, const System::TMethod hook)
{
	QButton_hook_hook_pressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_hook_hook_released(QButton_hookH* handle, const System::TMethod hook)
{
	QButton_hook_hook_released(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_hook_hook_clicked(QButton_hookH* handle, const System::TMethod hook)
{
	QButton_hook_hook_clicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_hook_hook_toggled(QButton_hookH* handle, const System::TMethod hook)
{
	QButton_hook_hook_toggled(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButton_hook_hook_stateChanged(QButton_hookH* handle, const System::TMethod hook)
{
	QButton_hook_hook_stateChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QComboBox_hookH* __cdecl QComboBox_hook_create(QObjectH* handle)
{
	return QComboBox_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_hook_destroy(QComboBox_hookH* handle)
{
	QComboBox_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_hook_hook_activated(QComboBox_hookH* handle, const System::TMethod hook)
{
	QComboBox_hook_hook_activated(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_hook_hook_highlighted(QComboBox_hookH* handle, const System::TMethod hook)
{
	QComboBox_hook_hook_highlighted(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_hook_hook_activated2(QComboBox_hookH* handle, const System::TMethod hook)
{
	QComboBox_hook_hook_activated2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_hook_hook_highlighted2(QComboBox_hookH* handle, const System::TMethod hook)
{
	QComboBox_hook_hook_highlighted2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QComboBox_hook_hook_textChanged(QComboBox_hookH* handle, const System::TMethod hook)
{
	QComboBox_hook_hook_textChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QDialog_hookH* __cdecl QDialog_hook_create(QObjectH* handle)
{
	return QDialog_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDialog_hook_destroy(QDialog_hookH* handle)
{
	QDialog_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDragObject_hookH* __cdecl QDragObject_hook_create(QObjectH* handle)
{
	return QDragObject_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragObject_hook_destroy(QDragObject_hookH* handle)
{
	QDragObject_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QStoredDrag_hookH* __cdecl QStoredDrag_hook_create(QObjectH* handle)
{
	return QStoredDrag_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStoredDrag_hook_destroy(QStoredDrag_hookH* handle)
{
	QStoredDrag_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTextDrag_hookH* __cdecl QTextDrag_hook_create(QObjectH* handle)
{
	return QTextDrag_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextDrag_hook_destroy(QTextDrag_hookH* handle)
{
	QTextDrag_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QImageDrag_hookH* __cdecl QImageDrag_hook_create(QObjectH* handle)
{
	return QImageDrag_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QImageDrag_hook_destroy(QImageDrag_hookH* handle)
{
	QImageDrag_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QUriDrag_hookH* __cdecl QUriDrag_hook_create(QObjectH* handle)
{
	return QUriDrag_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QUriDrag_hook_destroy(QUriDrag_hookH* handle)
{
	QUriDrag_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QColorDrag_hookH* __cdecl QColorDrag_hook_create(QObjectH* handle)
{
	return QColorDrag_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorDrag_hook_destroy(QColorDrag_hookH* handle)
{
	QColorDrag_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QEvent_hookH* __cdecl QEvent_hook_create(QObjectH* handle)
{
	return QEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QEvent_hook_destroy(QEvent_hookH* handle)
{
	QEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTimerEvent_hookH* __cdecl QTimerEvent_hook_create(QObjectH* handle)
{
	return QTimerEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTimerEvent_hook_destroy(QTimerEvent_hookH* handle)
{
	QTimerEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMouseEvent_hookH* __cdecl QMouseEvent_hook_create(QObjectH* handle)
{
	return QMouseEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMouseEvent_hook_destroy(QMouseEvent_hookH* handle)
{
	QMouseEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWheelEvent_hookH* __cdecl QWheelEvent_hook_create(QObjectH* handle)
{
	return QWheelEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWheelEvent_hook_destroy(QWheelEvent_hookH* handle)
{
	QWheelEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QKeyEvent_hookH* __cdecl QKeyEvent_hook_create(QObjectH* handle)
{
	return QKeyEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QKeyEvent_hook_destroy(QKeyEvent_hookH* handle)
{
	QKeyEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFocusEvent_hookH* __cdecl QFocusEvent_hook_create(QObjectH* handle)
{
	return QFocusEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFocusEvent_hook_destroy(QFocusEvent_hookH* handle)
{
	QFocusEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPaintEvent_hookH* __cdecl QPaintEvent_hook_create(QObjectH* handle)
{
	return QPaintEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPaintEvent_hook_destroy(QPaintEvent_hookH* handle)
{
	QPaintEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMoveEvent_hookH* __cdecl QMoveEvent_hook_create(QObjectH* handle)
{
	return QMoveEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMoveEvent_hook_destroy(QMoveEvent_hookH* handle)
{
	QMoveEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QResizeEvent_hookH* __cdecl QResizeEvent_hook_create(QObjectH* handle)
{
	return QResizeEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QResizeEvent_hook_destroy(QResizeEvent_hookH* handle)
{
	QResizeEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCloseEvent_hookH* __cdecl QCloseEvent_hook_create(QObjectH* handle)
{
	return QCloseEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCloseEvent_hook_destroy(QCloseEvent_hookH* handle)
{
	QCloseEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QShowEvent_hookH* __cdecl QShowEvent_hook_create(QObjectH* handle)
{
	return QShowEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QShowEvent_hook_destroy(QShowEvent_hookH* handle)
{
	QShowEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QHideEvent_hookH* __cdecl QHideEvent_hook_create(QObjectH* handle)
{
	return QHideEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHideEvent_hook_destroy(QHideEvent_hookH* handle)
{
	QHideEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDropEvent_hookH* __cdecl QDropEvent_hook_create(QObjectH* handle)
{
	return QDropEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDropEvent_hook_destroy(QDropEvent_hookH* handle)
{
	QDropEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDragMoveEvent_hookH* __cdecl QDragMoveEvent_hook_create(QObjectH* handle)
{
	return QDragMoveEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragMoveEvent_hook_destroy(QDragMoveEvent_hookH* handle)
{
	QDragMoveEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDragEnterEvent_hookH* __cdecl QDragEnterEvent_hook_create(QObjectH* handle)
{
	return QDragEnterEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragEnterEvent_hook_destroy(QDragEnterEvent_hookH* handle)
{
	QDragEnterEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDragResponseEvent_hookH* __cdecl QDragResponseEvent_hook_create(QObjectH* handle)
{
	return QDragResponseEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragResponseEvent_hook_destroy(QDragResponseEvent_hookH* handle)
{
	QDragResponseEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QDragLeaveEvent_hookH* __cdecl QDragLeaveEvent_hook_create(QObjectH* handle)
{
	return QDragLeaveEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QDragLeaveEvent_hook_destroy(QDragLeaveEvent_hookH* handle)
{
	QDragLeaveEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QChildEvent_hookH* __cdecl QChildEvent_hook_create(QObjectH* handle)
{
	return QChildEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QChildEvent_hook_destroy(QChildEvent_hookH* handle)
{
	QChildEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCustomEvent_hookH* __cdecl QCustomEvent_hook_create(QObjectH* handle)
{
	return QCustomEvent_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCustomEvent_hook_destroy(QCustomEvent_hookH* handle)
{
	QCustomEvent_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFrame_hookH* __cdecl QFrame_hook_create(QObjectH* handle)
{
	return QFrame_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFrame_hook_destroy(QFrame_hookH* handle)
{
	QFrame_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QIconView_hookH* __cdecl QIconView_hook_create(QObjectH* handle)
{
	return QIconView_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_destroy(QIconView_hookH* handle)
{
	QIconView_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_selectionChanged(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_selectionChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_selectionChanged2(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_selectionChanged2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_currentChanged(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_currentChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_clicked(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_clicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_clicked2(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_clicked2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_pressed(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_pressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_pressed2(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_pressed2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_doubleClicked(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_doubleClicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_returnPressed(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_returnPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_rightButtonClicked(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_rightButtonClicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_rightButtonPressed(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_rightButtonPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_mouseButtonPressed(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_mouseButtonPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_mouseButtonClicked(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_mouseButtonClicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_dropped(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_dropped(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_moved(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_moved(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_onItem(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_onItem(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_onViewport(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_onViewport(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_itemRenamed(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_itemRenamed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QIconView_hook_hook_itemRenamed2(QIconView_hookH* handle, const System::TMethod hook)
{
	QIconView_hook_hook_itemRenamed2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QLCDNumber_hookH* __cdecl QLCDNumber_hook_create(QObjectH* handle)
{
	return QLCDNumber_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_hook_destroy(QLCDNumber_hookH* handle)
{
	QLCDNumber_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLCDNumber_hook_hook_overflow(QLCDNumber_hookH* handle, const System::TMethod hook)
{
	QLCDNumber_hook_hook_overflow(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QLineEdit_hookH* __cdecl QLineEdit_hook_create(QObjectH* handle)
{
	return QLineEdit_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_hook_destroy(QLineEdit_hookH* handle)
{
	QLineEdit_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_hook_hook_textChanged(QLineEdit_hookH* handle, const System::TMethod hook)
{
	QLineEdit_hook_hook_textChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLineEdit_hook_hook_returnPressed(QLineEdit_hookH* handle, const System::TMethod hook)
{
	QLineEdit_hook_hook_returnPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QListBox_hookH* __cdecl QListBox_hook_create(QObjectH* handle)
{
	return QListBox_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_destroy(QListBox_hookH* handle)
{
	QListBox_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_highlighted(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_highlighted(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_selected(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_selected(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_highlighted2(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_highlighted2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_selected2(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_selected2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_highlighted3(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_highlighted3(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_selected3(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_selected3(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_selectionChanged(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_selectionChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_selectionChanged2(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_selectionChanged2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_currentChanged(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_currentChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_clicked(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_clicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_clicked2(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_clicked2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_pressed(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_pressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_pressed2(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_pressed2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_doubleClicked(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_doubleClicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_returnPressed(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_returnPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_rightButtonClicked(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_rightButtonClicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_rightButtonPressed(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_rightButtonPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_mouseButtonPressed(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_mouseButtonPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_mouseButtonClicked(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_mouseButtonClicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_onItem(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_onItem(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListBox_hook_hook_onViewport(QListBox_hookH* handle, const System::TMethod hook)
{
	QListBox_hook_hook_onViewport(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QListViewItem_hookH* __cdecl QListViewItem_hook_create(QObjectH* handle)
{
	return QListViewItem_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListViewItem_hook_destroy(QListViewItem_hookH* handle)
{
	QListViewItem_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QListView_hookH* __cdecl QListView_hook_create(QObjectH* handle)
{
	return QListView_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_destroy(QListView_hookH* handle)
{
	QListView_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_selectionChanged(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_selectionChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_selectionChanged2(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_selectionChanged2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_currentChanged(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_currentChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_clicked(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_clicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_clicked2(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_clicked2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_pressed(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_pressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_pressed2(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_pressed2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_doubleClicked(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_doubleClicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_returnPressed(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_returnPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_rightButtonClicked(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_rightButtonClicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_rightButtonPressed(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_rightButtonPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_mouseButtonPressed(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_mouseButtonPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_mouseButtonClicked(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_mouseButtonClicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_onItem(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_onItem(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_onViewport(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_onViewport(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_expanded(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_expanded(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QListView_hook_hook_collapsed(QListView_hookH* handle, const System::TMethod hook)
{
	QListView_hook_hook_collapsed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QCheckListItem_hookH* __cdecl QCheckListItem_hook_create(QObjectH* handle)
{
	return QCheckListItem_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckListItem_hook_destroy(QCheckListItem_hookH* handle)
{
	QCheckListItem_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMenuBar_hookH* __cdecl QMenuBar_hook_create(QObjectH* handle)
{
	return QMenuBar_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_hook_destroy(QMenuBar_hookH* handle)
{
	QMenuBar_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_hook_hook_activated(QMenuBar_hookH* handle, const System::TMethod hook)
{
	QMenuBar_hook_hook_activated(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMenuBar_hook_hook_highlighted(QMenuBar_hookH* handle, const System::TMethod hook)
{
	QMenuBar_hook_hook_highlighted(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QMessageBox_hookH* __cdecl QMessageBox_hook_create(QObjectH* handle)
{
	return QMessageBox_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMessageBox_hook_destroy(QMessageBox_hookH* handle)
{
	QMessageBox_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QMultiLineEdit_hookH* __cdecl QMultiLineEdit_hook_create(QObjectH* handle)
{
	return QMultiLineEdit_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_hook_destroy(QMultiLineEdit_hookH* handle)
{
	QMultiLineEdit_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_hook_hook_textChanged(QMultiLineEdit_hookH* handle, const System::TMethod hook)
{
	QMultiLineEdit_hook_hook_textChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_hook_hook_returnPressed(QMultiLineEdit_hookH* handle, const System::TMethod hook)
{
	QMultiLineEdit_hook_hook_returnPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_hook_hook_undoAvailable(QMultiLineEdit_hookH* handle, const System::TMethod hook)
{
	QMultiLineEdit_hook_hook_undoAvailable(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_hook_hook_redoAvailable(QMultiLineEdit_hookH* handle, const System::TMethod hook)
{
	QMultiLineEdit_hook_hook_redoAvailable(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMultiLineEdit_hook_hook_copyAvailable(QMultiLineEdit_hookH* handle, const System::TMethod hook)
{
	QMultiLineEdit_hook_hook_copyAvailable(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollView_hookH* __cdecl QScrollView_hook_create(QObjectH* handle)
{
	return QScrollView_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_hook_destroy(QScrollView_hookH* handle)
{
	QScrollView_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollView_hook_hook_contentsMoving(QScrollView_hookH* handle, const System::TMethod hook)
{
	QScrollView_hook_hook_contentsMoving(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QSlider_hookH* __cdecl QSlider_hook_create(QObjectH* handle)
{
	return QSlider_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_hook_destroy(QSlider_hookH* handle)
{
	QSlider_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_hook_hook_valueChanged(QSlider_hookH* handle, const System::TMethod hook)
{
	QSlider_hook_hook_valueChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_hook_hook_sliderPressed(QSlider_hookH* handle, const System::TMethod hook)
{
	QSlider_hook_hook_sliderPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_hook_hook_sliderMoved(QSlider_hookH* handle, const System::TMethod hook)
{
	QSlider_hook_hook_sliderMoved(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSlider_hook_hook_sliderReleased(QSlider_hookH* handle, const System::TMethod hook)
{
	QSlider_hook_hook_sliderReleased(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QSocketNotifier_hookH* __cdecl QSocketNotifier_hook_create(QObjectH* handle)
{
	return QSocketNotifier_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSocketNotifier_hook_destroy(QSocketNotifier_hookH* handle)
{
	QSocketNotifier_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSocketNotifier_hook_hook_activated(QSocketNotifier_hookH* handle, const System::TMethod hook)
{
	QSocketNotifier_hook_hook_activated(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QSpinBox_hookH* __cdecl QSpinBox_hook_create(QObjectH* handle)
{
	return QSpinBox_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_hook_destroy(QSpinBox_hookH* handle)
{
	QSpinBox_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_hook_hook_valueChanged(QSpinBox_hookH* handle, const System::TMethod hook)
{
	QSpinBox_hook_hook_valueChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSpinBox_hook_hook_valueChanged2(QSpinBox_hookH* handle, const System::TMethod hook)
{
	QSpinBox_hook_hook_valueChanged2(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QStyle_hookH* __cdecl QStyle_hook_create(QObjectH* handle)
{
	return QStyle_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QStyle_hook_destroy(QStyle_hookH* handle)
{
	QStyle_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTranslator_hookH* __cdecl QTranslator_hook_create(QObjectH* handle)
{
	return QTranslator_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTranslator_hook_destroy(QTranslator_hookH* handle)
{
	QTranslator_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QBrush_hookH* __cdecl QBrush_hook_create(QObjectH* handle)
{
	return QBrush_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QBrush_hook_destroy(QBrush_hookH* handle)
{
	QBrush_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QButtonGroup_hookH* __cdecl QButtonGroup_hook_create(QObjectH* handle)
{
	return QButtonGroup_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButtonGroup_hook_destroy(QButtonGroup_hookH* handle)
{
	QButtonGroup_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButtonGroup_hook_hook_pressed(QButtonGroup_hookH* handle, const System::TMethod hook)
{
	QButtonGroup_hook_hook_pressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButtonGroup_hook_hook_released(QButtonGroup_hookH* handle, const System::TMethod hook)
{
	QButtonGroup_hook_hook_released(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QButtonGroup_hook_hook_clicked(QButtonGroup_hookH* handle, const System::TMethod hook)
{
	QButtonGroup_hook_hook_clicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QCheckBox_hookH* __cdecl QCheckBox_hook_create(QObjectH* handle)
{
	return QCheckBox_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCheckBox_hook_destroy(QCheckBox_hookH* handle)
{
	QCheckBox_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClipboard_hookH* __cdecl QClipboard_hook_create(QObjectH* handle)
{
	return QClipboard_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_hook_destroy(QClipboard_hookH* handle)
{
	QClipboard_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClipboard_hook_hook_dataChanged(QClipboard_hookH* handle, const System::TMethod hook)
{
	QClipboard_hook_hook_dataChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QColorDialog_hookH* __cdecl QColorDialog_hook_create(QObjectH* handle)
{
	return QColorDialog_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QColorDialog_hook_destroy(QColorDialog_hookH* handle)
{
	QColorDialog_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QCommonStyle_hookH* __cdecl QCommonStyle_hook_create(QObjectH* handle)
{
	return QCommonStyle_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QCommonStyle_hook_destroy(QCommonStyle_hookH* handle)
{
	QCommonStyle_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QFontDialog_hookH* __cdecl QFontDialog_hook_create(QObjectH* handle)
{
	return QFontDialog_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDialog_hook_destroy(QFontDialog_hookH* handle)
{
	QFontDialog_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDialog_hook_hook_fontSelected(QFontDialog_hookH* handle, const System::TMethod hook)
{
	QFontDialog_hook_hook_fontSelected(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QFontDialog_hook_hook_fontHighlighted(QFontDialog_hookH* handle, const System::TMethod hook)
{
	QFontDialog_hook_hook_fontHighlighted(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QGroupBox_hookH* __cdecl QGroupBox_hook_create(QObjectH* handle)
{
	return QGroupBox_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QGroupBox_hook_destroy(QGroupBox_hookH* handle)
{
	QGroupBox_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QHeader_hookH* __cdecl QHeader_hook_create(QObjectH* handle)
{
	return QHeader_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_hook_destroy(QHeader_hookH* handle)
{
	QHeader_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_hook_hook_clicked(QHeader_hookH* handle, const System::TMethod hook)
{
	QHeader_hook_hook_clicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_hook_hook_pressed(QHeader_hookH* handle, const System::TMethod hook)
{
	QHeader_hook_hook_pressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_hook_hook_released(QHeader_hookH* handle, const System::TMethod hook)
{
	QHeader_hook_hook_released(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_hook_hook_sizeChange(QHeader_hookH* handle, const System::TMethod hook)
{
	QHeader_hook_hook_sizeChange(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_hook_hook_indexChange(QHeader_hookH* handle, const System::TMethod hook)
{
	QHeader_hook_hook_indexChange(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_hook_hook_sectionClicked(QHeader_hookH* handle, const System::TMethod hook)
{
	QHeader_hook_hook_sectionClicked(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QHeader_hook_hook_moved(QHeader_hookH* handle, const System::TMethod hook)
{
	QHeader_hook_hook_moved(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QLabel_hookH* __cdecl QLabel_hook_create(QObjectH* handle)
{
	return QLabel_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QLabel_hook_destroy(QLabel_hookH* handle)
{
	QLabel_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPainter_hookH* __cdecl QPainter_hook_create(QObjectH* handle)
{
	return QPainter_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPainter_hook_destroy(QPainter_hookH* handle)
{
	QPainter_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPen_hookH* __cdecl QPen_hook_create(QObjectH* handle)
{
	return QPen_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPen_hook_destroy(QPen_hookH* handle)
{
	QPen_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QPopupMenu_hookH* __cdecl QPopupMenu_hook_create(QObjectH* handle)
{
	return QPopupMenu_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_hook_destroy(QPopupMenu_hookH* handle)
{
	QPopupMenu_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_hook_hook_activated(QPopupMenu_hookH* handle, const System::TMethod hook)
{
	QPopupMenu_hook_hook_activated(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_hook_hook_highlighted(QPopupMenu_hookH* handle, const System::TMethod hook)
{
	QPopupMenu_hook_hook_highlighted(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_hook_hook_activatedRedirect(QPopupMenu_hookH* handle, const System::TMethod hook)
{
	QPopupMenu_hook_hook_activatedRedirect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_hook_hook_highlightedRedirect(QPopupMenu_hookH* handle, const System::TMethod hook)
{
	QPopupMenu_hook_hook_highlightedRedirect(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_hook_hook_aboutToShow(QPopupMenu_hookH* handle, const System::TMethod hook)
{
	QPopupMenu_hook_hook_aboutToShow(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPopupMenu_hook_hook_aboutToHide(QPopupMenu_hookH* handle, const System::TMethod hook)
{
	QPopupMenu_hook_hook_aboutToHide(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QPushButton_hookH* __cdecl QPushButton_hook_create(QObjectH* handle)
{
	return QPushButton_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QPushButton_hook_destroy(QPushButton_hookH* handle)
{
	QPushButton_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QRadioButton_hookH* __cdecl QRadioButton_hook_create(QObjectH* handle)
{
	return QRadioButton_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QRadioButton_hook_destroy(QRadioButton_hookH* handle)
{
	QRadioButton_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QScrollBar_hookH* __cdecl QScrollBar_hook_create(QObjectH* handle)
{
	return QScrollBar_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_hook_destroy(QScrollBar_hookH* handle)
{
	QScrollBar_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_hook_hook_valueChanged(QScrollBar_hookH* handle, const System::TMethod hook)
{
	QScrollBar_hook_hook_valueChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_hook_hook_sliderPressed(QScrollBar_hookH* handle, const System::TMethod hook)
{
	QScrollBar_hook_hook_sliderPressed(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_hook_hook_sliderMoved(QScrollBar_hookH* handle, const System::TMethod hook)
{
	QScrollBar_hook_hook_sliderMoved(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_hook_hook_sliderReleased(QScrollBar_hookH* handle, const System::TMethod hook)
{
	QScrollBar_hook_hook_sliderReleased(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_hook_hook_nextLine(QScrollBar_hookH* handle, const System::TMethod hook)
{
	QScrollBar_hook_hook_nextLine(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_hook_hook_prevLine(QScrollBar_hookH* handle, const System::TMethod hook)
{
	QScrollBar_hook_hook_prevLine(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_hook_hook_nextPage(QScrollBar_hookH* handle, const System::TMethod hook)
{
	QScrollBar_hook_hook_nextPage(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QScrollBar_hook_hook_prevPage(QScrollBar_hookH* handle, const System::TMethod hook)
{
	QScrollBar_hook_hook_prevPage(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QSizeGrip_hookH* __cdecl QSizeGrip_hook_create(QObjectH* handle)
{
	return QSizeGrip_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QSizeGrip_hook_destroy(QSizeGrip_hookH* handle)
{
	QSizeGrip_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTableView_hookH* __cdecl QTableView_hook_create(QObjectH* handle)
{
	return QTableView_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTableView_hook_destroy(QTableView_hookH* handle)
{
	QTableView_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTextBrowser_hookH* __cdecl QTextBrowser_hook_create(QObjectH* handle)
{
	return QTextBrowser_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_hook_destroy(QTextBrowser_hookH* handle)
{
	QTextBrowser_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_hook_hook_backwardAvailable(QTextBrowser_hookH* handle, const System::TMethod hook)
{
	QTextBrowser_hook_hook_backwardAvailable(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_hook_hook_forwardAvailable(QTextBrowser_hookH* handle, const System::TMethod hook)
{
	QTextBrowser_hook_hook_forwardAvailable(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_hook_hook_highlighted(QTextBrowser_hookH* handle, const System::TMethod hook)
{
	QTextBrowser_hook_hook_highlighted(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextBrowser_hook_hook_textChanged(QTextBrowser_hookH* handle, const System::TMethod hook)
{
	QTextBrowser_hook_hook_textChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QTextView_hookH* __cdecl QTextView_hook_create(QObjectH* handle)
{
	return QTextView_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTextView_hook_destroy(QTextView_hookH* handle)
{
	QTextView_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWhatsThis_hookH* __cdecl QWhatsThis_hook_create(QObjectH* handle)
{
	return QWhatsThis_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWhatsThis_hook_destroy(QWhatsThis_hookH* handle)
{
	QWhatsThis_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QWindowsStyle_hookH* __cdecl QWindowsStyle_hook_create(QObjectH* handle)
{
	return QWindowsStyle_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWindowsStyle_hook_destroy(QWindowsStyle_hookH* handle)
{
	QWindowsStyle_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QTimer_hookH* __cdecl QTimer_hook_create(QObjectH* handle)
{
	return QTimer_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTimer_hook_destroy(QTimer_hookH* handle)
{
	QTimer_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QTimer_hook_hook_timeout(QTimer_hookH* handle, const System::TMethod hook)
{
	QTimer_hook_hook_timeout(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QWorkspace_hookH* __cdecl QWorkspace_hook_create(QObjectH* handle)
{
	return QWorkspace_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWorkspace_hook_destroy(QWorkspace_hookH* handle)
{
	QWorkspace_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWorkspace_hook_hook_windowActivated(QWorkspace_hookH* handle, const System::TMethod hook)
{
	QWorkspace_hook_hook_windowActivated(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline QClxFileIconProvider_hookH* __cdecl QClxFileIconProvider_hook_create(QObjectH* handle)
{
	return QClxFileIconProvider_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileIconProvider_hook_destroy(QClxFileIconProvider_hookH* handle)
{
	QClxFileIconProvider_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline QClxFileDialog_hookH* __cdecl QClxFileDialog_hook_create(QObjectH* handle)
{
	return QClxFileDialog_hook_create(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_hook_destroy(QClxFileDialog_hookH* handle)
{
	QClxFileDialog_hook_destroy(handle);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_hook_hook_fileHighlighted(QClxFileDialog_hookH* handle, const System::TMethod hook)
{
	QClxFileDialog_hook_hook_fileHighlighted(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_hook_hook_fileSelected(QClxFileDialog_hookH* handle, const System::TMethod hook)
{
	QClxFileDialog_hook_hook_fileSelected(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_hook_hook_dirEntered(QClxFileDialog_hookH* handle, const System::TMethod hook)
{
	QClxFileDialog_hook_hook_dirEntered(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_hook_hook_closeRequest(QClxFileDialog_hookH* handle, const System::TMethod hook)
{
	QClxFileDialog_hook_hook_closeRequest(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QClxFileDialog_hook_hook_filterChanged(QClxFileDialog_hookH* handle, const System::TMethod hook)
{
	QClxFileDialog_hook_hook_filterChanged(handle, hook);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl InitializePAnsiString(void * CCPS, void * COPS, void * IPS, void * FPS)
{
	InitializePAnsiString(CCPS, COPS, IPS, FPS);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl InitializePWideString(void * CUPS, void * UOPS, void * LOPS, void * IPS, void * FPS)
{
	InitializePWideString(CUPS, UOPS, LOPS, IPS, FPS);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl InitializePPointArray(void * GPP, void * GPL, void * SPL)
{
	InitializePPointArray(GPP, GPL, SPL);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl InitializePIntArray(void * GPP, void * GPL, void * SPL)
{
	InitializePIntArray(GPP, GPL, SPL);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl bitBlt(QPaintDeviceH* dst, Types::PPoint dp, QPaintDeviceH* src, Types::PRect sr, RasterOp rop)/* overload */
{
	bitBlt(dst, dp, src, sr, rop);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl bitBlt(QPaintDeviceH* dst, int dx, int dy, QPaintDeviceH* src, int sx, int sy, int sw, int sh, RasterOp rop, bool IgnoreMask)/* overload */
{
	bitBlt(dst, dx, dy, src, sx, sy, sw, sh, rop, IgnoreMask);
}
#pragma option pop


#pragma option push -w-inl
inline QByteArrayH* __cdecl QByteArray_create(int Size)
{
	return QByteArray_create(Size);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QByteArray_destroy(QByteArrayH* ba)
{
	QByteArray_destroy(ba);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QClxWidget_MaxWidgetSize(void)
{
	return QClxWidget_MaxWidgetSize();
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWorkspace_next(QWorkspaceH* workspace)
{
	QWorkspace_next(workspace);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWorkspace_previous(QWorkspaceH* workspace)
{
	QWorkspace_previous(workspace);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl setPopupParent(unsigned newPopupParent)
{
	setPopupParent(newPopupParent);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QMimeSource_destroy(QMimeSourceH* mime)
{
	QMimeSource_destroy(mime);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QMimeSource_is_QClxMimeSource(QMimeSourceH* mime)
{
	return QMimeSource_is_QClxMimeSource(mime);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQCustomEvent(QEventH* e)
{
	return QEvent_isQCustomEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQShowEvent(QEventH* e)
{
	return QEvent_isQShowEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQTimerEvent(QEventH* e)
{
	return QEvent_isQTimerEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQMouseEvent(QEventH* e)
{
	return QEvent_isQMouseEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQWheelEvent(QEventH* e)
{
	return QEvent_isQWheelEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQKeyEvent(QEventH* e)
{
	return QEvent_isQKeyEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQFocusEvent(QEventH* e)
{
	return QEvent_isQFocusEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQPaintEvent(QEventH* e)
{
	return QEvent_isQPaintEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQMoveEvent(QEventH* e)
{
	return QEvent_isQMoveEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQResizeEvent(QEventH* e)
{
	return QEvent_isQResizeEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQCloseEvent(QEventH* e)
{
	return QEvent_isQCloseEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQHideEvent(QEventH* e)
{
	return QEvent_isQHideEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQDropEventEvent(QEventH* e)
{
	return QEvent_isQDropEventEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQDragMoveEvent(QEventH* e)
{
	return QEvent_isQDragMoveEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQDragEnterEvent(QEventH* e)
{
	return QEvent_isQDragEnterEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQDragResponseEvent(QEventH* e)
{
	return QEvent_isQDragResponseEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQDragLeaveEvent(QEventH* e)
{
	return QEvent_isQDragLeaveEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QEvent_isQChildEvent(QEventH* e)
{
	return QEvent_isQChildEvent(e);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectListH* __cdecl QObjectList_create(void)/* overload */
{
	return QObjectList_create();
}
#pragma option pop


#pragma option push -w-inl
inline QObjectListH* __cdecl QObjectList_create(QObjectListH* list)/* overload */
{
	return QObjectList_create(list);
}
#pragma option pop


#pragma option push -w-inl
inline void __fastcall QObjectList_destroy(QObjectListH* obj)
{
	QObjectList_destroy(obj);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QObjectList_count(QObjectListH* obj)
{
	return QObjectList_count(obj);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObjectList_isEmpty(QObjectListH* obj)
{
	return QObjectList_isEmpty(obj);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObjectList_insert(QObjectListH* obj, unsigned i, QObjectH* d)
{
	return QObjectList_insert(obj, i, d);
}
#pragma option pop


#pragma option push -w-inl
inline void __fastcall QObjectList_inSort(QObjectListH* obj, QObjectH* d)
{
	QObjectList_inSort(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline void __fastcall QObjectList_prepend(QObjectListH* obj, QObjectH* d)
{
	QObjectList_prepend(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline void __fastcall QObjectList_append(QObjectListH* obj, QObjectH* d)
{
	QObjectList_append(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObjectList_remove(QObjectListH* obj, unsigned i)/* overload */
{
	return QObjectList_remove(obj, i);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObjectList_remove(QObjectListH* obj)/* overload */
{
	return QObjectList_remove(obj);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObjectList_remove(QObjectListH* obj, QObjectH* d)/* overload */
{
	return QObjectList_remove(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObjectList_removeRef(QObjectListH* obj, QObjectH* d)
{
	return QObjectList_removeRef(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObjectList_removeFirst(QObjectListH* obj)
{
	return QObjectList_removeFirst(obj);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QObjectList_removeLast(QObjectListH* obj)
{
	return QObjectList_removeLast(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObjectList_take(QObjectListH* obj, unsigned i)/* overload */
{
	return QObjectList_take(obj, i);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObjectList_take(QObjectListH* obj)/* overload */
{
	return QObjectList_take(obj);
}
#pragma option pop


#pragma option push -w-inl
inline void __fastcall QObjectList_clear(QObjectListH* obj)
{
	QObjectList_clear(obj);
}
#pragma option pop


#pragma option push -w-inl
inline void __fastcall QObjectList_sort(QObjectListH* obj)
{
	QObjectList_sort(obj);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QObjectList_find(QObjectListH* obj, QObjectH* d)
{
	return QObjectList_find(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QObjectList_findNext(QObjectListH* obj, QObjectH* d)
{
	return QObjectList_findNext(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QObjectList_findRef(QObjectListH* obj, QObjectH* d)
{
	return QObjectList_findRef(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QObjectList_findNextRef(QObjectListH* obj, QObjectH* d)
{
	return QObjectList_findNextRef(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QObjectList_contains(QObjectListH* obj, QObjectH* d)
{
	return QObjectList_contains(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QObjectList_containsRef(QObjectListH* obj, QObjectH* d)
{
	return QObjectList_containsRef(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObjectList_at(QObjectListH* obj, unsigned i)/* overload */
{
	return QObjectList_at(obj, i);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QObjectList_at(QObjectListH* obj)/* overload */
{
	return QObjectList_at(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObjectList_current(QObjectListH* obj)
{
	return QObjectList_current(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObjectList_getFirst(QObjectListH* obj)
{
	return QObjectList_getFirst(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObjectList_getLast(QObjectListH* obj)
{
	return QObjectList_getLast(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObjectList_first(QObjectListH* obj)
{
	return QObjectList_first(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObjectList_last(QObjectListH* obj)
{
	return QObjectList_last(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObjectList_next(QObjectListH* obj)
{
	return QObjectList_next(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QObjectH* __cdecl QObjectList_prev(QObjectListH* obj)
{
	return QObjectList_prev(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QBitmapH* __cdecl QBitmap_from_QPixmap(QBitmapH* bm, QPixmapH* pm)
{
	return QBitmap_from_QPixmap(bm, pm);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetListH* __cdecl QWidgetList_create(void)/* overload */
{
	return QWidgetList_create();
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetListH* __cdecl QWidgetList_create(QWidgetListH* list)/* overload */
{
	return QWidgetList_create(list);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidgetList_destroy(QWidgetListH* obj)
{
	QWidgetList_destroy(obj);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QWidgetList_count(QWidgetListH* obj)
{
	return QWidgetList_count(obj);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidgetList_insert(QWidgetListH* obj, unsigned i, QWidgetH* d)
{
	return QWidgetList_insert(obj, i, d);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidgetList_remove(QWidgetListH* obj, unsigned i)/* overload */
{
	return QWidgetList_remove(obj, i);
}
#pragma option pop


#pragma option push -w-inl
inline bool __cdecl QWidgetList_remove(QWidgetListH* obj, QWidgetH* d)/* overload */
{
	return QWidgetList_remove(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline void __cdecl QWidgetList_clear(QWidgetListH* obj)
{
	QWidgetList_clear(obj);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidgetList_find(QWidgetListH* obj, QWidgetH* d)
{
	return QWidgetList_find(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline int __cdecl QWidgetList_findNext(QWidgetListH* obj, QWidgetH* d)
{
	return QWidgetList_findNext(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline unsigned __cdecl QWidgetList_contains(QWidgetListH* obj, QWidgetH* d)
{
	return QWidgetList_contains(obj, d);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidgetList_at(QWidgetListH* obj, unsigned i)/* overload */
{
	return QWidgetList_at(obj, i);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidgetList_current(QWidgetListH* obj)
{
	return QWidgetList_current(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidgetList_first(QWidgetListH* obj)
{
	return QWidgetList_first(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidgetList_last(QWidgetListH* obj)
{
	return QWidgetList_last(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidgetList_next(QWidgetListH* obj)
{
	return QWidgetList_next(obj);
}
#pragma option pop


#pragma option push -w-inl
inline QWidgetH* __cdecl QWidgetList_prev(QWidgetListH* obj)
{
	return QWidgetList_prev(obj);
}
#pragma option pop



}	/* namespace Qt */
using namespace Qt;
#pragma option pop	// -w-
#pragma option pop	// -Vx

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Qt
