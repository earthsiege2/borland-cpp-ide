// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.21  $
// File generated on 1/28/2002 7:56:10 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Common Files\Microsoft Shared\VBA\VBEEXT1.OLB (1)
// LIBID: {0002E157-0000-0000-C000-000000000046}
// LCID: 0
// Helpfile: C:\Program Files\Common Files\Microsoft Shared\VBA\VEENOB3.HLP
// HelpString: Microsoft Visual Basic for Applications Extensibility
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
//   (2) v2.0 Office, (C:\Program Files\Microsoft Office\office97\Office\MSO97.DLL)
// Parent TypeLibrary:
//   (0) v1.2 Excel, (c:\program files\microsoft office\office\excel8.olb)
// ************************************************************************ //
#ifndef   VBIDE_97H
#define   VBIDE_97H

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "Office_97.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Vbide_97
{

// *********************************************************************//
// HelpString: Microsoft Visual Basic for Applications Extensibility
// Version:    5.0
// *********************************************************************//

/*   **********************************************************

  Type Library Options: 
  Generate C++ Import file
  Expose namespace with 'using'.
  Generate files for dependant type libraries
  Map HRESULT to safecall on dual interfaces
  Place warnings in imported files
  Generate IDE registration for component wrappers
  Generate dispinterfaces
  Generate CoClassCreator wrappers
  Generate C++Builder 4.0 event wrappers for servers
  Generate VCL component wrappers for servers
  Ignore [PreDefined] flag
  Ignore Standard Type Libraries
  Show Debug Output
  Place comments in imported files
   ******************************************************** */

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_VBIDE;
extern __declspec (package) const GUID IID_App;
extern __declspec (package) const GUID GUID_vbextFileTypes;
extern __declspec (package) const GUID IID_VBE;
extern __declspec (package) const GUID GUID_vbext_WindowType;
extern __declspec (package) const GUID GUID_vbext_WindowState;
extern __declspec (package) const GUID IID_WINDOW;
extern __declspec (package) const GUID IID__Windoz;
extern __declspec (package) const GUID CLSID_Windows;
extern __declspec (package) const GUID IID__LinkedWindows;
extern __declspec (package) const GUID CLSID_LinkedWindows;
extern __declspec (package) const GUID IID_Events;
extern __declspec (package) const GUID IID__VBProjectsEvents;
extern __declspec (package) const GUID DIID__dispVBProjectsEvents;
extern __declspec (package) const GUID IID__VBComponentsEvents;
extern __declspec (package) const GUID DIID__dispVBComponentsEvents;
extern __declspec (package) const GUID IID__ReferencesEvents;
extern __declspec (package) const GUID DIID__dispReferencesEvents;
extern __declspec (package) const GUID CLSID_ReferencesEvents;
extern __declspec (package) const GUID IID__CommandBarControlEvents;
extern __declspec (package) const GUID DIID__dispCommandBarControlEvents;
extern __declspec (package) const GUID CLSID_CommandBarEvents;
extern __declspec (package) const GUID IID__ProjectTemplate;
extern __declspec (package) const GUID CLSID_ProjectTemplate;
extern __declspec (package) const GUID GUID_vbext_ProjectProtection;
extern __declspec (package) const GUID GUID_vbext_VBAMode;
extern __declspec (package) const GUID IID__VBProject;
extern __declspec (package) const GUID CLSID_VBProject;
extern __declspec (package) const GUID IID__VBProjects;
extern __declspec (package) const GUID CLSID_VBProjects;
extern __declspec (package) const GUID IID_SelectedComponents;
extern __declspec (package) const GUID GUID_vbext_ComponentType;
extern __declspec (package) const GUID IID__Components;
extern __declspec (package) const GUID CLSID_Components;
extern __declspec (package) const GUID IID__VBComponents;
extern __declspec (package) const GUID CLSID_VBComponents;
extern __declspec (package) const GUID IID__Component;
extern __declspec (package) const GUID CLSID_Component;
extern __declspec (package) const GUID IID__VBComponent;
extern __declspec (package) const GUID CLSID_VBComponent;
extern __declspec (package) const GUID IID_Property;
extern __declspec (package) const GUID IID__Properties;
extern __declspec (package) const GUID CLSID_Properties;
extern __declspec (package) const GUID GUID_vbext_ProcKind;
extern __declspec (package) const GUID IID__CodeModule;
extern __declspec (package) const GUID CLSID_CodeModule;
extern __declspec (package) const GUID IID__CodePanes;
extern __declspec (package) const GUID CLSID_CodePanes;
extern __declspec (package) const GUID GUID_vbext_CodePaneview;
extern __declspec (package) const GUID IID__CodePane;
extern __declspec (package) const GUID CLSID_CodePane;
extern __declspec (package) const GUID IID__References;
extern __declspec (package) const GUID GUID_vbext_RefKind;
extern __declspec (package) const GUID IID_Reference;
extern __declspec (package) const GUID DIID__dispReferences_Events;
extern __declspec (package) const GUID CLSID_References;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      vbextFileTypes;
enum      vbext_WindowType;
enum      vbext_WindowState;
enum      vbext_ProjectProtection;
enum      vbext_VBAMode;
enum      vbext_ComponentType;
enum      vbext_ProcKind;
enum      vbext_CodePaneview;
enum      vbext_RefKind;
interface DECLSPEC_UUID("{0002E158-0000-0000-C000-000000000046}") App;
typedef TComInterface<App, &IID_App> AppPtr;

interface DECLSPEC_UUID("{0002E166-0000-0000-C000-000000000046}") VBE;
typedef TComInterface<VBE, &IID_VBE> VBEPtr;

interface DECLSPEC_UUID("{0002E16B-0000-0000-C000-000000000046}") WINDOW;
typedef TComInterface<WINDOW, &IID_WINDOW> WINDOWPtr;

interface DECLSPEC_UUID("{0002E16A-0000-0000-C000-000000000046}") _Windoz;
typedef TComInterface<_Windoz, &IID__Windoz> _WindozPtr;

interface DECLSPEC_UUID("{0002E16C-0000-0000-C000-000000000046}") _LinkedWindows;
typedef TComInterface<_LinkedWindows, &IID__LinkedWindows> _LinkedWindowsPtr;

interface DECLSPEC_UUID("{0002E167-0000-0000-C000-000000000046}") Events;
typedef TComInterface<Events, &IID_Events> EventsPtr;

interface DECLSPEC_UUID("{0002E113-0000-0000-C000-000000000046}") _VBProjectsEvents;
typedef TComInterface<_VBProjectsEvents, &IID__VBProjectsEvents> _VBProjectsEventsPtr;

interface DECLSPEC_UUID("{0002E103-0000-0000-C000-000000000046}") _dispVBProjectsEvents;
typedef TComInterface<_dispVBProjectsEvents, &DIID__dispVBProjectsEvents> _dispVBProjectsEventsPtr;

interface DECLSPEC_UUID("{0002E115-0000-0000-C000-000000000046}") _VBComponentsEvents;
typedef TComInterface<_VBComponentsEvents, &IID__VBComponentsEvents> _VBComponentsEventsPtr;

interface DECLSPEC_UUID("{0002E116-0000-0000-C000-000000000046}") _dispVBComponentsEvents;
typedef TComInterface<_dispVBComponentsEvents, &DIID__dispVBComponentsEvents> _dispVBComponentsEventsPtr;

interface DECLSPEC_UUID("{0002E11A-0000-0000-C000-000000000046}") _ReferencesEvents;
typedef TComInterface<_ReferencesEvents, &IID__ReferencesEvents> _ReferencesEventsPtr;

interface DECLSPEC_UUID("{0002E118-0000-0000-C000-000000000046}") _dispReferencesEvents;
typedef TComInterface<_dispReferencesEvents, &DIID__dispReferencesEvents> _dispReferencesEventsPtr;

interface DECLSPEC_UUID("{0002E130-0000-0000-C000-000000000046}") _CommandBarControlEvents;
typedef TComInterface<_CommandBarControlEvents, &IID__CommandBarControlEvents> _CommandBarControlEventsPtr;

interface DECLSPEC_UUID("{0002E131-0000-0000-C000-000000000046}") _dispCommandBarControlEvents;
typedef TComInterface<_dispCommandBarControlEvents, &DIID__dispCommandBarControlEvents> _dispCommandBarControlEventsPtr;

interface DECLSPEC_UUID("{0002E159-0000-0000-C000-000000000046}") _ProjectTemplate;
typedef TComInterface<_ProjectTemplate, &IID__ProjectTemplate> _ProjectTemplatePtr;

interface DECLSPEC_UUID("{0002E160-0000-0000-C000-000000000046}") _VBProject;
typedef TComInterface<_VBProject, &IID__VBProject> _VBProjectPtr;

interface DECLSPEC_UUID("{0002E165-0000-0000-C000-000000000046}") _VBProjects;
typedef TComInterface<_VBProjects, &IID__VBProjects> _VBProjectsPtr;

interface DECLSPEC_UUID("{BE39F3D4-1B13-11D0-887F-00A0C90F2744}") SelectedComponents;
typedef TComInterface<SelectedComponents, &IID_SelectedComponents> SelectedComponentsPtr;

interface DECLSPEC_UUID("{0002E161-0000-0000-C000-000000000046}") _Components;
typedef TComInterface<_Components, &IID__Components> _ComponentsPtr;

interface DECLSPEC_UUID("{0002E162-0000-0000-C000-000000000046}") _VBComponents;
typedef TComInterface<_VBComponents, &IID__VBComponents> _VBComponentsPtr;

interface DECLSPEC_UUID("{0002E163-0000-0000-C000-000000000046}") _Component;
typedef TComInterface<_Component, &IID__Component> _ComponentPtr;

interface DECLSPEC_UUID("{0002E164-0000-0000-C000-000000000046}") _VBComponent;
typedef TComInterface<_VBComponent, &IID__VBComponent> _VBComponentPtr;

interface DECLSPEC_UUID("{0002E18C-0000-0000-C000-000000000046}") Property;
typedef TComInterface<Property, &IID_Property> PropertyPtr;

interface DECLSPEC_UUID("{0002E188-0000-0000-C000-000000000046}") _Properties;
typedef TComInterface<_Properties, &IID__Properties> _PropertiesPtr;

interface DECLSPEC_UUID("{0002E16E-0000-0000-C000-000000000046}") _CodeModule;
typedef TComInterface<_CodeModule, &IID__CodeModule> _CodeModulePtr;

interface DECLSPEC_UUID("{0002E172-0000-0000-C000-000000000046}") _CodePanes;
typedef TComInterface<_CodePanes, &IID__CodePanes> _CodePanesPtr;

interface DECLSPEC_UUID("{0002E176-0000-0000-C000-000000000046}") _CodePane;
typedef TComInterface<_CodePane, &IID__CodePane> _CodePanePtr;

interface DECLSPEC_UUID("{0002E17A-0000-0000-C000-000000000046}") _References;
typedef TComInterface<_References, &IID__References> _ReferencesPtr;

interface DECLSPEC_UUID("{0002E17E-0000-0000-C000-000000000046}") Reference;
typedef TComInterface<Reference, &IID_Reference> ReferencePtr;

interface DECLSPEC_UUID("{CDDE3804-2064-11CF-867F-00AA005FF34A}") _dispReferences_Events;
typedef TComInterface<_dispReferences_Events, &DIID__dispReferences_Events> _dispReferences_EventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _Windoz Windows;
typedef _WindozPtr WindowsPtr;
typedef _LinkedWindows LinkedWindows;
typedef _LinkedWindowsPtr LinkedWindowsPtr;
typedef _ReferencesEvents ReferencesEvents;
typedef _ReferencesEventsPtr ReferencesEventsPtr;
typedef _CommandBarControlEvents CommandBarEvents;
typedef _CommandBarControlEventsPtr CommandBarEventsPtr;
typedef _ProjectTemplate ProjectTemplate;
typedef _ProjectTemplatePtr ProjectTemplatePtr;
typedef _VBProject VBProject;
typedef _VBProjectPtr VBProjectPtr;
typedef _VBProjects VBProjects;
typedef _VBProjectsPtr VBProjectsPtr;
typedef _Components Components;
typedef _ComponentsPtr ComponentsPtr;
typedef _VBComponents VBComponents;
typedef _VBComponentsPtr VBComponentsPtr;
typedef _Component Component;
typedef _ComponentPtr ComponentPtr;
typedef _VBComponent VBComponent;
typedef _VBComponentPtr VBComponentPtr;
typedef _Properties Properties;
typedef _PropertiesPtr PropertiesPtr;
typedef _CodeModule CodeModule;
typedef _CodeModulePtr CodeModulePtr;
typedef _CodePanes CodePanes;
typedef _CodePanesPtr CodePanesPtr;
typedef _CodePane CodePane;
typedef _CodePanePtr CodePanePtr;
typedef _References References;
typedef _ReferencesPtr ReferencesPtr;

#define LIBID_OF_Windows (&LIBID_VBIDE)
#define LIBID_OF_LinkedWindows (&LIBID_VBIDE)
#define LIBID_OF_ReferencesEvents (&LIBID_VBIDE)
#define LIBID_OF_CommandBarEvents (&LIBID_VBIDE)
#define LIBID_OF_ProjectTemplate (&LIBID_VBIDE)
#define LIBID_OF_VBProject (&LIBID_VBIDE)
#define LIBID_OF_VBProjects (&LIBID_VBIDE)
#define LIBID_OF_Components (&LIBID_VBIDE)
#define LIBID_OF_VBComponents (&LIBID_VBIDE)
#define LIBID_OF_Component (&LIBID_VBIDE)
#define LIBID_OF_VBComponent (&LIBID_VBIDE)
#define LIBID_OF_Properties (&LIBID_VBIDE)
#define LIBID_OF_CodeModule (&LIBID_VBIDE)
#define LIBID_OF_CodePanes (&LIBID_VBIDE)
#define LIBID_OF_CodePane (&LIBID_VBIDE)
#define LIBID_OF_References (&LIBID_VBIDE)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum vbextFileTypes
{
  vbextFileTypeForm = 0, 
  vbextFileTypeModule = 1, 
  vbextFileTypeClass = 2, 
  vbextFileTypeProject = 3, 
  vbextFileTypeExe = 4, 
  vbextFileTypeFrx = 5, 
  vbextFileTypeRes = 6, 
  vbextFileTypeUserControl = 7, 
  vbextFileTypePropertyPage = 8, 
  vbextFileTypeDocObject = 9, 
  vbextFileTypeBinary = 10, 
  vbextFileTypeGroupProject = 11, 
  vbextFileTypeDesigners = 12
} vbextFileTypes;

typedef enum vbext_WindowType
{
  vbext_wt_CodeWindow = 0, 
  vbext_wt_Designer = 1, 
  vbext_wt_Browser = 2, 
  vbext_wt_Watch = 3, 
  vbext_wt_Locals = 4, 
  vbext_wt_Immediate = 5, 
  vbext_wt_ProjectWindow = 6, 
  vbext_wt_PropertyWindow = 7, 
  vbext_wt_Find = 8, 
  vbext_wt_FindReplace = 9, 
  vbext_wt_LinkedWindowFrame = 11, 
  vbext_wt_MainWindow = 12, 
  vbext_wt_ToolWindow = 15
} vbext_WindowType;

typedef enum vbext_WindowState
{
  vbext_ws_Normal = 0, 
  vbext_ws_Minimize = 1, 
  vbext_ws_Maximize = 2
} vbext_WindowState;

typedef enum vbext_ProjectProtection
{
  vbext_pp_none = 0, 
  vbext_pp_locked = 1
} vbext_ProjectProtection;

typedef enum vbext_VBAMode
{
  vbext_vm_Run = 0, 
  vbext_vm_Break = 1, 
  vbext_vm_Design = 2
} vbext_VBAMode;

typedef enum vbext_ComponentType
{
  vbext_ct_StdModule = 1, 
  vbext_ct_ClassModule = 2, 
  vbext_ct_MSForm = 3, 
  vbext_ct_Document = 100
} vbext_ComponentType;

typedef enum vbext_ProcKind
{
  vbext_pk_Proc = 0, 
  vbext_pk_Let = 1, 
  vbext_pk_Set = 2, 
  vbext_pk_Get = 3
} vbext_ProcKind;

typedef enum vbext_CodePaneview
{
  vbext_cv_ProcedureView = 0, 
  vbext_cv_FullModuleView = 1
} vbext_CodePaneview;

typedef enum vbext_RefKind
{
  vbext_rk_TypeLib = 0, 
  vbext_rk_Project = 1
} vbext_RefKind;

// *********************************************************************//
// Interface: App
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E158-0000-0000-C000-000000000046}
// *********************************************************************//
interface App  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* lpbstrReturn/*[out,retval]*/) = 0; // [100]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Version(void)
  {
    BSTR lpbstrReturn = 0;
    OLECHECK(this->get_Version((BSTR*)&lpbstrReturn));
    return lpbstrReturn;
  }


  __property   BSTR            Version = {read = get_Version};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: VBE
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E166-0000-0000-C000-000000000046}
// *********************************************************************//
interface VBE  : public Vbide_97::App
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_VBProjects(Vbide_97::VBProjects** lppptReturn/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_CommandBars(Office_97::CommandBars** ppcbs/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_CodePanes(Vbide_97::CodePanes** ppCodePanes/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_Windows(Vbide_97::Windows** ppwnsVBWindows/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Events(Vbide_97::Events** ppevtEvents/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveVBProject(Vbide_97::VBProject** lppptReturn/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE _set_ActiveVBProject(Vbide_97::VBProject* lppptReturn/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_SelectedVBComponent(Vbide_97::VBComponent** lppscReturn/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_MainWindow(Vbide_97::WINDOW** ppwin/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWindow(Vbide_97::WINDOW** ppwinActive/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveCodePane(Vbide_97::CodePane** ppCodePane/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE _set_ActiveCodePane(Vbide_97::CodePane* ppCodePane/*[in]*/) = 0; // [206]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::VBProjects* __fastcall get_VBProjects(void)
  {
    Vbide_97::VBProjects* lppptReturn;
    OLECHECK(this->get_VBProjects((Vbide_97::VBProjects**)&lppptReturn));
    return lppptReturn;
  }

  Office_97::CommandBars* __fastcall get_CommandBars(void)
  {
    Office_97::CommandBars* ppcbs;
    OLECHECK(this->get_CommandBars((Office_97::CommandBars**)&ppcbs));
    return ppcbs;
  }

  Vbide_97::CodePanes* __fastcall get_CodePanes(void)
  {
    Vbide_97::CodePanes* ppCodePanes;
    OLECHECK(this->get_CodePanes((Vbide_97::CodePanes**)&ppCodePanes));
    return ppCodePanes;
  }

  Vbide_97::Windows* __fastcall get_Windows(void)
  {
    Vbide_97::Windows* ppwnsVBWindows;
    OLECHECK(this->get_Windows((Vbide_97::Windows**)&ppwnsVBWindows));
    return ppwnsVBWindows;
  }

  Vbide_97::Events* __fastcall get_Events(void)
  {
    Vbide_97::Events* ppevtEvents;
    OLECHECK(this->get_Events((Vbide_97::Events**)&ppevtEvents));
    return ppevtEvents;
  }

  Vbide_97::VBProject* __fastcall get_ActiveVBProject(void)
  {
    Vbide_97::VBProject* lppptReturn;
    OLECHECK(this->get_ActiveVBProject((Vbide_97::VBProject**)&lppptReturn));
    return lppptReturn;
  }

  Vbide_97::VBComponent* __fastcall get_SelectedVBComponent(void)
  {
    Vbide_97::VBComponent* lppscReturn;
    OLECHECK(this->get_SelectedVBComponent((Vbide_97::VBComponent**)&lppscReturn));
    return lppscReturn;
  }

  Vbide_97::WINDOW* __fastcall get_MainWindow(void)
  {
    Vbide_97::WINDOW* ppwin;
    OLECHECK(this->get_MainWindow((Vbide_97::WINDOW**)&ppwin));
    return ppwin;
  }

  Vbide_97::WINDOW* __fastcall get_ActiveWindow(void)
  {
    Vbide_97::WINDOW* ppwinActive;
    OLECHECK(this->get_ActiveWindow((Vbide_97::WINDOW**)&ppwinActive));
    return ppwinActive;
  }

  Vbide_97::CodePane* __fastcall get_ActiveCodePane(void)
  {
    Vbide_97::CodePane* ppCodePane;
    OLECHECK(this->get_ActiveCodePane((Vbide_97::CodePane**)&ppCodePane));
    return ppCodePane;
  }


  __property   Vbide_97::VBProjects* VBProjects = {read = get_VBProjects};
  __property   Office_97::CommandBars* CommandBars = {read = get_CommandBars};
  __property   Vbide_97::CodePanes* CodePanes = {read = get_CodePanes};
  __property   Vbide_97::Windows* Windows = {read = get_Windows};
  __property   Vbide_97::Events* Events = {read = get_Events};
  __property   Vbide_97::VBProject* ActiveVBProject = {read = get_ActiveVBProject, write = _set_ActiveVBProject};
  __property   Vbide_97::VBComponent* SelectedVBComponent = {read = get_SelectedVBComponent};
  __property   Vbide_97::WINDOW* MainWindow = {read = get_MainWindow};
  __property   Vbide_97::WINDOW* ActiveWindow = {read = get_ActiveWindow};
  __property   Vbide_97::CodePane* ActiveCodePane = {read = get_ActiveCodePane, write = _set_ActiveCodePane};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WINDOW
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E16B-0000-0000-C000-000000000046}
// *********************************************************************//
interface WINDOW  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Collection(Vbide_97::Windows** lppaReturn/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [99]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pbstrTitle/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pfVisible/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pfVisible/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* plLeft/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_Left(long plLeft/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* plTop/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_Top(long plTop/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Width(long* plWidth/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_Width(long plWidth/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Height(long* plHeight/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_Height(long plHeight/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_WindowState(Vbide_97::vbext_WindowState* plWindowState/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_WindowState(Vbide_97::vbext_WindowState plWindowState/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Vbide_97::vbext_WindowType* pKind/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE SetKind(Vbide_97::vbext_WindowType eKind/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_LinkedWindows(Vbide_97::LinkedWindows** ppwnsCollection/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_LinkedWindowFrame(Vbide_97::WINDOW** ppwinFrame/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE Detach(void) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE Attach(long lWindowHandle/*[in]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_HWnd(long* plWindowHandle/*[out,retval]*/) = 0; // [120]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::Windows* __fastcall get_Collection(void)
  {
    Vbide_97::Windows* lppaReturn;
    OLECHECK(this->get_Collection((Vbide_97::Windows**)&lppaReturn));
    return lppaReturn;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pbstrTitle = 0;
    OLECHECK(this->get_Caption((BSTR*)&pbstrTitle));
    return pbstrTitle;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pfVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pfVisible));
    return pfVisible;
  }

  long __fastcall get_Left(void)
  {
    long plLeft;
    OLECHECK(this->get_Left((long*)&plLeft));
    return plLeft;
  }

  long __fastcall get_Top(void)
  {
    long plTop;
    OLECHECK(this->get_Top((long*)&plTop));
    return plTop;
  }

  long __fastcall get_Width(void)
  {
    long plWidth;
    OLECHECK(this->get_Width((long*)&plWidth));
    return plWidth;
  }

  long __fastcall get_Height(void)
  {
    long plHeight;
    OLECHECK(this->get_Height((long*)&plHeight));
    return plHeight;
  }

  Vbide_97::vbext_WindowState __fastcall get_WindowState(void)
  {
    Vbide_97::vbext_WindowState plWindowState;
    OLECHECK(this->get_WindowState((Vbide_97::vbext_WindowState*)&plWindowState));
    return plWindowState;
  }

  Vbide_97::vbext_WindowType __fastcall get_Type(void)
  {
    Vbide_97::vbext_WindowType pKind;
    OLECHECK(this->get_Type((Vbide_97::vbext_WindowType*)&pKind));
    return pKind;
  }

  Vbide_97::LinkedWindows* __fastcall get_LinkedWindows(void)
  {
    Vbide_97::LinkedWindows* ppwnsCollection;
    OLECHECK(this->get_LinkedWindows((Vbide_97::LinkedWindows**)&ppwnsCollection));
    return ppwnsCollection;
  }

  Vbide_97::WINDOW* __fastcall get_LinkedWindowFrame(void)
  {
    Vbide_97::WINDOW* ppwinFrame;
    OLECHECK(this->get_LinkedWindowFrame((Vbide_97::WINDOW**)&ppwinFrame));
    return ppwinFrame;
  }

  long __fastcall get_HWnd(void)
  {
    long plWindowHandle;
    OLECHECK(this->get_HWnd((long*)&plWindowHandle));
    return plWindowHandle;
  }


  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::Windows* Collection = {read = get_Collection};
  __property   BSTR            Caption = {read = get_Caption};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   Vbide_97::vbext_WindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Vbide_97::vbext_WindowType Type = {read = get_Type};
  __property   Vbide_97::LinkedWindows* LinkedWindows = {read = get_LinkedWindows};
  __property   Vbide_97::WINDOW* LinkedWindowFrame = {read = get_LinkedWindowFrame};
  __property   long            HWnd = {read = get_HWnd};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Windoz
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E16A-0000-0000-C000-000000000046}
// *********************************************************************//
interface _Windoz  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::App** lppptReturn/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT index/*[in]*/, 
                                         Vbide_97::WINDOW** lppcReturn/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* lplReturn/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::App* __fastcall get_Parent(void)
  {
    Vbide_97::App* lppptReturn;
    OLECHECK(this->get_Parent((Vbide_97::App**)&lppptReturn));
    return lppptReturn;
  }

  Vbide_97::WINDOW* __fastcall Item(VARIANT index/*[in]*/)
  {
    Vbide_97::WINDOW* lppcReturn;
    OLECHECK(this->Item(index, (Vbide_97::WINDOW**)&lppcReturn));
    return lppcReturn;
  }

  long __fastcall get_Count(void)
  {
    long lplReturn;
    OLECHECK(this->get_Count((long*)&lplReturn));
    return lplReturn;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN lppiuReturn;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
    return lppiuReturn;
  }


  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::App*  Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _LinkedWindows
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E16C-0000-0000-C000-000000000046}
// *********************************************************************//
interface _LinkedWindows  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::WINDOW** ppptReturn/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT index/*[in]*/, 
                                         Vbide_97::WINDOW** lppcReturn/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* lplReturn/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Remove(Vbide_97::WINDOW* Window/*[in]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE Add(Vbide_97::WINDOW* Window/*[in]*/) = 0; // [203]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::WINDOW* __fastcall get_Parent(void)
  {
    Vbide_97::WINDOW* ppptReturn;
    OLECHECK(this->get_Parent((Vbide_97::WINDOW**)&ppptReturn));
    return ppptReturn;
  }

  Vbide_97::WINDOW* __fastcall Item(VARIANT index/*[in]*/)
  {
    Vbide_97::WINDOW* lppcReturn;
    OLECHECK(this->Item(index, (Vbide_97::WINDOW**)&lppcReturn));
    return lppcReturn;
  }

  long __fastcall get_Count(void)
  {
    long lplReturn;
    OLECHECK(this->get_Count((long*)&lplReturn));
    return lplReturn;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN lppiuReturn;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
    return lppiuReturn;
  }


  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::WINDOW* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Events
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E167-0000-0000-C000-000000000046}
// *********************************************************************//
interface Events  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ReferencesEvents(Vbide_97::VBProject* VBProject/*[in]*/, 
                                                         Vbide_97::ReferencesEvents** prceNew/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_CommandBarEvents(LPDISPATCH CommandBarControl/*[in]*/, 
                                                         Vbide_97::CommandBarEvents** prceNew/*[out,retval]*/) = 0; // [205]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::ReferencesEvents* __fastcall get_ReferencesEvents(Vbide_97::VBProject* VBProject/*[in]*/)
  {
    Vbide_97::ReferencesEvents* prceNew;
    OLECHECK(this->get_ReferencesEvents(VBProject, (Vbide_97::ReferencesEvents**)&prceNew));
    return prceNew;
  }

  Vbide_97::CommandBarEvents* __fastcall get_CommandBarEvents(LPDISPATCH CommandBarControl/*[in]*/)
  {
    Vbide_97::CommandBarEvents* prceNew;
    OLECHECK(this->get_CommandBarEvents(CommandBarControl, (Vbide_97::CommandBarEvents**)&prceNew));
    return prceNew;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _VBProjectsEvents
// Flags:     (256) OleAutomation
// GUID:      {0002E113-0000-0000-C000-000000000046}
// *********************************************************************//
interface _VBProjectsEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _dispVBProjectsEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E103-0000-0000-C000-000000000046}
// *********************************************************************//
interface _dispVBProjectsEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Vbide_97::VBProject* VBProject/*[in]*/)
  {
    _TDispID _dispid(/* ItemAdded */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::VBProject*)VBProject /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Vbide_97::VBProject* VBProject/*[in]*/)
  {
    _TDispID _dispid(/* ItemRemoved */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::VBProject*)VBProject /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemRenamed(Vbide_97::VBProject* VBProject/*[in]*/, 
                                              BSTR OldName/*[in]*/)
  {
    _TDispID _dispid(/* ItemRenamed */ DISPID(3));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::VBProject*)VBProject /*[VT_USERDEFINED:1]*/;
    _args[2] = OldName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemActivated(Vbide_97::VBProject* VBProject/*[in]*/)
  {
    _TDispID _dispid(/* ItemActivated */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::VBProject*)VBProject /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: _VBComponentsEvents
// Flags:     (256) OleAutomation
// GUID:      {0002E115-0000-0000-C000-000000000046}
// *********************************************************************//
interface _VBComponentsEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _dispVBComponentsEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E116-0000-0000-C000-000000000046}
// *********************************************************************//
interface _dispVBComponentsEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Vbide_97::VBComponent* VBComponent/*[in]*/)
  {
    _TDispID _dispid(/* ItemAdded */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Vbide_97::VBComponent* VBComponent/*[in]*/)
  {
    _TDispID _dispid(/* ItemRemoved */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemRenamed(Vbide_97::VBComponent* VBComponent/*[in]*/, 
                                              BSTR OldName/*[in]*/)
  {
    _TDispID _dispid(/* ItemRenamed */ DISPID(3));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
    _args[2] = OldName /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemSelected(Vbide_97::VBComponent* VBComponent/*[in]*/)
  {
    _TDispID _dispid(/* ItemSelected */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemActivated(Vbide_97::VBComponent* VBComponent/*[in]*/)
  {
    _TDispID _dispid(/* ItemActivated */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemReloaded(Vbide_97::VBComponent* VBComponent/*[in]*/)
  {
    _TDispID _dispid(/* ItemReloaded */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: _ReferencesEvents
// Flags:     (256) OleAutomation
// GUID:      {0002E11A-0000-0000-C000-000000000046}
// *********************************************************************//
interface _ReferencesEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _dispReferencesEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E118-0000-0000-C000-000000000046}
// *********************************************************************//
interface _dispReferencesEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Vbide_97::Reference* Reference/*[in]*/)
  {
    _TDispID _dispid(/* ItemAdded */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Vbide_97::Reference* Reference/*[in]*/)
  {
    _TDispID _dispid(/* ItemRemoved */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: _CommandBarControlEvents
// Flags:     (256) OleAutomation
// GUID:      {0002E130-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CommandBarControlEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _dispCommandBarControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E131-0000-0000-C000-000000000046}
// *********************************************************************//
interface _dispCommandBarControlEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall Click(LPDISPATCH CommandBarControl/*[in]*/, 
                                        VARIANT_BOOL* handled/*[in]*/, 
                                        VARIANT_BOOL* CancelDefault/*[in]*/)
  {
    _TDispID _dispid(/* Click */ DISPID(1));
    TAutoArgs<3> _args;
    _args[1] = CommandBarControl /*[VT_DISPATCH:0]*/;
    _args[2] = handled /*[VT_BOOL:1]*/;
    _args[3] = CancelDefault /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: _ProjectTemplate
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E159-0000-0000-C000-000000000046}
// *********************************************************************//
interface _ProjectTemplate  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::App** lppaReturn/*[out,retval]*/) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::App* __fastcall get_Application(void)
  {
    Vbide_97::App* lppaReturn;
    OLECHECK(this->get_Application((Vbide_97::App**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::App* __fastcall get_Parent(void)
  {
    Vbide_97::App* lppaReturn;
    OLECHECK(this->get_Parent((Vbide_97::App**)&lppaReturn));
    return lppaReturn;
  }


  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::App*  Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _VBProject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E160-0000-0000-C000-000000000046}
// *********************************************************************//
interface _VBProject  : public Vbide_97::_ProjectTemplate
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_HelpFile(BSTR* lpbstrHelpFile/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE set_HelpFile(BSTR lpbstrHelpFile/*[in]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextID(long* lpdwContextID/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextID(long lpdwContextID/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* lpbstrDescription/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR lpbstrDescription/*[in]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_Mode(Vbide_97::vbext_VBAMode* lpVbaMode/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_References(Vbide_97::References** lppReferences/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* lpbstrName/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR lpbstrName/*[in]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_Collection(Vbide_97::VBProjects** lppaReturn/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_Protection(Vbide_97::vbext_ProjectProtection* lpProtection/*[out,retval]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE get_Saved(VARIANT_BOOL* lpfReturn/*[out,retval]*/) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE get_VBComponents(Vbide_97::VBComponents** lppcReturn/*[out,retval]*/) = 0; // [135]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_HelpFile(void)
  {
    BSTR lpbstrHelpFile = 0;
    OLECHECK(this->get_HelpFile((BSTR*)&lpbstrHelpFile));
    return lpbstrHelpFile;
  }

  long __fastcall get_HelpContextID(void)
  {
    long lpdwContextID;
    OLECHECK(this->get_HelpContextID((long*)&lpdwContextID));
    return lpdwContextID;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR lpbstrDescription = 0;
    OLECHECK(this->get_Description((BSTR*)&lpbstrDescription));
    return lpbstrDescription;
  }

  Vbide_97::vbext_VBAMode __fastcall get_Mode(void)
  {
    Vbide_97::vbext_VBAMode lpVbaMode;
    OLECHECK(this->get_Mode((Vbide_97::vbext_VBAMode*)&lpVbaMode));
    return lpVbaMode;
  }

  Vbide_97::References* __fastcall get_References(void)
  {
    Vbide_97::References* lppReferences;
    OLECHECK(this->get_References((Vbide_97::References**)&lppReferences));
    return lppReferences;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR lpbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&lpbstrName));
    return lpbstrName;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::VBProjects* __fastcall get_Collection(void)
  {
    Vbide_97::VBProjects* lppaReturn;
    OLECHECK(this->get_Collection((Vbide_97::VBProjects**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::vbext_ProjectProtection __fastcall get_Protection(void)
  {
    Vbide_97::vbext_ProjectProtection lpProtection;
    OLECHECK(this->get_Protection((Vbide_97::vbext_ProjectProtection*)&lpProtection));
    return lpProtection;
  }

  VARIANT_BOOL __fastcall get_Saved(void)
  {
    VARIANT_BOOL lpfReturn;
    OLECHECK(this->get_Saved((VARIANT_BOOL*)&lpfReturn));
    return lpfReturn;
  }

  Vbide_97::VBComponents* __fastcall get_VBComponents(void)
  {
    Vbide_97::VBComponents* lppcReturn;
    OLECHECK(this->get_VBComponents((Vbide_97::VBComponents**)&lppcReturn));
    return lppcReturn;
  }


  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   long            HelpContextID = {read = get_HelpContextID, write = set_HelpContextID};
  __property   BSTR            Description = {read = get_Description};
  __property   Vbide_97::vbext_VBAMode Mode = {read = get_Mode};
  __property   Vbide_97::References* References = {read = get_References};
  __property   BSTR            Name = {read = get_Name};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::VBProjects* Collection = {read = get_Collection};
  __property   Vbide_97::vbext_ProjectProtection Protection = {read = get_Protection};
  __property   VARIANT_BOOL    Saved = {read = get_Saved};
  __property   Vbide_97::VBComponents* VBComponents = {read = get_VBComponents};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _VBProjects
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E165-0000-0000-C000-000000000046}
// *********************************************************************//
interface _VBProjects  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT index/*[in]*/, 
                                         Vbide_97::VBProject** lppcReturn/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* lplReturn/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::VBProject* __fastcall Item(VARIANT index/*[in]*/)
  {
    Vbide_97::VBProject* lppcReturn;
    OLECHECK(this->Item(index, (Vbide_97::VBProject**)&lppcReturn));
    return lppcReturn;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::VBE* __fastcall get_Parent(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_Parent((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }

  long __fastcall get_Count(void)
  {
    long lplReturn;
    OLECHECK(this->get_Count((long*)&lplReturn));
    return lplReturn;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN lppiuReturn;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
    return lppiuReturn;
  }


  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::VBE*  Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SelectedComponents
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE39F3D4-1B13-11D0-887F-00A0C90F2744}
// *********************************************************************//
interface SelectedComponents  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Item(int index/*[in]*/, 
                                         Vbide_97::Component** lppcReturn/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* lplReturn/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::Component* __fastcall Item(int index/*[in]*/)
  {
    Vbide_97::Component* lppcReturn;
    OLECHECK(this->Item(index, (Vbide_97::Component**)&lppcReturn));
    return lppcReturn;
  }

  Vbide_97::App* __fastcall get_Application(void)
  {
    Vbide_97::App* lppaReturn;
    OLECHECK(this->get_Application((Vbide_97::App**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::VBProject* __fastcall get_Parent(void)
  {
    Vbide_97::VBProject* lppptReturn;
    OLECHECK(this->get_Parent((Vbide_97::VBProject**)&lppptReturn));
    return lppptReturn;
  }

  long __fastcall get_Count(void)
  {
    long lplReturn;
    OLECHECK(this->get_Count((long*)&lplReturn));
    return lplReturn;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN lppiuReturn;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
    return lppiuReturn;
  }


  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::VBProject* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Components
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E161-0000-0000-C000-000000000046}
// *********************************************************************//
interface _Components  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT index/*[in]*/, 
                                         Vbide_97::Component** lppcReturn/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* lplReturn/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Remove(Vbide_97::Component* Component/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/, 
                                        Vbide_97::Component** lppComponent/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE Import(BSTR FileName/*[in]*/, 
                                           Vbide_97::Component** lppComponent/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [20]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::Component* __fastcall Item(VARIANT index/*[in]*/)
  {
    Vbide_97::Component* lppcReturn;
    OLECHECK(this->Item(index, (Vbide_97::Component**)&lppcReturn));
    return lppcReturn;
  }

  Vbide_97::App* __fastcall get_Application(void)
  {
    Vbide_97::App* lppaReturn;
    OLECHECK(this->get_Application((Vbide_97::App**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::VBProject* __fastcall get_Parent(void)
  {
    Vbide_97::VBProject* lppptReturn;
    OLECHECK(this->get_Parent((Vbide_97::VBProject**)&lppptReturn));
    return lppptReturn;
  }

  long __fastcall get_Count(void)
  {
    long lplReturn;
    OLECHECK(this->get_Count((long*)&lplReturn));
    return lplReturn;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN lppiuReturn;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
    return lppiuReturn;
  }

  Vbide_97::Component* __fastcall Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/)
  {
    Vbide_97::Component* lppComponent;
    OLECHECK(this->Add(ComponentType, (Vbide_97::Component**)&lppComponent));
    return lppComponent;
  }

  Vbide_97::Component* __fastcall Import(BSTR FileName/*[in]*/)
  {
    Vbide_97::Component* lppComponent;
    OLECHECK(this->Import(FileName, (Vbide_97::Component**)&lppComponent));
    return lppComponent;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }


  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::VBProject* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _VBComponents
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E162-0000-0000-C000-000000000046}
// *********************************************************************//
interface _VBComponents  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT index/*[in]*/, 
                                         Vbide_97::VBComponent** lppcReturn/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* lplReturn/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Remove(Vbide_97::VBComponent* VBComponent/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/, 
                                        Vbide_97::VBComponent** lppComponent/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE Import(BSTR FileName/*[in]*/, 
                                           Vbide_97::VBComponent** lppComponent/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [20]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::VBComponent* __fastcall Item(VARIANT index/*[in]*/)
  {
    Vbide_97::VBComponent* lppcReturn;
    OLECHECK(this->Item(index, (Vbide_97::VBComponent**)&lppcReturn));
    return lppcReturn;
  }

  Vbide_97::VBProject* __fastcall get_Parent(void)
  {
    Vbide_97::VBProject* lppptReturn;
    OLECHECK(this->get_Parent((Vbide_97::VBProject**)&lppptReturn));
    return lppptReturn;
  }

  long __fastcall get_Count(void)
  {
    long lplReturn;
    OLECHECK(this->get_Count((long*)&lplReturn));
    return lplReturn;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN lppiuReturn;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
    return lppiuReturn;
  }

  Vbide_97::VBComponent* __fastcall Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/)
  {
    Vbide_97::VBComponent* lppComponent;
    OLECHECK(this->Add(ComponentType, (Vbide_97::VBComponent**)&lppComponent));
    return lppComponent;
  }

  Vbide_97::VBComponent* __fastcall Import(BSTR FileName/*[in]*/)
  {
    Vbide_97::VBComponent* lppComponent;
    OLECHECK(this->Import(FileName, (Vbide_97::VBComponent**)&lppComponent));
    return lppComponent;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }


  __property   Vbide_97::VBProject* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Component
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E163-0000-0000-C000-000000000046}
// *********************************************************************//
interface _Component  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::Components** lppcReturn/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_IsDirty(VARIANT_BOOL* lpfReturn/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_IsDirty(VARIANT_BOOL lpfReturn/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrReturn/*[out,retval]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstrReturn/*[in]*/) = 0; // [48]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::App* __fastcall get_Application(void)
  {
    Vbide_97::App* lppaReturn;
    OLECHECK(this->get_Application((Vbide_97::App**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::Components* __fastcall get_Parent(void)
  {
    Vbide_97::Components* lppcReturn;
    OLECHECK(this->get_Parent((Vbide_97::Components**)&lppcReturn));
    return lppcReturn;
  }

  VARIANT_BOOL __fastcall get_IsDirty(void)
  {
    VARIANT_BOOL lpfReturn;
    OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&lpfReturn));
    return lpfReturn;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrReturn = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrReturn));
    return pbstrReturn;
  }


  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::Components* Parent = {read = get_Parent};
  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   BSTR            Name = {read = get_Name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _VBComponent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E164-0000-0000-C000-000000000046}
// *********************************************************************//
interface _VBComponent  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Saved(VARIANT_BOOL* lpfReturn/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrReturn/*[out,retval]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstrReturn/*[in]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE get_Designer(LPDISPATCH* ppDispatch/*[out,retval]*/) = 0; // [49]
  virtual HRESULT STDMETHODCALLTYPE get_CodeModule(Vbide_97::CodeModule** ppVbaModule/*[out,retval]*/) = 0; // [50]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Vbide_97::vbext_ComponentType* pKind/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE Export(BSTR FileName/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_Collection(Vbide_97::VBComponents** lppcReturn/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_HasOpenDesigner(VARIANT_BOOL* lpfReturn/*[out,retval]*/) = 0; // [55]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Vbide_97::Properties** lpppReturn/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE DesignerWindow(Vbide_97::WINDOW** lppcReturn/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [60]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_Saved(void)
  {
    VARIANT_BOOL lpfReturn;
    OLECHECK(this->get_Saved((VARIANT_BOOL*)&lpfReturn));
    return lpfReturn;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrReturn = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrReturn));
    return pbstrReturn;
  }

  LPDISPATCH __fastcall get_Designer(void)
  {
    LPDISPATCH ppDispatch;
    OLECHECK(this->get_Designer((LPDISPATCH*)&ppDispatch));
    return ppDispatch;
  }

  Vbide_97::CodeModule* __fastcall get_CodeModule(void)
  {
    Vbide_97::CodeModule* ppVbaModule;
    OLECHECK(this->get_CodeModule((Vbide_97::CodeModule**)&ppVbaModule));
    return ppVbaModule;
  }

  Vbide_97::vbext_ComponentType __fastcall get_Type(void)
  {
    Vbide_97::vbext_ComponentType pKind;
    OLECHECK(this->get_Type((Vbide_97::vbext_ComponentType*)&pKind));
    return pKind;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }

  Vbide_97::VBComponents* __fastcall get_Collection(void)
  {
    Vbide_97::VBComponents* lppcReturn;
    OLECHECK(this->get_Collection((Vbide_97::VBComponents**)&lppcReturn));
    return lppcReturn;
  }

  VARIANT_BOOL __fastcall get_HasOpenDesigner(void)
  {
    VARIANT_BOOL lpfReturn;
    OLECHECK(this->get_HasOpenDesigner((VARIANT_BOOL*)&lpfReturn));
    return lpfReturn;
  }

  Vbide_97::Properties* __fastcall get_Properties(void)
  {
    Vbide_97::Properties* lpppReturn;
    OLECHECK(this->get_Properties((Vbide_97::Properties**)&lpppReturn));
    return lpppReturn;
  }

  Vbide_97::WINDOW* __fastcall DesignerWindow(void)
  {
    Vbide_97::WINDOW* lppcReturn;
    OLECHECK(this->DesignerWindow((Vbide_97::WINDOW**)&lppcReturn));
    return lppcReturn;
  }


  __property   VARIANT_BOOL    Saved = {read = get_Saved};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Designer = {read = get_Designer};
  __property   Vbide_97::CodeModule* CodeModule = {read = get_CodeModule};
  __property   Vbide_97::vbext_ComponentType Type = {read = get_Type};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::VBComponents* Collection = {read = get_Collection};
  __property   VARIANT_BOOL    HasOpenDesigner = {read = get_HasOpenDesigner};
  __property   Vbide_97::Properties* Properties = {read = get_Properties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Property
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E18C-0000-0000-C000-000000000046}
// *********************************************************************//
interface Property  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* lppvReturn/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT lppvReturn/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_IndexedValue(VARIANT Index1/*[in]*/, 
                                                     VARIANT Index2/*[in,opt]*/, 
                                                     VARIANT Index3/*[in,opt]*/, 
                                                     VARIANT Index4/*[in,opt]*/, 
                                                     VARIANT* lppvReturn/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_IndexedValue(VARIANT Index1/*[in]*/, 
                                                     VARIANT Index2/*[in,opt]*/, 
                                                     VARIANT Index3/*[in,opt]*/, 
                                                     VARIANT Index4/*[in,opt]*/, 
                                                     VARIANT lppvReturn/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_NumIndices(short* lpiRetVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Vbide_97::App** lpaReturn/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::Properties** lpppReturn/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* lpbstrReturn/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lpaReturn/*[out,retval]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE get_Collection(Vbide_97::Properties** lpppReturn/*[out,retval]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE get_Object(LPUNKNOWN* lppunk/*[out,retval]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE _set_Object(LPUNKNOWN lppunk/*[in]*/) = 0; // [45]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Value(void)
  {
    VARIANT lppvReturn;
    OLECHECK(this->get_Value((VARIANT*)&lppvReturn));
    return lppvReturn;
  }

  VARIANT __fastcall get_IndexedValue(VARIANT Index1/*[in]*/, VARIANT Index2/*[in,opt]*/= TNoParam(), 
                                      VARIANT Index3/*[in,opt]*/= TNoParam(), 
                                      VARIANT Index4/*[in,opt]*/= TNoParam())
  {
    VARIANT lppvReturn;
    OLECHECK(this->get_IndexedValue(Index1, Index2, Index3, Index4, (VARIANT*)&lppvReturn));
    return lppvReturn;
  }

  short __fastcall get_NumIndices(void)
  {
    short lpiRetVal;
    OLECHECK(this->get_NumIndices((short*)&lpiRetVal));
    return lpiRetVal;
  }

  Vbide_97::App* __fastcall get_Application(void)
  {
    Vbide_97::App* lpaReturn;
    OLECHECK(this->get_Application((Vbide_97::App**)&lpaReturn));
    return lpaReturn;
  }

  Vbide_97::Properties* __fastcall get_Parent(void)
  {
    Vbide_97::Properties* lpppReturn;
    OLECHECK(this->get_Parent((Vbide_97::Properties**)&lpppReturn));
    return lpppReturn;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR lpbstrReturn = 0;
    OLECHECK(this->get_Name((BSTR*)&lpbstrReturn));
    return lpbstrReturn;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lpaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lpaReturn));
    return lpaReturn;
  }

  Vbide_97::Properties* __fastcall get_Collection(void)
  {
    Vbide_97::Properties* lpppReturn;
    OLECHECK(this->get_Collection((Vbide_97::Properties**)&lpppReturn));
    return lpppReturn;
  }

  LPUNKNOWN __fastcall get_Object(void)
  {
    LPUNKNOWN lppunk;
    OLECHECK(this->get_Object((LPUNKNOWN*)&lppunk));
    return lppunk;
  }


  __property   short           NumIndices = {read = get_NumIndices};
  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::Properties* Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::Properties* Collection = {read = get_Collection};
  __property   LPUNKNOWN       Object = {read = get_Object, write = _set_Object};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Properties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E188-0000-0000-C000-000000000046}
// *********************************************************************//
interface _Properties  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT index/*[in]*/, 
                                         Vbide_97::Property** lplppReturn/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* lppidReturn/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* lplReturn/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [10]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::Property* __fastcall Item(VARIANT index/*[in]*/)
  {
    Vbide_97::Property* lplppReturn;
    OLECHECK(this->Item(index, (Vbide_97::Property**)&lplppReturn));
    return lplppReturn;
  }

  Vbide_97::App* __fastcall get_Application(void)
  {
    Vbide_97::App* lppaReturn;
    OLECHECK(this->get_Application((Vbide_97::App**)&lppaReturn));
    return lppaReturn;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH lppidReturn;
    OLECHECK(this->get_Parent((LPDISPATCH*)&lppidReturn));
    return lppidReturn;
  }

  long __fastcall get_Count(void)
  {
    long lplReturn;
    OLECHECK(this->get_Count((long*)&lplReturn));
    return lplReturn;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN lppiuReturn;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
    return lppiuReturn;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }


  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodeModule
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E16E-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CodeModule  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::VBComponent** retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstrName/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE AddFromString(BSTR String/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddFromFile(BSTR FileName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Lines(long StartLine/*[in]*/, long Count/*[in]*/, 
                                              BSTR* String/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CountOfLines(long* CountOfLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE InsertLines(long Line/*[in]*/, BSTR String/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DeleteLines(long StartLine/*[in]*/, long Count/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                                      Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                                      long* ProcStartLine/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                       Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                                       long* ProcCountLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                                     Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                                     long* ProcBodyLine/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcOfLine(long Line/*[in]*/, 
                                                   Vbide_97::vbext_ProcKind* ProcKind/*[out]*/, 
                                                   BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CountOfDeclarationLines(long* pDeclCountOfLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/, 
                                                    long* Line/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                         long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                                         long* EndColumn/*[in,out]*/, 
                                         VARIANT_BOOL WholeWord/*[in,def,opt]*/, 
                                         VARIANT_BOOL MatchCase/*[in,def,opt]*/, 
                                         VARIANT_BOOL PatternSearch/*[in,def,opt]*/, 
                                         VARIANT_BOOL* pfFound/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CodePane(Vbide_97::CodePane** CodePane/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::VBComponent* __fastcall get_Parent(void)
  {
    Vbide_97::VBComponent* retval;
    OLECHECK(this->get_Parent((Vbide_97::VBComponent**)&retval));
    return retval;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* retval;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&retval));
    return retval;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Lines(long StartLine/*[in]*/, long Count/*[in]*/)
  {
    BSTR String = 0;
    OLECHECK(this->get_Lines(StartLine, Count, (BSTR*)&String));
    return String;
  }

  long __fastcall get_CountOfLines(void)
  {
    long CountOfLines;
    OLECHECK(this->get_CountOfLines((long*)&CountOfLines));
    return CountOfLines;
  }

  long __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, Vbide_97::vbext_ProcKind ProcKind/*[in]*/)
  {
    long ProcStartLine;
    OLECHECK(this->get_ProcStartLine(ProcName, ProcKind, (long*)&ProcStartLine));
    return ProcStartLine;
  }

  long __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                     Vbide_97::vbext_ProcKind ProcKind/*[in]*/)
  {
    long ProcCountLines;
    OLECHECK(this->get_ProcCountLines(ProcName, ProcKind, (long*)&ProcCountLines));
    return ProcCountLines;
  }

  long __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, Vbide_97::vbext_ProcKind ProcKind/*[in]*/)
  {
    long ProcBodyLine;
    OLECHECK(this->get_ProcBodyLine(ProcName, ProcKind, (long*)&ProcBodyLine));
    return ProcBodyLine;
  }

  BSTR __fastcall get_ProcOfLine(long Line/*[in]*/, Vbide_97::vbext_ProcKind* ProcKind/*[out]*/)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_ProcOfLine(Line, ProcKind, (BSTR*)&pbstrName));
    return pbstrName;
  }

  long __fastcall get_CountOfDeclarationLines(void)
  {
    long pDeclCountOfLines;
    OLECHECK(this->get_CountOfDeclarationLines((long*)&pDeclCountOfLines));
    return pDeclCountOfLines;
  }

  long __fastcall CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/)
  {
    long Line;
    OLECHECK(this->CreateEventProc(EventName, ObjectName, (long*)&Line));
    return Line;
  }

  VARIANT_BOOL __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                               long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                               long* EndColumn/*[in,out]*/, VARIANT_BOOL WholeWord/*[in,def,opt]*/, 
                               VARIANT_BOOL MatchCase/*[in,def,opt]*/, 
                               VARIANT_BOOL PatternSearch/*[in,def,opt]*/)
  {
    VARIANT_BOOL pfFound;
    OLECHECK(this->Find(Target, StartLine, StartColumn, EndLine, EndColumn, WholeWord, MatchCase, 
                        PatternSearch, (VARIANT_BOOL*)&pfFound));
    return pfFound;
  }

  Vbide_97::CodePane* __fastcall get_CodePane(void)
  {
    Vbide_97::CodePane* CodePane;
    OLECHECK(this->get_CodePane((Vbide_97::CodePane**)&CodePane));
    return CodePane;
  }


  __property   Vbide_97::VBComponent* Parent = {read = get_Parent};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   BSTR            Name = {read = get_Name};
  __property   long            CountOfLines = {read = get_CountOfLines};
  __property   long            CountOfDeclarationLines = {read = get_CountOfDeclarationLines};
  __property   Vbide_97::CodePane* CodePane = {read = get_CodePane};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodePanes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E172-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CodePanes  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::VBE** retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT index/*[in]*/, 
                                         Vbide_97::CodePane** CodePane/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Current(Vbide_97::CodePane** CodePane/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Current(Vbide_97::CodePane* CodePane/*[in]*/) = 0; // [1610743813]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::VBE* __fastcall get_Parent(void)
  {
    Vbide_97::VBE* retval;
    OLECHECK(this->get_Parent((Vbide_97::VBE**)&retval));
    return retval;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* retval;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&retval));
    return retval;
  }

  Vbide_97::CodePane* __fastcall Item(VARIANT index/*[in]*/)
  {
    Vbide_97::CodePane* CodePane;
    OLECHECK(this->Item(index, (Vbide_97::CodePane**)&CodePane));
    return CodePane;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppenum;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppenum));
    return ppenum;
  }

  Vbide_97::CodePane* __fastcall get_Current(void)
  {
    Vbide_97::CodePane* CodePane;
    OLECHECK(this->get_Current((Vbide_97::CodePane**)&CodePane));
    return CodePane;
  }


  __property   Vbide_97::VBE*  Parent = {read = get_Parent};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::CodePane* Current = {read = get_Current, write = set_Current};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CodePane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E176-0000-0000-C000-000000000046}
// *********************************************************************//
interface _CodePane  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Collection(Vbide_97::CodePanes** retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Window(Vbide_97::WINDOW** retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetSelection(long* StartLine/*[out]*/, 
                                                 long* StartColumn/*[out]*/, long* EndLine/*[out]*/, 
                                                 long* EndColumn/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetSelection(long StartLine/*[in]*/, long StartColumn/*[in]*/, 
                                                 long EndLine/*[in]*/, long EndColumn/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TopLine(long* TopLine/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TopLine(long TopLine/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE get_CountOfVisibleLines(long* CountOfVisibleLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CodeModule(Vbide_97::CodeModule** CodeModule/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Show(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CodePaneView(Vbide_97::vbext_CodePaneview* pCodePaneview/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::CodePanes* __fastcall get_Collection(void)
  {
    Vbide_97::CodePanes* retval;
    OLECHECK(this->get_Collection((Vbide_97::CodePanes**)&retval));
    return retval;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* retval;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&retval));
    return retval;
  }

  Vbide_97::WINDOW* __fastcall get_Window(void)
  {
    Vbide_97::WINDOW* retval;
    OLECHECK(this->get_Window((Vbide_97::WINDOW**)&retval));
    return retval;
  }

  long __fastcall get_TopLine(void)
  {
    long TopLine;
    OLECHECK(this->get_TopLine((long*)&TopLine));
    return TopLine;
  }

  long __fastcall get_CountOfVisibleLines(void)
  {
    long CountOfVisibleLines;
    OLECHECK(this->get_CountOfVisibleLines((long*)&CountOfVisibleLines));
    return CountOfVisibleLines;
  }

  Vbide_97::CodeModule* __fastcall get_CodeModule(void)
  {
    Vbide_97::CodeModule* CodeModule;
    OLECHECK(this->get_CodeModule((Vbide_97::CodeModule**)&CodeModule));
    return CodeModule;
  }

  Vbide_97::vbext_CodePaneview __fastcall get_CodePaneView(void)
  {
    Vbide_97::vbext_CodePaneview pCodePaneview;
    OLECHECK(this->get_CodePaneView((Vbide_97::vbext_CodePaneview*)&pCodePaneview));
    return pCodePaneview;
  }


  __property   Vbide_97::CodePanes* Collection = {read = get_Collection};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::WINDOW* Window = {read = get_Window};
  __property   long            TopLine = {read = get_TopLine, write = set_TopLine};
  __property   long            CountOfVisibleLines = {read = get_CountOfVisibleLines};
  __property   Vbide_97::CodeModule* CodeModule = {read = get_CodeModule};
  __property   Vbide_97::vbext_CodePaneview CodePaneView = {read = get_CodePaneView};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _References
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17A-0000-0000-C000-000000000046}
// *********************************************************************//
interface _References  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Vbide_97::VBProject** retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT index/*[in]*/, 
                                         Vbide_97::Reference** Reference/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, 
                                                long Minor/*[in]*/, 
                                                Vbide_97::Reference** Reference/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddFromFile(BSTR FileName/*[in]*/, 
                                                Vbide_97::Reference** Reference/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Remove(Vbide_97::Reference* Reference/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::VBProject* __fastcall get_Parent(void)
  {
    Vbide_97::VBProject* retval;
    OLECHECK(this->get_Parent((Vbide_97::VBProject**)&retval));
    return retval;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* retval;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&retval));
    return retval;
  }

  Vbide_97::Reference* __fastcall Item(VARIANT index/*[in]*/)
  {
    Vbide_97::Reference* Reference;
    OLECHECK(this->Item(index, (Vbide_97::Reference**)&Reference));
    return Reference;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppenum;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppenum));
    return ppenum;
  }

  Vbide_97::Reference* __fastcall AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, 
                                              long Minor/*[in]*/)
  {
    Vbide_97::Reference* Reference;
    OLECHECK(this->AddFromGuid(Guid, Major, Minor, (Vbide_97::Reference**)&Reference));
    return Reference;
  }

  Vbide_97::Reference* __fastcall AddFromFile(BSTR FileName/*[in]*/)
  {
    Vbide_97::Reference* Reference;
    OLECHECK(this->AddFromFile(FileName, (Vbide_97::Reference**)&Reference));
    return Reference;
  }


  __property   Vbide_97::VBProject* Parent = {read = get_Parent};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Reference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17E-0000-0000-C000-000000000046}
// *********************************************************************//
interface Reference  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Collection(Vbide_97::References** retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Guid(BSTR* pbstrGuid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Major(long* pMajor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Minor(long* pMinor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FullPath(BSTR* pbstrLocation/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BuiltIn(VARIANT_BOOL* pfIsDefault/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsBroken(VARIANT_BOOL* pfIsBroken/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Vbide_97::vbext_RefKind* pKind/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Vbide_97::References* __fastcall get_Collection(void)
  {
    Vbide_97::References* retval;
    OLECHECK(this->get_Collection((Vbide_97::References**)&retval));
    return retval;
  }

  Vbide_97::VBE* __fastcall get_VBE(void)
  {
    Vbide_97::VBE* lppaReturn;
    OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
    return lppaReturn;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Guid(void)
  {
    BSTR pbstrGuid = 0;
    OLECHECK(this->get_Guid((BSTR*)&pbstrGuid));
    return pbstrGuid;
  }

  long __fastcall get_Major(void)
  {
    long pMajor;
    OLECHECK(this->get_Major((long*)&pMajor));
    return pMajor;
  }

  long __fastcall get_Minor(void)
  {
    long pMinor;
    OLECHECK(this->get_Minor((long*)&pMinor));
    return pMinor;
  }

  BSTR __fastcall get_FullPath(void)
  {
    BSTR pbstrLocation = 0;
    OLECHECK(this->get_FullPath((BSTR*)&pbstrLocation));
    return pbstrLocation;
  }

  VARIANT_BOOL __fastcall get_BuiltIn(void)
  {
    VARIANT_BOOL pfIsDefault;
    OLECHECK(this->get_BuiltIn((VARIANT_BOOL*)&pfIsDefault));
    return pfIsDefault;
  }

  VARIANT_BOOL __fastcall get_IsBroken(void)
  {
    VARIANT_BOOL pfIsBroken;
    OLECHECK(this->get_IsBroken((VARIANT_BOOL*)&pfIsBroken));
    return pfIsBroken;
  }

  Vbide_97::vbext_RefKind __fastcall get_Type(void)
  {
    Vbide_97::vbext_RefKind pKind;
    OLECHECK(this->get_Type((Vbide_97::vbext_RefKind*)&pKind));
    return pKind;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Description((BSTR*)&pbstrName));
    return pbstrName;
  }


  __property   Vbide_97::References* Collection = {read = get_Collection};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Guid = {read = get_Guid};
  __property   long            Major = {read = get_Major};
  __property   long            Minor = {read = get_Minor};
  __property   BSTR            FullPath = {read = get_FullPath};
  __property   VARIANT_BOOL    BuiltIn = {read = get_BuiltIn};
  __property   VARIANT_BOOL    IsBroken = {read = get_IsBroken};
  __property   Vbide_97::vbext_RefKind Type = {read = get_Type};
  __property   BSTR            Description = {read = get_Description};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _dispReferences_Events
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {CDDE3804-2064-11CF-867F-00AA005FF34A}
// *********************************************************************//
interface _dispReferences_Events : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Vbide_97::Reference* Reference)
  {
    _TDispID _dispid(/* ItemAdded */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Vbide_97::Reference* Reference)
  {
    _TDispID _dispid(/* ItemRemoved */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Vbide_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<App>  TCOMApp;

// *********************************************************************//
// DispIntf:  Application
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E158-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AppDispT : public TAutoDriver<App>
{
public:
  AppDispT(){}

  AppDispT(App *pintf)
  {
    TAutoDriver<App>::Bind(pintf, false);
  }

  AppDispT(AppPtr pintf)
  {
    TAutoDriver<App>::Bind(pintf, true);
  }

  AppDispT& operator=(App *pintf)
  {
    TAutoDriver<App>::Bind(pintf, false);
    return *this;
  }

  AppDispT& operator=(AppPtr pintf)
  {
    TAutoDriver<App>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* lpbstrReturn/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);

  __property   BSTR            Version = {read = get_Version};
};
typedef AppDispT<App> AppDisp;

typedef TComInterface<VBE>  TCOMVBE;

// *********************************************************************//
// DispIntf:  VBE
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E166-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class VBEDispT : public TAutoDriver<VBE>
{
public:
  VBEDispT(){}

  VBEDispT(VBE *pintf)
  {
    TAutoDriver<VBE>::Bind(pintf, false);
  }

  VBEDispT(VBEPtr pintf)
  {
    TAutoDriver<VBE>::Bind(pintf, true);
  }

  VBEDispT& operator=(VBE *pintf)
  {
    TAutoDriver<VBE>::Bind(pintf, false);
    return *this;
  }

  VBEDispT& operator=(VBEPtr pintf)
  {
    TAutoDriver<VBE>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBProjects(Vbide_97::VBProjects** lppptReturn/*[out,retval]*/);
  Vbide_97::VBProjects* __fastcall get_VBProjects(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_97::CommandBars** ppcbs/*[out,retval]*/);
  Office_97::CommandBars* __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CodePanes(Vbide_97::CodePanes** ppCodePanes/*[out,retval]*/);
  Vbide_97::CodePanes* __fastcall get_CodePanes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Windows(Vbide_97::Windows** ppwnsVBWindows/*[out,retval]*/);
  Vbide_97::Windows* __fastcall get_Windows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Events(Vbide_97::Events** ppevtEvents/*[out,retval]*/);
  Vbide_97::Events* __fastcall get_Events(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveVBProject(Vbide_97::VBProject** lppptReturn/*[out,retval]*/);
  Vbide_97::VBProject* __fastcall get_ActiveVBProject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ActiveVBProject(Vbide_97::VBProject* lppptReturn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedVBComponent(Vbide_97::VBComponent** lppscReturn/*[out,retval]*/);
  Vbide_97::VBComponent* __fastcall get_SelectedVBComponent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MainWindow(Vbide_97::WINDOW** ppwin/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall get_MainWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveWindow(Vbide_97::WINDOW** ppwinActive/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall get_ActiveWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveCodePane(Vbide_97::CodePane** ppCodePane/*[out,retval]*/);
  Vbide_97::CodePane* __fastcall get_ActiveCodePane(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_ActiveCodePane(Vbide_97::CodePane* ppCodePane/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* lpbstrReturn/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);

  __property   Vbide_97::VBProjects* VBProjects = {read = get_VBProjects};
  __property   Office_97::CommandBars* CommandBars = {read = get_CommandBars};
  __property   Vbide_97::CodePanes* CodePanes = {read = get_CodePanes};
  __property   Vbide_97::Windows* Windows = {read = get_Windows};
  __property   Vbide_97::Events* Events = {read = get_Events};
  __property   Vbide_97::VBProject* ActiveVBProject = {read = get_ActiveVBProject, write = _set_ActiveVBProject};
  __property   Vbide_97::VBComponent* SelectedVBComponent = {read = get_SelectedVBComponent};
  __property   Vbide_97::WINDOW* MainWindow = {read = get_MainWindow};
  __property   Vbide_97::WINDOW* ActiveWindow = {read = get_ActiveWindow};
  __property   Vbide_97::CodePane* ActiveCodePane = {read = get_ActiveCodePane, write = _set_ActiveCodePane};

  __property   BSTR            Version = {read = get_Version};
};
typedef VBEDispT<VBE> VBEDisp;

typedef TComInterface<WINDOW>  TCOMWINDOW;

// *********************************************************************//
// DispIntf:  Window
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E16B-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class WINDOWDispT : public TAutoDriver<WINDOW>
{
public:
  WINDOWDispT(){}

  WINDOWDispT(WINDOW *pintf)
  {
    TAutoDriver<WINDOW>::Bind(pintf, false);
  }

  WINDOWDispT(WINDOWPtr pintf)
  {
    TAutoDriver<WINDOW>::Bind(pintf, true);
  }

  WINDOWDispT& operator=(WINDOW *pintf)
  {
    TAutoDriver<WINDOW>::Bind(pintf, false);
    return *this;
  }

  WINDOWDispT& operator=(WINDOWPtr pintf)
  {
    TAutoDriver<WINDOW>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Collection(Vbide_97::Windows** lppaReturn/*[out,retval]*/);
  Vbide_97::Windows* __fastcall get_Collection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrTitle/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* plLeft/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long plLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* plTop/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long plTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(long* plWidth/*[out,retval]*/);
  long            __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(long plWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* plHeight/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(long plHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WindowState(Vbide_97::vbext_WindowState* plWindowState/*[out,retval]*/);
  Vbide_97::vbext_WindowState __fastcall get_WindowState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WindowState(Vbide_97::vbext_WindowState plWindowState/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Vbide_97::vbext_WindowType* pKind/*[out,retval]*/);
  Vbide_97::vbext_WindowType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetKind(Vbide_97::vbext_WindowType eKind/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkedWindows(Vbide_97::LinkedWindows** ppwnsCollection/*[out,retval]*/);
  Vbide_97::LinkedWindows* __fastcall get_LinkedWindows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkedWindowFrame(Vbide_97::WINDOW** ppwinFrame/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall get_LinkedWindowFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Detach();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Attach(long lWindowHandle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HWnd(long* plWindowHandle/*[out,retval]*/);
  long            __fastcall get_HWnd(void);

  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::Windows* Collection = {read = get_Collection};
  __property   BSTR            Caption = {read = get_Caption};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Width = {read = get_Width, write = set_Width};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   Vbide_97::vbext_WindowState WindowState = {read = get_WindowState, write = set_WindowState};
  __property   Vbide_97::vbext_WindowType Type = {read = get_Type};
  __property   Vbide_97::LinkedWindows* LinkedWindows = {read = get_LinkedWindows};
  __property   Vbide_97::WINDOW* LinkedWindowFrame = {read = get_LinkedWindowFrame};
  __property   long            HWnd = {read = get_HWnd};
};
typedef WINDOWDispT<WINDOW> WINDOWDisp;

// *********************************************************************//
// SmartIntf: TCOM_Windoz
// Interface: _Windoz
// *********************************************************************//
template <class T /* _Windoz */ >
class TCOM_WindozT : public TComInterface<_Windoz>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_WindozT() {}
  TCOM_WindozT(_Windoz *intf, bool addRef = false) : TComInterface<_Windoz>(intf, addRef) {}
  TCOM_WindozT(const TCOM_WindozT& src) : TComInterface<_Windoz>(src) {}
  TCOM_WindozT& operator=(const TCOM_WindozT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall get_Parent(Vbide_97::App** lppptReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::AppPtr* lppptReturn/*[out,retval]*/);
  Vbide_97::AppPtr __fastcall get_Parent(void);
  HRESULT         __fastcall Item(VARIANT index/*[in]*/, 
                                  Vbide_97::WINDOW** lppcReturn/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
  __property   Vbide_97::AppPtr Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef TCOM_WindozT<_Windoz> TCOM_Windoz;

// *********************************************************************//
// DispIntf:  _Windows
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E16A-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _WindozDispT : public TAutoDriver<_Windoz>
{
public:
  _WindozDispT(){}

  _WindozDispT(_Windoz *pintf)
  {
    TAutoDriver<_Windoz>::Bind(pintf, false);
  }

  _WindozDispT(_WindozPtr pintf)
  {
    TAutoDriver<_Windoz>::Bind(pintf, true);
  }

  _WindozDispT& operator=(_Windoz *pintf)
  {
    TAutoDriver<_Windoz>::Bind(pintf, false);
    return *this;
  }

  _WindozDispT& operator=(_WindozPtr pintf)
  {
    TAutoDriver<_Windoz>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Windows));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Windows);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::App** lppptReturn/*[out,retval]*/);
  Vbide_97::App*  __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT index/*[in]*/, 
                                             Vbide_97::WINDOW** lppcReturn/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::App*  Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef _WindozDispT<_Windoz> _WindozDisp;

// *********************************************************************//
// SmartIntf: TCOM_LinkedWindows
// Interface: _LinkedWindows
// *********************************************************************//
template <class T /* _LinkedWindows */ >
class TCOM_LinkedWindowsT : public TComInterface<_LinkedWindows>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_LinkedWindowsT() {}
  TCOM_LinkedWindowsT(_LinkedWindows *intf, bool addRef = false) : TComInterface<_LinkedWindows>(intf, addRef) {}
  TCOM_LinkedWindowsT(const TCOM_LinkedWindowsT& src) : TComInterface<_LinkedWindows>(src) {}
  TCOM_LinkedWindowsT& operator=(const TCOM_LinkedWindowsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall get_Parent(Vbide_97::WINDOW** ppptReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::WINDOWPtr* ppptReturn/*[out,retval]*/);
  Vbide_97::WINDOWPtr __fastcall get_Parent(void);
  HRESULT         __fastcall Item(VARIANT index/*[in]*/, 
                                  Vbide_97::WINDOW** lppcReturn/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Remove(Vbide_97::WINDOW* Window/*[in]*/);
  HRESULT         __fastcall Add(Vbide_97::WINDOW* Window/*[in]*/);

  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
  __property   Vbide_97::WINDOWPtr Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef TCOM_LinkedWindowsT<_LinkedWindows> TCOM_LinkedWindows;

// *********************************************************************//
// DispIntf:  _LinkedWindows
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E16C-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _LinkedWindowsDispT : public TAutoDriver<_LinkedWindows>
{
public:
  _LinkedWindowsDispT(){}

  _LinkedWindowsDispT(_LinkedWindows *pintf)
  {
    TAutoDriver<_LinkedWindows>::Bind(pintf, false);
  }

  _LinkedWindowsDispT(_LinkedWindowsPtr pintf)
  {
    TAutoDriver<_LinkedWindows>::Bind(pintf, true);
  }

  _LinkedWindowsDispT& operator=(_LinkedWindows *pintf)
  {
    TAutoDriver<_LinkedWindows>::Bind(pintf, false);
    return *this;
  }

  _LinkedWindowsDispT& operator=(_LinkedWindowsPtr pintf)
  {
    TAutoDriver<_LinkedWindows>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_LinkedWindows));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_LinkedWindows);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::WINDOW** ppptReturn/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT index/*[in]*/, 
                                             Vbide_97::WINDOW** lppcReturn/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(Vbide_97::WINDOW* Window/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Vbide_97::WINDOW* Window/*[in]*/);

  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::WINDOW* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef _LinkedWindowsDispT<_LinkedWindows> _LinkedWindowsDisp;

typedef TComInterface<Events>  TCOMEvents;

// *********************************************************************//
// DispIntf:  Events
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E167-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class EventsDispT : public TAutoDriver<Events>
{
public:
  EventsDispT(){}

  EventsDispT(Events *pintf)
  {
    TAutoDriver<Events>::Bind(pintf, false);
  }

  EventsDispT(EventsPtr pintf)
  {
    TAutoDriver<Events>::Bind(pintf, true);
  }

  EventsDispT& operator=(Events *pintf)
  {
    TAutoDriver<Events>::Bind(pintf, false);
    return *this;
  }

  EventsDispT& operator=(EventsPtr pintf)
  {
    TAutoDriver<Events>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReferencesEvents(Vbide_97::VBProject* VBProject/*[in]*/
                                                             , 
                                                             Vbide_97::ReferencesEvents** prceNew/*[out,retval]*/);
  Vbide_97::ReferencesEvents* __fastcall get_ReferencesEvents(Vbide_97::VBProject* VBProject/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBarEvents(LPDISPATCH CommandBarControl/*[in]*/, 
                                                             Vbide_97::CommandBarEvents** prceNew/*[out,retval]*/);
  Vbide_97::CommandBarEvents* __fastcall get_CommandBarEvents(LPDISPATCH CommandBarControl/*[in]*/);

};
typedef EventsDispT<Events> EventsDisp;

typedef TComInterface<_VBProjectsEvents>  TCOM_VBProjectsEvents;

// *********************************************************************//
// DispIntf:  _dispVBProjectsEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E103-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _dispVBProjectsEventsDispT : public TAutoDriver<_dispVBProjectsEvents>
{
public:
  _dispVBProjectsEventsDispT(){}

  _dispVBProjectsEventsDispT(_dispVBProjectsEvents *pintf)
  {
    TAutoDriver<_dispVBProjectsEvents>::Bind(pintf, false);
  }

  _dispVBProjectsEventsDispT(_dispVBProjectsEventsPtr pintf)
  {
    TAutoDriver<_dispVBProjectsEvents>::Bind(pintf, true);
  }

  _dispVBProjectsEventsDispT& operator=(_dispVBProjectsEvents *pintf)
  {
    TAutoDriver<_dispVBProjectsEvents>::Bind(pintf, false);
    return *this;
  }

  _dispVBProjectsEventsDispT& operator=(_dispVBProjectsEventsPtr pintf)
  {
    TAutoDriver<_dispVBProjectsEvents>::Bind(pintf, true);
    return *this;
  }

  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Vbide_97::VBProject* VBProject/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Vbide_97::VBProject* VBProject/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ItemRenamed(Vbide_97::VBProject* VBProject/*[in]*/, 
                                              BSTR OldName/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ItemActivated(Vbide_97::VBProject* VBProject/*[in]*/);

};
typedef _dispVBProjectsEventsDispT<_dispVBProjectsEvents> _dispVBProjectsEventsDisp;

typedef TComInterface<_VBComponentsEvents>  TCOM_VBComponentsEvents;

// *********************************************************************//
// DispIntf:  _dispVBComponentsEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E116-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _dispVBComponentsEventsDispT : public TAutoDriver<_dispVBComponentsEvents>
{
public:
  _dispVBComponentsEventsDispT(){}

  _dispVBComponentsEventsDispT(_dispVBComponentsEvents *pintf)
  {
    TAutoDriver<_dispVBComponentsEvents>::Bind(pintf, false);
  }

  _dispVBComponentsEventsDispT(_dispVBComponentsEventsPtr pintf)
  {
    TAutoDriver<_dispVBComponentsEvents>::Bind(pintf, true);
  }

  _dispVBComponentsEventsDispT& operator=(_dispVBComponentsEvents *pintf)
  {
    TAutoDriver<_dispVBComponentsEvents>::Bind(pintf, false);
    return *this;
  }

  _dispVBComponentsEventsDispT& operator=(_dispVBComponentsEventsPtr pintf)
  {
    TAutoDriver<_dispVBComponentsEvents>::Bind(pintf, true);
    return *this;
  }

  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Vbide_97::VBComponent* VBComponent/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Vbide_97::VBComponent* VBComponent/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ItemRenamed(Vbide_97::VBComponent* VBComponent/*[in]*/, 
                                              BSTR OldName/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ItemSelected(Vbide_97::VBComponent* VBComponent/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ItemActivated(Vbide_97::VBComponent* VBComponent/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ItemReloaded(Vbide_97::VBComponent* VBComponent/*[in]*/);

};
typedef _dispVBComponentsEventsDispT<_dispVBComponentsEvents> _dispVBComponentsEventsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ReferencesEvents
// Interface: _ReferencesEvents
// *********************************************************************//
template <class T /* _ReferencesEvents */ >
class TCOM_ReferencesEventsT : public TComInterface<_ReferencesEvents>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ReferencesEventsT() {}
  TCOM_ReferencesEventsT(_ReferencesEvents *intf, bool addRef = false) : TComInterface<_ReferencesEvents>(intf, addRef) {}
  TCOM_ReferencesEventsT(const TCOM_ReferencesEventsT& src) : TComInterface<_ReferencesEvents>(src) {}
  TCOM_ReferencesEventsT& operator=(const TCOM_ReferencesEventsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ReferencesEventsT<_ReferencesEvents> TCOM_ReferencesEvents;

// *********************************************************************//
// DispIntf:  _dispReferencesEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E118-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T>
class _dispReferencesEventsDispT : public TAutoDriver<_dispReferencesEvents>
{
public:
  _dispReferencesEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Vbide_97::Reference* Reference/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Vbide_97::Reference* Reference/*[in]*/);

};
typedef _dispReferencesEventsDispT<_dispReferencesEvents> _dispReferencesEventsDisp;

// *********************************************************************//
// SmartIntf: TCOM_CommandBarControlEvents
// Interface: _CommandBarControlEvents
// *********************************************************************//
template <class T /* _CommandBarControlEvents */ >
class TCOM_CommandBarControlEventsT : public TComInterface<_CommandBarControlEvents>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CommandBarControlEventsT() {}
  TCOM_CommandBarControlEventsT(_CommandBarControlEvents *intf, bool addRef = false) : TComInterface<_CommandBarControlEvents>(intf, addRef) {}
  TCOM_CommandBarControlEventsT(const TCOM_CommandBarControlEventsT& src) : TComInterface<_CommandBarControlEvents>(src) {}
  TCOM_CommandBarControlEventsT& operator=(const TCOM_CommandBarControlEventsT& src) { Bind(src, true); return *this;}


};
typedef TCOM_CommandBarControlEventsT<_CommandBarControlEvents> TCOM_CommandBarControlEvents;

// *********************************************************************//
// DispIntf:  _dispCommandBarControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E131-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T>
class _dispCommandBarControlEventsDispT : public TAutoDriver<_dispCommandBarControlEvents>
{
public:
  _dispCommandBarControlEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall Click(LPDISPATCH CommandBarControl/*[in]*/, 
                                        VARIANT_BOOL* handled/*[in]*/, 
                                        VARIANT_BOOL* CancelDefault/*[in]*/);

};
typedef _dispCommandBarControlEventsDispT<_dispCommandBarControlEvents> _dispCommandBarControlEventsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ProjectTemplate
// Interface: _ProjectTemplate
// *********************************************************************//
template <class T /* _ProjectTemplate */ >
class TCOM_ProjectTemplateT : public TComInterface<_ProjectTemplate>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ProjectTemplateT() {}
  TCOM_ProjectTemplateT(_ProjectTemplate *intf, bool addRef = false) : TComInterface<_ProjectTemplate>(intf, addRef) {}
  TCOM_ProjectTemplateT(const TCOM_ProjectTemplateT& src) : TComInterface<_ProjectTemplate>(src) {}
  TCOM_ProjectTemplateT& operator=(const TCOM_ProjectTemplateT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Vbide_97::AppPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::AppPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(Vbide_97::App** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::AppPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::AppPtr __fastcall get_Parent(void);

  __property   Vbide_97::AppPtr Application = {read = get_Application};
  __property   Vbide_97::AppPtr Parent = {read = get_Parent};
};
typedef TCOM_ProjectTemplateT<_ProjectTemplate> TCOM_ProjectTemplate;

// *********************************************************************//
// DispIntf:  _ProjectTemplate
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E159-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _ProjectTemplateDispT : public TAutoDriver<_ProjectTemplate>
{
public:
  _ProjectTemplateDispT(){}

  _ProjectTemplateDispT(_ProjectTemplate *pintf)
  {
    TAutoDriver<_ProjectTemplate>::Bind(pintf, false);
  }

  _ProjectTemplateDispT(_ProjectTemplatePtr pintf)
  {
    TAutoDriver<_ProjectTemplate>::Bind(pintf, true);
  }

  _ProjectTemplateDispT& operator=(_ProjectTemplate *pintf)
  {
    TAutoDriver<_ProjectTemplate>::Bind(pintf, false);
    return *this;
  }

  _ProjectTemplateDispT& operator=(_ProjectTemplatePtr pintf)
  {
    TAutoDriver<_ProjectTemplate>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ProjectTemplate));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ProjectTemplate);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/);
  Vbide_97::App*  __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::App** lppaReturn/*[out,retval]*/);
  Vbide_97::App*  __fastcall get_Parent(void);

  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::App*  Parent = {read = get_Parent};
};
typedef _ProjectTemplateDispT<_ProjectTemplate> _ProjectTemplateDisp;

// *********************************************************************//
// SmartIntf: TCOM_VBProject
// Interface: _VBProject
// *********************************************************************//
template <class T /* _VBProject */ >
class TCOM_VBProjectT : public TComInterface<_VBProject>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_VBProjectT() {}
  TCOM_VBProjectT(_VBProject *intf, bool addRef = false) : TComInterface<_VBProject>(intf, addRef) {}
  TCOM_VBProjectT(const TCOM_VBProjectT& src) : TComInterface<_VBProject>(src) {}
  TCOM_VBProjectT& operator=(const TCOM_VBProjectT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_HelpFile(BSTR* lpbstrHelpFile/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR lpbstrHelpFile/*[in]*/);
  HRESULT         __fastcall get_HelpContextID(long* lpdwContextID/*[out,retval]*/);
  long            __fastcall get_HelpContextID(void);
  HRESULT         __fastcall set_HelpContextID(long lpdwContextID/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* lpbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR lpbstrDescription/*[in]*/);
  HRESULT         __fastcall get_Mode(Vbide_97::vbext_VBAMode* lpVbaMode/*[out,retval]*/);
  Vbide_97::vbext_VBAMode __fastcall get_Mode(void);
  HRESULT         __fastcall get_References(Vbide_97::References** lppReferences/*[out,retval]*/);
  HRESULT         __fastcall get_References(Vbide_97::ReferencesPtr* lppReferences/*[out,retval]*/);
  Vbide_97::ReferencesPtr __fastcall get_References(void);
  HRESULT         __fastcall get_Name(BSTR* lpbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR lpbstrName/*[in]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall get_Collection(Vbide_97::VBProjects** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Collection(Vbide_97::VBProjectsPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::VBProjectsPtr __fastcall get_Collection(void);
  HRESULT         __fastcall get_Protection(Vbide_97::vbext_ProjectProtection* lpProtection/*[out,retval]*/);
  Vbide_97::vbext_ProjectProtection __fastcall get_Protection(void);
  HRESULT         __fastcall get_Saved(VARIANT_BOOL* lpfReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Saved(TOLEBOOL* lpfReturn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Saved(void);
  HRESULT         __fastcall get_VBComponents(Vbide_97::VBComponents** lppcReturn/*[out,retval]*/);
  HRESULT         __fastcall get_VBComponents(Vbide_97::VBComponentsPtr* lppcReturn/*[out,retval]*/);
  Vbide_97::VBComponentsPtr __fastcall get_VBComponents(void);

  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   long            HelpContextID = {read = get_HelpContextID, write = set_HelpContextID};
  __property   BSTR            Description = {read = get_Description};
  __property   Vbide_97::vbext_VBAMode Mode = {read = get_Mode};
  __property   Vbide_97::ReferencesPtr References = {read = get_References};
  __property   BSTR            Name = {read = get_Name};
  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
  __property   Vbide_97::VBProjectsPtr Collection = {read = get_Collection};
  __property   Vbide_97::vbext_ProjectProtection Protection = {read = get_Protection};
  __property   TOLEBOOL        Saved = {read = get_Saved};
  __property   Vbide_97::VBComponentsPtr VBComponents = {read = get_VBComponents};
};
typedef TCOM_VBProjectT<_VBProject> TCOM_VBProject;

// *********************************************************************//
// DispIntf:  _VBProject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E160-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _VBProjectDispT : public TAutoDriver<_VBProject>
{
public:
  _VBProjectDispT(){}

  _VBProjectDispT(_VBProject *pintf)
  {
    TAutoDriver<_VBProject>::Bind(pintf, false);
  }

  _VBProjectDispT(_VBProjectPtr pintf)
  {
    TAutoDriver<_VBProject>::Bind(pintf, true);
  }

  _VBProjectDispT& operator=(_VBProject *pintf)
  {
    TAutoDriver<_VBProject>::Bind(pintf, false);
    return *this;
  }

  _VBProjectDispT& operator=(_VBProjectPtr pintf)
  {
    TAutoDriver<_VBProject>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_VBProject));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_VBProject);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* lpbstrHelpFile/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR lpbstrHelpFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextID(long* lpdwContextID/*[out,retval]*/);
  long            __fastcall get_HelpContextID(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextID(long lpdwContextID/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* lpbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR lpbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Mode(Vbide_97::vbext_VBAMode* lpVbaMode/*[out,retval]*/);
  Vbide_97::vbext_VBAMode __fastcall get_Mode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_References(Vbide_97::References** lppReferences/*[out,retval]*/);
  Vbide_97::References* __fastcall get_References(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* lpbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR lpbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Collection(Vbide_97::VBProjects** lppaReturn/*[out,retval]*/);
  Vbide_97::VBProjects* __fastcall get_Collection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Protection(Vbide_97::vbext_ProjectProtection* lpProtection/*[out,retval]*/);
  Vbide_97::vbext_ProjectProtection __fastcall get_Protection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Saved(VARIANT_BOOL* lpfReturn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Saved(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBComponents(Vbide_97::VBComponents** lppcReturn/*[out,retval]*/);
  Vbide_97::VBComponents* __fastcall get_VBComponents(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/);
  Vbide_97::App*  __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::App** lppaReturn/*[out,retval]*/);
  Vbide_97::App*  __fastcall get_Parent(void);

  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   long            HelpContextID = {read = get_HelpContextID, write = set_HelpContextID};
  __property   BSTR            Description = {read = get_Description};
  __property   Vbide_97::vbext_VBAMode Mode = {read = get_Mode};
  __property   Vbide_97::References* References = {read = get_References};
  __property   BSTR            Name = {read = get_Name};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::VBProjects* Collection = {read = get_Collection};
  __property   Vbide_97::vbext_ProjectProtection Protection = {read = get_Protection};
  __property   VARIANT_BOOL    Saved = {read = get_Saved};
  __property   Vbide_97::VBComponents* VBComponents = {read = get_VBComponents};

  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::App*  Parent = {read = get_Parent};
};
typedef _VBProjectDispT<_VBProject> _VBProjectDisp;

// *********************************************************************//
// SmartIntf: TCOM_VBProjects
// Interface: _VBProjects
// *********************************************************************//
template <class T /* _VBProjects */ >
class TCOM_VBProjectsT : public TComInterface<_VBProjects>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_VBProjectsT() {}
  TCOM_VBProjectsT(_VBProjects *intf, bool addRef = false) : TComInterface<_VBProjects>(intf, addRef) {}
  TCOM_VBProjectsT(const TCOM_VBProjectsT& src) : TComInterface<_VBProjects>(src) {}
  TCOM_VBProjectsT& operator=(const TCOM_VBProjectsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Item(VARIANT index/*[in]*/, 
                                  Vbide_97::VBProject** lppcReturn/*[out,retval]*/);
  Vbide_97::VBProject* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall get_Parent(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
  __property   Vbide_97::VBEPtr Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef TCOM_VBProjectsT<_VBProjects> TCOM_VBProjects;

// *********************************************************************//
// DispIntf:  _VBProjects
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E165-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _VBProjectsDispT : public TAutoDriver<_VBProjects>
{
public:
  _VBProjectsDispT(){}

  _VBProjectsDispT(_VBProjects *pintf)
  {
    TAutoDriver<_VBProjects>::Bind(pintf, false);
  }

  _VBProjectsDispT(_VBProjectsPtr pintf)
  {
    TAutoDriver<_VBProjects>::Bind(pintf, true);
  }

  _VBProjectsDispT& operator=(_VBProjects *pintf)
  {
    TAutoDriver<_VBProjects>::Bind(pintf, false);
    return *this;
  }

  _VBProjectsDispT& operator=(_VBProjectsPtr pintf)
  {
    TAutoDriver<_VBProjects>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_VBProjects));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_VBProjects);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT index/*[in]*/, 
                                             Vbide_97::VBProject** lppcReturn/*[out,retval]*/);
  Vbide_97::VBProject* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::VBE*  Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef _VBProjectsDispT<_VBProjects> _VBProjectsDisp;

typedef TComInterface<SelectedComponents>  TCOMSelectedComponents;

// *********************************************************************//
// DispIntf:  SelectedComponents
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE39F3D4-1B13-11D0-887F-00A0C90F2744}
// *********************************************************************//
template<class T>
class SelectedComponentsDispT : public TAutoDriver<SelectedComponents>
{
public:
  SelectedComponentsDispT(){}

  SelectedComponentsDispT(SelectedComponents *pintf)
  {
    TAutoDriver<SelectedComponents>::Bind(pintf, false);
  }

  SelectedComponentsDispT(SelectedComponentsPtr pintf)
  {
    TAutoDriver<SelectedComponents>::Bind(pintf, true);
  }

  SelectedComponentsDispT& operator=(SelectedComponents *pintf)
  {
    TAutoDriver<SelectedComponents>::Bind(pintf, false);
    return *this;
  }

  SelectedComponentsDispT& operator=(SelectedComponentsPtr pintf)
  {
    TAutoDriver<SelectedComponents>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(int index/*[in]*/, 
                                             Vbide_97::Component** lppcReturn/*[out,retval]*/);
  Vbide_97::Component* __fastcall Item(int index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/);
  Vbide_97::App*  __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/);
  Vbide_97::VBProject* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::VBProject* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef SelectedComponentsDispT<SelectedComponents> SelectedComponentsDisp;

// *********************************************************************//
// SmartIntf: TCOM_Components
// Interface: _Components
// *********************************************************************//
template <class T /* _Components */ >
class TCOM_ComponentsT : public TComInterface<_Components>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentsT() {}
  TCOM_ComponentsT(_Components *intf, bool addRef = false) : TComInterface<_Components>(intf, addRef) {}
  TCOM_ComponentsT(const TCOM_ComponentsT& src) : TComInterface<_Components>(src) {}
  TCOM_ComponentsT& operator=(const TCOM_ComponentsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Item(VARIANT index/*[in]*/, 
                                  Vbide_97::Component** lppcReturn/*[out,retval]*/);
  Vbide_97::Component* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Vbide_97::AppPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::AppPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::VBProjectPtr* lppptReturn/*[out,retval]*/);
  Vbide_97::VBProjectPtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Remove(Vbide_97::Component* Component/*[in]*/);
  HRESULT         __fastcall Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/, 
                                 Vbide_97::Component** lppComponent/*[out,retval]*/);
  Vbide_97::Component* __fastcall Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/);
  HRESULT         __fastcall Import(BSTR FileName/*[in]*/, 
                                    Vbide_97::Component** lppComponent/*[out,retval]*/);
  Vbide_97::Component* __fastcall Import(BSTR FileName/*[in]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);

  __property   Vbide_97::AppPtr Application = {read = get_Application};
  __property   Vbide_97::VBProjectPtr Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
};
typedef TCOM_ComponentsT<_Components> TCOM_Components;

// *********************************************************************//
// DispIntf:  _Components
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E161-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _ComponentsDispT : public TAutoDriver<_Components>
{
public:
  _ComponentsDispT(){}

  _ComponentsDispT(_Components *pintf)
  {
    TAutoDriver<_Components>::Bind(pintf, false);
  }

  _ComponentsDispT(_ComponentsPtr pintf)
  {
    TAutoDriver<_Components>::Bind(pintf, true);
  }

  _ComponentsDispT& operator=(_Components *pintf)
  {
    TAutoDriver<_Components>::Bind(pintf, false);
    return *this;
  }

  _ComponentsDispT& operator=(_ComponentsPtr pintf)
  {
    TAutoDriver<_Components>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Components));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Components);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT index/*[in]*/, 
                                             Vbide_97::Component** lppcReturn/*[out,retval]*/);
  Vbide_97::Component* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/);
  Vbide_97::App*  __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/);
  Vbide_97::VBProject* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(Vbide_97::Component* Component/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/, 
                                            Vbide_97::Component** lppComponent/*[out,retval]*/);
  Vbide_97::Component* __fastcall Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Import(BSTR FileName/*[in]*/, 
                                               Vbide_97::Component** lppComponent/*[out,retval]*/);
  Vbide_97::Component* __fastcall Import(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);

  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::VBProject* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
};
typedef _ComponentsDispT<_Components> _ComponentsDisp;

// *********************************************************************//
// SmartIntf: TCOM_VBComponents
// Interface: _VBComponents
// *********************************************************************//
template <class T /* _VBComponents */ >
class TCOM_VBComponentsT : public TComInterface<_VBComponents>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_VBComponentsT() {}
  TCOM_VBComponentsT(_VBComponents *intf, bool addRef = false) : TComInterface<_VBComponents>(intf, addRef) {}
  TCOM_VBComponentsT(const TCOM_VBComponentsT& src) : TComInterface<_VBComponents>(src) {}
  TCOM_VBComponentsT& operator=(const TCOM_VBComponentsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Item(VARIANT index/*[in]*/, 
                                  Vbide_97::VBComponent** lppcReturn/*[out,retval]*/);
  Vbide_97::VBComponent* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::VBProjectPtr* lppptReturn/*[out,retval]*/);
  Vbide_97::VBProjectPtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Remove(Vbide_97::VBComponent* VBComponent/*[in]*/);
  HRESULT         __fastcall Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/, 
                                 Vbide_97::VBComponent** lppComponent/*[out,retval]*/);
  Vbide_97::VBComponent* __fastcall Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/);
  HRESULT         __fastcall Import(BSTR FileName/*[in]*/, 
                                    Vbide_97::VBComponent** lppComponent/*[out,retval]*/);
  Vbide_97::VBComponent* __fastcall Import(BSTR FileName/*[in]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);

  __property   Vbide_97::VBProjectPtr Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
};
typedef TCOM_VBComponentsT<_VBComponents> TCOM_VBComponents;

// *********************************************************************//
// DispIntf:  _VBComponents
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E162-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _VBComponentsDispT : public TAutoDriver<_VBComponents>
{
public:
  _VBComponentsDispT(){}

  _VBComponentsDispT(_VBComponents *pintf)
  {
    TAutoDriver<_VBComponents>::Bind(pintf, false);
  }

  _VBComponentsDispT(_VBComponentsPtr pintf)
  {
    TAutoDriver<_VBComponents>::Bind(pintf, true);
  }

  _VBComponentsDispT& operator=(_VBComponents *pintf)
  {
    TAutoDriver<_VBComponents>::Bind(pintf, false);
    return *this;
  }

  _VBComponentsDispT& operator=(_VBComponentsPtr pintf)
  {
    TAutoDriver<_VBComponents>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_VBComponents));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_VBComponents);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT index/*[in]*/, 
                                             Vbide_97::VBComponent** lppcReturn/*[out,retval]*/);
  Vbide_97::VBComponent* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/);
  Vbide_97::VBProject* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(Vbide_97::VBComponent* VBComponent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/, 
                                            Vbide_97::VBComponent** lppComponent/*[out,retval]*/);
  Vbide_97::VBComponent* __fastcall Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Import(BSTR FileName/*[in]*/, 
                                               Vbide_97::VBComponent** lppComponent/*[out,retval]*/);
  Vbide_97::VBComponent* __fastcall Import(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);

  __property   Vbide_97::VBProject* Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
};
typedef _VBComponentsDispT<_VBComponents> _VBComponentsDisp;

// *********************************************************************//
// SmartIntf: TCOM_Component
// Interface: _Component
// *********************************************************************//
template <class T /* _Component */ >
class TCOM_ComponentT : public TComInterface<_Component>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComponentT() {}
  TCOM_ComponentT(_Component *intf, bool addRef = false) : TComInterface<_Component>(intf, addRef) {}
  TCOM_ComponentT(const TCOM_ComponentT& src) : TComInterface<_Component>(src) {}
  TCOM_ComponentT& operator=(const TCOM_ComponentT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Vbide_97::AppPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::AppPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(Vbide_97::Components** lppcReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::ComponentsPtr* lppcReturn/*[out,retval]*/);
  Vbide_97::ComponentsPtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_IsDirty(VARIANT_BOOL* lpfReturn/*[out,retval]*/);
  HRESULT         __fastcall get_IsDirty(TOLEBOOL* lpfReturn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsDirty(void);
  HRESULT         __fastcall set_IsDirty(VARIANT_BOOL lpfReturn/*[in]*/);
  HRESULT         __fastcall set_IsDirty(TOLEBOOL lpfReturn/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pbstrReturn/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pbstrReturn/*[in]*/);

  __property   Vbide_97::AppPtr Application = {read = get_Application};
  __property   Vbide_97::ComponentsPtr Parent = {read = get_Parent};
  __property   TOLEBOOL        IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   BSTR            Name = {read = get_Name};
};
typedef TCOM_ComponentT<_Component> TCOM_Component;

// *********************************************************************//
// DispIntf:  _Component
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E163-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _ComponentDispT : public TAutoDriver<_Component>
{
public:
  _ComponentDispT(){}

  _ComponentDispT(_Component *pintf)
  {
    TAutoDriver<_Component>::Bind(pintf, false);
  }

  _ComponentDispT(_ComponentPtr pintf)
  {
    TAutoDriver<_Component>::Bind(pintf, true);
  }

  _ComponentDispT& operator=(_Component *pintf)
  {
    TAutoDriver<_Component>::Bind(pintf, false);
    return *this;
  }

  _ComponentDispT& operator=(_ComponentPtr pintf)
  {
    TAutoDriver<_Component>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Component));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Component);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/);
  Vbide_97::App*  __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::Components** lppcReturn/*[out,retval]*/);
  Vbide_97::Components* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDirty(VARIANT_BOOL* lpfReturn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDirty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDirty(VARIANT_BOOL lpfReturn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrReturn/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrReturn/*[in]*/);

  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::Components* Parent = {read = get_Parent};
  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   BSTR            Name = {read = get_Name};
};
typedef _ComponentDispT<_Component> _ComponentDisp;

// *********************************************************************//
// SmartIntf: TCOM_VBComponent
// Interface: _VBComponent
// *********************************************************************//
template <class T /* _VBComponent */ >
class TCOM_VBComponentT : public TComInterface<_VBComponent>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_VBComponentT() {}
  TCOM_VBComponentT(_VBComponent *intf, bool addRef = false) : TComInterface<_VBComponent>(intf, addRef) {}
  TCOM_VBComponentT(const TCOM_VBComponentT& src) : TComInterface<_VBComponent>(src) {}
  TCOM_VBComponentT& operator=(const TCOM_VBComponentT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Saved(VARIANT_BOOL* lpfReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Saved(TOLEBOOL* lpfReturn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Saved(void);
  HRESULT         __fastcall get_Name(BSTR* pbstrReturn/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pbstrReturn/*[in]*/);
  HRESULT         __fastcall get_Designer(LPDISPATCH* ppDispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Designer(void);
  HRESULT         __fastcall get_CodeModule(Vbide_97::CodeModule** ppVbaModule/*[out,retval]*/);
  HRESULT         __fastcall get_CodeModule(Vbide_97::CodeModulePtr* ppVbaModule/*[out,retval]*/);
  Vbide_97::CodeModulePtr __fastcall get_CodeModule(void);
  HRESULT         __fastcall get_Type(Vbide_97::vbext_ComponentType* pKind/*[out,retval]*/);
  Vbide_97::vbext_ComponentType __fastcall get_Type(void);
  HRESULT         __fastcall Export(BSTR FileName/*[in]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall get_Collection(Vbide_97::VBComponents** lppcReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Collection(Vbide_97::VBComponentsPtr* lppcReturn/*[out,retval]*/);
  Vbide_97::VBComponentsPtr __fastcall get_Collection(void);
  HRESULT         __fastcall get_HasOpenDesigner(VARIANT_BOOL* lpfReturn/*[out,retval]*/);
  HRESULT         __fastcall get_HasOpenDesigner(TOLEBOOL* lpfReturn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasOpenDesigner(void);
  HRESULT         __fastcall get_Properties(Vbide_97::Properties** lpppReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Properties(Vbide_97::PropertiesPtr* lpppReturn/*[out,retval]*/);
  Vbide_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall DesignerWindow(Vbide_97::WINDOW** lppcReturn/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall DesignerWindow(void);
  HRESULT         __fastcall Activate(void);

  __property   TOLEBOOL        Saved = {read = get_Saved};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Designer = {read = get_Designer};
  __property   Vbide_97::CodeModulePtr CodeModule = {read = get_CodeModule};
  __property   Vbide_97::vbext_ComponentType Type = {read = get_Type};
  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
  __property   Vbide_97::VBComponentsPtr Collection = {read = get_Collection};
  __property   TOLEBOOL        HasOpenDesigner = {read = get_HasOpenDesigner};
  __property   Vbide_97::PropertiesPtr Properties = {read = get_Properties};
};
typedef TCOM_VBComponentT<_VBComponent> TCOM_VBComponent;

// *********************************************************************//
// DispIntf:  _VBComponent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E164-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _VBComponentDispT : public TAutoDriver<_VBComponent>
{
public:
  _VBComponentDispT(){}

  _VBComponentDispT(_VBComponent *pintf)
  {
    TAutoDriver<_VBComponent>::Bind(pintf, false);
  }

  _VBComponentDispT(_VBComponentPtr pintf)
  {
    TAutoDriver<_VBComponent>::Bind(pintf, true);
  }

  _VBComponentDispT& operator=(_VBComponent *pintf)
  {
    TAutoDriver<_VBComponent>::Bind(pintf, false);
    return *this;
  }

  _VBComponentDispT& operator=(_VBComponentPtr pintf)
  {
    TAutoDriver<_VBComponent>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_VBComponent));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_VBComponent);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Saved(VARIANT_BOOL* lpfReturn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Saved(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrReturn/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrReturn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Designer(LPDISPATCH* ppDispatch/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Designer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CodeModule(Vbide_97::CodeModule** ppVbaModule/*[out,retval]*/);
  Vbide_97::CodeModule* __fastcall get_CodeModule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Vbide_97::vbext_ComponentType* pKind/*[out,retval]*/);
  Vbide_97::vbext_ComponentType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Export(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Collection(Vbide_97::VBComponents** lppcReturn/*[out,retval]*/);
  Vbide_97::VBComponents* __fastcall get_Collection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasOpenDesigner(VARIANT_BOOL* lpfReturn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HasOpenDesigner(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Vbide_97::Properties** lpppReturn/*[out,retval]*/);
  Vbide_97::Properties* __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DesignerWindow(Vbide_97::WINDOW** lppcReturn/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall DesignerWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();

  __property   VARIANT_BOOL    Saved = {read = get_Saved};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Designer = {read = get_Designer};
  __property   Vbide_97::CodeModule* CodeModule = {read = get_CodeModule};
  __property   Vbide_97::vbext_ComponentType Type = {read = get_Type};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::VBComponents* Collection = {read = get_Collection};
  __property   VARIANT_BOOL    HasOpenDesigner = {read = get_HasOpenDesigner};
  __property   Vbide_97::Properties* Properties = {read = get_Properties};
};
typedef _VBComponentDispT<_VBComponent> _VBComponentDisp;

typedef TComInterface<Property>  TCOMProperty;

// *********************************************************************//
// DispIntf:  Property
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E18C-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class PropertyDispT : public TAutoDriver<Property>
{
public:
  PropertyDispT(){}

  PropertyDispT(Property *pintf)
  {
    TAutoDriver<Property>::Bind(pintf, false);
  }

  PropertyDispT(PropertyPtr pintf)
  {
    TAutoDriver<Property>::Bind(pintf, true);
  }

  PropertyDispT& operator=(Property *pintf)
  {
    TAutoDriver<Property>::Bind(pintf, false);
    return *this;
  }

  PropertyDispT& operator=(PropertyPtr pintf)
  {
    TAutoDriver<Property>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* lppvReturn/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT lppvReturn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IndexedValue(VARIANT Index1/*[in]*/, 
                                                         VARIANT Index2/*[in,opt]*/, 
                                                         VARIANT Index3/*[in,opt]*/, 
                                                         VARIANT Index4/*[in,opt]*/, 
                                                         VARIANT* lppvReturn/*[out,retval]*/);
  VARIANT         __fastcall get_IndexedValue(VARIANT Index1/*[in]*/, 
                                              VARIANT Index2/*[in,opt]*/= TNoParam(), 
                                              VARIANT Index3/*[in,opt]*/= TNoParam(), 
                                              VARIANT Index4/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IndexedValue(VARIANT Index1/*[in]*/, 
                                                         VARIANT Index2/*[in,opt]*/, 
                                                         VARIANT Index3/*[in,opt]*/, 
                                                         VARIANT Index4/*[in,opt]*/, 
                                                         VARIANT lppvReturn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumIndices(short* lpiRetVal/*[out,retval]*/);
  short           __fastcall get_NumIndices(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Vbide_97::App** lpaReturn/*[out,retval]*/);
  Vbide_97::App*  __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::Properties** lpppReturn/*[out,retval]*/);
  Vbide_97::Properties* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* lpbstrReturn/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lpaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Collection(Vbide_97::Properties** lpppReturn/*[out,retval]*/);
  Vbide_97::Properties* __fastcall get_Collection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Object(LPUNKNOWN* lppunk/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Object(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _set_Object(LPUNKNOWN lppunk/*[in]*/);

  __property   short           NumIndices = {read = get_NumIndices};
  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   Vbide_97::Properties* Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::Properties* Collection = {read = get_Collection};
  __property   LPUNKNOWN       Object = {read = get_Object, write = _set_Object};
};
typedef PropertyDispT<Property> PropertyDisp;

// *********************************************************************//
// SmartIntf: TCOM_Properties
// Interface: _Properties
// *********************************************************************//
template <class T /* _Properties */ >
class TCOM_PropertiesT : public TComInterface<_Properties>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PropertiesT() {}
  TCOM_PropertiesT(_Properties *intf, bool addRef = false) : TComInterface<_Properties>(intf, addRef) {}
  TCOM_PropertiesT(const TCOM_PropertiesT& src) : TComInterface<_Properties>(src) {}
  TCOM_PropertiesT& operator=(const TCOM_PropertiesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Item(VARIANT index/*[in]*/, 
                                  Vbide_97::Property** lplppReturn/*[out,retval]*/);
  Vbide_97::Property* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Vbide_97::AppPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::AppPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* lppidReturn/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);

  __property   Vbide_97::AppPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
};
typedef TCOM_PropertiesT<_Properties> TCOM_Properties;

// *********************************************************************//
// DispIntf:  _Properties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E188-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _PropertiesDispT : public TAutoDriver<_Properties>
{
public:
  _PropertiesDispT(){}

  _PropertiesDispT(_Properties *pintf)
  {
    TAutoDriver<_Properties>::Bind(pintf, false);
  }

  _PropertiesDispT(_PropertiesPtr pintf)
  {
    TAutoDriver<_Properties>::Bind(pintf, true);
  }

  _PropertiesDispT& operator=(_Properties *pintf)
  {
    TAutoDriver<_Properties>::Bind(pintf, false);
    return *this;
  }

  _PropertiesDispT& operator=(_PropertiesPtr pintf)
  {
    TAutoDriver<_Properties>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Properties));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Properties);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT index/*[in]*/, 
                                             Vbide_97::Property** lplppReturn/*[out,retval]*/);
  Vbide_97::Property* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/);
  Vbide_97::App*  __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* lppidReturn/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* lplReturn/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);

  __property   Vbide_97::App*  Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
};
typedef _PropertiesDispT<_Properties> _PropertiesDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodeModule
// Interface: _CodeModule
// *********************************************************************//
template <class T /* _CodeModule */ >
class TCOM_CodeModuleT : public TComInterface<_CodeModule>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodeModuleT() {}
  TCOM_CodeModuleT(_CodeModule *intf, bool addRef = false) : TComInterface<_CodeModule>(intf, addRef) {}
  TCOM_CodeModuleT(const TCOM_CodeModuleT& src) : TComInterface<_CodeModule>(src) {}
  TCOM_CodeModuleT& operator=(const TCOM_CodeModuleT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Parent(Vbide_97::VBComponent** retval/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::VBComponentPtr* retval/*[out,retval]*/);
  Vbide_97::VBComponentPtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_VBE(Vbide_97::VBE** retval/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* retval/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT         __fastcall AddFromString(BSTR String/*[in]*/);
  HRESULT         __fastcall AddFromFile(BSTR FileName/*[in]*/);
  HRESULT         __fastcall get_Lines(long StartLine/*[in]*/, long Count/*[in]*/, 
                                       BSTR* String/*[out,retval]*/);
  BSTR            __fastcall get_Lines(long StartLine/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall get_CountOfLines(long* CountOfLines/*[out,retval]*/);
  long            __fastcall get_CountOfLines(void);
  HRESULT         __fastcall InsertLines(long Line/*[in]*/, BSTR String/*[in]*/);
  HRESULT         __fastcall DeleteLines(long StartLine/*[in]*/, long Count/*[in,def,opt]*/);
  HRESULT         __fastcall ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/);
  HRESULT         __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                               Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                               long* ProcStartLine/*[out,retval]*/);
  long            __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                               Vbide_97::vbext_ProcKind ProcKind/*[in]*/);
  HRESULT         __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                                long* ProcCountLines/*[out,retval]*/);
  long            __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                Vbide_97::vbext_ProcKind ProcKind/*[in]*/);
  HRESULT         __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                              Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                              long* ProcBodyLine/*[out,retval]*/);
  long            __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                              Vbide_97::vbext_ProcKind ProcKind/*[in]*/);
  HRESULT         __fastcall get_ProcOfLine(long Line/*[in]*/, 
                                            Vbide_97::vbext_ProcKind* ProcKind/*[out]*/, 
                                            BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_ProcOfLine(long Line/*[in]*/, 
                                            Vbide_97::vbext_ProcKind* ProcKind/*[out]*/);
  HRESULT         __fastcall get_CountOfDeclarationLines(long* pDeclCountOfLines/*[out,retval]*/);
  long            __fastcall get_CountOfDeclarationLines(void);
  HRESULT         __fastcall CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/, 
                                             long* Line/*[out,retval]*/);
  long            __fastcall CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/);
  HRESULT         __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                  long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                                  long* EndColumn/*[in,out]*/, 
                                  VARIANT_BOOL WholeWord/*[in,def,opt]*/, 
                                  VARIANT_BOOL MatchCase/*[in,def,opt]*/, 
                                  VARIANT_BOOL PatternSearch/*[in,def,opt]*/, 
                                  VARIANT_BOOL* pfFound/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                  long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                                  long* EndColumn/*[in,out]*/, 
                                  VARIANT_BOOL WholeWord/*[in,def,opt]*/, 
                                  VARIANT_BOOL MatchCase/*[in,def,opt]*/, 
                                  VARIANT_BOOL PatternSearch/*[in,def,opt]*/);
  HRESULT         __fastcall get_CodePane(Vbide_97::CodePane** CodePane/*[out,retval]*/);
  HRESULT         __fastcall get_CodePane(Vbide_97::CodePanePtr* CodePane/*[out,retval]*/);
  Vbide_97::CodePanePtr __fastcall get_CodePane(void);

  __property   Vbide_97::VBComponentPtr Parent = {read = get_Parent};
  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
  __property   BSTR            Name = {read = get_Name};
  __property   long            CountOfLines = {read = get_CountOfLines};
  __property   long            CountOfDeclarationLines = {read = get_CountOfDeclarationLines};
  __property   Vbide_97::CodePanePtr CodePane = {read = get_CodePane};
};
typedef TCOM_CodeModuleT<_CodeModule> TCOM_CodeModule;

// *********************************************************************//
// DispIntf:  _CodeModule
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E16E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _CodeModuleDispT : public TAutoDriver<_CodeModule>
{
public:
  _CodeModuleDispT(){}

  _CodeModuleDispT(_CodeModule *pintf)
  {
    TAutoDriver<_CodeModule>::Bind(pintf, false);
  }

  _CodeModuleDispT(_CodeModulePtr pintf)
  {
    TAutoDriver<_CodeModule>::Bind(pintf, true);
  }

  _CodeModuleDispT& operator=(_CodeModule *pintf)
  {
    TAutoDriver<_CodeModule>::Bind(pintf, false);
    return *this;
  }

  _CodeModuleDispT& operator=(_CodeModulePtr pintf)
  {
    TAutoDriver<_CodeModule>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodeModule));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodeModule);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::VBComponent** retval/*[out,retval]*/);
  Vbide_97::VBComponent* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** retval/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFromString(BSTR String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFromFile(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Lines(long StartLine/*[in]*/, long Count/*[in]*/, 
                                                  BSTR* String/*[out,retval]*/);
  BSTR            __fastcall get_Lines(long StartLine/*[in]*/, long Count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CountOfLines(long* CountOfLines/*[out,retval]*/);
  long            __fastcall get_CountOfLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertLines(long Line/*[in]*/, BSTR String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteLines(long StartLine/*[in]*/, 
                                                    long Count/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                                          Vbide_97::vbext_ProcKind ProcKind/*[in]*/
                                                          , long* ProcStartLine/*[out,retval]*/);
  long            __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                               Vbide_97::vbext_ProcKind ProcKind/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                           Vbide_97::vbext_ProcKind ProcKind/*[in]*/
                                                           , long* ProcCountLines/*[out,retval]*/);
  long            __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                Vbide_97::vbext_ProcKind ProcKind/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                                         Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                                         long* ProcBodyLine/*[out,retval]*/);
  long            __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                              Vbide_97::vbext_ProcKind ProcKind/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcOfLine(long Line/*[in]*/, 
                                                       Vbide_97::vbext_ProcKind* ProcKind/*[out]*/, 
                                                       BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_ProcOfLine(long Line/*[in]*/, 
                                            Vbide_97::vbext_ProcKind* ProcKind/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CountOfDeclarationLines(long* pDeclCountOfLines/*[out,retval]*/);
  long            __fastcall get_CountOfDeclarationLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateEventProc(BSTR EventName/*[in]*/, 
                                                        BSTR ObjectName/*[in]*/, 
                                                        long* Line/*[out,retval]*/);
  long            __fastcall CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                             long* StartColumn/*[in,out]*/, 
                                             long* EndLine/*[in,out]*/, long* EndColumn/*[in,out]*/
                                             , VARIANT_BOOL WholeWord/*[in,def,opt]*/, 
                                             VARIANT_BOOL MatchCase/*[in,def,opt]*/, 
                                             VARIANT_BOOL PatternSearch/*[in,def,opt]*/, 
                                             VARIANT_BOOL* pfFound/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                  long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                                  long* EndColumn/*[in,out]*/, 
                                  VARIANT_BOOL WholeWord/*[in,def,opt]*/, 
                                  VARIANT_BOOL MatchCase/*[in,def,opt]*/, 
                                  VARIANT_BOOL PatternSearch/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CodePane(Vbide_97::CodePane** CodePane/*[out,retval]*/);
  Vbide_97::CodePane* __fastcall get_CodePane(void);

  __property   Vbide_97::VBComponent* Parent = {read = get_Parent};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   BSTR            Name = {read = get_Name};
  __property   long            CountOfLines = {read = get_CountOfLines};
  __property   long            CountOfDeclarationLines = {read = get_CountOfDeclarationLines};
  __property   Vbide_97::CodePane* CodePane = {read = get_CodePane};
};
typedef _CodeModuleDispT<_CodeModule> _CodeModuleDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodePanes
// Interface: _CodePanes
// *********************************************************************//
template <class T /* _CodePanes */ >
class TCOM_CodePanesT : public TComInterface<_CodePanes>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodePanesT() {}
  TCOM_CodePanesT(_CodePanes *intf, bool addRef = false) : TComInterface<_CodePanes>(intf, addRef) {}
  TCOM_CodePanesT(const TCOM_CodePanesT& src) : TComInterface<_CodePanes>(src) {}
  TCOM_CodePanesT& operator=(const TCOM_CodePanesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Parent(Vbide_97::VBE** retval/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::VBEPtr* retval/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_VBE(Vbide_97::VBE** retval/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* retval/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall Item(VARIANT index/*[in]*/, 
                                  Vbide_97::CodePane** CodePane/*[out,retval]*/);
  Vbide_97::CodePane* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall get_Current(Vbide_97::CodePane** CodePane/*[out,retval]*/);
  HRESULT         __fastcall get_Current(Vbide_97::CodePanePtr* CodePane/*[out,retval]*/);
  Vbide_97::CodePanePtr __fastcall get_Current(void);
  HRESULT         __fastcall set_Current(Vbide_97::CodePane* CodePane/*[in]*/);
  HRESULT         __fastcall set_Current(Vbide_97::CodePanePtr CodePane/*[in]*/);

  __property   Vbide_97::VBEPtr Parent = {read = get_Parent};
  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::CodePanePtr Current = {read = get_Current, write = set_Current};
};
typedef TCOM_CodePanesT<_CodePanes> TCOM_CodePanes;

// *********************************************************************//
// DispIntf:  _CodePanes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E172-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _CodePanesDispT : public TAutoDriver<_CodePanes>
{
public:
  _CodePanesDispT(){}

  _CodePanesDispT(_CodePanes *pintf)
  {
    TAutoDriver<_CodePanes>::Bind(pintf, false);
  }

  _CodePanesDispT(_CodePanesPtr pintf)
  {
    TAutoDriver<_CodePanes>::Bind(pintf, true);
  }

  _CodePanesDispT& operator=(_CodePanes *pintf)
  {
    TAutoDriver<_CodePanes>::Bind(pintf, false);
    return *this;
  }

  _CodePanesDispT& operator=(_CodePanesPtr pintf)
  {
    TAutoDriver<_CodePanes>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodePanes));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodePanes);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::VBE** retval/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** retval/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT index/*[in]*/, 
                                             Vbide_97::CodePane** CodePane/*[out,retval]*/);
  Vbide_97::CodePane* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Current(Vbide_97::CodePane** CodePane/*[out,retval]*/);
  Vbide_97::CodePane* __fastcall get_Current(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Current(Vbide_97::CodePane* CodePane/*[in]*/);

  __property   Vbide_97::VBE*  Parent = {read = get_Parent};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   long            Count = {read = get_Count};
  __property   Vbide_97::CodePane* Current = {read = get_Current, write = set_Current};
};
typedef _CodePanesDispT<_CodePanes> _CodePanesDisp;

// *********************************************************************//
// SmartIntf: TCOM_CodePane
// Interface: _CodePane
// *********************************************************************//
template <class T /* _CodePane */ >
class TCOM_CodePaneT : public TComInterface<_CodePane>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CodePaneT() {}
  TCOM_CodePaneT(_CodePane *intf, bool addRef = false) : TComInterface<_CodePane>(intf, addRef) {}
  TCOM_CodePaneT(const TCOM_CodePaneT& src) : TComInterface<_CodePane>(src) {}
  TCOM_CodePaneT& operator=(const TCOM_CodePaneT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Collection(Vbide_97::CodePanes** retval/*[out,retval]*/);
  HRESULT         __fastcall get_Collection(Vbide_97::CodePanesPtr* retval/*[out,retval]*/);
  Vbide_97::CodePanesPtr __fastcall get_Collection(void);
  HRESULT         __fastcall get_VBE(Vbide_97::VBE** retval/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* retval/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall get_Window(Vbide_97::WINDOW** retval/*[out,retval]*/);
  HRESULT         __fastcall get_Window(Vbide_97::WINDOWPtr* retval/*[out,retval]*/);
  Vbide_97::WINDOWPtr __fastcall get_Window(void);
  HRESULT         __fastcall GetSelection(long* StartLine/*[out]*/, long* StartColumn/*[out]*/, 
                                          long* EndLine/*[out]*/, long* EndColumn/*[out]*/);
  HRESULT         __fastcall SetSelection(long StartLine/*[in]*/, long StartColumn/*[in]*/, 
                                          long EndLine/*[in]*/, long EndColumn/*[in]*/);
  HRESULT         __fastcall get_TopLine(long* TopLine/*[out,retval]*/);
  long            __fastcall get_TopLine(void);
  HRESULT         __fastcall set_TopLine(long TopLine/*[in]*/);
  HRESULT         __fastcall get_CountOfVisibleLines(long* CountOfVisibleLines/*[out,retval]*/);
  long            __fastcall get_CountOfVisibleLines(void);
  HRESULT         __fastcall get_CodeModule(Vbide_97::CodeModule** CodeModule/*[out,retval]*/);
  HRESULT         __fastcall get_CodeModule(Vbide_97::CodeModulePtr* CodeModule/*[out,retval]*/);
  Vbide_97::CodeModulePtr __fastcall get_CodeModule(void);
  HRESULT         __fastcall Show(void);
  HRESULT         __fastcall get_CodePaneView(Vbide_97::vbext_CodePaneview* pCodePaneview/*[out,retval]*/);
  Vbide_97::vbext_CodePaneview __fastcall get_CodePaneView(void);

  __property   Vbide_97::CodePanesPtr Collection = {read = get_Collection};
  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
  __property   Vbide_97::WINDOWPtr Window = {read = get_Window};
  __property   long            TopLine = {read = get_TopLine, write = set_TopLine};
  __property   long            CountOfVisibleLines = {read = get_CountOfVisibleLines};
  __property   Vbide_97::CodeModulePtr CodeModule = {read = get_CodeModule};
  __property   Vbide_97::vbext_CodePaneview CodePaneView = {read = get_CodePaneView};
};
typedef TCOM_CodePaneT<_CodePane> TCOM_CodePane;

// *********************************************************************//
// DispIntf:  _CodePane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E176-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _CodePaneDispT : public TAutoDriver<_CodePane>
{
public:
  _CodePaneDispT(){}

  _CodePaneDispT(_CodePane *pintf)
  {
    TAutoDriver<_CodePane>::Bind(pintf, false);
  }

  _CodePaneDispT(_CodePanePtr pintf)
  {
    TAutoDriver<_CodePane>::Bind(pintf, true);
  }

  _CodePaneDispT& operator=(_CodePane *pintf)
  {
    TAutoDriver<_CodePane>::Bind(pintf, false);
    return *this;
  }

  _CodePaneDispT& operator=(_CodePanePtr pintf)
  {
    TAutoDriver<_CodePane>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CodePane));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CodePane);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Collection(Vbide_97::CodePanes** retval/*[out,retval]*/);
  Vbide_97::CodePanes* __fastcall get_Collection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** retval/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Window(Vbide_97::WINDOW** retval/*[out,retval]*/);
  Vbide_97::WINDOW* __fastcall get_Window(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetSelection(long* StartLine/*[out]*/, 
                                                     long* StartColumn/*[out]*/, 
                                                     long* EndLine/*[out]*/, 
                                                     long* EndColumn/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetSelection(long StartLine/*[in]*/, 
                                                     long StartColumn/*[in]*/, long EndLine/*[in]*/
                                                     , long EndColumn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopLine(long* TopLine/*[out,retval]*/);
  long            __fastcall get_TopLine(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TopLine(long TopLine/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CountOfVisibleLines(long* CountOfVisibleLines/*[out,retval]*/);
  long            __fastcall get_CountOfVisibleLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CodeModule(Vbide_97::CodeModule** CodeModule/*[out,retval]*/);
  Vbide_97::CodeModule* __fastcall get_CodeModule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Show();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CodePaneView(Vbide_97::vbext_CodePaneview* pCodePaneview/*[out,retval]*/);
  Vbide_97::vbext_CodePaneview __fastcall get_CodePaneView(void);

  __property   Vbide_97::CodePanes* Collection = {read = get_Collection};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   Vbide_97::WINDOW* Window = {read = get_Window};
  __property   long            TopLine = {read = get_TopLine, write = set_TopLine};
  __property   long            CountOfVisibleLines = {read = get_CountOfVisibleLines};
  __property   Vbide_97::CodeModule* CodeModule = {read = get_CodeModule};
  __property   Vbide_97::vbext_CodePaneview CodePaneView = {read = get_CodePaneView};
};
typedef _CodePaneDispT<_CodePane> _CodePaneDisp;

// *********************************************************************//
// SmartIntf: TCOM_References
// Interface: _References
// *********************************************************************//
template <class T /* _References */ >
class TCOM_ReferencesT : public TComInterface<_References>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ReferencesT() {}
  TCOM_ReferencesT(_References *intf, bool addRef = false) : TComInterface<_References>(intf, addRef) {}
  TCOM_ReferencesT(const TCOM_ReferencesT& src) : TComInterface<_References>(src) {}
  TCOM_ReferencesT& operator=(const TCOM_ReferencesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Parent(Vbide_97::VBProject** retval/*[out,retval]*/);
  HRESULT         __fastcall get_Parent(Vbide_97::VBProjectPtr* retval/*[out,retval]*/);
  Vbide_97::VBProjectPtr __fastcall get_Parent(void);
  HRESULT         __fastcall get_VBE(Vbide_97::VBE** retval/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_97::VBEPtr* retval/*[out,retval]*/);
  Vbide_97::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall Item(VARIANT index/*[in]*/, 
                                  Vbide_97::Reference** Reference/*[out,retval]*/);
  Vbide_97::Reference* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT         __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/, 
                                         Vbide_97::Reference** Reference/*[out,retval]*/);
  Vbide_97::Reference* __fastcall AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, 
                                              long Minor/*[in]*/);
  HRESULT         __fastcall AddFromFile(BSTR FileName/*[in]*/, 
                                         Vbide_97::Reference** Reference/*[out,retval]*/);
  Vbide_97::Reference* __fastcall AddFromFile(BSTR FileName/*[in]*/);
  HRESULT         __fastcall Remove(Vbide_97::Reference* Reference/*[in]*/);

  __property   Vbide_97::VBProjectPtr Parent = {read = get_Parent};
  __property   Vbide_97::VBEPtr VBE = {read = get_VBE};
  __property   long            Count = {read = get_Count};
};
typedef TCOM_ReferencesT<_References> TCOM_References;

// *********************************************************************//
// DispIntf:  _References
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17A-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _ReferencesDispT : public TAutoDriver<_References>
{
public:
  _ReferencesDispT(){}

  _ReferencesDispT(_References *pintf)
  {
    TAutoDriver<_References>::Bind(pintf, false);
  }

  _ReferencesDispT(_ReferencesPtr pintf)
  {
    TAutoDriver<_References>::Bind(pintf, true);
  }

  _ReferencesDispT& operator=(_References *pintf)
  {
    TAutoDriver<_References>::Bind(pintf, false);
    return *this;
  }

  _ReferencesDispT& operator=(_ReferencesPtr pintf)
  {
    TAutoDriver<_References>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_References));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_References);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Vbide_97::VBProject** retval/*[out,retval]*/);
  Vbide_97::VBProject* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** retval/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT index/*[in]*/, 
                                             Vbide_97::Reference** Reference/*[out,retval]*/);
  Vbide_97::Reference* __fastcall Item(VARIANT index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, 
                                                    long Minor/*[in]*/, 
                                                    Vbide_97::Reference** Reference/*[out,retval]*/);
  Vbide_97::Reference* __fastcall AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, 
                                              long Minor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFromFile(BSTR FileName/*[in]*/, 
                                                    Vbide_97::Reference** Reference/*[out,retval]*/);
  Vbide_97::Reference* __fastcall AddFromFile(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(Vbide_97::Reference* Reference/*[in]*/);

  __property   Vbide_97::VBProject* Parent = {read = get_Parent};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   long            Count = {read = get_Count};
};
typedef _ReferencesDispT<_References> _ReferencesDisp;

typedef TComInterface<Reference>  TCOMReference;

// *********************************************************************//
// DispIntf:  Reference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ReferenceDispT : public TAutoDriver<Reference>
{
public:
  ReferenceDispT(){}

  ReferenceDispT(Reference *pintf)
  {
    TAutoDriver<Reference>::Bind(pintf, false);
  }

  ReferenceDispT(ReferencePtr pintf)
  {
    TAutoDriver<Reference>::Bind(pintf, true);
  }

  ReferenceDispT& operator=(Reference *pintf)
  {
    TAutoDriver<Reference>::Bind(pintf, false);
    return *this;
  }

  ReferenceDispT& operator=(ReferencePtr pintf)
  {
    TAutoDriver<Reference>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Collection(Vbide_97::References** retval/*[out,retval]*/);
  Vbide_97::References* __fastcall get_Collection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/);
  Vbide_97::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Guid(BSTR* pbstrGuid/*[out,retval]*/);
  BSTR            __fastcall get_Guid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Major(long* pMajor/*[out,retval]*/);
  long            __fastcall get_Major(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Minor(long* pMinor/*[out,retval]*/);
  long            __fastcall get_Minor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullPath(BSTR* pbstrLocation/*[out,retval]*/);
  BSTR            __fastcall get_FullPath(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(VARIANT_BOOL* pfIsDefault/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsBroken(VARIANT_BOOL* pfIsBroken/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsBroken(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Vbide_97::vbext_RefKind* pKind/*[out,retval]*/);
  Vbide_97::vbext_RefKind __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);

  __property   Vbide_97::References* Collection = {read = get_Collection};
  __property   Vbide_97::VBE*  VBE = {read = get_VBE};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Guid = {read = get_Guid};
  __property   long            Major = {read = get_Major};
  __property   long            Minor = {read = get_Minor};
  __property   BSTR            FullPath = {read = get_FullPath};
  __property   VARIANT_BOOL    BuiltIn = {read = get_BuiltIn};
  __property   VARIANT_BOOL    IsBroken = {read = get_IsBroken};
  __property   Vbide_97::vbext_RefKind Type = {read = get_Type};
  __property   BSTR            Description = {read = get_Description};
};
typedef ReferenceDispT<Reference> ReferenceDisp;

// *********************************************************************//
// DispIntf:  _dispReferences_Events
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {CDDE3804-2064-11CF-867F-00AA005FF34A}
// *********************************************************************//
template <class T>
class _dispReferences_EventsDispT : public TAutoDriver<_dispReferences_Events>
{
public:
  _dispReferences_EventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Vbide_97::Reference* Reference);
  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Vbide_97::Reference* Reference);

};
typedef _dispReferences_EventsDispT<_dispReferences_Events> _dispReferences_EventsDisp;

// *********************************************************************//
// DispIntf:  Application
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E158-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AppDispT<T>::get_Version(BSTR* lpbstrReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpbstrReturn /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AppDispT<T>::get_Version(void)
{
  BSTR lpbstrReturn;
  this->get_Version((BSTR*)&lpbstrReturn);
  return lpbstrReturn;
}

// *********************************************************************//
// DispIntf:  VBE
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E166-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_VBProjects(Vbide_97::VBProjects** lppptReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBProjects"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBProjects**)lppptReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBProjects* __fastcall
VBEDispT<T>::get_VBProjects(void)
{
  Vbide_97::VBProjects* lppptReturn;
  this->get_VBProjects((Vbide_97::VBProjects**)&lppptReturn);
  return lppptReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_CommandBars(Office_97::CommandBars** ppcbs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBars**)ppcbs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBars* __fastcall
VBEDispT<T>::get_CommandBars(void)
{
  Office_97::CommandBars* ppcbs;
  this->get_CommandBars((Office_97::CommandBars**)&ppcbs);
  return ppcbs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_CodePanes(Vbide_97::CodePanes** ppCodePanes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodePanes"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::CodePanes**)ppCodePanes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::CodePanes* __fastcall
VBEDispT<T>::get_CodePanes(void)
{
  Vbide_97::CodePanes* ppCodePanes;
  this->get_CodePanes((Vbide_97::CodePanes**)&ppCodePanes);
  return ppCodePanes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_Windows(Vbide_97::Windows** ppwnsVBWindows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Windows"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Windows**)ppwnsVBWindows /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::Windows* __fastcall
VBEDispT<T>::get_Windows(void)
{
  Vbide_97::Windows* ppwnsVBWindows;
  this->get_Windows((Vbide_97::Windows**)&ppwnsVBWindows);
  return ppwnsVBWindows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_Events(Vbide_97::Events** ppevtEvents/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Events"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Events**)ppevtEvents /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::Events* __fastcall
VBEDispT<T>::get_Events(void)
{
  Vbide_97::Events* ppevtEvents;
  this->get_Events((Vbide_97::Events**)&ppevtEvents);
  return ppevtEvents;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_ActiveVBProject(Vbide_97::VBProject** lppptReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveVBProject"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBProject**)lppptReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBProject* __fastcall
VBEDispT<T>::get_ActiveVBProject(void)
{
  Vbide_97::VBProject* lppptReturn;
  this->get_ActiveVBProject((Vbide_97::VBProject**)&lppptReturn);
  return lppptReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::_set_ActiveVBProject(Vbide_97::VBProject* lppptReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveVBProject"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBProject*)lppptReturn /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_SelectedVBComponent(Vbide_97::VBComponent** lppscReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedVBComponent"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBComponent**)lppscReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBComponent* __fastcall
VBEDispT<T>::get_SelectedVBComponent(void)
{
  Vbide_97::VBComponent* lppscReturn;
  this->get_SelectedVBComponent((Vbide_97::VBComponent**)&lppscReturn);
  return lppscReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_MainWindow(Vbide_97::WINDOW** ppwin/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MainWindow"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::WINDOW**)ppwin /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::WINDOW* __fastcall
VBEDispT<T>::get_MainWindow(void)
{
  Vbide_97::WINDOW* ppwin;
  this->get_MainWindow((Vbide_97::WINDOW**)&ppwin);
  return ppwin;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_ActiveWindow(Vbide_97::WINDOW** ppwinActive/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveWindow"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::WINDOW**)ppwinActive /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::WINDOW* __fastcall
VBEDispT<T>::get_ActiveWindow(void)
{
  Vbide_97::WINDOW* ppwinActive;
  this->get_ActiveWindow((Vbide_97::WINDOW**)&ppwinActive);
  return ppwinActive;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_ActiveCodePane(Vbide_97::CodePane** ppCodePane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveCodePane"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::CodePane**)ppCodePane /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::CodePane* __fastcall
VBEDispT<T>::get_ActiveCodePane(void)
{
  Vbide_97::CodePane* ppCodePane;
  this->get_ActiveCodePane((Vbide_97::CodePane**)&ppCodePane);
  return ppCodePane;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::_set_ActiveCodePane(Vbide_97::CodePane* ppCodePane/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveCodePane"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::CodePane*)ppCodePane /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
VBEDispT<T>::get_Version(BSTR* lpbstrReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpbstrReturn /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
VBEDispT<T>::get_Version(void)
{
  BSTR lpbstrReturn;
  this->get_Version((BSTR*)&lpbstrReturn);
  return lpbstrReturn;
}

// *********************************************************************//
// DispIntf:  Window
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E16B-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
WINDOWDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_VBE((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Collection(Vbide_97::Windows** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collection"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Windows**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::Windows* __fastcall
WINDOWDispT<T>::get_Collection(void)
{
  Vbide_97::Windows* lppaReturn;
  this->get_Collection((Vbide_97::Windows**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(99));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Caption(BSTR* pbstrTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTitle /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WINDOWDispT<T>::get_Caption(void)
{
  BSTR pbstrTitle;
  this->get_Caption((BSTR*)&pbstrTitle);
  return pbstrTitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Visible(VARIANT_BOOL* pfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WINDOWDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pfVisible;
  this->get_Visible((VARIANT_BOOL*)&pfVisible);
  return pfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_Visible(VARIANT_BOOL pfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Left(long* plLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plLeft /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::get_Left(void)
{
  long plLeft;
  this->get_Left((long*)&plLeft);
  return plLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_Left(long plLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = plLeft /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Top(long* plTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plTop /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::get_Top(void)
{
  long plTop;
  this->get_Top((long*)&plTop);
  return plTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_Top(long plTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = plTop /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Width(long* plWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plWidth /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::get_Width(void)
{
  long plWidth;
  this->get_Width((long*)&plWidth);
  return plWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_Width(long plWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = plWidth /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Height(long* plHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plHeight /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::get_Height(void)
{
  long plHeight;
  this->get_Height((long*)&plHeight);
  return plHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_Height(long plHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = plHeight /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_WindowState(Vbide_97::vbext_WindowState* plWindowState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plWindowState /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::vbext_WindowState __fastcall
WINDOWDispT<T>::get_WindowState(void)
{
  Vbide_97::vbext_WindowState plWindowState;
  this->get_WindowState((Vbide_97::vbext_WindowState*)&plWindowState);
  return plWindowState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::set_WindowState(Vbide_97::vbext_WindowState plWindowState/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowState"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)plWindowState /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(111));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_Type(Vbide_97::vbext_WindowType* pKind/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pKind /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::vbext_WindowType __fastcall
WINDOWDispT<T>::get_Type(void)
{
  Vbide_97::vbext_WindowType pKind;
  this->get_Type((Vbide_97::vbext_WindowType*)&pKind);
  return pKind;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::SetKind(Vbide_97::vbext_WindowType eKind/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetKind"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)eKind /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_LinkedWindows(Vbide_97::LinkedWindows** ppwnsCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkedWindows"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::LinkedWindows**)ppwnsCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::LinkedWindows* __fastcall
WINDOWDispT<T>::get_LinkedWindows(void)
{
  Vbide_97::LinkedWindows* ppwnsCollection;
  this->get_LinkedWindows((Vbide_97::LinkedWindows**)&ppwnsCollection);
  return ppwnsCollection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_LinkedWindowFrame(Vbide_97::WINDOW** ppwinFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkedWindowFrame"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::WINDOW**)ppwinFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::WINDOW* __fastcall
WINDOWDispT<T>::get_LinkedWindowFrame(void)
{
  Vbide_97::WINDOW* ppwinFrame;
  this->get_LinkedWindowFrame((Vbide_97::WINDOW**)&ppwinFrame);
  return ppwinFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::Detach()
{
  _TDispID _dispid(*this, OLETEXT("Detach"), DISPID(118));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::Attach(long lWindowHandle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attach"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = lWindowHandle /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WINDOWDispT<T>::get_HWnd(long* plWindowHandle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HWnd"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plWindowHandle /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WINDOWDispT<T>::get_HWnd(void)
{
  long plWindowHandle;
  this->get_HWnd((long*)&plWindowHandle);
  return plWindowHandle;
}

// *********************************************************************//
// SmartIntf: TCOM_Windoz
// Interface: _Windoz
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_WindozT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_WindozT<T>::get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)lppaReturn);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_WindozT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
  return (Vbide_97::VBEPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_WindozT<T>::get_Parent(Vbide_97::App** lppptReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(lppptReturn);
}

template <class T> HRESULT __fastcall
TCOM_WindozT<T>::get_Parent(Vbide_97::AppPtr* lppptReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(App**)lppptReturn);
}

template <class T> Vbide_97::AppPtr __fastcall
TCOM_WindozT<T>::get_Parent(void)
{
  Vbide_97::App* lppptReturn;
  OLECHECK(this->get_Parent((Vbide_97::App**)&lppptReturn));
  return (Vbide_97::AppPtr)lppptReturn;
}

template <class T> HRESULT __fastcall
TCOM_WindozT<T>::Item(VARIANT index/*[in]*/, Vbide_97::WINDOW** lppcReturn/*[out,retval]*/)
{
  return (*this)->Item(index, lppcReturn);
}

template <class T> Vbide_97::WINDOW* __fastcall
TCOM_WindozT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::WINDOW* lppcReturn;
  OLECHECK(this->Item(, (Vbide_97::WINDOW**)&lppcReturn));
  return lppcReturn;
}

template <class T> HRESULT __fastcall
TCOM_WindozT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  return (*this)->get_Count(lplReturn);
}

template <class T> long __fastcall
TCOM_WindozT<T>::get_Count(void)
{
  long lplReturn;
  OLECHECK(this->get_Count((long*)&lplReturn));
  return lplReturn;
}

template <class T> HRESULT __fastcall
TCOM_WindozT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  return (*this)->_NewEnum(lppiuReturn);
}

template <class T> LPUNKNOWN __fastcall
TCOM_WindozT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
  return lppiuReturn;
}

// *********************************************************************//
// DispIntf:  _Windows
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E16A-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_WindozDispT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_WindozDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_VBE((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_WindozDispT<T>::get_Parent(Vbide_97::App** lppptReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::App**)lppptReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::App* __fastcall
_WindozDispT<T>::get_Parent(void)
{
  Vbide_97::App* lppptReturn;
  this->get_Parent((Vbide_97::App**)&lppptReturn);
  return lppptReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_WindozDispT<T>::Item(VARIANT index/*[in]*/, Vbide_97::WINDOW** lppcReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::WINDOW**)lppcReturn /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::WINDOW* __fastcall
_WindozDispT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::WINDOW* lppcReturn;
  this->Item(index, (Vbide_97::WINDOW**)&lppcReturn);
  return lppcReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_WindozDispT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lplReturn /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_WindozDispT<T>::get_Count(void)
{
  long lplReturn;
  this->get_Count((long*)&lplReturn);
  return lplReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_WindozDispT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lppiuReturn /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_WindozDispT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  this->_NewEnum((LPUNKNOWN*)&lppiuReturn);
  return lppiuReturn;
}

// *********************************************************************//
// SmartIntf: TCOM_LinkedWindows
// Interface: _LinkedWindows
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_LinkedWindowsT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_LinkedWindowsT<T>::get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)lppaReturn);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_LinkedWindowsT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
  return (Vbide_97::VBEPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_LinkedWindowsT<T>::get_Parent(Vbide_97::WINDOW** ppptReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(ppptReturn);
}

template <class T> HRESULT __fastcall
TCOM_LinkedWindowsT<T>::get_Parent(Vbide_97::WINDOWPtr* ppptReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(WINDOW**)ppptReturn);
}

template <class T> Vbide_97::WINDOWPtr __fastcall
TCOM_LinkedWindowsT<T>::get_Parent(void)
{
  Vbide_97::WINDOW* ppptReturn;
  OLECHECK(this->get_Parent((Vbide_97::WINDOW**)&ppptReturn));
  return (Vbide_97::WINDOWPtr)ppptReturn;
}

template <class T> HRESULT __fastcall
TCOM_LinkedWindowsT<T>::Item(VARIANT index/*[in]*/, Vbide_97::WINDOW** lppcReturn/*[out,retval]*/)
{
  return (*this)->Item(index, lppcReturn);
}

template <class T> Vbide_97::WINDOW* __fastcall
TCOM_LinkedWindowsT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::WINDOW* lppcReturn;
  OLECHECK(this->Item(, (Vbide_97::WINDOW**)&lppcReturn));
  return lppcReturn;
}

template <class T> HRESULT __fastcall
TCOM_LinkedWindowsT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  return (*this)->get_Count(lplReturn);
}

template <class T> long __fastcall
TCOM_LinkedWindowsT<T>::get_Count(void)
{
  long lplReturn;
  OLECHECK(this->get_Count((long*)&lplReturn));
  return lplReturn;
}

template <class T> HRESULT __fastcall
TCOM_LinkedWindowsT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  return (*this)->_NewEnum(lppiuReturn);
}

template <class T> LPUNKNOWN __fastcall
TCOM_LinkedWindowsT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
  return lppiuReturn;
}

template <class T> HRESULT __fastcall
TCOM_LinkedWindowsT<T>::Remove(Vbide_97::WINDOW* Window/*[in]*/)
{
  return (*this)->Remove(Window);
}

template <class T> HRESULT __fastcall
TCOM_LinkedWindowsT<T>::Add(Vbide_97::WINDOW* Window/*[in]*/)
{
  return (*this)->Add(Window);
}

// *********************************************************************//
// DispIntf:  _LinkedWindows
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E16C-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LinkedWindowsDispT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_LinkedWindowsDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_VBE((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LinkedWindowsDispT<T>::get_Parent(Vbide_97::WINDOW** ppptReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::WINDOW**)ppptReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::WINDOW* __fastcall
_LinkedWindowsDispT<T>::get_Parent(void)
{
  Vbide_97::WINDOW* ppptReturn;
  this->get_Parent((Vbide_97::WINDOW**)&ppptReturn);
  return ppptReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LinkedWindowsDispT<T>::Item(VARIANT index/*[in]*/, Vbide_97::WINDOW** lppcReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::WINDOW**)lppcReturn /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::WINDOW* __fastcall
_LinkedWindowsDispT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::WINDOW* lppcReturn;
  this->Item(index, (Vbide_97::WINDOW**)&lppcReturn);
  return lppcReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LinkedWindowsDispT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lplReturn /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_LinkedWindowsDispT<T>::get_Count(void)
{
  long lplReturn;
  this->get_Count((long*)&lplReturn);
  return lplReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LinkedWindowsDispT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lppiuReturn /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_LinkedWindowsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  this->_NewEnum((LPUNKNOWN*)&lppiuReturn);
  return lppiuReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LinkedWindowsDispT<T>::Remove(Vbide_97::WINDOW* Window/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::WINDOW*)Window /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LinkedWindowsDispT<T>::Add(Vbide_97::WINDOW* Window/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::WINDOW*)Window /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Events
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E167-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EventsDispT<T>::get_ReferencesEvents(Vbide_97::VBProject* VBProject/*[in]*/, 
                                     Vbide_97::ReferencesEvents** prceNew/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReferencesEvents"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBProject*)VBProject /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr((LPUNKNOWN*)(Vbide_97::ReferencesEvents**)prceNew /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::ReferencesEvents* __fastcall
EventsDispT<T>::get_ReferencesEvents(Vbide_97::VBProject* VBProject/*[in]*/)
{
  Vbide_97::ReferencesEvents* prceNew;
  this->get_ReferencesEvents(VBProject, (Vbide_97::ReferencesEvents**)&prceNew);
  return prceNew;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
EventsDispT<T>::get_CommandBarEvents(LPDISPATCH CommandBarControl/*[in]*/, 
                                     Vbide_97::CommandBarEvents** prceNew/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBarEvents"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = CommandBarControl /*[VT_DISPATCH:0]*/;
  return OutRetValSetterPtr((LPUNKNOWN*)(Vbide_97::CommandBarEvents**)prceNew /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::CommandBarEvents* __fastcall
EventsDispT<T>::get_CommandBarEvents(LPDISPATCH CommandBarControl/*[in]*/)
{
  Vbide_97::CommandBarEvents* prceNew;
  this->get_CommandBarEvents(CommandBarControl, (Vbide_97::CommandBarEvents**)&prceNew);
  return prceNew;
}

// *********************************************************************//
// DispIntf:  _dispVBProjectsEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E103-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispVBProjectsEventsDispT<T>::ItemAdded(Vbide_97::VBProject* VBProject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemAdded"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBProject*)VBProject /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispVBProjectsEventsDispT<T>::ItemRemoved(Vbide_97::VBProject* VBProject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemRemoved"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBProject*)VBProject /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispVBProjectsEventsDispT<T>::ItemRenamed(Vbide_97::VBProject* VBProject/*[in]*/, 
                                           BSTR OldName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemRenamed"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBProject*)VBProject /*[VT_USERDEFINED:1]*/;
  _args[2] = OldName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispVBProjectsEventsDispT<T>::ItemActivated(Vbide_97::VBProject* VBProject/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemActivated"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBProject*)VBProject /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _dispVBComponentsEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E116-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispVBComponentsEventsDispT<T>::ItemAdded(Vbide_97::VBComponent* VBComponent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemAdded"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispVBComponentsEventsDispT<T>::ItemRemoved(Vbide_97::VBComponent* VBComponent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemRemoved"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispVBComponentsEventsDispT<T>::ItemRenamed(Vbide_97::VBComponent* VBComponent/*[in]*/, 
                                             BSTR OldName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemRenamed"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
  _args[2] = OldName /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispVBComponentsEventsDispT<T>::ItemSelected(Vbide_97::VBComponent* VBComponent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemSelected"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispVBComponentsEventsDispT<T>::ItemActivated(Vbide_97::VBComponent* VBComponent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemActivated"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispVBComponentsEventsDispT<T>::ItemReloaded(Vbide_97::VBComponent* VBComponent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemReloaded"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_ReferencesEvents
// Interface: _ReferencesEvents
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _dispReferencesEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E118-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispReferencesEventsDispT<T>::ItemAdded(Vbide_97::Reference* Reference/*[in]*/)
{
  _TDispID _dispid(/* ItemAdded */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispReferencesEventsDispT<T>::ItemRemoved(Vbide_97::Reference* Reference/*[in]*/)
{
  _TDispID _dispid(/* ItemRemoved */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_CommandBarControlEvents
// Interface: _CommandBarControlEvents
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _dispCommandBarControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {0002E131-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispCommandBarControlEventsDispT<T>::Click(LPDISPATCH CommandBarControl/*[in]*/, 
                                            VARIANT_BOOL* handled/*[in]*/, 
                                            VARIANT_BOOL* CancelDefault/*[in]*/)
{
  _TDispID _dispid(/* Click */ DISPID(1));
  TAutoArgs<3> _args;
  _args[1] = CommandBarControl /*[VT_DISPATCH:0]*/;
  _args[2] = handled /*[VT_BOOL:1]*/;
  _args[3] = CancelDefault /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_ProjectTemplate
// Interface: _ProjectTemplate
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ProjectTemplateT<T>::get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Application(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_ProjectTemplateT<T>::get_Application(Vbide_97::AppPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Application(App**)lppaReturn);
}

template <class T> Vbide_97::AppPtr __fastcall
TCOM_ProjectTemplateT<T>::get_Application(void)
{
  Vbide_97::App* lppaReturn;
  OLECHECK(this->get_Application((Vbide_97::App**)&lppaReturn));
  return (Vbide_97::AppPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_ProjectTemplateT<T>::get_Parent(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_ProjectTemplateT<T>::get_Parent(Vbide_97::AppPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(App**)lppaReturn);
}

template <class T> Vbide_97::AppPtr __fastcall
TCOM_ProjectTemplateT<T>::get_Parent(void)
{
  Vbide_97::App* lppaReturn;
  OLECHECK(this->get_Parent((Vbide_97::App**)&lppaReturn));
  return (Vbide_97::AppPtr)lppaReturn;
}

// *********************************************************************//
// DispIntf:  _ProjectTemplate
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E159-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ProjectTemplateDispT<T>::get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::App**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::App* __fastcall
_ProjectTemplateDispT<T>::get_Application(void)
{
  Vbide_97::App* lppaReturn;
  this->get_Application((Vbide_97::App**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ProjectTemplateDispT<T>::get_Parent(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::App**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::App* __fastcall
_ProjectTemplateDispT<T>::get_Parent(void)
{
  Vbide_97::App* lppaReturn;
  this->get_Parent((Vbide_97::App**)&lppaReturn);
  return lppaReturn;
}

// *********************************************************************//
// SmartIntf: TCOM_VBProject
// Interface: _VBProject
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_HelpFile(BSTR* lpbstrHelpFile/*[out,retval]*/)
{
  return (*this)->get_HelpFile(lpbstrHelpFile);
}

template <class T> BSTR __fastcall
TCOM_VBProjectT<T>::get_HelpFile(void)
{
  BSTR lpbstrHelpFile = 0;
  OLECHECK(this->get_HelpFile((BSTR*)&lpbstrHelpFile));
  return lpbstrHelpFile;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::set_HelpFile(BSTR lpbstrHelpFile/*[in]*/)
{
  return (*this)->set_HelpFile(lpbstrHelpFile);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_HelpContextID(long* lpdwContextID/*[out,retval]*/)
{
  return (*this)->get_HelpContextID(lpdwContextID);
}

template <class T> long __fastcall
TCOM_VBProjectT<T>::get_HelpContextID(void)
{
  long lpdwContextID;
  OLECHECK(this->get_HelpContextID((long*)&lpdwContextID));
  return lpdwContextID;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::set_HelpContextID(long lpdwContextID/*[in]*/)
{
  return (*this)->set_HelpContextID(lpdwContextID);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_Description(BSTR* lpbstrDescription/*[out,retval]*/)
{
  return (*this)->get_Description(lpbstrDescription);
}

template <class T> BSTR __fastcall
TCOM_VBProjectT<T>::get_Description(void)
{
  BSTR lpbstrDescription = 0;
  OLECHECK(this->get_Description((BSTR*)&lpbstrDescription));
  return lpbstrDescription;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::set_Description(BSTR lpbstrDescription/*[in]*/)
{
  return (*this)->set_Description(lpbstrDescription);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_Mode(Vbide_97::vbext_VBAMode* lpVbaMode/*[out,retval]*/)
{
  return (*this)->get_Mode(lpVbaMode);
}

template <class T> Vbide_97::vbext_VBAMode __fastcall
TCOM_VBProjectT<T>::get_Mode(void)
{
  Vbide_97::vbext_VBAMode lpVbaMode;
  OLECHECK(this->get_Mode((Vbide_97::vbext_VBAMode*)&lpVbaMode));
  return lpVbaMode;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_References(Vbide_97::References** lppReferences/*[out,retval]*/)
{
  return (*this)->get_References(lppReferences);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_References(Vbide_97::ReferencesPtr* lppReferences/*[out,retval]*/)
{
  return (*this)->get_References(References**)lppReferences);
}

template <class T> Vbide_97::ReferencesPtr __fastcall
TCOM_VBProjectT<T>::get_References(void)
{
  Vbide_97::References* lppReferences;
  OLECHECK(this->get_References((Vbide_97::References**)&lppReferences));
  return (Vbide_97::ReferencesPtr)lppReferences;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_Name(BSTR* lpbstrName/*[out,retval]*/)
{
  return (*this)->get_Name(lpbstrName);
}

template <class T> BSTR __fastcall
TCOM_VBProjectT<T>::get_Name(void)
{
  BSTR lpbstrName = 0;
  OLECHECK(this->get_Name((BSTR*)&lpbstrName));
  return lpbstrName;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::set_Name(BSTR lpbstrName/*[in]*/)
{
  return (*this)->set_Name(lpbstrName);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)lppaReturn);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_VBProjectT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
  return (Vbide_97::VBEPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_Collection(Vbide_97::VBProjects** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Collection(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_Collection(Vbide_97::VBProjectsPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Collection(VBProjects**)lppaReturn);
}

template <class T> Vbide_97::VBProjectsPtr __fastcall
TCOM_VBProjectT<T>::get_Collection(void)
{
  Vbide_97::VBProjects* lppaReturn;
  OLECHECK(this->get_Collection((Vbide_97::VBProjects**)&lppaReturn));
  return (Vbide_97::VBProjectsPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_Protection(Vbide_97::vbext_ProjectProtection* lpProtection/*[out,retval]*/)
{
  return (*this)->get_Protection(lpProtection);
}

template <class T> Vbide_97::vbext_ProjectProtection __fastcall
TCOM_VBProjectT<T>::get_Protection(void)
{
  Vbide_97::vbext_ProjectProtection lpProtection;
  OLECHECK(this->get_Protection((Vbide_97::vbext_ProjectProtection*)&lpProtection));
  return lpProtection;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_Saved(VARIANT_BOOL* lpfReturn/*[out,retval]*/)
{
  return (*this)->get_Saved(lpfReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_Saved(TOLEBOOL* lpfReturn/*[out,retval]*/)
{
  return (*this)->get_Saved(VARIANT_BOOL*)lpfReturn);
}

template <class T> TOLEBOOL __fastcall
TCOM_VBProjectT<T>::get_Saved(void)
{
  VARIANT_BOOL lpfReturn;
  OLECHECK(this->get_Saved((VARIANT_BOOL*)&lpfReturn));
  return (TOLEBOOL)lpfReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_VBComponents(Vbide_97::VBComponents** lppcReturn/*[out,retval]*/)
{
  return (*this)->get_VBComponents(lppcReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectT<T>::get_VBComponents(Vbide_97::VBComponentsPtr* lppcReturn/*[out,retval]*/)
{
  return (*this)->get_VBComponents(VBComponents**)lppcReturn);
}

template <class T> Vbide_97::VBComponentsPtr __fastcall
TCOM_VBProjectT<T>::get_VBComponents(void)
{
  Vbide_97::VBComponents* lppcReturn;
  OLECHECK(this->get_VBComponents((Vbide_97::VBComponents**)&lppcReturn));
  return (Vbide_97::VBComponentsPtr)lppcReturn;
}

// *********************************************************************//
// DispIntf:  _VBProject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E160-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_HelpFile(BSTR* lpbstrHelpFile/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpbstrHelpFile /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_VBProjectDispT<T>::get_HelpFile(void)
{
  BSTR lpbstrHelpFile;
  this->get_HelpFile((BSTR*)&lpbstrHelpFile);
  return lpbstrHelpFile;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::set_HelpFile(BSTR lpbstrHelpFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = lpbstrHelpFile /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_HelpContextID(long* lpdwContextID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextID"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpdwContextID /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_VBProjectDispT<T>::get_HelpContextID(void)
{
  long lpdwContextID;
  this->get_HelpContextID((long*)&lpdwContextID);
  return lpdwContextID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::set_HelpContextID(long lpdwContextID/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextID"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = lpdwContextID /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_Description(BSTR* lpbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_VBProjectDispT<T>::get_Description(void)
{
  BSTR lpbstrDescription;
  this->get_Description((BSTR*)&lpbstrDescription);
  return lpbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::set_Description(BSTR lpbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = lpbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_Mode(Vbide_97::vbext_VBAMode* lpVbaMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mode"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)lpVbaMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::vbext_VBAMode __fastcall
_VBProjectDispT<T>::get_Mode(void)
{
  Vbide_97::vbext_VBAMode lpVbaMode;
  this->get_Mode((Vbide_97::vbext_VBAMode*)&lpVbaMode);
  return lpVbaMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_References(Vbide_97::References** lppReferences/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("References"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::References**)lppReferences /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::References* __fastcall
_VBProjectDispT<T>::get_References(void)
{
  Vbide_97::References* lppReferences;
  this->get_References((Vbide_97::References**)&lppReferences);
  return lppReferences;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_Name(BSTR* lpbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_VBProjectDispT<T>::get_Name(void)
{
  BSTR lpbstrName;
  this->get_Name((BSTR*)&lpbstrName);
  return lpbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::set_Name(BSTR lpbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = lpbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_VBProjectDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_VBE((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_Collection(Vbide_97::VBProjects** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collection"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBProjects**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBProjects* __fastcall
_VBProjectDispT<T>::get_Collection(void)
{
  Vbide_97::VBProjects* lppaReturn;
  this->get_Collection((Vbide_97::VBProjects**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_Protection(Vbide_97::vbext_ProjectProtection* lpProtection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protection"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)lpProtection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::vbext_ProjectProtection __fastcall
_VBProjectDispT<T>::get_Protection(void)
{
  Vbide_97::vbext_ProjectProtection lpProtection;
  this->get_Protection((Vbide_97::vbext_ProjectProtection*)&lpProtection);
  return lpProtection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_Saved(VARIANT_BOOL* lpfReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Saved"), DISPID(133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpfReturn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_VBProjectDispT<T>::get_Saved(void)
{
  VARIANT_BOOL lpfReturn;
  this->get_Saved((VARIANT_BOOL*)&lpfReturn);
  return lpfReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_VBComponents(Vbide_97::VBComponents** lppcReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBComponents"), DISPID(135));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBComponents**)lppcReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBComponents* __fastcall
_VBProjectDispT<T>::get_VBComponents(void)
{
  Vbide_97::VBComponents* lppcReturn;
  this->get_VBComponents((Vbide_97::VBComponents**)&lppcReturn);
  return lppcReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::App**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::App* __fastcall
_VBProjectDispT<T>::get_Application(void)
{
  Vbide_97::App* lppaReturn;
  this->get_Application((Vbide_97::App**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectDispT<T>::get_Parent(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::App**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::App* __fastcall
_VBProjectDispT<T>::get_Parent(void)
{
  Vbide_97::App* lppaReturn;
  this->get_Parent((Vbide_97::App**)&lppaReturn);
  return lppaReturn;
}

// *********************************************************************//
// SmartIntf: TCOM_VBProjects
// Interface: _VBProjects
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_VBProjectsT<T>::Item(VARIANT index/*[in]*/, Vbide_97::VBProject** lppcReturn/*[out,retval]*/)
{
  return (*this)->Item(index, lppcReturn);
}

template <class T> Vbide_97::VBProject* __fastcall
TCOM_VBProjectsT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::VBProject* lppcReturn;
  OLECHECK(this->Item(, (Vbide_97::VBProject**)&lppcReturn));
  return lppcReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectsT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectsT<T>::get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)lppaReturn);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_VBProjectsT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
  return (Vbide_97::VBEPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectsT<T>::get_Parent(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBProjectsT<T>::get_Parent(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(VBE**)lppaReturn);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_VBProjectsT<T>::get_Parent(void)
{
  Vbide_97::VBE* lppaReturn;
  OLECHECK(this->get_Parent((Vbide_97::VBE**)&lppaReturn));
  return (Vbide_97::VBEPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectsT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  return (*this)->get_Count(lplReturn);
}

template <class T> long __fastcall
TCOM_VBProjectsT<T>::get_Count(void)
{
  long lplReturn;
  OLECHECK(this->get_Count((long*)&lplReturn));
  return lplReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBProjectsT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  return (*this)->_NewEnum(lppiuReturn);
}

template <class T> LPUNKNOWN __fastcall
TCOM_VBProjectsT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
  return lppiuReturn;
}

// *********************************************************************//
// DispIntf:  _VBProjects
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E165-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectsDispT<T>::Item(VARIANT index/*[in]*/, Vbide_97::VBProject** lppcReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBProject**)lppcReturn /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::VBProject* __fastcall
_VBProjectsDispT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::VBProject* lppcReturn;
  this->Item(index, (Vbide_97::VBProject**)&lppcReturn);
  return lppcReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectsDispT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_VBProjectsDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_VBE((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectsDispT<T>::get_Parent(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_VBProjectsDispT<T>::get_Parent(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_Parent((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectsDispT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lplReturn /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_VBProjectsDispT<T>::get_Count(void)
{
  long lplReturn;
  this->get_Count((long*)&lplReturn);
  return lplReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBProjectsDispT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lppiuReturn /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_VBProjectsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  this->_NewEnum((LPUNKNOWN*)&lppiuReturn);
  return lppiuReturn;
}

// *********************************************************************//
// DispIntf:  SelectedComponents
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BE39F3D4-1B13-11D0-887F-00A0C90F2744}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectedComponentsDispT<T>::Item(int index/*[in]*/, Vbide_97::Component** lppcReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Component**)lppcReturn /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::Component* __fastcall
SelectedComponentsDispT<T>::Item(int index/*[in]*/)
{
  Vbide_97::Component* lppcReturn;
  this->Item(index, (Vbide_97::Component**)&lppcReturn);
  return lppcReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectedComponentsDispT<T>::get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::App**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::App* __fastcall
SelectedComponentsDispT<T>::get_Application(void)
{
  Vbide_97::App* lppaReturn;
  this->get_Application((Vbide_97::App**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectedComponentsDispT<T>::get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBProject**)lppptReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBProject* __fastcall
SelectedComponentsDispT<T>::get_Parent(void)
{
  Vbide_97::VBProject* lppptReturn;
  this->get_Parent((Vbide_97::VBProject**)&lppptReturn);
  return lppptReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectedComponentsDispT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lplReturn /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SelectedComponentsDispT<T>::get_Count(void)
{
  long lplReturn;
  this->get_Count((long*)&lplReturn);
  return lplReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SelectedComponentsDispT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lppiuReturn /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
SelectedComponentsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  this->_NewEnum((LPUNKNOWN*)&lppiuReturn);
  return lppiuReturn;
}

// *********************************************************************//
// SmartIntf: TCOM_Components
// Interface: _Components
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::Item(VARIANT index/*[in]*/, Vbide_97::Component** lppcReturn/*[out,retval]*/)
{
  return (*this)->Item(index, lppcReturn);
}

template <class T> Vbide_97::Component* __fastcall
TCOM_ComponentsT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::Component* lppcReturn;
  OLECHECK(this->Item(, (Vbide_97::Component**)&lppcReturn));
  return lppcReturn;
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Application(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::get_Application(Vbide_97::AppPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Application(App**)lppaReturn);
}

template <class T> Vbide_97::AppPtr __fastcall
TCOM_ComponentsT<T>::get_Application(void)
{
  Vbide_97::App* lppaReturn;
  OLECHECK(this->get_Application((Vbide_97::App**)&lppaReturn));
  return (Vbide_97::AppPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(lppptReturn);
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::get_Parent(Vbide_97::VBProjectPtr* lppptReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(VBProject**)lppptReturn);
}

template <class T> Vbide_97::VBProjectPtr __fastcall
TCOM_ComponentsT<T>::get_Parent(void)
{
  Vbide_97::VBProject* lppptReturn;
  OLECHECK(this->get_Parent((Vbide_97::VBProject**)&lppptReturn));
  return (Vbide_97::VBProjectPtr)lppptReturn;
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  return (*this)->get_Count(lplReturn);
}

template <class T> long __fastcall
TCOM_ComponentsT<T>::get_Count(void)
{
  long lplReturn;
  OLECHECK(this->get_Count((long*)&lplReturn));
  return lplReturn;
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  return (*this)->_NewEnum(lppiuReturn);
}

template <class T> LPUNKNOWN __fastcall
TCOM_ComponentsT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
  return lppiuReturn;
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::Remove(Vbide_97::Component* Component/*[in]*/)
{
  return (*this)->Remove(Component);
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/, 
                         Vbide_97::Component** lppComponent/*[out,retval]*/)
{
  return (*this)->Add(ComponentType, lppComponent);
}

template <class T> Vbide_97::Component* __fastcall
TCOM_ComponentsT<T>::Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/)
{
  Vbide_97::Component* lppComponent;
  OLECHECK(this->Add(, (Vbide_97::Component**)&lppComponent));
  return lppComponent;
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::Import(BSTR FileName/*[in]*/, 
                            Vbide_97::Component** lppComponent/*[out,retval]*/)
{
  return (*this)->Import(FileName, lppComponent);
}

template <class T> Vbide_97::Component* __fastcall
TCOM_ComponentsT<T>::Import(BSTR FileName/*[in]*/)
{
  Vbide_97::Component* lppComponent;
  OLECHECK(this->Import(, (Vbide_97::Component**)&lppComponent));
  return lppComponent;
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_ComponentsT<T>::get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)lppaReturn);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_ComponentsT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
  return (Vbide_97::VBEPtr)lppaReturn;
}

// *********************************************************************//
// DispIntf:  _Components
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E161-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentsDispT<T>::Item(VARIANT index/*[in]*/, Vbide_97::Component** lppcReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Component**)lppcReturn /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::Component* __fastcall
_ComponentsDispT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::Component* lppcReturn;
  this->Item(index, (Vbide_97::Component**)&lppcReturn);
  return lppcReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentsDispT<T>::get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::App**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::App* __fastcall
_ComponentsDispT<T>::get_Application(void)
{
  Vbide_97::App* lppaReturn;
  this->get_Application((Vbide_97::App**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentsDispT<T>::get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBProject**)lppptReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBProject* __fastcall
_ComponentsDispT<T>::get_Parent(void)
{
  Vbide_97::VBProject* lppptReturn;
  this->get_Parent((Vbide_97::VBProject**)&lppptReturn);
  return lppptReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentsDispT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lplReturn /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ComponentsDispT<T>::get_Count(void)
{
  long lplReturn;
  this->get_Count((long*)&lplReturn);
  return lplReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentsDispT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lppiuReturn /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_ComponentsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  this->_NewEnum((LPUNKNOWN*)&lppiuReturn);
  return lppiuReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentsDispT<T>::Remove(Vbide_97::Component* Component/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::Component*)Component /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentsDispT<T>::Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/, 
                         Vbide_97::Component** lppComponent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)ComponentType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Component**)lppComponent /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::Component* __fastcall
_ComponentsDispT<T>::Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/)
{
  Vbide_97::Component* lppComponent;
  this->Add(ComponentType, (Vbide_97::Component**)&lppComponent);
  return lppComponent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentsDispT<T>::Import(BSTR FileName/*[in]*/, 
                            Vbide_97::Component** lppComponent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Import"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Component**)lppComponent /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::Component* __fastcall
_ComponentsDispT<T>::Import(BSTR FileName/*[in]*/)
{
  Vbide_97::Component* lppComponent;
  this->Import(FileName, (Vbide_97::Component**)&lppComponent);
  return lppComponent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentsDispT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_ComponentsDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_VBE((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

// *********************************************************************//
// SmartIntf: TCOM_VBComponents
// Interface: _VBComponents
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_VBComponentsT<T>::Item(VARIANT index/*[in]*/, 
                            Vbide_97::VBComponent** lppcReturn/*[out,retval]*/)
{
  return (*this)->Item(index, lppcReturn);
}

template <class T> Vbide_97::VBComponent* __fastcall
TCOM_VBComponentsT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::VBComponent* lppcReturn;
  OLECHECK(this->Item(, (Vbide_97::VBComponent**)&lppcReturn));
  return lppcReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentsT<T>::get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(lppptReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentsT<T>::get_Parent(Vbide_97::VBProjectPtr* lppptReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(VBProject**)lppptReturn);
}

template <class T> Vbide_97::VBProjectPtr __fastcall
TCOM_VBComponentsT<T>::get_Parent(void)
{
  Vbide_97::VBProject* lppptReturn;
  OLECHECK(this->get_Parent((Vbide_97::VBProject**)&lppptReturn));
  return (Vbide_97::VBProjectPtr)lppptReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentsT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  return (*this)->get_Count(lplReturn);
}

template <class T> long __fastcall
TCOM_VBComponentsT<T>::get_Count(void)
{
  long lplReturn;
  OLECHECK(this->get_Count((long*)&lplReturn));
  return lplReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentsT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  return (*this)->_NewEnum(lppiuReturn);
}

template <class T> LPUNKNOWN __fastcall
TCOM_VBComponentsT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
  return lppiuReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentsT<T>::Remove(Vbide_97::VBComponent* VBComponent/*[in]*/)
{
  return (*this)->Remove(VBComponent);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentsT<T>::Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/, 
                           Vbide_97::VBComponent** lppComponent/*[out,retval]*/)
{
  return (*this)->Add(ComponentType, lppComponent);
}

template <class T> Vbide_97::VBComponent* __fastcall
TCOM_VBComponentsT<T>::Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/)
{
  Vbide_97::VBComponent* lppComponent;
  OLECHECK(this->Add(, (Vbide_97::VBComponent**)&lppComponent));
  return lppComponent;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentsT<T>::Import(BSTR FileName/*[in]*/, 
                              Vbide_97::VBComponent** lppComponent/*[out,retval]*/)
{
  return (*this)->Import(FileName, lppComponent);
}

template <class T> Vbide_97::VBComponent* __fastcall
TCOM_VBComponentsT<T>::Import(BSTR FileName/*[in]*/)
{
  Vbide_97::VBComponent* lppComponent;
  OLECHECK(this->Import(, (Vbide_97::VBComponent**)&lppComponent));
  return lppComponent;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentsT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentsT<T>::get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)lppaReturn);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_VBComponentsT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
  return (Vbide_97::VBEPtr)lppaReturn;
}

// *********************************************************************//
// DispIntf:  _VBComponents
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E162-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentsDispT<T>::Item(VARIANT index/*[in]*/, 
                            Vbide_97::VBComponent** lppcReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBComponent**)lppcReturn /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::VBComponent* __fastcall
_VBComponentsDispT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::VBComponent* lppcReturn;
  this->Item(index, (Vbide_97::VBComponent**)&lppcReturn);
  return lppcReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentsDispT<T>::get_Parent(Vbide_97::VBProject** lppptReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBProject**)lppptReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBProject* __fastcall
_VBComponentsDispT<T>::get_Parent(void)
{
  Vbide_97::VBProject* lppptReturn;
  this->get_Parent((Vbide_97::VBProject**)&lppptReturn);
  return lppptReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentsDispT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lplReturn /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_VBComponentsDispT<T>::get_Count(void)
{
  long lplReturn;
  this->get_Count((long*)&lplReturn);
  return lplReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentsDispT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lppiuReturn /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_VBComponentsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  this->_NewEnum((LPUNKNOWN*)&lppiuReturn);
  return lppiuReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentsDispT<T>::Remove(Vbide_97::VBComponent* VBComponent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::VBComponent*)VBComponent /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentsDispT<T>::Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/, 
                           Vbide_97::VBComponent** lppComponent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)ComponentType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBComponent**)lppComponent /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::VBComponent* __fastcall
_VBComponentsDispT<T>::Add(Vbide_97::vbext_ComponentType ComponentType/*[in]*/)
{
  Vbide_97::VBComponent* lppComponent;
  this->Add(ComponentType, (Vbide_97::VBComponent**)&lppComponent);
  return lppComponent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentsDispT<T>::Import(BSTR FileName/*[in]*/, 
                              Vbide_97::VBComponent** lppComponent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Import"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBComponent**)lppComponent /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::VBComponent* __fastcall
_VBComponentsDispT<T>::Import(BSTR FileName/*[in]*/)
{
  Vbide_97::VBComponent* lppComponent;
  this->Import(FileName, (Vbide_97::VBComponent**)&lppComponent);
  return lppComponent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentsDispT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_VBComponentsDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_VBE((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

// *********************************************************************//
// SmartIntf: TCOM_Component
// Interface: _Component
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ComponentT<T>::get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Application(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_ComponentT<T>::get_Application(Vbide_97::AppPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Application(App**)lppaReturn);
}

template <class T> Vbide_97::AppPtr __fastcall
TCOM_ComponentT<T>::get_Application(void)
{
  Vbide_97::App* lppaReturn;
  OLECHECK(this->get_Application((Vbide_97::App**)&lppaReturn));
  return (Vbide_97::AppPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_ComponentT<T>::get_Parent(Vbide_97::Components** lppcReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(lppcReturn);
}

template <class T> HRESULT __fastcall
TCOM_ComponentT<T>::get_Parent(Vbide_97::ComponentsPtr* lppcReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(Components**)lppcReturn);
}

template <class T> Vbide_97::ComponentsPtr __fastcall
TCOM_ComponentT<T>::get_Parent(void)
{
  Vbide_97::Components* lppcReturn;
  OLECHECK(this->get_Parent((Vbide_97::Components**)&lppcReturn));
  return (Vbide_97::ComponentsPtr)lppcReturn;
}

template <class T> HRESULT __fastcall
TCOM_ComponentT<T>::get_IsDirty(VARIANT_BOOL* lpfReturn/*[out,retval]*/)
{
  return (*this)->get_IsDirty(lpfReturn);
}

template <class T> HRESULT __fastcall
TCOM_ComponentT<T>::get_IsDirty(TOLEBOOL* lpfReturn/*[out,retval]*/)
{
  return (*this)->get_IsDirty(VARIANT_BOOL*)lpfReturn);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComponentT<T>::get_IsDirty(void)
{
  VARIANT_BOOL lpfReturn;
  OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&lpfReturn));
  return (TOLEBOOL)lpfReturn;
}

template <class T> HRESULT __fastcall
TCOM_ComponentT<T>::set_IsDirty(VARIANT_BOOL lpfReturn/*[in]*/)
{
  return (*this)->set_IsDirty(lpfReturn);
}

template <class T> HRESULT __fastcall
TCOM_ComponentT<T>::set_IsDirty(TOLEBOOL lpfReturn/*[in]*/)
{
  return (*this)->set_IsDirty(VARIANT_BOOL)lpfReturn);
}

template <class T> HRESULT __fastcall
TCOM_ComponentT<T>::get_Name(BSTR* pbstrReturn/*[out,retval]*/)
{
  return (*this)->get_Name(pbstrReturn);
}

template <class T> BSTR __fastcall
TCOM_ComponentT<T>::get_Name(void)
{
  BSTR pbstrReturn = 0;
  OLECHECK(this->get_Name((BSTR*)&pbstrReturn));
  return pbstrReturn;
}

template <class T> HRESULT __fastcall
TCOM_ComponentT<T>::set_Name(BSTR pbstrReturn/*[in]*/)
{
  return (*this)->set_Name(pbstrReturn);
}

// *********************************************************************//
// DispIntf:  _Component
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0002E163-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentDispT<T>::get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::App**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::App* __fastcall
_ComponentDispT<T>::get_Application(void)
{
  Vbide_97::App* lppaReturn;
  this->get_Application((Vbide_97::App**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentDispT<T>::get_Parent(Vbide_97::Components** lppcReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Components**)lppcReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::Components* __fastcall
_ComponentDispT<T>::get_Parent(void)
{
  Vbide_97::Components* lppcReturn;
  this->get_Parent((Vbide_97::Components**)&lppcReturn);
  return lppcReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentDispT<T>::get_IsDirty(VARIANT_BOOL* lpfReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpfReturn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ComponentDispT<T>::get_IsDirty(void)
{
  VARIANT_BOOL lpfReturn;
  this->get_IsDirty((VARIANT_BOOL*)&lpfReturn);
  return lpfReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentDispT<T>::set_IsDirty(VARIANT_BOOL lpfReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = lpfReturn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentDispT<T>::get_Name(BSTR* pbstrReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(48));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrReturn /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComponentDispT<T>::get_Name(void)
{
  BSTR pbstrReturn;
  this->get_Name((BSTR*)&pbstrReturn);
  return pbstrReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComponentDispT<T>::set_Name(BSTR pbstrReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = pbstrReturn /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_VBComponent
// Interface: _VBComponent
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_Saved(VARIANT_BOOL* lpfReturn/*[out,retval]*/)
{
  return (*this)->get_Saved(lpfReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_Saved(TOLEBOOL* lpfReturn/*[out,retval]*/)
{
  return (*this)->get_Saved(VARIANT_BOOL*)lpfReturn);
}

template <class T> TOLEBOOL __fastcall
TCOM_VBComponentT<T>::get_Saved(void)
{
  VARIANT_BOOL lpfReturn;
  OLECHECK(this->get_Saved((VARIANT_BOOL*)&lpfReturn));
  return (TOLEBOOL)lpfReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_Name(BSTR* pbstrReturn/*[out,retval]*/)
{
  return (*this)->get_Name(pbstrReturn);
}

template <class T> BSTR __fastcall
TCOM_VBComponentT<T>::get_Name(void)
{
  BSTR pbstrReturn = 0;
  OLECHECK(this->get_Name((BSTR*)&pbstrReturn));
  return pbstrReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::set_Name(BSTR pbstrReturn/*[in]*/)
{
  return (*this)->set_Name(pbstrReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_Designer(LPDISPATCH* ppDispatch/*[out,retval]*/)
{
  return (*this)->get_Designer(ppDispatch);
}

template <class T> LPDISPATCH __fastcall
TCOM_VBComponentT<T>::get_Designer(void)
{
  LPDISPATCH ppDispatch;
  OLECHECK(this->get_Designer((LPDISPATCH*)&ppDispatch));
  return ppDispatch;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_CodeModule(Vbide_97::CodeModule** ppVbaModule/*[out,retval]*/)
{
  return (*this)->get_CodeModule(ppVbaModule);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_CodeModule(Vbide_97::CodeModulePtr* ppVbaModule/*[out,retval]*/)
{
  return (*this)->get_CodeModule(CodeModule**)ppVbaModule);
}

template <class T> Vbide_97::CodeModulePtr __fastcall
TCOM_VBComponentT<T>::get_CodeModule(void)
{
  Vbide_97::CodeModule* ppVbaModule;
  OLECHECK(this->get_CodeModule((Vbide_97::CodeModule**)&ppVbaModule));
  return (Vbide_97::CodeModulePtr)ppVbaModule;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_Type(Vbide_97::vbext_ComponentType* pKind/*[out,retval]*/)
{
  return (*this)->get_Type(pKind);
}

template <class T> Vbide_97::vbext_ComponentType __fastcall
TCOM_VBComponentT<T>::get_Type(void)
{
  Vbide_97::vbext_ComponentType pKind;
  OLECHECK(this->get_Type((Vbide_97::vbext_ComponentType*)&pKind));
  return pKind;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::Export(BSTR FileName/*[in]*/)
{
  return (*this)->Export(FileName);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)lppaReturn);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_VBComponentT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
  return (Vbide_97::VBEPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_Collection(Vbide_97::VBComponents** lppcReturn/*[out,retval]*/)
{
  return (*this)->get_Collection(lppcReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_Collection(Vbide_97::VBComponentsPtr* lppcReturn/*[out,retval]*/)
{
  return (*this)->get_Collection(VBComponents**)lppcReturn);
}

template <class T> Vbide_97::VBComponentsPtr __fastcall
TCOM_VBComponentT<T>::get_Collection(void)
{
  Vbide_97::VBComponents* lppcReturn;
  OLECHECK(this->get_Collection((Vbide_97::VBComponents**)&lppcReturn));
  return (Vbide_97::VBComponentsPtr)lppcReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_HasOpenDesigner(VARIANT_BOOL* lpfReturn/*[out,retval]*/)
{
  return (*this)->get_HasOpenDesigner(lpfReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_HasOpenDesigner(TOLEBOOL* lpfReturn/*[out,retval]*/)
{
  return (*this)->get_HasOpenDesigner(VARIANT_BOOL*)lpfReturn);
}

template <class T> TOLEBOOL __fastcall
TCOM_VBComponentT<T>::get_HasOpenDesigner(void)
{
  VARIANT_BOOL lpfReturn;
  OLECHECK(this->get_HasOpenDesigner((VARIANT_BOOL*)&lpfReturn));
  return (TOLEBOOL)lpfReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_Properties(Vbide_97::Properties** lpppReturn/*[out,retval]*/)
{
  return (*this)->get_Properties(lpppReturn);
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::get_Properties(Vbide_97::PropertiesPtr* lpppReturn/*[out,retval]*/)
{
  return (*this)->get_Properties(Properties**)lpppReturn);
}

template <class T> Vbide_97::PropertiesPtr __fastcall
TCOM_VBComponentT<T>::get_Properties(void)
{
  Vbide_97::Properties* lpppReturn;
  OLECHECK(this->get_Properties((Vbide_97::Properties**)&lpppReturn));
  return (Vbide_97::PropertiesPtr)lpppReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::DesignerWindow(Vbide_97::WINDOW** lppcReturn/*[out,retval]*/)
{
  return (*this)->DesignerWindow(lppcReturn);
}

template <class T> Vbide_97::WINDOW* __fastcall
TCOM_VBComponentT<T>::DesignerWindow(void)
{
  Vbide_97::WINDOW* lppcReturn;
  OLECHECK(this->DesignerWindow((Vbide_97::WINDOW**)&lppcReturn));
  return lppcReturn;
}

template <class T> HRESULT __fastcall
TCOM_VBComponentT<T>::Activate(void)
{
  return (*this)->Activate();
}

// *********************************************************************//
// DispIntf:  _VBComponent
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E164-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::get_Saved(VARIANT_BOOL* lpfReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Saved"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpfReturn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_VBComponentDispT<T>::get_Saved(void)
{
  VARIANT_BOOL lpfReturn;
  this->get_Saved((VARIANT_BOOL*)&lpfReturn);
  return lpfReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::get_Name(BSTR* pbstrReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(48));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrReturn /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_VBComponentDispT<T>::get_Name(void)
{
  BSTR pbstrReturn;
  this->get_Name((BSTR*)&pbstrReturn);
  return pbstrReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::set_Name(BSTR pbstrReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = pbstrReturn /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::get_Designer(LPDISPATCH* ppDispatch/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Designer"), DISPID(49));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppDispatch /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_VBComponentDispT<T>::get_Designer(void)
{
  LPDISPATCH ppDispatch;
  this->get_Designer((LPDISPATCH*)&ppDispatch);
  return ppDispatch;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::get_CodeModule(Vbide_97::CodeModule** ppVbaModule/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeModule"), DISPID(50));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::CodeModule**)ppVbaModule /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::CodeModule* __fastcall
_VBComponentDispT<T>::get_CodeModule(void)
{
  Vbide_97::CodeModule* ppVbaModule;
  this->get_CodeModule((Vbide_97::CodeModule**)&ppVbaModule);
  return ppVbaModule;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::get_Type(Vbide_97::vbext_ComponentType* pKind/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pKind /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::vbext_ComponentType __fastcall
_VBComponentDispT<T>::get_Type(void)
{
  Vbide_97::vbext_ComponentType pKind;
  this->get_Type((Vbide_97::vbext_ComponentType*)&pKind);
  return pKind;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::Export(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Export"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_VBComponentDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_VBE((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::get_Collection(Vbide_97::VBComponents** lppcReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collection"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBComponents**)lppcReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBComponents* __fastcall
_VBComponentDispT<T>::get_Collection(void)
{
  Vbide_97::VBComponents* lppcReturn;
  this->get_Collection((Vbide_97::VBComponents**)&lppcReturn);
  return lppcReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::get_HasOpenDesigner(VARIANT_BOOL* lpfReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasOpenDesigner"), DISPID(55));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpfReturn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_VBComponentDispT<T>::get_HasOpenDesigner(void)
{
  VARIANT_BOOL lpfReturn;
  this->get_HasOpenDesigner((VARIANT_BOOL*)&lpfReturn);
  return lpfReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::get_Properties(Vbide_97::Properties** lpppReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Properties**)lpppReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::Properties* __fastcall
_VBComponentDispT<T>::get_Properties(void)
{
  Vbide_97::Properties* lpppReturn;
  this->get_Properties((Vbide_97::Properties**)&lpppReturn);
  return lpppReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::DesignerWindow(Vbide_97::WINDOW** lppcReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignerWindow"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::WINDOW**)lppcReturn /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::WINDOW* __fastcall
_VBComponentDispT<T>::DesignerWindow(void)
{
  Vbide_97::WINDOW* lppcReturn;
  this->DesignerWindow((Vbide_97::WINDOW**)&lppcReturn);
  return lppcReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_VBComponentDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(60));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Property
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E18C-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::get_Value(VARIANT* lppvReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lppvReturn /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PropertyDispT<T>::get_Value(void)
{
  VARIANT lppvReturn;
  this->get_Value((VARIANT*)&lppvReturn);
  return lppvReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::set_Value(VARIANT lppvReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = lppvReturn /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::get_IndexedValue(VARIANT Index1/*[in]*/, VARIANT Index2/*[in,opt]*/, 
                                   VARIANT Index3/*[in,opt]*/, VARIANT Index4/*[in,opt]*/, 
                                   VARIANT* lppvReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IndexedValue"), DISPID(3));
  TAutoArgs<4> _args;
  _args[1] = Index1 /*[VT_VARIANT:0]*/;
  _args[2] = Index2 /*[VT_VARIANT:0]*/;
  _args[3] = Index3 /*[VT_VARIANT:0]*/;
  _args[4] = Index4 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(lppvReturn /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PropertyDispT<T>::get_IndexedValue(VARIANT Index1/*[in]*/, VARIANT Index2/*[in,opt]*/, 
                                   VARIANT Index3/*[in,opt]*/, VARIANT Index4/*[in,opt]*/)
{
  VARIANT lppvReturn;
  this->get_IndexedValue(Index1, Index2, Index3, Index4, (VARIANT*)&lppvReturn);
  return lppvReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::set_IndexedValue(VARIANT Index1/*[in]*/, VARIANT Index2/*[in,opt]*/, 
                                   VARIANT Index3/*[in,opt]*/, VARIANT Index4/*[in,opt]*/, 
                                   VARIANT lppvReturn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IndexedValue"), DISPID(3));
  TAutoArgs<5> _args;
  _args[1] = Index1 /*[VT_VARIANT:0]*/;
  _args[2] = Index2 /*[VT_VARIANT:0]*/;
  _args[3] = Index3 /*[VT_VARIANT:0]*/;
  _args[4] = Index4 /*[VT_VARIANT:0]*/;
  _args[5] = lppvReturn /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::get_NumIndices(short* lpiRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumIndices"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpiRetVal /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
PropertyDispT<T>::get_NumIndices(void)
{
  short lpiRetVal;
  this->get_NumIndices((short*)&lpiRetVal);
  return lpiRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::get_Application(Vbide_97::App** lpaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::App**)lpaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::App* __fastcall
PropertyDispT<T>::get_Application(void)
{
  Vbide_97::App* lpaReturn;
  this->get_Application((Vbide_97::App**)&lpaReturn);
  return lpaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::get_Parent(Vbide_97::Properties** lpppReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Properties**)lpppReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::Properties* __fastcall
PropertyDispT<T>::get_Parent(void)
{
  Vbide_97::Properties* lpppReturn;
  this->get_Parent((Vbide_97::Properties**)&lpppReturn);
  return lpppReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::get_Name(BSTR* lpbstrReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lpbstrReturn /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PropertyDispT<T>::get_Name(void)
{
  BSTR lpbstrReturn;
  this->get_Name((BSTR*)&lpbstrReturn);
  return lpbstrReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::get_VBE(Vbide_97::VBE** lpaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(41));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lpaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
PropertyDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lpaReturn;
  this->get_VBE((Vbide_97::VBE**)&lpaReturn);
  return lpaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::get_Collection(Vbide_97::Properties** lpppReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collection"), DISPID(42));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Properties**)lpppReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::Properties* __fastcall
PropertyDispT<T>::get_Collection(void)
{
  Vbide_97::Properties* lpppReturn;
  this->get_Collection((Vbide_97::Properties**)&lpppReturn);
  return lpppReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::get_Object(LPUNKNOWN* lppunk/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(45));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lppunk /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PropertyDispT<T>::get_Object(void)
{
  LPUNKNOWN lppunk;
  this->get_Object((LPUNKNOWN*)&lppunk);
  return lppunk;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyDispT<T>::_set_Object(LPUNKNOWN lppunk/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = lppunk /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Properties
// Interface: _Properties
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_PropertiesT<T>::Item(VARIANT index/*[in]*/, Vbide_97::Property** lplppReturn/*[out,retval]*/)
{
  return (*this)->Item(index, lplppReturn);
}

template <class T> Vbide_97::Property* __fastcall
TCOM_PropertiesT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::Property* lplppReturn;
  OLECHECK(this->Item(, (Vbide_97::Property**)&lplppReturn));
  return lplppReturn;
}

template <class T> HRESULT __fastcall
TCOM_PropertiesT<T>::get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Application(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_PropertiesT<T>::get_Application(Vbide_97::AppPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_Application(App**)lppaReturn);
}

template <class T> Vbide_97::AppPtr __fastcall
TCOM_PropertiesT<T>::get_Application(void)
{
  Vbide_97::App* lppaReturn;
  OLECHECK(this->get_Application((Vbide_97::App**)&lppaReturn));
  return (Vbide_97::AppPtr)lppaReturn;
}

template <class T> HRESULT __fastcall
TCOM_PropertiesT<T>::get_Parent(LPDISPATCH* lppidReturn/*[out,retval]*/)
{
  return (*this)->get_Parent(lppidReturn);
}

template <class T> LPDISPATCH __fastcall
TCOM_PropertiesT<T>::get_Parent(void)
{
  LPDISPATCH lppidReturn;
  OLECHECK(this->get_Parent((LPDISPATCH*)&lppidReturn));
  return lppidReturn;
}

template <class T> HRESULT __fastcall
TCOM_PropertiesT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  return (*this)->get_Count(lplReturn);
}

template <class T> long __fastcall
TCOM_PropertiesT<T>::get_Count(void)
{
  long lplReturn;
  OLECHECK(this->get_Count((long*)&lplReturn));
  return lplReturn;
}

template <class T> HRESULT __fastcall
TCOM_PropertiesT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  return (*this)->_NewEnum(lppiuReturn);
}

template <class T> LPUNKNOWN __fastcall
TCOM_PropertiesT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&lppiuReturn));
  return lppiuReturn;
}

template <class T> HRESULT __fastcall
TCOM_PropertiesT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(lppaReturn);
}

template <class T> HRESULT __fastcall
TCOM_PropertiesT<T>::get_VBE(Vbide_97::VBEPtr* lppaReturn/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)lppaReturn);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_PropertiesT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&lppaReturn));
  return (Vbide_97::VBEPtr)lppaReturn;
}

// *********************************************************************//
// DispIntf:  _Properties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0002E188-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PropertiesDispT<T>::Item(VARIANT index/*[in]*/, Vbide_97::Property** lplppReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Property**)lplppReturn /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::Property* __fastcall
_PropertiesDispT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::Property* lplppReturn;
  this->Item(index, (Vbide_97::Property**)&lplppReturn);
  return lplppReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PropertiesDispT<T>::get_Application(Vbide_97::App** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::App**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::App* __fastcall
_PropertiesDispT<T>::get_Application(void)
{
  Vbide_97::App* lppaReturn;
  this->get_Application((Vbide_97::App**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PropertiesDispT<T>::get_Parent(LPDISPATCH* lppidReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lppidReturn /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PropertiesDispT<T>::get_Parent(void)
{
  LPDISPATCH lppidReturn;
  this->get_Parent((LPDISPATCH*)&lppidReturn);
  return lppidReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PropertiesDispT<T>::get_Count(long* lplReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lplReturn /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_PropertiesDispT<T>::get_Count(void)
{
  long lplReturn;
  this->get_Count((long*)&lplReturn);
  return lplReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PropertiesDispT<T>::_NewEnum(LPUNKNOWN* lppiuReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(lppiuReturn /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_PropertiesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN lppiuReturn;
  this->_NewEnum((LPUNKNOWN*)&lppiuReturn);
  return lppiuReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PropertiesDispT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_PropertiesDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_VBE((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

// *********************************************************************//
// SmartIntf: TCOM_CodeModule
// Interface: _CodeModule
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_Parent(Vbide_97::VBComponent** retval/*[out,retval]*/)
{
  return (*this)->get_Parent(retval);
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_Parent(Vbide_97::VBComponentPtr* retval/*[out,retval]*/)
{
  return (*this)->get_Parent(VBComponent**)retval);
}

template <class T> Vbide_97::VBComponentPtr __fastcall
TCOM_CodeModuleT<T>::get_Parent(void)
{
  Vbide_97::VBComponent* retval;
  OLECHECK(this->get_Parent((Vbide_97::VBComponent**)&retval));
  return (Vbide_97::VBComponentPtr)retval;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_VBE(Vbide_97::VBE** retval/*[out,retval]*/)
{
  return (*this)->get_VBE(retval);
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_VBE(Vbide_97::VBEPtr* retval/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)retval);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_CodeModuleT<T>::get_VBE(void)
{
  Vbide_97::VBE* retval;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&retval));
  return (Vbide_97::VBEPtr)retval;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  return (*this)->get_Name(pbstrName);
}

template <class T> BSTR __fastcall
TCOM_CodeModuleT<T>::get_Name(void)
{
  BSTR pbstrName = 0;
  OLECHECK(this->get_Name((BSTR*)&pbstrName));
  return pbstrName;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  return (*this)->set_Name(pbstrName);
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::AddFromString(BSTR String/*[in]*/)
{
  return (*this)->AddFromString(String);
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::AddFromFile(BSTR FileName/*[in]*/)
{
  return (*this)->AddFromFile(FileName);
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_Lines(long StartLine/*[in]*/, long Count/*[in]*/, 
                               BSTR* String/*[out,retval]*/)
{
  return (*this)->get_Lines(StartLine, Count, String);
}

template <class T> BSTR __fastcall
TCOM_CodeModuleT<T>::get_Lines(long StartLine/*[in]*/, long Count/*[in]*/)
{
  BSTR String = 0;
  OLECHECK(this->get_Lines(, (BSTR*)&String));
  return String;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_CountOfLines(long* CountOfLines/*[out,retval]*/)
{
  return (*this)->get_CountOfLines(CountOfLines);
}

template <class T> long __fastcall
TCOM_CodeModuleT<T>::get_CountOfLines(void)
{
  long CountOfLines;
  OLECHECK(this->get_CountOfLines((long*)&CountOfLines));
  return CountOfLines;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::InsertLines(long Line/*[in]*/, BSTR String/*[in]*/)
{
  return (*this)->InsertLines(Line, String);
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::DeleteLines(long StartLine/*[in]*/, long Count/*[in,def,opt]*/)
{
  return (*this)->DeleteLines(StartLine, Count);
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/)
{
  return (*this)->ReplaceLine(Line, String);
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                       Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                       long* ProcStartLine/*[out,retval]*/)
{
  return (*this)->get_ProcStartLine(ProcName, ProcKind, ProcStartLine);
}

template <class T> long __fastcall
TCOM_CodeModuleT<T>::get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                       Vbide_97::vbext_ProcKind ProcKind/*[in]*/)
{
  long ProcStartLine;
  OLECHECK(this->get_ProcStartLine(, (long*)&ProcStartLine));
  return ProcStartLine;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                        Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                        long* ProcCountLines/*[out,retval]*/)
{
  return (*this)->get_ProcCountLines(ProcName, ProcKind, ProcCountLines);
}

template <class T> long __fastcall
TCOM_CodeModuleT<T>::get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                        Vbide_97::vbext_ProcKind ProcKind/*[in]*/)
{
  long ProcCountLines;
  OLECHECK(this->get_ProcCountLines(, (long*)&ProcCountLines));
  return ProcCountLines;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                      Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                      long* ProcBodyLine/*[out,retval]*/)
{
  return (*this)->get_ProcBodyLine(ProcName, ProcKind, ProcBodyLine);
}

template <class T> long __fastcall
TCOM_CodeModuleT<T>::get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                      Vbide_97::vbext_ProcKind ProcKind/*[in]*/)
{
  long ProcBodyLine;
  OLECHECK(this->get_ProcBodyLine(, (long*)&ProcBodyLine));
  return ProcBodyLine;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_ProcOfLine(long Line/*[in]*/, Vbide_97::vbext_ProcKind* ProcKind/*[out]*/, 
                                    BSTR* pbstrName/*[out,retval]*/)
{
  return (*this)->get_ProcOfLine(Line, ProcKind, pbstrName);
}

template <class T> BSTR __fastcall
TCOM_CodeModuleT<T>::get_ProcOfLine(long Line/*[in]*/, Vbide_97::vbext_ProcKind* ProcKind/*[out]*/)
{
  BSTR pbstrName = 0;
  OLECHECK(this->get_ProcOfLine(, (BSTR*)&pbstrName));
  return pbstrName;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_CountOfDeclarationLines(long* pDeclCountOfLines/*[out,retval]*/)
{
  return (*this)->get_CountOfDeclarationLines(pDeclCountOfLines);
}

template <class T> long __fastcall
TCOM_CodeModuleT<T>::get_CountOfDeclarationLines(void)
{
  long pDeclCountOfLines;
  OLECHECK(this->get_CountOfDeclarationLines((long*)&pDeclCountOfLines));
  return pDeclCountOfLines;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/, 
                                     long* Line/*[out,retval]*/)
{
  return (*this)->CreateEventProc(EventName, ObjectName, Line);
}

template <class T> long __fastcall
TCOM_CodeModuleT<T>::CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/)
{
  long Line;
  OLECHECK(this->CreateEventProc(, (long*)&Line));
  return Line;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                          long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                          long* EndColumn/*[in,out]*/, VARIANT_BOOL WholeWord/*[in,def,opt]*/, 
                          VARIANT_BOOL MatchCase/*[in,def,opt]*/, 
                          VARIANT_BOOL PatternSearch/*[in,def,opt]*/, 
                          VARIANT_BOOL* pfFound/*[out,retval]*/)
{
  return (*this)->Find(Target, StartLine, StartColumn, EndLine, EndColumn, WholeWord, MatchCase, 
                       PatternSearch, pfFound);
}

template <class T> VARIANT_BOOL __fastcall
TCOM_CodeModuleT<T>::Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                          long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                          long* EndColumn/*[in,out]*/, VARIANT_BOOL WholeWord/*[in,def,opt]*/, 
                          VARIANT_BOOL MatchCase/*[in,def,opt]*/, 
                          VARIANT_BOOL PatternSearch/*[in,def,opt]*/)
{
  VARIANT_BOOL pfFound;
  OLECHECK(this->Find(, (VARIANT_BOOL*)&pfFound));
  return pfFound;
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_CodePane(Vbide_97::CodePane** CodePane/*[out,retval]*/)
{
  return (*this)->get_CodePane(CodePane);
}

template <class T> HRESULT __fastcall
TCOM_CodeModuleT<T>::get_CodePane(Vbide_97::CodePanePtr* CodePane/*[out,retval]*/)
{
  return (*this)->get_CodePane(CodePane**)CodePane);
}

template <class T> Vbide_97::CodePanePtr __fastcall
TCOM_CodeModuleT<T>::get_CodePane(void)
{
  Vbide_97::CodePane* CodePane;
  OLECHECK(this->get_CodePane((Vbide_97::CodePane**)&CodePane));
  return (Vbide_97::CodePanePtr)CodePane;
}

// *********************************************************************//
// DispIntf:  _CodeModule
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E16E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_Parent(Vbide_97::VBComponent** retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBComponent**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBComponent* __fastcall
_CodeModuleDispT<T>::get_Parent(void)
{
  Vbide_97::VBComponent* retval;
  this->get_Parent((Vbide_97::VBComponent**)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_VBE(Vbide_97::VBE** retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_CodeModuleDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* retval;
  this->get_VBE((Vbide_97::VBE**)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CodeModuleDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::AddFromString(BSTR String/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFromString"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = String /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::AddFromFile(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFromFile"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_Lines(long StartLine/*[in]*/, long Count/*[in]*/, 
                               BSTR* String/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Lines"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<2> _args;
  _args[1] = StartLine /*[VT_I4:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  return OutRetValSetterPtr(String /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CodeModuleDispT<T>::get_Lines(long StartLine/*[in]*/, long Count/*[in]*/)
{
  BSTR String;
  this->get_Lines(StartLine, Count, (BSTR*)&String);
  return String;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_CountOfLines(long* CountOfLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CountOfLines"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CountOfLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CodeModuleDispT<T>::get_CountOfLines(void)
{
  long CountOfLines;
  this->get_CountOfLines((long*)&CountOfLines);
  return CountOfLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::InsertLines(long Line/*[in]*/, BSTR String/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertLines"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = String /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::DeleteLines(long StartLine/*[in]*/, long Count/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteLines"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<2> _args;
  _args[1] = StartLine /*[VT_I4:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceLine"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = String /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                       Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                       long* ProcStartLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcStartLine"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<2> _args;
  _args[1] = ProcName /*[VT_BSTR:0]*/;
  _args[2] = (int)ProcKind /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ProcStartLine /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CodeModuleDispT<T>::get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                       Vbide_97::vbext_ProcKind ProcKind/*[in]*/)
{
  long ProcStartLine;
  this->get_ProcStartLine(ProcName, ProcKind, (long*)&ProcStartLine);
  return ProcStartLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                        Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                        long* ProcCountLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcCountLines"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<2> _args;
  _args[1] = ProcName /*[VT_BSTR:0]*/;
  _args[2] = (int)ProcKind /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ProcCountLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CodeModuleDispT<T>::get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                        Vbide_97::vbext_ProcKind ProcKind/*[in]*/)
{
  long ProcCountLines;
  this->get_ProcCountLines(ProcName, ProcKind, (long*)&ProcCountLines);
  return ProcCountLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                      Vbide_97::vbext_ProcKind ProcKind/*[in]*/, 
                                      long* ProcBodyLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcBodyLine"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<2> _args;
  _args[1] = ProcName /*[VT_BSTR:0]*/;
  _args[2] = (int)ProcKind /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ProcBodyLine /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CodeModuleDispT<T>::get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                      Vbide_97::vbext_ProcKind ProcKind/*[in]*/)
{
  long ProcBodyLine;
  this->get_ProcBodyLine(ProcName, ProcKind, (long*)&ProcBodyLine);
  return ProcBodyLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_ProcOfLine(long Line/*[in]*/, Vbide_97::vbext_ProcKind* ProcKind/*[out]*/, 
                                    BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcOfLine"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = (int*)ProcKind /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CodeModuleDispT<T>::get_ProcOfLine(long Line/*[in]*/, Vbide_97::vbext_ProcKind* ProcKind/*[out]*/)
{
  BSTR pbstrName;
  this->get_ProcOfLine(Line, ProcKind, (BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_CountOfDeclarationLines(long* pDeclCountOfLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CountOfDeclarationLines"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDeclCountOfLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CodeModuleDispT<T>::get_CountOfDeclarationLines(void)
{
  long pDeclCountOfLines;
  this->get_CountOfDeclarationLines((long*)&pDeclCountOfLines);
  return pDeclCountOfLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/, 
                                     long* Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateEventProc"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<2> _args;
  _args[1] = EventName /*[VT_BSTR:0]*/;
  _args[2] = ObjectName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Line /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
_CodeModuleDispT<T>::CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/)
{
  long Line;
  this->CreateEventProc(EventName, ObjectName, (long*)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                          long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                          long* EndColumn/*[in,out]*/, VARIANT_BOOL WholeWord/*[in,def,opt]*/, 
                          VARIANT_BOOL MatchCase/*[in,def,opt]*/, 
                          VARIANT_BOOL PatternSearch/*[in,def,opt]*/, 
                          VARIANT_BOOL* pfFound/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<8> _args;
  _args[1] = Target /*[VT_BSTR:0]*/;
  _args[2] = StartLine /*[VT_I4:1]*/;
  _args[3] = StartColumn /*[VT_I4:1]*/;
  _args[4] = EndLine /*[VT_I4:1]*/;
  _args[5] = EndColumn /*[VT_I4:1]*/;
  _args[6] = WholeWord /*[VT_BOOL:0]*/;
  _args[7] = MatchCase /*[VT_BOOL:0]*/;
  _args[8] = PatternSearch /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pfFound /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_CodeModuleDispT<T>::Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                          long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                          long* EndColumn/*[in,out]*/, VARIANT_BOOL WholeWord/*[in,def,opt]*/, 
                          VARIANT_BOOL MatchCase/*[in,def,opt]*/, 
                          VARIANT_BOOL PatternSearch/*[in,def,opt]*/)
{
  VARIANT_BOOL pfFound;
  this->Find(Target, StartLine, StartColumn, EndLine, EndColumn, WholeWord, MatchCase, PatternSearch, (VARIANT_BOOL*)&pfFound);
  return pfFound;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodeModuleDispT<T>::get_CodePane(Vbide_97::CodePane** CodePane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodePane"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::CodePane**)CodePane /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::CodePane* __fastcall
_CodeModuleDispT<T>::get_CodePane(void)
{
  Vbide_97::CodePane* CodePane;
  this->get_CodePane((Vbide_97::CodePane**)&CodePane);
  return CodePane;
}

// *********************************************************************//
// SmartIntf: TCOM_CodePanes
// Interface: _CodePanes
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::get_Parent(Vbide_97::VBE** retval/*[out,retval]*/)
{
  return (*this)->get_Parent(retval);
}

template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::get_Parent(Vbide_97::VBEPtr* retval/*[out,retval]*/)
{
  return (*this)->get_Parent(VBE**)retval);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_CodePanesT<T>::get_Parent(void)
{
  Vbide_97::VBE* retval;
  OLECHECK(this->get_Parent((Vbide_97::VBE**)&retval));
  return (Vbide_97::VBEPtr)retval;
}

template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::get_VBE(Vbide_97::VBE** retval/*[out,retval]*/)
{
  return (*this)->get_VBE(retval);
}

template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::get_VBE(Vbide_97::VBEPtr* retval/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)retval);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_CodePanesT<T>::get_VBE(void)
{
  Vbide_97::VBE* retval;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&retval));
  return (Vbide_97::VBEPtr)retval;
}

template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::Item(VARIANT index/*[in]*/, Vbide_97::CodePane** CodePane/*[out,retval]*/)
{
  return (*this)->Item(index, CodePane);
}

template <class T> Vbide_97::CodePane* __fastcall
TCOM_CodePanesT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::CodePane* CodePane;
  OLECHECK(this->Item(, (Vbide_97::CodePane**)&CodePane));
  return CodePane;
}

template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::get_Count(long* Count/*[out,retval]*/)
{
  return (*this)->get_Count(Count);
}

template <class T> long __fastcall
TCOM_CodePanesT<T>::get_Count(void)
{
  long Count;
  OLECHECK(this->get_Count((long*)&Count));
  return Count;
}

template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::_NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppenum);
}

template <class T> LPUNKNOWN __fastcall
TCOM_CodePanesT<T>::_NewEnum(void)
{
  LPUNKNOWN ppenum;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppenum));
  return ppenum;
}

template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::get_Current(Vbide_97::CodePane** CodePane/*[out,retval]*/)
{
  return (*this)->get_Current(CodePane);
}

template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::get_Current(Vbide_97::CodePanePtr* CodePane/*[out,retval]*/)
{
  return (*this)->get_Current(CodePane**)CodePane);
}

template <class T> Vbide_97::CodePanePtr __fastcall
TCOM_CodePanesT<T>::get_Current(void)
{
  Vbide_97::CodePane* CodePane;
  OLECHECK(this->get_Current((Vbide_97::CodePane**)&CodePane));
  return (Vbide_97::CodePanePtr)CodePane;
}

template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::set_Current(Vbide_97::CodePane* CodePane/*[in]*/)
{
  return (*this)->set_Current(CodePane);
}

template <class T> HRESULT __fastcall
TCOM_CodePanesT<T>::set_Current(Vbide_97::CodePanePtr CodePane/*[in]*/)
{
  return (*this)->set_Current(CodePane*)CodePane);
}

// *********************************************************************//
// DispIntf:  _CodePanes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E172-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePanesDispT<T>::get_Parent(Vbide_97::VBE** retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_CodePanesDispT<T>::get_Parent(void)
{
  Vbide_97::VBE* retval;
  this->get_Parent((Vbide_97::VBE**)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePanesDispT<T>::get_VBE(Vbide_97::VBE** retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_CodePanesDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* retval;
  this->get_VBE((Vbide_97::VBE**)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePanesDispT<T>::Item(VARIANT index/*[in]*/, Vbide_97::CodePane** CodePane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::CodePane**)CodePane /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::CodePane* __fastcall
_CodePanesDispT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::CodePane* CodePane;
  this->Item(index, (Vbide_97::CodePane**)&CodePane);
  return CodePane;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePanesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CodePanesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePanesDispT<T>::_NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppenum /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_CodePanesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppenum;
  this->_NewEnum((LPUNKNOWN*)&ppenum);
  return ppenum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePanesDispT<T>::get_Current(Vbide_97::CodePane** CodePane/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Current"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::CodePane**)CodePane /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::CodePane* __fastcall
_CodePanesDispT<T>::get_Current(void)
{
  Vbide_97::CodePane* CodePane;
  this->get_Current((Vbide_97::CodePane**)&CodePane);
  return CodePane;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePanesDispT<T>::set_Current(Vbide_97::CodePane* CodePane/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Current"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::CodePane*)CodePane /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_CodePane
// Interface: _CodePane
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_Collection(Vbide_97::CodePanes** retval/*[out,retval]*/)
{
  return (*this)->get_Collection(retval);
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_Collection(Vbide_97::CodePanesPtr* retval/*[out,retval]*/)
{
  return (*this)->get_Collection(CodePanes**)retval);
}

template <class T> Vbide_97::CodePanesPtr __fastcall
TCOM_CodePaneT<T>::get_Collection(void)
{
  Vbide_97::CodePanes* retval;
  OLECHECK(this->get_Collection((Vbide_97::CodePanes**)&retval));
  return (Vbide_97::CodePanesPtr)retval;
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_VBE(Vbide_97::VBE** retval/*[out,retval]*/)
{
  return (*this)->get_VBE(retval);
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_VBE(Vbide_97::VBEPtr* retval/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)retval);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_CodePaneT<T>::get_VBE(void)
{
  Vbide_97::VBE* retval;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&retval));
  return (Vbide_97::VBEPtr)retval;
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_Window(Vbide_97::WINDOW** retval/*[out,retval]*/)
{
  return (*this)->get_Window(retval);
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_Window(Vbide_97::WINDOWPtr* retval/*[out,retval]*/)
{
  return (*this)->get_Window(WINDOW**)retval);
}

template <class T> Vbide_97::WINDOWPtr __fastcall
TCOM_CodePaneT<T>::get_Window(void)
{
  Vbide_97::WINDOW* retval;
  OLECHECK(this->get_Window((Vbide_97::WINDOW**)&retval));
  return (Vbide_97::WINDOWPtr)retval;
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::GetSelection(long* StartLine/*[out]*/, long* StartColumn/*[out]*/, 
                                long* EndLine/*[out]*/, long* EndColumn/*[out]*/)
{
  return (*this)->GetSelection(StartLine, StartColumn, EndLine, EndColumn);
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::SetSelection(long StartLine/*[in]*/, long StartColumn/*[in]*/, 
                                long EndLine/*[in]*/, long EndColumn/*[in]*/)
{
  return (*this)->SetSelection(StartLine, StartColumn, EndLine, EndColumn);
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_TopLine(long* TopLine/*[out,retval]*/)
{
  return (*this)->get_TopLine(TopLine);
}

template <class T> long __fastcall
TCOM_CodePaneT<T>::get_TopLine(void)
{
  long TopLine;
  OLECHECK(this->get_TopLine((long*)&TopLine));
  return TopLine;
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::set_TopLine(long TopLine/*[in]*/)
{
  return (*this)->set_TopLine(TopLine);
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_CountOfVisibleLines(long* CountOfVisibleLines/*[out,retval]*/)
{
  return (*this)->get_CountOfVisibleLines(CountOfVisibleLines);
}

template <class T> long __fastcall
TCOM_CodePaneT<T>::get_CountOfVisibleLines(void)
{
  long CountOfVisibleLines;
  OLECHECK(this->get_CountOfVisibleLines((long*)&CountOfVisibleLines));
  return CountOfVisibleLines;
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_CodeModule(Vbide_97::CodeModule** CodeModule/*[out,retval]*/)
{
  return (*this)->get_CodeModule(CodeModule);
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_CodeModule(Vbide_97::CodeModulePtr* CodeModule/*[out,retval]*/)
{
  return (*this)->get_CodeModule(CodeModule**)CodeModule);
}

template <class T> Vbide_97::CodeModulePtr __fastcall
TCOM_CodePaneT<T>::get_CodeModule(void)
{
  Vbide_97::CodeModule* CodeModule;
  OLECHECK(this->get_CodeModule((Vbide_97::CodeModule**)&CodeModule));
  return (Vbide_97::CodeModulePtr)CodeModule;
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::Show(void)
{
  return (*this)->Show();
}

template <class T> HRESULT __fastcall
TCOM_CodePaneT<T>::get_CodePaneView(Vbide_97::vbext_CodePaneview* pCodePaneview/*[out,retval]*/)
{
  return (*this)->get_CodePaneView(pCodePaneview);
}

template <class T> Vbide_97::vbext_CodePaneview __fastcall
TCOM_CodePaneT<T>::get_CodePaneView(void)
{
  Vbide_97::vbext_CodePaneview pCodePaneview;
  OLECHECK(this->get_CodePaneView((Vbide_97::vbext_CodePaneview*)&pCodePaneview));
  return pCodePaneview;
}

// *********************************************************************//
// DispIntf:  _CodePane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E176-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::get_Collection(Vbide_97::CodePanes** retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collection"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::CodePanes**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::CodePanes* __fastcall
_CodePaneDispT<T>::get_Collection(void)
{
  Vbide_97::CodePanes* retval;
  this->get_Collection((Vbide_97::CodePanes**)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::get_VBE(Vbide_97::VBE** retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_CodePaneDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* retval;
  this->get_VBE((Vbide_97::VBE**)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::get_Window(Vbide_97::WINDOW** retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Window"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::WINDOW**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::WINDOW* __fastcall
_CodePaneDispT<T>::get_Window(void)
{
  Vbide_97::WINDOW* retval;
  this->get_Window((Vbide_97::WINDOW**)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::GetSelection(long* StartLine/*[out]*/, long* StartColumn/*[out]*/, 
                                long* EndLine/*[out]*/, long* EndColumn/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSelection"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<4> _args;
  _args[1] = StartLine /*[VT_I4:1]*/;
  _args[2] = StartColumn /*[VT_I4:1]*/;
  _args[3] = EndLine /*[VT_I4:1]*/;
  _args[4] = EndColumn /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::SetSelection(long StartLine/*[in]*/, long StartColumn/*[in]*/, 
                                long EndLine/*[in]*/, long EndColumn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSelection"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<4> _args;
  _args[1] = StartLine /*[VT_I4:0]*/;
  _args[2] = StartColumn /*[VT_I4:0]*/;
  _args[3] = EndLine /*[VT_I4:0]*/;
  _args[4] = EndColumn /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::get_TopLine(long* TopLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopLine"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TopLine /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CodePaneDispT<T>::get_TopLine(void)
{
  long TopLine;
  this->get_TopLine((long*)&TopLine);
  return TopLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::set_TopLine(long TopLine/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopLine"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = TopLine /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::get_CountOfVisibleLines(long* CountOfVisibleLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CountOfVisibleLines"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CountOfVisibleLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CodePaneDispT<T>::get_CountOfVisibleLines(void)
{
  long CountOfVisibleLines;
  this->get_CountOfVisibleLines((long*)&CountOfVisibleLines);
  return CountOfVisibleLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::get_CodeModule(Vbide_97::CodeModule** CodeModule/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeModule"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::CodeModule**)CodeModule /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::CodeModule* __fastcall
_CodePaneDispT<T>::get_CodeModule(void)
{
  Vbide_97::CodeModule* CodeModule;
  this->get_CodeModule((Vbide_97::CodeModule**)&CodeModule);
  return CodeModule;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::Show()
{
  _TDispID _dispid(*this, OLETEXT("Show"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CodePaneDispT<T>::get_CodePaneView(Vbide_97::vbext_CodePaneview* pCodePaneview/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodePaneView"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCodePaneview /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::vbext_CodePaneview __fastcall
_CodePaneDispT<T>::get_CodePaneView(void)
{
  Vbide_97::vbext_CodePaneview pCodePaneview;
  this->get_CodePaneView((Vbide_97::vbext_CodePaneview*)&pCodePaneview);
  return pCodePaneview;
}

// *********************************************************************//
// SmartIntf: TCOM_References
// Interface: _References
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::get_Parent(Vbide_97::VBProject** retval/*[out,retval]*/)
{
  return (*this)->get_Parent(retval);
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::get_Parent(Vbide_97::VBProjectPtr* retval/*[out,retval]*/)
{
  return (*this)->get_Parent(VBProject**)retval);
}

template <class T> Vbide_97::VBProjectPtr __fastcall
TCOM_ReferencesT<T>::get_Parent(void)
{
  Vbide_97::VBProject* retval;
  OLECHECK(this->get_Parent((Vbide_97::VBProject**)&retval));
  return (Vbide_97::VBProjectPtr)retval;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::get_VBE(Vbide_97::VBE** retval/*[out,retval]*/)
{
  return (*this)->get_VBE(retval);
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::get_VBE(Vbide_97::VBEPtr* retval/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)retval);
}

template <class T> Vbide_97::VBEPtr __fastcall
TCOM_ReferencesT<T>::get_VBE(void)
{
  Vbide_97::VBE* retval;
  OLECHECK(this->get_VBE((Vbide_97::VBE**)&retval));
  return (Vbide_97::VBEPtr)retval;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::Item(VARIANT index/*[in]*/, Vbide_97::Reference** Reference/*[out,retval]*/)
{
  return (*this)->Item(index, Reference);
}

template <class T> Vbide_97::Reference* __fastcall
TCOM_ReferencesT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::Reference* Reference;
  OLECHECK(this->Item(, (Vbide_97::Reference**)&Reference));
  return Reference;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::get_Count(long* Count/*[out,retval]*/)
{
  return (*this)->get_Count(Count);
}

template <class T> long __fastcall
TCOM_ReferencesT<T>::get_Count(void)
{
  long Count;
  OLECHECK(this->get_Count((long*)&Count));
  return Count;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::_NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppenum);
}

template <class T> LPUNKNOWN __fastcall
TCOM_ReferencesT<T>::_NewEnum(void)
{
  LPUNKNOWN ppenum;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppenum));
  return ppenum;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/, 
                                 Vbide_97::Reference** Reference/*[out,retval]*/)
{
  return (*this)->AddFromGuid(Guid, Major, Minor, Reference);
}

template <class T> Vbide_97::Reference* __fastcall
TCOM_ReferencesT<T>::AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/)
{
  Vbide_97::Reference* Reference;
  OLECHECK(this->AddFromGuid(, (Vbide_97::Reference**)&Reference));
  return Reference;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::AddFromFile(BSTR FileName/*[in]*/, 
                                 Vbide_97::Reference** Reference/*[out,retval]*/)
{
  return (*this)->AddFromFile(FileName, Reference);
}

template <class T> Vbide_97::Reference* __fastcall
TCOM_ReferencesT<T>::AddFromFile(BSTR FileName/*[in]*/)
{
  Vbide_97::Reference* Reference;
  OLECHECK(this->AddFromFile(, (Vbide_97::Reference**)&Reference));
  return Reference;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::Remove(Vbide_97::Reference* Reference/*[in]*/)
{
  return (*this)->Remove(Reference);
}

// *********************************************************************//
// DispIntf:  _References
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17A-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::get_Parent(Vbide_97::VBProject** retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBProject**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBProject* __fastcall
_ReferencesDispT<T>::get_Parent(void)
{
  Vbide_97::VBProject* retval;
  this->get_Parent((Vbide_97::VBProject**)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::get_VBE(Vbide_97::VBE** retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
_ReferencesDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* retval;
  this->get_VBE((Vbide_97::VBE**)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::Item(VARIANT index/*[in]*/, Vbide_97::Reference** Reference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Reference**)Reference /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::Reference* __fastcall
_ReferencesDispT<T>::Item(VARIANT index/*[in]*/)
{
  Vbide_97::Reference* Reference;
  this->Item(index, (Vbide_97::Reference**)&Reference);
  return Reference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReferencesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::_NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppenum /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_ReferencesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppenum;
  this->_NewEnum((LPUNKNOWN*)&ppenum);
  return ppenum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/, 
                                 Vbide_97::Reference** Reference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFromGuid"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<3> _args;
  _args[1] = Guid /*[VT_BSTR:0]*/;
  _args[2] = Major /*[VT_I4:0]*/;
  _args[3] = Minor /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Reference**)Reference /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::Reference* __fastcall
_ReferencesDispT<T>::AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/)
{
  Vbide_97::Reference* Reference;
  this->AddFromGuid(Guid, Major, Minor, (Vbide_97::Reference**)&Reference);
  return Reference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::AddFromFile(BSTR FileName/*[in]*/, 
                                 Vbide_97::Reference** Reference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFromFile"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::Reference**)Reference /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Vbide_97::Reference* __fastcall
_ReferencesDispT<T>::AddFromFile(BSTR FileName/*[in]*/)
{
  Vbide_97::Reference* Reference;
  this->AddFromFile(FileName, (Vbide_97::Reference**)&Reference);
  return Reference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::Remove(Vbide_97::Reference* Reference/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Reference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Collection(Vbide_97::References** retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collection"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::References**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::References* __fastcall
ReferenceDispT<T>::get_Collection(void)
{
  Vbide_97::References* retval;
  this->get_Collection((Vbide_97::References**)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_VBE(Vbide_97::VBE** lppaReturn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_97::VBE**)lppaReturn /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::VBE* __fastcall
ReferenceDispT<T>::get_VBE(void)
{
  Vbide_97::VBE* lppaReturn;
  this->get_VBE((Vbide_97::VBE**)&lppaReturn);
  return lppaReturn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ReferenceDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Guid(BSTR* pbstrGuid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Guid"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrGuid /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ReferenceDispT<T>::get_Guid(void)
{
  BSTR pbstrGuid;
  this->get_Guid((BSTR*)&pbstrGuid);
  return pbstrGuid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Major(long* pMajor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Major"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMajor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ReferenceDispT<T>::get_Major(void)
{
  long pMajor;
  this->get_Major((long*)&pMajor);
  return pMajor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Minor(long* pMinor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Minor"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMinor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ReferenceDispT<T>::get_Minor(void)
{
  long pMinor;
  this->get_Minor((long*)&pMinor);
  return pMinor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_FullPath(BSTR* pbstrLocation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullPath"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrLocation /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ReferenceDispT<T>::get_FullPath(void)
{
  BSTR pbstrLocation;
  this->get_FullPath((BSTR*)&pbstrLocation);
  return pbstrLocation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_BuiltIn(VARIANT_BOOL* pfIsDefault/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsDefault /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ReferenceDispT<T>::get_BuiltIn(void)
{
  VARIANT_BOOL pfIsDefault;
  this->get_BuiltIn((VARIANT_BOOL*)&pfIsDefault);
  return pfIsDefault;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_IsBroken(VARIANT_BOOL* pfIsBroken/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsBroken"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsBroken /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
ReferenceDispT<T>::get_IsBroken(void)
{
  VARIANT_BOOL pfIsBroken;
  this->get_IsBroken((VARIANT_BOOL*)&pfIsBroken);
  return pfIsBroken;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Type(Vbide_97::vbext_RefKind* pKind/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pKind /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_97::vbext_RefKind __fastcall
ReferenceDispT<T>::get_Type(void)
{
  Vbide_97::vbext_RefKind pKind;
  this->get_Type((Vbide_97::vbext_RefKind*)&pKind);
  return pKind;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Description(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ReferenceDispT<T>::get_Description(void)
{
  BSTR pbstrName;
  this->get_Description((BSTR*)&pbstrName);
  return pbstrName;
}

// *********************************************************************//
// DispIntf:  _dispReferences_Events
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {CDDE3804-2064-11CF-867F-00AA005FF34A}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispReferences_EventsDispT<T>::ItemAdded(Vbide_97::Reference* Reference)
{
  _TDispID _dispid(/* ItemAdded */ DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_dispReferences_EventsDispT<T>::ItemRemoved(Vbide_97::Reference* Reference)
{
  _TDispID _dispid(/* ItemRemoved */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Vbide_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Windows
// Interface: TCOM_Windoz
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Windoz, _Windoz, &CLSID_Windows, &IID__Windoz> CoWindows;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : LinkedWindows
// Interface: TCOM_LinkedWindows
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_LinkedWindows, _LinkedWindows, &CLSID_LinkedWindows, &IID__LinkedWindows> CoLinkedWindows;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ProjectTemplate
// Interface: TCOM_ProjectTemplate
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ProjectTemplate, _ProjectTemplate, &CLSID_ProjectTemplate, &IID__ProjectTemplate> CoProjectTemplate;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : VBProject
// Interface: TCOM_VBProject
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_VBProject, _VBProject, &CLSID_VBProject, &IID__VBProject> CoVBProject;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : VBProjects
// Interface: TCOM_VBProjects
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_VBProjects, _VBProjects, &CLSID_VBProjects, &IID__VBProjects> CoVBProjects;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Components
// Interface: TCOM_Components
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Components, _Components, &CLSID_Components, &IID__Components> CoComponents;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : VBComponents
// Interface: TCOM_VBComponents
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_VBComponents, _VBComponents, &CLSID_VBComponents, &IID__VBComponents> CoVBComponents;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Component
// Interface: TCOM_Component
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Component, _Component, &CLSID_Component, &IID__Component> CoComponent;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : VBComponent
// Interface: TCOM_VBComponent
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_VBComponent, _VBComponent, &CLSID_VBComponent, &IID__VBComponent> CoVBComponent;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Properties
// Interface: TCOM_Properties
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Properties, _Properties, &CLSID_Properties, &IID__Properties> CoProperties;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodeModule
// Interface: TCOM_CodeModule
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodeModule, _CodeModule, &CLSID_CodeModule, &IID__CodeModule> CoCodeModule;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodePanes
// Interface: TCOM_CodePanes
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodePanes, _CodePanes, &CLSID_CodePanes, &IID__CodePanes> CoCodePanes;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CodePane
// Interface: TCOM_CodePane
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_CodePane, _CodePane, &CLSID_CodePane, &IID__CodePane> CoCodePane;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : References
// Interface: TCOM_References
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_References, _References, &CLSID_References, &IID__References> CoReferences;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ReferencesEvents
// Event Interface : _dispReferencesEvents
// *********************************************************************//
template <class T>
class TEvents_ReferencesEvents : public IConnectionPointImpl<T,
                                                 &DIID__dispReferencesEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_ItemAdded(Vbide_97::Reference* Reference);
  void            Fire_ItemRemoved(Vbide_97::Reference* Reference);
protected:
  _dispReferencesEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ReferencesEvents<T>::Fire_ItemAdded(Vbide_97::Reference* Reference)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ItemAdded(Reference);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_ReferencesEvents<T>::Fire_ItemRemoved(Vbide_97::Reference* Reference)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ItemRemoved(Reference);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : CommandBarEvents
// Event Interface : _dispCommandBarControlEvents
// *********************************************************************//
template <class T>
class TEvents_CommandBarEvents : public IConnectionPointImpl<T,
                                                 &DIID__dispCommandBarControlEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_Click(LPDISPATCH CommandBarControl, VARIANT_BOOL* handled, 
                             VARIANT_BOOL* CancelDefault);
protected:
  _dispCommandBarControlEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_CommandBarEvents<T>::Fire_Click(LPDISPATCH CommandBarControl, VARIANT_BOOL* handled, 
                                        VARIANT_BOOL* CancelDefault)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Click(CommandBarControl, handled, CancelDefault);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : References
// Event Interface : _dispReferences_Events
// *********************************************************************//
template <class T>
class TEvents_References : public IConnectionPointImpl<T,
                                                 &DIID__dispReferences_Events,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_ItemAdded(Vbide_97::Reference* Reference);
  void            Fire_ItemRemoved(Vbide_97::Reference* Reference);
protected:
  _dispReferences_EventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_References<T>::Fire_ItemAdded(Vbide_97::Reference* Reference)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ItemAdded(Reference);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_References<T>::Fire_ItemRemoved(Vbide_97::Reference* Reference)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ItemRemoved(Reference);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Vbide_97

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Vbide_97;
#endif

#pragma option pop

#endif // VBIDE_97H
