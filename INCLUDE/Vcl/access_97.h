// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.4.1  $
// File generated on 1/24/2000 9:44:53 AM from Type Library described below.

// ************************************************************************ //
// Type Lib: g:\rampage\typelib\TypeLibraries\MSACC8.olb (1)
// IID\LCID: {4AFFC9A0-5F99-101B-AF4E-00AA003F0F07}\0
// Helpfile: C:\Program Files\Microsoft Office\Office\acvba80.hlp
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
//   (2) v4.0 DAO, (C:\Program Files\Common Files\Microsoft Shared\DAO\DAO350.DLL)
//   (3) v2.0 Office, (D:\Program Files\Microsoft Office\Office\MSO97.DLL)
//   (4) v4.0 StdVCL, (C:\WINNT\System32\STDVCL40.DLL)
// ************************************************************************ //
#ifndef   __Access_97_h__
#define   __Access_97_h__

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0500)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#include "DAO_97.h"
#include "Office_97.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Access_97
{

// *********************************************************************//
// HelpString: Microsoft Access 8.0 Object Library
// Version:    8.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_Access;
extern __declspec (package) const GUID GUID_OldConstants;
extern __declspec (package) const GUID GUID_Constants;
extern __declspec (package) const GUID GUID_AcModuleType;
extern __declspec (package) const GUID GUID_AcCloseSave;
extern __declspec (package) const GUID GUID_AcQuitOption;
extern __declspec (package) const GUID GUID_AcSection;
extern __declspec (package) const GUID GUID_AcControlType;
extern __declspec (package) const GUID GUID_AcDataObjectType;
extern __declspec (package) const GUID GUID_AcDataTransferType;
extern __declspec (package) const GUID GUID_AcSendObjectType;
extern __declspec (package) const GUID GUID_AcObjectType;
extern __declspec (package) const GUID GUID_AcFindField;
extern __declspec (package) const GUID GUID_AcFindMatch;
extern __declspec (package) const GUID GUID_AcFormView;
extern __declspec (package) const GUID GUID_AcOpenDataMode;
extern __declspec (package) const GUID GUID_AcFormOpenDataMode;
extern __declspec (package) const GUID GUID_AcOutputObjectType;
extern __declspec (package) const GUID GUID_AcPrintQuality;
extern __declspec (package) const GUID GUID_AcPrintRange;
extern __declspec (package) const GUID GUID_AcRecord;
extern __declspec (package) const GUID GUID_AcSearchDirection;
extern __declspec (package) const GUID GUID_AcSysCmdAction;
extern __declspec (package) const GUID GUID_AcTextTransferType;
extern __declspec (package) const GUID GUID_AcView;
extern __declspec (package) const GUID GUID_AcWindowMode;
extern __declspec (package) const GUID GUID_AcSpreadSheetType;
extern __declspec (package) const GUID GUID_AcHyperlinkPart;
extern __declspec (package) const GUID GUID_AcCommand;
extern __declspec (package) const GUID IID_IDoCmd;
extern __declspec (package) const GUID CLSID_DoCmd;
extern __declspec (package) const GUID IID___AccessProperty;
extern __declspec (package) const GUID IID__AccessProperty;
extern __declspec (package) const GUID IID_Properties;
extern __declspec (package) const GUID IID__ItemsSelected;
extern __declspec (package) const GUID IID_Children;
extern __declspec (package) const GUID IID__AccessField;
extern __declspec (package) const GUID CLSID_AccessField;
extern __declspec (package) const GUID IID___Help;
extern __declspec (package) const GUID IID__Hyperlink;
extern __declspec (package) const GUID CLSID_AccessHyperlink;
extern __declspec (package) const GUID IID__Page;
extern __declspec (package) const GUID IID_Pages;
extern __declspec (package) const GUID IID__Control;
extern __declspec (package) const GUID CLSID_AccessControl;
extern __declspec (package) const GUID IID___ControlInReportEvents;
extern __declspec (package) const GUID CLSID__ControlInReportEvents;
extern __declspec (package) const GUID IID_Controls_;
extern __declspec (package) const GUID IID__Label;
extern __declspec (package) const GUID IID__LabelEvents;
extern __declspec (package) const GUID CLSID_AccessLabel;
extern __declspec (package) const GUID IID__ChildLabelEvents;
extern __declspec (package) const GUID CLSID__ChildLabel;
extern __declspec (package) const GUID IID__Rectangle;
extern __declspec (package) const GUID IID__RectangleEvents;
extern __declspec (package) const GUID CLSID_AccessRectangle;
extern __declspec (package) const GUID IID__Line;
extern __declspec (package) const GUID IID__LineEvents;
extern __declspec (package) const GUID CLSID_AccessLine;
extern __declspec (package) const GUID IID__Image;
extern __declspec (package) const GUID IID__ImageEvents;
extern __declspec (package) const GUID CLSID_AccessImage;
extern __declspec (package) const GUID IID__CommandButton;
extern __declspec (package) const GUID IID__CommandButtonEvents;
extern __declspec (package) const GUID CLSID_AccessCommandButton;
extern __declspec (package) const GUID IID__OptionButton;
extern __declspec (package) const GUID IID__OptionButtonEvents;
extern __declspec (package) const GUID CLSID_AccessOptionButton;
extern __declspec (package) const GUID IID__OptionButtonInOptionEvents;
extern __declspec (package) const GUID CLSID__OptionButtonInOption;
extern __declspec (package) const GUID IID__Checkbox;
extern __declspec (package) const GUID IID__CheckBoxEvents;
extern __declspec (package) const GUID CLSID_AccessCheckBox;
extern __declspec (package) const GUID IID__CheckBoxInOptionEvents;
extern __declspec (package) const GUID CLSID__CheckBoxInOption;
extern __declspec (package) const GUID IID__OptionGroup;
extern __declspec (package) const GUID IID__OptionGroupEvents;
extern __declspec (package) const GUID CLSID_AccessOptionGroup;
extern __declspec (package) const GUID IID__BoundObjectFrame;
extern __declspec (package) const GUID IID__BoundObjectFrameEvents;
extern __declspec (package) const GUID CLSID_AccessBoundObjectFrame;
extern __declspec (package) const GUID IID__Textbox;
extern __declspec (package) const GUID IID__TextBoxEvents;
extern __declspec (package) const GUID CLSID_AccessTextBox;
extern __declspec (package) const GUID IID__ListBox;
extern __declspec (package) const GUID IID__ListBoxEvents;
extern __declspec (package) const GUID CLSID_AccessListBox;
extern __declspec (package) const GUID IID__Combobox;
extern __declspec (package) const GUID IID__ComboBoxEvents;
extern __declspec (package) const GUID CLSID_AccessComboBox;
extern __declspec (package) const GUID IID__ObjectFrame;
extern __declspec (package) const GUID IID__ObjectFrameEvents;
extern __declspec (package) const GUID CLSID_AccessObjectFrame;
extern __declspec (package) const GUID IID__PageBreak;
extern __declspec (package) const GUID IID__PageBreakEvents;
extern __declspec (package) const GUID CLSID_AccessPageBreak;
extern __declspec (package) const GUID IID__ToggleButton;
extern __declspec (package) const GUID IID__ToggleButtonEvents;
extern __declspec (package) const GUID CLSID_AccessToggleButton;
extern __declspec (package) const GUID IID__ToggleButtonInOptionEvents;
extern __declspec (package) const GUID CLSID__ToggleButtonInOption;
extern __declspec (package) const GUID IID__PaletteButton;
extern __declspec (package) const GUID IID__PaletteButtonEvents;
extern __declspec (package) const GUID CLSID_AccessPaletteButton;
extern __declspec (package) const GUID IID__SubForm;
extern __declspec (package) const GUID IID__SubFormEvents;
extern __declspec (package) const GUID CLSID_AccessSubForm;
extern __declspec (package) const GUID IID__SubReport;
extern __declspec (package) const GUID IID__SubReportEvents;
extern __declspec (package) const GUID CLSID_AccessSubReport;
extern __declspec (package) const GUID IID__CustomControl;
extern __declspec (package) const GUID IID__CustomControlEvents;
extern __declspec (package) const GUID CLSID_AccessCustomControl;
extern __declspec (package) const GUID IID__CustomControlInReportEvents;
extern __declspec (package) const GUID CLSID__CustomControlInReport;
extern __declspec (package) const GUID IID__TabControl;
extern __declspec (package) const GUID IID__TabControlEvents;
extern __declspec (package) const GUID CLSID_AccessTabControl;
extern __declspec (package) const GUID IID__PageEvents;
extern __declspec (package) const GUID CLSID_AccessPage;
extern __declspec (package) const GUID IID__Section;
extern __declspec (package) const GUID IID__SectionEvents;
extern __declspec (package) const GUID CLSID_AccessSection;
extern __declspec (package) const GUID IID__GroupLevel;
extern __declspec (package) const GUID IID__GroupLevelEvents;
extern __declspec (package) const GUID CLSID_AccessGroupLevel;
extern __declspec (package) const GUID IID__SectionInReportEvents;
extern __declspec (package) const GUID CLSID__SectionInReport;
extern __declspec (package) const GUID IID__PageHdrFtrInReportEvents;
extern __declspec (package) const GUID CLSID__PageHdrFtrInReport;
extern __declspec (package) const GUID GUID_RefKind;
extern __declspec (package) const GUID GUID_ProcKind;
extern __declspec (package) const GUID IID_Module;
extern __declspec (package) const GUID IID_Modules;
extern __declspec (package) const GUID IID__Form;
extern __declspec (package) const GUID IID__FormEvents;
extern __declspec (package) const GUID CLSID_AccessForm;
extern __declspec (package) const GUID IID_Forms_;
extern __declspec (package) const GUID IID__Report;
extern __declspec (package) const GUID IID__ReportEvents;
extern __declspec (package) const GUID CLSID_AccessReport;
extern __declspec (package) const GUID IID_Reports;
extern __declspec (package) const GUID IID_Screen;
extern __declspec (package) const GUID IID__Application;
extern __declspec (package) const GUID CLSID_AccessApplication;
extern __declspec (package) const GUID IID_Reference;
extern __declspec (package) const GUID IID__References;
extern __declspec (package) const GUID DIID__References_Events;
extern __declspec (package) const GUID CLSID_AccessReferences;
extern __declspec (package) const GUID IID__Dummy;
extern __declspec (package) const GUID IID__DummyEvents;
extern __declspec (package) const GUID CLSID_Class;
extern __declspec (package) const GUID GUID____ProcKind;
extern __declspec (package) const GUID IID____IVbaModule;
extern __declspec (package) const GUID CLSID____CodeModule;
extern __declspec (package) const GUID IID____IVbaEditors;
extern __declspec (package) const GUID CLSID____Editors;
extern __declspec (package) const GUID GUID____vbext_CodePaneview;
extern __declspec (package) const GUID IID____IVbaEditor;
extern __declspec (package) const GUID CLSID____Editor;
extern __declspec (package) const GUID IID_IVbaReferences;
extern __declspec (package) const GUID GUID____RefKind;
extern __declspec (package) const GUID IID____Reference;
extern __declspec (package) const GUID DIID____IVbaExtReferencesEvents;
extern __declspec (package) const GUID CLSID____References;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      AcModuleType;
enum      AcCloseSave;
enum      AcQuitOption;
enum      AcSection;
enum      AcControlType;
enum      AcDataObjectType;
enum      AcDataTransferType;
enum      AcSendObjectType;
enum      AcObjectType;
enum      AcFindField;
enum      AcFindMatch;
enum      AcFormView;
enum      AcOpenDataMode;
enum      AcFormOpenDataMode;
enum      AcOutputObjectType;
enum      AcPrintQuality;
enum      AcPrintRange;
enum      AcRecord;
enum      AcSearchDirection;
enum      AcSysCmdAction;
enum      AcTextTransferType;
enum      AcView;
enum      AcWindowMode;
enum      AcSpreadSheetType;
enum      AcHyperlinkPart;
enum      AcCommand;
enum      RefKind;
enum      ProcKind;
enum      ___ProcKind;
enum      ___vbext_CodePaneview;
enum      ___RefKind;
interface DECLSPEC_UUID("{C547E760-9658-101B-81EE-00AA004750E2}") IDoCmd;
typedef TComInterface<IDoCmd, &IID_IDoCmd> IDoCmdPtr;
interface DECLSPEC_UUID("{331FDD01-CF31-11CD-8701-00AA003F0F07}") __AccessProperty;
typedef TComInterface<__AccessProperty, &IID___AccessProperty> __AccessPropertyPtr;
interface DECLSPEC_UUID("{331FDD00-CF31-11CD-8701-00AA003F0F07}") _AccessProperty;
typedef TComInterface<_AccessProperty, &IID__AccessProperty> _AccessPropertyPtr;
interface DECLSPEC_UUID("{331FDD02-CF31-11CD-8701-00AA003F0F07}") Properties;
typedef TComInterface<Properties, &IID_Properties> PropertiesPtr;
interface DECLSPEC_UUID("{31B09710-EADC-11CD-B9F7-00AA004753B5}") _ItemsSelected;
typedef TComInterface<_ItemsSelected, &IID__ItemsSelected> _ItemsSelectedPtr;
interface DECLSPEC_UUID("{3B06E977-E47C-11CD-8701-00AA003F0F07}") Children;
typedef TComInterface<Children, &IID_Children> ChildrenPtr;
interface DECLSPEC_UUID("{B1C1EAC1-486F-11CE-A65D-00AA003F0F07}") _AccessField;
typedef TComInterface<_AccessField, &IID__AccessField> _AccessFieldPtr;
interface DECLSPEC_UUID("{9CD4A761-A6A9-11CE-A686-00AA003F0F07}") __Help;
typedef TComInterface<__Help, &IID___Help> __HelpPtr;
interface DECLSPEC_UUID("{50D56611-60AC-11CF-82C9-00AA004B9FE6}") _Hyperlink;
typedef TComInterface<_Hyperlink, &IID__Hyperlink> _HyperlinkPtr;
interface DECLSPEC_UUID("{3B06E974-E47C-11CD-8701-00AA003F0F07}") _Page;
typedef TComInterface<_Page, &IID__Page> _PagePtr;
interface DECLSPEC_UUID("{3B06E978-E47C-11CD-8701-00AA003F0F07}") Pages;
typedef TComInterface<Pages, &IID_Pages> PagesPtr;
interface DECLSPEC_UUID("{26B96540-8F8E-101B-AF4E-00AA003F0F07}") _Control;
typedef TComInterface<_Control, &IID__Control> _ControlPtr;
interface DECLSPEC_UUID("{90B322A5-F1D9-11CD-8701-00AA003F0F07}") __ControlInReportEvents;
typedef TComInterface<__ControlInReportEvents, &IID___ControlInReportEvents> __ControlInReportEventsPtr;
interface DECLSPEC_UUID("{5970C574-EB8C-11CD-8701-00AA003F0F07}") Controls_;
typedef TComInterface<Controls_, &IID_Controls_> Controls_Ptr;
interface DECLSPEC_UUID("{3B06E948-E47C-11CD-8701-00AA003F0F07}") _Label;
typedef TComInterface<_Label, &IID__Label> _LabelPtr;
interface DECLSPEC_UUID("{BC9E4341-F037-11CD-8701-00AA003F0F07}") _LabelEvents;
typedef TComInterface<_LabelEvents, &IID__LabelEvents> _LabelEventsPtr;
interface DECLSPEC_UUID("{BC9E4358-F037-11CD-8701-00AA003F0F07}") _ChildLabelEvents;
typedef TComInterface<_ChildLabelEvents, &IID__ChildLabelEvents> _ChildLabelEventsPtr;
interface DECLSPEC_UUID("{3B06E94A-E47C-11CD-8701-00AA003F0F07}") _Rectangle;
typedef TComInterface<_Rectangle, &IID__Rectangle> _RectanglePtr;
interface DECLSPEC_UUID("{BC9E4342-F037-11CD-8701-00AA003F0F07}") _RectangleEvents;
typedef TComInterface<_RectangleEvents, &IID__RectangleEvents> _RectangleEventsPtr;
interface DECLSPEC_UUID("{3B06E94C-E47C-11CD-8701-00AA003F0F07}") _Line;
typedef TComInterface<_Line, &IID__Line> _LinePtr;
interface DECLSPEC_UUID("{BC9E4343-F037-11CD-8701-00AA003F0F07}") _LineEvents;
typedef TComInterface<_LineEvents, &IID__LineEvents> _LineEventsPtr;
interface DECLSPEC_UUID("{3B06E94E-E47C-11CD-8701-00AA003F0F07}") _Image;
typedef TComInterface<_Image, &IID__Image> _ImagePtr;
interface DECLSPEC_UUID("{BC9E4344-F037-11CD-8701-00AA003F0F07}") _ImageEvents;
typedef TComInterface<_ImageEvents, &IID__ImageEvents> _ImageEventsPtr;
interface DECLSPEC_UUID("{3B06E950-E47C-11CD-8701-00AA003F0F07}") _CommandButton;
typedef TComInterface<_CommandButton, &IID__CommandButton> _CommandButtonPtr;
interface DECLSPEC_UUID("{BC9E4345-F037-11CD-8701-00AA003F0F07}") _CommandButtonEvents;
typedef TComInterface<_CommandButtonEvents, &IID__CommandButtonEvents> _CommandButtonEventsPtr;
interface DECLSPEC_UUID("{3B06E952-E47C-11CD-8701-00AA003F0F07}") _OptionButton;
typedef TComInterface<_OptionButton, &IID__OptionButton> _OptionButtonPtr;
interface DECLSPEC_UUID("{BC9E4346-F037-11CD-8701-00AA003F0F07}") _OptionButtonEvents;
typedef TComInterface<_OptionButtonEvents, &IID__OptionButtonEvents> _OptionButtonEventsPtr;
interface DECLSPEC_UUID("{BC9E435B-F037-11CD-8701-00AA003F0F07}") _OptionButtonInOptionEvents;
typedef TComInterface<_OptionButtonInOptionEvents, &IID__OptionButtonInOptionEvents> _OptionButtonInOptionEventsPtr;
interface DECLSPEC_UUID("{3B06E954-E47C-11CD-8701-00AA003F0F07}") _Checkbox;
typedef TComInterface<_Checkbox, &IID__Checkbox> _CheckboxPtr;
interface DECLSPEC_UUID("{BC9E4347-F037-11CD-8701-00AA003F0F07}") _CheckBoxEvents;
typedef TComInterface<_CheckBoxEvents, &IID__CheckBoxEvents> _CheckBoxEventsPtr;
interface DECLSPEC_UUID("{BC9E435D-F037-11CD-8701-00AA003F0F07}") _CheckBoxInOptionEvents;
typedef TComInterface<_CheckBoxInOptionEvents, &IID__CheckBoxInOptionEvents> _CheckBoxInOptionEventsPtr;
interface DECLSPEC_UUID("{3B06E956-E47C-11CD-8701-00AA003F0F07}") _OptionGroup;
typedef TComInterface<_OptionGroup, &IID__OptionGroup> _OptionGroupPtr;
interface DECLSPEC_UUID("{BC9E4348-F037-11CD-8701-00AA003F0F07}") _OptionGroupEvents;
typedef TComInterface<_OptionGroupEvents, &IID__OptionGroupEvents> _OptionGroupEventsPtr;
interface DECLSPEC_UUID("{3B06E958-E47C-11CD-8701-00AA003F0F07}") _BoundObjectFrame;
typedef TComInterface<_BoundObjectFrame, &IID__BoundObjectFrame> _BoundObjectFramePtr;
interface DECLSPEC_UUID("{BC9E4349-F037-11CD-8701-00AA003F0F07}") _BoundObjectFrameEvents;
typedef TComInterface<_BoundObjectFrameEvents, &IID__BoundObjectFrameEvents> _BoundObjectFrameEventsPtr;
interface DECLSPEC_UUID("{3B06E946-E47C-11CD-8701-00AA003F0F07}") _Textbox;
typedef TComInterface<_Textbox, &IID__Textbox> _TextboxPtr;
interface DECLSPEC_UUID("{BC9E4340-F037-11CD-8701-00AA003F0F07}") _TextBoxEvents;
typedef TComInterface<_TextBoxEvents, &IID__TextBoxEvents> _TextBoxEventsPtr;
interface DECLSPEC_UUID("{3B06E95A-E47C-11CD-8701-00AA003F0F07}") _ListBox;
typedef TComInterface<_ListBox, &IID__ListBox> _ListBoxPtr;
interface DECLSPEC_UUID("{BC9E434B-F037-11CD-8701-00AA003F0F07}") _ListBoxEvents;
typedef TComInterface<_ListBoxEvents, &IID__ListBoxEvents> _ListBoxEventsPtr;
interface DECLSPEC_UUID("{3B06E95C-E47C-11CD-8701-00AA003F0F07}") _Combobox;
typedef TComInterface<_Combobox, &IID__Combobox> _ComboboxPtr;
interface DECLSPEC_UUID("{BC9E434C-F037-11CD-8701-00AA003F0F07}") _ComboBoxEvents;
typedef TComInterface<_ComboBoxEvents, &IID__ComboBoxEvents> _ComboBoxEventsPtr;
interface DECLSPEC_UUID("{3B06E95E-E47C-11CD-8701-00AA003F0F07}") _ObjectFrame;
typedef TComInterface<_ObjectFrame, &IID__ObjectFrame> _ObjectFramePtr;
interface DECLSPEC_UUID("{BC9E434D-F037-11CD-8701-00AA003F0F07}") _ObjectFrameEvents;
typedef TComInterface<_ObjectFrameEvents, &IID__ObjectFrameEvents> _ObjectFrameEventsPtr;
interface DECLSPEC_UUID("{3B06E960-E47C-11CD-8701-00AA003F0F07}") _PageBreak;
typedef TComInterface<_PageBreak, &IID__PageBreak> _PageBreakPtr;
interface DECLSPEC_UUID("{BC9E434E-F037-11CD-8701-00AA003F0F07}") _PageBreakEvents;
typedef TComInterface<_PageBreakEvents, &IID__PageBreakEvents> _PageBreakEventsPtr;
interface DECLSPEC_UUID("{3B06E962-E47C-11CD-8701-00AA003F0F07}") _ToggleButton;
typedef TComInterface<_ToggleButton, &IID__ToggleButton> _ToggleButtonPtr;
interface DECLSPEC_UUID("{BC9E434F-F037-11CD-8701-00AA003F0F07}") _ToggleButtonEvents;
typedef TComInterface<_ToggleButtonEvents, &IID__ToggleButtonEvents> _ToggleButtonEventsPtr;
interface DECLSPEC_UUID("{BC9E435F-F037-11CD-8701-00AA003F0F07}") _ToggleButtonInOptionEvents;
typedef TComInterface<_ToggleButtonInOptionEvents, &IID__ToggleButtonInOptionEvents> _ToggleButtonInOptionEventsPtr;
interface DECLSPEC_UUID("{9CD4A760-A6A9-11CE-A686-00AA003F0F07}") _PaletteButton;
typedef TComInterface<_PaletteButton, &IID__PaletteButton> _PaletteButtonPtr;
interface DECLSPEC_UUID("{A843CCD0-6E2C-11CF-A219-00A0C90542FF}") _PaletteButtonEvents;
typedef TComInterface<_PaletteButtonEvents, &IID__PaletteButtonEvents> _PaletteButtonEventsPtr;
interface DECLSPEC_UUID("{3B06E964-E47C-11CD-8701-00AA003F0F07}") _SubForm;
typedef TComInterface<_SubForm, &IID__SubForm> _SubFormPtr;
interface DECLSPEC_UUID("{BC9E4350-F037-11CD-8701-00AA003F0F07}") _SubFormEvents;
typedef TComInterface<_SubFormEvents, &IID__SubFormEvents> _SubFormEventsPtr;
interface DECLSPEC_UUID("{3B06E966-E47C-11CD-8701-00AA003F0F07}") _SubReport;
typedef TComInterface<_SubReport, &IID__SubReport> _SubReportPtr;
interface DECLSPEC_UUID("{BC9E4351-F037-11CD-8701-00AA003F0F07}") _SubReportEvents;
typedef TComInterface<_SubReportEvents, &IID__SubReportEvents> _SubReportEventsPtr;
interface DECLSPEC_UUID("{3B06E968-E47C-11CD-8701-00AA003F0F07}") _CustomControl;
typedef TComInterface<_CustomControl, &IID__CustomControl> _CustomControlPtr;
interface DECLSPEC_UUID("{BC9E4352-F037-11CD-8701-00AA003F0F07}") _CustomControlEvents;
typedef TComInterface<_CustomControlEvents, &IID__CustomControlEvents> _CustomControlEventsPtr;
interface DECLSPEC_UUID("{300471E2-7426-11CE-AB64-00AA0042B7CE}") _CustomControlInReportEvents;
typedef TComInterface<_CustomControlInReportEvents, &IID__CustomControlInReportEvents> _CustomControlInReportEventsPtr;
interface DECLSPEC_UUID("{3B06E971-E47C-11CD-8701-00AA003F0F07}") _TabControl;
typedef TComInterface<_TabControl, &IID__TabControl> _TabControlPtr;
interface DECLSPEC_UUID("{3B06E972-E47C-11CD-8701-00AA003F0F07}") _TabControlEvents;
typedef TComInterface<_TabControlEvents, &IID__TabControlEvents> _TabControlEventsPtr;
interface DECLSPEC_UUID("{3B06E975-E47C-11CD-8701-00AA003F0F07}") _PageEvents;
typedef TComInterface<_PageEvents, &IID__PageEvents> _PageEventsPtr;
interface DECLSPEC_UUID("{331FDCFC-CF31-11CD-8701-00AA003F0F07}") _Section;
typedef TComInterface<_Section, &IID__Section> _SectionPtr;
interface DECLSPEC_UUID("{BC9E4353-F037-11CD-8701-00AA003F0F07}") _SectionEvents;
typedef TComInterface<_SectionEvents, &IID__SectionEvents> _SectionEventsPtr;
interface DECLSPEC_UUID("{331FDD27-CF31-11CD-8701-00AA003F0F07}") _GroupLevel;
typedef TComInterface<_GroupLevel, &IID__GroupLevel> _GroupLevelPtr;
interface DECLSPEC_UUID("{BC9E4354-F037-11CD-8701-00AA003F0F07}") _GroupLevelEvents;
typedef TComInterface<_GroupLevelEvents, &IID__GroupLevelEvents> _GroupLevelEventsPtr;
interface DECLSPEC_UUID("{BC9E4361-F037-11CD-8701-00AA003F0F07}") _SectionInReportEvents;
typedef TComInterface<_SectionInReportEvents, &IID__SectionInReportEvents> _SectionInReportEventsPtr;
interface DECLSPEC_UUID("{7AD9E905-BAF8-11CE-A68A-00AA003F0F07}") _PageHdrFtrInReportEvents;
typedef TComInterface<_PageHdrFtrInReportEvents, &IID__PageHdrFtrInReportEvents> _PageHdrFtrInReportEventsPtr;
interface DECLSPEC_UUID("{331FDCFE-CF31-11CD-8701-00AA003F0F07}") Module;
typedef TComInterface<Module, &IID_Module> ModulePtr;
interface DECLSPEC_UUID("{9DD0AF42-6E28-11CF-9008-00AA0042B7CE}") Modules;
typedef TComInterface<Modules, &IID_Modules> ModulesPtr;
interface DECLSPEC_UUID("{E5135D80-8F8D-101B-AF4E-00AA003F0F07}") _Form;
typedef TComInterface<_Form, &IID__Form> _FormPtr;
interface DECLSPEC_UUID("{331FDCFB-CF31-11CD-8701-00AA003F0F07}") _FormEvents;
typedef TComInterface<_FormEvents, &IID__FormEvents> _FormEventsPtr;
interface DECLSPEC_UUID("{B1BB0E80-6128-101B-AF4E-00AA003F0F07}") Forms_;
typedef TComInterface<Forms_, &IID_Forms_> Forms_Ptr;
interface DECLSPEC_UUID("{3E8B6B00-91FF-101B-AF4E-00AA003F0F07}") _Report;
typedef TComInterface<_Report, &IID__Report> _ReportPtr;
interface DECLSPEC_UUID("{BC9E4357-F037-11CD-8701-00AA003F0F07}") _ReportEvents;
typedef TComInterface<_ReportEvents, &IID__ReportEvents> _ReportEventsPtr;
interface DECLSPEC_UUID("{D1523700-6128-101B-AF4E-00AA003F0F07}") Reports;
typedef TComInterface<Reports, &IID_Reports> ReportsPtr;
interface DECLSPEC_UUID("{DC6B66C0-6128-101B-AF4E-00AA003F0F07}") Screen;
typedef TComInterface<Screen, &IID_Screen> ScreenPtr;
interface DECLSPEC_UUID("{68CCE6C0-6129-101B-AF4E-00AA003F0F07}") _Application;
typedef TComInterface<_Application, &IID__Application> _ApplicationPtr;
interface DECLSPEC_UUID("{EB106212-9C89-11CF-A2B3-00A0C90542FF}") Reference;
typedef TComInterface<Reference, &IID_Reference> ReferencePtr;
interface DECLSPEC_UUID("{EB106213-9C89-11CF-A2B3-00A0C90542FF}") _References;
typedef TComInterface<_References, &IID__References> _ReferencesPtr;
interface DECLSPEC_UUID("{F163F201-ADA2-11CF-89A9-00A0C9054129}") _References_Events;
typedef TComInterface<_References_Events, &DIID__References_Events> _References_EventsPtr;
interface DECLSPEC_UUID("{8B06E320-B23C-11CF-89A8-00A0C9054129}") _Dummy;
typedef TComInterface<_Dummy, &IID__Dummy> _DummyPtr;
interface DECLSPEC_UUID("{58BF3100-B580-11CF-89A8-00A0C9054129}") _DummyEvents;
typedef TComInterface<_DummyEvents, &IID__DummyEvents> _DummyEventsPtr;
interface DECLSPEC_UUID("{0002E16E-0000-0000-C000-000000000046}") ___IVbaModule;
typedef TComInterface<___IVbaModule, &IID____IVbaModule> ___IVbaModulePtr;
interface DECLSPEC_UUID("{0002E172-0000-0000-C000-000000000046}") ___IVbaEditors;
typedef TComInterface<___IVbaEditors, &IID____IVbaEditors> ___IVbaEditorsPtr;
interface DECLSPEC_UUID("{0002E176-0000-0000-C000-000000000046}") ___IVbaEditor;
typedef TComInterface<___IVbaEditor, &IID____IVbaEditor> ___IVbaEditorPtr;
interface DECLSPEC_UUID("{0002E17A-0000-0000-C000-000000000046}") IVbaReferences;
typedef TComInterface<IVbaReferences, &IID_IVbaReferences> IVbaReferencesPtr;
interface DECLSPEC_UUID("{0002E17E-0000-0000-C000-000000000046}") ___Reference;
typedef TComInterface<___Reference, &IID____Reference> ___ReferencePtr;
interface DECLSPEC_UUID("{CDDE3804-2064-11CF-867F-00AA005FF34A}") ___IVbaExtReferencesEvents;
typedef TComInterface<___IVbaExtReferencesEvents, &DIID____IVbaExtReferencesEvents> ___IVbaExtReferencesEventsPtr;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDoCmd DoCmd;
typedef IDoCmdPtr DoCmdPtr;
typedef _AccessField AccessField;
typedef _AccessFieldPtr AccessFieldPtr;
typedef _Hyperlink AccessHyperlink;
typedef _HyperlinkPtr AccessHyperlinkPtr;
typedef _Control AccessControl;
typedef _ControlPtr AccessControlPtr;
typedef _Control _ControlInReportEvents;
typedef _ControlPtr _ControlInReportEventsPtr;
typedef _Label AccessLabel;
typedef _LabelPtr AccessLabelPtr;
typedef _Label _ChildLabel;
typedef _LabelPtr _ChildLabelPtr;
typedef _Rectangle AccessRectangle;
typedef _RectanglePtr AccessRectanglePtr;
typedef _Line AccessLine;
typedef _LinePtr AccessLinePtr;
typedef _Image AccessImage;
typedef _ImagePtr AccessImagePtr;
typedef _CommandButton AccessCommandButton;
typedef _CommandButtonPtr AccessCommandButtonPtr;
typedef _OptionButton AccessOptionButton;
typedef _OptionButtonPtr AccessOptionButtonPtr;
typedef _OptionButton _OptionButtonInOption;
typedef _OptionButtonPtr _OptionButtonInOptionPtr;
typedef _Checkbox AccessCheckBox;
typedef _CheckboxPtr AccessCheckBoxPtr;
typedef _Checkbox _CheckBoxInOption;
typedef _CheckboxPtr _CheckBoxInOptionPtr;
typedef _OptionGroup AccessOptionGroup;
typedef _OptionGroupPtr AccessOptionGroupPtr;
typedef _BoundObjectFrame AccessBoundObjectFrame;
typedef _BoundObjectFramePtr AccessBoundObjectFramePtr;
typedef _Textbox AccessTextBox;
typedef _TextboxPtr AccessTextBoxPtr;
typedef _ListBox AccessListBox;
typedef _ListBoxPtr AccessListBoxPtr;
typedef _Combobox AccessComboBox;
typedef _ComboboxPtr AccessComboBoxPtr;
typedef _ObjectFrame AccessObjectFrame;
typedef _ObjectFramePtr AccessObjectFramePtr;
typedef _PageBreak AccessPageBreak;
typedef _PageBreakPtr AccessPageBreakPtr;
typedef _ToggleButton AccessToggleButton;
typedef _ToggleButtonPtr AccessToggleButtonPtr;
typedef _ToggleButton _ToggleButtonInOption;
typedef _ToggleButtonPtr _ToggleButtonInOptionPtr;
typedef _PaletteButton AccessPaletteButton;
typedef _PaletteButtonPtr AccessPaletteButtonPtr;
typedef _SubForm AccessSubForm;
typedef _SubFormPtr AccessSubFormPtr;
typedef _SubReport AccessSubReport;
typedef _SubReportPtr AccessSubReportPtr;
typedef _CustomControl AccessCustomControl;
typedef _CustomControlPtr AccessCustomControlPtr;
typedef _CustomControl _CustomControlInReport;
typedef _CustomControlPtr _CustomControlInReportPtr;
typedef _TabControl AccessTabControl;
typedef _TabControlPtr AccessTabControlPtr;
typedef _Page AccessPage;
typedef _PagePtr AccessPagePtr;
typedef _Section AccessSection;
typedef _SectionPtr AccessSectionPtr;
typedef _GroupLevel AccessGroupLevel;
typedef _GroupLevelPtr AccessGroupLevelPtr;
typedef _Section _SectionInReport;
typedef _SectionPtr _SectionInReportPtr;
typedef _Section _PageHdrFtrInReport;
typedef _SectionPtr _PageHdrFtrInReportPtr;
typedef _Form AccessForm;
typedef _FormPtr AccessFormPtr;
typedef _Report AccessReport;
typedef _ReportPtr AccessReportPtr;
typedef _Application AccessApplication;
typedef _ApplicationPtr AccessApplicationPtr;
typedef _References AccessReferences;
typedef _ReferencesPtr AccessReferencesPtr;
typedef _Dummy Class;
typedef _DummyPtr ClassPtr;
typedef ___IVbaModule ___CodeModule;
typedef ___IVbaModulePtr ___CodeModulePtr;
typedef ___IVbaEditors ___Editors;
typedef ___IVbaEditorsPtr ___EditorsPtr;
typedef ___IVbaEditor ___Editor;
typedef ___IVbaEditorPtr ___EditorPtr;
typedef IVbaReferences ___References;
typedef IVbaReferencesPtr ___ReferencesPtr;

#define LIBID_OF_DoCmd (&LIBID_Access)
#define LIBID_OF_AccessField (&LIBID_Access)
#define LIBID_OF_AccessHyperlink (&LIBID_Access)
#define LIBID_OF_AccessControl (&LIBID_Access)
#define LIBID_OF__ControlInReportEvents (&LIBID_Access)
#define LIBID_OF_AccessLabel (&LIBID_Access)
#define LIBID_OF__ChildLabel (&LIBID_Access)
#define LIBID_OF_AccessRectangle (&LIBID_Access)
#define LIBID_OF_AccessLine (&LIBID_Access)
#define LIBID_OF_AccessImage (&LIBID_Access)
#define LIBID_OF_AccessCommandButton (&LIBID_Access)
#define LIBID_OF_AccessOptionButton (&LIBID_Access)
#define LIBID_OF__OptionButtonInOption (&LIBID_Access)
#define LIBID_OF_AccessCheckBox (&LIBID_Access)
#define LIBID_OF__CheckBoxInOption (&LIBID_Access)
#define LIBID_OF_AccessOptionGroup (&LIBID_Access)
#define LIBID_OF_AccessBoundObjectFrame (&LIBID_Access)
#define LIBID_OF_AccessTextBox (&LIBID_Access)
#define LIBID_OF_AccessListBox (&LIBID_Access)
#define LIBID_OF_AccessComboBox (&LIBID_Access)
#define LIBID_OF_AccessObjectFrame (&LIBID_Access)
#define LIBID_OF_AccessPageBreak (&LIBID_Access)
#define LIBID_OF_AccessToggleButton (&LIBID_Access)
#define LIBID_OF__ToggleButtonInOption (&LIBID_Access)
#define LIBID_OF_AccessPaletteButton (&LIBID_Access)
#define LIBID_OF_AccessSubForm (&LIBID_Access)
#define LIBID_OF_AccessSubReport (&LIBID_Access)
#define LIBID_OF_AccessCustomControl (&LIBID_Access)
#define LIBID_OF__CustomControlInReport (&LIBID_Access)
#define LIBID_OF_AccessTabControl (&LIBID_Access)
#define LIBID_OF_AccessPage (&LIBID_Access)
#define LIBID_OF_AccessSection (&LIBID_Access)
#define LIBID_OF_AccessGroupLevel (&LIBID_Access)
#define LIBID_OF__SectionInReport (&LIBID_Access)
#define LIBID_OF__PageHdrFtrInReport (&LIBID_Access)
#define LIBID_OF_AccessForm (&LIBID_Access)
#define LIBID_OF_AccessReport (&LIBID_Access)
#define LIBID_OF_AccessApplication (&LIBID_Access)
#define LIBID_OF_AccessReferences (&LIBID_Access)
#define LIBID_OF_Class (&LIBID_Access)
#define LIBID_OF____CodeModule (&LIBID_Access)
#define LIBID_OF____Editors (&LIBID_Access)
#define LIBID_OF____Editor (&LIBID_Access)
#define LIBID_OF____References (&LIBID_Access)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum AcModuleType
{
  acStandardModule = 0, 
  acClassModule = 1
} AcModuleType;

typedef enum AcCloseSave
{
  acSavePrompt = 0, 
  acSaveYes = 1, 
  acSaveNo = 2
} AcCloseSave;

typedef enum AcQuitOption
{
  acQuitPrompt = 0, 
  acQuitSaveAll = 1, 
  acQuitSaveNone = 2
} AcQuitOption;

typedef enum AcSection
{
  acDetail = 0, 
  acHeader = 1, 
  acFooter = 2, 
  acPageHeader = 3, 
  acPageFooter = 4, 
  acGroupLevel1Header = 5, 
  acGroupLevel1Footer = 6, 
  acGroupLevel2Header = 7, 
  acGroupLevel2Footer = 8
} AcSection;

typedef enum AcControlType
{
  acLabel = 100, 
  acRectangle = 101, 
  acLine = 102, 
  acImage = 103, 
  acCommandButton = 104, 
  acOptionButton = 105, 
  acCheckBox = 106, 
  acOptionGroup = 107, 
  acBoundObjectFrame = 108, 
  acTextBox = 109, 
  acListBox = 110, 
  acComboBox = 111, 
  acSubform = 112, 
  acObjectFrame = 114, 
  acPageBreak = 118, 
  acCustomControl = 119, 
  acToggleButton = 122, 
  acTabCtl = 123, 
  acPage = 124
} AcControlType;

typedef enum AcDataObjectType
{
  acActiveDataObject = 0xFFFFFFFF, 
  acDataTable = 0, 
  acDataQuery = 1, 
  acDataForm = 2
} AcDataObjectType;

typedef enum AcDataTransferType
{
  acImport = 0, 
  acExport = 1, 
  acLink = 2
} AcDataTransferType;

typedef enum AcSendObjectType
{
  acSendNoObject = 0xFFFFFFFF, 
  acSendTable = 0, 
  acSendQuery = 1, 
  acSendForm = 2, 
  acSendReport = 3, 
  acSendModule = 5
} AcSendObjectType;

typedef enum AcObjectType
{
  acDefault = 0xFFFFFFFF, 
  acTable = 0, 
  acQuery = 1, 
  acForm = 2, 
  acReport = 3, 
  acMacro = 4, 
  acModule = 5
} AcObjectType;

typedef enum AcFindField
{
  acCurrent = 0xFFFFFFFF, 
  acAll = 0
} AcFindField;

typedef enum AcFindMatch
{
  acAnywhere = 0, 
  acEntire = 1, 
  acStart = 2
} AcFindMatch;

typedef enum AcFormView
{
  acNormal = 0, 
  acDesign = 1, 
  acPreview = 2, 
  acFormDS = 3
} AcFormView;

typedef enum AcOpenDataMode
{
  acAdd = 0, 
  acEdit = 1, 
  acReadOnly = 2
} AcOpenDataMode;

typedef enum AcFormOpenDataMode
{
  acFormPropertySettings = 0xFFFFFFFF, 
  acFormAdd = 0, 
  acFormEdit = 1, 
  acFormReadOnly = 2
} AcFormOpenDataMode;

typedef enum AcOutputObjectType
{
  acOutputTable = 0, 
  acOutputQuery = 1, 
  acOutputForm = 2, 
  acOutputReport = 3, 
  acOutputModule = 5
} AcOutputObjectType;

typedef enum AcPrintQuality
{
  acHigh = 0, 
  acMedium = 1, 
  acLow = 2, 
  acDraft = 3
} AcPrintQuality;

typedef enum AcPrintRange
{
  acPrintAll = 0, 
  acSelection = 1, 
  acPages = 2
} AcPrintRange;

typedef enum AcRecord
{
  acPrevious = 0, 
  acNext = 1, 
  acFirst = 2, 
  acLast = 3, 
  acGoTo = 4, 
  acNewRec = 5
} AcRecord;

typedef enum AcSearchDirection
{
  acUp = 0, 
  acDown = 1, 
  acSearchAll = 2
} AcSearchDirection;

typedef enum AcSysCmdAction
{
  acSysCmdInitMeter = 1, 
  acSysCmdUpdateMeter = 2, 
  acSysCmdRemoveMeter = 3, 
  acSysCmdSetStatus = 4, 
  acSysCmdClearStatus = 5, 
  acSysCmdRuntime = 6, 
  acSysCmdAccessVer = 7, 
  acSysCmdIniFile = 8, 
  acSysCmdAccessDir = 9, 
  acSysCmdGetObjectState = 10, 
  acSysCmdClearHelpTopic = 11, 
  acSysCmdProfile = 12, 
  acSysCmdGetWorkgroupFile = 13
} AcSysCmdAction;

typedef enum AcTextTransferType
{
  acImportDelim = 0, 
  acImportFixed = 1, 
  acExportDelim = 2, 
  acExportFixed = 3, 
  acExportMerge = 4, 
  acLinkDelim = 5, 
  acLinkFixed = 6, 
  acImportHTML = 7, 
  acExportHTML = 8, 
  acLinkHTML = 9
} AcTextTransferType;

typedef enum AcView
{
  acViewNormal = 0, 
  acViewDesign = 1, 
  acViewPreview = 2
} AcView;

typedef enum AcWindowMode
{
  acWindowNormal = 0, 
  acHidden = 1, 
  acIcon = 2, 
  acDialog = 3
} AcWindowMode;

typedef enum AcSpreadSheetType
{
  acSpreadsheetTypeExcel3 = 0, 
  acSpreadsheetTypeLotusWK1 = 2, 
  acSpreadsheetTypeLotusWK3 = 3, 
  acSpreadsheetTypeExcel5 = 5, 
  acSpreadsheetTypeExcel7 = 5, 
  acSpreadsheetTypeExcel4 = 6, 
  acSpreadsheetTypeLotusWK4 = 7, 
  acSpreadsheetTypeExcel97 = 8
} AcSpreadSheetType;

typedef enum AcHyperlinkPart
{
  acDisplayedValue = 0, 
  acDisplayText = 1, 
  acAddress = 2, 
  acSubAddress = 3
} AcHyperlinkPart;

typedef enum AcCommand
{
  acCmdWindowUnhide = 1, 
  acCmdWindowHide = 2, 
  acCmdExit = 3, 
  acCmdCompactDatabase = 4, 
  acCmdEncryptDecryptDatabase = 5, 
  acCmdRepairDatabase = 6, 
  acCmdMakeMDEFile = 7, 
  acCmdMoreWindows = 8, 
  acCmdAppRestore = 9, 
  acCmdAppMaximize = 10, 
  acCmdAppMinimize = 11, 
  acCmdAppMove = 12, 
  acCmdAppSize = 13, 
  acCmdDocRestore = 14, 
  acCmdDocMaximize = 15, 
  acCmdDocMove = 16, 
  acCmdDocSize = 17, 
  acCmdRefresh = 18, 
  acCmdFont = 19, 
  acCmdSave = 20, 
  acCmdSaveAs = 21, 
  acCmdWindowCascade = 22, 
  acCmdTileVertically = 23, 
  acCmdWindowArrangeIcons = 24, 
  acCmdOpenDatabase = 25, 
  acCmdNewDatabase = 26, 
  acCmdOLEDDELinks = 27, 
  acCmdRecordsGoToNew = 28, 
  acCmdReplace = 29, 
  acCmdFind = 30, 
  acCmdRunMacro = 31, 
  acCmdPageSetup = 32, 
  acCmdInsertObject = 33, 
  acCmdDuplicate = 34, 
  acCmdAboutMicrosoftAccess = 35, 
  acCmdFormHdrFtr = 36, 
  acCmdReportHdrFtr = 37, 
  acCmdPasteAppend = 38, 
  acCmdInsertFile = 39, 
  acCmdSelectForm = 40, 
  acCmdTabOrder = 41, 
  acCmdFieldList = 42, 
  acCmdAlignLeft = 43, 
  acCmdAlignRight = 44, 
  acCmdAlignTop = 45, 
  acCmdAlignBottom = 46, 
  acCmdAlignToGrid = 47, 
  acCmdSizeToGrid = 48, 
  acCmdOptions = 49, 
  acCmdSelectRecord = 50, 
  acCmdSortingAndGrouping = 51, 
  acCmdBringToFront = 52, 
  acCmdSendToBack = 53, 
  acCmdPrintPreview = 54, 
  acCmdApplyDefault = 55, 
  acCmdSetControlDefaults = 56, 
  acCmdOLEObjectDefaultVerb = 57, 
  acCmdClose = 58, 
  acCmdSizeToFit = 59, 
  acCmdDocMinimize = 60, 
  acCmdViewRuler = 61, 
  acCmdSnapToGrid = 62, 
  acCmdViewGrid = 63, 
  acCmdPasteSpecial = 64, 
  acCmdRecordsGoToNext = 65, 
  acCmdRecordsGoToPrevious = 66, 
  acCmdRecordsGoToFirst = 67, 
  acCmdRecordsGoToLast = 68, 
  acCmdSizeToFitForm = 69, 
  acCmdEditingAllowed = 70, 
  acCmdClearGrid = 71, 
  acCmdJoinProperties = 72, 
  acCmdQueryTotals = 73, 
  acCmdQueryTypeCrosstab = 74, 
  acCmdTableNames = 75, 
  acCmdQueryParameters = 76, 
  acCmdFormatCells = 77, 
  acCmdDataEntry = 78, 
  acCmdHideColumns = 79, 
  acCmdUnhideColumns = 80, 
  acCmdDeleteQueryColumn = 81, 
  acCmdInsertQueryColumn = 82, 
  acCmdRemoveTable = 84, 
  acCmdViewToolbox = 85, 
  acCmdMacroNames = 86, 
  acCmdMacroConditions = 87, 
  acCmdSingleStep = 88, 
  acCmdQueryTypeSelect = 89, 
  acCmdQueryTypeUpdate = 90, 
  acCmdQueryTypeAppend = 91, 
  acCmdQueryTypeDelete = 92, 
  acCmdApplyFilterSort = 93, 
  acCmdQueryTypeMakeTable = 94, 
  acCmdLoadFromQuery = 95, 
  acCmdSaveAsQuery = 96, 
  acCmdSaveRecord = 97, 
  acCmdAdvancedFilterSort = 99, 
  acCmdMicrosoftAccessHelpTopics = 100, 
  acCmdLinkTables = 102, 
  acCmdUserAndGroupPermissions = 103, 
  acCmdUserAndGroupAccounts = 104, 
  acCmdFreezeColumn = 105, 
  acCmdUnfreezeAllColumns = 106, 
  acCmdPrimaryKey = 107, 
  acCmdSubformDatasheet = 108, 
  acCmdSelectAllRecords = 109, 
  acCmdViewTables = 110, 
  acCmdViewQueries = 111, 
  acCmdViewForms = 112, 
  acCmdViewReports = 113, 
  acCmdViewMacros = 114, 
  acCmdViewModules = 115, 
  acCmdRowHeight = 116, 
  acCmdColumnWidth = 117, 
  acCmdInsertFileIntoModule = 118, 
  acCmdSaveModuleAsText = 119, 
  acCmdFindPrevious = 120, 
  acCmdWindowSplit = 121, 
  acCmdProcedureDefinition = 122, 
  acCmdDebugWindow = 123, 
  acCmdReset = 124, 
  acCmdCompileAllModules = 125, 
  acCmdCompileAndSaveAllModules = 126, 
  acCmdGoContinue = 127, 
  acCmdStepOver = 128, 
  acCmdSetNextStatement = 129, 
  acCmdShowNextStatement = 130, 
  acCmdToggleBreakpoint = 131, 
  acCmdClearAllBreakpoints = 132, 
  acCmdRelationships = 133, 
  acCmdNewObjectTable = 134, 
  acCmdNewObjectQuery = 135, 
  acCmdNewObjectForm = 136, 
  acCmdNewObjectReport = 137, 
  acCmdNewObjectMacro = 138, 
  acCmdNewObjectModule = 139, 
  acCmdNewObjectClassModule = 140, 
  acCmdLayoutPreview = 141, 
  acCmdSaveAsReport = 142, 
  acCmdRename = 143, 
  acCmdRemoveFilterSort = 144, 
  acCmdSaveLayout = 145, 
  acCmdClearAll = 146, 
  acCmdHideTable = 147, 
  acCmdShowDirectRelationships = 148, 
  acCmdShowAllRelationships = 149, 
  acCmdCreateRelationship = 150, 
  acCmdEditRelationship = 151, 
  acCmdIndexes = 152, 
  acCmdAlignToShortest = 153, 
  acCmdAlignToTallest = 154, 
  acCmdSizeToNarrowest = 155, 
  acCmdSizeToWidest = 156, 
  acCmdHorizontalSpacingMakeEqual = 157, 
  acCmdHorizontalSpacingDecrease = 158, 
  acCmdHorizontalSpacingIncrease = 159, 
  acCmdVerticalSpacingMakeEqual = 160, 
  acCmdVerticalSpacingDecrease = 161, 
  acCmdVerticalSpacingIncrease = 162, 
  acCmdSortAscending = 163, 
  acCmdSortDescending = 164, 
  acCmdToolbarsCustomize = 165, 
  acCmdOLEObjectConvert = 167, 
  acCmdQueryTypeSQLDataDefinition = 168, 
  acCmdQueryTypeSQLPassThrough = 169, 
  acCmdViewCode = 170, 
  acCmdConvertDatabase = 171, 
  acCmdCallStack = 172, 
  acCmdSend = 173, 
  acCmdOutputToExcel = 175, 
  acCmdOutputToRTF = 176, 
  acCmdOutputToText = 177, 
  acCmdInvokeBuilder = 178, 
  acCmdZoomBox = 179, 
  acCmdQueryTypeSQLUnion = 180, 
  acCmdRun = 181, 
  acCmdPageHdrFtr = 182, 
  acCmdDesignView = 183, 
  acCmdSQLView = 184, 
  acCmdShowTable = 185, 
  acCmdCloseWindow = 186, 
  acCmdInsertRows = 187, 
  acCmdDeleteRows = 188, 
  acCmdCut = 189, 
  acCmdCopy = 190, 
  acCmdPaste = 191, 
  acCmdAutoDial = 192, 
  acCmdNewObjectAutoForm = 193, 
  acCmdNewObjectAutoReport = 194, 
  acCmdWordMailMerge = 195, 
  acCmdTestValidationRules = 196, 
  acCmdControlWizardsToggle = 197, 
  acCmdEnd = 198, 
  acCmdRedo = 199, 
  acCmdObjectBrowser = 200, 
  acCmdAddWatch = 201, 
  acCmdEditWatch = 202, 
  acCmdQuickWatch = 203, 
  acCmdStepToCursor = 204, 
  acCmdIndent = 205, 
  acCmdOutdent = 206, 
  acCmdFilterByForm = 207, 
  acCmdFilterBySelection = 208, 
  acCmdViewLargeIcons = 209, 
  acCmdViewDetails = 210, 
  acCmdViewSmallIcons = 211, 
  acCmdViewList = 212, 
  acCmdLineUpIcons = 213, 
  acCmdArrangeIconsByName = 214, 
  acCmdArrangeIconsByType = 215, 
  acCmdArrangeIconsByCreated = 216, 
  acCmdArrangeIconsByModified = 217, 
  acCmdArrangeIconsAuto = 218, 
  acCmdCreateShortcut = 219, 
  acCmdToggleFilter = 220, 
  acCmdOpenTable = 221, 
  acCmdInsertPicture = 222, 
  acCmdDeleteRecord = 223, 
  acCmdStartupProperties = 224, 
  acCmdPageNumber = 225, 
  acCmdDateAndTime = 226, 
  acCmdChangeToTextBox = 227, 
  acCmdChangeToLabel = 228, 
  acCmdChangeToListBox = 229, 
  acCmdChangeToComboBox = 230, 
  acCmdChangeToCheckBox = 231, 
  acCmdChangeToToggleButton = 232, 
  acCmdChangeToOptionButton = 233, 
  acCmdChangeToImage = 234, 
  acCmdAnswerWizard = 235, 
  acCmdMicrosoftOnTheWeb = 236, 
  acCmdClearItemDefaults = 237, 
  acCmdZoom200 = 238, 
  acCmdZoom150 = 239, 
  acCmdZoom100 = 240, 
  acCmdZoom75 = 241, 
  acCmdZoom50 = 242, 
  acCmdZoom25 = 243, 
  acCmdZoom10 = 244, 
  acCmdFitToWindow = 245, 
  acCmdPreviewOnePage = 246, 
  acCmdPreviewTwoPages = 247, 
  acCmdPreviewFourPages = 248, 
  acCmdPreviewEightPages = 249, 
  acCmdPreviewTwelvePages = 250, 
  acCmdOpenURL = 251, 
  acCmdOpenStartPage = 252, 
  acCmdOpenSearchPage = 253, 
  acCmdRegisterActiveXControls = 254, 
  acCmdDeleteTab = 255, 
  acCmdDatabaseProperties = 256, 
  acCmdImport = 257, 
  acCmdInsertActiveXControl = 258, 
  acCmdInsertHyperlink = 259, 
  acCmdReferences = 260, 
  acCmdAutoCorrect = 261, 
  acCmdInsertProcedure = 262, 
  acCmdCreateReplica = 263, 
  acCmdSynchronizeNow = 264, 
  acCmdRecoverDesignMaster = 265, 
  acCmdResolveConflicts = 266, 
  acCmdDeleteWatch = 267, 
  acCmdSpelling = 269, 
  acCmdAutoFormat = 270, 
  acCmdDeleteTableColumn = 271, 
  acCmdInsertTableColumn = 272, 
  acCmdInsertLookupColumn = 273, 
  acCmdRenameColumn = 274, 
  acCmdSetDatabasePassword = 275, 
  acCmdUserLevelSecurityWizard = 276, 
  acCmdFilterExcludingSelection = 277, 
  acCmdQuickPrint = 278, 
  acCmdConvertMacrosToVisualBasic = 279, 
  acCmdSaveAllModules = 280, 
  acCmdFormView = 281, 
  acCmdDatasheetView = 282, 
  acCmdAnalyzePerformance = 283, 
  acCmdAnalyzeTable = 284, 
  acCmdDocumenter = 285, 
  acCmdTileHorizontally = 286, 
  acCmdProperties = 287, 
  acCmdTransparentBackground = 288, 
  acCmdTransparentBorder = 289, 
  acCmdCompileLoadedModules = 290, 
  acCmdInsertLookupField = 291, 
  acCmdUndo = 292, 
  acCmdInsertChart = 293, 
  acCmdGoBack = 294, 
  acCmdGoForward = 295, 
  acCmdStopLoadingPage = 296, 
  acCmdRefreshPage = 297, 
  acCmdFavoritesOpen = 298, 
  acCmdFavoritesAddTo = 299, 
  acCmdShowOnlyWebToolbar = 300, 
  acCmdToolbarControlProperties = 301, 
  acCmdShowMembers = 302, 
  acCmdListConstants = 303, 
  acCmdQuickInfo = 304, 
  acCmdParameterInfo = 305, 
  acCmdCompleteWord = 306, 
  acCmdBookmarksToggle = 307, 
  acCmdBookmarksNext = 308, 
  acCmdBookmarksPrevious = 309, 
  acCmdBookmarksClearAll = 310, 
  acCmdStepOut = 311, 
  acCmdFindPrevWordUnderCursor = 312, 
  acCmdFindNextWordUnderCursor = 313, 
  acCmdObjBrwFindWholeWordOnly = 314, 
  acCmdObjBrwShowHiddenMembers = 315, 
  acCmdObjBrwHelp = 316, 
  acCmdObjBrwViewDefinition = 317, 
  acCmdObjBrwGroupMembers = 318, 
  acCmdSelectReport = 319, 
  acCmdPublish = 320, 
  acCmdSaveAsHTML = 321, 
  acCmdSaveAsIDC = 322, 
  acCmdSaveAsASP = 323, 
  acCmdPublishDefaults = 324, 
  acCmdEditHyperlink = 325, 
  acCmdOpenHyperlink = 326, 
  acCmdOpenNewHyperlink = 327, 
  acCmdCopyHyperlink = 328, 
  acCmdHyperlinkDisplayText = 329, 
  acCmdTabControlPageOrder = 330, 
  acCmdInsertPage = 331, 
  acCmdDeletePage = 332, 
  acCmdSelectAll = 333, 
  acCmdCreateMenuFromMacro = 334, 
  acCmdCreateToolbarFromMacro = 335, 
  acCmdCreateShortcutMenuFromMacro = 336, 
  acCmdDelete = 337, 
  acCmdRunOpenMacro = 338, 
  acCmdLastPosition = 339, 
  acCmdPrint = 340, 
  acCmdFindNext = 341, 
  acCmdStepInto = 342
} AcCommand;

typedef enum RefKind
{
  TypeLib = 0, 
  Project = 1
} RefKind;

typedef enum ProcKind
{
  vbext_pk_Proc = 0, 
  vbext_pk_Let = 1, 
  vbext_pk_Set = 2, 
  vbext_pk_Get = 3
} ProcKind;

typedef enum ___ProcKind
{
  ___vbext_pkProc = 0, 
  ___vbext_pk_Let = 1, 
  ___vbext_pk_Set = 2, 
  ___vbext_pk_Get = 3
} ___ProcKind;

typedef enum ___vbext_CodePaneview
{
  ___vbext_codeview_ProcedureView = 0, 
  ___vbext_cocdview_FullModuleView = 1
} ___vbext_CodePaneview;

typedef enum ___RefKind
{
  ___TypeLib = 0, 
  ___Project = 1
} ___RefKind;

// *********************************************************************//
// Interface: IDoCmd
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C547E760-9658-101B-81EE-00AA004750E2}
// *********************************************************************//
interface IDoCmd  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE AddMenu(TVariantInParam MenuName/*[in]*/, 
                                            TVariantInParam MenuMacroName/*[in]*/, 
                                            TVariantInParam StatusBarText/*[in]*/) = 0; // [1001]
  virtual HRESULT STDMETHODCALLTYPE ApplyFilter(TVariantInParam FilterName/*[in,opt]*/= TNoParam(), 
                                                TVariantInParam WhereCondition/*[in,opt]*/= TNoParam()) = 0; // [1002]
  virtual HRESULT STDMETHODCALLTYPE Beep(void) = 0; // [1003]
  virtual HRESULT STDMETHODCALLTYPE CancelEvent(void) = 0; // [1004]
  virtual HRESULT STDMETHODCALLTYPE Close(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                          TVariantInParam ObjectName/*[in,opt]*/, 
                                          Access_97::AcCloseSave Save/*[in,def,opt]*/) = 0; // [1005]
  virtual HRESULT STDMETHODCALLTYPE CopyObject(TVariantInParam DestinationDatabase/*[in,opt]*/, 
                                               TVariantInParam NewName/*[in,opt]*/, 
                                               Access_97::AcObjectType SourceObjectType/*[in,def,opt]*/, 
                                               TVariantInParam SourceObjectName/*[in,opt]*/) = 0; // [1006]
  virtual HRESULT STDMETHODCALLTYPE DoMenuItem(TVariantInParam MenuBar/*[in]*/, 
                                               TVariantInParam MenuName/*[in]*/, 
                                               TVariantInParam Command/*[in]*/, 
                                               TVariantInParam Subcommand/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam Version/*[in,opt]*/= TNoParam()) = 0; // [1007]
  virtual HRESULT STDMETHODCALLTYPE Echo(TVariantInParam EchoOn/*[in]*/, 
                                         TVariantInParam StatusBarText/*[in,opt]*/= TNoParam()) = 0; // [1008]
  virtual HRESULT STDMETHODCALLTYPE FindNext(void) = 0; // [1009]
  virtual HRESULT STDMETHODCALLTYPE FindRecord(TVariantInParam FindWhat/*[in]*/, 
                                               Access_97::AcFindMatch Match/*[in,def,opt]*/, 
                                               TVariantInParam MatchCase/*[in,opt]*/, 
                                               Access_97::AcSearchDirection Search/*[in,def,opt]*/, 
                                               TVariantInParam SearchAsFormatted/*[in,opt]*/, 
                                               Access_97::AcFindField OnlyCurrentField/*[in,def,opt]*/, 
                                               TVariantInParam FindFirst/*[in,opt]*/) = 0; // [1010]
  virtual HRESULT STDMETHODCALLTYPE GoToControl(TVariantInParam ControlName/*[in]*/) = 0; // [1011]
  virtual HRESULT STDMETHODCALLTYPE GoToPage(TVariantInParam PageNumber/*[in]*/, 
                                             TVariantInParam Right/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam Down/*[in,opt]*/= TNoParam()) = 0; // [1012]
  virtual HRESULT STDMETHODCALLTYPE GoToRecord(Access_97::AcDataObjectType ObjectType/*[in,def,opt]*/, 
                                               TVariantInParam ObjectName/*[in,opt]*/, 
                                               Access_97::AcRecord Record/*[in,def,opt]*/, 
                                               TVariantInParam Offset/*[in,opt]*/) = 0; // [1013]
  virtual HRESULT STDMETHODCALLTYPE Hourglass(TVariantInParam HourglassOn/*[in]*/) = 0; // [1014]
  virtual HRESULT STDMETHODCALLTYPE Maximize(void) = 0; // [1015]
  virtual HRESULT STDMETHODCALLTYPE Minimize(void) = 0; // [1016]
  virtual HRESULT STDMETHODCALLTYPE MoveSize(TVariantInParam Right/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam Down/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam Width/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam Height/*[in,opt]*/= TNoParam()) = 0; // [1017]
  virtual HRESULT STDMETHODCALLTYPE OpenForm(TVariantInParam FormName/*[in]*/, 
                                             Access_97::AcFormView View/*[in,def,opt]*/, 
                                             TVariantInParam FilterName/*[in,opt]*/, 
                                             TVariantInParam WhereCondition/*[in,opt]*/, 
                                             Access_97::AcFormOpenDataMode DataMode/*[in,def,opt]*/, 
                                             Access_97::AcWindowMode WindowMode/*[in,def,opt]*/, 
                                             TVariantInParam OpenArgs/*[in,opt]*/) = 0; // [1019]
  virtual HRESULT STDMETHODCALLTYPE OpenQuery(TVariantInParam QueryName/*[in]*/, 
                                              Access_97::AcView View/*[in,def,opt]*/, 
                                              Access_97::AcOpenDataMode DataMode/*[in,def,opt]*/) = 0; // [1020]
  virtual HRESULT STDMETHODCALLTYPE OpenTable(TVariantInParam TableName/*[in]*/, 
                                              Access_97::AcView View/*[in,def,opt]*/, 
                                              Access_97::AcOpenDataMode DataMode/*[in,def,opt]*/) = 0; // [1021]
  virtual HRESULT STDMETHODCALLTYPE PrintOut(Access_97::AcPrintRange PrintRange/*[in,def,opt]*/, 
                                             TVariantInParam PageFrom/*[in,opt]*/, 
                                             TVariantInParam PageTo/*[in,opt]*/, 
                                             Access_97::AcPrintQuality PrintQuality/*[in,def,opt]*/, 
                                             TVariantInParam Copies/*[in,opt]*/, 
                                             TVariantInParam CollateCopies/*[in,opt]*/) = 0; // [1022]
  virtual HRESULT STDMETHODCALLTYPE Quit(Access_97::AcQuitOption Options/*[in,def,opt]*/) = 0; // [1023]
  virtual HRESULT STDMETHODCALLTYPE Requery(TVariantInParam ControlName/*[in,opt]*/= TNoParam()) = 0; // [1024]
  virtual HRESULT STDMETHODCALLTYPE RepaintObject(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                                  TVariantInParam ObjectName/*[in,opt]*/= TNoParam()) = 0; // [1025]
  virtual HRESULT STDMETHODCALLTYPE Rename(TVariantInParam NewName/*[in]*/, 
                                           Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                           TVariantInParam OldName/*[in,opt]*/= TNoParam()) = 0; // [1026]
  virtual HRESULT STDMETHODCALLTYPE Restore(void) = 0; // [1027]
  virtual HRESULT STDMETHODCALLTYPE RunMacro(TVariantInParam MacroName/*[in]*/, 
                                             TVariantInParam RepeatCount/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam RepeatExpression/*[in,opt]*/= TNoParam()) = 0; // [1030]
  virtual HRESULT STDMETHODCALLTYPE RunSQL(TVariantInParam SQLStatement/*[in]*/, 
                                           TVariantInParam UseTransaction/*[in,opt]*/= TNoParam()) = 0; // [1031]
  virtual HRESULT STDMETHODCALLTYPE SelectObject(Access_97::AcObjectType ObjectType/*[in]*/, 
                                                 TVariantInParam ObjectName/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam InDatabaseWindow/*[in,opt]*/= TNoParam()) = 0; // [1032]
  virtual HRESULT STDMETHODCALLTYPE SetWarnings(TVariantInParam WarningsOn/*[in]*/) = 0; // [1035]
  virtual HRESULT STDMETHODCALLTYPE ShowAllRecords(void) = 0; // [1036]
  virtual HRESULT STDMETHODCALLTYPE OpenReport(TVariantInParam ReportName/*[in]*/, 
                                               Access_97::AcView View/*[in,def,opt]*/, 
                                               TVariantInParam FilterName/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam WhereCondition/*[in,opt]*/= TNoParam()) = 0; // [1039]
  virtual HRESULT STDMETHODCALLTYPE TransferDatabase(Access_97::AcDataTransferType TransferType/*[in,def,opt]*/, 
                                                     TVariantInParam DatabaseType/*[in,opt]*/, 
                                                     TVariantInParam DatabaseName/*[in,opt]*/, 
                                                     Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                                     TVariantInParam Source/*[in,opt]*/, 
                                                     TVariantInParam Destination/*[in,opt]*/, 
                                                     TVariantInParam StructureOnly/*[in,opt]*/, 
                                                     TVariantInParam StoreLogin/*[in,opt]*/) = 0; // [1040]
  virtual HRESULT STDMETHODCALLTYPE TransferSpreadsheet(Access_97::AcDataTransferType TransferType/*[in,def,opt]*/, 
                                                        Access_97::AcSpreadSheetType SpreadsheetType/*[in,def,opt]*/, 
                                                        TVariantInParam TableName/*[in,opt]*/= TNoParam(), 
                                                        TVariantInParam FileName/*[in,opt]*/= TNoParam(), 
                                                        TVariantInParam HasFieldNames/*[in,opt]*/= TNoParam(), 
                                                        TVariantInParam Range/*[in,opt]*/= TNoParam(), 
                                                        TVariantInParam UseOA/*[in,opt]*/= TNoParam()) = 0; // [1041]
  virtual HRESULT STDMETHODCALLTYPE TransferText(Access_97::AcTextTransferType TransferType/*[in,def,opt]*/, 
                                                 TVariantInParam SpecificationName/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam TableName/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam FileName/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam HasFieldNames/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam HTMLTableName/*[in,opt]*/= TNoParam()) = 0; // [1042]
  virtual HRESULT STDMETHODCALLTYPE OutputTo(Access_97::AcOutputObjectType ObjectType/*[in]*/, 
                                             TVariantInParam ObjectName/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam OutputFormat/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam OutputFile/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam AutoStart/*[in,opt]*/= TNoParam(), 
                                             TVariantInParam TemplateFile/*[in,opt]*/= TNoParam()) = 0; // [1341]
  virtual HRESULT STDMETHODCALLTYPE DeleteObject(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                                 TVariantInParam ObjectName/*[in,opt]*/= TNoParam()) = 0; // [1372]
  virtual HRESULT STDMETHODCALLTYPE OpenModule(TVariantInParam ModuleName/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam ProcedureName/*[in,opt]*/= TNoParam()) = 0; // [1374]
  virtual HRESULT STDMETHODCALLTYPE SendObject(Access_97::AcSendObjectType ObjectType/*[in,def,opt]*/, 
                                               TVariantInParam ObjectName/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam OutputFormat/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam To/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam Cc/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam Bcc/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam Subject/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam MessageText/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam EditMessage/*[in,opt]*/= TNoParam(), 
                                               TVariantInParam TemplateFile/*[in,opt]*/= TNoParam()) = 0; // [1377]
  virtual HRESULT STDMETHODCALLTYPE ShowToolbar(TVariantInParam ToolbarName/*[in]*/, 
                                                TVariantInParam Show/*[in,opt]*/= TNoParam()) = 0; // [1394]
  virtual HRESULT STDMETHODCALLTYPE Save(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                         TVariantInParam ObjectName/*[in,opt]*/= TNoParam()) = 0; // [1453]
  virtual HRESULT STDMETHODCALLTYPE SetMenuItem(TVariantInParam MenuIndex/*[in]*/, 
                                                TVariantInParam CommandIndex/*[in,opt]*/= TNoParam(), 
                                                TVariantInParam SubcommandIndex/*[in,opt]*/= TNoParam(), 
                                                TVariantInParam Flag/*[in,opt]*/= TNoParam()) = 0; // [1454]
  virtual HRESULT STDMETHODCALLTYPE RunCommand(Access_97::AcCommand Command/*[in]*/) = 0; // [1602]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: __AccessProperty
// Flags:     (16) Hidden
// GUID:      {331FDD01-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface __AccessProperty  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(TVariant* pRet/*[out,retval]*/) = 0; // [20]
};

// *********************************************************************//
// Interface: _AccessProperty
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD00-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _AccessProperty  : public Dao_97::Property
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Category(short* pRet/*[out,retval]*/) = 0; // [2096]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  short __fastcall get_Category(void)
  {
    short pRet;
    OLECHECK(this->get_Category((short*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   short           Category = {read = get_Category};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Properties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD02-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface Properties  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, 
                                             LPDISPATCH* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pRet/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Item(TVariantInParam Index/*[in]*/)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&pRet));
    return pRet;
  }

  long __fastcall get_Count(void)
  {
    long pRet;
    OLECHECK(this->get_Count((long*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ItemsSelected
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {31B09710-EADC-11CD-B9F7-00AA004753B5}
// *********************************************************************//
interface _ItemsSelected  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, 
                                             long* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pRet/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Item(TVariantInParam Index/*[in]*/)
  {
    long pRet;
    OLECHECK(this->get_Item(Index, (long*)&pRet));
    return pRet;
  }

  long __fastcall get_Count(void)
  {
    long pRet;
    OLECHECK(this->get_Count((long*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Children
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E977-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface Children  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, 
                                             LPDISPATCH* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pRet/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Item(TVariantInParam Index/*[in]*/)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&pRet));
    return pRet;
  }

  long __fastcall get_Count(void)
  {
    long pRet;
    OLECHECK(this->get_Count((long*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _AccessField
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1C1EAC1-486F-11CE-A65D-00AA003F0F07}
// *********************************************************************//
interface _AccessField  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: __Help
// Flags:     (16) Hidden
// GUID:      {9CD4A761-A6A9-11CE-A686-00AA003F0F07}
// *********************************************************************//
interface __Help  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_FieldName(TVariant* pRet/*[out,retval]*/) = 0; // [178]
  virtual HRESULT STDMETHODCALLTYPE set_FieldName(TVariantInParam pRet/*[in]*/) = 0; // [178]
  virtual HRESULT STDMETHODCALLTYPE get_DataType(TVariant* pRet/*[out,retval]*/) = 0; // [179]
  virtual HRESULT STDMETHODCALLTYPE set_DataType(TVariantInParam pRet/*[in]*/) = 0; // [179]
  virtual HRESULT STDMETHODCALLTYPE get_Description(TVariant* pRet/*[out,retval]*/) = 0; // [181]
  virtual HRESULT STDMETHODCALLTYPE set_Description(TVariantInParam pRet/*[in]*/) = 0; // [181]
  virtual HRESULT STDMETHODCALLTYPE get_FieldSize(TVariant* pRet/*[out,retval]*/) = 0; // [59]
  virtual HRESULT STDMETHODCALLTYPE set_FieldSize(TVariantInParam pRet/*[in]*/) = 0; // [59]
  virtual HRESULT STDMETHODCALLTYPE get_NewValues(TVariant* pRet/*[out,retval]*/) = 0; // [184]
  virtual HRESULT STDMETHODCALLTYPE set_NewValues(TVariantInParam pRet/*[in]*/) = 0; // [184]
  virtual HRESULT STDMETHODCALLTYPE get_Required(TVariant* pRet/*[out,retval]*/) = 0; // [182]
  virtual HRESULT STDMETHODCALLTYPE set_Required(TVariantInParam pRet/*[in]*/) = 0; // [182]
  virtual HRESULT STDMETHODCALLTYPE get_AllowZeroLength(TVariant* pRet/*[out,retval]*/) = 0; // [183]
  virtual HRESULT STDMETHODCALLTYPE set_AllowZeroLength(TVariantInParam pRet/*[in]*/) = 0; // [183]
  virtual HRESULT STDMETHODCALLTYPE get_Indexed(TVariant* pRet/*[out,retval]*/) = 0; // [180]
  virtual HRESULT STDMETHODCALLTYPE set_Indexed(TVariantInParam pRet/*[in]*/) = 0; // [180]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayControl(TVariant* pRet/*[out,retval]*/) = 0; // [185]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayControl(TVariantInParam pRet/*[in]*/) = 0; // [185]
  virtual HRESULT STDMETHODCALLTYPE get_ReplicationConflictFunction(TVariant* pRet/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ReplicationConflictFunction(TVariant* pRet/*[in]*/) = 0; // [1610678290]
  virtual HRESULT STDMETHODCALLTYPE get_ProjectName(TVariant* pRet/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ProjectName(TVariant* pRet/*[in]*/) = 0; // [1610678292]
  virtual HRESULT STDMETHODCALLTYPE get_MDE(TVariant* pRet/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_MDE(TVariant* pRet/*[in]*/) = 0; // [1610678294]
  virtual HRESULT STDMETHODCALLTYPE get_AllowBreakIntoCode(TVariant* pRet/*[out,retval]*/) = 0; // [345]
  virtual HRESULT STDMETHODCALLTYPE set_AllowBreakIntoCode(TVariantInParam pRet/*[in]*/) = 0; // [345]
  virtual HRESULT STDMETHODCALLTYPE get_AllowBuiltInToolbars(TVariant* pRet/*[out,retval]*/) = 0; // [343]
  virtual HRESULT STDMETHODCALLTYPE set_AllowBuiltInToolbars(TVariantInParam pRet/*[in]*/) = 0; // [343]
  virtual HRESULT STDMETHODCALLTYPE get_AllowBypassKey(TVariant* pRet/*[out,retval]*/) = 0; // [348]
  virtual HRESULT STDMETHODCALLTYPE set_AllowBypassKey(TVariantInParam pRet/*[in]*/) = 0; // [348]
  virtual HRESULT STDMETHODCALLTYPE get_AllowFullMenus(TVariant* pRet/*[out,retval]*/) = 0; // [342]
  virtual HRESULT STDMETHODCALLTYPE set_AllowFullMenus(TVariantInParam pRet/*[in]*/) = 0; // [342]
  virtual HRESULT STDMETHODCALLTYPE get_AllowSpecialKeys(TVariant* pRet/*[out,retval]*/) = 0; // [346]
  virtual HRESULT STDMETHODCALLTYPE set_AllowSpecialKeys(TVariantInParam pRet/*[in]*/) = 0; // [346]
  virtual HRESULT STDMETHODCALLTYPE get_AllowToolbarChanges(TVariant* pRet/*[out,retval]*/) = 0; // [344]
  virtual HRESULT STDMETHODCALLTYPE set_AllowToolbarChanges(TVariantInParam pRet/*[in]*/) = 0; // [344]
  virtual HRESULT STDMETHODCALLTYPE get_StartUpForm(TVariant* pRet/*[out,retval]*/) = 0; // [338]
  virtual HRESULT STDMETHODCALLTYPE set_StartUpForm(TVariantInParam pRet/*[in]*/) = 0; // [338]
  virtual HRESULT STDMETHODCALLTYPE get_StartUpMenuBar(TVariant* pRet/*[out,retval]*/) = 0; // [347]
  virtual HRESULT STDMETHODCALLTYPE set_StartUpMenuBar(TVariantInParam pRet/*[in]*/) = 0; // [347]
  virtual HRESULT STDMETHODCALLTYPE get_StartUpShortcutMenuBar(TVariant* pRet/*[out,retval]*/) = 0; // [377]
  virtual HRESULT STDMETHODCALLTYPE set_StartUpShortcutMenuBar(TVariantInParam pRet/*[in]*/) = 0; // [377]
  virtual HRESULT STDMETHODCALLTYPE get_StartUpShowDBWindow(TVariant* pRet/*[out,retval]*/) = 0; // [339]
  virtual HRESULT STDMETHODCALLTYPE set_StartUpShowDBWindow(TVariantInParam pRet/*[in]*/) = 0; // [339]
  virtual HRESULT STDMETHODCALLTYPE get_StartUpShowStatusBar(TVariant* pRet/*[out,retval]*/) = 0; // [340]
  virtual HRESULT STDMETHODCALLTYPE set_StartUpShowStatusBar(TVariantInParam pRet/*[in]*/) = 0; // [340]
  virtual HRESULT STDMETHODCALLTYPE get_AppIcon(TVariant* pRet/*[out,retval]*/) = 0; // [352]
  virtual HRESULT STDMETHODCALLTYPE set_AppIcon(TVariantInParam pRet/*[in]*/) = 0; // [352]
  virtual HRESULT STDMETHODCALLTYPE get_AppTitle(TVariant* pRet/*[out,retval]*/) = 0; // [353]
  virtual HRESULT STDMETHODCALLTYPE set_AppTitle(TVariantInParam pRet/*[in]*/) = 0; // [353]
  virtual HRESULT STDMETHODCALLTYPE get_ODBCConnectStr(TVariant* pRet/*[out,retval]*/) = 0; // [294]
  virtual HRESULT STDMETHODCALLTYPE set_ODBCConnectStr(TVariantInParam pRet/*[in]*/) = 0; // [294]
  virtual HRESULT STDMETHODCALLTYPE get_LogMessages(TVariant* pRet/*[out,retval]*/) = 0; // [309]
  virtual HRESULT STDMETHODCALLTYPE set_LogMessages(TVariant* pRet/*[in]*/) = 0; // [309]
};

// *********************************************************************//
// Interface: _Hyperlink
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {50D56611-60AC-11CF-82C9-00AA004B9FE6}
// *********************************************************************//
interface _Hyperlink  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SubAddress(BSTR* pbstrResult/*[out,retval]*/) = 0; // [2182]
  virtual HRESULT STDMETHODCALLTYPE set_SubAddress(TVariantInParam pbstrResult/*[in]*/) = 0; // [2182]
  virtual HRESULT STDMETHODCALLTYPE get_Address(BSTR* pbstrResult/*[out,retval]*/) = 0; // [2183]
  virtual HRESULT STDMETHODCALLTYPE set_Address(TVariantInParam pbstrResult/*[in]*/) = 0; // [2183]
  virtual HRESULT STDMETHODCALLTYPE AddToFavorites(void) = 0; // [2184]
  virtual HRESULT STDMETHODCALLTYPE Follow(TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                           TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                           TVariantInParam ExtraInfo/*[in,opt]*/, 
                                           Office_97::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                           BSTR HeaderInfo/*[in,def,opt]*/) = 0; // [2185]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SubAddress(void)
  {
    BSTR pbstrResult = 0;
    OLECHECK(this->get_SubAddress((BSTR*)&pbstrResult));
    return pbstrResult;
  }

  BSTR __fastcall get_Address(void)
  {
    BSTR pbstrResult = 0;
    OLECHECK(this->get_Address((BSTR*)&pbstrResult));
    return pbstrResult;
  }


  __property   BSTR            SubAddress = {read = get_SubAddress};
  __property   BSTR            Address = {read = get_Address};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Page
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E974-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _Page  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pRet/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pRet/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(BSTR* pRet/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(BSTR pRet/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PictureType(unsigned_char* pRet/*[out,retval]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE set_PictureType(unsigned_char pRet/*[in]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE get_PageIndex(short* pRet/*[out,retval]*/) = 0; // [395]
  virtual HRESULT STDMETHODCALLTYPE set_PageIndex(short pRet/*[in]*/) = 0; // [395]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_PictureData(TVariant* pRet/*[out,retval]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE set_PictureData(TVariantInParam pRet/*[in]*/) = 0; // [187]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Caption((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Picture(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Picture((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_PageIndex(void)
  {
    short pRet;
    OLECHECK(this->get_PageIndex((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PictureData(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PictureData((TVariant*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   short           PageIndex = {read = get_PageIndex, write = set_PageIndex};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Pages
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E978-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface Pages  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, 
                                             Access_97::AccessPagePtr* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pRet/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Add(TVariantInParam Before/*[in,opt]*/, 
                                        Access_97::AccessPagePtr* pRet/*[out,retval]*/) = 0; // [2191]
  virtual HRESULT STDMETHODCALLTYPE Remove(TVariantInParam Item/*[in,opt]*/= TNoParam()) = 0; // [2192]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessPagePtr __fastcall get_Item(TVariantInParam Index/*[in]*/)
  {
    Access_97::AccessPagePtr pRet;
    OLECHECK(this->get_Item(Index, (Access_97::AccessPagePtr*)&pRet));
    return pRet;
  }

  long __fastcall get_Count(void)
  {
    long pRet;
    OLECHECK(this->get_Count((long*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }

  Access_97::AccessPagePtr __fastcall Add(TVariantInParam Before/*[in,opt]*/= TNoParam())
  {
    Access_97::AccessPagePtr pRet;
    OLECHECK(this->Add(Before, (Access_97::AccessPagePtr*)&pRet));
    return pRet;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Control
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {26B96540-8F8E-101B-AF4E-00AA003F0F07}
// *********************************************************************//
interface _Control  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [2144]
  virtual HRESULT STDMETHODCALLTYPE Dropdown(void) = 0; // [2143]
  virtual HRESULT STDMETHODCALLTYPE get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                                               TVariant* pRet/*[out,retval]*/) = 0; // [2101]
  virtual HRESULT STDMETHODCALLTYPE get_Selected(long lRow/*[in]*/, long* pRet/*[out,retval]*/) = 0; // [2113]
  virtual HRESULT STDMETHODCALLTYPE set_Selected(long lRow/*[in]*/, long pRet/*[in]*/) = 0; // [2113]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/) = 0; // [2089]
  virtual HRESULT STDMETHODCALLTYPE get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/) = 0; // [2097]
  virtual HRESULT STDMETHODCALLTYPE get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/) = 0; // [2103]
  virtual HRESULT STDMETHODCALLTYPE get_Object(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2104]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/) = 0; // [2105]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE get_ItemsSelected(Access_97::_ItemsSelectedPtr* pRet/*[out,retval]*/) = 0; // [2137]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Pages(Access_97::PagesPtr* pRet/*[out,retval]*/) = 0; // [2180]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/) = 0; // [2181]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->get_Column(Index, Row, (TVariant*)&pRet));
    return pRet;
  }

  long __fastcall get_Selected(long lRow/*[in]*/)
  {
    long pRet;
    OLECHECK(this->get_Selected(lRow, (long*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  Access_97::AccessFormPtr __fastcall get_Form(void)
  {
    Access_97::AccessFormPtr pRet;
    OLECHECK(this->get_Form((Access_97::AccessFormPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessReportPtr __fastcall get_Report(void)
  {
    Access_97::AccessReportPtr pRet;
    OLECHECK(this->get_Report((Access_97::AccessReportPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_ItemData(long Index/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->get_ItemData(Index, (TVariant*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Object(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Object((LPDISPATCH*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ObjectVerbs(long Index/*[in]*/)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ObjectVerbs(Index, (BSTR*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::_ItemsSelectedPtr __fastcall get_ItemsSelected(void)
  {
    Access_97::_ItemsSelectedPtr pRet;
    OLECHECK(this->get_ItemsSelected((Access_97::_ItemsSelectedPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::PagesPtr __fastcall get_Pages(void)
  {
    Access_97::PagesPtr pRet;
    OLECHECK(this->get_Pages((Access_97::PagesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void)
  {
    Access_97::_HyperlinkPtr ppRet;
    OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
    return ppRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::_ItemsSelectedPtr ItemsSelected = {read = get_ItemsSelected};
  __property   Access_97::PagesPtr Pages = {read = get_Pages};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: __ControlInReportEvents
// Flags:     (16) Hidden
// GUID:      {90B322A5-F1D9-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface __ControlInReportEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: Controls_
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5970C574-EB8C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface Controls_  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, 
                                             LPDISPATCH* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pRet/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Item(TVariantInParam Index/*[in]*/)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&pRet));
    return pRet;
  }

  long __fastcall get_Count(void)
  {
    long pRet;
    OLECHECK(this->get_Count((long*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Label
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E948-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _Label  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/) = 0; // [2181]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pRet/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pRet/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/) = 0; // [386]
  virtual HRESULT STDMETHODCALLTYPE set_HyperlinkAddress(BSTR pRet/*[in]*/) = 0; // [386]
  virtual HRESULT STDMETHODCALLTYPE get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/) = 0; // [390]
  virtual HRESULT STDMETHODCALLTYPE set_HyperlinkSubAddress(BSTR pRet/*[in]*/) = 0; // [390]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(unsigned_char pRet/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(long* pRet/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(long pRet/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* pRet/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR pRet/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(short* pRet/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(short pRet/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* pRet/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short pRet/*[in]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(TOLEBOOL pRet/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(TOLEBOOL pRet/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE set_TextFontCharSet(unsigned_char pRet/*[in]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE get_TextAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE set_TextAlign(unsigned_char pRet/*[in]*/) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(short* pRet/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(short pRet/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void)
  {
    Access_97::_HyperlinkPtr ppRet;
    OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
    return ppRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Caption((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_HyperlinkAddress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_HyperlinkAddress((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_HyperlinkSubAddress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_HyperlinkSubAddress((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BackStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_ForeColor(void)
  {
    long pRet;
    OLECHECK(this->get_ForeColor((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FontName((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_FontSize(void)
  {
    short pRet;
    OLECHECK(this->get_FontSize((short*)&pRet));
    return pRet;
  }

  short __fastcall get_FontWeight(void)
  {
    short pRet;
    OLECHECK(this->get_FontWeight((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontItalic(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontUnderline(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TextFontCharSet(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TextAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TextAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_FontBold(void)
  {
    short pRet;
    OLECHECK(this->get_FontBold((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            HyperlinkAddress = {read = get_HyperlinkAddress, write = set_HyperlinkAddress};
  __property   BSTR            HyperlinkSubAddress = {read = get_HyperlinkSubAddress, write = set_HyperlinkSubAddress};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   unsigned_char   TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _LabelEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4341-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _LabelEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
};

// *********************************************************************//
// Interface: _ChildLabelEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4358-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ChildLabelEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _Rectangle
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94A-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _Rectangle  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(unsigned_char pRet/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BackStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _RectangleEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4342-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _RectangleEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
};

// *********************************************************************//
// Interface: _Line
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94C-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _Line  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_LineSlant(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [55]
  virtual HRESULT STDMETHODCALLTYPE set_LineSlant(TOLEBOOL pRet/*[in]*/) = 0; // [55]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_LineSlant(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_LineSlant((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   TOLEBOOL        LineSlant = {read = get_LineSlant, write = set_LineSlant};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _LineEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4343-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _LineEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _Image
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94E-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _Image  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/) = 0; // [2181]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(BSTR* pRet/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(BSTR pRet/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PictureType(unsigned_char* pRet/*[out,retval]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE set_PictureType(unsigned_char pRet/*[in]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE get_PictureData(TVariant* pRet/*[out,retval]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE set_PictureData(TVariantInParam pRet/*[in]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE get_SizeMode(unsigned_char* pRet/*[out,retval]*/) = 0; // [85]
  virtual HRESULT STDMETHODCALLTYPE set_SizeMode(unsigned_char pRet/*[in]*/) = 0; // [85]
  virtual HRESULT STDMETHODCALLTYPE get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/) = 0; // [354]
  virtual HRESULT STDMETHODCALLTYPE set_PictureAlignment(unsigned_char pRet/*[in]*/) = 0; // [354]
  virtual HRESULT STDMETHODCALLTYPE get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [358]
  virtual HRESULT STDMETHODCALLTYPE set_PictureTiling(TOLEBOOL pRet/*[in]*/) = 0; // [358]
  virtual HRESULT STDMETHODCALLTYPE get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/) = 0; // [386]
  virtual HRESULT STDMETHODCALLTYPE set_HyperlinkAddress(BSTR pRet/*[in]*/) = 0; // [386]
  virtual HRESULT STDMETHODCALLTYPE get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/) = 0; // [390]
  virtual HRESULT STDMETHODCALLTYPE set_HyperlinkSubAddress(BSTR pRet/*[in]*/) = 0; // [390]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(unsigned_char pRet/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectPalette(TVariant* pRet/*[out,retval]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE set_ObjectPalette(TVariantInParam pRet/*[in]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ImageHeight(long* pRet/*[out,retval]*/) = 0; // [350]
  virtual HRESULT STDMETHODCALLTYPE set_ImageHeight(long pRet/*[in]*/) = 0; // [350]
  virtual HRESULT STDMETHODCALLTYPE get_ImageWidth(long* pRet/*[out,retval]*/) = 0; // [351]
  virtual HRESULT STDMETHODCALLTYPE set_ImageWidth(long pRet/*[in]*/) = 0; // [351]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void)
  {
    Access_97::_HyperlinkPtr ppRet;
    OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
    return ppRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Picture(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Picture((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PictureData(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PictureData((TVariant*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SizeMode(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SizeMode((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureAlignment(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureAlignment((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_PictureTiling(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_PictureTiling((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_HyperlinkAddress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_HyperlinkAddress((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_HyperlinkSubAddress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_HyperlinkSubAddress((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BackStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_ObjectPalette(void)
  {
    TVariant pRet;
    OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_ImageHeight(void)
  {
    long pRet;
    OLECHECK(this->get_ImageHeight((long*)&pRet));
    return pRet;
  }

  long __fastcall get_ImageWidth(void)
  {
    long pRet;
    OLECHECK(this->get_ImageWidth((long*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   unsigned_char   SizeMode = {read = get_SizeMode, write = set_SizeMode};
  __property   unsigned_char   PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   TOLEBOOL        PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   BSTR            HyperlinkAddress = {read = get_HyperlinkAddress, write = set_HyperlinkAddress};
  __property   BSTR            HyperlinkSubAddress = {read = get_HyperlinkSubAddress, write = set_HyperlinkSubAddress};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   long            ImageHeight = {read = get_ImageHeight, write = set_ImageHeight};
  __property   long            ImageWidth = {read = get_ImageWidth, write = set_ImageWidth};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ImageEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4344-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ImageEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
};

// *********************************************************************//
// Interface: _CommandButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E950-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _CommandButton  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/) = 0; // [2181]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pRet/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pRet/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(BSTR* pRet/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(BSTR pRet/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PictureType(unsigned_char* pRet/*[out,retval]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE set_PictureType(unsigned_char pRet/*[in]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE get_PictureData(TVariant* pRet/*[out,retval]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE set_PictureData(TVariantInParam pRet/*[in]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE get_Transparent(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [46]
  virtual HRESULT STDMETHODCALLTYPE set_Transparent(TOLEBOOL pRet/*[in]*/) = 0; // [46]
  virtual HRESULT STDMETHODCALLTYPE get_Default(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE set_Default(TOLEBOOL pRet/*[in]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_Cancel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_Cancel(TOLEBOOL pRet/*[in]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_AutoRepeat(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_AutoRepeat(TOLEBOOL pRet/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_OnPush(BSTR* pRet/*[out,retval]*/) = 0; // [152]
  virtual HRESULT STDMETHODCALLTYPE set_OnPush(BSTR pRet/*[in]*/) = 0; // [152]
  virtual HRESULT STDMETHODCALLTYPE get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/) = 0; // [386]
  virtual HRESULT STDMETHODCALLTYPE set_HyperlinkAddress(BSTR pRet/*[in]*/) = 0; // [386]
  virtual HRESULT STDMETHODCALLTYPE get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/) = 0; // [390]
  virtual HRESULT STDMETHODCALLTYPE set_HyperlinkSubAddress(BSTR pRet/*[in]*/) = 0; // [390]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(long* pRet/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(long pRet/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* pRet/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR pRet/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(short* pRet/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(short pRet/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* pRet/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short pRet/*[in]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(TOLEBOOL pRet/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(TOLEBOOL pRet/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE set_TextFontCharSet(unsigned_char pRet/*[in]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(short* pRet/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(short pRet/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectPalette(TVariant* pRet/*[out,retval]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE set_ObjectPalette(TVariantInParam pRet/*[in]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void)
  {
    Access_97::_HyperlinkPtr ppRet;
    OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
    return ppRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Caption((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Picture(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Picture((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PictureData(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PictureData((TVariant*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Transparent(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Transparent((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Default(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Default((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Cancel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Cancel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoRepeat(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoRepeat((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnPush(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnPush((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_HyperlinkAddress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_HyperlinkAddress((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_HyperlinkSubAddress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_HyperlinkSubAddress((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  long __fastcall get_ForeColor(void)
  {
    long pRet;
    OLECHECK(this->get_ForeColor((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FontName((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_FontSize(void)
  {
    short pRet;
    OLECHECK(this->get_FontSize((short*)&pRet));
    return pRet;
  }

  short __fastcall get_FontWeight(void)
  {
    short pRet;
    OLECHECK(this->get_FontWeight((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontItalic(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontUnderline(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TextFontCharSet(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_FontBold(void)
  {
    short pRet;
    OLECHECK(this->get_FontBold((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_ObjectPalette(void)
  {
    TVariant pRet;
    OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   TOLEBOOL        Transparent = {read = get_Transparent, write = set_Transparent};
  __property   TOLEBOOL        Default = {read = get_Default, write = set_Default};
  __property   TOLEBOOL        Cancel = {read = get_Cancel, write = set_Cancel};
  __property   TOLEBOOL        AutoRepeat = {read = get_AutoRepeat, write = set_AutoRepeat};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   BSTR            OnPush = {read = get_OnPush, write = set_OnPush};
  __property   BSTR            HyperlinkAddress = {read = get_HyperlinkAddress, write = set_HyperlinkAddress};
  __property   BSTR            HyperlinkSubAddress = {read = get_HyperlinkSubAddress, write = set_HyperlinkSubAddress};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CommandButtonEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4345-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _CommandButtonEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _OptionButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E952-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _OptionButton  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_OptionValue(long* pRet/*[out,retval]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE set_OptionValue(long pRet/*[in]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(BSTR* pRet/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(BSTR pRet/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationRule(BSTR* pRet/*[out,retval]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationRule(BSTR pRet/*[in]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationText(BSTR* pRet/*[out,retval]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationText(BSTR pRet/*[in]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_TripleState(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [326]
  virtual HRESULT STDMETHODCALLTYPE set_TripleState(TOLEBOOL pRet/*[in]*/) = 0; // [326]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE set_HideDuplicates(TOLEBOOL pRet/*[in]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidth(short* pRet/*[out,retval]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidth(short pRet/*[in]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnOrder(short* pRet/*[out,retval]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnOrder(short pRet/*[in]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHidden(TOLEBOOL pRet/*[in]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeUpdate(BSTR pRet/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_AfterUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_AfterUpdate(BSTR pRet/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_OptionValue(void)
  {
    long pRet;
    OLECHECK(this->get_OptionValue((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_DefaultValue(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationRule(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationText((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TripleState(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TripleState((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HideDuplicates(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnWidth(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnWidth((short*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnOrder(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnOrder((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHidden(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _OptionButtonEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4346-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _OptionButtonEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE BeforeUpdate(short* Cancel/*[out]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE AfterUpdate(void) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _OptionButtonInOptionEvents
// Flags:     (16) Hidden
// GUID:      {BC9E435B-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _OptionButtonInOptionEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _Checkbox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E954-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _Checkbox  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [2144]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_OptionValue(long* pRet/*[out,retval]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE set_OptionValue(long pRet/*[in]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(BSTR* pRet/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(BSTR pRet/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationRule(BSTR* pRet/*[out,retval]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationRule(BSTR pRet/*[in]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationText(BSTR* pRet/*[out,retval]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationText(BSTR pRet/*[in]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_TripleState(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [326]
  virtual HRESULT STDMETHODCALLTYPE set_TripleState(TOLEBOOL pRet/*[in]*/) = 0; // [326]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE set_HideDuplicates(TOLEBOOL pRet/*[in]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidth(short* pRet/*[out,retval]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidth(short pRet/*[in]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnOrder(short* pRet/*[out,retval]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnOrder(short pRet/*[in]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHidden(TOLEBOOL pRet/*[in]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeUpdate(BSTR pRet/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_AfterUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_AfterUpdate(BSTR pRet/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_OptionValue(void)
  {
    long pRet;
    OLECHECK(this->get_OptionValue((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_DefaultValue(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationRule(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationText((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TripleState(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TripleState((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HideDuplicates(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnWidth(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnWidth((short*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnOrder(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnOrder((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHidden(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CheckBoxEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4347-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _CheckBoxEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE BeforeUpdate(short* Cancel/*[out]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE AfterUpdate(void) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _CheckBoxInOptionEvents
// Flags:     (16) Hidden
// GUID:      {BC9E435D-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _CheckBoxInOptionEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _OptionGroup
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E956-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _OptionGroup  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [2144]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(BSTR* pRet/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(BSTR pRet/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationRule(BSTR* pRet/*[out,retval]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationRule(BSTR pRet/*[in]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationText(BSTR* pRet/*[out,retval]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationText(BSTR pRet/*[in]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE set_HideDuplicates(TOLEBOOL pRet/*[in]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(unsigned_char pRet/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidth(short* pRet/*[out,retval]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidth(short pRet/*[in]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnOrder(short* pRet/*[out,retval]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnOrder(short pRet/*[in]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHidden(TOLEBOOL pRet/*[in]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeUpdate(BSTR pRet/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_AfterUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_AfterUpdate(BSTR pRet/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_DefaultValue(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationRule(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationText((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HideDuplicates(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BackStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnWidth(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnWidth((short*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnOrder(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnOrder((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHidden(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _OptionGroupEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4348-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _OptionGroupEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE BeforeUpdate(short* Cancel/*[out]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE AfterUpdate(void) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
};

// *********************************************************************//
// Interface: _BoundObjectFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E958-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _BoundObjectFrame  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Object(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2104]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/) = 0; // [2105]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_SizeMode(unsigned_char* pRet/*[out,retval]*/) = 0; // [85]
  virtual HRESULT STDMETHODCALLTYPE set_SizeMode(unsigned_char pRet/*[in]*/) = 0; // [85]
  virtual HRESULT STDMETHODCALLTYPE get_Class(BSTR* pRet/*[out,retval]*/) = 0; // [306]
  virtual HRESULT STDMETHODCALLTYPE set_Class(BSTR pRet/*[in]*/) = 0; // [306]
  virtual HRESULT STDMETHODCALLTYPE get_SourceDoc(BSTR* pRet/*[out,retval]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE set_SourceDoc(BSTR pRet/*[in]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE get_SourceItem(BSTR* pRet/*[out,retval]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE set_SourceItem(BSTR pRet/*[in]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE get_AutoActivate(short* pRet/*[out,retval]*/) = 0; // [98]
  virtual HRESULT STDMETHODCALLTYPE set_AutoActivate(short pRet/*[in]*/) = 0; // [98]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayType(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [304]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayType(TOLEBOOL pRet/*[in]*/) = 0; // [304]
  virtual HRESULT STDMETHODCALLTYPE get_UpdateOptions(short* pRet/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_UpdateOptions(short pRet/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Verb(long* pRet/*[out,retval]*/) = 0; // [99]
  virtual HRESULT STDMETHODCALLTYPE set_Verb(long pRet/*[in]*/) = 0; // [99]
  virtual HRESULT STDMETHODCALLTYPE get_OLETypeAllowed(unsigned_char* pRet/*[out,retval]*/) = 0; // [307]
  virtual HRESULT STDMETHODCALLTYPE set_OLETypeAllowed(unsigned_char pRet/*[in]*/) = 0; // [307]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(unsigned_char pRet/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidth(short* pRet/*[out,retval]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidth(short pRet/*[in]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnOrder(short* pRet/*[out,retval]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnOrder(short pRet/*[in]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHidden(TOLEBOOL pRet/*[in]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectPalette(TVariant* pRet/*[out,retval]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE set_ObjectPalette(TVariantInParam pRet/*[in]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE get_LpOleObject(long* pRet/*[out,retval]*/) = 0; // [169]
  virtual HRESULT STDMETHODCALLTYPE set_LpOleObject(long pRet/*[in]*/) = 0; // [169]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectVerbsCount(long* pRet/*[out,retval]*/) = 0; // [172]
  virtual HRESULT STDMETHODCALLTYPE set_ObjectVerbsCount(long pRet/*[in]*/) = 0; // [172]
  virtual HRESULT STDMETHODCALLTYPE get_Action(short* pRet/*[out,retval]*/) = 0; // [305]
  virtual HRESULT STDMETHODCALLTYPE set_Action(short pRet/*[in]*/) = 0; // [305]
  virtual HRESULT STDMETHODCALLTYPE get_Scaling(unsigned_char* pRet/*[out,retval]*/) = 0; // [84]
  virtual HRESULT STDMETHODCALLTYPE set_Scaling(unsigned_char pRet/*[in]*/) = 0; // [84]
  virtual HRESULT STDMETHODCALLTYPE get_OLEType(unsigned_char* pRet/*[out,retval]*/) = 0; // [308]
  virtual HRESULT STDMETHODCALLTYPE set_OLEType(unsigned_char pRet/*[in]*/) = 0; // [308]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeUpdate(BSTR pRet/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_AfterUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_AfterUpdate(BSTR pRet/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_OnUpdated(BSTR* pRet/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_OnUpdated(BSTR pRet/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Object(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Object((LPDISPATCH*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ObjectVerbs(long Index/*[in]*/)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ObjectVerbs(Index, (BSTR*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SizeMode(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SizeMode((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Class(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Class((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_SourceDoc(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_SourceDoc((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_SourceItem(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_SourceItem((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_AutoActivate(void)
  {
    short pRet;
    OLECHECK(this->get_AutoActivate((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_DisplayType(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_DisplayType((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_UpdateOptions(void)
  {
    short pRet;
    OLECHECK(this->get_UpdateOptions((short*)&pRet));
    return pRet;
  }

  long __fastcall get_Verb(void)
  {
    long pRet;
    OLECHECK(this->get_Verb((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OLETypeAllowed(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OLETypeAllowed((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BackStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnWidth(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnWidth((short*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnOrder(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnOrder((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHidden(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_ObjectPalette(void)
  {
    TVariant pRet;
    OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
    return pRet;
  }

  long __fastcall get_LpOleObject(void)
  {
    long pRet;
    OLECHECK(this->get_LpOleObject((long*)&pRet));
    return pRet;
  }

  long __fastcall get_ObjectVerbsCount(void)
  {
    long pRet;
    OLECHECK(this->get_ObjectVerbsCount((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Action(void)
  {
    short pRet;
    OLECHECK(this->get_Action((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_Scaling(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_Scaling((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OLEType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OLEType((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnUpdated(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnUpdated((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   unsigned_char   SizeMode = {read = get_SizeMode, write = set_SizeMode};
  __property   BSTR            Class = {read = get_Class, write = set_Class};
  __property   BSTR            SourceDoc = {read = get_SourceDoc, write = set_SourceDoc};
  __property   BSTR            SourceItem = {read = get_SourceItem, write = set_SourceItem};
  __property   short           AutoActivate = {read = get_AutoActivate, write = set_AutoActivate};
  __property   TOLEBOOL        DisplayType = {read = get_DisplayType, write = set_DisplayType};
  __property   short           UpdateOptions = {read = get_UpdateOptions, write = set_UpdateOptions};
  __property   long            Verb = {read = get_Verb, write = set_Verb};
  __property   unsigned_char   OLETypeAllowed = {read = get_OLETypeAllowed, write = set_OLETypeAllowed};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            LpOleObject = {read = get_LpOleObject, write = set_LpOleObject};
  __property   long            ObjectVerbsCount = {read = get_ObjectVerbsCount, write = set_ObjectVerbsCount};
  __property   short           Action = {read = get_Action, write = set_Action};
  __property   unsigned_char   Scaling = {read = get_Scaling, write = set_Scaling};
  __property   unsigned_char   OLEType = {read = get_OLEType, write = set_OLEType};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnUpdated = {read = get_OnUpdated, write = set_OnUpdated};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _BoundObjectFrameEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4349-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _BoundObjectFrameEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Updated(short* Code/*[in,out]*/) = 0; // [2076]
  virtual HRESULT STDMETHODCALLTYPE BeforeUpdate(short* Cancel/*[out]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE AfterUpdate(void) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _Textbox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E946-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _Textbox  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [2144]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/) = 0; // [2181]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_Format(BSTR* pRet/*[out,retval]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE set_Format(BSTR pRet/*[in]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE get_DecimalPlaces(unsigned_char* pRet/*[out,retval]*/) = 0; // [67]
  virtual HRESULT STDMETHODCALLTYPE set_DecimalPlaces(unsigned_char pRet/*[in]*/) = 0; // [67]
  virtual HRESULT STDMETHODCALLTYPE get_InputMask(BSTR* pRet/*[out,retval]*/) = 0; // [68]
  virtual HRESULT STDMETHODCALLTYPE set_InputMask(BSTR pRet/*[in]*/) = 0; // [68]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(BSTR* pRet/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(BSTR pRet/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationRule(BSTR* pRet/*[out,retval]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationRule(BSTR pRet/*[in]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationText(BSTR* pRet/*[out,retval]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationText(BSTR pRet/*[in]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_EnterKeyBehavior(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [70]
  virtual HRESULT STDMETHODCALLTYPE set_EnterKeyBehavior(TOLEBOOL pRet/*[in]*/) = 0; // [70]
  virtual HRESULT STDMETHODCALLTYPE get_AllowAutoCorrect(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [383]
  virtual HRESULT STDMETHODCALLTYPE set_AllowAutoCorrect(TOLEBOOL pRet/*[in]*/) = 0; // [383]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_FilterLookup(unsigned_char* pRet/*[out,retval]*/) = 0; // [337]
  virtual HRESULT STDMETHODCALLTYPE set_FilterLookup(unsigned_char pRet/*[in]*/) = 0; // [337]
  virtual HRESULT STDMETHODCALLTYPE get_AutoTab(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [69]
  virtual HRESULT STDMETHODCALLTYPE set_AutoTab(TOLEBOOL pRet/*[in]*/) = 0; // [69]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollBars(unsigned_char* pRet/*[out,retval]*/) = 0; // [149]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollBars(unsigned_char pRet/*[in]*/) = 0; // [149]
  virtual HRESULT STDMETHODCALLTYPE get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE set_HideDuplicates(TOLEBOOL pRet/*[in]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_CanGrow(TOLEBOOL pRet/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_CanShrink(TOLEBOOL pRet/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_RunningSum(unsigned_char* pRet/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE set_RunningSum(unsigned_char pRet/*[in]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(unsigned_char pRet/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(long* pRet/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(long pRet/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* pRet/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR pRet/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(short* pRet/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(short pRet/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* pRet/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short pRet/*[in]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(TOLEBOOL pRet/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(TOLEBOOL pRet/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE set_TextFontCharSet(unsigned_char pRet/*[in]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE get_TextAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE set_TextAlign(unsigned_char pRet/*[in]*/) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(short* pRet/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(short pRet/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidth(short* pRet/*[out,retval]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidth(short pRet/*[in]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnOrder(short* pRet/*[out,retval]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnOrder(short pRet/*[in]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHidden(TOLEBOOL pRet/*[in]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pRet/*[out,retval]*/) = 0; // [298]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pRet/*[in]*/) = 0; // [298]
  virtual HRESULT STDMETHODCALLTYPE get_SelText(BSTR* pRet/*[out,retval]*/) = 0; // [302]
  virtual HRESULT STDMETHODCALLTYPE set_SelText(BSTR pRet/*[in]*/) = 0; // [302]
  virtual HRESULT STDMETHODCALLTYPE get_SelStart(short* pRet/*[out,retval]*/) = 0; // [301]
  virtual HRESULT STDMETHODCALLTYPE set_SelStart(short pRet/*[in]*/) = 0; // [301]
  virtual HRESULT STDMETHODCALLTYPE get_SelLength(short* pRet/*[out,retval]*/) = 0; // [300]
  virtual HRESULT STDMETHODCALLTYPE set_SelLength(short pRet/*[in]*/) = 0; // [300]
  virtual HRESULT STDMETHODCALLTYPE get_TextAlignGeneral(short* pRet/*[out,retval]*/) = 0; // [134]
  virtual HRESULT STDMETHODCALLTYPE set_TextAlignGeneral(short pRet/*[in]*/) = 0; // [134]
  virtual HRESULT STDMETHODCALLTYPE get_Coltyp(long* pRet/*[out,retval]*/) = 0; // [136]
  virtual HRESULT STDMETHODCALLTYPE set_Coltyp(long pRet/*[in]*/) = 0; // [136]
  virtual HRESULT STDMETHODCALLTYPE get_FormatPictureText(BSTR* pRet/*[out,retval]*/) = 0; // [135]
  virtual HRESULT STDMETHODCALLTYPE set_FormatPictureText(BSTR pRet/*[in]*/) = 0; // [135]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeUpdate(BSTR pRet/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_AfterUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_AfterUpdate(BSTR pRet/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_OnChange(BSTR* pRet/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_OnChange(BSTR pRet/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void)
  {
    Access_97::_HyperlinkPtr ppRet;
    OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
    return ppRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Format(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Format((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DecimalPlaces(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DecimalPlaces((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_InputMask(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_InputMask((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_DefaultValue(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationRule(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationText((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_EnterKeyBehavior(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_EnterKeyBehavior((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AllowAutoCorrect(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AllowAutoCorrect((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_FilterLookup(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_FilterLookup((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoTab(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoTab((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ScrollBars(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ScrollBars((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HideDuplicates(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_CanGrow(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_CanGrow((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_CanShrink(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_CanShrink((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_RunningSum(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_RunningSum((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BackStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_ForeColor(void)
  {
    long pRet;
    OLECHECK(this->get_ForeColor((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FontName((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_FontSize(void)
  {
    short pRet;
    OLECHECK(this->get_FontSize((short*)&pRet));
    return pRet;
  }

  short __fastcall get_FontWeight(void)
  {
    short pRet;
    OLECHECK(this->get_FontWeight((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontItalic(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontUnderline(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TextFontCharSet(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TextAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TextAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_FontBold(void)
  {
    short pRet;
    OLECHECK(this->get_FontBold((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnWidth(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnWidth((short*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnOrder(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnOrder((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHidden(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Text((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_SelText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_SelText((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_SelStart(void)
  {
    short pRet;
    OLECHECK(this->get_SelStart((short*)&pRet));
    return pRet;
  }

  short __fastcall get_SelLength(void)
  {
    short pRet;
    OLECHECK(this->get_SelLength((short*)&pRet));
    return pRet;
  }

  short __fastcall get_TextAlignGeneral(void)
  {
    short pRet;
    OLECHECK(this->get_TextAlignGeneral((short*)&pRet));
    return pRet;
  }

  long __fastcall get_Coltyp(void)
  {
    long pRet;
    OLECHECK(this->get_Coltyp((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_FormatPictureText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FormatPictureText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnChange(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnChange((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            Format = {read = get_Format, write = set_Format};
  __property   unsigned_char   DecimalPlaces = {read = get_DecimalPlaces, write = set_DecimalPlaces};
  __property   BSTR            InputMask = {read = get_InputMask, write = set_InputMask};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        EnterKeyBehavior = {read = get_EnterKeyBehavior, write = set_EnterKeyBehavior};
  __property   TOLEBOOL        AllowAutoCorrect = {read = get_AllowAutoCorrect, write = set_AllowAutoCorrect};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   unsigned_char   FilterLookup = {read = get_FilterLookup, write = set_FilterLookup};
  __property   TOLEBOOL        AutoTab = {read = get_AutoTab, write = set_AutoTab};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   unsigned_char   ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   TOLEBOOL        CanGrow = {read = get_CanGrow, write = set_CanGrow};
  __property   TOLEBOOL        CanShrink = {read = get_CanShrink, write = set_CanShrink};
  __property   unsigned_char   RunningSum = {read = get_RunningSum, write = set_RunningSum};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   unsigned_char   TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   short           SelStart = {read = get_SelStart, write = set_SelStart};
  __property   short           SelLength = {read = get_SelLength, write = set_SelLength};
  __property   short           TextAlignGeneral = {read = get_TextAlignGeneral, write = set_TextAlignGeneral};
  __property   long            Coltyp = {read = get_Coltyp, write = set_Coltyp};
  __property   BSTR            FormatPictureText = {read = get_FormatPictureText, write = set_FormatPictureText};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnChange = {read = get_OnChange, write = set_OnChange};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TextBoxEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4340-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _TextBoxEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE BeforeUpdate(short* Cancel/*[out]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE AfterUpdate(void) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE Change(void) = 0; // [2077]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _ListBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E95A-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ListBox  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [2144]
  virtual HRESULT STDMETHODCALLTYPE get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                                               TVariant* pRet/*[out,retval]*/) = 0; // [2101]
  virtual HRESULT STDMETHODCALLTYPE get_Selected(long lRow/*[in]*/, long* pRet/*[out,retval]*/) = 0; // [2113]
  virtual HRESULT STDMETHODCALLTYPE set_Selected(long lRow/*[in]*/, long pRet/*[in]*/) = 0; // [2113]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/) = 0; // [2103]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE get_ItemsSelected(Access_97::_ItemsSelectedPtr* pRet/*[out,retval]*/) = 0; // [2137]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/) = 0; // [2181]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_RowSourceType(BSTR* pRet/*[out,retval]*/) = 0; // [90]
  virtual HRESULT STDMETHODCALLTYPE set_RowSourceType(BSTR pRet/*[in]*/) = 0; // [90]
  virtual HRESULT STDMETHODCALLTYPE get_RowSource(BSTR* pRet/*[out,retval]*/) = 0; // [88]
  virtual HRESULT STDMETHODCALLTYPE set_RowSource(BSTR pRet/*[in]*/) = 0; // [88]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnCount(short* pRet/*[out,retval]*/) = 0; // [66]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnCount(short pRet/*[in]*/) = 0; // [66]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHeads(TOLEBOOL pRet/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidths(BSTR* pRet/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidths(BSTR pRet/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_BoundColumn(long* pRet/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_BoundColumn(long pRet/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(BSTR* pRet/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(BSTR pRet/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationRule(BSTR* pRet/*[out,retval]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationRule(BSTR pRet/*[in]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationText(BSTR* pRet/*[out,retval]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationText(BSTR pRet/*[in]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_MultiSelect(unsigned_char* pRet/*[out,retval]*/) = 0; // [325]
  virtual HRESULT STDMETHODCALLTYPE set_MultiSelect(unsigned_char pRet/*[in]*/) = 0; // [325]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE set_HideDuplicates(TOLEBOOL pRet/*[in]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(long* pRet/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(long pRet/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* pRet/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR pRet/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(short* pRet/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(short pRet/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* pRet/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short pRet/*[in]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(TOLEBOOL pRet/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(TOLEBOOL pRet/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE set_TextFontCharSet(unsigned_char pRet/*[in]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(short* pRet/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(short pRet/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidth(short* pRet/*[out,retval]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidth(short pRet/*[in]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnOrder(short* pRet/*[out,retval]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnOrder(short pRet/*[in]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHidden(TOLEBOOL pRet/*[in]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_ListCount(long* pRet/*[out,retval]*/) = 0; // [241]
  virtual HRESULT STDMETHODCALLTYPE set_ListCount(long pRet/*[in]*/) = 0; // [241]
  virtual HRESULT STDMETHODCALLTYPE get_ListIndex(long* pRet/*[out,retval]*/) = 0; // [242]
  virtual HRESULT STDMETHODCALLTYPE set_ListIndex(long pRet/*[in]*/) = 0; // [242]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeUpdate(BSTR pRet/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_AfterUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_AfterUpdate(BSTR pRet/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->get_Column(Index, Row, (TVariant*)&pRet));
    return pRet;
  }

  long __fastcall get_Selected(long lRow/*[in]*/)
  {
    long pRet;
    OLECHECK(this->get_Selected(lRow, (long*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_ItemData(long Index/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->get_ItemData(Index, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  Access_97::_ItemsSelectedPtr __fastcall get_ItemsSelected(void)
  {
    Access_97::_ItemsSelectedPtr pRet;
    OLECHECK(this->get_ItemsSelected((Access_97::_ItemsSelectedPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void)
  {
    Access_97::_HyperlinkPtr ppRet;
    OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
    return ppRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_RowSourceType(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_RowSourceType((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_RowSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_RowSource((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnCount(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnCount((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHeads(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHeads((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ColumnWidths(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ColumnWidths((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_BoundColumn(void)
  {
    long pRet;
    OLECHECK(this->get_BoundColumn((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_DefaultValue(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationRule(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationText((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_MultiSelect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_MultiSelect((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HideDuplicates(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  long __fastcall get_ForeColor(void)
  {
    long pRet;
    OLECHECK(this->get_ForeColor((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FontName((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_FontSize(void)
  {
    short pRet;
    OLECHECK(this->get_FontSize((short*)&pRet));
    return pRet;
  }

  short __fastcall get_FontWeight(void)
  {
    short pRet;
    OLECHECK(this->get_FontWeight((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontItalic(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontUnderline(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TextFontCharSet(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_FontBold(void)
  {
    short pRet;
    OLECHECK(this->get_FontBold((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnWidth(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnWidth((short*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnOrder(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnOrder((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHidden(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_ListCount(void)
  {
    long pRet;
    OLECHECK(this->get_ListCount((long*)&pRet));
    return pRet;
  }

  long __fastcall get_ListIndex(void)
  {
    long pRet;
    OLECHECK(this->get_ListIndex((long*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_ItemsSelectedPtr ItemsSelected = {read = get_ItemsSelected};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   short           ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   long            BoundColumn = {read = get_BoundColumn, write = set_BoundColumn};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   unsigned_char   MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            ListCount = {read = get_ListCount, write = set_ListCount};
  __property   long            ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListBoxEvents
// Flags:     (16) Hidden
// GUID:      {BC9E434B-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ListBoxEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE BeforeUpdate(short* Cancel/*[out]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE AfterUpdate(void) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _Combobox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E95C-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _Combobox  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [2144]
  virtual HRESULT STDMETHODCALLTYPE Dropdown(void) = 0; // [2143]
  virtual HRESULT STDMETHODCALLTYPE get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                                               TVariant* pRet/*[out,retval]*/) = 0; // [2101]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/) = 0; // [2103]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/) = 0; // [2181]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_Format(BSTR* pRet/*[out,retval]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE set_Format(BSTR pRet/*[in]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE get_DecimalPlaces(unsigned_char* pRet/*[out,retval]*/) = 0; // [67]
  virtual HRESULT STDMETHODCALLTYPE set_DecimalPlaces(unsigned_char pRet/*[in]*/) = 0; // [67]
  virtual HRESULT STDMETHODCALLTYPE get_InputMask(BSTR* pRet/*[out,retval]*/) = 0; // [68]
  virtual HRESULT STDMETHODCALLTYPE set_InputMask(BSTR pRet/*[in]*/) = 0; // [68]
  virtual HRESULT STDMETHODCALLTYPE get_RowSourceType(BSTR* pRet/*[out,retval]*/) = 0; // [90]
  virtual HRESULT STDMETHODCALLTYPE set_RowSourceType(BSTR pRet/*[in]*/) = 0; // [90]
  virtual HRESULT STDMETHODCALLTYPE get_RowSource(BSTR* pRet/*[out,retval]*/) = 0; // [88]
  virtual HRESULT STDMETHODCALLTYPE set_RowSource(BSTR pRet/*[in]*/) = 0; // [88]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnCount(short* pRet/*[out,retval]*/) = 0; // [66]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnCount(short pRet/*[in]*/) = 0; // [66]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHeads(TOLEBOOL pRet/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidths(BSTR* pRet/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidths(BSTR pRet/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_BoundColumn(long* pRet/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_BoundColumn(long pRet/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_ListRows(short* pRet/*[out,retval]*/) = 0; // [150]
  virtual HRESULT STDMETHODCALLTYPE set_ListRows(short pRet/*[in]*/) = 0; // [150]
  virtual HRESULT STDMETHODCALLTYPE get_ListWidth(BSTR* pRet/*[out,retval]*/) = 0; // [151]
  virtual HRESULT STDMETHODCALLTYPE set_ListWidth(BSTR pRet/*[in]*/) = 0; // [151]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_LimitToList(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [63]
  virtual HRESULT STDMETHODCALLTYPE set_LimitToList(TOLEBOOL pRet/*[in]*/) = 0; // [63]
  virtual HRESULT STDMETHODCALLTYPE get_AutoExpand(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [64]
  virtual HRESULT STDMETHODCALLTYPE set_AutoExpand(TOLEBOOL pRet/*[in]*/) = 0; // [64]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(BSTR* pRet/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(BSTR pRet/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationRule(BSTR* pRet/*[out,retval]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationRule(BSTR pRet/*[in]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationText(BSTR* pRet/*[out,retval]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationText(BSTR pRet/*[in]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_AllowAutoCorrect(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [383]
  virtual HRESULT STDMETHODCALLTYPE set_AllowAutoCorrect(TOLEBOOL pRet/*[in]*/) = 0; // [383]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE set_HideDuplicates(TOLEBOOL pRet/*[in]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(unsigned_char pRet/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(long* pRet/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(long pRet/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* pRet/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR pRet/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(short* pRet/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(short pRet/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* pRet/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short pRet/*[in]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(TOLEBOOL pRet/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(TOLEBOOL pRet/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE set_TextFontCharSet(unsigned_char pRet/*[in]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE get_TextAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE set_TextAlign(unsigned_char pRet/*[in]*/) = 0; // [133]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(short* pRet/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(short pRet/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidth(short* pRet/*[out,retval]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidth(short pRet/*[in]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnOrder(short* pRet/*[out,retval]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnOrder(short pRet/*[in]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHidden(TOLEBOOL pRet/*[in]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pRet/*[out,retval]*/) = 0; // [298]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pRet/*[in]*/) = 0; // [298]
  virtual HRESULT STDMETHODCALLTYPE get_SelText(BSTR* pRet/*[out,retval]*/) = 0; // [302]
  virtual HRESULT STDMETHODCALLTYPE set_SelText(BSTR pRet/*[in]*/) = 0; // [302]
  virtual HRESULT STDMETHODCALLTYPE get_SelStart(short* pRet/*[out,retval]*/) = 0; // [301]
  virtual HRESULT STDMETHODCALLTYPE set_SelStart(short pRet/*[in]*/) = 0; // [301]
  virtual HRESULT STDMETHODCALLTYPE get_SelLength(short* pRet/*[out,retval]*/) = 0; // [300]
  virtual HRESULT STDMETHODCALLTYPE set_SelLength(short pRet/*[in]*/) = 0; // [300]
  virtual HRESULT STDMETHODCALLTYPE get_TextAlignGeneral(short* pRet/*[out,retval]*/) = 0; // [134]
  virtual HRESULT STDMETHODCALLTYPE set_TextAlignGeneral(short pRet/*[in]*/) = 0; // [134]
  virtual HRESULT STDMETHODCALLTYPE get_FormatPictureText(BSTR* pRet/*[out,retval]*/) = 0; // [135]
  virtual HRESULT STDMETHODCALLTYPE set_FormatPictureText(BSTR pRet/*[in]*/) = 0; // [135]
  virtual HRESULT STDMETHODCALLTYPE get_Coltyp(long* pRet/*[out,retval]*/) = 0; // [136]
  virtual HRESULT STDMETHODCALLTYPE set_Coltyp(long pRet/*[in]*/) = 0; // [136]
  virtual HRESULT STDMETHODCALLTYPE get_ListCount(long* pRet/*[out,retval]*/) = 0; // [241]
  virtual HRESULT STDMETHODCALLTYPE set_ListCount(long pRet/*[in]*/) = 0; // [241]
  virtual HRESULT STDMETHODCALLTYPE get_ListIndex(long* pRet/*[out,retval]*/) = 0; // [242]
  virtual HRESULT STDMETHODCALLTYPE set_ListIndex(long pRet/*[in]*/) = 0; // [242]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeUpdate(BSTR pRet/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_AfterUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_AfterUpdate(BSTR pRet/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_OnChange(BSTR* pRet/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_OnChange(BSTR pRet/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_OnNotInList(BSTR* pRet/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_OnNotInList(BSTR pRet/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->get_Column(Index, Row, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_ItemData(long Index/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->get_ItemData(Index, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void)
  {
    Access_97::_HyperlinkPtr ppRet;
    OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
    return ppRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Format(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Format((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DecimalPlaces(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DecimalPlaces((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_InputMask(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_InputMask((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_RowSourceType(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_RowSourceType((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_RowSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_RowSource((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnCount(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnCount((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHeads(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHeads((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ColumnWidths(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ColumnWidths((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_BoundColumn(void)
  {
    long pRet;
    OLECHECK(this->get_BoundColumn((long*)&pRet));
    return pRet;
  }

  short __fastcall get_ListRows(void)
  {
    short pRet;
    OLECHECK(this->get_ListRows((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ListWidth(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ListWidth((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_LimitToList(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_LimitToList((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoExpand(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoExpand((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_DefaultValue(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationRule(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AllowAutoCorrect(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AllowAutoCorrect((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HideDuplicates(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BackStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_ForeColor(void)
  {
    long pRet;
    OLECHECK(this->get_ForeColor((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FontName((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_FontSize(void)
  {
    short pRet;
    OLECHECK(this->get_FontSize((short*)&pRet));
    return pRet;
  }

  short __fastcall get_FontWeight(void)
  {
    short pRet;
    OLECHECK(this->get_FontWeight((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontItalic(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontUnderline(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TextFontCharSet(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TextAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TextAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_FontBold(void)
  {
    short pRet;
    OLECHECK(this->get_FontBold((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnWidth(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnWidth((short*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnOrder(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnOrder((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHidden(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Text((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_SelText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_SelText((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_SelStart(void)
  {
    short pRet;
    OLECHECK(this->get_SelStart((short*)&pRet));
    return pRet;
  }

  short __fastcall get_SelLength(void)
  {
    short pRet;
    OLECHECK(this->get_SelLength((short*)&pRet));
    return pRet;
  }

  short __fastcall get_TextAlignGeneral(void)
  {
    short pRet;
    OLECHECK(this->get_TextAlignGeneral((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_FormatPictureText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FormatPictureText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_Coltyp(void)
  {
    long pRet;
    OLECHECK(this->get_Coltyp((long*)&pRet));
    return pRet;
  }

  long __fastcall get_ListCount(void)
  {
    long pRet;
    OLECHECK(this->get_ListCount((long*)&pRet));
    return pRet;
  }

  long __fastcall get_ListIndex(void)
  {
    long pRet;
    OLECHECK(this->get_ListIndex((long*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnChange(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnChange((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnNotInList(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnNotInList((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            Format = {read = get_Format, write = set_Format};
  __property   unsigned_char   DecimalPlaces = {read = get_DecimalPlaces, write = set_DecimalPlaces};
  __property   BSTR            InputMask = {read = get_InputMask, write = set_InputMask};
  __property   BSTR            RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   short           ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   long            BoundColumn = {read = get_BoundColumn, write = set_BoundColumn};
  __property   short           ListRows = {read = get_ListRows, write = set_ListRows};
  __property   BSTR            ListWidth = {read = get_ListWidth, write = set_ListWidth};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        LimitToList = {read = get_LimitToList, write = set_LimitToList};
  __property   TOLEBOOL        AutoExpand = {read = get_AutoExpand, write = set_AutoExpand};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        AllowAutoCorrect = {read = get_AllowAutoCorrect, write = set_AllowAutoCorrect};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   unsigned_char   TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   short           SelStart = {read = get_SelStart, write = set_SelStart};
  __property   short           SelLength = {read = get_SelLength, write = set_SelLength};
  __property   short           TextAlignGeneral = {read = get_TextAlignGeneral, write = set_TextAlignGeneral};
  __property   BSTR            FormatPictureText = {read = get_FormatPictureText, write = set_FormatPictureText};
  __property   long            Coltyp = {read = get_Coltyp, write = set_Coltyp};
  __property   long            ListCount = {read = get_ListCount, write = set_ListCount};
  __property   long            ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnChange = {read = get_OnChange, write = set_OnChange};
  __property   BSTR            OnNotInList = {read = get_OnNotInList, write = set_OnNotInList};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ComboBoxEvents
// Flags:     (16) Hidden
// GUID:      {BC9E434C-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ComboBoxEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE BeforeUpdate(short* Cancel/*[out]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE AfterUpdate(void) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE Change(void) = 0; // [2077]
  virtual HRESULT STDMETHODCALLTYPE NotInList(BSTR* NewData/*[in,out]*/, short* Response/*[out]*/) = 0; // [2078]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _ObjectFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E95E-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ObjectFrame  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Object(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2104]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/) = 0; // [2105]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_SizeMode(unsigned_char* pRet/*[out,retval]*/) = 0; // [85]
  virtual HRESULT STDMETHODCALLTYPE set_SizeMode(unsigned_char pRet/*[in]*/) = 0; // [85]
  virtual HRESULT STDMETHODCALLTYPE get_OLEClass(BSTR* pRet/*[out,retval]*/) = 0; // [72]
  virtual HRESULT STDMETHODCALLTYPE set_OLEClass(BSTR pRet/*[in]*/) = 0; // [72]
  virtual HRESULT STDMETHODCALLTYPE get_Item(BSTR* pRet/*[out,retval]*/) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE set_Item(BSTR pRet/*[in]*/) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE get_RowSourceType(BSTR* pRet/*[out,retval]*/) = 0; // [90]
  virtual HRESULT STDMETHODCALLTYPE set_RowSourceType(BSTR pRet/*[in]*/) = 0; // [90]
  virtual HRESULT STDMETHODCALLTYPE get_RowSource(BSTR* pRet/*[out,retval]*/) = 0; // [88]
  virtual HRESULT STDMETHODCALLTYPE set_RowSource(BSTR pRet/*[in]*/) = 0; // [88]
  virtual HRESULT STDMETHODCALLTYPE get_LinkChildFields(BSTR* pRet/*[out,retval]*/) = 0; // [49]
  virtual HRESULT STDMETHODCALLTYPE set_LinkChildFields(BSTR pRet/*[in]*/) = 0; // [49]
  virtual HRESULT STDMETHODCALLTYPE get_LinkMasterFields(BSTR* pRet/*[out,retval]*/) = 0; // [50]
  virtual HRESULT STDMETHODCALLTYPE set_LinkMasterFields(BSTR pRet/*[in]*/) = 0; // [50]
  virtual HRESULT STDMETHODCALLTYPE get_AutoActivate(short* pRet/*[out,retval]*/) = 0; // [98]
  virtual HRESULT STDMETHODCALLTYPE set_AutoActivate(short pRet/*[in]*/) = 0; // [98]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayType(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [304]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayType(TOLEBOOL pRet/*[in]*/) = 0; // [304]
  virtual HRESULT STDMETHODCALLTYPE get_UpdateOptions(short* pRet/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_UpdateOptions(short pRet/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Verb(long* pRet/*[out,retval]*/) = 0; // [99]
  virtual HRESULT STDMETHODCALLTYPE set_Verb(long pRet/*[in]*/) = 0; // [99]
  virtual HRESULT STDMETHODCALLTYPE get_OLEType(unsigned_char* pRet/*[out,retval]*/) = 0; // [308]
  virtual HRESULT STDMETHODCALLTYPE set_OLEType(unsigned_char pRet/*[in]*/) = 0; // [308]
  virtual HRESULT STDMETHODCALLTYPE get_OLETypeAllowed(unsigned_char* pRet/*[out,retval]*/) = 0; // [307]
  virtual HRESULT STDMETHODCALLTYPE set_OLETypeAllowed(unsigned_char pRet/*[in]*/) = 0; // [307]
  virtual HRESULT STDMETHODCALLTYPE get_SourceObject(BSTR* pRet/*[out,retval]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE set_SourceObject(BSTR pRet/*[in]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE get_Class(BSTR* pRet/*[out,retval]*/) = 0; // [306]
  virtual HRESULT STDMETHODCALLTYPE set_Class(BSTR pRet/*[in]*/) = 0; // [306]
  virtual HRESULT STDMETHODCALLTYPE get_SourceDoc(BSTR* pRet/*[out,retval]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE set_SourceDoc(BSTR pRet/*[in]*/) = 0; // [130]
  virtual HRESULT STDMETHODCALLTYPE get_SourceItem(BSTR* pRet/*[out,retval]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE set_SourceItem(BSTR pRet/*[in]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnCount(short* pRet/*[out,retval]*/) = 0; // [66]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnCount(short pRet/*[in]*/) = 0; // [66]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHeads(TOLEBOOL pRet/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_OleData(TVariant* pRet/*[out,retval]*/) = 0; // [168]
  virtual HRESULT STDMETHODCALLTYPE set_OleData(TVariantInParam pRet/*[in]*/) = 0; // [168]
  virtual HRESULT STDMETHODCALLTYPE get_UpdateMethod(short* pRet/*[out,retval]*/) = 0; // [139]
  virtual HRESULT STDMETHODCALLTYPE set_UpdateMethod(short pRet/*[in]*/) = 0; // [139]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(unsigned_char pRet/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_Data(short* pRet/*[out,retval]*/) = 0; // [265]
  virtual HRESULT STDMETHODCALLTYPE set_Data(short pRet/*[in]*/) = 0; // [265]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectPalette(TVariant* pRet/*[out,retval]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE set_ObjectPalette(TVariantInParam pRet/*[in]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE get_LpOleObject(long* pRet/*[out,retval]*/) = 0; // [169]
  virtual HRESULT STDMETHODCALLTYPE set_LpOleObject(long pRet/*[in]*/) = 0; // [169]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectVerbsCount(long* pRet/*[out,retval]*/) = 0; // [172]
  virtual HRESULT STDMETHODCALLTYPE set_ObjectVerbsCount(long pRet/*[in]*/) = 0; // [172]
  virtual HRESULT STDMETHODCALLTYPE get_Action(short* pRet/*[out,retval]*/) = 0; // [305]
  virtual HRESULT STDMETHODCALLTYPE set_Action(short pRet/*[in]*/) = 0; // [305]
  virtual HRESULT STDMETHODCALLTYPE get_Scaling(unsigned_char* pRet/*[out,retval]*/) = 0; // [84]
  virtual HRESULT STDMETHODCALLTYPE set_Scaling(unsigned_char pRet/*[in]*/) = 0; // [84]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_OnUpdated(BSTR* pRet/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_OnUpdated(BSTR pRet/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Object(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Object((LPDISPATCH*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ObjectVerbs(long Index/*[in]*/)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ObjectVerbs(Index, (BSTR*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SizeMode(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SizeMode((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OLEClass(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OLEClass((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Item(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Item((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_RowSourceType(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_RowSourceType((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_RowSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_RowSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_LinkChildFields(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_LinkChildFields((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_LinkMasterFields(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_LinkMasterFields((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_AutoActivate(void)
  {
    short pRet;
    OLECHECK(this->get_AutoActivate((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_DisplayType(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_DisplayType((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_UpdateOptions(void)
  {
    short pRet;
    OLECHECK(this->get_UpdateOptions((short*)&pRet));
    return pRet;
  }

  long __fastcall get_Verb(void)
  {
    long pRet;
    OLECHECK(this->get_Verb((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OLEType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OLEType((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OLETypeAllowed(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OLETypeAllowed((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_SourceObject(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_SourceObject((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Class(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Class((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_SourceDoc(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_SourceDoc((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_SourceItem(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_SourceItem((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnCount(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnCount((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHeads(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHeads((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OleData(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OleData((TVariant*)&pRet));
    return pRet;
  }

  short __fastcall get_UpdateMethod(void)
  {
    short pRet;
    OLECHECK(this->get_UpdateMethod((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BackStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Data(void)
  {
    short pRet;
    OLECHECK(this->get_Data((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_ObjectPalette(void)
  {
    TVariant pRet;
    OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
    return pRet;
  }

  long __fastcall get_LpOleObject(void)
  {
    long pRet;
    OLECHECK(this->get_LpOleObject((long*)&pRet));
    return pRet;
  }

  long __fastcall get_ObjectVerbsCount(void)
  {
    long pRet;
    OLECHECK(this->get_ObjectVerbsCount((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Action(void)
  {
    short pRet;
    OLECHECK(this->get_Action((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_Scaling(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_Scaling((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnUpdated(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnUpdated((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   unsigned_char   SizeMode = {read = get_SizeMode, write = set_SizeMode};
  __property   BSTR            OLEClass = {read = get_OLEClass, write = set_OLEClass};
  __property   BSTR            Item = {read = get_Item, write = set_Item};
  __property   BSTR            RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   BSTR            LinkChildFields = {read = get_LinkChildFields, write = set_LinkChildFields};
  __property   BSTR            LinkMasterFields = {read = get_LinkMasterFields, write = set_LinkMasterFields};
  __property   short           AutoActivate = {read = get_AutoActivate, write = set_AutoActivate};
  __property   TOLEBOOL        DisplayType = {read = get_DisplayType, write = set_DisplayType};
  __property   short           UpdateOptions = {read = get_UpdateOptions, write = set_UpdateOptions};
  __property   long            Verb = {read = get_Verb, write = set_Verb};
  __property   unsigned_char   OLEType = {read = get_OLEType, write = set_OLEType};
  __property   unsigned_char   OLETypeAllowed = {read = get_OLETypeAllowed, write = set_OLETypeAllowed};
  __property   BSTR            SourceObject = {read = get_SourceObject, write = set_SourceObject};
  __property   BSTR            Class = {read = get_Class, write = set_Class};
  __property   BSTR            SourceDoc = {read = get_SourceDoc, write = set_SourceDoc};
  __property   BSTR            SourceItem = {read = get_SourceItem, write = set_SourceItem};
  __property   short           ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           UpdateMethod = {read = get_UpdateMethod, write = set_UpdateMethod};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Data = {read = get_Data, write = set_Data};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            LpOleObject = {read = get_LpOleObject, write = set_LpOleObject};
  __property   long            ObjectVerbsCount = {read = get_ObjectVerbsCount, write = set_ObjectVerbsCount};
  __property   short           Action = {read = get_Action, write = set_Action};
  __property   unsigned_char   Scaling = {read = get_Scaling, write = set_Scaling};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnUpdated = {read = get_OnUpdated, write = set_OnUpdated};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ObjectFrameEvents
// Flags:     (16) Hidden
// GUID:      {BC9E434D-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ObjectFrameEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Updated(short* Code/*[in,out]*/) = 0; // [2076]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
};

// *********************************************************************//
// Interface: _PageBreak
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E960-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _PageBreak  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _PageBreakEvents
// Flags:     (16) Hidden
// GUID:      {BC9E434E-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _PageBreakEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _ToggleButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E962-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ToggleButton  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [2144]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pRet/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pRet/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(BSTR* pRet/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(BSTR pRet/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PictureType(unsigned_char* pRet/*[out,retval]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE set_PictureType(unsigned_char pRet/*[in]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE get_PictureData(TVariant* pRet/*[out,retval]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE set_PictureData(TVariantInParam pRet/*[in]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE get_OptionValue(long* pRet/*[out,retval]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE set_OptionValue(long pRet/*[in]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(BSTR* pRet/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(BSTR pRet/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationRule(BSTR* pRet/*[out,retval]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationRule(BSTR pRet/*[in]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationText(BSTR* pRet/*[out,retval]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationText(BSTR pRet/*[in]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_TripleState(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [326]
  virtual HRESULT STDMETHODCALLTYPE set_TripleState(TOLEBOOL pRet/*[in]*/) = 0; // [326]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE set_HideDuplicates(TOLEBOOL pRet/*[in]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(long* pRet/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(long pRet/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* pRet/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR pRet/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(short* pRet/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(short pRet/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* pRet/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short pRet/*[in]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(TOLEBOOL pRet/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(TOLEBOOL pRet/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE set_TextFontCharSet(unsigned_char pRet/*[in]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(short* pRet/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(short pRet/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidth(short* pRet/*[out,retval]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidth(short pRet/*[in]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnOrder(short* pRet/*[out,retval]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnOrder(short pRet/*[in]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHidden(TOLEBOOL pRet/*[in]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectPalette(TVariant* pRet/*[out,retval]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE set_ObjectPalette(TVariantInParam pRet/*[in]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeUpdate(BSTR pRet/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_AfterUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_AfterUpdate(BSTR pRet/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Caption((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Picture(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Picture((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PictureData(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PictureData((TVariant*)&pRet));
    return pRet;
  }

  long __fastcall get_OptionValue(void)
  {
    long pRet;
    OLECHECK(this->get_OptionValue((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_DefaultValue(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationRule(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationText((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TripleState(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TripleState((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HideDuplicates(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  long __fastcall get_ForeColor(void)
  {
    long pRet;
    OLECHECK(this->get_ForeColor((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FontName((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_FontSize(void)
  {
    short pRet;
    OLECHECK(this->get_FontSize((short*)&pRet));
    return pRet;
  }

  short __fastcall get_FontWeight(void)
  {
    short pRet;
    OLECHECK(this->get_FontWeight((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontItalic(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontUnderline(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TextFontCharSet(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_FontBold(void)
  {
    short pRet;
    OLECHECK(this->get_FontBold((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnWidth(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnWidth((short*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnOrder(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnOrder((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHidden(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_ObjectPalette(void)
  {
    TVariant pRet;
    OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ToggleButtonEvents
// Flags:     (16) Hidden
// GUID:      {BC9E434F-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ToggleButtonEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE BeforeUpdate(short* Cancel/*[out]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE AfterUpdate(void) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _ToggleButtonInOptionEvents
// Flags:     (16) Hidden
// GUID:      {BC9E435F-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ToggleButtonInOptionEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _PaletteButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9CD4A760-A6A9-11CE-A686-00AA003F0F07}
// *********************************************************************//
interface _PaletteButton  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_OptionValue(long* pRet/*[out,retval]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE set_OptionValue(long pRet/*[in]*/) = 0; // [58]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(BSTR* pRet/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(BSTR pRet/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationRule(BSTR* pRet/*[out,retval]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationRule(BSTR pRet/*[in]*/) = 0; // [142]
  virtual HRESULT STDMETHODCALLTYPE get_ValidationText(BSTR* pRet/*[out,retval]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE set_ValidationText(BSTR pRet/*[in]*/) = 0; // [61]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_TripleState(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [326]
  virtual HRESULT STDMETHODCALLTYPE set_TripleState(TOLEBOOL pRet/*[in]*/) = 0; // [326]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE set_HideDuplicates(TOLEBOOL pRet/*[in]*/) = 0; // [65]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(unsigned_char pRet/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnWidth(short* pRet/*[out,retval]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnWidth(short pRet/*[in]*/) = 0; // [163]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnOrder(short* pRet/*[out,retval]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnOrder(short pRet/*[in]*/) = 0; // [162]
  virtual HRESULT STDMETHODCALLTYPE get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE set_ColumnHidden(TOLEBOOL pRet/*[in]*/) = 0; // [164]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeUpdate(BSTR pRet/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_AfterUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_AfterUpdate(BSTR pRet/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_OptionValue(void)
  {
    long pRet;
    OLECHECK(this->get_OptionValue((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_DefaultValue(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationRule(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ValidationText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ValidationText((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TripleState(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TripleState((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HideDuplicates(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BackStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnWidth(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnWidth((short*)&pRet));
    return pRet;
  }

  short __fastcall get_ColumnOrder(void)
  {
    short pRet;
    OLECHECK(this->get_ColumnOrder((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ColumnHidden(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _PaletteButtonEvents
// Flags:     (16) Hidden
// GUID:      {A843CCD0-6E2C-11CF-A219-00A0C90542FF}
// *********************************************************************//
interface _PaletteButtonEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE BeforeUpdate(short* Cancel/*[out]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE AfterUpdate(void) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
};

// *********************************************************************//
// Interface: _SubForm
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E964-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _SubForm  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/) = 0; // [2089]
  virtual HRESULT STDMETHODCALLTYPE get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/) = 0; // [2097]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_SourceObject(BSTR* pRet/*[out,retval]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE set_SourceObject(BSTR pRet/*[in]*/) = 0; // [129]
  virtual HRESULT STDMETHODCALLTYPE get_LinkChildFields(BSTR* pRet/*[out,retval]*/) = 0; // [49]
  virtual HRESULT STDMETHODCALLTYPE set_LinkChildFields(BSTR pRet/*[in]*/) = 0; // [49]
  virtual HRESULT STDMETHODCALLTYPE get_LinkMasterFields(BSTR* pRet/*[out,retval]*/) = 0; // [50]
  virtual HRESULT STDMETHODCALLTYPE set_LinkMasterFields(BSTR pRet/*[in]*/) = 0; // [50]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_CanGrow(TOLEBOOL pRet/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_CanShrink(TOLEBOOL pRet/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE set_AutoLabel(TOLEBOOL pRet/*[in]*/) = 0; // [57]
  virtual HRESULT STDMETHODCALLTYPE get_AddColon(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_AddColon(TOLEBOOL pRet/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_LabelX(short* pRet/*[out,retval]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE set_LabelX(short pRet/*[in]*/) = 0; // [52]
  virtual HRESULT STDMETHODCALLTYPE get_LabelY(short* pRet/*[out,retval]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE set_LabelY(short pRet/*[in]*/) = 0; // [53]
  virtual HRESULT STDMETHODCALLTYPE get_LabelAlign(unsigned_char* pRet/*[out,retval]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE set_LabelAlign(unsigned_char pRet/*[in]*/) = 0; // [51]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::AccessFormPtr __fastcall get_Form(void)
  {
    Access_97::AccessFormPtr pRet;
    OLECHECK(this->get_Form((Access_97::AccessFormPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessReportPtr __fastcall get_Report(void)
  {
    Access_97::AccessReportPtr pRet;
    OLECHECK(this->get_Report((Access_97::AccessReportPtr*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::Controls_Ptr __fastcall get_Controls(void)
  {
    Access_97::Controls_Ptr pRet;
    OLECHECK(this->get_Controls((Access_97::Controls_Ptr*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_SourceObject(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_SourceObject((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_LinkChildFields(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_LinkChildFields((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_LinkMasterFields(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_LinkMasterFields((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_CanGrow(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_CanGrow((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_CanShrink(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_CanShrink((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoLabel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AddColon(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelX(void)
  {
    short pRet;
    OLECHECK(this->get_LabelX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_LabelY(void)
  {
    short pRet;
    OLECHECK(this->get_LabelY((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_LabelAlign(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::Controls_Ptr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            SourceObject = {read = get_SourceObject, write = set_SourceObject};
  __property   BSTR            LinkChildFields = {read = get_LinkChildFields, write = set_LinkChildFields};
  __property   BSTR            LinkMasterFields = {read = get_LinkMasterFields, write = set_LinkMasterFields};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        CanGrow = {read = get_CanGrow, write = set_CanGrow};
  __property   TOLEBOOL        CanShrink = {read = get_CanShrink, write = set_CanShrink};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _SubFormEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4350-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _SubFormEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
};

// *********************************************************************//
// Interface: _SubReport
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E966-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _SubReport  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/) = 0; // [2089]
  virtual HRESULT STDMETHODCALLTYPE get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/) = 0; // [2097]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::AccessFormPtr __fastcall get_Form(void)
  {
    Access_97::AccessFormPtr pRet;
    OLECHECK(this->get_Form((Access_97::AccessFormPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessReportPtr __fastcall get_Report(void)
  {
    Access_97::AccessReportPtr pRet;
    OLECHECK(this->get_Report((Access_97::AccessReportPtr*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _SubReportEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4351-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _SubReportEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
};

// *********************************************************************//
// Interface: _CustomControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E968-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _CustomControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Object(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2104]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/) = 0; // [2105]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Goto(void) = 0; // [2023]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_OLEClass(BSTR* pRet/*[out,retval]*/) = 0; // [72]
  virtual HRESULT STDMETHODCALLTYPE set_OLEClass(BSTR pRet/*[in]*/) = 0; // [72]
  virtual HRESULT STDMETHODCALLTYPE get_Verb(long* pRet/*[out,retval]*/) = 0; // [99]
  virtual HRESULT STDMETHODCALLTYPE set_Verb(long pRet/*[in]*/) = 0; // [99]
  virtual HRESULT STDMETHODCALLTYPE get_Class(BSTR* pRet/*[out,retval]*/) = 0; // [306]
  virtual HRESULT STDMETHODCALLTYPE set_Class(BSTR pRet/*[in]*/) = 0; // [306]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Locked(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE set_Locked(TOLEBOOL pRet/*[in]*/) = 0; // [56]
  virtual HRESULT STDMETHODCALLTYPE get_OleData(TVariant* pRet/*[out,retval]*/) = 0; // [168]
  virtual HRESULT STDMETHODCALLTYPE set_OleData(TVariantInParam pRet/*[in]*/) = 0; // [168]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE set_OldBorderStyle(unsigned_char pRet/*[in]*/) = 0; // [371]
  virtual HRESULT STDMETHODCALLTYPE get_BorderColor(long* pRet/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_BorderColor(long pRet/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_BorderWidth(unsigned_char* pRet/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_BorderWidth(unsigned_char pRet/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_BorderLineStyle(unsigned_char pRet/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ControlTipText(BSTR* pRet/*[out,retval]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE set_ControlTipText(BSTR pRet/*[in]*/) = 0; // [362]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectPalette(TVariant* pRet/*[out,retval]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE set_ObjectPalette(TVariantInParam pRet/*[in]*/) = 0; // [96]
  virtual HRESULT STDMETHODCALLTYPE get_LpOleObject(long* pRet/*[out,retval]*/) = 0; // [169]
  virtual HRESULT STDMETHODCALLTYPE set_LpOleObject(long pRet/*[in]*/) = 0; // [169]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectVerbsCount(long* pRet/*[out,retval]*/) = 0; // [172]
  virtual HRESULT STDMETHODCALLTYPE set_ObjectVerbsCount(long pRet/*[in]*/) = 0; // [172]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_OnUpdated(BSTR* pRet/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_OnUpdated(BSTR pRet/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_OnEnter(BSTR* pRet/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE set_OnEnter(BSTR pRet/*[in]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE get_OnExit(BSTR* pRet/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE set_OnExit(BSTR pRet/*[in]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_Default(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE set_Default(TOLEBOOL pRet/*[in]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_Cancel(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE set_Cancel(TOLEBOOL pRet/*[in]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE get_Custom(BSTR* pRet/*[out,retval]*/) = 0; // [328]
  virtual HRESULT STDMETHODCALLTYPE set_Custom(BSTR pRet/*[in]*/) = 0; // [328]
  virtual HRESULT STDMETHODCALLTYPE get_About(BSTR* pRet/*[out,retval]*/) = 0; // [329]
  virtual HRESULT STDMETHODCALLTYPE set_About(BSTR pRet/*[in]*/) = 0; // [329]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Object(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Object((LPDISPATCH*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ObjectVerbs(long Index/*[in]*/)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ObjectVerbs(Index, (BSTR*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OLEClass(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OLEClass((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_Verb(void)
  {
    long pRet;
    OLECHECK(this->get_Verb((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Class(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Class((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Locked(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OleData(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OleData((TVariant*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_OldBorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_BorderColor(void)
  {
    long pRet;
    OLECHECK(this->get_BorderColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderWidth(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderLineStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlTipText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_ObjectPalette(void)
  {
    TVariant pRet;
    OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
    return pRet;
  }

  long __fastcall get_LpOleObject(void)
  {
    long pRet;
    OLECHECK(this->get_LpOleObject((long*)&pRet));
    return pRet;
  }

  long __fastcall get_ObjectVerbsCount(void)
  {
    long pRet;
    OLECHECK(this->get_ObjectVerbsCount((long*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnUpdated(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnUpdated((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnEnter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnEnter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnExit(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnExit((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Default(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Default((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Cancel(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Cancel((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Custom(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Custom((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_About(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_About((BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            OLEClass = {read = get_OLEClass, write = set_OLEClass};
  __property   long            Verb = {read = get_Verb, write = set_Verb};
  __property   BSTR            Class = {read = get_Class, write = set_Class};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            LpOleObject = {read = get_LpOleObject, write = set_LpOleObject};
  __property   long            ObjectVerbsCount = {read = get_ObjectVerbsCount, write = set_ObjectVerbsCount};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnUpdated = {read = get_OnUpdated, write = set_OnUpdated};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   TOLEBOOL        Default = {read = get_Default, write = set_Default};
  __property   TOLEBOOL        Cancel = {read = get_Cancel, write = set_Cancel};
  __property   BSTR            Custom = {read = get_Custom, write = set_Custom};
  __property   BSTR            About = {read = get_About, write = set_About};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _CustomControlEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4352-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _CustomControlEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Updated(short* Code/*[in,out]*/) = 0; // [2076]
  virtual HRESULT STDMETHODCALLTYPE Enter(void) = 0; // [2019]
  virtual HRESULT STDMETHODCALLTYPE Exit(short* Cancel/*[out]*/) = 0; // [2075]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
};

// *********************************************************************//
// Interface: _CustomControlInReportEvents
// Flags:     (16) Hidden
// GUID:      {300471E2-7426-11CE-AB64-00AA0042B7CE}
// *********************************************************************//
interface _CustomControlInReportEvents  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: _TabControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E971-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _TabControl  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_OldValue(TVariant* pRet/*[out,retval]*/) = 0; // [2102]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE SizeToFit(void) = 0; // [2151]
  virtual HRESULT STDMETHODCALLTYPE get_Pages(Access_97::PagesPtr* pRet/*[out,retval]*/) = 0; // [2180]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]
  virtual HRESULT STDMETHODCALLTYPE get_Value(TVariant* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(TVariantInParam pRet/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ControlType(unsigned_char* pRet/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_ControlType(unsigned_char pRet/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_StatusBarText(BSTR* pRet/*[out,retval]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE set_StatusBarText(BSTR pRet/*[in]*/) = 0; // [132]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(TOLEBOOL pRet/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_TabStop(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE set_TabStop(TOLEBOOL pRet/*[in]*/) = 0; // [292]
  virtual HRESULT STDMETHODCALLTYPE get_TabIndex(short* pRet/*[out,retval]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE set_TabIndex(short pRet/*[in]*/) = 0; // [291]
  virtual HRESULT STDMETHODCALLTYPE get_Left(short* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(short pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(short* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(short pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_BackStyle(unsigned_char pRet/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_MultiRow(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [391]
  virtual HRESULT STDMETHODCALLTYPE set_MultiRow(TOLEBOOL pRet/*[in]*/) = 0; // [391]
  virtual HRESULT STDMETHODCALLTYPE get_Style(unsigned_char* pRet/*[out,retval]*/) = 0; // [392]
  virtual HRESULT STDMETHODCALLTYPE set_Style(unsigned_char pRet/*[in]*/) = 0; // [392]
  virtual HRESULT STDMETHODCALLTYPE get_TabFixedHeight(short* pRet/*[out,retval]*/) = 0; // [393]
  virtual HRESULT STDMETHODCALLTYPE set_TabFixedHeight(short pRet/*[in]*/) = 0; // [393]
  virtual HRESULT STDMETHODCALLTYPE get_TabFixedWidth(short* pRet/*[out,retval]*/) = 0; // [394]
  virtual HRESULT STDMETHODCALLTYPE set_TabFixedWidth(short pRet/*[in]*/) = 0; // [394]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* pRet/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR pRet/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(short* pRet/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(short pRet/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_FontWeight(short* pRet/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_FontWeight(short pRet/*[in]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(TOLEBOOL pRet/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(TOLEBOOL pRet/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE set_TextFontCharSet(unsigned_char pRet/*[in]*/) = 0; // [192]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(short* pRet/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(short pRet/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_Section(short* pRet/*[out,retval]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE set_Section(short pRet/*[in]*/) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE get_ControlName(BSTR* pRet/*[out,retval]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE set_ControlName(BSTR pRet/*[in]*/) = 0; // [296]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE set_IsVisible(TOLEBOOL pRet/*[in]*/) = 0; // [137]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE get_OnChange(BSTR* pRet/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_OnChange(BSTR pRet/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OldValue(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OldValue((TVariant*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::PagesPtr __fastcall get_Pages(void)
  {
    Access_97::PagesPtr pRet;
    OLECHECK(this->get_Pages((Access_97::PagesPtr*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Value(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Value((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ControlType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_StatusBarText(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Enabled(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_TabStop(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_TabIndex(void)
  {
    short pRet;
    OLECHECK(this->get_TabIndex((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Left(void)
  {
    short pRet;
    OLECHECK(this->get_Left((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Top(void)
  {
    short pRet;
    OLECHECK(this->get_Top((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BackStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_MultiRow(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_MultiRow((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_Style(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_Style((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_TabFixedHeight(void)
  {
    short pRet;
    OLECHECK(this->get_TabFixedHeight((short*)&pRet));
    return pRet;
  }

  short __fastcall get_TabFixedWidth(void)
  {
    short pRet;
    OLECHECK(this->get_TabFixedWidth((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FontName((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_FontSize(void)
  {
    short pRet;
    OLECHECK(this->get_FontSize((short*)&pRet));
    return pRet;
  }

  short __fastcall get_FontWeight(void)
  {
    short pRet;
    OLECHECK(this->get_FontWeight((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontItalic(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FontUnderline(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TextFontCharSet(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
    return pRet;
  }

  short __fastcall get_FontBold(void)
  {
    short pRet;
    OLECHECK(this->get_FontBold((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Section(void)
  {
    short pRet;
    OLECHECK(this->get_Section((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsVisible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnChange(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnChange((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::PagesPtr Pages = {read = get_Pages};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   TOLEBOOL        MultiRow = {read = get_MultiRow, write = set_MultiRow};
  __property   unsigned_char   Style = {read = get_Style, write = set_Style};
  __property   short           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   short           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnChange = {read = get_OnChange, write = set_OnChange};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _TabControlEvents
// Flags:     (16) Hidden
// GUID:      {3B06E972-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _TabControlEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
  virtual HRESULT STDMETHODCALLTYPE Change(void) = 0; // [2077]
};

// *********************************************************************//
// Interface: _PageEvents
// Flags:     (16) Hidden
// GUID:      {3B06E975-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _PageEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
};

// *********************************************************************//
// Interface: _Section
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDCFC-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _Section  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/) = 0; // [2190]
  virtual HRESULT STDMETHODCALLTYPE get_EventProcPrefix(BSTR* pRet/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_EventProcPrefix(BSTR pRet/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ForceNewPage(unsigned_char* pRet/*[out,retval]*/) = 0; // [148]
  virtual HRESULT STDMETHODCALLTYPE set_ForceNewPage(unsigned_char pRet/*[in]*/) = 0; // [148]
  virtual HRESULT STDMETHODCALLTYPE get_NewRowOrCol(unsigned_char* pRet/*[out,retval]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE set_NewRowOrCol(unsigned_char pRet/*[in]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE get_KeepTogether(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [71]
  virtual HRESULT STDMETHODCALLTYPE set_KeepTogether(TOLEBOOL pRet/*[in]*/) = 0; // [71]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayWhen(unsigned_char pRet/*[in]*/) = 0; // [146]
  virtual HRESULT STDMETHODCALLTYPE get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_CanGrow(TOLEBOOL pRet/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_CanShrink(TOLEBOOL pRet/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_RepeatSection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_RepeatSection(TOLEBOOL pRet/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_Height(short* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(short pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(long* pRet/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(long pRet/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_SpecialEffect(unsigned_char pRet/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_OnFormat(BSTR* pRet/*[out,retval]*/) = 0; // [76]
  virtual HRESULT STDMETHODCALLTYPE set_OnFormat(BSTR pRet/*[in]*/) = 0; // [76]
  virtual HRESULT STDMETHODCALLTYPE get_OnPrint(BSTR* pRet/*[out,retval]*/) = 0; // [78]
  virtual HRESULT STDMETHODCALLTYPE set_OnPrint(BSTR pRet/*[in]*/) = 0; // [78]
  virtual HRESULT STDMETHODCALLTYPE get_OnRetreat(BSTR* pRet/*[out,retval]*/) = 0; // [80]
  virtual HRESULT STDMETHODCALLTYPE set_OnRetreat(BSTR pRet/*[in]*/) = 0; // [80]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_HasContinued(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [199]
  virtual HRESULT STDMETHODCALLTYPE set_HasContinued(TOLEBOOL pRet/*[in]*/) = 0; // [199]
  virtual HRESULT STDMETHODCALLTYPE get_WillContinue(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [200]
  virtual HRESULT STDMETHODCALLTYPE set_WillContinue(TOLEBOOL pRet/*[in]*/) = 0; // [200]
  virtual HRESULT STDMETHODCALLTYPE get_InSelection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [312]
  virtual HRESULT STDMETHODCALLTYPE set_InSelection(TOLEBOOL pRet/*[in]*/) = 0; // [312]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::ChildrenPtr __fastcall get_Controls(void)
  {
    Access_97::ChildrenPtr pRet;
    OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_EventProcPrefix(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ForceNewPage(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ForceNewPage((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_NewRowOrCol(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_NewRowOrCol((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_KeepTogether(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_KeepTogether((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DisplayWhen(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_CanGrow(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_CanGrow((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_CanShrink(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_CanShrink((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_RepeatSection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_RepeatSection((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Height(void)
  {
    short pRet;
    OLECHECK(this->get_Height((short*)&pRet));
    return pRet;
  }

  long __fastcall get_BackColor(void)
  {
    long pRet;
    OLECHECK(this->get_BackColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_SpecialEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnFormat(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnFormat((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnPrint(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnPrint((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnRetreat(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnRetreat((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HasContinued(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HasContinued((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_WillContinue(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_WillContinue((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_InSelection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ForceNewPage = {read = get_ForceNewPage, write = set_ForceNewPage};
  __property   unsigned_char   NewRowOrCol = {read = get_NewRowOrCol, write = set_NewRowOrCol};
  __property   TOLEBOOL        KeepTogether = {read = get_KeepTogether, write = set_KeepTogether};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        CanGrow = {read = get_CanGrow, write = set_CanGrow};
  __property   TOLEBOOL        CanShrink = {read = get_CanShrink, write = set_CanShrink};
  __property   TOLEBOOL        RepeatSection = {read = get_RepeatSection, write = set_RepeatSection};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            OnFormat = {read = get_OnFormat, write = set_OnFormat};
  __property   BSTR            OnPrint = {read = get_OnPrint, write = set_OnPrint};
  __property   BSTR            OnRetreat = {read = get_OnRetreat, write = set_OnRetreat};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   TOLEBOOL        HasContinued = {read = get_HasContinued, write = set_HasContinued};
  __property   TOLEBOOL        WillContinue = {read = get_WillContinue, write = set_WillContinue};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _SectionEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4353-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _SectionEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
};

// *********************************************************************//
// Interface: _GroupLevel
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD27-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _GroupLevel  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE get_ControlSource(BSTR* pRet/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ControlSource(BSTR pRet/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_SortOrder(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [173]
  virtual HRESULT STDMETHODCALLTYPE set_SortOrder(TOLEBOOL pRet/*[in]*/) = 0; // [173]
  virtual HRESULT STDMETHODCALLTYPE get_GroupHeader(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [174]
  virtual HRESULT STDMETHODCALLTYPE set_GroupHeader(TOLEBOOL pRet/*[in]*/) = 0; // [174]
  virtual HRESULT STDMETHODCALLTYPE get_GroupFooter(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [175]
  virtual HRESULT STDMETHODCALLTYPE set_GroupFooter(TOLEBOOL pRet/*[in]*/) = 0; // [175]
  virtual HRESULT STDMETHODCALLTYPE get_GroupOn(short* pRet/*[out,retval]*/) = 0; // [176]
  virtual HRESULT STDMETHODCALLTYPE set_GroupOn(short pRet/*[in]*/) = 0; // [176]
  virtual HRESULT STDMETHODCALLTYPE get_GroupInterval(long* pRet/*[out,retval]*/) = 0; // [177]
  virtual HRESULT STDMETHODCALLTYPE set_GroupInterval(long pRet/*[in]*/) = 0; // [177]
  virtual HRESULT STDMETHODCALLTYPE get_KeepTogether(unsigned_char* pRet/*[out,retval]*/) = 0; // [71]
  virtual HRESULT STDMETHODCALLTYPE set_KeepTogether(unsigned_char pRet/*[in]*/) = 0; // [71]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ControlSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ControlSource((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_SortOrder(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_SortOrder((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_GroupHeader(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_GroupHeader((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_GroupFooter(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_GroupFooter((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_GroupOn(void)
  {
    short pRet;
    OLECHECK(this->get_GroupOn((short*)&pRet));
    return pRet;
  }

  long __fastcall get_GroupInterval(void)
  {
    long pRet;
    OLECHECK(this->get_GroupInterval((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_KeepTogether(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_KeepTogether((unsigned_char*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   TOLEBOOL        SortOrder = {read = get_SortOrder, write = set_SortOrder};
  __property   TOLEBOOL        GroupHeader = {read = get_GroupHeader, write = set_GroupHeader};
  __property   TOLEBOOL        GroupFooter = {read = get_GroupFooter, write = set_GroupFooter};
  __property   short           GroupOn = {read = get_GroupOn, write = set_GroupOn};
  __property   long            GroupInterval = {read = get_GroupInterval, write = set_GroupInterval};
  __property   unsigned_char   KeepTogether = {read = get_KeepTogether, write = set_KeepTogether};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _GroupLevelEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4354-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _GroupLevelEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Format(short* Cancel/*[out]*/, short* FormatCount/*[in,out]*/) = 0; // [2079]
  virtual HRESULT STDMETHODCALLTYPE Print(short* Cancel/*[out]*/, short* PrintCount/*[in,out]*/) = 0; // [2080]
  virtual HRESULT STDMETHODCALLTYPE Retreat(void) = 0; // [2081]
};

// *********************************************************************//
// Interface: _SectionInReportEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4361-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _SectionInReportEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Format(short* Cancel/*[out]*/, short* FormatCount/*[in,out]*/) = 0; // [2079]
  virtual HRESULT STDMETHODCALLTYPE Print(short* Cancel/*[out]*/, short* PrintCount/*[in,out]*/) = 0; // [2080]
  virtual HRESULT STDMETHODCALLTYPE Retreat(void) = 0; // [2081]
};

// *********************************************************************//
// Interface: _PageHdrFtrInReportEvents
// Flags:     (16) Hidden
// GUID:      {7AD9E905-BAF8-11CE-A68A-00AA003F0F07}
// *********************************************************************//
interface _PageHdrFtrInReportEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Format(short* Cancel/*[out]*/, short* FormatCount/*[in,out]*/) = 0; // [2079]
  virtual HRESULT STDMETHODCALLTYPE Print(short* Cancel/*[out]*/, short* PrintCount/*[in,out]*/) = 0; // [2080]
};

// *********************************************************************//
// Interface: Module
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDCFE-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface Module  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE InsertText(BSTR Text/*[in]*/) = 0; // [2093]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstrName/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE AddFromString(BSTR String/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddFromFile(BSTR FileName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Lines(long Line/*[in]*/, long NumLines/*[in]*/, 
                                              BSTR* String/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CountOfLines(long* CountOfLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE InsertLines(long Line/*[in]*/, BSTR String/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DeleteLines(long StartLine/*[in]*/, long Count/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                                      Access_97::ProcKind ProcKind/*[in]*/, 
                                                      long* ProcStartLine/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                       Access_97::ProcKind ProcKind/*[in]*/, 
                                                       long* ProcCountLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                                     Access_97::ProcKind ProcKind/*[in]*/, 
                                                     long* ProcBodyLine/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcOfLine(long Line/*[in]*/, 
                                                   Access_97::ProcKind* pprockind/*[out]*/, 
                                                   BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CountOfDeclarationLines(long* pDeclCountOfLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/, 
                                                    long* Line/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                         long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                                         long* EndColumn/*[in,out]*/, 
                                         TOLEBOOL WholeWord/*[in,def,opt]*/, 
                                         TOLEBOOL MatchCase/*[in,def,opt]*/, 
                                         TOLEBOOL PatternSearch/*[in,def,opt]*/, 
                                         TOLEBOOL* pfFound/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Access_97::AcModuleType* pRet/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Lines(long Line/*[in]*/, long NumLines/*[in]*/)
  {
    BSTR String = 0;
    OLECHECK(this->get_Lines(Line, NumLines, (BSTR*)&String));
    return String;
  }

  long __fastcall get_CountOfLines(void)
  {
    long CountOfLines;
    OLECHECK(this->get_CountOfLines((long*)&CountOfLines));
    return CountOfLines;
  }

  long __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, Access_97::ProcKind ProcKind/*[in]*/)
  {
    long ProcStartLine;
    OLECHECK(this->get_ProcStartLine(ProcName, ProcKind, (long*)&ProcStartLine));
    return ProcStartLine;
  }

  long __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, Access_97::ProcKind ProcKind/*[in]*/)
  {
    long ProcCountLines;
    OLECHECK(this->get_ProcCountLines(ProcName, ProcKind, (long*)&ProcCountLines));
    return ProcCountLines;
  }

  long __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, Access_97::ProcKind ProcKind/*[in]*/)
  {
    long ProcBodyLine;
    OLECHECK(this->get_ProcBodyLine(ProcName, ProcKind, (long*)&ProcBodyLine));
    return ProcBodyLine;
  }

  BSTR __fastcall get_ProcOfLine(long Line/*[in]*/, Access_97::ProcKind* pprockind/*[out]*/)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_ProcOfLine(Line, pprockind, (BSTR*)&pbstrName));
    return pbstrName;
  }

  long __fastcall get_CountOfDeclarationLines(void)
  {
    long pDeclCountOfLines;
    OLECHECK(this->get_CountOfDeclarationLines((long*)&pDeclCountOfLines));
    return pDeclCountOfLines;
  }

  long __fastcall CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/)
  {
    long Line;
    OLECHECK(this->CreateEventProc(EventName, ObjectName, (long*)&Line));
    return Line;
  }

  TOLEBOOL __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                           long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                           long* EndColumn/*[in,out]*/, TOLEBOOL WholeWord/*[in,def,opt]*/, 
                           TOLEBOOL MatchCase/*[in,def,opt]*/, 
                           TOLEBOOL PatternSearch/*[in,def,opt]*/)
  {
    TOLEBOOL pfFound;
    OLECHECK(this->Find(Target, StartLine, StartColumn, EndLine, EndColumn, WholeWord, MatchCase, 
                        PatternSearch, (TOLEBOOL*)&pfFound));
    return pfFound;
  }

  Access_97::AcModuleType __fastcall get_Type(void)
  {
    Access_97::AcModuleType pRet;
    OLECHECK(this->get_Type((Access_97::AcModuleType*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            CountOfLines = {read = get_CountOfLines};
  __property   long            CountOfDeclarationLines = {read = get_CountOfDeclarationLines};
  __property   Access_97::AcModuleType Type = {read = get_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Modules
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9DD0AF42-6E28-11CF-9008-00AA0042B7CE}
// *********************************************************************//
interface Modules  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, 
                                             Access_97::ModulePtr* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pRet/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::ModulePtr __fastcall get_Item(TVariantInParam Index/*[in]*/)
  {
    Access_97::ModulePtr pRet;
    OLECHECK(this->get_Item(Index, (Access_97::ModulePtr*)&pRet));
    return pRet;
  }

  long __fastcall get_Count(void)
  {
    long pRet;
    OLECHECK(this->get_Count((long*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Form
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E5135D80-8F8D-101B-AF4E-00AA003F0F07}
// *********************************************************************//
interface _Form  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_FormName(BSTR* pRet/*[out,retval]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE set_FormName(BSTR pRet/*[in]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE get_RecordSource(BSTR* pRet/*[out,retval]*/) = 0; // [153]
  virtual HRESULT STDMETHODCALLTYPE set_RecordSource(BSTR pRet/*[in]*/) = 0; // [153]
  virtual HRESULT STDMETHODCALLTYPE get_Filter(BSTR* pRet/*[out,retval]*/) = 0; // [271]
  virtual HRESULT STDMETHODCALLTYPE set_Filter(BSTR pRet/*[in]*/) = 0; // [271]
  virtual HRESULT STDMETHODCALLTYPE get_FilterOn(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [374]
  virtual HRESULT STDMETHODCALLTYPE set_FilterOn(TOLEBOOL pRet/*[in]*/) = 0; // [374]
  virtual HRESULT STDMETHODCALLTYPE get_OrderBy(BSTR* pRet/*[out,retval]*/) = 0; // [373]
  virtual HRESULT STDMETHODCALLTYPE set_OrderBy(BSTR pRet/*[in]*/) = 0; // [373]
  virtual HRESULT STDMETHODCALLTYPE get_OrderByOn(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [379]
  virtual HRESULT STDMETHODCALLTYPE set_OrderByOn(TOLEBOOL pRet/*[in]*/) = 0; // [379]
  virtual HRESULT STDMETHODCALLTYPE get_AllowFilters(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE set_AllowFilters(TOLEBOOL pRet/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pRet/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pRet/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultView(unsigned_char* pRet/*[out,retval]*/) = 0; // [144]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultView(unsigned_char pRet/*[in]*/) = 0; // [144]
  virtual HRESULT STDMETHODCALLTYPE get_ViewsAllowed(unsigned_char* pRet/*[out,retval]*/) = 0; // [143]
  virtual HRESULT STDMETHODCALLTYPE set_ViewsAllowed(unsigned_char pRet/*[in]*/) = 0; // [143]
  virtual HRESULT STDMETHODCALLTYPE get_AllowEditing(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_AllowEditing(TOLEBOOL pRet/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultEditing(short* pRet/*[out,retval]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultEditing(short pRet/*[in]*/) = 0; // [131]
  virtual HRESULT STDMETHODCALLTYPE get_AllowEdits(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [382]
  virtual HRESULT STDMETHODCALLTYPE set_AllowEdits(TOLEBOOL pRet/*[in]*/) = 0; // [382]
  virtual HRESULT STDMETHODCALLTYPE get_AllowDeletions(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [324]
  virtual HRESULT STDMETHODCALLTYPE set_AllowDeletions(TOLEBOOL pRet/*[in]*/) = 0; // [324]
  virtual HRESULT STDMETHODCALLTYPE get_AllowAdditions(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [367]
  virtual HRESULT STDMETHODCALLTYPE set_AllowAdditions(TOLEBOOL pRet/*[in]*/) = 0; // [367]
  virtual HRESULT STDMETHODCALLTYPE get_DataEntry(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [381]
  virtual HRESULT STDMETHODCALLTYPE set_DataEntry(TOLEBOOL pRet/*[in]*/) = 0; // [381]
  virtual HRESULT STDMETHODCALLTYPE get_AllowUpdating(unsigned_char* pRet/*[out,retval]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE set_AllowUpdating(unsigned_char pRet/*[in]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE get_RecordsetType(unsigned_char* pRet/*[out,retval]*/) = 0; // [380]
  virtual HRESULT STDMETHODCALLTYPE set_RecordsetType(unsigned_char pRet/*[in]*/) = 0; // [380]
  virtual HRESULT STDMETHODCALLTYPE get_RecordLocks(unsigned_char* pRet/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_RecordLocks(unsigned_char pRet/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_ScrollBars(unsigned_char* pRet/*[out,retval]*/) = 0; // [149]
  virtual HRESULT STDMETHODCALLTYPE set_ScrollBars(unsigned_char pRet/*[in]*/) = 0; // [149]
  virtual HRESULT STDMETHODCALLTYPE get_RecordSelectors(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_RecordSelectors(TOLEBOOL pRet/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_NavigationButtons(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [311]
  virtual HRESULT STDMETHODCALLTYPE set_NavigationButtons(TOLEBOOL pRet/*[in]*/) = 0; // [311]
  virtual HRESULT STDMETHODCALLTYPE get_DividingLines(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [359]
  virtual HRESULT STDMETHODCALLTYPE set_DividingLines(TOLEBOOL pRet/*[in]*/) = 0; // [359]
  virtual HRESULT STDMETHODCALLTYPE get_AutoResize(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_AutoResize(TOLEBOOL pRet/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_AutoCenter(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [310]
  virtual HRESULT STDMETHODCALLTYPE set_AutoCenter(TOLEBOOL pRet/*[in]*/) = 0; // [310]
  virtual HRESULT STDMETHODCALLTYPE get_PopUp(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [86]
  virtual HRESULT STDMETHODCALLTYPE set_PopUp(TOLEBOOL pRet/*[in]*/) = 0; // [86]
  virtual HRESULT STDMETHODCALLTYPE get_Modal(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [62]
  virtual HRESULT STDMETHODCALLTYPE set_Modal(TOLEBOOL pRet/*[in]*/) = 0; // [62]
  virtual HRESULT STDMETHODCALLTYPE get_BorderStyle(unsigned_char* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_BorderStyle(unsigned_char pRet/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_ControlBox(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [94]
  virtual HRESULT STDMETHODCALLTYPE set_ControlBox(TOLEBOOL pRet/*[in]*/) = 0; // [94]
  virtual HRESULT STDMETHODCALLTYPE get_MinButton(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [92]
  virtual HRESULT STDMETHODCALLTYPE set_MinButton(TOLEBOOL pRet/*[in]*/) = 0; // [92]
  virtual HRESULT STDMETHODCALLTYPE get_MaxButton(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [91]
  virtual HRESULT STDMETHODCALLTYPE set_MaxButton(TOLEBOOL pRet/*[in]*/) = 0; // [91]
  virtual HRESULT STDMETHODCALLTYPE get_MinMaxButtons(unsigned_char* pRet/*[out,retval]*/) = 0; // [369]
  virtual HRESULT STDMETHODCALLTYPE set_MinMaxButtons(unsigned_char pRet/*[in]*/) = 0; // [369]
  virtual HRESULT STDMETHODCALLTYPE get_CloseButton(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [335]
  virtual HRESULT STDMETHODCALLTYPE set_CloseButton(TOLEBOOL pRet/*[in]*/) = 0; // [335]
  virtual HRESULT STDMETHODCALLTYPE get_WhatsThisButton(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [93]
  virtual HRESULT STDMETHODCALLTYPE set_WhatsThisButton(TOLEBOOL pRet/*[in]*/) = 0; // [93]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(BSTR* pRet/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(BSTR pRet/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PictureType(unsigned_char* pRet/*[out,retval]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE set_PictureType(unsigned_char pRet/*[in]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE get_PictureSizeMode(unsigned_char* pRet/*[out,retval]*/) = 0; // [357]
  virtual HRESULT STDMETHODCALLTYPE set_PictureSizeMode(unsigned_char pRet/*[in]*/) = 0; // [357]
  virtual HRESULT STDMETHODCALLTYPE get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/) = 0; // [354]
  virtual HRESULT STDMETHODCALLTYPE set_PictureAlignment(unsigned_char pRet/*[in]*/) = 0; // [354]
  virtual HRESULT STDMETHODCALLTYPE get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [358]
  virtual HRESULT STDMETHODCALLTYPE set_PictureTiling(TOLEBOOL pRet/*[in]*/) = 0; // [358]
  virtual HRESULT STDMETHODCALLTYPE get_Cycle(unsigned_char* pRet/*[out,retval]*/) = 0; // [372]
  virtual HRESULT STDMETHODCALLTYPE set_Cycle(unsigned_char pRet/*[in]*/) = 0; // [372]
  virtual HRESULT STDMETHODCALLTYPE get_MenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [261]
  virtual HRESULT STDMETHODCALLTYPE set_MenuBar(BSTR pRet/*[in]*/) = 0; // [261]
  virtual HRESULT STDMETHODCALLTYPE get_Toolbar(BSTR* pRet/*[out,retval]*/) = 0; // [396]
  virtual HRESULT STDMETHODCALLTYPE set_Toolbar(BSTR pRet/*[in]*/) = 0; // [396]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenu(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenu(TOLEBOOL pRet/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_GridX(short* pRet/*[out,retval]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE set_GridX(short pRet/*[in]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE get_GridY(short* pRet/*[out,retval]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE set_GridY(short pRet/*[in]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE get_LayoutForPrint(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [140]
  virtual HRESULT STDMETHODCALLTYPE set_LayoutForPrint(TOLEBOOL pRet/*[in]*/) = 0; // [140]
  virtual HRESULT STDMETHODCALLTYPE get_FastLaserPrinting(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [141]
  virtual HRESULT STDMETHODCALLTYPE set_FastLaserPrinting(TOLEBOOL pRet/*[in]*/) = 0; // [141]
  virtual HRESULT STDMETHODCALLTYPE get_HelpFile(BSTR* pRet/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_HelpFile(BSTR pRet/*[in]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_RowHeight(short* pRet/*[out,retval]*/) = 0; // [165]
  virtual HRESULT STDMETHODCALLTYPE set_RowHeight(short pRet/*[in]*/) = 0; // [165]
  virtual HRESULT STDMETHODCALLTYPE get_DatasheetFontName(BSTR* pRet/*[out,retval]*/) = 0; // [157]
  virtual HRESULT STDMETHODCALLTYPE set_DatasheetFontName(BSTR pRet/*[in]*/) = 0; // [157]
  virtual HRESULT STDMETHODCALLTYPE get_DatasheetFontHeight(short* pRet/*[out,retval]*/) = 0; // [158]
  virtual HRESULT STDMETHODCALLTYPE set_DatasheetFontHeight(short pRet/*[in]*/) = 0; // [158]
  virtual HRESULT STDMETHODCALLTYPE get_DatasheetFontWeight(short* pRet/*[out,retval]*/) = 0; // [159]
  virtual HRESULT STDMETHODCALLTYPE set_DatasheetFontWeight(short pRet/*[in]*/) = 0; // [159]
  virtual HRESULT STDMETHODCALLTYPE get_DatasheetFontItalic(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [160]
  virtual HRESULT STDMETHODCALLTYPE set_DatasheetFontItalic(TOLEBOOL pRet/*[in]*/) = 0; // [160]
  virtual HRESULT STDMETHODCALLTYPE get_DatasheetFontUnderline(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [161]
  virtual HRESULT STDMETHODCALLTYPE set_DatasheetFontUnderline(TOLEBOOL pRet/*[in]*/) = 0; // [161]
  virtual HRESULT STDMETHODCALLTYPE get_TabularCharSet(unsigned_char* pRet/*[out,retval]*/) = 0; // [193]
  virtual HRESULT STDMETHODCALLTYPE set_TabularCharSet(unsigned_char pRet/*[in]*/) = 0; // [193]
  virtual HRESULT STDMETHODCALLTYPE get_DatasheetGridlinesBehavior(unsigned_char* pRet/*[out,retval]*/) = 0; // [363]
  virtual HRESULT STDMETHODCALLTYPE set_DatasheetGridlinesBehavior(unsigned_char pRet/*[in]*/) = 0; // [363]
  virtual HRESULT STDMETHODCALLTYPE get_DatasheetGridlinesColor(long* pRet/*[out,retval]*/) = 0; // [364]
  virtual HRESULT STDMETHODCALLTYPE set_DatasheetGridlinesColor(long pRet/*[in]*/) = 0; // [364]
  virtual HRESULT STDMETHODCALLTYPE get_DatasheetCellsEffect(unsigned_char* pRet/*[out,retval]*/) = 0; // [365]
  virtual HRESULT STDMETHODCALLTYPE set_DatasheetCellsEffect(unsigned_char pRet/*[in]*/) = 0; // [365]
  virtual HRESULT STDMETHODCALLTYPE get_DatasheetForeColor(long* pRet/*[out,retval]*/) = 0; // [349]
  virtual HRESULT STDMETHODCALLTYPE set_DatasheetForeColor(long pRet/*[in]*/) = 0; // [349]
  virtual HRESULT STDMETHODCALLTYPE get_ShowGrid(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [166]
  virtual HRESULT STDMETHODCALLTYPE set_ShowGrid(TOLEBOOL pRet/*[in]*/) = 0; // [166]
  virtual HRESULT STDMETHODCALLTYPE get_DatasheetBackColor(long* pRet/*[out,retval]*/) = 0; // [366]
  virtual HRESULT STDMETHODCALLTYPE set_DatasheetBackColor(long pRet/*[in]*/) = 0; // [366]
  virtual HRESULT STDMETHODCALLTYPE get_Hwnd(long* pRet/*[out,retval]*/) = 0; // [191]
  virtual HRESULT STDMETHODCALLTYPE set_Hwnd(long pRet/*[in]*/) = 0; // [191]
  virtual HRESULT STDMETHODCALLTYPE get_Count(short* pRet/*[out,retval]*/) = 0; // [194]
  virtual HRESULT STDMETHODCALLTYPE set_Count(short pRet/*[in]*/) = 0; // [194]
  virtual HRESULT STDMETHODCALLTYPE get_Page(long* pRet/*[out,retval]*/) = 0; // [195]
  virtual HRESULT STDMETHODCALLTYPE set_Page(long pRet/*[in]*/) = 0; // [195]
  virtual HRESULT STDMETHODCALLTYPE get_Pages(short* pRet/*[out,retval]*/) = 0; // [196]
  virtual HRESULT STDMETHODCALLTYPE set_Pages(short pRet/*[in]*/) = 0; // [196]
  virtual HRESULT STDMETHODCALLTYPE get_LogicalPageWidth(long* pRet/*[out,retval]*/) = 0; // [197]
  virtual HRESULT STDMETHODCALLTYPE set_LogicalPageWidth(long pRet/*[in]*/) = 0; // [197]
  virtual HRESULT STDMETHODCALLTYPE get_LogicalPageHeight(long* pRet/*[out,retval]*/) = 0; // [198]
  virtual HRESULT STDMETHODCALLTYPE set_LogicalPageHeight(long pRet/*[in]*/) = 0; // [198]
  virtual HRESULT STDMETHODCALLTYPE get_ZoomControl(long* pRet/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE set_ZoomControl(long pRet/*[in]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_Painting(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [264]
  virtual HRESULT STDMETHODCALLTYPE set_Painting(TOLEBOOL pRet/*[in]*/) = 0; // [264]
  virtual HRESULT STDMETHODCALLTYPE get_PrtMip(TVariant* pRet/*[out,retval]*/) = 0; // [188]
  virtual HRESULT STDMETHODCALLTYPE set_PrtMip(TVariantInParam pRet/*[in]*/) = 0; // [188]
  virtual HRESULT STDMETHODCALLTYPE get_PrtDevMode(TVariant* pRet/*[out,retval]*/) = 0; // [189]
  virtual HRESULT STDMETHODCALLTYPE set_PrtDevMode(TVariantInParam pRet/*[in]*/) = 0; // [189]
  virtual HRESULT STDMETHODCALLTYPE get_PrtDevNames(TVariant* pRet/*[out,retval]*/) = 0; // [190]
  virtual HRESULT STDMETHODCALLTYPE set_PrtDevNames(TVariantInParam pRet/*[in]*/) = 0; // [190]
  virtual HRESULT STDMETHODCALLTYPE get_FrozenColumns(short* pRet/*[out,retval]*/) = 0; // [167]
  virtual HRESULT STDMETHODCALLTYPE set_FrozenColumns(short pRet/*[in]*/) = 0; // [167]
  virtual HRESULT STDMETHODCALLTYPE get_Bookmark(TVariant* pRet/*[out,retval]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE set_Bookmark(TVariantInParam pRet/*[in]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE get_TabularFamily(unsigned_char* pRet/*[out,retval]*/) = 0; // [267]
  virtual HRESULT STDMETHODCALLTYPE set_TabularFamily(unsigned_char pRet/*[in]*/) = 0; // [267]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_PaletteSource(BSTR* pRet/*[out,retval]*/) = 0; // [95]
  virtual HRESULT STDMETHODCALLTYPE set_PaletteSource(BSTR pRet/*[in]*/) = 0; // [95]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_PaintPalette(TVariant* pRet/*[out,retval]*/) = 0; // [97]
  virtual HRESULT STDMETHODCALLTYPE set_PaintPalette(TVariantInParam pRet/*[in]*/) = 0; // [97]
  virtual HRESULT STDMETHODCALLTYPE get_OnMenu(BSTR* pRet/*[out,retval]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE set_OnMenu(BSTR pRet/*[in]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE get_OpenArgs(TVariant* pRet/*[out,retval]*/) = 0; // [316]
  virtual HRESULT STDMETHODCALLTYPE set_OpenArgs(TVariantInParam pRet/*[in]*/) = 0; // [316]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectSynch(short* pRet/*[out,retval]*/) = 0; // [317]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectSynch(short pRet/*[in]*/) = 0; // [317]
  virtual HRESULT STDMETHODCALLTYPE get_OnCurrent(BSTR* pRet/*[out,retval]*/) = 0; // [83]
  virtual HRESULT STDMETHODCALLTYPE set_OnCurrent(BSTR pRet/*[in]*/) = 0; // [83]
  virtual HRESULT STDMETHODCALLTYPE get_OnInsert(BSTR* pRet/*[out,retval]*/) = 0; // [77]
  virtual HRESULT STDMETHODCALLTYPE set_OnInsert(BSTR pRet/*[in]*/) = 0; // [77]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeInsert(BSTR* pRet/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeInsert(BSTR pRet/*[in]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_AfterInsert(BSTR* pRet/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE set_AfterInsert(BSTR pRet/*[in]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeUpdate(BSTR pRet/*[in]*/) = 0; // [81]
  virtual HRESULT STDMETHODCALLTYPE get_AfterUpdate(BSTR* pRet/*[out,retval]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE set_AfterUpdate(BSTR pRet/*[in]*/) = 0; // [82]
  virtual HRESULT STDMETHODCALLTYPE get_OnDelete(BSTR* pRet/*[out,retval]*/) = 0; // [75]
  virtual HRESULT STDMETHODCALLTYPE set_OnDelete(BSTR pRet/*[in]*/) = 0; // [75]
  virtual HRESULT STDMETHODCALLTYPE get_BeforeDelConfirm(BSTR* pRet/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE set_BeforeDelConfirm(BSTR pRet/*[in]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_AfterDelConfirm(BSTR* pRet/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE set_AfterDelConfirm(BSTR pRet/*[in]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_OnOpen(BSTR* pRet/*[out,retval]*/) = 0; // [73]
  virtual HRESULT STDMETHODCALLTYPE set_OnOpen(BSTR pRet/*[in]*/) = 0; // [73]
  virtual HRESULT STDMETHODCALLTYPE get_OnLoad(BSTR* pRet/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE set_OnLoad(BSTR pRet/*[in]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE get_OnResize(BSTR* pRet/*[out,retval]*/) = 0; // [114]
  virtual HRESULT STDMETHODCALLTYPE set_OnResize(BSTR pRet/*[in]*/) = 0; // [114]
  virtual HRESULT STDMETHODCALLTYPE get_OnUnload(BSTR* pRet/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE set_OnUnload(BSTR pRet/*[in]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE get_OnClose(BSTR* pRet/*[out,retval]*/) = 0; // [74]
  virtual HRESULT STDMETHODCALLTYPE set_OnClose(BSTR pRet/*[in]*/) = 0; // [74]
  virtual HRESULT STDMETHODCALLTYPE get_OnActivate(BSTR* pRet/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_OnActivate(BSTR pRet/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_OnDeactivate(BSTR* pRet/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_OnDeactivate(BSTR pRet/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_OnGotFocus(BSTR* pRet/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_OnGotFocus(BSTR pRet/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_OnLostFocus(BSTR* pRet/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_OnLostFocus(BSTR pRet/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_OnClick(BSTR* pRet/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_OnClick(BSTR pRet/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_OnDblClick(BSTR* pRet/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE set_OnDblClick(BSTR pRet/*[in]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseDown(BSTR* pRet/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseDown(BSTR pRet/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseMove(BSTR* pRet/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseMove(BSTR pRet/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_OnMouseUp(BSTR* pRet/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_OnMouseUp(BSTR pRet/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyDown(BSTR* pRet/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyDown(BSTR pRet/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyUp(BSTR* pRet/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyUp(BSTR pRet/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OnKeyPress(BSTR* pRet/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OnKeyPress(BSTR pRet/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_KeyPreview(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [368]
  virtual HRESULT STDMETHODCALLTYPE set_KeyPreview(TOLEBOOL pRet/*[in]*/) = 0; // [368]
  virtual HRESULT STDMETHODCALLTYPE get_OnError(BSTR* pRet/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE set_OnError(BSTR pRet/*[in]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_OnFilter(BSTR* pRet/*[out,retval]*/) = 0; // [375]
  virtual HRESULT STDMETHODCALLTYPE set_OnFilter(BSTR pRet/*[in]*/) = 0; // [375]
  virtual HRESULT STDMETHODCALLTYPE get_OnApplyFilter(BSTR* pRet/*[out,retval]*/) = 0; // [376]
  virtual HRESULT STDMETHODCALLTYPE set_OnApplyFilter(BSTR pRet/*[in]*/) = 0; // [376]
  virtual HRESULT STDMETHODCALLTYPE get_OnTimer(BSTR* pRet/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_OnTimer(BSTR pRet/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_TimerInterval(long* pRet/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_TimerInterval(long pRet/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Dirty(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [318]
  virtual HRESULT STDMETHODCALLTYPE set_Dirty(TOLEBOOL pRet/*[in]*/) = 0; // [318]
  virtual HRESULT STDMETHODCALLTYPE get_WindowWidth(short* pRet/*[out,retval]*/) = 0; // [319]
  virtual HRESULT STDMETHODCALLTYPE set_WindowWidth(short pRet/*[in]*/) = 0; // [319]
  virtual HRESULT STDMETHODCALLTYPE get_WindowHeight(short* pRet/*[out,retval]*/) = 0; // [320]
  virtual HRESULT STDMETHODCALLTYPE set_WindowHeight(short pRet/*[in]*/) = 0; // [320]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentView(short* pRet/*[out,retval]*/) = 0; // [321]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentView(short pRet/*[in]*/) = 0; // [321]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentSectionTop(short* pRet/*[out,retval]*/) = 0; // [323]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentSectionTop(short pRet/*[in]*/) = 0; // [323]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentSectionLeft(short* pRet/*[out,retval]*/) = 0; // [322]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentSectionLeft(short pRet/*[in]*/) = 0; // [322]
  virtual HRESULT STDMETHODCALLTYPE get_SelLeft(long* pRet/*[out,retval]*/) = 0; // [330]
  virtual HRESULT STDMETHODCALLTYPE set_SelLeft(long pRet/*[in]*/) = 0; // [330]
  virtual HRESULT STDMETHODCALLTYPE get_SelTop(long* pRet/*[out,retval]*/) = 0; // [331]
  virtual HRESULT STDMETHODCALLTYPE set_SelTop(long pRet/*[in]*/) = 0; // [331]
  virtual HRESULT STDMETHODCALLTYPE get_SelWidth(long* pRet/*[out,retval]*/) = 0; // [332]
  virtual HRESULT STDMETHODCALLTYPE set_SelWidth(long pRet/*[in]*/) = 0; // [332]
  virtual HRESULT STDMETHODCALLTYPE get_SelHeight(long* pRet/*[out,retval]*/) = 0; // [333]
  virtual HRESULT STDMETHODCALLTYPE set_SelHeight(long pRet/*[in]*/) = 0; // [333]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentRecord(long* pRet/*[out,retval]*/) = 0; // [334]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentRecord(long pRet/*[in]*/) = 0; // [334]
  virtual HRESULT STDMETHODCALLTYPE get_PictureData(TVariant* pRet/*[out,retval]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE set_PictureData(TVariantInParam pRet/*[in]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE get_InsideHeight(long* pRet/*[out,retval]*/) = 0; // [360]
  virtual HRESULT STDMETHODCALLTYPE set_InsideHeight(long pRet/*[in]*/) = 0; // [360]
  virtual HRESULT STDMETHODCALLTYPE get_InsideWidth(long* pRet/*[out,retval]*/) = 0; // [361]
  virtual HRESULT STDMETHODCALLTYPE set_InsideWidth(long pRet/*[in]*/) = 0; // [361]
  virtual HRESULT STDMETHODCALLTYPE get_PicturePalette(TVariant* pRet/*[out,retval]*/) = 0; // [356]
  virtual HRESULT STDMETHODCALLTYPE set_PicturePalette(TVariantInParam pRet/*[in]*/) = 0; // [356]
  virtual HRESULT STDMETHODCALLTYPE get_HasModule(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [385]
  virtual HRESULT STDMETHODCALLTYPE set_HasModule(TOLEBOOL pRet/*[in]*/) = 0; // [385]
  virtual HRESULT STDMETHODCALLTYPE get_acHiddenCurrentPage(long* pRet/*[out,retval]*/) = 0; // [406]
  virtual HRESULT STDMETHODCALLTYPE set_acHiddenCurrentPage(long pRet/*[in]*/) = 0; // [406]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_NewRecord(short* pRet/*[out,retval]*/) = 0; // [2147]
  virtual HRESULT STDMETHODCALLTYPE Undo(void) = 0; // [2145]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultControl(long ControlType/*[in]*/, 
                                                       Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2150]
  virtual HRESULT STDMETHODCALLTYPE get_Dynaset(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2085]
  virtual HRESULT STDMETHODCALLTYPE get_RecordsetClone(Dao_97::RecordsetPtr* pRet/*[out,retval]*/) = 0; // [2086]
  virtual HRESULT STDMETHODCALLTYPE get_Section(TVariantInParam var/*[in]*/, 
                                                Access_97::AccessSectionPtr* pRet/*[out,retval]*/) = 0; // [2088]
  virtual HRESULT STDMETHODCALLTYPE get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/) = 0; // [2089]
  virtual HRESULT STDMETHODCALLTYPE get_Module(Access_97::ModulePtr* pRet/*[out,retval]*/) = 0; // [2090]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2092]
  virtual HRESULT STDMETHODCALLTYPE Recalc(void) = 0; // [2017]
  virtual HRESULT STDMETHODCALLTYPE Requery(void) = 0; // [2018]
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0; // [-550]
  virtual HRESULT STDMETHODCALLTYPE Repaint(void) = 0; // [2020]
  virtual HRESULT STDMETHODCALLTYPE GoToPage(long PageNumber/*[in]*/, long Right/*[in,def,opt]*/, 
                                             long Down/*[in,def,opt]*/) = 0; // [2021]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [2022]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_FormName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FormName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_RecordSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_RecordSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Filter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Filter((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FilterOn(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FilterOn((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OrderBy(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OrderBy((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_OrderByOn(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_OrderByOn((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AllowFilters(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AllowFilters((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Caption((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DefaultView(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DefaultView((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ViewsAllowed(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ViewsAllowed((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AllowEditing(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AllowEditing((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_DefaultEditing(void)
  {
    short pRet;
    OLECHECK(this->get_DefaultEditing((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AllowEdits(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AllowEdits((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AllowDeletions(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AllowDeletions((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AllowAdditions(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AllowAdditions((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_DataEntry(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_DataEntry((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_AllowUpdating(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_AllowUpdating((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_RecordsetType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_RecordsetType((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_RecordLocks(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_RecordLocks((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_ScrollBars(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_ScrollBars((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_RecordSelectors(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_RecordSelectors((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_NavigationButtons(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_NavigationButtons((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_DividingLines(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_DividingLines((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoResize(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoResize((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_AutoCenter(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_AutoCenter((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_PopUp(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_PopUp((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Modal(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Modal((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_BorderStyle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ControlBox(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ControlBox((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_MinButton(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_MinButton((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_MaxButton(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_MaxButton((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_MinMaxButtons(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_MinMaxButtons((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_CloseButton(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_CloseButton((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_WhatsThisButton(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_WhatsThisButton((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Picture(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Picture((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureSizeMode(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureSizeMode((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureAlignment(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureAlignment((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_PictureTiling(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_PictureTiling((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_Cycle(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_Cycle((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_MenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_MenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Toolbar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Toolbar((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ShortcutMenu(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ShortcutMenu((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_GridX(void)
  {
    short pRet;
    OLECHECK(this->get_GridX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_GridY(void)
  {
    short pRet;
    OLECHECK(this->get_GridY((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_LayoutForPrint(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_LayoutForPrint((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FastLaserPrinting(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FastLaserPrinting((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_HelpFile(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_HelpFile((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  short __fastcall get_RowHeight(void)
  {
    short pRet;
    OLECHECK(this->get_RowHeight((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_DatasheetFontName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_DatasheetFontName((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_DatasheetFontHeight(void)
  {
    short pRet;
    OLECHECK(this->get_DatasheetFontHeight((short*)&pRet));
    return pRet;
  }

  short __fastcall get_DatasheetFontWeight(void)
  {
    short pRet;
    OLECHECK(this->get_DatasheetFontWeight((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_DatasheetFontItalic(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_DatasheetFontItalic((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_DatasheetFontUnderline(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_DatasheetFontUnderline((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TabularCharSet(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TabularCharSet((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DatasheetGridlinesBehavior(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DatasheetGridlinesBehavior((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_DatasheetGridlinesColor(void)
  {
    long pRet;
    OLECHECK(this->get_DatasheetGridlinesColor((long*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DatasheetCellsEffect(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DatasheetCellsEffect((unsigned_char*)&pRet));
    return pRet;
  }

  long __fastcall get_DatasheetForeColor(void)
  {
    long pRet;
    OLECHECK(this->get_DatasheetForeColor((long*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_ShowGrid(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_ShowGrid((TOLEBOOL*)&pRet));
    return pRet;
  }

  long __fastcall get_DatasheetBackColor(void)
  {
    long pRet;
    OLECHECK(this->get_DatasheetBackColor((long*)&pRet));
    return pRet;
  }

  long __fastcall get_Hwnd(void)
  {
    long pRet;
    OLECHECK(this->get_Hwnd((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Count(void)
  {
    short pRet;
    OLECHECK(this->get_Count((short*)&pRet));
    return pRet;
  }

  long __fastcall get_Page(void)
  {
    long pRet;
    OLECHECK(this->get_Page((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Pages(void)
  {
    short pRet;
    OLECHECK(this->get_Pages((short*)&pRet));
    return pRet;
  }

  long __fastcall get_LogicalPageWidth(void)
  {
    long pRet;
    OLECHECK(this->get_LogicalPageWidth((long*)&pRet));
    return pRet;
  }

  long __fastcall get_LogicalPageHeight(void)
  {
    long pRet;
    OLECHECK(this->get_LogicalPageHeight((long*)&pRet));
    return pRet;
  }

  long __fastcall get_ZoomControl(void)
  {
    long pRet;
    OLECHECK(this->get_ZoomControl((long*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Painting(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Painting((TOLEBOOL*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PrtMip(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PrtMip((TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PrtDevMode(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PrtDevMode((TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PrtDevNames(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PrtDevNames((TVariant*)&pRet));
    return pRet;
  }

  short __fastcall get_FrozenColumns(void)
  {
    short pRet;
    OLECHECK(this->get_FrozenColumns((short*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_Bookmark(void)
  {
    TVariant pRet;
    OLECHECK(this->get_Bookmark((TVariant*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_TabularFamily(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_TabularFamily((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_PaletteSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_PaletteSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PaintPalette(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PaintPalette((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMenu(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMenu((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_OpenArgs(void)
  {
    TVariant pRet;
    OLECHECK(this->get_OpenArgs((TVariant*)&pRet));
    return pRet;
  }

  short __fastcall get_ConnectSynch(void)
  {
    short pRet;
    OLECHECK(this->get_ConnectSynch((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnCurrent(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnCurrent((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnInsert(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnInsert((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeInsert(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeInsert((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterInsert(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterInsert((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterUpdate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDelete(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDelete((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_BeforeDelConfirm(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_BeforeDelConfirm((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_AfterDelConfirm(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_AfterDelConfirm((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnOpen(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnOpen((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLoad(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLoad((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnResize(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnResize((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnUnload(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnUnload((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClose(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClose((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnActivate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnActivate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDeactivate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDeactivate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnGotFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnLostFocus(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDblClick(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseMove(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMouseUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyDown(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyUp(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnKeyPress(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_KeyPreview(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_KeyPreview((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnError(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnError((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnFilter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnFilter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnApplyFilter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnApplyFilter((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnTimer(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnTimer((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_TimerInterval(void)
  {
    long pRet;
    OLECHECK(this->get_TimerInterval((long*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Dirty(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Dirty((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_WindowWidth(void)
  {
    short pRet;
    OLECHECK(this->get_WindowWidth((short*)&pRet));
    return pRet;
  }

  short __fastcall get_WindowHeight(void)
  {
    short pRet;
    OLECHECK(this->get_WindowHeight((short*)&pRet));
    return pRet;
  }

  short __fastcall get_CurrentView(void)
  {
    short pRet;
    OLECHECK(this->get_CurrentView((short*)&pRet));
    return pRet;
  }

  short __fastcall get_CurrentSectionTop(void)
  {
    short pRet;
    OLECHECK(this->get_CurrentSectionTop((short*)&pRet));
    return pRet;
  }

  short __fastcall get_CurrentSectionLeft(void)
  {
    short pRet;
    OLECHECK(this->get_CurrentSectionLeft((short*)&pRet));
    return pRet;
  }

  long __fastcall get_SelLeft(void)
  {
    long pRet;
    OLECHECK(this->get_SelLeft((long*)&pRet));
    return pRet;
  }

  long __fastcall get_SelTop(void)
  {
    long pRet;
    OLECHECK(this->get_SelTop((long*)&pRet));
    return pRet;
  }

  long __fastcall get_SelWidth(void)
  {
    long pRet;
    OLECHECK(this->get_SelWidth((long*)&pRet));
    return pRet;
  }

  long __fastcall get_SelHeight(void)
  {
    long pRet;
    OLECHECK(this->get_SelHeight((long*)&pRet));
    return pRet;
  }

  long __fastcall get_CurrentRecord(void)
  {
    long pRet;
    OLECHECK(this->get_CurrentRecord((long*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PictureData(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PictureData((TVariant*)&pRet));
    return pRet;
  }

  long __fastcall get_InsideHeight(void)
  {
    long pRet;
    OLECHECK(this->get_InsideHeight((long*)&pRet));
    return pRet;
  }

  long __fastcall get_InsideWidth(void)
  {
    long pRet;
    OLECHECK(this->get_InsideWidth((long*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PicturePalette(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PicturePalette((TVariant*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HasModule(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HasModule((TOLEBOOL*)&pRet));
    return pRet;
  }

  long __fastcall get_acHiddenCurrentPage(void)
  {
    long pRet;
    OLECHECK(this->get_acHiddenCurrentPage((long*)&pRet));
    return pRet;
  }

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  short __fastcall get_NewRecord(void)
  {
    short pRet;
    OLECHECK(this->get_NewRecord((short*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall get_ActiveControl(void)
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->get_ActiveControl((Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall get_DefaultControl(long ControlType/*[in]*/)
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->get_DefaultControl(ControlType, (Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Dynaset(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Dynaset((LPDISPATCH*)&pRet));
    return pRet;
  }

  Dao_97::RecordsetPtr __fastcall get_RecordsetClone(void)
  {
    Dao_97::RecordsetPtr pRet;
    OLECHECK(this->get_RecordsetClone((Dao_97::RecordsetPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessSectionPtr __fastcall get_Section(TVariantInParam var/*[in]*/)
  {
    Access_97::AccessSectionPtr pRet;
    OLECHECK(this->get_Section(var, (Access_97::AccessSectionPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessFormPtr __fastcall get_Form(void)
  {
    Access_97::AccessFormPtr pRet;
    OLECHECK(this->get_Form((Access_97::AccessFormPtr*)&pRet));
    return pRet;
  }

  Access_97::ModulePtr __fastcall get_Module(void)
  {
    Access_97::ModulePtr pRet;
    OLECHECK(this->get_Module((Access_97::ModulePtr*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall get_ConnectControl(void)
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->get_ConnectControl((Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  Access_97::Controls_Ptr __fastcall get_Controls(void)
  {
    Access_97::Controls_Ptr pRet;
    OLECHECK(this->get_Controls((Access_97::Controls_Ptr*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }


  __property   BSTR            FormName = {read = get_FormName, write = set_FormName};
  __property   BSTR            RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            Filter = {read = get_Filter, write = set_Filter};
  __property   TOLEBOOL        FilterOn = {read = get_FilterOn, write = set_FilterOn};
  __property   BSTR            OrderBy = {read = get_OrderBy, write = set_OrderBy};
  __property   TOLEBOOL        OrderByOn = {read = get_OrderByOn, write = set_OrderByOn};
  __property   TOLEBOOL        AllowFilters = {read = get_AllowFilters, write = set_AllowFilters};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   unsigned_char   DefaultView = {read = get_DefaultView, write = set_DefaultView};
  __property   unsigned_char   ViewsAllowed = {read = get_ViewsAllowed, write = set_ViewsAllowed};
  __property   TOLEBOOL        AllowEditing = {read = get_AllowEditing, write = set_AllowEditing};
  __property   short           DefaultEditing = {read = get_DefaultEditing, write = set_DefaultEditing};
  __property   TOLEBOOL        AllowEdits = {read = get_AllowEdits, write = set_AllowEdits};
  __property   TOLEBOOL        AllowDeletions = {read = get_AllowDeletions, write = set_AllowDeletions};
  __property   TOLEBOOL        AllowAdditions = {read = get_AllowAdditions, write = set_AllowAdditions};
  __property   TOLEBOOL        DataEntry = {read = get_DataEntry, write = set_DataEntry};
  __property   unsigned_char   AllowUpdating = {read = get_AllowUpdating, write = set_AllowUpdating};
  __property   unsigned_char   RecordsetType = {read = get_RecordsetType, write = set_RecordsetType};
  __property   unsigned_char   RecordLocks = {read = get_RecordLocks, write = set_RecordLocks};
  __property   unsigned_char   ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   TOLEBOOL        RecordSelectors = {read = get_RecordSelectors, write = set_RecordSelectors};
  __property   TOLEBOOL        NavigationButtons = {read = get_NavigationButtons, write = set_NavigationButtons};
  __property   TOLEBOOL        DividingLines = {read = get_DividingLines, write = set_DividingLines};
  __property   TOLEBOOL        AutoResize = {read = get_AutoResize, write = set_AutoResize};
  __property   TOLEBOOL        AutoCenter = {read = get_AutoCenter, write = set_AutoCenter};
  __property   TOLEBOOL        PopUp = {read = get_PopUp, write = set_PopUp};
  __property   TOLEBOOL        Modal = {read = get_Modal, write = set_Modal};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        ControlBox = {read = get_ControlBox, write = set_ControlBox};
  __property   TOLEBOOL        MinButton = {read = get_MinButton, write = set_MinButton};
  __property   TOLEBOOL        MaxButton = {read = get_MaxButton, write = set_MaxButton};
  __property   unsigned_char   MinMaxButtons = {read = get_MinMaxButtons, write = set_MinMaxButtons};
  __property   TOLEBOOL        CloseButton = {read = get_CloseButton, write = set_CloseButton};
  __property   TOLEBOOL        WhatsThisButton = {read = get_WhatsThisButton, write = set_WhatsThisButton};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   unsigned_char   PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   unsigned_char   PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   TOLEBOOL        PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   unsigned_char   Cycle = {read = get_Cycle, write = set_Cycle};
  __property   BSTR            MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   BSTR            Toolbar = {read = get_Toolbar, write = set_Toolbar};
  __property   TOLEBOOL        ShortcutMenu = {read = get_ShortcutMenu, write = set_ShortcutMenu};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   short           GridX = {read = get_GridX, write = set_GridX};
  __property   short           GridY = {read = get_GridY, write = set_GridY};
  __property   TOLEBOOL        LayoutForPrint = {read = get_LayoutForPrint, write = set_LayoutForPrint};
  __property   TOLEBOOL        FastLaserPrinting = {read = get_FastLaserPrinting, write = set_FastLaserPrinting};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           RowHeight = {read = get_RowHeight, write = set_RowHeight};
  __property   BSTR            DatasheetFontName = {read = get_DatasheetFontName, write = set_DatasheetFontName};
  __property   short           DatasheetFontHeight = {read = get_DatasheetFontHeight, write = set_DatasheetFontHeight};
  __property   short           DatasheetFontWeight = {read = get_DatasheetFontWeight, write = set_DatasheetFontWeight};
  __property   TOLEBOOL        DatasheetFontItalic = {read = get_DatasheetFontItalic, write = set_DatasheetFontItalic};
  __property   TOLEBOOL        DatasheetFontUnderline = {read = get_DatasheetFontUnderline, write = set_DatasheetFontUnderline};
  __property   unsigned_char   TabularCharSet = {read = get_TabularCharSet, write = set_TabularCharSet};
  __property   unsigned_char   DatasheetGridlinesBehavior = {read = get_DatasheetGridlinesBehavior, write = set_DatasheetGridlinesBehavior};
  __property   long            DatasheetGridlinesColor = {read = get_DatasheetGridlinesColor, write = set_DatasheetGridlinesColor};
  __property   unsigned_char   DatasheetCellsEffect = {read = get_DatasheetCellsEffect, write = set_DatasheetCellsEffect};
  __property   long            DatasheetForeColor = {read = get_DatasheetForeColor, write = set_DatasheetForeColor};
  __property   TOLEBOOL        ShowGrid = {read = get_ShowGrid, write = set_ShowGrid};
  __property   long            DatasheetBackColor = {read = get_DatasheetBackColor, write = set_DatasheetBackColor};
  __property   long            Hwnd = {read = get_Hwnd, write = set_Hwnd};
  __property   short           Count = {read = get_Count, write = set_Count};
  __property   long            Page = {read = get_Page, write = set_Page};
  __property   short           Pages = {read = get_Pages, write = set_Pages};
  __property   long            LogicalPageWidth = {read = get_LogicalPageWidth, write = set_LogicalPageWidth};
  __property   long            LogicalPageHeight = {read = get_LogicalPageHeight, write = set_LogicalPageHeight};
  __property   long            ZoomControl = {read = get_ZoomControl, write = set_ZoomControl};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        Painting = {read = get_Painting, write = set_Painting};
  __property   short           FrozenColumns = {read = get_FrozenColumns, write = set_FrozenColumns};
  __property   unsigned_char   TabularFamily = {read = get_TabularFamily, write = set_TabularFamily};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            PaletteSource = {read = get_PaletteSource, write = set_PaletteSource};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            OnMenu = {read = get_OnMenu, write = set_OnMenu};
  __property   short           ConnectSynch = {read = get_ConnectSynch, write = set_ConnectSynch};
  __property   BSTR            OnCurrent = {read = get_OnCurrent, write = set_OnCurrent};
  __property   BSTR            OnInsert = {read = get_OnInsert, write = set_OnInsert};
  __property   BSTR            BeforeInsert = {read = get_BeforeInsert, write = set_BeforeInsert};
  __property   BSTR            AfterInsert = {read = get_AfterInsert, write = set_AfterInsert};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnDelete = {read = get_OnDelete, write = set_OnDelete};
  __property   BSTR            BeforeDelConfirm = {read = get_BeforeDelConfirm, write = set_BeforeDelConfirm};
  __property   BSTR            AfterDelConfirm = {read = get_AfterDelConfirm, write = set_AfterDelConfirm};
  __property   BSTR            OnOpen = {read = get_OnOpen, write = set_OnOpen};
  __property   BSTR            OnLoad = {read = get_OnLoad, write = set_OnLoad};
  __property   BSTR            OnResize = {read = get_OnResize, write = set_OnResize};
  __property   BSTR            OnUnload = {read = get_OnUnload, write = set_OnUnload};
  __property   BSTR            OnClose = {read = get_OnClose, write = set_OnClose};
  __property   BSTR            OnActivate = {read = get_OnActivate, write = set_OnActivate};
  __property   BSTR            OnDeactivate = {read = get_OnDeactivate, write = set_OnDeactivate};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
  __property   TOLEBOOL        KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   BSTR            OnError = {read = get_OnError, write = set_OnError};
  __property   BSTR            OnFilter = {read = get_OnFilter, write = set_OnFilter};
  __property   BSTR            OnApplyFilter = {read = get_OnApplyFilter, write = set_OnApplyFilter};
  __property   BSTR            OnTimer = {read = get_OnTimer, write = set_OnTimer};
  __property   long            TimerInterval = {read = get_TimerInterval, write = set_TimerInterval};
  __property   TOLEBOOL        Dirty = {read = get_Dirty, write = set_Dirty};
  __property   short           WindowWidth = {read = get_WindowWidth, write = set_WindowWidth};
  __property   short           WindowHeight = {read = get_WindowHeight, write = set_WindowHeight};
  __property   short           CurrentView = {read = get_CurrentView, write = set_CurrentView};
  __property   short           CurrentSectionTop = {read = get_CurrentSectionTop, write = set_CurrentSectionTop};
  __property   short           CurrentSectionLeft = {read = get_CurrentSectionLeft, write = set_CurrentSectionLeft};
  __property   long            SelLeft = {read = get_SelLeft, write = set_SelLeft};
  __property   long            SelTop = {read = get_SelTop, write = set_SelTop};
  __property   long            SelWidth = {read = get_SelWidth, write = set_SelWidth};
  __property   long            SelHeight = {read = get_SelHeight, write = set_SelHeight};
  __property   long            CurrentRecord = {read = get_CurrentRecord, write = set_CurrentRecord};
  __property   long            InsideHeight = {read = get_InsideHeight, write = set_InsideHeight};
  __property   long            InsideWidth = {read = get_InsideWidth, write = set_InsideWidth};
  __property   TOLEBOOL        HasModule = {read = get_HasModule, write = set_HasModule};
  __property   long            acHiddenCurrentPage = {read = get_acHiddenCurrentPage, write = set_acHiddenCurrentPage};
  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   short           NewRecord = {read = get_NewRecord};
  __property   Access_97::AccessControlPtr ActiveControl = {read = get_ActiveControl};
  __property   LPDISPATCH      Dynaset = {read = get_Dynaset};
  __property   Dao_97::RecordsetPtr RecordsetClone = {read = get_RecordsetClone};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::ModulePtr Module = {read = get_Module};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::AccessControlPtr ConnectControl = {read = get_ConnectControl};
  __property   Access_97::Controls_Ptr Controls = {read = get_Controls};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _FormEvents
// Flags:     (16) Hidden
// GUID:      {331FDCFB-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _FormEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Load(void) = 0; // [2067]
  virtual HRESULT STDMETHODCALLTYPE Current(void) = 0; // [2058]
  virtual HRESULT STDMETHODCALLTYPE BeforeInsert(short* Cancel/*[out]*/) = 0; // [2059]
  virtual HRESULT STDMETHODCALLTYPE AfterInsert(void) = 0; // [2060]
  virtual HRESULT STDMETHODCALLTYPE BeforeUpdate(short* Cancel/*[out]*/) = 0; // [2061]
  virtual HRESULT STDMETHODCALLTYPE AfterUpdate(void) = 0; // [2062]
  virtual HRESULT STDMETHODCALLTYPE Delete(short* Cancel/*[out]*/) = 0; // [2063]
  virtual HRESULT STDMETHODCALLTYPE BeforeDelConfirm(short* Cancel/*[out]*/, 
                                                     short* Response/*[out]*/) = 0; // [2064]
  virtual HRESULT STDMETHODCALLTYPE AfterDelConfirm(short* Status/*[in,out]*/) = 0; // [2065]
  virtual HRESULT STDMETHODCALLTYPE Open(short* Cancel/*[out]*/) = 0; // [2066]
  virtual HRESULT STDMETHODCALLTYPE Resize(void) = 0; // [2068]
  virtual HRESULT STDMETHODCALLTYPE Unload(short* Cancel/*[out]*/) = 0; // [2069]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [2070]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2071]
  virtual HRESULT STDMETHODCALLTYPE Deactivate(void) = 0; // [2072]
  virtual HRESULT STDMETHODCALLTYPE GotFocus(void) = 0; // [2073]
  virtual HRESULT STDMETHODCALLTYPE LostFocus(void) = 0; // [2074]
  virtual HRESULT STDMETHODCALLTYPE _Click(void) = 0; // [-600]
  virtual HRESULT STDMETHODCALLTYPE DblClick(short* Cancel/*[out]*/) = 0; // [-601]
  virtual HRESULT STDMETHODCALLTYPE MouseDown(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-605]
  virtual HRESULT STDMETHODCALLTYPE MouseMove(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                              float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-606]
  virtual HRESULT STDMETHODCALLTYPE MouseUp(short* Button/*[in,out]*/, short* Shift/*[in,out]*/, 
                                            float* X/*[in,out]*/, float* Y/*[in,out]*/) = 0; // [-607]
  virtual HRESULT STDMETHODCALLTYPE KeyDown(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-602]
  virtual HRESULT STDMETHODCALLTYPE KeyPress(short* KeyAscii/*[in,out]*/) = 0; // [-603]
  virtual HRESULT STDMETHODCALLTYPE KeyUp(short* KeyCode/*[in,out]*/, short* Shift/*[in,out]*/) = 0; // [-604]
  virtual HRESULT STDMETHODCALLTYPE Error(short* DataErr/*[in,out]*/, short* Response/*[out]*/) = 0; // [2083]
  virtual HRESULT STDMETHODCALLTYPE Timer(void) = 0; // [2084]
  virtual HRESULT STDMETHODCALLTYPE Filter(short* Cancel/*[out]*/, short* FilterType/*[in,out]*/) = 0; // [2155]
  virtual HRESULT STDMETHODCALLTYPE ApplyFilter(short* Cancel/*[out]*/, short* ApplyType/*[in,out]*/) = 0; // [2156]
};

// *********************************************************************//
// Interface: Forms_
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1BB0E80-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
interface Forms_  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, 
                                             Access_97::AccessFormPtr* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pRet/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::AccessFormPtr __fastcall get_Item(TVariantInParam Index/*[in]*/)
  {
    Access_97::AccessFormPtr pRet;
    OLECHECK(this->get_Item(Index, (Access_97::AccessFormPtr*)&pRet));
    return pRet;
  }

  long __fastcall get_Count(void)
  {
    long pRet;
    OLECHECK(this->get_Count((long*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Report
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3E8B6B00-91FF-101B-AF4E-00AA003F0F07}
// *********************************************************************//
interface _Report  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_FormName(BSTR* pRet/*[out,retval]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE set_FormName(BSTR pRet/*[in]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE get_RecordSource(BSTR* pRet/*[out,retval]*/) = 0; // [153]
  virtual HRESULT STDMETHODCALLTYPE set_RecordSource(BSTR pRet/*[in]*/) = 0; // [153]
  virtual HRESULT STDMETHODCALLTYPE get_Filter(BSTR* pRet/*[out,retval]*/) = 0; // [271]
  virtual HRESULT STDMETHODCALLTYPE set_Filter(BSTR pRet/*[in]*/) = 0; // [271]
  virtual HRESULT STDMETHODCALLTYPE get_FilterOn(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [374]
  virtual HRESULT STDMETHODCALLTYPE set_FilterOn(TOLEBOOL pRet/*[in]*/) = 0; // [374]
  virtual HRESULT STDMETHODCALLTYPE get_OrderBy(BSTR* pRet/*[out,retval]*/) = 0; // [373]
  virtual HRESULT STDMETHODCALLTYPE set_OrderBy(BSTR pRet/*[in]*/) = 0; // [373]
  virtual HRESULT STDMETHODCALLTYPE get_OrderByOn(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [379]
  virtual HRESULT STDMETHODCALLTYPE set_OrderByOn(TOLEBOOL pRet/*[in]*/) = 0; // [379]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pRet/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pRet/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_RecordLocks(unsigned_char* pRet/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_RecordLocks(unsigned_char pRet/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_PageHeader(unsigned_char* pRet/*[out,retval]*/) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE set_PageHeader(unsigned_char pRet/*[in]*/) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE get_PageFooter(unsigned_char* pRet/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE set_PageFooter(unsigned_char pRet/*[in]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE get_DateGrouping(unsigned_char* pRet/*[out,retval]*/) = 0; // [314]
  virtual HRESULT STDMETHODCALLTYPE set_DateGrouping(unsigned_char pRet/*[in]*/) = 0; // [314]
  virtual HRESULT STDMETHODCALLTYPE get_GrpKeepTogether(unsigned_char* pRet/*[out,retval]*/) = 0; // [315]
  virtual HRESULT STDMETHODCALLTYPE set_GrpKeepTogether(unsigned_char pRet/*[in]*/) = 0; // [315]
  virtual HRESULT STDMETHODCALLTYPE get_MinButton(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [92]
  virtual HRESULT STDMETHODCALLTYPE set_MinButton(TOLEBOOL pRet/*[in]*/) = 0; // [92]
  virtual HRESULT STDMETHODCALLTYPE get_MaxButton(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [91]
  virtual HRESULT STDMETHODCALLTYPE set_MaxButton(TOLEBOOL pRet/*[in]*/) = 0; // [91]
  virtual HRESULT STDMETHODCALLTYPE get_Width(short* pRet/*[out,retval]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE set_Width(short pRet/*[in]*/) = 0; // [147]
  virtual HRESULT STDMETHODCALLTYPE get_Picture(BSTR* pRet/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Picture(BSTR pRet/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_PictureType(unsigned_char* pRet/*[out,retval]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE set_PictureType(unsigned_char pRet/*[in]*/) = 0; // [384]
  virtual HRESULT STDMETHODCALLTYPE get_PictureSizeMode(unsigned_char* pRet/*[out,retval]*/) = 0; // [357]
  virtual HRESULT STDMETHODCALLTYPE set_PictureSizeMode(unsigned_char pRet/*[in]*/) = 0; // [357]
  virtual HRESULT STDMETHODCALLTYPE get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/) = 0; // [354]
  virtual HRESULT STDMETHODCALLTYPE set_PictureAlignment(unsigned_char pRet/*[in]*/) = 0; // [354]
  virtual HRESULT STDMETHODCALLTYPE get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [358]
  virtual HRESULT STDMETHODCALLTYPE set_PictureTiling(TOLEBOOL pRet/*[in]*/) = 0; // [358]
  virtual HRESULT STDMETHODCALLTYPE get_PicturePages(unsigned_char* pRet/*[out,retval]*/) = 0; // [355]
  virtual HRESULT STDMETHODCALLTYPE set_PicturePages(unsigned_char pRet/*[in]*/) = 0; // [355]
  virtual HRESULT STDMETHODCALLTYPE get_MenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [261]
  virtual HRESULT STDMETHODCALLTYPE set_MenuBar(BSTR pRet/*[in]*/) = 0; // [261]
  virtual HRESULT STDMETHODCALLTYPE get_Toolbar(BSTR* pRet/*[out,retval]*/) = 0; // [396]
  virtual HRESULT STDMETHODCALLTYPE set_Toolbar(BSTR pRet/*[in]*/) = 0; // [396]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [336]
  virtual HRESULT STDMETHODCALLTYPE get_GridX(short* pRet/*[out,retval]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE set_GridX(short pRet/*[in]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE get_GridY(short* pRet/*[out,retval]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE set_GridY(short pRet/*[in]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE get_LayoutForPrint(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [140]
  virtual HRESULT STDMETHODCALLTYPE set_LayoutForPrint(TOLEBOOL pRet/*[in]*/) = 0; // [140]
  virtual HRESULT STDMETHODCALLTYPE get_FastLaserPrinting(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [141]
  virtual HRESULT STDMETHODCALLTYPE set_FastLaserPrinting(TOLEBOOL pRet/*[in]*/) = 0; // [141]
  virtual HRESULT STDMETHODCALLTYPE get_HelpFile(BSTR* pRet/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE set_HelpFile(BSTR pRet/*[in]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(long* pRet/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(long pRet/*[in]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE get_Hwnd(long* pRet/*[out,retval]*/) = 0; // [191]
  virtual HRESULT STDMETHODCALLTYPE set_Hwnd(long pRet/*[in]*/) = 0; // [191]
  virtual HRESULT STDMETHODCALLTYPE get_Count(short* pRet/*[out,retval]*/) = 0; // [194]
  virtual HRESULT STDMETHODCALLTYPE set_Count(short pRet/*[in]*/) = 0; // [194]
  virtual HRESULT STDMETHODCALLTYPE get_Page(long* pRet/*[out,retval]*/) = 0; // [195]
  virtual HRESULT STDMETHODCALLTYPE set_Page(long pRet/*[in]*/) = 0; // [195]
  virtual HRESULT STDMETHODCALLTYPE get_Pages(short* pRet/*[out,retval]*/) = 0; // [196]
  virtual HRESULT STDMETHODCALLTYPE set_Pages(short pRet/*[in]*/) = 0; // [196]
  virtual HRESULT STDMETHODCALLTYPE get_LogicalPageWidth(long* pRet/*[out,retval]*/) = 0; // [197]
  virtual HRESULT STDMETHODCALLTYPE set_LogicalPageWidth(long pRet/*[in]*/) = 0; // [197]
  virtual HRESULT STDMETHODCALLTYPE get_LogicalPageHeight(long* pRet/*[out,retval]*/) = 0; // [198]
  virtual HRESULT STDMETHODCALLTYPE set_LogicalPageHeight(long pRet/*[in]*/) = 0; // [198]
  virtual HRESULT STDMETHODCALLTYPE get_ZoomControl(long* pRet/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE set_ZoomControl(long pRet/*[in]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE get_HasData(long* pRet/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_HasData(long pRet/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* pRet/*[out,retval]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE set_Left(long pRet/*[in]*/) = 0; // [54]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* pRet/*[out,retval]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE set_Top(long pRet/*[in]*/) = 0; // [138]
  virtual HRESULT STDMETHODCALLTYPE get_Height(long* pRet/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_Height(long pRet/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE get_PrintSection(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE set_PrintSection(TOLEBOOL pRet/*[in]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE get_NextRecord(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE set_NextRecord(TOLEBOOL pRet/*[in]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE get_MoveLayout(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE set_MoveLayout(TOLEBOOL pRet/*[in]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE get_FormatCount(short* pRet/*[out,retval]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE set_FormatCount(short pRet/*[in]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE get_PrintCount(short* pRet/*[out,retval]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE set_PrintCount(short pRet/*[in]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pRet/*[in]*/) = 0; // [145]
  virtual HRESULT STDMETHODCALLTYPE get_Painting(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [264]
  virtual HRESULT STDMETHODCALLTYPE set_Painting(TOLEBOOL pRet/*[in]*/) = 0; // [264]
  virtual HRESULT STDMETHODCALLTYPE get_PrtMip(TVariant* pRet/*[out,retval]*/) = 0; // [188]
  virtual HRESULT STDMETHODCALLTYPE set_PrtMip(TVariantInParam pRet/*[in]*/) = 0; // [188]
  virtual HRESULT STDMETHODCALLTYPE get_PrtDevMode(TVariant* pRet/*[out,retval]*/) = 0; // [189]
  virtual HRESULT STDMETHODCALLTYPE set_PrtDevMode(TVariantInParam pRet/*[in]*/) = 0; // [189]
  virtual HRESULT STDMETHODCALLTYPE get_PrtDevNames(TVariant* pRet/*[out,retval]*/) = 0; // [190]
  virtual HRESULT STDMETHODCALLTYPE set_PrtDevNames(TVariantInParam pRet/*[in]*/) = 0; // [190]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(long* pRet/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(long pRet/*[in]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentX(float* pRet/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentX(float pRet/*[in]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentY(float* pRet/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentY(float pRet/*[in]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_ScaleHeight(float* pRet/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE set_ScaleHeight(float pRet/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_ScaleLeft(float* pRet/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE set_ScaleLeft(float pRet/*[in]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_ScaleMode(short* pRet/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE set_ScaleMode(short pRet/*[in]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE get_ScaleTop(float* pRet/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE set_ScaleTop(float pRet/*[in]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE get_ScaleWidth(float* pRet/*[out,retval]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE set_ScaleWidth(float pRet/*[in]*/) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(short* pRet/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(short pRet/*[in]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(short* pRet/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(short pRet/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* pRet/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR pRet/*[in]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(short* pRet/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(short pRet/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_FontUnderline(short* pRet/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE set_FontUnderline(short pRet/*[in]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE get_DrawMode(short* pRet/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE set_DrawMode(short pRet/*[in]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE get_DrawStyle(short* pRet/*[out,retval]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE set_DrawStyle(short pRet/*[in]*/) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE get_DrawWidth(short* pRet/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE set_DrawWidth(short pRet/*[in]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_FillColor(long* pRet/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE set_FillColor(long pRet/*[in]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE get_FillStyle(short* pRet/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE set_FillStyle(short pRet/*[in]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pRet/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pRet/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_PaletteSource(BSTR* pRet/*[out,retval]*/) = 0; // [95]
  virtual HRESULT STDMETHODCALLTYPE set_PaletteSource(BSTR pRet/*[in]*/) = 0; // [95]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pRet/*[out,retval]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pRet/*[in]*/) = 0; // [297]
  virtual HRESULT STDMETHODCALLTYPE get_PaintPalette(TVariant* pRet/*[out,retval]*/) = 0; // [97]
  virtual HRESULT STDMETHODCALLTYPE set_PaintPalette(TVariantInParam pRet/*[in]*/) = 0; // [97]
  virtual HRESULT STDMETHODCALLTYPE get_OnMenu(BSTR* pRet/*[out,retval]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE set_OnMenu(BSTR pRet/*[in]*/) = 0; // [60]
  virtual HRESULT STDMETHODCALLTYPE get_OnOpen(BSTR* pRet/*[out,retval]*/) = 0; // [73]
  virtual HRESULT STDMETHODCALLTYPE set_OnOpen(BSTR pRet/*[in]*/) = 0; // [73]
  virtual HRESULT STDMETHODCALLTYPE get_OnClose(BSTR* pRet/*[out,retval]*/) = 0; // [74]
  virtual HRESULT STDMETHODCALLTYPE set_OnClose(BSTR pRet/*[in]*/) = 0; // [74]
  virtual HRESULT STDMETHODCALLTYPE get_OnActivate(BSTR* pRet/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_OnActivate(BSTR pRet/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_OnDeactivate(BSTR* pRet/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_OnDeactivate(BSTR pRet/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_OnNoData(BSTR* pRet/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE set_OnNoData(BSTR pRet/*[in]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_OnPage(BSTR* pRet/*[out,retval]*/) = 0; // [79]
  virtual HRESULT STDMETHODCALLTYPE set_OnPage(BSTR pRet/*[in]*/) = 0; // [79]
  virtual HRESULT STDMETHODCALLTYPE get_OnError(BSTR* pRet/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE set_OnError(BSTR pRet/*[in]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_Dirty(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [318]
  virtual HRESULT STDMETHODCALLTYPE set_Dirty(TOLEBOOL pRet/*[in]*/) = 0; // [318]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentRecord(long* pRet/*[out,retval]*/) = 0; // [334]
  virtual HRESULT STDMETHODCALLTYPE set_CurrentRecord(long pRet/*[in]*/) = 0; // [334]
  virtual HRESULT STDMETHODCALLTYPE get_PictureData(TVariant* pRet/*[out,retval]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE set_PictureData(TVariantInParam pRet/*[in]*/) = 0; // [187]
  virtual HRESULT STDMETHODCALLTYPE get_PicturePalette(TVariant* pRet/*[out,retval]*/) = 0; // [356]
  virtual HRESULT STDMETHODCALLTYPE set_PicturePalette(TVariantInParam pRet/*[in]*/) = 0; // [356]
  virtual HRESULT STDMETHODCALLTYPE get_HasModule(TOLEBOOL* pRet/*[out,retval]*/) = 0; // [385]
  virtual HRESULT STDMETHODCALLTYPE set_HasModule(TOLEBOOL pRet/*[in]*/) = 0; // [385]
  virtual HRESULT STDMETHODCALLTYPE get_acHiddenCurrentPage(long* pRet/*[out,retval]*/) = 0; // [406]
  virtual HRESULT STDMETHODCALLTYPE set_acHiddenCurrentPage(long pRet/*[in]*/) = 0; // [406]
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultControl(long ControlType/*[in]*/, 
                                                       Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2150]
  virtual HRESULT STDMETHODCALLTYPE Circle(short flags/*[in]*/, float X/*[in]*/, float Y/*[in]*/, 
                                           float radius/*[in]*/, long color/*[in]*/, 
                                           float start/*[in]*/, float end/*[in]*/, 
                                           float aspect/*[in]*/) = 0; // [2118]
  virtual HRESULT STDMETHODCALLTYPE Line(short flags/*[in]*/, float x1/*[in]*/, float y1/*[in]*/, 
                                         float x2/*[in]*/, float y2/*[in]*/, long color/*[in]*/) = 0; // [2152]
  virtual HRESULT STDMETHODCALLTYPE PSet(short flags/*[in]*/, float X/*[in]*/, float Y/*[in]*/, 
                                         long color/*[in]*/) = 0; // [2117]
  virtual HRESULT STDMETHODCALLTYPE Scale(short flags/*[in]*/, float x1/*[in]*/, float y1/*[in]*/, 
                                          float x2/*[in]*/, float y2/*[in]*/) = 0; // [2116]
  virtual HRESULT STDMETHODCALLTYPE TextWidth(BSTR Expr/*[in]*/, float* pRet/*[out,retval]*/) = 0; // [2114]
  virtual HRESULT STDMETHODCALLTYPE TextHeight(BSTR Expr/*[in]*/, float* pRet/*[out,retval]*/) = 0; // [2115]
  virtual HRESULT STDMETHODCALLTYPE Print(BSTR Expr/*[in]*/) = 0; // [2153]
  virtual HRESULT STDMETHODCALLTYPE get_Section(TVariantInParam Index/*[in]*/, 
                                                Access_97::AccessSectionPtr* pRet/*[out,retval]*/) = 0; // [2088]
  virtual HRESULT STDMETHODCALLTYPE get_GroupLevel(long Index/*[in]*/, 
                                                   Access_97::AccessGroupLevelPtr* pRet/*[out,retval]*/) = 0; // [2098]
  virtual HRESULT STDMETHODCALLTYPE get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/) = 0; // [2097]
  virtual HRESULT STDMETHODCALLTYPE get_Module(Access_97::ModulePtr* pRet/*[out,retval]*/) = 0; // [2090]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/) = 0; // [2091]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [-5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_FormName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FormName((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_RecordSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_RecordSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Filter(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Filter((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FilterOn(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FilterOn((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OrderBy(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OrderBy((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_OrderByOn(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_OrderByOn((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Caption((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_RecordLocks(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_RecordLocks((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PageHeader(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PageHeader((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PageFooter(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PageFooter((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_DateGrouping(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_DateGrouping((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_GrpKeepTogether(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_GrpKeepTogether((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_MinButton(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_MinButton((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_MaxButton(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_MaxButton((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_Width(void)
  {
    short pRet;
    OLECHECK(this->get_Width((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Picture(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Picture((BSTR*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureType(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureSizeMode(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureSizeMode((unsigned_char*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PictureAlignment(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PictureAlignment((unsigned_char*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_PictureTiling(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_PictureTiling((TOLEBOOL*)&pRet));
    return pRet;
  }

  unsigned_char __fastcall get_PicturePages(void)
  {
    unsigned_char pRet;
    OLECHECK(this->get_PicturePages((unsigned_char*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_MenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_MenuBar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Toolbar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Toolbar((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_GridX(void)
  {
    short pRet;
    OLECHECK(this->get_GridX((short*)&pRet));
    return pRet;
  }

  short __fastcall get_GridY(void)
  {
    short pRet;
    OLECHECK(this->get_GridY((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_LayoutForPrint(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_LayoutForPrint((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_FastLaserPrinting(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_FastLaserPrinting((TOLEBOOL*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_HelpFile(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_HelpFile((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_HelpContextId(void)
  {
    long pRet;
    OLECHECK(this->get_HelpContextId((long*)&pRet));
    return pRet;
  }

  long __fastcall get_Hwnd(void)
  {
    long pRet;
    OLECHECK(this->get_Hwnd((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Count(void)
  {
    short pRet;
    OLECHECK(this->get_Count((short*)&pRet));
    return pRet;
  }

  long __fastcall get_Page(void)
  {
    long pRet;
    OLECHECK(this->get_Page((long*)&pRet));
    return pRet;
  }

  short __fastcall get_Pages(void)
  {
    short pRet;
    OLECHECK(this->get_Pages((short*)&pRet));
    return pRet;
  }

  long __fastcall get_LogicalPageWidth(void)
  {
    long pRet;
    OLECHECK(this->get_LogicalPageWidth((long*)&pRet));
    return pRet;
  }

  long __fastcall get_LogicalPageHeight(void)
  {
    long pRet;
    OLECHECK(this->get_LogicalPageHeight((long*)&pRet));
    return pRet;
  }

  long __fastcall get_ZoomControl(void)
  {
    long pRet;
    OLECHECK(this->get_ZoomControl((long*)&pRet));
    return pRet;
  }

  long __fastcall get_HasData(void)
  {
    long pRet;
    OLECHECK(this->get_HasData((long*)&pRet));
    return pRet;
  }

  long __fastcall get_Left(void)
  {
    long pRet;
    OLECHECK(this->get_Left((long*)&pRet));
    return pRet;
  }

  long __fastcall get_Top(void)
  {
    long pRet;
    OLECHECK(this->get_Top((long*)&pRet));
    return pRet;
  }

  long __fastcall get_Height(void)
  {
    long pRet;
    OLECHECK(this->get_Height((long*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_PrintSection(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_PrintSection((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_NextRecord(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_NextRecord((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_MoveLayout(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_MoveLayout((TOLEBOOL*)&pRet));
    return pRet;
  }

  short __fastcall get_FormatCount(void)
  {
    short pRet;
    OLECHECK(this->get_FormatCount((short*)&pRet));
    return pRet;
  }

  short __fastcall get_PrintCount(void)
  {
    short pRet;
    OLECHECK(this->get_PrintCount((short*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Painting(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Painting((TOLEBOOL*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PrtMip(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PrtMip((TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PrtDevMode(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PrtDevMode((TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PrtDevNames(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PrtDevNames((TVariant*)&pRet));
    return pRet;
  }

  long __fastcall get_ForeColor(void)
  {
    long pRet;
    OLECHECK(this->get_ForeColor((long*)&pRet));
    return pRet;
  }

  float __fastcall get_CurrentX(void)
  {
    float pRet;
    OLECHECK(this->get_CurrentX((float*)&pRet));
    return pRet;
  }

  float __fastcall get_CurrentY(void)
  {
    float pRet;
    OLECHECK(this->get_CurrentY((float*)&pRet));
    return pRet;
  }

  float __fastcall get_ScaleHeight(void)
  {
    float pRet;
    OLECHECK(this->get_ScaleHeight((float*)&pRet));
    return pRet;
  }

  float __fastcall get_ScaleLeft(void)
  {
    float pRet;
    OLECHECK(this->get_ScaleLeft((float*)&pRet));
    return pRet;
  }

  short __fastcall get_ScaleMode(void)
  {
    short pRet;
    OLECHECK(this->get_ScaleMode((short*)&pRet));
    return pRet;
  }

  float __fastcall get_ScaleTop(void)
  {
    float pRet;
    OLECHECK(this->get_ScaleTop((float*)&pRet));
    return pRet;
  }

  float __fastcall get_ScaleWidth(void)
  {
    float pRet;
    OLECHECK(this->get_ScaleWidth((float*)&pRet));
    return pRet;
  }

  short __fastcall get_FontBold(void)
  {
    short pRet;
    OLECHECK(this->get_FontBold((short*)&pRet));
    return pRet;
  }

  short __fastcall get_FontItalic(void)
  {
    short pRet;
    OLECHECK(this->get_FontItalic((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_FontName((BSTR*)&pRet));
    return pRet;
  }

  short __fastcall get_FontSize(void)
  {
    short pRet;
    OLECHECK(this->get_FontSize((short*)&pRet));
    return pRet;
  }

  short __fastcall get_FontUnderline(void)
  {
    short pRet;
    OLECHECK(this->get_FontUnderline((short*)&pRet));
    return pRet;
  }

  short __fastcall get_DrawMode(void)
  {
    short pRet;
    OLECHECK(this->get_DrawMode((short*)&pRet));
    return pRet;
  }

  short __fastcall get_DrawStyle(void)
  {
    short pRet;
    OLECHECK(this->get_DrawStyle((short*)&pRet));
    return pRet;
  }

  short __fastcall get_DrawWidth(void)
  {
    short pRet;
    OLECHECK(this->get_DrawWidth((short*)&pRet));
    return pRet;
  }

  long __fastcall get_FillColor(void)
  {
    long pRet;
    OLECHECK(this->get_FillColor((long*)&pRet));
    return pRet;
  }

  short __fastcall get_FillStyle(void)
  {
    short pRet;
    OLECHECK(this->get_FillStyle((short*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Name((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_PaletteSource(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_PaletteSource((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_Tag((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PaintPalette(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PaintPalette((TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnMenu(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnMenu((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnOpen(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnOpen((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnClose(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnClose((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnActivate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnActivate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnDeactivate(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnDeactivate((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnNoData(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnNoData((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnPage(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnPage((BSTR*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_OnError(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_OnError((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Dirty(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_Dirty((TOLEBOOL*)&pRet));
    return pRet;
  }

  long __fastcall get_CurrentRecord(void)
  {
    long pRet;
    OLECHECK(this->get_CurrentRecord((long*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PictureData(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PictureData((TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall get_PicturePalette(void)
  {
    TVariant pRet;
    OLECHECK(this->get_PicturePalette((TVariant*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_HasModule(void)
  {
    TOLEBOOL pRet;
    OLECHECK(this->get_HasModule((TOLEBOOL*)&pRet));
    return pRet;
  }

  long __fastcall get_acHiddenCurrentPage(void)
  {
    long pRet;
    OLECHECK(this->get_acHiddenCurrentPage((long*)&pRet));
    return pRet;
  }

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall get_ActiveControl(void)
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->get_ActiveControl((Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall get_DefaultControl(long ControlType/*[in]*/)
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->get_DefaultControl(ControlType, (Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  float __fastcall TextWidth(BSTR Expr/*[in]*/)
  {
    float pRet;
    OLECHECK(this->TextWidth(Expr, (float*)&pRet));
    return pRet;
  }

  float __fastcall TextHeight(BSTR Expr/*[in]*/)
  {
    float pRet;
    OLECHECK(this->TextHeight(Expr, (float*)&pRet));
    return pRet;
  }

  Access_97::AccessSectionPtr __fastcall get_Section(TVariantInParam Index/*[in]*/)
  {
    Access_97::AccessSectionPtr pRet;
    OLECHECK(this->get_Section(Index, (Access_97::AccessSectionPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessGroupLevelPtr __fastcall get_GroupLevel(long Index/*[in]*/)
  {
    Access_97::AccessGroupLevelPtr pRet;
    OLECHECK(this->get_GroupLevel(Index, (Access_97::AccessGroupLevelPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessReportPtr __fastcall get_Report(void)
  {
    Access_97::AccessReportPtr pRet;
    OLECHECK(this->get_Report((Access_97::AccessReportPtr*)&pRet));
    return pRet;
  }

  Access_97::ModulePtr __fastcall get_Module(void)
  {
    Access_97::ModulePtr pRet;
    OLECHECK(this->get_Module((Access_97::ModulePtr*)&pRet));
    return pRet;
  }

  Access_97::PropertiesPtr __fastcall get_Properties(void)
  {
    Access_97::PropertiesPtr pRet;
    OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
    return pRet;
  }

  Access_97::Controls_Ptr __fastcall get_Controls(void)
  {
    Access_97::Controls_Ptr pRet;
    OLECHECK(this->get_Controls((Access_97::Controls_Ptr*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }

  TVariant __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
    return pRet;
  }


  __property   BSTR            FormName = {read = get_FormName, write = set_FormName};
  __property   BSTR            RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            Filter = {read = get_Filter, write = set_Filter};
  __property   TOLEBOOL        FilterOn = {read = get_FilterOn, write = set_FilterOn};
  __property   BSTR            OrderBy = {read = get_OrderBy, write = set_OrderBy};
  __property   TOLEBOOL        OrderByOn = {read = get_OrderByOn, write = set_OrderByOn};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   unsigned_char   RecordLocks = {read = get_RecordLocks, write = set_RecordLocks};
  __property   unsigned_char   PageHeader = {read = get_PageHeader, write = set_PageHeader};
  __property   unsigned_char   PageFooter = {read = get_PageFooter, write = set_PageFooter};
  __property   unsigned_char   DateGrouping = {read = get_DateGrouping, write = set_DateGrouping};
  __property   unsigned_char   GrpKeepTogether = {read = get_GrpKeepTogether, write = set_GrpKeepTogether};
  __property   TOLEBOOL        MinButton = {read = get_MinButton, write = set_MinButton};
  __property   TOLEBOOL        MaxButton = {read = get_MaxButton, write = set_MaxButton};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   unsigned_char   PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   unsigned_char   PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   TOLEBOOL        PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   unsigned_char   PicturePages = {read = get_PicturePages, write = set_PicturePages};
  __property   BSTR            MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   BSTR            Toolbar = {read = get_Toolbar, write = set_Toolbar};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   short           GridX = {read = get_GridX, write = set_GridX};
  __property   short           GridY = {read = get_GridY, write = set_GridY};
  __property   TOLEBOOL        LayoutForPrint = {read = get_LayoutForPrint, write = set_LayoutForPrint};
  __property   TOLEBOOL        FastLaserPrinting = {read = get_FastLaserPrinting, write = set_FastLaserPrinting};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   long            Hwnd = {read = get_Hwnd, write = set_Hwnd};
  __property   short           Count = {read = get_Count, write = set_Count};
  __property   long            Page = {read = get_Page, write = set_Page};
  __property   short           Pages = {read = get_Pages, write = set_Pages};
  __property   long            LogicalPageWidth = {read = get_LogicalPageWidth, write = set_LogicalPageWidth};
  __property   long            LogicalPageHeight = {read = get_LogicalPageHeight, write = set_LogicalPageHeight};
  __property   long            ZoomControl = {read = get_ZoomControl, write = set_ZoomControl};
  __property   long            HasData = {read = get_HasData, write = set_HasData};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   TOLEBOOL        PrintSection = {read = get_PrintSection, write = set_PrintSection};
  __property   TOLEBOOL        NextRecord = {read = get_NextRecord, write = set_NextRecord};
  __property   TOLEBOOL        MoveLayout = {read = get_MoveLayout, write = set_MoveLayout};
  __property   short           FormatCount = {read = get_FormatCount, write = set_FormatCount};
  __property   short           PrintCount = {read = get_PrintCount, write = set_PrintCount};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        Painting = {read = get_Painting, write = set_Painting};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   float           CurrentX = {read = get_CurrentX, write = set_CurrentX};
  __property   float           CurrentY = {read = get_CurrentY, write = set_CurrentY};
  __property   float           ScaleHeight = {read = get_ScaleHeight, write = set_ScaleHeight};
  __property   float           ScaleLeft = {read = get_ScaleLeft, write = set_ScaleLeft};
  __property   short           ScaleMode = {read = get_ScaleMode, write = set_ScaleMode};
  __property   float           ScaleTop = {read = get_ScaleTop, write = set_ScaleTop};
  __property   float           ScaleWidth = {read = get_ScaleWidth, write = set_ScaleWidth};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   short           FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           DrawMode = {read = get_DrawMode, write = set_DrawMode};
  __property   short           DrawStyle = {read = get_DrawStyle, write = set_DrawStyle};
  __property   short           DrawWidth = {read = get_DrawWidth, write = set_DrawWidth};
  __property   long            FillColor = {read = get_FillColor, write = set_FillColor};
  __property   short           FillStyle = {read = get_FillStyle, write = set_FillStyle};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            PaletteSource = {read = get_PaletteSource, write = set_PaletteSource};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            OnMenu = {read = get_OnMenu, write = set_OnMenu};
  __property   BSTR            OnOpen = {read = get_OnOpen, write = set_OnOpen};
  __property   BSTR            OnClose = {read = get_OnClose, write = set_OnClose};
  __property   BSTR            OnActivate = {read = get_OnActivate, write = set_OnActivate};
  __property   BSTR            OnDeactivate = {read = get_OnDeactivate, write = set_OnDeactivate};
  __property   BSTR            OnNoData = {read = get_OnNoData, write = set_OnNoData};
  __property   BSTR            OnPage = {read = get_OnPage, write = set_OnPage};
  __property   BSTR            OnError = {read = get_OnError, write = set_OnError};
  __property   TOLEBOOL        Dirty = {read = get_Dirty, write = set_Dirty};
  __property   long            CurrentRecord = {read = get_CurrentRecord, write = set_CurrentRecord};
  __property   TOLEBOOL        HasModule = {read = get_HasModule, write = set_HasModule};
  __property   long            acHiddenCurrentPage = {read = get_acHiddenCurrentPage, write = set_acHiddenCurrentPage};
  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessControlPtr ActiveControl = {read = get_ActiveControl};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
  __property   Access_97::ModulePtr Module = {read = get_Module};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::Controls_Ptr Controls = {read = get_Controls};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ReportEvents
// Flags:     (16) Hidden
// GUID:      {BC9E4357-F037-11CD-8701-00AA003F0F07}
// *********************************************************************//
interface _ReportEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Open(short* Cancel/*[out]*/) = 0; // [2066]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [2070]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [2071]
  virtual HRESULT STDMETHODCALLTYPE Deactivate(void) = 0; // [2072]
  virtual HRESULT STDMETHODCALLTYPE Error(short* DataErr/*[in,out]*/, short* Response/*[out]*/) = 0; // [2083]
  virtual HRESULT STDMETHODCALLTYPE NoData(short* Cancel/*[out]*/) = 0; // [2161]
  virtual HRESULT STDMETHODCALLTYPE Page(void) = 0; // [2162]
};

// *********************************************************************//
// Interface: Reports
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D1523700-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
interface Reports  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_Item(TVariantInParam Index/*[in]*/, 
                                             Access_97::AccessReportPtr* pRet/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pRet/*[out,retval]*/) = 0; // [2001]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::AccessReportPtr __fastcall get_Item(TVariantInParam Index/*[in]*/)
  {
    Access_97::AccessReportPtr pRet;
    OLECHECK(this->get_Item(Index, (Access_97::AccessReportPtr*)&pRet));
    return pRet;
  }

  long __fastcall get_Count(void)
  {
    long pRet;
    OLECHECK(this->get_Count((long*)&pRet));
    return pRet;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN pRet;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Screen
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DC6B66C0-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
interface Screen  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveDatasheet(Access_97::AccessFormPtr* pRet/*[out,retval]*/) = 0; // [2146]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2006]
  virtual HRESULT STDMETHODCALLTYPE get_PreviousControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2007]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveForm(Access_97::AccessFormPtr* pRet/*[out,retval]*/) = 0; // [2008]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveReport(Access_97::AccessReportPtr* pRet/*[out,retval]*/) = 0; // [2009]
  virtual HRESULT STDMETHODCALLTYPE get_MousePointer(short* pRet/*[out,retval]*/) = 0; // [2106]
  virtual HRESULT STDMETHODCALLTYPE set_MousePointer(short pRet/*[in]*/) = 0; // [2106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  Access_97::AccessFormPtr __fastcall get_ActiveDatasheet(void)
  {
    Access_97::AccessFormPtr pRet;
    OLECHECK(this->get_ActiveDatasheet((Access_97::AccessFormPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall get_ActiveControl(void)
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->get_ActiveControl((Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall get_PreviousControl(void)
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->get_PreviousControl((Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessFormPtr __fastcall get_ActiveForm(void)
  {
    Access_97::AccessFormPtr pRet;
    OLECHECK(this->get_ActiveForm((Access_97::AccessFormPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessReportPtr __fastcall get_ActiveReport(void)
  {
    Access_97::AccessReportPtr pRet;
    OLECHECK(this->get_ActiveReport((Access_97::AccessReportPtr*)&pRet));
    return pRet;
  }

  short __fastcall get_MousePointer(void)
  {
    short pRet;
    OLECHECK(this->get_MousePointer((short*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr ActiveDatasheet = {read = get_ActiveDatasheet};
  __property   Access_97::AccessControlPtr ActiveControl = {read = get_ActiveControl};
  __property   Access_97::AccessControlPtr PreviousControl = {read = get_PreviousControl};
  __property   Access_97::AccessFormPtr ActiveForm = {read = get_ActiveForm};
  __property   Access_97::AccessReportPtr ActiveReport = {read = get_ActiveReport};
  __property   short           MousePointer = {read = get_MousePointer, write = set_MousePointer};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Application
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68CCE6C0-6129-101B-AF4E-00AA003F0F07}
// *********************************************************************//
interface _Application  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/) = 0; // [2005]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2087]
  virtual HRESULT STDMETHODCALLTYPE get_CodeContextObject(LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2082]
  virtual HRESULT STDMETHODCALLTYPE NewCurrentDatabase(BSTR filepath/*[in]*/) = 0; // [2142]
  virtual HRESULT STDMETHODCALLTYPE OpenCurrentDatabase(BSTR filepath/*[in]*/, 
                                                        TOLEBOOL Exclusive/*[in,def,opt]*/) = 0; // [2140]
  virtual HRESULT STDMETHODCALLTYPE get_MenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE set_MenuBar(BSTR pRet/*[in]*/) = 0; // [2010]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentObjectType(long* pRet/*[out,retval]*/) = 0; // [2011]
  virtual HRESULT STDMETHODCALLTYPE get_CurrentObjectName(BSTR* pRet/*[out,retval]*/) = 0; // [2012]
  virtual HRESULT STDMETHODCALLTYPE GetOption(BSTR OptionName/*[in]*/, 
                                              TVariant* pRet/*[out,retval]*/) = 0; // [2013]
  virtual HRESULT STDMETHODCALLTYPE SetOption(BSTR OptionName/*[in]*/, 
                                              TVariantInParam Setting/*[in]*/) = 0; // [2014]
  virtual HRESULT STDMETHODCALLTYPE Echo(short EchoOn/*[in]*/, 
                                         BSTR bstrStatusBarText/*[in,def,opt]*/) = 0; // [2015]
  virtual HRESULT STDMETHODCALLTYPE CloseCurrentDatabase(void) = 0; // [2141]
  virtual HRESULT STDMETHODCALLTYPE Quit(Access_97::AcQuitOption Option/*[in,def,opt]*/) = 0; // [2016]
  virtual HRESULT STDMETHODCALLTYPE get_Forms(Access_97::Forms_Ptr* pRet/*[out,retval]*/) = 0; // [2002]
  virtual HRESULT STDMETHODCALLTYPE get_Reports(Access_97::ReportsPtr* pRet/*[out,retval]*/) = 0; // [2003]
  virtual HRESULT STDMETHODCALLTYPE get_Screen(Access_97::ScreenPtr* pRet/*[out,retval]*/) = 0; // [2004]
  virtual HRESULT STDMETHODCALLTYPE get_DoCmd(Access_97::IDoCmdPtr* pRet/*[out,retval]*/) = 0; // [2025]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/) = 0; // [2107]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutMenuBar(BSTR pRet/*[in]*/) = 0; // [2107]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(TOLEBOOL* pfVisible/*[out,retval]*/) = 0; // [2148]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(TOLEBOOL pfVisible/*[in]*/) = 0; // [2148]
  virtual HRESULT STDMETHODCALLTYPE get_UserControl(TOLEBOOL* pfUserCtrl/*[out,retval]*/) = 0; // [2149]
  virtual HRESULT STDMETHODCALLTYPE set_UserControl(TOLEBOOL pfUserCtrl/*[in]*/) = 0; // [2149]
  virtual HRESULT STDMETHODCALLTYPE SysCmd(Access_97::AcSysCmdAction Action/*[in]*/, 
                                           TVariantInParam Argument2/*[in,opt]*/, 
                                           TVariantInParam Argument3/*[in,opt]*/, 
                                           TVariant* pRet/*[out,retval]*/) = 0; // [2028]
  virtual HRESULT STDMETHODCALLTYPE CreateForm(TVariantInParam Database/*[in,opt]*/, 
                                               TVariantInParam FormTemplate/*[in,opt]*/, 
                                               Access_97::AccessFormPtr* pRet/*[out,retval]*/) = 0; // [2029]
  virtual HRESULT STDMETHODCALLTYPE CreateReport(TVariantInParam Database/*[in,opt]*/, 
                                                 TVariantInParam ReportTemplate/*[in,opt]*/, 
                                                 Access_97::AccessReportPtr* pRet/*[out,retval]*/) = 0; // [2030]
  virtual HRESULT STDMETHODCALLTYPE CreateControl(BSTR FormName/*[in]*/, 
                                                  Access_97::AcControlType ControlType/*[in]*/, 
                                                  Access_97::AcSection Section/*[in,def,opt]*/, 
                                                  TVariantInParam Parent/*[in,opt]*/, 
                                                  TVariantInParam ColumnName/*[in,opt]*/, 
                                                  TVariantInParam Left/*[in,opt]*/, 
                                                  TVariantInParam Top/*[in,opt]*/, 
                                                  TVariantInParam Width/*[in,opt]*/, 
                                                  TVariantInParam Height/*[in,opt]*/, 
                                                  Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2031]
  virtual HRESULT STDMETHODCALLTYPE CreateReportControl(BSTR ReportName/*[in]*/, 
                                                        Access_97::AcControlType ControlType/*[in]*/, 
                                                        Access_97::AcSection Section/*[in,def,opt]*/, 
                                                        TVariantInParam Parent/*[in,opt]*/, 
                                                        TVariantInParam ColumnName/*[in,opt]*/, 
                                                        TVariantInParam Left/*[in,opt]*/, 
                                                        TVariantInParam Top/*[in,opt]*/, 
                                                        TVariantInParam Width/*[in,opt]*/, 
                                                        TVariantInParam Height/*[in,opt]*/, 
                                                        Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2032]
  virtual HRESULT STDMETHODCALLTYPE CreateControlEx(BSTR FormName/*[in]*/, 
                                                    Access_97::AcControlType ControlType/*[in]*/, 
                                                    Access_97::AcSection Section/*[in]*/, 
                                                    BSTR Parent/*[in]*/, BSTR ControlSource/*[in]*/, 
                                                    long Left/*[in]*/, long Top/*[in]*/, 
                                                    long Width/*[in]*/, long Height/*[in]*/, 
                                                    Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2164]
  virtual HRESULT STDMETHODCALLTYPE CreateReportControlEx(BSTR ReportName/*[in]*/, 
                                                          Access_97::AcControlType ControlType/*[in]*/, 
                                                          Access_97::AcSection Section/*[in]*/, 
                                                          BSTR Parent/*[in]*/, 
                                                          BSTR ControlName/*[in]*/, 
                                                          long Left/*[in]*/, long Top/*[in]*/, 
                                                          long Width/*[in]*/, long Height/*[in]*/, 
                                                          Access_97::AccessControlPtr* pRet/*[out,retval]*/) = 0; // [2165]
  virtual HRESULT STDMETHODCALLTYPE DeleteControl(BSTR FormName/*[in]*/, BSTR ControlName/*[in]*/) = 0; // [2033]
  virtual HRESULT STDMETHODCALLTYPE DeleteReportControl(BSTR ReportName/*[in]*/, 
                                                        BSTR ControlName/*[in]*/) = 0; // [2034]
  virtual HRESULT STDMETHODCALLTYPE CreateGroupLevel(BSTR ReportName/*[in]*/, 
                                                     BSTR Expression/*[in]*/, short Header/*[in]*/, 
                                                     short Footer/*[in]*/, 
                                                     long* pRet/*[out,retval]*/) = 0; // [2051]
  virtual HRESULT STDMETHODCALLTYPE DMin(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                         TVariantInParam Criteria/*[in,opt]*/, 
                                         TVariant* pRet/*[out,retval]*/) = 0; // [2035]
  virtual HRESULT STDMETHODCALLTYPE DMax(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                         TVariantInParam Criteria/*[in,opt]*/, 
                                         TVariant* pRet/*[out,retval]*/) = 0; // [2036]
  virtual HRESULT STDMETHODCALLTYPE DSum(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                         TVariantInParam Criteria/*[in,opt]*/, 
                                         TVariant* pRet/*[out,retval]*/) = 0; // [2037]
  virtual HRESULT STDMETHODCALLTYPE DAvg(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                         TVariantInParam Criteria/*[in,opt]*/, 
                                         TVariant* pRet/*[out,retval]*/) = 0; // [2038]
  virtual HRESULT STDMETHODCALLTYPE DLookup(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                            TVariantInParam Criteria/*[in,opt]*/, 
                                            TVariant* pRet/*[out,retval]*/) = 0; // [2039]
  virtual HRESULT STDMETHODCALLTYPE DLast(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                          TVariantInParam Criteria/*[in,opt]*/, 
                                          TVariant* pRet/*[out,retval]*/) = 0; // [2040]
  virtual HRESULT STDMETHODCALLTYPE DVar(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                         TVariantInParam Criteria/*[in,opt]*/, 
                                         TVariant* pRet/*[out,retval]*/) = 0; // [2041]
  virtual HRESULT STDMETHODCALLTYPE DVarP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                          TVariantInParam Criteria/*[in,opt]*/, 
                                          TVariant* pRet/*[out,retval]*/) = 0; // [2042]
  virtual HRESULT STDMETHODCALLTYPE DStDev(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                           TVariantInParam Criteria/*[in,opt]*/, 
                                           TVariant* pRet/*[out,retval]*/) = 0; // [2043]
  virtual HRESULT STDMETHODCALLTYPE DStDevP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                            TVariantInParam Criteria/*[in,opt]*/, 
                                            TVariant* pRet/*[out,retval]*/) = 0; // [2044]
  virtual HRESULT STDMETHODCALLTYPE DFirst(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                           TVariantInParam Criteria/*[in,opt]*/, 
                                           TVariant* pRet/*[out,retval]*/) = 0; // [2045]
  virtual HRESULT STDMETHODCALLTYPE DCount(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                           TVariantInParam Criteria/*[in,opt]*/, 
                                           TVariant* pRet/*[out,retval]*/) = 0; // [2046]
  virtual HRESULT STDMETHODCALLTYPE Eval(BSTR StringExpr/*[in]*/, TVariant* pRet/*[out,retval]*/) = 0; // [2047]
  virtual HRESULT STDMETHODCALLTYPE CurrentUser(BSTR* pRet/*[out,retval]*/) = 0; // [2048]
  virtual HRESULT STDMETHODCALLTYPE DDEInitiate(BSTR Application/*[in]*/, BSTR Topic/*[in]*/, 
                                                TVariant* pRet/*[out,retval]*/) = 0; // [2052]
  virtual HRESULT STDMETHODCALLTYPE DDEExecute(TVariantInParam ChanNum/*[in]*/, BSTR Command/*[in]*/) = 0; // [2053]
  virtual HRESULT STDMETHODCALLTYPE DDEPoke(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/, 
                                            BSTR Data/*[in]*/) = 0; // [2054]
  virtual HRESULT STDMETHODCALLTYPE DDERequest(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/, 
                                               BSTR* pRet/*[out,retval]*/) = 0; // [2055]
  virtual HRESULT STDMETHODCALLTYPE DDETerminate(TVariantInParam ChanNum/*[in]*/) = 0; // [2056]
  virtual HRESULT STDMETHODCALLTYPE DDETerminateAll(void) = 0; // [2057]
  virtual HRESULT STDMETHODCALLTYPE get_DBEngine(Dao_97::DBEnginePtr* pRet/*[out,retval]*/) = 0; // [2110]
  virtual HRESULT STDMETHODCALLTYPE CurrentDb(Dao_97::DatabasePtr* pRet/*[out,retval]*/) = 0; // [2049]
  virtual HRESULT STDMETHODCALLTYPE CodeDb(Dao_97::DatabasePtr* pRet/*[out,retval]*/) = 0; // [2050]
  virtual HRESULT STDMETHODCALLTYPE BeginUndoable(long Hwnd/*[in]*/) = 0; // [2099]
  virtual HRESULT STDMETHODCALLTYPE SetUndoRecording(short yesno/*[in]*/) = 0; // [2100]
  virtual HRESULT STDMETHODCALLTYPE BuildCriteria(BSTR Field/*[in]*/, short FieldType/*[in]*/, 
                                                  BSTR Expression/*[in]*/, 
                                                  BSTR* pRet/*[out,retval]*/) = 0; // [2138]
  virtual HRESULT STDMETHODCALLTYPE InsertText(BSTR Text/*[in]*/, BSTR ModuleName/*[in]*/) = 0; // [2093]
  virtual HRESULT STDMETHODCALLTYPE ReloadAddIns(void) = 0; // [2154]
  virtual HRESULT STDMETHODCALLTYPE DefaultWorkspaceClone(Dao_97::WorkspacePtr* pRet/*[out,retval]*/) = 0; // [2157]
  virtual HRESULT STDMETHODCALLTYPE RefreshTitleBar(void) = 0; // [2158]
  virtual HRESULT STDMETHODCALLTYPE AddAutoCorrect(BSTR ChangeFrom/*[in]*/, BSTR ChangeTo/*[in]*/) = 0; // [2159]
  virtual HRESULT STDMETHODCALLTYPE DelAutoCorrect(BSTR ChangeFrom/*[in]*/) = 0; // [2160]
  virtual HRESULT STDMETHODCALLTYPE hWndAccessApp(int* phWndAccessAppWnd/*[out,retval]*/) = 0; // [2163]
  virtual HRESULT STDMETHODCALLTYPE Run(BSTR Procedure/*[in]*/, TVariant* Arg1/*[in,out,opt]*/, 
                                        TVariant* Arg2/*[in,out,opt]*/, 
                                        TVariant* Arg3/*[in,out,opt]*/, 
                                        TVariant* Arg4/*[in,out,opt]*/, 
                                        TVariant* Arg5/*[in,out,opt]*/, 
                                        TVariant* Arg6/*[in,out,opt]*/, 
                                        TVariant* Arg7/*[in,out,opt]*/, 
                                        TVariant* Arg8/*[in,out,opt]*/, 
                                        TVariant* Arg9/*[in,out,opt]*/, 
                                        TVariant* Arg10/*[in,out,opt]*/, 
                                        TVariant* Arg11/*[in,out,opt]*/, 
                                        TVariant* Arg12/*[in,out,opt]*/, 
                                        TVariant* Arg13/*[in,out,opt]*/, 
                                        TVariant* Arg14/*[in,out,opt]*/, 
                                        TVariant* Arg15/*[in,out,opt]*/, 
                                        TVariant* Arg16/*[in,out,opt]*/, 
                                        TVariant* Arg17/*[in,out,opt]*/, 
                                        TVariant* Arg18/*[in,out,opt]*/, 
                                        TVariant* Arg19/*[in,out,opt]*/, 
                                        TVariant* Arg20/*[in,out,opt]*/, 
                                        TVariant* Arg21/*[in,out,opt]*/, 
                                        TVariant* Arg22/*[in,out,opt]*/, 
                                        TVariant* Arg23/*[in,out,opt]*/, 
                                        TVariant* Arg24/*[in,out,opt]*/, 
                                        TVariant* Arg25/*[in,out,opt]*/, 
                                        TVariant* Arg26/*[in,out,opt]*/, 
                                        TVariant* Arg27/*[in,out,opt]*/, 
                                        TVariant* Arg28/*[in,out,opt]*/, 
                                        TVariant* Arg29/*[in,out,opt]*/, 
                                        TVariant* Arg30/*[in,out,opt]*/, 
                                        TVariant* pRet/*[out,retval]*/) = 0; // [2134]
  virtual HRESULT STDMETHODCALLTYPE Nz(TVariantInParam Value/*[in]*/, 
                                       TVariantInParam ValueIfNull/*[in,opt]*/, 
                                       TVariant* pRet/*[out,retval]*/) = 0; // [2135]
  virtual HRESULT STDMETHODCALLTYPE LoadPicture(BSTR FileName/*[in]*/, 
                                                LPDISPATCH* pRet/*[out,retval]*/) = 0; // [2166]
  virtual HRESULT STDMETHODCALLTYPE ReplaceModule(long objtyp/*[in]*/, BSTR ModuleName/*[in]*/, 
                                                  BSTR FileName/*[in]*/, long token/*[in]*/) = 0; // [2168]
  virtual HRESULT STDMETHODCALLTYPE AccessError(TVariantInParam ErrorNumber/*[in]*/, 
                                                TVariant* pRet/*[out,retval]*/) = 0; // [2169]
  virtual HRESULT STDMETHODCALLTYPE BuilderString(TVariant* pRet/*[out,retval]*/) = 0; // [2170]
  virtual HRESULT STDMETHODCALLTYPE StringFromGUID(TVariantInParam Guid/*[in]*/, 
                                                   TVariant* pRet/*[out,retval]*/) = 0; // [2171]
  virtual HRESULT STDMETHODCALLTYPE GUIDFromString(TVariantInParam String/*[in]*/, 
                                                   TVariant* pRet/*[out,retval]*/) = 0; // [2172]
  virtual HRESULT STDMETHODCALLTYPE AppLoadString(long id/*[in]*/, TVariant* pRet/*[out,retval]*/) = 0; // [2173]
  virtual HRESULT STDMETHODCALLTYPE get_CommandBars(Office_97::CommandBarsPtr* pRet/*[out,retval]*/) = 0; // [2174]
  virtual HRESULT STDMETHODCALLTYPE get_Assistant(Office_97::AssistantPtr* pRet/*[out,retval]*/) = 0; // [2175]
  virtual HRESULT STDMETHODCALLTYPE FollowHyperlink(BSTR Address/*[in]*/, 
                                                    BSTR SubAddress/*[in,def,opt]*/, 
                                                    TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                                    TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                                    TVariantInParam ExtraInfo/*[in,opt]*/, 
                                                    Office_97::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                                    BSTR HeaderInfo/*[in,def,opt]*/) = 0; // [2176]
  virtual HRESULT STDMETHODCALLTYPE SaveAsText(long ObjectType/*[in]*/, BSTR ObjectName/*[in]*/, 
                                               BSTR FileName/*[in]*/) = 0; // [2178]
  virtual HRESULT STDMETHODCALLTYPE LoadFromText(long ObjectType/*[in]*/, BSTR ObjectName/*[in]*/, 
                                                 BSTR FileName/*[in]*/) = 0; // [2179]
  virtual HRESULT STDMETHODCALLTYPE AddToFavorites(void) = 0; // [2184]
  virtual HRESULT STDMETHODCALLTYPE RefreshDatabaseWindow(void) = 0; // [2186]
  virtual HRESULT STDMETHODCALLTYPE get_References(Access_97::AccessReferencesPtr* pRet/*[out,retval]*/) = 0; // [2187]
  virtual HRESULT STDMETHODCALLTYPE get_Modules(Access_97::ModulesPtr* pRet/*[out,retval]*/) = 0; // [2188]
  virtual HRESULT STDMETHODCALLTYPE get_FileSearch(Office_97::FileSearchPtr* pRet/*[out,retval]*/) = 0; // [2189]
  virtual HRESULT STDMETHODCALLTYPE get_IsCompiled(TOLEBOOL* pfCompiled/*[out,retval]*/) = 0; // [2193]
  virtual HRESULT STDMETHODCALLTYPE RunCommand(Access_97::AcCommand Command/*[in]*/) = 0; // [2194]
  virtual HRESULT STDMETHODCALLTYPE HyperlinkPart(TVariantInParam Hyperlink/*[in]*/, 
                                                  Access_97::AcHyperlinkPart Part/*[in,def,opt]*/, 
                                                  BSTR* pRet/*[out,retval]*/) = 0; // [2195]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessApplicationPtr __fastcall get_Application(void)
  {
    Access_97::AccessApplicationPtr pRet;
    OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall get_CodeContextObject(void)
  {
    LPDISPATCH pRet;
    OLECHECK(this->get_CodeContextObject((LPDISPATCH*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_MenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_MenuBar((BSTR*)&pRet));
    return pRet;
  }

  long __fastcall get_CurrentObjectType(void)
  {
    long pRet;
    OLECHECK(this->get_CurrentObjectType((long*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_CurrentObjectName(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_CurrentObjectName((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall GetOption(BSTR OptionName/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->GetOption(OptionName, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::Forms_Ptr __fastcall get_Forms(void)
  {
    Access_97::Forms_Ptr pRet;
    OLECHECK(this->get_Forms((Access_97::Forms_Ptr*)&pRet));
    return pRet;
  }

  Access_97::ReportsPtr __fastcall get_Reports(void)
  {
    Access_97::ReportsPtr pRet;
    OLECHECK(this->get_Reports((Access_97::ReportsPtr*)&pRet));
    return pRet;
  }

  Access_97::ScreenPtr __fastcall get_Screen(void)
  {
    Access_97::ScreenPtr pRet;
    OLECHECK(this->get_Screen((Access_97::ScreenPtr*)&pRet));
    return pRet;
  }

  Access_97::IDoCmdPtr __fastcall get_DoCmd(void)
  {
    Access_97::IDoCmdPtr pRet;
    OLECHECK(this->get_DoCmd((Access_97::IDoCmdPtr*)&pRet));
    return pRet;
  }

  BSTR __fastcall get_ShortcutMenuBar(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_Visible(void)
  {
    TOLEBOOL pfVisible;
    OLECHECK(this->get_Visible((TOLEBOOL*)&pfVisible));
    return pfVisible;
  }

  TOLEBOOL __fastcall get_UserControl(void)
  {
    TOLEBOOL pfUserCtrl;
    OLECHECK(this->get_UserControl((TOLEBOOL*)&pfUserCtrl));
    return pfUserCtrl;
  }

  TVariant __fastcall SysCmd(Access_97::AcSysCmdAction Action/*[in]*/, 
                             TVariantInParam Argument2/*[in,opt]*/= TNoParam(), 
                             TVariantInParam Argument3/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->SysCmd(Action, Argument2, Argument3, (TVariant*)&pRet));
    return pRet;
  }

  Access_97::AccessFormPtr __fastcall CreateForm(TVariantInParam Database/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam FormTemplate/*[in,opt]*/= TNoParam())
  {
    Access_97::AccessFormPtr pRet;
    OLECHECK(this->CreateForm(Database, FormTemplate, (Access_97::AccessFormPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessReportPtr __fastcall CreateReport(TVariantInParam Database/*[in,opt]*/= TNoParam(), 
                                                     TVariantInParam ReportTemplate/*[in,opt]*/= TNoParam())
  {
    Access_97::AccessReportPtr pRet;
    OLECHECK(this->CreateReport(Database, ReportTemplate, (Access_97::AccessReportPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall CreateControl(BSTR FormName/*[in]*/, 
                                                       Access_97::AcControlType ControlType/*[in]*/, 
                                                       Access_97::AcSection Section/*[in,def,opt]*/, 
                                                       TVariantInParam Parent/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam ColumnName/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Left/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Top/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Width/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Height/*[in,opt]*/= TNoParam())
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->CreateControl(FormName, ControlType, Section, Parent, ColumnName, Left, Top, 
                                 Width, Height, (Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall CreateReportControl(BSTR ReportName/*[in]*/, 
                                                             Access_97::AcControlType ControlType/*[in]*/, 
                                                             Access_97::AcSection Section/*[in,def,opt]*/, 
                                                             TVariantInParam Parent/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam ColumnName/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Left/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Top/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Width/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Height/*[in,opt]*/= TNoParam())
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->CreateReportControl(ReportName, ControlType, Section, Parent, ColumnName, Left, 
                                       Top, Width, Height, (Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall CreateControlEx(BSTR FormName/*[in]*/, 
                                                         Access_97::AcControlType ControlType/*[in]*/, 
                                                         Access_97::AcSection Section/*[in]*/, 
                                                         BSTR Parent/*[in]*/, 
                                                         BSTR ControlSource/*[in]*/, 
                                                         long Left/*[in]*/, long Top/*[in]*/, 
                                                         long Width/*[in]*/, long Height/*[in]*/)
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->CreateControlEx(FormName, ControlType, Section, Parent, ControlSource, Left, Top, 
                                   Width, Height, (Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessControlPtr __fastcall CreateReportControlEx(BSTR ReportName/*[in]*/, 
                                                               Access_97::AcControlType ControlType/*[in]*/, 
                                                               Access_97::AcSection Section/*[in]*/, 
                                                               BSTR Parent/*[in]*/, 
                                                               BSTR ControlName/*[in]*/, 
                                                               long Left/*[in]*/, long Top/*[in]*/, 
                                                               long Width/*[in]*/, 
                                                               long Height/*[in]*/)
  {
    Access_97::AccessControlPtr pRet;
    OLECHECK(this->CreateReportControlEx(ReportName, ControlType, Section, Parent, ControlName, Left, 
                                         Top, Width, Height, (Access_97::AccessControlPtr*)&pRet));
    return pRet;
  }

  long __fastcall CreateGroupLevel(BSTR ReportName/*[in]*/, BSTR Expression/*[in]*/, 
                                   short Header/*[in]*/, short Footer/*[in]*/)
  {
    long pRet;
    OLECHECK(this->CreateGroupLevel(ReportName, Expression, Header, Footer, (long*)&pRet));
    return pRet;
  }

  TVariant __fastcall DMin(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DMin(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DMax(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DMax(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DSum(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DSum(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DAvg(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DAvg(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DLookup(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                              TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DLookup(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DLast(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                            TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DLast(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DVar(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DVar(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DVarP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                            TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DVarP(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DStDev(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DStDev(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DStDevP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                              TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DStDevP(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DFirst(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DFirst(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall DCount(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->DCount(Expr, Domain, Criteria, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall Eval(BSTR StringExpr/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->Eval(StringExpr, (TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall CurrentUser(void)
  {
    BSTR pRet = 0;
    OLECHECK(this->CurrentUser((BSTR*)&pRet));
    return pRet;
  }

  TVariant __fastcall DDEInitiate(BSTR Application/*[in]*/, BSTR Topic/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->DDEInitiate(Application, Topic, (TVariant*)&pRet));
    return pRet;
  }

  BSTR __fastcall DDERequest(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/)
  {
    BSTR pRet = 0;
    OLECHECK(this->DDERequest(ChanNum, Item, (BSTR*)&pRet));
    return pRet;
  }

  Dao_97::DBEnginePtr __fastcall get_DBEngine(void)
  {
    Dao_97::DBEnginePtr pRet;
    OLECHECK(this->get_DBEngine((Dao_97::DBEnginePtr*)&pRet));
    return pRet;
  }

  Dao_97::DatabasePtr __fastcall CurrentDb(void)
  {
    Dao_97::DatabasePtr pRet;
    OLECHECK(this->CurrentDb((Dao_97::DatabasePtr*)&pRet));
    return pRet;
  }

  Dao_97::DatabasePtr __fastcall CodeDb(void)
  {
    Dao_97::DatabasePtr pRet;
    OLECHECK(this->CodeDb((Dao_97::DatabasePtr*)&pRet));
    return pRet;
  }

  BSTR __fastcall BuildCriteria(BSTR Field/*[in]*/, short FieldType/*[in]*/, BSTR Expression/*[in]*/)
  {
    BSTR pRet = 0;
    OLECHECK(this->BuildCriteria(Field, FieldType, Expression, (BSTR*)&pRet));
    return pRet;
  }

  Dao_97::WorkspacePtr __fastcall DefaultWorkspaceClone(void)
  {
    Dao_97::WorkspacePtr pRet;
    OLECHECK(this->DefaultWorkspaceClone((Dao_97::WorkspacePtr*)&pRet));
    return pRet;
  }

  int __fastcall hWndAccessApp(void)
  {
    int phWndAccessAppWnd;
    OLECHECK(this->hWndAccessApp((int*)&phWndAccessAppWnd));
    return phWndAccessAppWnd;
  }

  TVariant __fastcall Run(BSTR Procedure/*[in]*/, TVariant* Arg1/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg2/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg3/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg4/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg5/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg6/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg7/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg8/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg9/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg10/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg11/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg12/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg13/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg14/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg15/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg16/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg17/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg18/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg19/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg20/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg21/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg22/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg23/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg24/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg25/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg26/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg27/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg28/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg29/*[in,out,opt]*/= TNoParam(), 
                          TVariant* Arg30/*[in,out,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->Run(Procedure, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, 
                       Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, 
                       Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall Nz(TVariantInParam Value/*[in]*/, 
                         TVariantInParam ValueIfNull/*[in,opt]*/= TNoParam())
  {
    TVariant pRet;
    OLECHECK(this->Nz(Value, ValueIfNull, (TVariant*)&pRet));
    return pRet;
  }

  LPDISPATCH __fastcall LoadPicture(BSTR FileName/*[in]*/)
  {
    LPDISPATCH pRet;
    OLECHECK(this->LoadPicture(FileName, (LPDISPATCH*)&pRet));
    return pRet;
  }

  TVariant __fastcall AccessError(TVariantInParam ErrorNumber/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->AccessError(ErrorNumber, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall BuilderString(void)
  {
    TVariant pRet;
    OLECHECK(this->BuilderString((TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall StringFromGUID(TVariantInParam Guid/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->StringFromGUID(Guid, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall GUIDFromString(TVariantInParam String/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->GUIDFromString(String, (TVariant*)&pRet));
    return pRet;
  }

  TVariant __fastcall AppLoadString(long id/*[in]*/)
  {
    TVariant pRet;
    OLECHECK(this->AppLoadString(id, (TVariant*)&pRet));
    return pRet;
  }

  Office_97::CommandBarsPtr __fastcall get_CommandBars(void)
  {
    Office_97::CommandBarsPtr pRet;
    OLECHECK(this->get_CommandBars((Office_97::CommandBarsPtr*)&pRet));
    return pRet;
  }

  Office_97::AssistantPtr __fastcall get_Assistant(void)
  {
    Office_97::AssistantPtr pRet;
    OLECHECK(this->get_Assistant((Office_97::AssistantPtr*)&pRet));
    return pRet;
  }

  Access_97::AccessReferencesPtr __fastcall get_References(void)
  {
    Access_97::AccessReferencesPtr pRet;
    OLECHECK(this->get_References((Access_97::AccessReferencesPtr*)&pRet));
    return pRet;
  }

  Access_97::ModulesPtr __fastcall get_Modules(void)
  {
    Access_97::ModulesPtr pRet;
    OLECHECK(this->get_Modules((Access_97::ModulesPtr*)&pRet));
    return pRet;
  }

  Office_97::FileSearchPtr __fastcall get_FileSearch(void)
  {
    Office_97::FileSearchPtr pRet;
    OLECHECK(this->get_FileSearch((Office_97::FileSearchPtr*)&pRet));
    return pRet;
  }

  TOLEBOOL __fastcall get_IsCompiled(void)
  {
    TOLEBOOL pfCompiled;
    OLECHECK(this->get_IsCompiled((TOLEBOOL*)&pfCompiled));
    return pfCompiled;
  }

  BSTR __fastcall HyperlinkPart(TVariantInParam Hyperlink/*[in]*/, 
                                Access_97::AcHyperlinkPart Part/*[in,def,opt]*/)
  {
    BSTR pRet = 0;
    OLECHECK(this->HyperlinkPart(Hyperlink, Part, (BSTR*)&pRet));
    return pRet;
  }


  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      CodeContextObject = {read = get_CodeContextObject};
  __property   BSTR            MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   long            CurrentObjectType = {read = get_CurrentObjectType};
  __property   BSTR            CurrentObjectName = {read = get_CurrentObjectName};
  __property   Access_97::Forms_Ptr Forms = {read = get_Forms};
  __property   Access_97::ReportsPtr Reports = {read = get_Reports};
  __property   Access_97::ScreenPtr Screen = {read = get_Screen};
  __property   Access_97::IDoCmdPtr DoCmd = {read = get_DoCmd};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        UserControl = {read = get_UserControl, write = set_UserControl};
  __property   Dao_97::DBEnginePtr DBEngine = {read = get_DBEngine};
  __property   Office_97::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Office_97::AssistantPtr Assistant = {read = get_Assistant};
  __property   Access_97::AccessReferencesPtr References = {read = get_References};
  __property   Access_97::ModulesPtr Modules = {read = get_Modules};
  __property   Office_97::FileSearchPtr FileSearch = {read = get_FileSearch};
  __property   TOLEBOOL        IsCompiled = {read = get_IsCompiled};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Reference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB106212-9C89-11CF-A2B3-00A0C90542FF}
// *********************************************************************//
interface Reference  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Collection(Access_97::AccessReferencesPtr* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Guid(BSTR* pbstrGuid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Major(long* pMajor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Minor(long* pMinor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FullPath(BSTR* pbstrFullPath/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BuiltIn(TOLEBOOL* pfBuiltIn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsBroken(TOLEBOOL* pfIsBroken/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Kind(Access_97::RefKind* pKind/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::AccessReferencesPtr __fastcall get_Collection(void)
  {
    Access_97::AccessReferencesPtr retval;
    OLECHECK(this->get_Collection((Access_97::AccessReferencesPtr*)&retval));
    return retval;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Guid(void)
  {
    BSTR pbstrGuid = 0;
    OLECHECK(this->get_Guid((BSTR*)&pbstrGuid));
    return pbstrGuid;
  }

  long __fastcall get_Major(void)
  {
    long pMajor;
    OLECHECK(this->get_Major((long*)&pMajor));
    return pMajor;
  }

  long __fastcall get_Minor(void)
  {
    long pMinor;
    OLECHECK(this->get_Minor((long*)&pMinor));
    return pMinor;
  }

  BSTR __fastcall get_FullPath(void)
  {
    BSTR pbstrFullPath = 0;
    OLECHECK(this->get_FullPath((BSTR*)&pbstrFullPath));
    return pbstrFullPath;
  }

  TOLEBOOL __fastcall get_BuiltIn(void)
  {
    TOLEBOOL pfBuiltIn;
    OLECHECK(this->get_BuiltIn((TOLEBOOL*)&pfBuiltIn));
    return pfBuiltIn;
  }

  TOLEBOOL __fastcall get_IsBroken(void)
  {
    TOLEBOOL pfIsBroken;
    OLECHECK(this->get_IsBroken((TOLEBOOL*)&pfIsBroken));
    return pfIsBroken;
  }

  Access_97::RefKind __fastcall get_Kind(void)
  {
    Access_97::RefKind pKind;
    OLECHECK(this->get_Kind((Access_97::RefKind*)&pKind));
    return pKind;
  }


  __property   Access_97::AccessReferencesPtr Collection = {read = get_Collection};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Guid = {read = get_Guid};
  __property   long            Major = {read = get_Major};
  __property   long            Minor = {read = get_Minor};
  __property   BSTR            FullPath = {read = get_FullPath};
  __property   TOLEBOOL        BuiltIn = {read = get_BuiltIn};
  __property   TOLEBOOL        IsBroken = {read = get_IsBroken};
  __property   Access_97::RefKind Kind = {read = get_Kind};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _References
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB106213-9C89-11CF-A2B3-00A0C90542FF}
// *********************************************************************//
interface _References  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam var/*[in]*/, 
                                         Access_97::ReferencePtr* Reference/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, 
                                                long Minor/*[in]*/, 
                                                Access_97::ReferencePtr* Reference/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddFromFile(BSTR FileName/*[in]*/, 
                                                Access_97::ReferencePtr* Reference/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Remove(Access_97::ReferencePtr Reference/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH retval;
    OLECHECK(this->get_Parent((LPDISPATCH*)&retval));
    return retval;
  }

  Access_97::ReferencePtr __fastcall Item(TVariantInParam var/*[in]*/)
  {
    Access_97::ReferencePtr Reference;
    OLECHECK(this->Item(var, (Access_97::ReferencePtr*)&Reference));
    return Reference;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppenum;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppenum));
    return ppenum;
  }

  Access_97::ReferencePtr __fastcall AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, 
                                                 long Minor/*[in]*/)
  {
    Access_97::ReferencePtr Reference;
    OLECHECK(this->AddFromGuid(Guid, Major, Minor, (Access_97::ReferencePtr*)&Reference));
    return Reference;
  }

  Access_97::ReferencePtr __fastcall AddFromFile(BSTR FileName/*[in]*/)
  {
    Access_97::ReferencePtr Reference;
    OLECHECK(this->AddFromFile(FileName, (Access_97::ReferencePtr*)&Reference));
    return Reference;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _References_Events
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {F163F201-ADA2-11CF-89A9-00A0C9054129}
// *********************************************************************//
interface _References_Events : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Access_97::ReferencePtr Reference)
  {
    _TDispID _dispid(/* ItemAdded */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Access_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Access_97::ReferencePtr Reference)
  {
    _TDispID _dispid(/* ItemRemoved */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Access_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: _Dummy
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B06E320-B23C-11CF-89A8-00A0C9054129}
// *********************************************************************//
interface _Dummy  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DummyEvents
// Flags:     (16) Hidden
// GUID:      {58BF3100-B580-11CF-89A8-00A0C9054129}
// *********************************************************************//
interface _DummyEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Initialize(void) = 0; // [-6]
  virtual HRESULT STDMETHODCALLTYPE Terminate(void) = 0; // [-7]
};

// *********************************************************************//
// Interface: ___IVbaModule
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E16E-0000-0000-C000-000000000046}
// *********************************************************************//
interface ___IVbaModule  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPUNKNOWN* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VBA(LPUNKNOWN* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstrName/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE AddFromString(BSTR String/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE AddFromFile(BSTR FileName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Lines(long Line/*[in]*/, long cLine/*[in]*/, 
                                              BSTR* String/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CountOfLines(long* CountOfLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE InsertLines(long Line/*[in]*/, BSTR String/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE DeleteLines(long StartLine/*[in]*/, long Count/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                                      Access_97::___ProcKind ProcKind/*[in]*/, 
                                                      long* ProcStartLine/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                       Access_97::___ProcKind ProcKind/*[in]*/, 
                                                       long* ProcCountLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                                     Access_97::___ProcKind ProcKind/*[in]*/, 
                                                     long* ProcBodyLine/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ProcOfLine(long Line/*[in]*/, 
                                                   Access_97::___ProcKind* pprockind/*[out]*/, 
                                                   BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DeclCountOfLines(long* pDeclCountOfLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/, 
                                                    long* Line/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                         long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                                         long* EndColumn/*[in,out]*/, 
                                         TOLEBOOL WholeWord/*[in,def,opt]*/, 
                                         TOLEBOOL MatchCase/*[in,def,opt]*/, 
                                         TOLEBOOL PatternSearch/*[in,def,opt]*/, 
                                         TOLEBOOL* pfFound/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GetEditor(Access_97::___EditorPtr* ___Editor/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get_Parent(void)
  {
    LPUNKNOWN retval;
    OLECHECK(this->get_Parent((LPUNKNOWN*)&retval));
    return retval;
  }

  LPUNKNOWN __fastcall get_VBA(void)
  {
    LPUNKNOWN retval;
    OLECHECK(this->get_VBA((LPUNKNOWN*)&retval));
    return retval;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Lines(long Line/*[in]*/, long cLine/*[in]*/)
  {
    BSTR String = 0;
    OLECHECK(this->get_Lines(Line, cLine, (BSTR*)&String));
    return String;
  }

  long __fastcall get_CountOfLines(void)
  {
    long CountOfLines;
    OLECHECK(this->get_CountOfLines((long*)&CountOfLines));
    return CountOfLines;
  }

  long __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, Access_97::___ProcKind ProcKind/*[in]*/)
  {
    long ProcStartLine;
    OLECHECK(this->get_ProcStartLine(ProcName, ProcKind, (long*)&ProcStartLine));
    return ProcStartLine;
  }

  long __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, Access_97::___ProcKind ProcKind/*[in]*/)
  {
    long ProcCountLines;
    OLECHECK(this->get_ProcCountLines(ProcName, ProcKind, (long*)&ProcCountLines));
    return ProcCountLines;
  }

  long __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, Access_97::___ProcKind ProcKind/*[in]*/)
  {
    long ProcBodyLine;
    OLECHECK(this->get_ProcBodyLine(ProcName, ProcKind, (long*)&ProcBodyLine));
    return ProcBodyLine;
  }

  BSTR __fastcall get_ProcOfLine(long Line/*[in]*/, Access_97::___ProcKind* pprockind/*[out]*/)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_ProcOfLine(Line, pprockind, (BSTR*)&pbstrName));
    return pbstrName;
  }

  long __fastcall get_DeclCountOfLines(void)
  {
    long pDeclCountOfLines;
    OLECHECK(this->get_DeclCountOfLines((long*)&pDeclCountOfLines));
    return pDeclCountOfLines;
  }

  long __fastcall CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/)
  {
    long Line;
    OLECHECK(this->CreateEventProc(EventName, ObjectName, (long*)&Line));
    return Line;
  }

  TOLEBOOL __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                           long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                           long* EndColumn/*[in,out]*/, TOLEBOOL WholeWord/*[in,def,opt]*/, 
                           TOLEBOOL MatchCase/*[in,def,opt]*/, 
                           TOLEBOOL PatternSearch/*[in,def,opt]*/)
  {
    TOLEBOOL pfFound;
    OLECHECK(this->Find(Target, StartLine, StartColumn, EndLine, EndColumn, WholeWord, MatchCase, 
                        PatternSearch, (TOLEBOOL*)&pfFound));
    return pfFound;
  }

  Access_97::___EditorPtr __fastcall get_GetEditor(void)
  {
    Access_97::___EditorPtr ___Editor;
    OLECHECK(this->get_GetEditor((Access_97::___EditorPtr*)&___Editor));
    return ___Editor;
  }


  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            CountOfLines = {read = get_CountOfLines};
  __property   long            DeclCountOfLines = {read = get_DeclCountOfLines};
  __property   Access_97::___EditorPtr GetEditor = {read = get_GetEditor};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ___IVbaEditors
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E172-0000-0000-C000-000000000046}
// *********************************************************************//
interface ___IVbaEditors  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPUNKNOWN* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VBA(LPUNKNOWN* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam var/*[in]*/, 
                                         Access_97::___EditorPtr* ___Editor/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Current(Access_97::___EditorPtr* ___Editor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Current(Access_97::___EditorPtr ___Editor/*[in]*/) = 0; // [1610743813]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get_Parent(void)
  {
    LPUNKNOWN retval;
    OLECHECK(this->get_Parent((LPUNKNOWN*)&retval));
    return retval;
  }

  LPUNKNOWN __fastcall get_VBA(void)
  {
    LPUNKNOWN retval;
    OLECHECK(this->get_VBA((LPUNKNOWN*)&retval));
    return retval;
  }

  Access_97::___EditorPtr __fastcall Item(TVariantInParam var/*[in]*/)
  {
    Access_97::___EditorPtr ___Editor;
    OLECHECK(this->Item(var, (Access_97::___EditorPtr*)&___Editor));
    return ___Editor;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppenum;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppenum));
    return ppenum;
  }

  Access_97::___EditorPtr __fastcall get_Current(void)
  {
    Access_97::___EditorPtr ___Editor;
    OLECHECK(this->get_Current((Access_97::___EditorPtr*)&___Editor));
    return ___Editor;
  }


  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   long            Count = {read = get_Count};
  __property   Access_97::___EditorPtr Current = {read = get_Current, write = set_Current};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ___IVbaEditor
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E176-0000-0000-C000-000000000046}
// *********************************************************************//
interface ___IVbaEditor  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPUNKNOWN* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VBA(LPUNKNOWN* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Window(LPDISPATCH* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE GetSelection(long* StartLine/*[out]*/, 
                                                 long* StartColumn/*[out]*/, long* EndLine/*[out]*/, 
                                                 long* EndColumn/*[out]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetSelection(long StartLine/*[in]*/, long StartColumn/*[in]*/, 
                                                 long EndLine/*[in]*/, long EndColumn/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TopLine(long* TopLine/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TopLine(long TopLine/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE get_CountOfVisibleLines(long* CountOfVisibleLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get____CodeModule(Access_97::___CodeModulePtr* ___CodeModule/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Show(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_CodePaneView(Access_97::___vbext_CodePaneview* pCodePaneview/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get_Parent(void)
  {
    LPUNKNOWN retval;
    OLECHECK(this->get_Parent((LPUNKNOWN*)&retval));
    return retval;
  }

  LPUNKNOWN __fastcall get_VBA(void)
  {
    LPUNKNOWN retval;
    OLECHECK(this->get_VBA((LPUNKNOWN*)&retval));
    return retval;
  }

  LPDISPATCH __fastcall get_Window(void)
  {
    LPDISPATCH retval;
    OLECHECK(this->get_Window((LPDISPATCH*)&retval));
    return retval;
  }

  long __fastcall get_TopLine(void)
  {
    long TopLine;
    OLECHECK(this->get_TopLine((long*)&TopLine));
    return TopLine;
  }

  long __fastcall get_CountOfVisibleLines(void)
  {
    long CountOfVisibleLines;
    OLECHECK(this->get_CountOfVisibleLines((long*)&CountOfVisibleLines));
    return CountOfVisibleLines;
  }

  Access_97::___CodeModulePtr __fastcall get____CodeModule(void)
  {
    Access_97::___CodeModulePtr ___CodeModule;
    OLECHECK(this->get____CodeModule((Access_97::___CodeModulePtr*)&___CodeModule));
    return ___CodeModule;
  }

  Access_97::___vbext_CodePaneview __fastcall get_CodePaneView(void)
  {
    Access_97::___vbext_CodePaneview pCodePaneview;
    OLECHECK(this->get_CodePaneView((Access_97::___vbext_CodePaneview*)&pCodePaneview));
    return pCodePaneview;
  }


  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   LPDISPATCH      Window = {read = get_Window};
  __property   long            TopLine = {read = get_TopLine, write = set_TopLine};
  __property   long            CountOfVisibleLines = {read = get_CountOfVisibleLines};
  __property   Access_97::___CodeModulePtr ___CodeModule = {read = get____CodeModule};
  __property   Access_97::___vbext_CodePaneview CodePaneView = {read = get_CodePaneView};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IVbaReferences
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17A-0000-0000-C000-000000000046}
// *********************************************************************//
interface IVbaReferences  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPUNKNOWN* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VBA(LPUNKNOWN* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Item(TVariantInParam var/*[in]*/, 
                                         Access_97::___ReferencePtr* ___Reference/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* Count/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE CreateFromGuid(BSTR bstrGuid/*[in]*/, long Major/*[in]*/, 
                                                   long Minor/*[in]*/, 
                                                   Access_97::___ReferencePtr* ___Reference/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE CreateFromFile(BSTR bstrFileName/*[in]*/, 
                                                   Access_97::___ReferencePtr* ___Reference/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Remove(Access_97::___ReferencePtr ___Reference/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get_Parent(void)
  {
    LPUNKNOWN retval;
    OLECHECK(this->get_Parent((LPUNKNOWN*)&retval));
    return retval;
  }

  LPUNKNOWN __fastcall get_VBA(void)
  {
    LPUNKNOWN retval;
    OLECHECK(this->get_VBA((LPUNKNOWN*)&retval));
    return retval;
  }

  Access_97::___ReferencePtr __fastcall Item(TVariantInParam var/*[in]*/)
  {
    Access_97::___ReferencePtr ___Reference;
    OLECHECK(this->Item(var, (Access_97::___ReferencePtr*)&___Reference));
    return ___Reference;
  }

  long __fastcall get_Count(void)
  {
    long Count;
    OLECHECK(this->get_Count((long*)&Count));
    return Count;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppenum;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppenum));
    return ppenum;
  }

  Access_97::___ReferencePtr __fastcall CreateFromGuid(BSTR bstrGuid/*[in]*/, long Major/*[in]*/, 
                                                       long Minor/*[in]*/)
  {
    Access_97::___ReferencePtr ___Reference;
    OLECHECK(this->CreateFromGuid(bstrGuid, Major, Minor, (Access_97::___ReferencePtr*)&___Reference));
    return ___Reference;
  }

  Access_97::___ReferencePtr __fastcall CreateFromFile(BSTR bstrFileName/*[in]*/)
  {
    Access_97::___ReferencePtr ___Reference;
    OLECHECK(this->CreateFromFile(bstrFileName, (Access_97::___ReferencePtr*)&___Reference));
    return ___Reference;
  }


  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ___Reference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17E-0000-0000-C000-000000000046}
// *********************************************************************//
interface ___Reference  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Collection(Access_97::IVbaReferencesPtr* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_VBA(LPDISPATCH* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Guid(BSTR* pbstrGuid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Major(long* pMajor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Minor(long* pMinor/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Location(BSTR* pbstrLocation/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsDefault(TOLEBOOL* pfIsDefault/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_IsBroken(TOLEBOOL* pfIsBroken/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Kind(Access_97::___RefKind* pKind/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Access_97::IVbaReferencesPtr __fastcall get_Collection(void)
  {
    Access_97::IVbaReferencesPtr retval;
    OLECHECK(this->get_Collection((Access_97::IVbaReferencesPtr*)&retval));
    return retval;
  }

  LPDISPATCH __fastcall get_VBA(void)
  {
    LPDISPATCH retval;
    OLECHECK(this->get_VBA((LPDISPATCH*)&retval));
    return retval;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Guid(void)
  {
    BSTR pbstrGuid = 0;
    OLECHECK(this->get_Guid((BSTR*)&pbstrGuid));
    return pbstrGuid;
  }

  long __fastcall get_Major(void)
  {
    long pMajor;
    OLECHECK(this->get_Major((long*)&pMajor));
    return pMajor;
  }

  long __fastcall get_Minor(void)
  {
    long pMinor;
    OLECHECK(this->get_Minor((long*)&pMinor));
    return pMinor;
  }

  BSTR __fastcall get_Location(void)
  {
    BSTR pbstrLocation = 0;
    OLECHECK(this->get_Location((BSTR*)&pbstrLocation));
    return pbstrLocation;
  }

  TOLEBOOL __fastcall get_IsDefault(void)
  {
    TOLEBOOL pfIsDefault;
    OLECHECK(this->get_IsDefault((TOLEBOOL*)&pfIsDefault));
    return pfIsDefault;
  }

  TOLEBOOL __fastcall get_IsBroken(void)
  {
    TOLEBOOL pfIsBroken;
    OLECHECK(this->get_IsBroken((TOLEBOOL*)&pfIsBroken));
    return pfIsBroken;
  }

  Access_97::___RefKind __fastcall get_Kind(void)
  {
    Access_97::___RefKind pKind;
    OLECHECK(this->get_Kind((Access_97::___RefKind*)&pKind));
    return pKind;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Description((BSTR*)&pbstrName));
    return pbstrName;
  }


  __property   Access_97::IVbaReferencesPtr Collection = {read = get_Collection};
  __property   LPDISPATCH      VBA = {read = get_VBA};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Guid = {read = get_Guid};
  __property   long            Major = {read = get_Major};
  __property   long            Minor = {read = get_Minor};
  __property   BSTR            Location = {read = get_Location};
  __property   TOLEBOOL        IsDefault = {read = get_IsDefault};
  __property   TOLEBOOL        IsBroken = {read = get_IsBroken};
  __property   Access_97::___RefKind Kind = {read = get_Kind};
  __property   BSTR            Description = {read = get_Description};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ___IVbaExtReferencesEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {CDDE3804-2064-11CF-867F-00AA005FF34A}
// *********************************************************************//
interface ___IVbaExtReferencesEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Access_97::___ReferencePtr ___Reference)
  {
    _TDispID _dispid(/* ItemAdded */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Access_97::___Reference*)___Reference /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Access_97::___ReferencePtr ___Reference)
  {
    _TDispID _dispid(/* ItemRemoved */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Access_97::___Reference*)___Reference /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIDoCmd
// Interface: IDoCmd
// *********************************************************************//
template <class T /* IDoCmd */ >
class TCOMIDoCmdT : public TComInterface<IDoCmd>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDoCmdT() {}
  TCOMIDoCmdT(IDoCmd *intf, bool addRef = false) : TComInterface<IDoCmd>(intf, addRef) {}
  TCOMIDoCmdT(const TCOMIDoCmdT& src) : TComInterface<IDoCmd>(src) {}
  TCOMIDoCmdT& operator=(const TCOMIDoCmdT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall AddMenu(TVariantInParam MenuName/*[in]*/, 
                                     TVariantInParam MenuMacroName/*[in]*/, 
                                     TVariantInParam StatusBarText/*[in]*/);
  HRESULT         __fastcall ApplyFilter(TVariantInParam FilterName/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam WhereCondition/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Beep(void);
  HRESULT         __fastcall CancelEvent(void);
  HRESULT         __fastcall Close(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                   TVariantInParam ObjectName/*[in,opt]*/, 
                                   Access_97::AcCloseSave Save/*[in,def,opt]*/);
  HRESULT         __fastcall CopyObject(TVariantInParam DestinationDatabase/*[in,opt]*/, 
                                        TVariantInParam NewName/*[in,opt]*/, 
                                        Access_97::AcObjectType SourceObjectType/*[in,def,opt]*/, 
                                        TVariantInParam SourceObjectName/*[in,opt]*/);
  HRESULT         __fastcall DoMenuItem(TVariantInParam MenuBar/*[in]*/, 
                                        TVariantInParam MenuName/*[in]*/, 
                                        TVariantInParam Command/*[in]*/, 
                                        TVariantInParam Subcommand/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam Version/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Echo(TVariantInParam EchoOn/*[in]*/, 
                                  TVariantInParam StatusBarText/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall FindNext(void);
  HRESULT         __fastcall FindRecord(TVariantInParam FindWhat/*[in]*/, 
                                        Access_97::AcFindMatch Match/*[in,def,opt]*/, 
                                        TVariantInParam MatchCase/*[in,opt]*/, 
                                        Access_97::AcSearchDirection Search/*[in,def,opt]*/, 
                                        TVariantInParam SearchAsFormatted/*[in,opt]*/, 
                                        Access_97::AcFindField OnlyCurrentField/*[in,def,opt]*/, 
                                        TVariantInParam FindFirst/*[in,opt]*/);
  HRESULT         __fastcall GoToControl(TVariantInParam ControlName/*[in]*/);
  HRESULT         __fastcall GoToPage(TVariantInParam PageNumber/*[in]*/, 
                                      TVariantInParam Right/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam Down/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall GoToRecord(Access_97::AcDataObjectType ObjectType/*[in,def,opt]*/, 
                                        TVariantInParam ObjectName/*[in,opt]*/, 
                                        Access_97::AcRecord Record/*[in,def,opt]*/, 
                                        TVariantInParam Offset/*[in,opt]*/);
  HRESULT         __fastcall Hourglass(TVariantInParam HourglassOn/*[in]*/);
  HRESULT         __fastcall Maximize(void);
  HRESULT         __fastcall Minimize(void);
  HRESULT         __fastcall MoveSize(TVariantInParam Right/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam Down/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam Width/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam Height/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall OpenForm(TVariantInParam FormName/*[in]*/, 
                                      Access_97::AcFormView View/*[in,def,opt]*/, 
                                      TVariantInParam FilterName/*[in,opt]*/, 
                                      TVariantInParam WhereCondition/*[in,opt]*/, 
                                      Access_97::AcFormOpenDataMode DataMode/*[in,def,opt]*/, 
                                      Access_97::AcWindowMode WindowMode/*[in,def,opt]*/, 
                                      TVariantInParam OpenArgs/*[in,opt]*/);
  HRESULT         __fastcall OpenQuery(TVariantInParam QueryName/*[in]*/, 
                                       Access_97::AcView View/*[in,def,opt]*/, 
                                       Access_97::AcOpenDataMode DataMode/*[in,def,opt]*/);
  HRESULT         __fastcall OpenTable(TVariantInParam TableName/*[in]*/, 
                                       Access_97::AcView View/*[in,def,opt]*/, 
                                       Access_97::AcOpenDataMode DataMode/*[in,def,opt]*/);
  HRESULT         __fastcall PrintOut(Access_97::AcPrintRange PrintRange/*[in,def,opt]*/, 
                                      TVariantInParam PageFrom/*[in,opt]*/, 
                                      TVariantInParam PageTo/*[in,opt]*/, 
                                      Access_97::AcPrintQuality PrintQuality/*[in,def,opt]*/, 
                                      TVariantInParam Copies/*[in,opt]*/, 
                                      TVariantInParam CollateCopies/*[in,opt]*/);
  HRESULT         __fastcall Quit(Access_97::AcQuitOption Options/*[in,def,opt]*/);
  HRESULT         __fastcall Requery(TVariantInParam ControlName/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall RepaintObject(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                           TVariantInParam ObjectName/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Rename(TVariantInParam NewName/*[in]*/, 
                                    Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                    TVariantInParam OldName/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Restore(void);
  HRESULT         __fastcall RunMacro(TVariantInParam MacroName/*[in]*/, 
                                      TVariantInParam RepeatCount/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam RepeatExpression/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall RunSQL(TVariantInParam SQLStatement/*[in]*/, 
                                    TVariantInParam UseTransaction/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall SelectObject(Access_97::AcObjectType ObjectType/*[in]*/, 
                                          TVariantInParam ObjectName/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam InDatabaseWindow/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall SetWarnings(TVariantInParam WarningsOn/*[in]*/);
  HRESULT         __fastcall ShowAllRecords(void);
  HRESULT         __fastcall OpenReport(TVariantInParam ReportName/*[in]*/, 
                                        Access_97::AcView View/*[in,def,opt]*/, 
                                        TVariantInParam FilterName/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam WhereCondition/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall TransferDatabase(Access_97::AcDataTransferType TransferType/*[in,def,opt]*/, 
                                              TVariantInParam DatabaseType/*[in,opt]*/, 
                                              TVariantInParam DatabaseName/*[in,opt]*/, 
                                              Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                              TVariantInParam Source/*[in,opt]*/, 
                                              TVariantInParam Destination/*[in,opt]*/, 
                                              TVariantInParam StructureOnly/*[in,opt]*/, 
                                              TVariantInParam StoreLogin/*[in,opt]*/);
  HRESULT         __fastcall TransferSpreadsheet(Access_97::AcDataTransferType TransferType/*[in,def,opt]*/, 
                                                 Access_97::AcSpreadSheetType SpreadsheetType/*[in,def,opt]*/, 
                                                 TVariantInParam TableName/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam FileName/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam HasFieldNames/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Range/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam UseOA/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall TransferText(Access_97::AcTextTransferType TransferType/*[in,def,opt]*/, 
                                          TVariantInParam SpecificationName/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam TableName/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam FileName/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam HasFieldNames/*[in,opt]*/= TNoParam(), 
                                          TVariantInParam HTMLTableName/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall OutputTo(Access_97::AcOutputObjectType ObjectType/*[in]*/, 
                                      TVariantInParam ObjectName/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam OutputFormat/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam OutputFile/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam AutoStart/*[in,opt]*/= TNoParam(), 
                                      TVariantInParam TemplateFile/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DeleteObject(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                          TVariantInParam ObjectName/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall OpenModule(TVariantInParam ModuleName/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam ProcedureName/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall SendObject(Access_97::AcSendObjectType ObjectType/*[in,def,opt]*/, 
                                        TVariantInParam ObjectName/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam OutputFormat/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam To/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam Cc/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam Bcc/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam Subject/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam MessageText/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam EditMessage/*[in,opt]*/= TNoParam(), 
                                        TVariantInParam TemplateFile/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall ShowToolbar(TVariantInParam ToolbarName/*[in]*/, 
                                         TVariantInParam Show/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Save(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                  TVariantInParam ObjectName/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall SetMenuItem(TVariantInParam MenuIndex/*[in]*/, 
                                         TVariantInParam CommandIndex/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam SubcommandIndex/*[in,opt]*/= TNoParam(), 
                                         TVariantInParam Flag/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall RunCommand(Access_97::AcCommand Command/*[in]*/);

};
typedef TCOMIDoCmdT<IDoCmd> TCOMIDoCmd;

// *********************************************************************//
// DispIntf:  IDoCmd
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C547E760-9658-101B-81EE-00AA004750E2}
// *********************************************************************//
template<class T>
class IDoCmdDispT : public TAutoDriver<IDoCmd>
{
public:
  IDoCmdDispT(){}

  IDoCmdDispT(IDoCmd *pintf)
  {
    TAutoDriver<IDoCmd>::Bind(pintf, false);
  }

  IDoCmdDispT(IDoCmdPtr pintf)
  {
    TAutoDriver<IDoCmd>::Bind(pintf, true);
  }

  IDoCmdDispT& operator=(IDoCmd *pintf)
  {
    TAutoDriver<IDoCmd>::Bind(pintf, false);
    return *this;
  }

  IDoCmdDispT& operator=(IDoCmdPtr pintf)
  {
    TAutoDriver<IDoCmd>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DoCmd));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DoCmd);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddMenu(TVariantInParam MenuName/*[in]*/, 
                                                TVariantInParam MenuMacroName/*[in]*/, 
                                                TVariantInParam StatusBarText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyFilter(TVariantInParam FilterName/*[in,opt]*/= TNoParam()
                                                    , 
                                                    TVariantInParam WhereCondition/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Beep();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CancelEvent();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                              TVariantInParam ObjectName/*[in,opt]*/, 
                                              Access_97::AcCloseSave Save/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CopyObject(TVariantInParam DestinationDatabase/*[in,opt]*/, 
                                                   TVariantInParam NewName/*[in,opt]*/, 
                                                   Access_97::AcObjectType SourceObjectType/*[in,def,opt]*/
                                                   , TVariantInParam SourceObjectName/*[in,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DoMenuItem(TVariantInParam MenuBar/*[in]*/, 
                                                   TVariantInParam MenuName/*[in]*/, 
                                                   TVariantInParam Command/*[in]*/, 
                                                   TVariantInParam Subcommand/*[in,opt]*/= TNoParam()
                                                   , TVariantInParam Version/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Echo(TVariantInParam EchoOn/*[in]*/, 
                                             TVariantInParam StatusBarText/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindNext();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindRecord(TVariantInParam FindWhat/*[in]*/, 
                                                   Access_97::AcFindMatch Match/*[in,def,opt]*/, 
                                                   TVariantInParam MatchCase/*[in,opt]*/, 
                                                   Access_97::AcSearchDirection Search/*[in,def,opt]*/
                                                   , TVariantInParam SearchAsFormatted/*[in,opt]*/, 
                                                   Access_97::AcFindField OnlyCurrentField/*[in,def,opt]*/
                                                   , TVariantInParam FindFirst/*[in,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoToControl(TVariantInParam ControlName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoToPage(TVariantInParam PageNumber/*[in]*/, 
                                                 TVariantInParam Right/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Down/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoToRecord(Access_97::AcDataObjectType ObjectType/*[in,def,opt]*/
                                                   , TVariantInParam ObjectName/*[in,opt]*/, 
                                                   Access_97::AcRecord Record/*[in,def,opt]*/, 
                                                   TVariantInParam Offset/*[in,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Hourglass(TVariantInParam HourglassOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Maximize();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Minimize();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MoveSize(TVariantInParam Right/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Down/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Width/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam Height/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OpenForm(TVariantInParam FormName/*[in]*/, 
                                                 Access_97::AcFormView View/*[in,def,opt]*/, 
                                                 TVariantInParam FilterName/*[in,opt]*/, 
                                                 TVariantInParam WhereCondition/*[in,opt]*/, 
                                                 Access_97::AcFormOpenDataMode DataMode/*[in,def,opt]*/
                                                 , 
                                                 Access_97::AcWindowMode WindowMode/*[in,def,opt]*/
                                                 , TVariantInParam OpenArgs/*[in,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OpenQuery(TVariantInParam QueryName/*[in]*/, 
                                                  Access_97::AcView View/*[in,def,opt]*/, 
                                                  Access_97::AcOpenDataMode DataMode/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OpenTable(TVariantInParam TableName/*[in]*/, 
                                                  Access_97::AcView View/*[in,def,opt]*/, 
                                                  Access_97::AcOpenDataMode DataMode/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PrintOut(Access_97::AcPrintRange PrintRange/*[in,def,opt]*/
                                                 , TVariantInParam PageFrom/*[in,opt]*/, 
                                                 TVariantInParam PageTo/*[in,opt]*/, 
                                                 Access_97::AcPrintQuality PrintQuality/*[in,def,opt]*/
                                                 , TVariantInParam Copies/*[in,opt]*/, 
                                                 TVariantInParam CollateCopies/*[in,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Quit(Access_97::AcQuitOption Options/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery(TVariantInParam ControlName/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RepaintObject(Access_97::AcObjectType ObjectType/*[in,def,opt]*/
                                                      , 
                                                      TVariantInParam ObjectName/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Rename(TVariantInParam NewName/*[in]*/, 
                                               Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                               TVariantInParam OldName/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Restore();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RunMacro(TVariantInParam MacroName/*[in]*/, 
                                                 TVariantInParam RepeatCount/*[in,opt]*/= TNoParam()
                                                 , 
                                                 TVariantInParam RepeatExpression/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RunSQL(TVariantInParam SQLStatement/*[in]*/, 
                                               TVariantInParam UseTransaction/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SelectObject(Access_97::AcObjectType ObjectType/*[in]*/, 
                                                     TVariantInParam ObjectName/*[in,opt]*/= TNoParam()
                                                     , 
                                                     TVariantInParam InDatabaseWindow/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetWarnings(TVariantInParam WarningsOn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowAllRecords();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OpenReport(TVariantInParam ReportName/*[in]*/, 
                                                   Access_97::AcView View/*[in,def,opt]*/, 
                                                   TVariantInParam FilterName/*[in,opt]*/= TNoParam()
                                                   , 
                                                   TVariantInParam WhereCondition/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TransferDatabase(Access_97::AcDataTransferType TransferType/*[in,def,opt]*/
                                                         , TVariantInParam DatabaseType/*[in,opt]*/
                                                         , TVariantInParam DatabaseName/*[in,opt]*/
                                                         , 
                                                         Access_97::AcObjectType ObjectType/*[in,def,opt]*/
                                                         , TVariantInParam Source/*[in,opt]*/, 
                                                         TVariantInParam Destination/*[in,opt]*/, 
                                                         TVariantInParam StructureOnly/*[in,opt]*/, 
                                                         TVariantInParam StoreLogin/*[in,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TransferSpreadsheet(Access_97::AcDataTransferType TransferType/*[in,def,opt]*/
                                                            , 
                                                            Access_97::AcSpreadSheetType SpreadsheetType/*[in,def,opt]*/
                                                            , 
                                                            TVariantInParam TableName/*[in,opt]*/= TNoParam()
                                                            , 
                                                            TVariantInParam FileName/*[in,opt]*/= TNoParam()
                                                            , 
                                                            TVariantInParam HasFieldNames/*[in,opt]*/= TNoParam()
                                                            , 
                                                            TVariantInParam Range/*[in,opt]*/= TNoParam()
                                                            , 
                                                            TVariantInParam UseOA/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TransferText(Access_97::AcTextTransferType TransferType/*[in,def,opt]*/
                                                     , 
                                                     TVariantInParam SpecificationName/*[in,opt]*/= TNoParam()
                                                     , 
                                                     TVariantInParam TableName/*[in,opt]*/= TNoParam()
                                                     , 
                                                     TVariantInParam FileName/*[in,opt]*/= TNoParam()
                                                     , 
                                                     TVariantInParam HasFieldNames/*[in,opt]*/= TNoParam()
                                                     , 
                                                     TVariantInParam HTMLTableName/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OutputTo(Access_97::AcOutputObjectType ObjectType/*[in]*/, 
                                                 TVariantInParam ObjectName/*[in,opt]*/= TNoParam()
                                                 , 
                                                 TVariantInParam OutputFormat/*[in,opt]*/= TNoParam()
                                                 , 
                                                 TVariantInParam OutputFile/*[in,opt]*/= TNoParam()
                                                 , TVariantInParam AutoStart/*[in,opt]*/= TNoParam()
                                                 , 
                                                 TVariantInParam TemplateFile/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteObject(Access_97::AcObjectType ObjectType/*[in,def,opt]*/
                                                     , 
                                                     TVariantInParam ObjectName/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OpenModule(TVariantInParam ModuleName/*[in,opt]*/= TNoParam()
                                                   , 
                                                   TVariantInParam ProcedureName/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SendObject(Access_97::AcSendObjectType ObjectType/*[in,def,opt]*/
                                                   , 
                                                   TVariantInParam ObjectName/*[in,opt]*/= TNoParam()
                                                   , 
                                                   TVariantInParam OutputFormat/*[in,opt]*/= TNoParam()
                                                   , TVariantInParam To/*[in,opt]*/= TNoParam(), 
                                                   TVariantInParam Cc/*[in,opt]*/= TNoParam(), 
                                                   TVariantInParam Bcc/*[in,opt]*/= TNoParam(), 
                                                   TVariantInParam Subject/*[in,opt]*/= TNoParam(), 
                                                   TVariantInParam MessageText/*[in,opt]*/= TNoParam()
                                                   , 
                                                   TVariantInParam EditMessage/*[in,opt]*/= TNoParam()
                                                   , 
                                                   TVariantInParam TemplateFile/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowToolbar(TVariantInParam ToolbarName/*[in]*/, 
                                                    TVariantInParam Show/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Save(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                             TVariantInParam ObjectName/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetMenuItem(TVariantInParam MenuIndex/*[in]*/, 
                                                    TVariantInParam CommandIndex/*[in,opt]*/= TNoParam()
                                                    , 
                                                    TVariantInParam SubcommandIndex/*[in,opt]*/= TNoParam()
                                                    , TVariantInParam Flag/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RunCommand(Access_97::AcCommand Command/*[in]*/);

};
typedef IDoCmdDispT<IDoCmd> IDoCmdDisp;

typedef TComInterface<__AccessProperty>  TCOM__AccessProperty;

typedef TComInterface<_AccessProperty>  TCOM_AccessProperty;

// *********************************************************************//
// DispIntf:  _AccessProperty
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD00-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _AccessPropertyDispT : public TAutoDriver<_AccessProperty>
{
public:
  _AccessPropertyDispT(){}

  _AccessPropertyDispT(_AccessProperty *pintf)
  {
    TAutoDriver<_AccessProperty>::Bind(pintf, false);
  }

  _AccessPropertyDispT(_AccessPropertyPtr pintf)
  {
    TAutoDriver<_AccessProperty>::Bind(pintf, true);
  }

  _AccessPropertyDispT& operator=(_AccessProperty *pintf)
  {
    TAutoDriver<_AccessProperty>::Bind(pintf, false);
    return *this;
  }

  _AccessPropertyDispT& operator=(_AccessPropertyPtr pintf)
  {
    TAutoDriver<_AccessProperty>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Category(short* pRet/*[out,retval]*/);
  short           __fastcall get_Category(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pval/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pval/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(short* ptype/*[out,retval]*/);
  short           __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(short ptype/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Inherited(TOLEBOOL* pb/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Inherited(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Dao_97::PropertiesPtr* ppprops/*[out,retval]*/);
  Dao_97::PropertiesPtr __fastcall get_Properties(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   short           Category = {read = get_Category};

  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   short           Type = {read = get_Type, write = set_Type};
  __property   TOLEBOOL        Inherited = {read = get_Inherited};

  __property   Dao_97::PropertiesPtr Properties = {read = get_Properties};
};
typedef _AccessPropertyDispT<_AccessProperty> _AccessPropertyDisp;

typedef TComInterface<Properties>  TCOMProperties;

// *********************************************************************//
// DispIntf:  Properties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD02-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class PropertiesDispT : public TAutoDriver<Properties>
{
public:
  PropertiesDispT(){}

  PropertiesDispT(Properties *pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, false);
  }

  PropertiesDispT(PropertiesPtr pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, true);
  }

  PropertiesDispT& operator=(Properties *pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, false);
    return *this;
  }

  PropertiesDispT& operator=(PropertiesPtr pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pRet/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef PropertiesDispT<Properties> PropertiesDisp;

typedef TComInterface<_ItemsSelected>  TCOM_ItemsSelected;

// *********************************************************************//
// DispIntf:  _ItemsSelected
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {31B09710-EADC-11CD-B9F7-00AA004753B5}
// *********************************************************************//
template<class T>
class _ItemsSelectedDispT : public TAutoDriver<_ItemsSelected>
{
public:
  _ItemsSelectedDispT(){}

  _ItemsSelectedDispT(_ItemsSelected *pintf)
  {
    TAutoDriver<_ItemsSelected>::Bind(pintf, false);
  }

  _ItemsSelectedDispT(_ItemsSelectedPtr pintf)
  {
    TAutoDriver<_ItemsSelected>::Bind(pintf, true);
  }

  _ItemsSelectedDispT& operator=(_ItemsSelected *pintf)
  {
    TAutoDriver<_ItemsSelected>::Bind(pintf, false);
    return *this;
  }

  _ItemsSelectedDispT& operator=(_ItemsSelectedPtr pintf)
  {
    TAutoDriver<_ItemsSelected>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 long* pRet/*[out,retval]*/);
  long            __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pRet/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count};
};
typedef _ItemsSelectedDispT<_ItemsSelected> _ItemsSelectedDisp;

typedef TComInterface<Children>  TCOMChildren;

// *********************************************************************//
// DispIntf:  Children
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E977-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class ChildrenDispT : public TAutoDriver<Children>
{
public:
  ChildrenDispT(){}

  ChildrenDispT(Children *pintf)
  {
    TAutoDriver<Children>::Bind(pintf, false);
  }

  ChildrenDispT(ChildrenPtr pintf)
  {
    TAutoDriver<Children>::Bind(pintf, true);
  }

  ChildrenDispT& operator=(Children *pintf)
  {
    TAutoDriver<Children>::Bind(pintf, false);
    return *this;
  }

  ChildrenDispT& operator=(ChildrenPtr pintf)
  {
    TAutoDriver<Children>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pRet/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   long            Count = {read = get_Count};
};
typedef ChildrenDispT<Children> ChildrenDisp;

// *********************************************************************//
// SmartIntf: TCOM_AccessField
// Interface: _AccessField
// *********************************************************************//
template <class T /* _AccessField */ >
class TCOM_AccessFieldT : public TComInterface<_AccessField>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_AccessFieldT() {}
  TCOM_AccessFieldT(_AccessField *intf, bool addRef = false) : TComInterface<_AccessField>(intf, addRef) {}
  TCOM_AccessFieldT(const TCOM_AccessFieldT& src) : TComInterface<_AccessField>(src) {}
  TCOM_AccessFieldT& operator=(const TCOM_AccessFieldT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);

};
typedef TCOM_AccessFieldT<_AccessField> TCOM_AccessField;

// *********************************************************************//
// DispIntf:  _AccessField
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1C1EAC1-486F-11CE-A65D-00AA003F0F07}
// *********************************************************************//
template<class T>
class _AccessFieldDispT : public TAutoDriver<_AccessField>
{
public:
  _AccessFieldDispT(){}

  _AccessFieldDispT(_AccessField *pintf)
  {
    TAutoDriver<_AccessField>::Bind(pintf, false);
  }

  _AccessFieldDispT(_AccessFieldPtr pintf)
  {
    TAutoDriver<_AccessField>::Bind(pintf, true);
  }

  _AccessFieldDispT& operator=(_AccessField *pintf)
  {
    TAutoDriver<_AccessField>::Bind(pintf, false);
    return *this;
  }

  _AccessFieldDispT& operator=(_AccessFieldPtr pintf)
  {
    TAutoDriver<_AccessField>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessField));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessField);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);

};
typedef _AccessFieldDispT<_AccessField> _AccessFieldDisp;

typedef TComInterface<__Help>  TCOM__Help;

// *********************************************************************//
// SmartIntf: TCOM_Hyperlink
// Interface: _Hyperlink
// *********************************************************************//
template <class T /* _Hyperlink */ >
class TCOM_HyperlinkT : public TComInterface<_Hyperlink>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_HyperlinkT() {}
  TCOM_HyperlinkT(_Hyperlink *intf, bool addRef = false) : TComInterface<_Hyperlink>(intf, addRef) {}
  TCOM_HyperlinkT(const TCOM_HyperlinkT& src) : TComInterface<_Hyperlink>(src) {}
  TCOM_HyperlinkT& operator=(const TCOM_HyperlinkT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_SubAddress(BSTR* pbstrResult/*[out,retval]*/);
  BSTR            __fastcall get_SubAddress(void);
  HRESULT         __fastcall set_SubAddress(TVariantInParam pbstrResult/*[in]*/);
  HRESULT         __fastcall get_Address(BSTR* pbstrResult/*[out,retval]*/);
  BSTR            __fastcall get_Address(void);
  HRESULT         __fastcall set_Address(TVariantInParam pbstrResult/*[in]*/);
  HRESULT         __fastcall AddToFavorites(void);
  HRESULT         __fastcall Follow(TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                    TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                    TVariantInParam ExtraInfo/*[in,opt]*/, 
                                    Office_97::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                    BSTR HeaderInfo/*[in,def,opt]*/);

  __property   BSTR            SubAddress = {read = get_SubAddress};
  __property   BSTR            Address = {read = get_Address};
};
typedef TCOM_HyperlinkT<_Hyperlink> TCOM_Hyperlink;

// *********************************************************************//
// DispIntf:  _Hyperlink
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {50D56611-60AC-11CF-82C9-00AA004B9FE6}
// *********************************************************************//
template<class T>
class _HyperlinkDispT : public TAutoDriver<_Hyperlink>
{
public:
  _HyperlinkDispT(){}

  _HyperlinkDispT(_Hyperlink *pintf)
  {
    TAutoDriver<_Hyperlink>::Bind(pintf, false);
  }

  _HyperlinkDispT(_HyperlinkPtr pintf)
  {
    TAutoDriver<_Hyperlink>::Bind(pintf, true);
  }

  _HyperlinkDispT& operator=(_Hyperlink *pintf)
  {
    TAutoDriver<_Hyperlink>::Bind(pintf, false);
    return *this;
  }

  _HyperlinkDispT& operator=(_HyperlinkPtr pintf)
  {
    TAutoDriver<_Hyperlink>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessHyperlink));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessHyperlink);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubAddress(BSTR* pbstrResult/*[out,retval]*/);
  BSTR            __fastcall get_SubAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubAddress(TVariantInParam pbstrResult/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Address(BSTR* pbstrResult/*[out,retval]*/);
  BSTR            __fastcall get_Address(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Address(TVariantInParam pbstrResult/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddToFavorites();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Follow(TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                               TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                               TVariantInParam ExtraInfo/*[in,opt]*/, 
                                               Office_97::MsoExtraInfoMethod Method/*[in,def,opt]*/
                                               , BSTR HeaderInfo/*[in,def,opt]*/);

  __property   BSTR            SubAddress = {read = get_SubAddress};
  __property   BSTR            Address = {read = get_Address};
};
typedef _HyperlinkDispT<_Hyperlink> _HyperlinkDisp;

// *********************************************************************//
// SmartIntf: TCOM_Page
// Interface: _Page
// *********************************************************************//
template <class T /* _Page */ >
class TCOM_PageT : public TComInterface<_Page>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PageT() {}
  TCOM_PageT(_Page *intf, bool addRef = false) : TComInterface<_Page>(intf, addRef) {}
  TCOM_PageT(const TCOM_PageT& src) : TComInterface<_Page>(src) {}
  TCOM_PageT& operator=(const TCOM_PageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT         __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT         __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PageIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_PageIndex(void);
  HRESULT         __fastcall set_PageIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT         __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   short           PageIndex = {read = get_PageIndex, write = set_PageIndex};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
};
typedef TCOM_PageT<_Page> TCOM_Page;

// *********************************************************************//
// DispIntf:  _Page
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E974-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _PageDispT : public TAutoDriver<_Page>
{
public:
  _PageDispT(){}

  _PageDispT(_Page *pintf)
  {
    TAutoDriver<_Page>::Bind(pintf, false);
  }

  _PageDispT(_PagePtr pintf)
  {
    TAutoDriver<_Page>::Bind(pintf, true);
  }

  _PageDispT& operator=(_Page *pintf)
  {
    TAutoDriver<_Page>::Bind(pintf, false);
    return *this;
  }

  _PageDispT& operator=(_PagePtr pintf)
  {
    TAutoDriver<_Page>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessPage));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessPage);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_PageIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PageIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   short           PageIndex = {read = get_PageIndex, write = set_PageIndex};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
};
typedef _PageDispT<_Page> _PageDisp;

typedef TComInterface<Pages>  TCOMPages;

// *********************************************************************//
// DispIntf:  Pages
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E978-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class PagesDispT : public TAutoDriver<Pages>
{
public:
  PagesDispT(){}

  PagesDispT(Pages *pintf)
  {
    TAutoDriver<Pages>::Bind(pintf, false);
  }

  PagesDispT(PagesPtr pintf)
  {
    TAutoDriver<Pages>::Bind(pintf, true);
  }

  PagesDispT& operator=(Pages *pintf)
  {
    TAutoDriver<Pages>::Bind(pintf, false);
    return *this;
  }

  PagesDispT& operator=(PagesPtr pintf)
  {
    TAutoDriver<Pages>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 Access_97::AccessPagePtr* pRet/*[out,retval]*/);
  Access_97::AccessPagePtr __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pRet/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(TVariantInParam Before/*[in,opt]*/, 
                                            Access_97::AccessPagePtr* pRet/*[out,retval]*/);
  Access_97::AccessPagePtr __fastcall Add(TVariantInParam Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(TVariantInParam Item/*[in,opt]*/= TNoParam());

  __property   long            Count = {read = get_Count};
};
typedef PagesDispT<Pages> PagesDisp;

// *********************************************************************//
// SmartIntf: TCOM_Control
// Interface: _Control
// *********************************************************************//
template <class T /* _Control */ >
class TCOM_ControlT : public TComInterface<_Control>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ControlT() {}
  TCOM_ControlT(_Control *intf, bool addRef = false) : TComInterface<_Control>(intf, addRef) {}
  TCOM_ControlT(const TCOM_ControlT& src) : TComInterface<_Control>(src) {}
  TCOM_ControlT& operator=(const TCOM_ControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall Undo(void);
  HRESULT         __fastcall Dropdown(void);
  HRESULT         __fastcall get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                                        TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Column(long Index/*[in]*/, 
                                        TVariantInParam Row/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Selected(long lRow/*[in]*/, long* pRet/*[out,retval]*/);
  long            __fastcall get_Selected(long lRow/*[in]*/);
  HRESULT         __fastcall set_Selected(long lRow/*[in]*/, long pRet/*[in]*/);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_Form(void);
  HRESULT         __fastcall get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall get_Report(void);
  HRESULT         __fastcall get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ItemData(long Index/*[in]*/);
  HRESULT         __fastcall get_Object(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT         __fastcall get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ObjectVerbs(long Index/*[in]*/);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall get_ItemsSelected(Access_97::_ItemsSelectedPtr* pRet/*[out,retval]*/);
  Access_97::_ItemsSelectedPtr __fastcall get_ItemsSelected(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Pages(Access_97::PagesPtr* pRet/*[out,retval]*/);
  Access_97::PagesPtr __fastcall get_Pages(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::_ItemsSelectedPtr ItemsSelected = {read = get_ItemsSelected};
  __property   Access_97::PagesPtr Pages = {read = get_Pages};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
};
typedef TCOM_ControlT<_Control> TCOM_Control;

// *********************************************************************//
// DispIntf:  _Control
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {26B96540-8F8E-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template<class T>
class _ControlDispT : public TAutoDriver<_Control>
{
public:
  _ControlDispT(){}

  _ControlDispT(_Control *pintf)
  {
    TAutoDriver<_Control>::Bind(pintf, false);
  }

  _ControlDispT(_ControlPtr pintf)
  {
    TAutoDriver<_Control>::Bind(pintf, true);
  }

  _ControlDispT& operator=(_Control *pintf)
  {
    TAutoDriver<_Control>::Bind(pintf, false);
    return *this;
  }

  _ControlDispT& operator=(_ControlPtr pintf)
  {
    TAutoDriver<_Control>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessControl);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Dropdown();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Column(long Index/*[in]*/, 
                                                   TVariantInParam Row/*[in,opt]*/, 
                                                   TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Column(long Index/*[in]*/, 
                                        TVariantInParam Row/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(long lRow/*[in]*/, long* pRet/*[out,retval]*/);
  long            __fastcall get_Selected(long lRow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Selected(long lRow/*[in]*/, long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_Form(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall get_Report(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ItemData(long Index/*[in]*/, 
                                                     TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ItemData(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Object(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectVerbs(long Index/*[in]*/, 
                                                        BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ObjectVerbs(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ItemsSelected(Access_97::_ItemsSelectedPtr* pRet/*[out,retval]*/);
  Access_97::_ItemsSelectedPtr __fastcall get_ItemsSelected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pages(Access_97::PagesPtr* pRet/*[out,retval]*/);
  Access_97::PagesPtr __fastcall get_Pages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::_ItemsSelectedPtr ItemsSelected = {read = get_ItemsSelected};
  __property   Access_97::PagesPtr Pages = {read = get_Pages};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
};
typedef _ControlDispT<_Control> _ControlDisp;

typedef TComInterface<__ControlInReportEvents>  TCOM__ControlInReportEvents;

typedef TComInterface<Controls_>  TCOMControls_;

// *********************************************************************//
// DispIntf:  Controls
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5970C574-EB8C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class Controls_DispT : public TAutoDriver<Controls_>
{
public:
  Controls_DispT(){}

  Controls_DispT(Controls_ *pintf)
  {
    TAutoDriver<Controls_>::Bind(pintf, false);
  }

  Controls_DispT(Controls_Ptr pintf)
  {
    TAutoDriver<Controls_>::Bind(pintf, true);
  }

  Controls_DispT& operator=(Controls_ *pintf)
  {
    TAutoDriver<Controls_>::Bind(pintf, false);
    return *this;
  }

  Controls_DispT& operator=(Controls_Ptr pintf)
  {
    TAutoDriver<Controls_>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pRet/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef Controls_DispT<Controls_> Controls_Disp;

// *********************************************************************//
// SmartIntf: TCOM_Label
// Interface: _Label
// *********************************************************************//
template <class T /* _Label */ >
class TCOM_LabelT : public TComInterface<_Label>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_LabelT() {}
  TCOM_LabelT(_Label *intf, bool addRef = false) : TComInterface<_Label>(intf, addRef) {}
  TCOM_LabelT(const TCOM_LabelT& src) : TComInterface<_Label>(src) {}
  TCOM_LabelT& operator=(const TCOM_LabelT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkAddress(void);
  HRESULT         __fastcall set_HyperlinkAddress(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkSubAddress(void);
  HRESULT         __fastcall set_HyperlinkSubAddress(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT         __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_TextAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextAlign(void);
  HRESULT         __fastcall set_TextAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            HyperlinkAddress = {read = get_HyperlinkAddress, write = set_HyperlinkAddress};
  __property   BSTR            HyperlinkSubAddress = {read = get_HyperlinkSubAddress, write = set_HyperlinkSubAddress};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   unsigned_char   TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
};
typedef TCOM_LabelT<_Label> TCOM_Label;

// *********************************************************************//
// DispIntf:  _Label
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E948-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _LabelDispT : public TAutoDriver<_Label>
{
public:
  _LabelDispT(){}

  _LabelDispT(_Label *pintf)
  {
    TAutoDriver<_Label>::Bind(pintf, false);
  }

  _LabelDispT(_LabelPtr pintf)
  {
    TAutoDriver<_Label>::Bind(pintf, true);
  }

  _LabelDispT& operator=(_Label *pintf)
  {
    TAutoDriver<_Label>::Bind(pintf, false);
    return *this;
  }

  _LabelDispT& operator=(_LabelPtr pintf)
  {
    TAutoDriver<_Label>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessLabel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessLabel);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HyperlinkAddress(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkSubAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HyperlinkSubAddress(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            HyperlinkAddress = {read = get_HyperlinkAddress, write = set_HyperlinkAddress};
  __property   BSTR            HyperlinkSubAddress = {read = get_HyperlinkSubAddress, write = set_HyperlinkSubAddress};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   unsigned_char   TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
};
typedef _LabelDispT<_Label> _LabelDisp;

typedef TComInterface<_LabelEvents>  TCOM_LabelEvents;

typedef TComInterface<_ChildLabelEvents>  TCOM_ChildLabelEvents;

// *********************************************************************//
// SmartIntf: TCOM_Rectangle
// Interface: _Rectangle
// *********************************************************************//
template <class T /* _Rectangle */ >
class TCOM_RectangleT : public TComInterface<_Rectangle>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_RectangleT() {}
  TCOM_RectangleT(_Rectangle *intf, bool addRef = false) : TComInterface<_Rectangle>(intf, addRef) {}
  TCOM_RectangleT(const TCOM_RectangleT& src) : TComInterface<_Rectangle>(src) {}
  TCOM_RectangleT& operator=(const TCOM_RectangleT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
};
typedef TCOM_RectangleT<_Rectangle> TCOM_Rectangle;

// *********************************************************************//
// DispIntf:  _Rectangle
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94A-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _RectangleDispT : public TAutoDriver<_Rectangle>
{
public:
  _RectangleDispT(){}

  _RectangleDispT(_Rectangle *pintf)
  {
    TAutoDriver<_Rectangle>::Bind(pintf, false);
  }

  _RectangleDispT(_RectanglePtr pintf)
  {
    TAutoDriver<_Rectangle>::Bind(pintf, true);
  }

  _RectangleDispT& operator=(_Rectangle *pintf)
  {
    TAutoDriver<_Rectangle>::Bind(pintf, false);
    return *this;
  }

  _RectangleDispT& operator=(_RectanglePtr pintf)
  {
    TAutoDriver<_Rectangle>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessRectangle));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessRectangle);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
};
typedef _RectangleDispT<_Rectangle> _RectangleDisp;

typedef TComInterface<_RectangleEvents>  TCOM_RectangleEvents;

// *********************************************************************//
// SmartIntf: TCOM_Line
// Interface: _Line
// *********************************************************************//
template <class T /* _Line */ >
class TCOM_LineT : public TComInterface<_Line>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_LineT() {}
  TCOM_LineT(_Line *intf, bool addRef = false) : TComInterface<_Line>(intf, addRef) {}
  TCOM_LineT(const TCOM_LineT& src) : TComInterface<_Line>(src) {}
  TCOM_LineT& operator=(const TCOM_LineT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_LineSlant(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LineSlant(void);
  HRESULT         __fastcall set_LineSlant(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   TOLEBOOL        LineSlant = {read = get_LineSlant, write = set_LineSlant};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
};
typedef TCOM_LineT<_Line> TCOM_Line;

// *********************************************************************//
// DispIntf:  _Line
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94C-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _LineDispT : public TAutoDriver<_Line>
{
public:
  _LineDispT(){}

  _LineDispT(_Line *pintf)
  {
    TAutoDriver<_Line>::Bind(pintf, false);
  }

  _LineDispT(_LinePtr pintf)
  {
    TAutoDriver<_Line>::Bind(pintf, true);
  }

  _LineDispT& operator=(_Line *pintf)
  {
    TAutoDriver<_Line>::Bind(pintf, false);
    return *this;
  }

  _LineDispT& operator=(_LinePtr pintf)
  {
    TAutoDriver<_Line>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessLine));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessLine);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LineSlant(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LineSlant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LineSlant(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   TOLEBOOL        LineSlant = {read = get_LineSlant, write = set_LineSlant};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
};
typedef _LineDispT<_Line> _LineDisp;

typedef TComInterface<_LineEvents>  TCOM_LineEvents;

// *********************************************************************//
// SmartIntf: TCOM_Image
// Interface: _Image
// *********************************************************************//
template <class T /* _Image */ >
class TCOM_ImageT : public TComInterface<_Image>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ImageT() {}
  TCOM_ImageT(_Image *intf, bool addRef = false) : TComInterface<_Image>(intf, addRef) {}
  TCOM_ImageT(const TCOM_ImageT& src) : TComInterface<_Image>(src) {}
  TCOM_ImageT& operator=(const TCOM_ImageT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT         __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT         __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT         __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_SizeMode(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SizeMode(void);
  HRESULT         __fastcall set_SizeMode(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureAlignment(void);
  HRESULT         __fastcall set_PictureAlignment(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PictureTiling(void);
  HRESULT         __fastcall set_PictureTiling(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkAddress(void);
  HRESULT         __fastcall set_HyperlinkAddress(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkSubAddress(void);
  HRESULT         __fastcall set_HyperlinkSubAddress(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT         __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ImageHeight(long* pRet/*[out,retval]*/);
  long            __fastcall get_ImageHeight(void);
  HRESULT         __fastcall set_ImageHeight(long pRet/*[in]*/);
  HRESULT         __fastcall get_ImageWidth(long* pRet/*[out,retval]*/);
  long            __fastcall get_ImageWidth(void);
  HRESULT         __fastcall set_ImageWidth(long pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   unsigned_char   SizeMode = {read = get_SizeMode, write = set_SizeMode};
  __property   unsigned_char   PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   TOLEBOOL        PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   BSTR            HyperlinkAddress = {read = get_HyperlinkAddress, write = set_HyperlinkAddress};
  __property   BSTR            HyperlinkSubAddress = {read = get_HyperlinkSubAddress, write = set_HyperlinkSubAddress};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   long            ImageHeight = {read = get_ImageHeight, write = set_ImageHeight};
  __property   long            ImageWidth = {read = get_ImageWidth, write = set_ImageWidth};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
};
typedef TCOM_ImageT<_Image> TCOM_Image;

// *********************************************************************//
// DispIntf:  _Image
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94E-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _ImageDispT : public TAutoDriver<_Image>
{
public:
  _ImageDispT(){}

  _ImageDispT(_Image *pintf)
  {
    TAutoDriver<_Image>::Bind(pintf, false);
  }

  _ImageDispT(_ImagePtr pintf)
  {
    TAutoDriver<_Image>::Bind(pintf, true);
  }

  _ImageDispT& operator=(_Image *pintf)
  {
    TAutoDriver<_Image>::Bind(pintf, false);
    return *this;
  }

  _ImageDispT& operator=(_ImagePtr pintf)
  {
    TAutoDriver<_Image>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessImage));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessImage);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SizeMode(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SizeMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SizeMode(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureAlignment(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PictureTiling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureTiling(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HyperlinkAddress(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkSubAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HyperlinkSubAddress(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ImageHeight(long* pRet/*[out,retval]*/);
  long            __fastcall get_ImageHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ImageHeight(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ImageWidth(long* pRet/*[out,retval]*/);
  long            __fastcall get_ImageWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ImageWidth(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   unsigned_char   SizeMode = {read = get_SizeMode, write = set_SizeMode};
  __property   unsigned_char   PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   TOLEBOOL        PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   BSTR            HyperlinkAddress = {read = get_HyperlinkAddress, write = set_HyperlinkAddress};
  __property   BSTR            HyperlinkSubAddress = {read = get_HyperlinkSubAddress, write = set_HyperlinkSubAddress};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   long            ImageHeight = {read = get_ImageHeight, write = set_ImageHeight};
  __property   long            ImageWidth = {read = get_ImageWidth, write = set_ImageWidth};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
};
typedef _ImageDispT<_Image> _ImageDisp;

typedef TComInterface<_ImageEvents>  TCOM_ImageEvents;

// *********************************************************************//
// SmartIntf: TCOM_CommandButton
// Interface: _CommandButton
// *********************************************************************//
template <class T /* _CommandButton */ >
class TCOM_CommandButtonT : public TComInterface<_CommandButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CommandButtonT() {}
  TCOM_CommandButtonT(_CommandButton *intf, bool addRef = false) : TComInterface<_CommandButton>(intf, addRef) {}
  TCOM_CommandButtonT(const TCOM_CommandButtonT& src) : TComInterface<_CommandButton>(src) {}
  TCOM_CommandButtonT& operator=(const TCOM_CommandButtonT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT         __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT         __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT         __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_Transparent(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Transparent(void);
  HRESULT         __fastcall set_Transparent(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Default(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Default(void);
  HRESULT         __fastcall set_Default(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Cancel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Cancel(void);
  HRESULT         __fastcall set_Cancel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoRepeat(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoRepeat(void);
  HRESULT         __fastcall set_AutoRepeat(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnPush(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnPush(void);
  HRESULT         __fastcall set_OnPush(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkAddress(void);
  HRESULT         __fastcall set_HyperlinkAddress(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkSubAddress(void);
  HRESULT         __fastcall set_HyperlinkSubAddress(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT         __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT         __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   TOLEBOOL        Transparent = {read = get_Transparent, write = set_Transparent};
  __property   TOLEBOOL        Default = {read = get_Default, write = set_Default};
  __property   TOLEBOOL        Cancel = {read = get_Cancel, write = set_Cancel};
  __property   TOLEBOOL        AutoRepeat = {read = get_AutoRepeat, write = set_AutoRepeat};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   BSTR            OnPush = {read = get_OnPush, write = set_OnPush};
  __property   BSTR            HyperlinkAddress = {read = get_HyperlinkAddress, write = set_HyperlinkAddress};
  __property   BSTR            HyperlinkSubAddress = {read = get_HyperlinkSubAddress, write = set_HyperlinkSubAddress};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef TCOM_CommandButtonT<_CommandButton> TCOM_CommandButton;

// *********************************************************************//
// DispIntf:  _CommandButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E950-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _CommandButtonDispT : public TAutoDriver<_CommandButton>
{
public:
  _CommandButtonDispT(){}

  _CommandButtonDispT(_CommandButton *pintf)
  {
    TAutoDriver<_CommandButton>::Bind(pintf, false);
  }

  _CommandButtonDispT(_CommandButtonPtr pintf)
  {
    TAutoDriver<_CommandButton>::Bind(pintf, true);
  }

  _CommandButtonDispT& operator=(_CommandButton *pintf)
  {
    TAutoDriver<_CommandButton>::Bind(pintf, false);
    return *this;
  }

  _CommandButtonDispT& operator=(_CommandButtonPtr pintf)
  {
    TAutoDriver<_CommandButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessCommandButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessCommandButton);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparent(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Transparent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparent(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Default(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Default(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Default(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cancel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Cancel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Cancel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoRepeat(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoRepeat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoRepeat(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnPush(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnPush(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnPush(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HyperlinkAddress(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HyperlinkSubAddress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HyperlinkSubAddress(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   TOLEBOOL        Transparent = {read = get_Transparent, write = set_Transparent};
  __property   TOLEBOOL        Default = {read = get_Default, write = set_Default};
  __property   TOLEBOOL        Cancel = {read = get_Cancel, write = set_Cancel};
  __property   TOLEBOOL        AutoRepeat = {read = get_AutoRepeat, write = set_AutoRepeat};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   BSTR            OnPush = {read = get_OnPush, write = set_OnPush};
  __property   BSTR            HyperlinkAddress = {read = get_HyperlinkAddress, write = set_HyperlinkAddress};
  __property   BSTR            HyperlinkSubAddress = {read = get_HyperlinkSubAddress, write = set_HyperlinkSubAddress};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef _CommandButtonDispT<_CommandButton> _CommandButtonDisp;

typedef TComInterface<_CommandButtonEvents>  TCOM_CommandButtonEvents;

// *********************************************************************//
// SmartIntf: TCOM_OptionButton
// Interface: _OptionButton
// *********************************************************************//
template <class T /* _OptionButton */ >
class TCOM_OptionButtonT : public TComInterface<_OptionButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_OptionButtonT() {}
  TCOM_OptionButtonT(_OptionButton *intf, bool addRef = false) : TComInterface<_OptionButton>(intf, addRef) {}
  TCOM_OptionButtonT(const TCOM_OptionButtonT& src) : TComInterface<_OptionButton>(src) {}
  TCOM_OptionButtonT& operator=(const TCOM_OptionButtonT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OptionValue(long* pRet/*[out,retval]*/);
  long            __fastcall get_OptionValue(void);
  HRESULT         __fastcall set_OptionValue(long pRet/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT         __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT         __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TripleState(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TripleState(void);
  HRESULT         __fastcall set_TripleState(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT         __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT         __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT         __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT         __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT         __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef TCOM_OptionButtonT<_OptionButton> TCOM_OptionButton;

// *********************************************************************//
// DispIntf:  _OptionButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E952-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _OptionButtonDispT : public TAutoDriver<_OptionButton>
{
public:
  _OptionButtonDispT(){}

  _OptionButtonDispT(_OptionButton *pintf)
  {
    TAutoDriver<_OptionButton>::Bind(pintf, false);
  }

  _OptionButtonDispT(_OptionButtonPtr pintf)
  {
    TAutoDriver<_OptionButton>::Bind(pintf, true);
  }

  _OptionButtonDispT& operator=(_OptionButton *pintf)
  {
    TAutoDriver<_OptionButton>::Bind(pintf, false);
    return *this;
  }

  _OptionButtonDispT& operator=(_OptionButtonPtr pintf)
  {
    TAutoDriver<_OptionButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessOptionButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessOptionButton);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OptionValue(long* pRet/*[out,retval]*/);
  long            __fastcall get_OptionValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OptionValue(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TripleState(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TripleState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TripleState(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef _OptionButtonDispT<_OptionButton> _OptionButtonDisp;

typedef TComInterface<_OptionButtonEvents>  TCOM_OptionButtonEvents;

typedef TComInterface<_OptionButtonInOptionEvents>  TCOM_OptionButtonInOptionEvents;

// *********************************************************************//
// SmartIntf: TCOM_Checkbox
// Interface: _Checkbox
// *********************************************************************//
template <class T /* _Checkbox */ >
class TCOM_CheckboxT : public TComInterface<_Checkbox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CheckboxT() {}
  TCOM_CheckboxT(_Checkbox *intf, bool addRef = false) : TComInterface<_Checkbox>(intf, addRef) {}
  TCOM_CheckboxT(const TCOM_CheckboxT& src) : TComInterface<_Checkbox>(src) {}
  TCOM_CheckboxT& operator=(const TCOM_CheckboxT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall Undo(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OptionValue(long* pRet/*[out,retval]*/);
  long            __fastcall get_OptionValue(void);
  HRESULT         __fastcall set_OptionValue(long pRet/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT         __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT         __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TripleState(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TripleState(void);
  HRESULT         __fastcall set_TripleState(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT         __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT         __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT         __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT         __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT         __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef TCOM_CheckboxT<_Checkbox> TCOM_Checkbox;

// *********************************************************************//
// DispIntf:  _Checkbox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E954-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _CheckboxDispT : public TAutoDriver<_Checkbox>
{
public:
  _CheckboxDispT(){}

  _CheckboxDispT(_Checkbox *pintf)
  {
    TAutoDriver<_Checkbox>::Bind(pintf, false);
  }

  _CheckboxDispT(_CheckboxPtr pintf)
  {
    TAutoDriver<_Checkbox>::Bind(pintf, true);
  }

  _CheckboxDispT& operator=(_Checkbox *pintf)
  {
    TAutoDriver<_Checkbox>::Bind(pintf, false);
    return *this;
  }

  _CheckboxDispT& operator=(_CheckboxPtr pintf)
  {
    TAutoDriver<_Checkbox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessCheckBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessCheckBox);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OptionValue(long* pRet/*[out,retval]*/);
  long            __fastcall get_OptionValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OptionValue(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TripleState(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TripleState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TripleState(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef _CheckboxDispT<_Checkbox> _CheckboxDisp;

typedef TComInterface<_CheckBoxEvents>  TCOM_CheckBoxEvents;

typedef TComInterface<_CheckBoxInOptionEvents>  TCOM_CheckBoxInOptionEvents;

// *********************************************************************//
// SmartIntf: TCOM_OptionGroup
// Interface: _OptionGroup
// *********************************************************************//
template <class T /* _OptionGroup */ >
class TCOM_OptionGroupT : public TComInterface<_OptionGroup>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_OptionGroupT() {}
  TCOM_OptionGroupT(_OptionGroup *intf, bool addRef = false) : TComInterface<_OptionGroup>(intf, addRef) {}
  TCOM_OptionGroupT(const TCOM_OptionGroupT& src) : TComInterface<_OptionGroup>(src) {}
  TCOM_OptionGroupT& operator=(const TCOM_OptionGroupT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall Undo(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT         __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT         __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT         __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT         __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT         __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT         __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT         __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
};
typedef TCOM_OptionGroupT<_OptionGroup> TCOM_OptionGroup;

// *********************************************************************//
// DispIntf:  _OptionGroup
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E956-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _OptionGroupDispT : public TAutoDriver<_OptionGroup>
{
public:
  _OptionGroupDispT(){}

  _OptionGroupDispT(_OptionGroup *pintf)
  {
    TAutoDriver<_OptionGroup>::Bind(pintf, false);
  }

  _OptionGroupDispT(_OptionGroupPtr pintf)
  {
    TAutoDriver<_OptionGroup>::Bind(pintf, true);
  }

  _OptionGroupDispT& operator=(_OptionGroup *pintf)
  {
    TAutoDriver<_OptionGroup>::Bind(pintf, false);
    return *this;
  }

  _OptionGroupDispT& operator=(_OptionGroupPtr pintf)
  {
    TAutoDriver<_OptionGroup>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessOptionGroup));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessOptionGroup);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
};
typedef _OptionGroupDispT<_OptionGroup> _OptionGroupDisp;

typedef TComInterface<_OptionGroupEvents>  TCOM_OptionGroupEvents;

// *********************************************************************//
// SmartIntf: TCOM_BoundObjectFrame
// Interface: _BoundObjectFrame
// *********************************************************************//
template <class T /* _BoundObjectFrame */ >
class TCOM_BoundObjectFrameT : public TComInterface<_BoundObjectFrame>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_BoundObjectFrameT() {}
  TCOM_BoundObjectFrameT(_BoundObjectFrame *intf, bool addRef = false) : TComInterface<_BoundObjectFrame>(intf, addRef) {}
  TCOM_BoundObjectFrameT(const TCOM_BoundObjectFrameT& src) : TComInterface<_BoundObjectFrame>(src) {}
  TCOM_BoundObjectFrameT& operator=(const TCOM_BoundObjectFrameT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Object(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT         __fastcall get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ObjectVerbs(long Index/*[in]*/);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_SizeMode(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SizeMode(void);
  HRESULT         __fastcall set_SizeMode(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Class(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Class(void);
  HRESULT         __fastcall set_Class(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_SourceDoc(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceDoc(void);
  HRESULT         __fastcall set_SourceDoc(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_SourceItem(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceItem(void);
  HRESULT         __fastcall set_SourceItem(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AutoActivate(short* pRet/*[out,retval]*/);
  short           __fastcall get_AutoActivate(void);
  HRESULT         __fastcall set_AutoActivate(short pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayType(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayType(void);
  HRESULT         __fastcall set_DisplayType(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_UpdateOptions(short* pRet/*[out,retval]*/);
  short           __fastcall get_UpdateOptions(void);
  HRESULT         __fastcall set_UpdateOptions(short pRet/*[in]*/);
  HRESULT         __fastcall get_Verb(long* pRet/*[out,retval]*/);
  long            __fastcall get_Verb(void);
  HRESULT         __fastcall set_Verb(long pRet/*[in]*/);
  HRESULT         __fastcall get_OLETypeAllowed(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OLETypeAllowed(void);
  HRESULT         __fastcall set_OLETypeAllowed(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT         __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT         __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT         __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_LpOleObject(long* pRet/*[out,retval]*/);
  long            __fastcall get_LpOleObject(void);
  HRESULT         __fastcall set_LpOleObject(long pRet/*[in]*/);
  HRESULT         __fastcall get_ObjectVerbsCount(long* pRet/*[out,retval]*/);
  long            __fastcall get_ObjectVerbsCount(void);
  HRESULT         __fastcall set_ObjectVerbsCount(long pRet/*[in]*/);
  HRESULT         __fastcall get_Action(short* pRet/*[out,retval]*/);
  short           __fastcall get_Action(void);
  HRESULT         __fastcall set_Action(short pRet/*[in]*/);
  HRESULT         __fastcall get_Scaling(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_Scaling(void);
  HRESULT         __fastcall set_Scaling(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OLEType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OLEType(void);
  HRESULT         __fastcall set_OLEType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT         __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT         __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnUpdated(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnUpdated(void);
  HRESULT         __fastcall set_OnUpdated(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   unsigned_char   SizeMode = {read = get_SizeMode, write = set_SizeMode};
  __property   BSTR            Class = {read = get_Class, write = set_Class};
  __property   BSTR            SourceDoc = {read = get_SourceDoc, write = set_SourceDoc};
  __property   BSTR            SourceItem = {read = get_SourceItem, write = set_SourceItem};
  __property   short           AutoActivate = {read = get_AutoActivate, write = set_AutoActivate};
  __property   TOLEBOOL        DisplayType = {read = get_DisplayType, write = set_DisplayType};
  __property   short           UpdateOptions = {read = get_UpdateOptions, write = set_UpdateOptions};
  __property   long            Verb = {read = get_Verb, write = set_Verb};
  __property   unsigned_char   OLETypeAllowed = {read = get_OLETypeAllowed, write = set_OLETypeAllowed};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            LpOleObject = {read = get_LpOleObject, write = set_LpOleObject};
  __property   long            ObjectVerbsCount = {read = get_ObjectVerbsCount, write = set_ObjectVerbsCount};
  __property   short           Action = {read = get_Action, write = set_Action};
  __property   unsigned_char   Scaling = {read = get_Scaling, write = set_Scaling};
  __property   unsigned_char   OLEType = {read = get_OLEType, write = set_OLEType};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnUpdated = {read = get_OnUpdated, write = set_OnUpdated};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef TCOM_BoundObjectFrameT<_BoundObjectFrame> TCOM_BoundObjectFrame;

// *********************************************************************//
// DispIntf:  _BoundObjectFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E958-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _BoundObjectFrameDispT : public TAutoDriver<_BoundObjectFrame>
{
public:
  _BoundObjectFrameDispT(){}

  _BoundObjectFrameDispT(_BoundObjectFrame *pintf)
  {
    TAutoDriver<_BoundObjectFrame>::Bind(pintf, false);
  }

  _BoundObjectFrameDispT(_BoundObjectFramePtr pintf)
  {
    TAutoDriver<_BoundObjectFrame>::Bind(pintf, true);
  }

  _BoundObjectFrameDispT& operator=(_BoundObjectFrame *pintf)
  {
    TAutoDriver<_BoundObjectFrame>::Bind(pintf, false);
    return *this;
  }

  _BoundObjectFrameDispT& operator=(_BoundObjectFramePtr pintf)
  {
    TAutoDriver<_BoundObjectFrame>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessBoundObjectFrame));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessBoundObjectFrame);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Object(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectVerbs(long Index/*[in]*/, 
                                                        BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ObjectVerbs(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SizeMode(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SizeMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SizeMode(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Class(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Class(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Class(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceDoc(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceDoc(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SourceDoc(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceItem(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SourceItem(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoActivate(short* pRet/*[out,retval]*/);
  short           __fastcall get_AutoActivate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoActivate(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayType(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayType(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UpdateOptions(short* pRet/*[out,retval]*/);
  short           __fastcall get_UpdateOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UpdateOptions(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Verb(long* pRet/*[out,retval]*/);
  long            __fastcall get_Verb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Verb(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLETypeAllowed(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OLETypeAllowed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLETypeAllowed(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LpOleObject(long* pRet/*[out,retval]*/);
  long            __fastcall get_LpOleObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LpOleObject(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectVerbsCount(long* pRet/*[out,retval]*/);
  long            __fastcall get_ObjectVerbsCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ObjectVerbsCount(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Action(short* pRet/*[out,retval]*/);
  short           __fastcall get_Action(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Action(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scaling(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_Scaling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Scaling(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OLEType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnUpdated(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnUpdated(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnUpdated(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   unsigned_char   SizeMode = {read = get_SizeMode, write = set_SizeMode};
  __property   BSTR            Class = {read = get_Class, write = set_Class};
  __property   BSTR            SourceDoc = {read = get_SourceDoc, write = set_SourceDoc};
  __property   BSTR            SourceItem = {read = get_SourceItem, write = set_SourceItem};
  __property   short           AutoActivate = {read = get_AutoActivate, write = set_AutoActivate};
  __property   TOLEBOOL        DisplayType = {read = get_DisplayType, write = set_DisplayType};
  __property   short           UpdateOptions = {read = get_UpdateOptions, write = set_UpdateOptions};
  __property   long            Verb = {read = get_Verb, write = set_Verb};
  __property   unsigned_char   OLETypeAllowed = {read = get_OLETypeAllowed, write = set_OLETypeAllowed};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            LpOleObject = {read = get_LpOleObject, write = set_LpOleObject};
  __property   long            ObjectVerbsCount = {read = get_ObjectVerbsCount, write = set_ObjectVerbsCount};
  __property   short           Action = {read = get_Action, write = set_Action};
  __property   unsigned_char   Scaling = {read = get_Scaling, write = set_Scaling};
  __property   unsigned_char   OLEType = {read = get_OLEType, write = set_OLEType};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnUpdated = {read = get_OnUpdated, write = set_OnUpdated};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef _BoundObjectFrameDispT<_BoundObjectFrame> _BoundObjectFrameDisp;

typedef TComInterface<_BoundObjectFrameEvents>  TCOM_BoundObjectFrameEvents;

// *********************************************************************//
// SmartIntf: TCOM_Textbox
// Interface: _Textbox
// *********************************************************************//
template <class T /* _Textbox */ >
class TCOM_TextboxT : public TComInterface<_Textbox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TextboxT() {}
  TCOM_TextboxT(_Textbox *intf, bool addRef = false) : TComInterface<_Textbox>(intf, addRef) {}
  TCOM_TextboxT(const TCOM_TextboxT& src) : TComInterface<_Textbox>(src) {}
  TCOM_TextboxT& operator=(const TCOM_TextboxT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall Undo(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Format(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Format(void);
  HRESULT         __fastcall set_Format(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_DecimalPlaces(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DecimalPlaces(void);
  HRESULT         __fastcall set_DecimalPlaces(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_InputMask(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_InputMask(void);
  HRESULT         __fastcall set_InputMask(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT         __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT         __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_EnterKeyBehavior(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EnterKeyBehavior(void);
  HRESULT         __fastcall set_EnterKeyBehavior(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AllowAutoCorrect(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowAutoCorrect(void);
  HRESULT         __fastcall set_AllowAutoCorrect(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FilterLookup(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_FilterLookup(void);
  HRESULT         __fastcall set_FilterLookup(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_AutoTab(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoTab(void);
  HRESULT         __fastcall set_AutoTab(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_ScrollBars(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ScrollBars(void);
  HRESULT         __fastcall set_ScrollBars(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT         __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanGrow(void);
  HRESULT         __fastcall set_CanGrow(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanShrink(void);
  HRESULT         __fastcall set_CanShrink(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_RunningSum(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_RunningSum(void);
  HRESULT         __fastcall set_RunningSum(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT         __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_TextAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextAlign(void);
  HRESULT         __fastcall set_TextAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT         __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT         __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_SelText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SelText(void);
  HRESULT         __fastcall set_SelText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_SelStart(short* pRet/*[out,retval]*/);
  short           __fastcall get_SelStart(void);
  HRESULT         __fastcall set_SelStart(short pRet/*[in]*/);
  HRESULT         __fastcall get_SelLength(short* pRet/*[out,retval]*/);
  short           __fastcall get_SelLength(void);
  HRESULT         __fastcall set_SelLength(short pRet/*[in]*/);
  HRESULT         __fastcall get_TextAlignGeneral(short* pRet/*[out,retval]*/);
  short           __fastcall get_TextAlignGeneral(void);
  HRESULT         __fastcall set_TextAlignGeneral(short pRet/*[in]*/);
  HRESULT         __fastcall get_Coltyp(long* pRet/*[out,retval]*/);
  long            __fastcall get_Coltyp(void);
  HRESULT         __fastcall set_Coltyp(long pRet/*[in]*/);
  HRESULT         __fastcall get_FormatPictureText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FormatPictureText(void);
  HRESULT         __fastcall set_FormatPictureText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT         __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT         __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnChange(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnChange(void);
  HRESULT         __fastcall set_OnChange(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            Format = {read = get_Format, write = set_Format};
  __property   unsigned_char   DecimalPlaces = {read = get_DecimalPlaces, write = set_DecimalPlaces};
  __property   BSTR            InputMask = {read = get_InputMask, write = set_InputMask};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        EnterKeyBehavior = {read = get_EnterKeyBehavior, write = set_EnterKeyBehavior};
  __property   TOLEBOOL        AllowAutoCorrect = {read = get_AllowAutoCorrect, write = set_AllowAutoCorrect};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   unsigned_char   FilterLookup = {read = get_FilterLookup, write = set_FilterLookup};
  __property   TOLEBOOL        AutoTab = {read = get_AutoTab, write = set_AutoTab};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   unsigned_char   ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   TOLEBOOL        CanGrow = {read = get_CanGrow, write = set_CanGrow};
  __property   TOLEBOOL        CanShrink = {read = get_CanShrink, write = set_CanShrink};
  __property   unsigned_char   RunningSum = {read = get_RunningSum, write = set_RunningSum};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   unsigned_char   TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   short           SelStart = {read = get_SelStart, write = set_SelStart};
  __property   short           SelLength = {read = get_SelLength, write = set_SelLength};
  __property   short           TextAlignGeneral = {read = get_TextAlignGeneral, write = set_TextAlignGeneral};
  __property   long            Coltyp = {read = get_Coltyp, write = set_Coltyp};
  __property   BSTR            FormatPictureText = {read = get_FormatPictureText, write = set_FormatPictureText};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnChange = {read = get_OnChange, write = set_OnChange};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef TCOM_TextboxT<_Textbox> TCOM_Textbox;

// *********************************************************************//
// DispIntf:  _Textbox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E946-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _TextboxDispT : public TAutoDriver<_Textbox>
{
public:
  _TextboxDispT(){}

  _TextboxDispT(_Textbox *pintf)
  {
    TAutoDriver<_Textbox>::Bind(pintf, false);
  }

  _TextboxDispT(_TextboxPtr pintf)
  {
    TAutoDriver<_Textbox>::Bind(pintf, true);
  }

  _TextboxDispT& operator=(_Textbox *pintf)
  {
    TAutoDriver<_Textbox>::Bind(pintf, false);
    return *this;
  }

  _TextboxDispT& operator=(_TextboxPtr pintf)
  {
    TAutoDriver<_Textbox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessTextBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessTextBox);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Format(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Format(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Format(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DecimalPlaces(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DecimalPlaces(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DecimalPlaces(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InputMask(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_InputMask(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InputMask(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EnterKeyBehavior(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EnterKeyBehavior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EnterKeyBehavior(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowAutoCorrect(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowAutoCorrect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowAutoCorrect(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterLookup(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_FilterLookup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FilterLookup(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoTab(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoTab(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoTab(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollBars(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ScrollBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollBars(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanGrow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CanGrow(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanShrink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CanShrink(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RunningSum(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_RunningSum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RunningSum(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SelText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelStart(short* pRet/*[out,retval]*/);
  short           __fastcall get_SelStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelStart(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelLength(short* pRet/*[out,retval]*/);
  short           __fastcall get_SelLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelLength(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlignGeneral(short* pRet/*[out,retval]*/);
  short           __fastcall get_TextAlignGeneral(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlignGeneral(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Coltyp(long* pRet/*[out,retval]*/);
  long            __fastcall get_Coltyp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Coltyp(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FormatPictureText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FormatPictureText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FormatPictureText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnChange(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnChange(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            Format = {read = get_Format, write = set_Format};
  __property   unsigned_char   DecimalPlaces = {read = get_DecimalPlaces, write = set_DecimalPlaces};
  __property   BSTR            InputMask = {read = get_InputMask, write = set_InputMask};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        EnterKeyBehavior = {read = get_EnterKeyBehavior, write = set_EnterKeyBehavior};
  __property   TOLEBOOL        AllowAutoCorrect = {read = get_AllowAutoCorrect, write = set_AllowAutoCorrect};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   unsigned_char   FilterLookup = {read = get_FilterLookup, write = set_FilterLookup};
  __property   TOLEBOOL        AutoTab = {read = get_AutoTab, write = set_AutoTab};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   unsigned_char   ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   TOLEBOOL        CanGrow = {read = get_CanGrow, write = set_CanGrow};
  __property   TOLEBOOL        CanShrink = {read = get_CanShrink, write = set_CanShrink};
  __property   unsigned_char   RunningSum = {read = get_RunningSum, write = set_RunningSum};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   unsigned_char   TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   short           SelStart = {read = get_SelStart, write = set_SelStart};
  __property   short           SelLength = {read = get_SelLength, write = set_SelLength};
  __property   short           TextAlignGeneral = {read = get_TextAlignGeneral, write = set_TextAlignGeneral};
  __property   long            Coltyp = {read = get_Coltyp, write = set_Coltyp};
  __property   BSTR            FormatPictureText = {read = get_FormatPictureText, write = set_FormatPictureText};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnChange = {read = get_OnChange, write = set_OnChange};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef _TextboxDispT<_Textbox> _TextboxDisp;

typedef TComInterface<_TextBoxEvents>  TCOM_TextBoxEvents;

// *********************************************************************//
// SmartIntf: TCOM_ListBox
// Interface: _ListBox
// *********************************************************************//
template <class T /* _ListBox */ >
class TCOM_ListBoxT : public TComInterface<_ListBox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListBoxT() {}
  TCOM_ListBoxT(_ListBox *intf, bool addRef = false) : TComInterface<_ListBox>(intf, addRef) {}
  TCOM_ListBoxT(const TCOM_ListBoxT& src) : TComInterface<_ListBox>(src) {}
  TCOM_ListBoxT& operator=(const TCOM_ListBoxT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall Undo(void);
  HRESULT         __fastcall get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                                        TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Column(long Index/*[in]*/, 
                                        TVariantInParam Row/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Selected(long lRow/*[in]*/, long* pRet/*[out,retval]*/);
  long            __fastcall get_Selected(long lRow/*[in]*/);
  HRESULT         __fastcall set_Selected(long lRow/*[in]*/, long pRet/*[in]*/);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ItemData(long Index/*[in]*/);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall get_ItemsSelected(Access_97::_ItemsSelectedPtr* pRet/*[out,retval]*/);
  Access_97::_ItemsSelectedPtr __fastcall get_ItemsSelected(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_RowSourceType(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSourceType(void);
  HRESULT         __fastcall set_RowSourceType(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_RowSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSource(void);
  HRESULT         __fastcall set_RowSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnCount(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnCount(void);
  HRESULT         __fastcall set_ColumnCount(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHeads(void);
  HRESULT         __fastcall set_ColumnHeads(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidths(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ColumnWidths(void);
  HRESULT         __fastcall set_ColumnWidths(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_BoundColumn(long* pRet/*[out,retval]*/);
  long            __fastcall get_BoundColumn(void);
  HRESULT         __fastcall set_BoundColumn(long pRet/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT         __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT         __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_MultiSelect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_MultiSelect(void);
  HRESULT         __fastcall set_MultiSelect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT         __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT         __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT         __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT         __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ListCount(long* pRet/*[out,retval]*/);
  long            __fastcall get_ListCount(void);
  HRESULT         __fastcall set_ListCount(long pRet/*[in]*/);
  HRESULT         __fastcall get_ListIndex(long* pRet/*[out,retval]*/);
  long            __fastcall get_ListIndex(void);
  HRESULT         __fastcall set_ListIndex(long pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT         __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT         __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_ItemsSelectedPtr ItemsSelected = {read = get_ItemsSelected};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   short           ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   long            BoundColumn = {read = get_BoundColumn, write = set_BoundColumn};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   unsigned_char   MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            ListCount = {read = get_ListCount, write = set_ListCount};
  __property   long            ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef TCOM_ListBoxT<_ListBox> TCOM_ListBox;

// *********************************************************************//
// DispIntf:  _ListBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E95A-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _ListBoxDispT : public TAutoDriver<_ListBox>
{
public:
  _ListBoxDispT(){}

  _ListBoxDispT(_ListBox *pintf)
  {
    TAutoDriver<_ListBox>::Bind(pintf, false);
  }

  _ListBoxDispT(_ListBoxPtr pintf)
  {
    TAutoDriver<_ListBox>::Bind(pintf, true);
  }

  _ListBoxDispT& operator=(_ListBox *pintf)
  {
    TAutoDriver<_ListBox>::Bind(pintf, false);
    return *this;
  }

  _ListBoxDispT& operator=(_ListBoxPtr pintf)
  {
    TAutoDriver<_ListBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessListBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessListBox);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Column(long Index/*[in]*/, 
                                                   TVariantInParam Row/*[in,opt]*/, 
                                                   TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Column(long Index/*[in]*/, 
                                        TVariantInParam Row/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Selected(long lRow/*[in]*/, long* pRet/*[out,retval]*/);
  long            __fastcall get_Selected(long lRow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Selected(long lRow/*[in]*/, long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ItemData(long Index/*[in]*/, 
                                                     TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ItemData(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ItemsSelected(Access_97::_ItemsSelectedPtr* pRet/*[out,retval]*/);
  Access_97::_ItemsSelectedPtr __fastcall get_ItemsSelected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowSourceType(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSourceType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowSourceType(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnCount(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnCount(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHeads(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHeads(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidths(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ColumnWidths(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidths(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundColumn(long* pRet/*[out,retval]*/);
  long            __fastcall get_BoundColumn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BoundColumn(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiSelect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_MultiSelect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiSelect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListCount(long* pRet/*[out,retval]*/);
  long            __fastcall get_ListCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListCount(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListIndex(long* pRet/*[out,retval]*/);
  long            __fastcall get_ListIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListIndex(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_ItemsSelectedPtr ItemsSelected = {read = get_ItemsSelected};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   short           ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   long            BoundColumn = {read = get_BoundColumn, write = set_BoundColumn};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   unsigned_char   MultiSelect = {read = get_MultiSelect, write = set_MultiSelect};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            ListCount = {read = get_ListCount, write = set_ListCount};
  __property   long            ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef _ListBoxDispT<_ListBox> _ListBoxDisp;

typedef TComInterface<_ListBoxEvents>  TCOM_ListBoxEvents;

// *********************************************************************//
// SmartIntf: TCOM_Combobox
// Interface: _Combobox
// *********************************************************************//
template <class T /* _Combobox */ >
class TCOM_ComboboxT : public TComInterface<_Combobox>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ComboboxT() {}
  TCOM_ComboboxT(_Combobox *intf, bool addRef = false) : TComInterface<_Combobox>(intf, addRef) {}
  TCOM_ComboboxT(const TCOM_ComboboxT& src) : TComInterface<_Combobox>(src) {}
  TCOM_ComboboxT& operator=(const TCOM_ComboboxT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall Undo(void);
  HRESULT         __fastcall Dropdown(void);
  HRESULT         __fastcall get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                                        TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Column(long Index/*[in]*/, 
                                        TVariantInParam Row/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ItemData(long Index/*[in]*/);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Format(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Format(void);
  HRESULT         __fastcall set_Format(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_DecimalPlaces(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DecimalPlaces(void);
  HRESULT         __fastcall set_DecimalPlaces(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_InputMask(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_InputMask(void);
  HRESULT         __fastcall set_InputMask(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_RowSourceType(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSourceType(void);
  HRESULT         __fastcall set_RowSourceType(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_RowSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSource(void);
  HRESULT         __fastcall set_RowSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnCount(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnCount(void);
  HRESULT         __fastcall set_ColumnCount(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHeads(void);
  HRESULT         __fastcall set_ColumnHeads(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidths(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ColumnWidths(void);
  HRESULT         __fastcall set_ColumnWidths(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_BoundColumn(long* pRet/*[out,retval]*/);
  long            __fastcall get_BoundColumn(void);
  HRESULT         __fastcall set_BoundColumn(long pRet/*[in]*/);
  HRESULT         __fastcall get_ListRows(short* pRet/*[out,retval]*/);
  short           __fastcall get_ListRows(void);
  HRESULT         __fastcall set_ListRows(short pRet/*[in]*/);
  HRESULT         __fastcall get_ListWidth(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ListWidth(void);
  HRESULT         __fastcall set_ListWidth(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_LimitToList(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LimitToList(void);
  HRESULT         __fastcall set_LimitToList(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoExpand(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoExpand(void);
  HRESULT         __fastcall set_AutoExpand(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT         __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT         __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AllowAutoCorrect(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowAutoCorrect(void);
  HRESULT         __fastcall set_AllowAutoCorrect(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT         __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT         __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_TextAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextAlign(void);
  HRESULT         __fastcall set_TextAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT         __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT         __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Text(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT         __fastcall set_Text(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_SelText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SelText(void);
  HRESULT         __fastcall set_SelText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_SelStart(short* pRet/*[out,retval]*/);
  short           __fastcall get_SelStart(void);
  HRESULT         __fastcall set_SelStart(short pRet/*[in]*/);
  HRESULT         __fastcall get_SelLength(short* pRet/*[out,retval]*/);
  short           __fastcall get_SelLength(void);
  HRESULT         __fastcall set_SelLength(short pRet/*[in]*/);
  HRESULT         __fastcall get_TextAlignGeneral(short* pRet/*[out,retval]*/);
  short           __fastcall get_TextAlignGeneral(void);
  HRESULT         __fastcall set_TextAlignGeneral(short pRet/*[in]*/);
  HRESULT         __fastcall get_FormatPictureText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FormatPictureText(void);
  HRESULT         __fastcall set_FormatPictureText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Coltyp(long* pRet/*[out,retval]*/);
  long            __fastcall get_Coltyp(void);
  HRESULT         __fastcall set_Coltyp(long pRet/*[in]*/);
  HRESULT         __fastcall get_ListCount(long* pRet/*[out,retval]*/);
  long            __fastcall get_ListCount(void);
  HRESULT         __fastcall set_ListCount(long pRet/*[in]*/);
  HRESULT         __fastcall get_ListIndex(long* pRet/*[out,retval]*/);
  long            __fastcall get_ListIndex(void);
  HRESULT         __fastcall set_ListIndex(long pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT         __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT         __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnChange(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnChange(void);
  HRESULT         __fastcall set_OnChange(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnNotInList(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnNotInList(void);
  HRESULT         __fastcall set_OnNotInList(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            Format = {read = get_Format, write = set_Format};
  __property   unsigned_char   DecimalPlaces = {read = get_DecimalPlaces, write = set_DecimalPlaces};
  __property   BSTR            InputMask = {read = get_InputMask, write = set_InputMask};
  __property   BSTR            RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   short           ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   long            BoundColumn = {read = get_BoundColumn, write = set_BoundColumn};
  __property   short           ListRows = {read = get_ListRows, write = set_ListRows};
  __property   BSTR            ListWidth = {read = get_ListWidth, write = set_ListWidth};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        LimitToList = {read = get_LimitToList, write = set_LimitToList};
  __property   TOLEBOOL        AutoExpand = {read = get_AutoExpand, write = set_AutoExpand};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        AllowAutoCorrect = {read = get_AllowAutoCorrect, write = set_AllowAutoCorrect};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   unsigned_char   TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   short           SelStart = {read = get_SelStart, write = set_SelStart};
  __property   short           SelLength = {read = get_SelLength, write = set_SelLength};
  __property   short           TextAlignGeneral = {read = get_TextAlignGeneral, write = set_TextAlignGeneral};
  __property   BSTR            FormatPictureText = {read = get_FormatPictureText, write = set_FormatPictureText};
  __property   long            Coltyp = {read = get_Coltyp, write = set_Coltyp};
  __property   long            ListCount = {read = get_ListCount, write = set_ListCount};
  __property   long            ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnChange = {read = get_OnChange, write = set_OnChange};
  __property   BSTR            OnNotInList = {read = get_OnNotInList, write = set_OnNotInList};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef TCOM_ComboboxT<_Combobox> TCOM_Combobox;

// *********************************************************************//
// DispIntf:  _Combobox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E95C-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _ComboboxDispT : public TAutoDriver<_Combobox>
{
public:
  _ComboboxDispT(){}

  _ComboboxDispT(_Combobox *pintf)
  {
    TAutoDriver<_Combobox>::Bind(pintf, false);
  }

  _ComboboxDispT(_ComboboxPtr pintf)
  {
    TAutoDriver<_Combobox>::Bind(pintf, true);
  }

  _ComboboxDispT& operator=(_Combobox *pintf)
  {
    TAutoDriver<_Combobox>::Bind(pintf, false);
    return *this;
  }

  _ComboboxDispT& operator=(_ComboboxPtr pintf)
  {
    TAutoDriver<_Combobox>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessComboBox));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessComboBox);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Dropdown();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Column(long Index/*[in]*/, 
                                                   TVariantInParam Row/*[in,opt]*/, 
                                                   TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Column(long Index/*[in]*/, 
                                        TVariantInParam Row/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ItemData(long Index/*[in]*/, 
                                                     TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ItemData(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/);
  Access_97::_HyperlinkPtr __fastcall get_Hyperlink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Format(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Format(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Format(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DecimalPlaces(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DecimalPlaces(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DecimalPlaces(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InputMask(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_InputMask(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InputMask(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowSourceType(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSourceType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowSourceType(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnCount(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnCount(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHeads(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHeads(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidths(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ColumnWidths(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidths(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BoundColumn(long* pRet/*[out,retval]*/);
  long            __fastcall get_BoundColumn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BoundColumn(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListRows(short* pRet/*[out,retval]*/);
  short           __fastcall get_ListRows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListRows(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListWidth(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ListWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListWidth(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LimitToList(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LimitToList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LimitToList(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoExpand(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoExpand(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoExpand(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowAutoCorrect(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowAutoCorrect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowAutoCorrect(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SelText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelStart(short* pRet/*[out,retval]*/);
  short           __fastcall get_SelStart(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelStart(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelLength(short* pRet/*[out,retval]*/);
  short           __fastcall get_SelLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelLength(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextAlignGeneral(short* pRet/*[out,retval]*/);
  short           __fastcall get_TextAlignGeneral(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextAlignGeneral(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FormatPictureText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FormatPictureText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FormatPictureText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Coltyp(long* pRet/*[out,retval]*/);
  long            __fastcall get_Coltyp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Coltyp(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListCount(long* pRet/*[out,retval]*/);
  long            __fastcall get_ListCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListCount(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListIndex(long* pRet/*[out,retval]*/);
  long            __fastcall get_ListIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListIndex(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnChange(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnChange(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnNotInList(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnNotInList(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnNotInList(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   Access_97::_HyperlinkPtr Hyperlink = {read = get_Hyperlink};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            Format = {read = get_Format, write = set_Format};
  __property   unsigned_char   DecimalPlaces = {read = get_DecimalPlaces, write = set_DecimalPlaces};
  __property   BSTR            InputMask = {read = get_InputMask, write = set_InputMask};
  __property   BSTR            RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   short           ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   BSTR            ColumnWidths = {read = get_ColumnWidths, write = set_ColumnWidths};
  __property   long            BoundColumn = {read = get_BoundColumn, write = set_BoundColumn};
  __property   short           ListRows = {read = get_ListRows, write = set_ListRows};
  __property   BSTR            ListWidth = {read = get_ListWidth, write = set_ListWidth};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        LimitToList = {read = get_LimitToList, write = set_LimitToList};
  __property   TOLEBOOL        AutoExpand = {read = get_AutoExpand, write = set_AutoExpand};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        AllowAutoCorrect = {read = get_AllowAutoCorrect, write = set_AllowAutoCorrect};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   unsigned_char   TextAlign = {read = get_TextAlign, write = set_TextAlign};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            SelText = {read = get_SelText, write = set_SelText};
  __property   short           SelStart = {read = get_SelStart, write = set_SelStart};
  __property   short           SelLength = {read = get_SelLength, write = set_SelLength};
  __property   short           TextAlignGeneral = {read = get_TextAlignGeneral, write = set_TextAlignGeneral};
  __property   BSTR            FormatPictureText = {read = get_FormatPictureText, write = set_FormatPictureText};
  __property   long            Coltyp = {read = get_Coltyp, write = set_Coltyp};
  __property   long            ListCount = {read = get_ListCount, write = set_ListCount};
  __property   long            ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnChange = {read = get_OnChange, write = set_OnChange};
  __property   BSTR            OnNotInList = {read = get_OnNotInList, write = set_OnNotInList};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef _ComboboxDispT<_Combobox> _ComboboxDisp;

typedef TComInterface<_ComboBoxEvents>  TCOM_ComboBoxEvents;

// *********************************************************************//
// SmartIntf: TCOM_ObjectFrame
// Interface: _ObjectFrame
// *********************************************************************//
template <class T /* _ObjectFrame */ >
class TCOM_ObjectFrameT : public TComInterface<_ObjectFrame>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ObjectFrameT() {}
  TCOM_ObjectFrameT(_ObjectFrame *intf, bool addRef = false) : TComInterface<_ObjectFrame>(intf, addRef) {}
  TCOM_ObjectFrameT(const TCOM_ObjectFrameT& src) : TComInterface<_ObjectFrame>(src) {}
  TCOM_ObjectFrameT& operator=(const TCOM_ObjectFrameT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Object(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT         __fastcall get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ObjectVerbs(long Index/*[in]*/);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_SizeMode(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SizeMode(void);
  HRESULT         __fastcall set_SizeMode(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OLEClass(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OLEClass(void);
  HRESULT         __fastcall set_OLEClass(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Item(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Item(void);
  HRESULT         __fastcall set_Item(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_RowSourceType(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSourceType(void);
  HRESULT         __fastcall set_RowSourceType(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_RowSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSource(void);
  HRESULT         __fastcall set_RowSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_LinkChildFields(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_LinkChildFields(void);
  HRESULT         __fastcall set_LinkChildFields(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_LinkMasterFields(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_LinkMasterFields(void);
  HRESULT         __fastcall set_LinkMasterFields(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AutoActivate(short* pRet/*[out,retval]*/);
  short           __fastcall get_AutoActivate(void);
  HRESULT         __fastcall set_AutoActivate(short pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayType(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayType(void);
  HRESULT         __fastcall set_DisplayType(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_UpdateOptions(short* pRet/*[out,retval]*/);
  short           __fastcall get_UpdateOptions(void);
  HRESULT         __fastcall set_UpdateOptions(short pRet/*[in]*/);
  HRESULT         __fastcall get_Verb(long* pRet/*[out,retval]*/);
  long            __fastcall get_Verb(void);
  HRESULT         __fastcall set_Verb(long pRet/*[in]*/);
  HRESULT         __fastcall get_OLEType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OLEType(void);
  HRESULT         __fastcall set_OLEType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OLETypeAllowed(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OLETypeAllowed(void);
  HRESULT         __fastcall set_OLETypeAllowed(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_SourceObject(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceObject(void);
  HRESULT         __fastcall set_SourceObject(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Class(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Class(void);
  HRESULT         __fastcall set_Class(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_SourceDoc(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceDoc(void);
  HRESULT         __fastcall set_SourceDoc(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_SourceItem(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceItem(void);
  HRESULT         __fastcall set_SourceItem(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnCount(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnCount(void);
  HRESULT         __fastcall set_ColumnCount(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHeads(void);
  HRESULT         __fastcall set_ColumnHeads(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OleData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OleData(void);
  HRESULT         __fastcall set_OleData(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_UpdateMethod(short* pRet/*[out,retval]*/);
  short           __fastcall get_UpdateMethod(void);
  HRESULT         __fastcall set_UpdateMethod(short pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_Data(short* pRet/*[out,retval]*/);
  short           __fastcall get_Data(void);
  HRESULT         __fastcall set_Data(short pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT         __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_LpOleObject(long* pRet/*[out,retval]*/);
  long            __fastcall get_LpOleObject(void);
  HRESULT         __fastcall set_LpOleObject(long pRet/*[in]*/);
  HRESULT         __fastcall get_ObjectVerbsCount(long* pRet/*[out,retval]*/);
  long            __fastcall get_ObjectVerbsCount(void);
  HRESULT         __fastcall set_ObjectVerbsCount(long pRet/*[in]*/);
  HRESULT         __fastcall get_Action(short* pRet/*[out,retval]*/);
  short           __fastcall get_Action(void);
  HRESULT         __fastcall set_Action(short pRet/*[in]*/);
  HRESULT         __fastcall get_Scaling(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_Scaling(void);
  HRESULT         __fastcall set_Scaling(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OnUpdated(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnUpdated(void);
  HRESULT         __fastcall set_OnUpdated(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   unsigned_char   SizeMode = {read = get_SizeMode, write = set_SizeMode};
  __property   BSTR            OLEClass = {read = get_OLEClass, write = set_OLEClass};
  __property   BSTR            Item = {read = get_Item, write = set_Item};
  __property   BSTR            RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   BSTR            LinkChildFields = {read = get_LinkChildFields, write = set_LinkChildFields};
  __property   BSTR            LinkMasterFields = {read = get_LinkMasterFields, write = set_LinkMasterFields};
  __property   short           AutoActivate = {read = get_AutoActivate, write = set_AutoActivate};
  __property   TOLEBOOL        DisplayType = {read = get_DisplayType, write = set_DisplayType};
  __property   short           UpdateOptions = {read = get_UpdateOptions, write = set_UpdateOptions};
  __property   long            Verb = {read = get_Verb, write = set_Verb};
  __property   unsigned_char   OLEType = {read = get_OLEType, write = set_OLEType};
  __property   unsigned_char   OLETypeAllowed = {read = get_OLETypeAllowed, write = set_OLETypeAllowed};
  __property   BSTR            SourceObject = {read = get_SourceObject, write = set_SourceObject};
  __property   BSTR            Class = {read = get_Class, write = set_Class};
  __property   BSTR            SourceDoc = {read = get_SourceDoc, write = set_SourceDoc};
  __property   BSTR            SourceItem = {read = get_SourceItem, write = set_SourceItem};
  __property   short           ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           UpdateMethod = {read = get_UpdateMethod, write = set_UpdateMethod};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Data = {read = get_Data, write = set_Data};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            LpOleObject = {read = get_LpOleObject, write = set_LpOleObject};
  __property   long            ObjectVerbsCount = {read = get_ObjectVerbsCount, write = set_ObjectVerbsCount};
  __property   short           Action = {read = get_Action, write = set_Action};
  __property   unsigned_char   Scaling = {read = get_Scaling, write = set_Scaling};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnUpdated = {read = get_OnUpdated, write = set_OnUpdated};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
};
typedef TCOM_ObjectFrameT<_ObjectFrame> TCOM_ObjectFrame;

// *********************************************************************//
// DispIntf:  _ObjectFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E95E-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _ObjectFrameDispT : public TAutoDriver<_ObjectFrame>
{
public:
  _ObjectFrameDispT(){}

  _ObjectFrameDispT(_ObjectFrame *pintf)
  {
    TAutoDriver<_ObjectFrame>::Bind(pintf, false);
  }

  _ObjectFrameDispT(_ObjectFramePtr pintf)
  {
    TAutoDriver<_ObjectFrame>::Bind(pintf, true);
  }

  _ObjectFrameDispT& operator=(_ObjectFrame *pintf)
  {
    TAutoDriver<_ObjectFrame>::Bind(pintf, false);
    return *this;
  }

  _ObjectFrameDispT& operator=(_ObjectFramePtr pintf)
  {
    TAutoDriver<_ObjectFrame>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessObjectFrame));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessObjectFrame);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Object(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectVerbs(long Index/*[in]*/, 
                                                        BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ObjectVerbs(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SizeMode(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SizeMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SizeMode(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEClass(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OLEClass(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEClass(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Item(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Item(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowSourceType(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSourceType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowSourceType(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RowSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkChildFields(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_LinkChildFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LinkChildFields(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkMasterFields(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_LinkMasterFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LinkMasterFields(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoActivate(short* pRet/*[out,retval]*/);
  short           __fastcall get_AutoActivate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoActivate(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayType(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DisplayType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayType(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UpdateOptions(short* pRet/*[out,retval]*/);
  short           __fastcall get_UpdateOptions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UpdateOptions(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Verb(long* pRet/*[out,retval]*/);
  long            __fastcall get_Verb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Verb(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OLEType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLETypeAllowed(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OLETypeAllowed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLETypeAllowed(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceObject(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SourceObject(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Class(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Class(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Class(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceDoc(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceDoc(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SourceDoc(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceItem(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceItem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SourceItem(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnCount(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnCount(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHeads(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHeads(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OleData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OleData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OleData(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UpdateMethod(short* pRet/*[out,retval]*/);
  short           __fastcall get_UpdateMethod(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UpdateMethod(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Data(short* pRet/*[out,retval]*/);
  short           __fastcall get_Data(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Data(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LpOleObject(long* pRet/*[out,retval]*/);
  long            __fastcall get_LpOleObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LpOleObject(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectVerbsCount(long* pRet/*[out,retval]*/);
  long            __fastcall get_ObjectVerbsCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ObjectVerbsCount(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Action(short* pRet/*[out,retval]*/);
  short           __fastcall get_Action(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Action(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Scaling(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_Scaling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Scaling(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnUpdated(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnUpdated(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnUpdated(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   unsigned_char   SizeMode = {read = get_SizeMode, write = set_SizeMode};
  __property   BSTR            OLEClass = {read = get_OLEClass, write = set_OLEClass};
  __property   BSTR            Item = {read = get_Item, write = set_Item};
  __property   BSTR            RowSourceType = {read = get_RowSourceType, write = set_RowSourceType};
  __property   BSTR            RowSource = {read = get_RowSource, write = set_RowSource};
  __property   BSTR            LinkChildFields = {read = get_LinkChildFields, write = set_LinkChildFields};
  __property   BSTR            LinkMasterFields = {read = get_LinkMasterFields, write = set_LinkMasterFields};
  __property   short           AutoActivate = {read = get_AutoActivate, write = set_AutoActivate};
  __property   TOLEBOOL        DisplayType = {read = get_DisplayType, write = set_DisplayType};
  __property   short           UpdateOptions = {read = get_UpdateOptions, write = set_UpdateOptions};
  __property   long            Verb = {read = get_Verb, write = set_Verb};
  __property   unsigned_char   OLEType = {read = get_OLEType, write = set_OLEType};
  __property   unsigned_char   OLETypeAllowed = {read = get_OLETypeAllowed, write = set_OLETypeAllowed};
  __property   BSTR            SourceObject = {read = get_SourceObject, write = set_SourceObject};
  __property   BSTR            Class = {read = get_Class, write = set_Class};
  __property   BSTR            SourceDoc = {read = get_SourceDoc, write = set_SourceDoc};
  __property   BSTR            SourceItem = {read = get_SourceItem, write = set_SourceItem};
  __property   short           ColumnCount = {read = get_ColumnCount, write = set_ColumnCount};
  __property   TOLEBOOL        ColumnHeads = {read = get_ColumnHeads, write = set_ColumnHeads};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   short           UpdateMethod = {read = get_UpdateMethod, write = set_UpdateMethod};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Data = {read = get_Data, write = set_Data};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            LpOleObject = {read = get_LpOleObject, write = set_LpOleObject};
  __property   long            ObjectVerbsCount = {read = get_ObjectVerbsCount, write = set_ObjectVerbsCount};
  __property   short           Action = {read = get_Action, write = set_Action};
  __property   unsigned_char   Scaling = {read = get_Scaling, write = set_Scaling};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnUpdated = {read = get_OnUpdated, write = set_OnUpdated};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
};
typedef _ObjectFrameDispT<_ObjectFrame> _ObjectFrameDisp;

typedef TComInterface<_ObjectFrameEvents>  TCOM_ObjectFrameEvents;

// *********************************************************************//
// SmartIntf: TCOM_PageBreak
// Interface: _PageBreak
// *********************************************************************//
template <class T /* _PageBreak */ >
class TCOM_PageBreakT : public TComInterface<_PageBreak>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PageBreakT() {}
  TCOM_PageBreakT(_PageBreak *intf, bool addRef = false) : TComInterface<_PageBreak>(intf, addRef) {}
  TCOM_PageBreakT(const TCOM_PageBreakT& src) : TComInterface<_PageBreak>(src) {}
  TCOM_PageBreakT& operator=(const TCOM_PageBreakT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
};
typedef TCOM_PageBreakT<_PageBreak> TCOM_PageBreak;

// *********************************************************************//
// DispIntf:  _PageBreak
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E960-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _PageBreakDispT : public TAutoDriver<_PageBreak>
{
public:
  _PageBreakDispT(){}

  _PageBreakDispT(_PageBreak *pintf)
  {
    TAutoDriver<_PageBreak>::Bind(pintf, false);
  }

  _PageBreakDispT(_PageBreakPtr pintf)
  {
    TAutoDriver<_PageBreak>::Bind(pintf, true);
  }

  _PageBreakDispT& operator=(_PageBreak *pintf)
  {
    TAutoDriver<_PageBreak>::Bind(pintf, false);
    return *this;
  }

  _PageBreakDispT& operator=(_PageBreakPtr pintf)
  {
    TAutoDriver<_PageBreak>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessPageBreak));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessPageBreak);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
};
typedef _PageBreakDispT<_PageBreak> _PageBreakDisp;

typedef TComInterface<_PageBreakEvents>  TCOM_PageBreakEvents;

// *********************************************************************//
// SmartIntf: TCOM_ToggleButton
// Interface: _ToggleButton
// *********************************************************************//
template <class T /* _ToggleButton */ >
class TCOM_ToggleButtonT : public TComInterface<_ToggleButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ToggleButtonT() {}
  TCOM_ToggleButtonT(_ToggleButton *intf, bool addRef = false) : TComInterface<_ToggleButton>(intf, addRef) {}
  TCOM_ToggleButtonT(const TCOM_ToggleButtonT& src) : TComInterface<_ToggleButton>(src) {}
  TCOM_ToggleButtonT& operator=(const TCOM_ToggleButtonT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall Undo(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT         __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT         __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT         __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_OptionValue(long* pRet/*[out,retval]*/);
  long            __fastcall get_OptionValue(void);
  HRESULT         __fastcall set_OptionValue(long pRet/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT         __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT         __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TripleState(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TripleState(void);
  HRESULT         __fastcall set_TripleState(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT         __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT         __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT         __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT         __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT         __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT         __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT         __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef TCOM_ToggleButtonT<_ToggleButton> TCOM_ToggleButton;

// *********************************************************************//
// DispIntf:  _ToggleButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E962-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _ToggleButtonDispT : public TAutoDriver<_ToggleButton>
{
public:
  _ToggleButtonDispT(){}

  _ToggleButtonDispT(_ToggleButton *pintf)
  {
    TAutoDriver<_ToggleButton>::Bind(pintf, false);
  }

  _ToggleButtonDispT(_ToggleButtonPtr pintf)
  {
    TAutoDriver<_ToggleButton>::Bind(pintf, true);
  }

  _ToggleButtonDispT& operator=(_ToggleButton *pintf)
  {
    TAutoDriver<_ToggleButton>::Bind(pintf, false);
    return *this;
  }

  _ToggleButtonDispT& operator=(_ToggleButtonPtr pintf)
  {
    TAutoDriver<_ToggleButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessToggleButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessToggleButton);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OptionValue(long* pRet/*[out,retval]*/);
  long            __fastcall get_OptionValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OptionValue(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TripleState(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TripleState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TripleState(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef _ToggleButtonDispT<_ToggleButton> _ToggleButtonDisp;

typedef TComInterface<_ToggleButtonEvents>  TCOM_ToggleButtonEvents;

typedef TComInterface<_ToggleButtonInOptionEvents>  TCOM_ToggleButtonInOptionEvents;

// *********************************************************************//
// SmartIntf: TCOM_PaletteButton
// Interface: _PaletteButton
// *********************************************************************//
template <class T /* _PaletteButton */ >
class TCOM_PaletteButtonT : public TComInterface<_PaletteButton>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_PaletteButtonT() {}
  TCOM_PaletteButtonT(_PaletteButton *intf, bool addRef = false) : TComInterface<_PaletteButton>(intf, addRef) {}
  TCOM_PaletteButtonT(const TCOM_PaletteButtonT& src) : TComInterface<_PaletteButton>(src) {}
  TCOM_PaletteButtonT& operator=(const TCOM_PaletteButtonT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OptionValue(long* pRet/*[out,retval]*/);
  long            __fastcall get_OptionValue(void);
  HRESULT         __fastcall set_OptionValue(long pRet/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT         __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT         __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TripleState(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TripleState(void);
  HRESULT         __fastcall set_TripleState(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT         __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT         __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT         __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT         __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT         __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT         __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT         __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef TCOM_PaletteButtonT<_PaletteButton> TCOM_PaletteButton;

// *********************************************************************//
// DispIntf:  _PaletteButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9CD4A760-A6A9-11CE-A686-00AA003F0F07}
// *********************************************************************//
template<class T>
class _PaletteButtonDispT : public TAutoDriver<_PaletteButton>
{
public:
  _PaletteButtonDispT(){}

  _PaletteButtonDispT(_PaletteButton *pintf)
  {
    TAutoDriver<_PaletteButton>::Bind(pintf, false);
  }

  _PaletteButtonDispT(_PaletteButtonPtr pintf)
  {
    TAutoDriver<_PaletteButton>::Bind(pintf, true);
  }

  _PaletteButtonDispT& operator=(_PaletteButton *pintf)
  {
    TAutoDriver<_PaletteButton>::Bind(pintf, false);
    return *this;
  }

  _PaletteButtonDispT& operator=(_PaletteButtonPtr pintf)
  {
    TAutoDriver<_PaletteButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessPaletteButton));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessPaletteButton);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OptionValue(long* pRet/*[out,retval]*/);
  long            __fastcall get_OptionValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OptionValue(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationRule(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationRule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationRule(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ValidationText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ValidationText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ValidationText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TripleState(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TripleState(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TripleState(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HideDuplicates(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HideDuplicates(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnOrder(short* pRet/*[out,retval]*/);
  short           __fastcall get_ColumnOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnOrder(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ColumnHidden(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColumnHidden(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   long            OptionValue = {read = get_OptionValue, write = set_OptionValue};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            DefaultValue = {read = get_DefaultValue, write = set_DefaultValue};
  __property   BSTR            ValidationRule = {read = get_ValidationRule, write = set_ValidationRule};
  __property   BSTR            ValidationText = {read = get_ValidationText, write = set_ValidationText};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TripleState = {read = get_TripleState, write = set_TripleState};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        HideDuplicates = {read = get_HideDuplicates, write = set_HideDuplicates};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           ColumnWidth = {read = get_ColumnWidth, write = set_ColumnWidth};
  __property   short           ColumnOrder = {read = get_ColumnOrder, write = set_ColumnOrder};
  __property   TOLEBOOL        ColumnHidden = {read = get_ColumnHidden, write = set_ColumnHidden};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef _PaletteButtonDispT<_PaletteButton> _PaletteButtonDisp;

typedef TComInterface<_PaletteButtonEvents>  TCOM_PaletteButtonEvents;

// *********************************************************************//
// SmartIntf: TCOM_SubForm
// Interface: _SubForm
// *********************************************************************//
template <class T /* _SubForm */ >
class TCOM_SubFormT : public TComInterface<_SubForm>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_SubFormT() {}
  TCOM_SubFormT(_SubForm *intf, bool addRef = false) : TComInterface<_SubForm>(intf, addRef) {}
  TCOM_SubFormT(const TCOM_SubFormT& src) : TComInterface<_SubForm>(src) {}
  TCOM_SubFormT& operator=(const TCOM_SubFormT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_Form(void);
  HRESULT         __fastcall get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall get_Report(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/);
  Access_97::Controls_Ptr __fastcall get_Controls(void);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_SourceObject(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceObject(void);
  HRESULT         __fastcall set_SourceObject(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_LinkChildFields(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_LinkChildFields(void);
  HRESULT         __fastcall set_LinkChildFields(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_LinkMasterFields(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_LinkMasterFields(void);
  HRESULT         __fastcall set_LinkMasterFields(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanGrow(void);
  HRESULT         __fastcall set_CanGrow(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanShrink(void);
  HRESULT         __fastcall set_CanShrink(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT         __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT         __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT         __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT         __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT         __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::Controls_Ptr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            SourceObject = {read = get_SourceObject, write = set_SourceObject};
  __property   BSTR            LinkChildFields = {read = get_LinkChildFields, write = set_LinkChildFields};
  __property   BSTR            LinkMasterFields = {read = get_LinkMasterFields, write = set_LinkMasterFields};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        CanGrow = {read = get_CanGrow, write = set_CanGrow};
  __property   TOLEBOOL        CanShrink = {read = get_CanShrink, write = set_CanShrink};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
};
typedef TCOM_SubFormT<_SubForm> TCOM_SubForm;

// *********************************************************************//
// DispIntf:  _SubForm
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E964-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _SubFormDispT : public TAutoDriver<_SubForm>
{
public:
  _SubFormDispT(){}

  _SubFormDispT(_SubForm *pintf)
  {
    TAutoDriver<_SubForm>::Bind(pintf, false);
  }

  _SubFormDispT(_SubFormPtr pintf)
  {
    TAutoDriver<_SubForm>::Bind(pintf, true);
  }

  _SubFormDispT& operator=(_SubForm *pintf)
  {
    TAutoDriver<_SubForm>::Bind(pintf, false);
    return *this;
  }

  _SubFormDispT& operator=(_SubFormPtr pintf)
  {
    TAutoDriver<_SubForm>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessSubForm));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessSubForm);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_Form(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall get_Report(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/);
  Access_97::Controls_Ptr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SourceObject(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_SourceObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SourceObject(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkChildFields(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_LinkChildFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LinkChildFields(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkMasterFields(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_LinkMasterFields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LinkMasterFields(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanGrow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CanGrow(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanShrink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CanShrink(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoLabel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoLabel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AddColon(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AddColon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AddColon(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelX(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelY(short* pRet/*[out,retval]*/);
  short           __fastcall get_LabelY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LabelAlign(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_LabelAlign(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LabelAlign(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::Controls_Ptr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            SourceObject = {read = get_SourceObject, write = set_SourceObject};
  __property   BSTR            LinkChildFields = {read = get_LinkChildFields, write = set_LinkChildFields};
  __property   BSTR            LinkMasterFields = {read = get_LinkMasterFields, write = set_LinkMasterFields};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   TOLEBOOL        CanGrow = {read = get_CanGrow, write = set_CanGrow};
  __property   TOLEBOOL        CanShrink = {read = get_CanShrink, write = set_CanShrink};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   TOLEBOOL        AutoLabel = {read = get_AutoLabel, write = set_AutoLabel};
  __property   TOLEBOOL        AddColon = {read = get_AddColon, write = set_AddColon};
  __property   short           LabelX = {read = get_LabelX, write = set_LabelX};
  __property   short           LabelY = {read = get_LabelY, write = set_LabelY};
  __property   unsigned_char   LabelAlign = {read = get_LabelAlign, write = set_LabelAlign};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
};
typedef _SubFormDispT<_SubForm> _SubFormDisp;

typedef TComInterface<_SubFormEvents>  TCOM_SubFormEvents;

// *********************************************************************//
// SmartIntf: TCOM_SubReport
// Interface: _SubReport
// *********************************************************************//
template <class T /* _SubReport */ >
class TCOM_SubReportT : public TComInterface<_SubReport>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_SubReportT() {}
  TCOM_SubReportT(_SubReport *intf, bool addRef = false) : TComInterface<_SubReport>(intf, addRef) {}
  TCOM_SubReportT(const TCOM_SubReportT& src) : TComInterface<_SubReport>(src) {}
  TCOM_SubReportT& operator=(const TCOM_SubReportT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_Form(void);
  HRESULT         __fastcall get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall get_Report(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
};
typedef TCOM_SubReportT<_SubReport> TCOM_SubReport;

// *********************************************************************//
// DispIntf:  _SubReport
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E966-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _SubReportDispT : public TAutoDriver<_SubReport>
{
public:
  _SubReportDispT(){}

  _SubReportDispT(_SubReport *pintf)
  {
    TAutoDriver<_SubReport>::Bind(pintf, false);
  }

  _SubReportDispT(_SubReportPtr pintf)
  {
    TAutoDriver<_SubReport>::Bind(pintf, true);
  }

  _SubReportDispT& operator=(_SubReport *pintf)
  {
    TAutoDriver<_SubReport>::Bind(pintf, false);
    return *this;
  }

  _SubReportDispT& operator=(_SubReportPtr pintf)
  {
    TAutoDriver<_SubReport>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessSubReport));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessSubReport);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_Form(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall get_Report(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
};
typedef _SubReportDispT<_SubReport> _SubReportDisp;

typedef TComInterface<_SubReportEvents>  TCOM_SubReportEvents;

// *********************************************************************//
// SmartIntf: TCOM_CustomControl
// Interface: _CustomControl
// *********************************************************************//
template <class T /* _CustomControl */ >
class TCOM_CustomControlT : public TComInterface<_CustomControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_CustomControlT() {}
  TCOM_CustomControlT(_CustomControl *intf, bool addRef = false) : TComInterface<_CustomControl>(intf, addRef) {}
  TCOM_CustomControlT(const TCOM_CustomControlT& src) : TComInterface<_CustomControl>(src) {}
  TCOM_CustomControlT& operator=(const TCOM_CustomControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Object(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT         __fastcall get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ObjectVerbs(long Index/*[in]*/);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Goto(void);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OLEClass(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OLEClass(void);
  HRESULT         __fastcall set_OLEClass(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Verb(long* pRet/*[out,retval]*/);
  long            __fastcall get_Verb(void);
  HRESULT         __fastcall set_Verb(long pRet/*[in]*/);
  HRESULT         __fastcall get_Class(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Class(void);
  HRESULT         __fastcall set_Class(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT         __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OleData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OleData(void);
  HRESULT         __fastcall set_OleData(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT         __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT         __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT         __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT         __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT         __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT         __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_LpOleObject(long* pRet/*[out,retval]*/);
  long            __fastcall get_LpOleObject(void);
  HRESULT         __fastcall set_LpOleObject(long pRet/*[in]*/);
  HRESULT         __fastcall get_ObjectVerbsCount(long* pRet/*[out,retval]*/);
  long            __fastcall get_ObjectVerbsCount(void);
  HRESULT         __fastcall set_ObjectVerbsCount(long pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OnUpdated(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnUpdated(void);
  HRESULT         __fastcall set_OnUpdated(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT         __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT         __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Default(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Default(void);
  HRESULT         __fastcall set_Default(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Cancel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Cancel(void);
  HRESULT         __fastcall set_Cancel(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Custom(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Custom(void);
  HRESULT         __fastcall set_Custom(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_About(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_About(void);
  HRESULT         __fastcall set_About(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            OLEClass = {read = get_OLEClass, write = set_OLEClass};
  __property   long            Verb = {read = get_Verb, write = set_Verb};
  __property   BSTR            Class = {read = get_Class, write = set_Class};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            LpOleObject = {read = get_LpOleObject, write = set_LpOleObject};
  __property   long            ObjectVerbsCount = {read = get_ObjectVerbsCount, write = set_ObjectVerbsCount};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnUpdated = {read = get_OnUpdated, write = set_OnUpdated};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   TOLEBOOL        Default = {read = get_Default, write = set_Default};
  __property   TOLEBOOL        Cancel = {read = get_Cancel, write = set_Cancel};
  __property   BSTR            Custom = {read = get_Custom, write = set_Custom};
  __property   BSTR            About = {read = get_About, write = set_About};
};
typedef TCOM_CustomControlT<_CustomControl> TCOM_CustomControl;

// *********************************************************************//
// DispIntf:  _CustomControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E968-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _CustomControlDispT : public TAutoDriver<_CustomControl>
{
public:
  _CustomControlDispT(){}

  _CustomControlDispT(_CustomControl *pintf)
  {
    TAutoDriver<_CustomControl>::Bind(pintf, false);
  }

  _CustomControlDispT(_CustomControlPtr pintf)
  {
    TAutoDriver<_CustomControl>::Bind(pintf, true);
  }

  _CustomControlDispT& operator=(_CustomControl *pintf)
  {
    TAutoDriver<_CustomControl>::Bind(pintf, false);
    return *this;
  }

  _CustomControlDispT& operator=(_CustomControlPtr pintf)
  {
    TAutoDriver<_CustomControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessCustomControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessCustomControl);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Object(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Object(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectVerbs(long Index/*[in]*/, 
                                                        BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ObjectVerbs(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Goto();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEClass(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OLEClass(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEClass(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Verb(long* pRet/*[out,retval]*/);
  long            __fastcall get_Verb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Verb(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Class(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Class(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Class(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Locked(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Locked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Locked(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OleData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OleData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OleData(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_OldBorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OldBorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BorderColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderWidth(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderWidth(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderLineStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderLineStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlTipText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlTipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlTipText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_ObjectPalette(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ObjectPalette(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LpOleObject(long* pRet/*[out,retval]*/);
  long            __fastcall get_LpOleObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LpOleObject(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ObjectVerbsCount(long* pRet/*[out,retval]*/);
  long            __fastcall get_ObjectVerbsCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ObjectVerbsCount(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnUpdated(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnUpdated(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnUpdated(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnEnter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnEnter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnEnter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnExit(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnExit(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnExit(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Default(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Default(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Default(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cancel(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Cancel(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Cancel(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Custom(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Custom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Custom(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_About(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_About(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_About(BSTR pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Object = {read = get_Object};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   BSTR            OLEClass = {read = get_OLEClass, write = set_OLEClass};
  __property   long            Verb = {read = get_Verb, write = set_Verb};
  __property   BSTR            Class = {read = get_Class, write = set_Class};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        Locked = {read = get_Locked, write = set_Locked};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   unsigned_char   OldBorderStyle = {read = get_OldBorderStyle, write = set_OldBorderStyle};
  __property   long            BorderColor = {read = get_BorderColor, write = set_BorderColor};
  __property   unsigned_char   BorderWidth = {read = get_BorderWidth, write = set_BorderWidth};
  __property   unsigned_char   BorderLineStyle = {read = get_BorderLineStyle, write = set_BorderLineStyle};
  __property   BSTR            ControlTipText = {read = get_ControlTipText, write = set_ControlTipText};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   long            LpOleObject = {read = get_LpOleObject, write = set_LpOleObject};
  __property   long            ObjectVerbsCount = {read = get_ObjectVerbsCount, write = set_ObjectVerbsCount};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnUpdated = {read = get_OnUpdated, write = set_OnUpdated};
  __property   BSTR            OnEnter = {read = get_OnEnter, write = set_OnEnter};
  __property   BSTR            OnExit = {read = get_OnExit, write = set_OnExit};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   TOLEBOOL        Default = {read = get_Default, write = set_Default};
  __property   TOLEBOOL        Cancel = {read = get_Cancel, write = set_Cancel};
  __property   BSTR            Custom = {read = get_Custom, write = set_Custom};
  __property   BSTR            About = {read = get_About, write = set_About};
};
typedef _CustomControlDispT<_CustomControl> _CustomControlDisp;

typedef TComInterface<_CustomControlEvents>  TCOM_CustomControlEvents;

typedef TComInterface<_CustomControlInReportEvents>  TCOM_CustomControlInReportEvents;

// *********************************************************************//
// SmartIntf: TCOM_TabControl
// Interface: _TabControl
// *********************************************************************//
template <class T /* _TabControl */ >
class TCOM_TabControlT : public TComInterface<_TabControl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_TabControlT() {}
  TCOM_TabControlT(_TabControl *intf, bool addRef = false) : TComInterface<_TabControl>(intf, addRef) {}
  TCOM_TabControlT(const TCOM_TabControlT& src) : TComInterface<_TabControl>(src) {}
  TCOM_TabControlT& operator=(const TCOM_TabControlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall SizeToFit(void);
  HRESULT         __fastcall get_Pages(Access_97::PagesPtr* pRet/*[out,retval]*/);
  Access_97::PagesPtr __fastcall get_Pages(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT         __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT         __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT         __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT         __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT         __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT         __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(short pRet/*[in]*/);
  HRESULT         __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(short pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT         __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_MultiRow(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MultiRow(void);
  HRESULT         __fastcall set_MultiRow(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Style(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_Style(void);
  HRESULT         __fastcall set_Style(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_TabFixedHeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabFixedHeight(void);
  HRESULT         __fastcall set_TabFixedHeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_TabFixedWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabFixedWidth(void);
  HRESULT         __fastcall set_TabFixedWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT         __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT         __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT         __fastcall set_Section(short pRet/*[in]*/);
  HRESULT         __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT         __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT         __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OnChange(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnChange(void);
  HRESULT         __fastcall set_OnChange(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::PagesPtr Pages = {read = get_Pages};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   TOLEBOOL        MultiRow = {read = get_MultiRow, write = set_MultiRow};
  __property   unsigned_char   Style = {read = get_Style, write = set_Style};
  __property   short           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   short           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnChange = {read = get_OnChange, write = set_OnChange};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef TCOM_TabControlT<_TabControl> TCOM_TabControl;

// *********************************************************************//
// DispIntf:  _TabControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E971-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _TabControlDispT : public TAutoDriver<_TabControl>
{
public:
  _TabControlDispT(){}

  _TabControlDispT(_TabControl *pintf)
  {
    TAutoDriver<_TabControl>::Bind(pintf, false);
  }

  _TabControlDispT(_TabControlPtr pintf)
  {
    TAutoDriver<_TabControl>::Bind(pintf, true);
  }

  _TabControlDispT& operator=(_TabControl *pintf)
  {
    TAutoDriver<_TabControl>::Bind(pintf, false);
    return *this;
  }

  _TabControlDispT& operator=(_TabControlPtr pintf)
  {
    TAutoDriver<_TabControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessTabControl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessTabControl);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OldValue(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OldValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SizeToFit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pages(Access_97::PagesPtr* pRet/*[out,retval]*/);
  Access_97::PagesPtr __fastcall get_Pages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ControlType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_StatusBarText(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_StatusBarText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_StatusBarText(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabStop(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_TabStop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabStop(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabIndex(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabIndex(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(short* pRet/*[out,retval]*/);
  short           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(short* pRet/*[out,retval]*/);
  short           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BackStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MultiRow(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MultiRow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MultiRow(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabFixedHeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabFixedHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabFixedHeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabFixedWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_TabFixedWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabFixedWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontWeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TextFontCharSet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextFontCharSet(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(short* pRet/*[out,retval]*/);
  short           __fastcall get_Section(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Section(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsVisible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsVisible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnChange(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnChange(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnChange(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::PagesPtr Pages = {read = get_Pages};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ControlType = {read = get_ControlType, write = set_ControlType};
  __property   BSTR            StatusBarText = {read = get_StatusBarText, write = set_StatusBarText};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   TOLEBOOL        TabStop = {read = get_TabStop, write = set_TabStop};
  __property   short           TabIndex = {read = get_TabIndex, write = set_TabIndex};
  __property   short           Left = {read = get_Left, write = set_Left};
  __property   short           Top = {read = get_Top, write = set_Top};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   unsigned_char   BackStyle = {read = get_BackStyle, write = set_BackStyle};
  __property   TOLEBOOL        MultiRow = {read = get_MultiRow, write = set_MultiRow};
  __property   unsigned_char   Style = {read = get_Style, write = set_Style};
  __property   short           TabFixedHeight = {read = get_TabFixedHeight, write = set_TabFixedHeight};
  __property   short           TabFixedWidth = {read = get_TabFixedWidth, write = set_TabFixedWidth};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontWeight = {read = get_FontWeight, write = set_FontWeight};
  __property   TOLEBOOL        FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   TOLEBOOL        FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   unsigned_char   TextFontCharSet = {read = get_TextFontCharSet, write = set_TextFontCharSet};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           Section = {read = get_Section, write = set_Section};
  __property   BSTR            ControlName = {read = get_ControlName, write = set_ControlName};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   TOLEBOOL        IsVisible = {read = get_IsVisible, write = set_IsVisible};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
  __property   BSTR            OnChange = {read = get_OnChange, write = set_OnChange};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
};
typedef _TabControlDispT<_TabControl> _TabControlDisp;

typedef TComInterface<_TabControlEvents>  TCOM_TabControlEvents;

typedef TComInterface<_PageEvents>  TCOM_PageEvents;

// *********************************************************************//
// SmartIntf: TCOM_Section
// Interface: _Section
// *********************************************************************//
template <class T /* _Section */ >
class TCOM_SectionT : public TComInterface<_Section>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_SectionT() {}
  TCOM_SectionT(_Section *intf, bool addRef = false) : TComInterface<_Section>(intf, addRef) {}
  TCOM_SectionT(const TCOM_SectionT& src) : TComInterface<_Section>(src) {}
  TCOM_SectionT& operator=(const TCOM_SectionT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT         __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT         __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ForceNewPage(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ForceNewPage(void);
  HRESULT         __fastcall set_ForceNewPage(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_NewRowOrCol(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_NewRowOrCol(void);
  HRESULT         __fastcall set_NewRowOrCol(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_KeepTogether(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_KeepTogether(void);
  HRESULT         __fastcall set_KeepTogether(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT         __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanGrow(void);
  HRESULT         __fastcall set_CanGrow(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanShrink(void);
  HRESULT         __fastcall set_CanShrink(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_RepeatSection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_RepeatSection(void);
  HRESULT         __fastcall set_RepeatSection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(short pRet/*[in]*/);
  HRESULT         __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT         __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT         __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnFormat(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnFormat(void);
  HRESULT         __fastcall set_OnFormat(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnPrint(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnPrint(void);
  HRESULT         __fastcall set_OnPrint(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnRetreat(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnRetreat(void);
  HRESULT         __fastcall set_OnRetreat(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HasContinued(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasContinued(void);
  HRESULT         __fastcall set_HasContinued(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_WillContinue(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_WillContinue(void);
  HRESULT         __fastcall set_WillContinue(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT         __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ForceNewPage = {read = get_ForceNewPage, write = set_ForceNewPage};
  __property   unsigned_char   NewRowOrCol = {read = get_NewRowOrCol, write = set_NewRowOrCol};
  __property   TOLEBOOL        KeepTogether = {read = get_KeepTogether, write = set_KeepTogether};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        CanGrow = {read = get_CanGrow, write = set_CanGrow};
  __property   TOLEBOOL        CanShrink = {read = get_CanShrink, write = set_CanShrink};
  __property   TOLEBOOL        RepeatSection = {read = get_RepeatSection, write = set_RepeatSection};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            OnFormat = {read = get_OnFormat, write = set_OnFormat};
  __property   BSTR            OnPrint = {read = get_OnPrint, write = set_OnPrint};
  __property   BSTR            OnRetreat = {read = get_OnRetreat, write = set_OnRetreat};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   TOLEBOOL        HasContinued = {read = get_HasContinued, write = set_HasContinued};
  __property   TOLEBOOL        WillContinue = {read = get_WillContinue, write = set_WillContinue};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
};
typedef TCOM_SectionT<_Section> TCOM_Section;

// *********************************************************************//
// DispIntf:  _Section
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDCFC-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _SectionDispT : public TAutoDriver<_Section>
{
public:
  _SectionDispT(){}

  _SectionDispT(_Section *pintf)
  {
    TAutoDriver<_Section>::Bind(pintf, false);
  }

  _SectionDispT(_SectionPtr pintf)
  {
    TAutoDriver<_Section>::Bind(pintf, true);
  }

  _SectionDispT& operator=(_Section *pintf)
  {
    TAutoDriver<_Section>::Bind(pintf, false);
    return *this;
  }

  _SectionDispT& operator=(_SectionPtr pintf)
  {
    TAutoDriver<_Section>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessSection));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessSection);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/);
  Access_97::ChildrenPtr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EventProcPrefix(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_EventProcPrefix(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EventProcPrefix(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForceNewPage(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ForceNewPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForceNewPage(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewRowOrCol(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_NewRowOrCol(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NewRowOrCol(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KeepTogether(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_KeepTogether(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KeepTogether(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DisplayWhen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayWhen(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanGrow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CanGrow(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CanShrink(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CanShrink(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RepeatSection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_RepeatSection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RepeatSection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(short* pRet/*[out,retval]*/);
  short           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_SpecialEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SpecialEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnFormat(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnFormat(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnPrint(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnPrint(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnPrint(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnRetreat(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnRetreat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnRetreat(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasContinued(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasContinued(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasContinued(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WillContinue(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_WillContinue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WillContinue(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InSelection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_InSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InSelection(TOLEBOOL pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::ChildrenPtr Controls = {read = get_Controls};
  __property   BSTR            EventProcPrefix = {read = get_EventProcPrefix, write = set_EventProcPrefix};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   unsigned_char   ForceNewPage = {read = get_ForceNewPage, write = set_ForceNewPage};
  __property   unsigned_char   NewRowOrCol = {read = get_NewRowOrCol, write = set_NewRowOrCol};
  __property   TOLEBOOL        KeepTogether = {read = get_KeepTogether, write = set_KeepTogether};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   unsigned_char   DisplayWhen = {read = get_DisplayWhen, write = set_DisplayWhen};
  __property   TOLEBOOL        CanGrow = {read = get_CanGrow, write = set_CanGrow};
  __property   TOLEBOOL        CanShrink = {read = get_CanShrink, write = set_CanShrink};
  __property   TOLEBOOL        RepeatSection = {read = get_RepeatSection, write = set_RepeatSection};
  __property   short           Height = {read = get_Height, write = set_Height};
  __property   long            BackColor = {read = get_BackColor, write = set_BackColor};
  __property   unsigned_char   SpecialEffect = {read = get_SpecialEffect, write = set_SpecialEffect};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            OnFormat = {read = get_OnFormat, write = set_OnFormat};
  __property   BSTR            OnPrint = {read = get_OnPrint, write = set_OnPrint};
  __property   BSTR            OnRetreat = {read = get_OnRetreat, write = set_OnRetreat};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   TOLEBOOL        HasContinued = {read = get_HasContinued, write = set_HasContinued};
  __property   TOLEBOOL        WillContinue = {read = get_WillContinue, write = set_WillContinue};
  __property   TOLEBOOL        InSelection = {read = get_InSelection, write = set_InSelection};
};
typedef _SectionDispT<_Section> _SectionDisp;

typedef TComInterface<_SectionEvents>  TCOM_SectionEvents;

// *********************************************************************//
// SmartIntf: TCOM_GroupLevel
// Interface: _GroupLevel
// *********************************************************************//
template <class T /* _GroupLevel */ >
class TCOM_GroupLevelT : public TComInterface<_GroupLevel>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_GroupLevelT() {}
  TCOM_GroupLevelT(_GroupLevel *intf, bool addRef = false) : TComInterface<_GroupLevel>(intf, addRef) {}
  TCOM_GroupLevelT(const TCOM_GroupLevelT& src) : TComInterface<_GroupLevel>(src) {}
  TCOM_GroupLevelT& operator=(const TCOM_GroupLevelT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT         __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_SortOrder(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SortOrder(void);
  HRESULT         __fastcall set_SortOrder(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_GroupHeader(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_GroupHeader(void);
  HRESULT         __fastcall set_GroupHeader(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_GroupFooter(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_GroupFooter(void);
  HRESULT         __fastcall set_GroupFooter(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_GroupOn(short* pRet/*[out,retval]*/);
  short           __fastcall get_GroupOn(void);
  HRESULT         __fastcall set_GroupOn(short pRet/*[in]*/);
  HRESULT         __fastcall get_GroupInterval(long* pRet/*[out,retval]*/);
  long            __fastcall get_GroupInterval(void);
  HRESULT         __fastcall set_GroupInterval(long pRet/*[in]*/);
  HRESULT         __fastcall get_KeepTogether(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_KeepTogether(void);
  HRESULT         __fastcall set_KeepTogether(unsigned_char pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   TOLEBOOL        SortOrder = {read = get_SortOrder, write = set_SortOrder};
  __property   TOLEBOOL        GroupHeader = {read = get_GroupHeader, write = set_GroupHeader};
  __property   TOLEBOOL        GroupFooter = {read = get_GroupFooter, write = set_GroupFooter};
  __property   short           GroupOn = {read = get_GroupOn, write = set_GroupOn};
  __property   long            GroupInterval = {read = get_GroupInterval, write = set_GroupInterval};
  __property   unsigned_char   KeepTogether = {read = get_KeepTogether, write = set_KeepTogether};
};
typedef TCOM_GroupLevelT<_GroupLevel> TCOM_GroupLevel;

// *********************************************************************//
// DispIntf:  _GroupLevel
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD27-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class _GroupLevelDispT : public TAutoDriver<_GroupLevel>
{
public:
  _GroupLevelDispT(){}

  _GroupLevelDispT(_GroupLevel *pintf)
  {
    TAutoDriver<_GroupLevel>::Bind(pintf, false);
  }

  _GroupLevelDispT(_GroupLevelPtr pintf)
  {
    TAutoDriver<_GroupLevel>::Bind(pintf, true);
  }

  _GroupLevelDispT& operator=(_GroupLevel *pintf)
  {
    TAutoDriver<_GroupLevel>::Bind(pintf, false);
    return *this;
  }

  _GroupLevelDispT& operator=(_GroupLevelPtr pintf)
  {
    TAutoDriver<_GroupLevel>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessGroupLevel));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessGroupLevel);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ControlSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SortOrder(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_SortOrder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SortOrder(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupHeader(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_GroupHeader(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupHeader(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupFooter(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_GroupFooter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupFooter(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupOn(short* pRet/*[out,retval]*/);
  short           __fastcall get_GroupOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupOn(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupInterval(long* pRet/*[out,retval]*/);
  long            __fastcall get_GroupInterval(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GroupInterval(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KeepTogether(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_KeepTogether(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KeepTogether(unsigned_char pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            ControlSource = {read = get_ControlSource, write = set_ControlSource};
  __property   TOLEBOOL        SortOrder = {read = get_SortOrder, write = set_SortOrder};
  __property   TOLEBOOL        GroupHeader = {read = get_GroupHeader, write = set_GroupHeader};
  __property   TOLEBOOL        GroupFooter = {read = get_GroupFooter, write = set_GroupFooter};
  __property   short           GroupOn = {read = get_GroupOn, write = set_GroupOn};
  __property   long            GroupInterval = {read = get_GroupInterval, write = set_GroupInterval};
  __property   unsigned_char   KeepTogether = {read = get_KeepTogether, write = set_KeepTogether};
};
typedef _GroupLevelDispT<_GroupLevel> _GroupLevelDisp;

typedef TComInterface<_GroupLevelEvents>  TCOM_GroupLevelEvents;

typedef TComInterface<_SectionInReportEvents>  TCOM_SectionInReportEvents;

typedef TComInterface<_PageHdrFtrInReportEvents>  TCOM_PageHdrFtrInReportEvents;

typedef TComInterface<Module>  TCOMModule;

// *********************************************************************//
// DispIntf:  Module
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDCFE-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
template<class T>
class ModuleDispT : public TAutoDriver<Module>
{
public:
  ModuleDispT(){}

  ModuleDispT(Module *pintf)
  {
    TAutoDriver<Module>::Bind(pintf, false);
  }

  ModuleDispT(ModulePtr pintf)
  {
    TAutoDriver<Module>::Bind(pintf, true);
  }

  ModuleDispT& operator=(Module *pintf)
  {
    TAutoDriver<Module>::Bind(pintf, false);
    return *this;
  }

  ModuleDispT& operator=(ModulePtr pintf)
  {
    TAutoDriver<Module>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertText(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFromString(BSTR String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFromFile(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Lines(long Line/*[in]*/, long NumLines/*[in]*/, 
                                                  BSTR* String/*[out,retval]*/);
  BSTR            __fastcall get_Lines(long Line/*[in]*/, long NumLines/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CountOfLines(long* CountOfLines/*[out,retval]*/);
  long            __fastcall get_CountOfLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertLines(long Line/*[in]*/, BSTR String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteLines(long StartLine/*[in]*/, long Count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                                          Access_97::ProcKind ProcKind/*[in]*/, 
                                                          long* ProcStartLine/*[out,retval]*/);
  long            __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                               Access_97::ProcKind ProcKind/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                           Access_97::ProcKind ProcKind/*[in]*/, 
                                                           long* ProcCountLines/*[out,retval]*/);
  long            __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                Access_97::ProcKind ProcKind/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                                         Access_97::ProcKind ProcKind/*[in]*/, 
                                                         long* ProcBodyLine/*[out,retval]*/);
  long            __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                              Access_97::ProcKind ProcKind/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcOfLine(long Line/*[in]*/, 
                                                       Access_97::ProcKind* pprockind/*[out]*/, 
                                                       BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_ProcOfLine(long Line/*[in]*/, 
                                            Access_97::ProcKind* pprockind/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CountOfDeclarationLines(long* pDeclCountOfLines/*[out,retval]*/);
  long            __fastcall get_CountOfDeclarationLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateEventProc(BSTR EventName/*[in]*/, 
                                                        BSTR ObjectName/*[in]*/, 
                                                        long* Line/*[out,retval]*/);
  long            __fastcall CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                             long* StartColumn/*[in,out]*/, 
                                             long* EndLine/*[in,out]*/, long* EndColumn/*[in,out]*/
                                             , TOLEBOOL WholeWord/*[in,def,opt]*/, 
                                             TOLEBOOL MatchCase/*[in,def,opt]*/, 
                                             TOLEBOOL PatternSearch/*[in,def,opt]*/, 
                                             TOLEBOOL* pfFound/*[out,retval]*/);
  TOLEBOOL        __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                  long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                                  long* EndColumn/*[in,out]*/, TOLEBOOL WholeWord/*[in,def,opt]*/, 
                                  TOLEBOOL MatchCase/*[in,def,opt]*/, 
                                  TOLEBOOL PatternSearch/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Access_97::AcModuleType* pRet/*[out,retval]*/);
  Access_97::AcModuleType __fastcall get_Type(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            CountOfLines = {read = get_CountOfLines};
  __property   long            CountOfDeclarationLines = {read = get_CountOfDeclarationLines};
  __property   Access_97::AcModuleType Type = {read = get_Type};
};
typedef ModuleDispT<Module> ModuleDisp;

typedef TComInterface<Modules>  TCOMModules;

// *********************************************************************//
// DispIntf:  Modules
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9DD0AF42-6E28-11CF-9008-00AA0042B7CE}
// *********************************************************************//
template<class T>
class ModulesDispT : public TAutoDriver<Modules>
{
public:
  ModulesDispT(){}

  ModulesDispT(Modules *pintf)
  {
    TAutoDriver<Modules>::Bind(pintf, false);
  }

  ModulesDispT(ModulesPtr pintf)
  {
    TAutoDriver<Modules>::Bind(pintf, true);
  }

  ModulesDispT& operator=(Modules *pintf)
  {
    TAutoDriver<Modules>::Bind(pintf, false);
    return *this;
  }

  ModulesDispT& operator=(ModulesPtr pintf)
  {
    TAutoDriver<Modules>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 Access_97::ModulePtr* pRet/*[out,retval]*/);
  Access_97::ModulePtr __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pRet/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef ModulesDispT<Modules> ModulesDisp;

// *********************************************************************//
// SmartIntf: TCOM_Form
// Interface: _Form
// *********************************************************************//
template <class T /* _Form */ >
class TCOM_FormT : public TComInterface<_Form>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_FormT() {}
  TCOM_FormT(_Form *intf, bool addRef = false) : TComInterface<_Form>(intf, addRef) {}
  TCOM_FormT(const TCOM_FormT& src) : TComInterface<_Form>(src) {}
  TCOM_FormT& operator=(const TCOM_FormT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_FormName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FormName(void);
  HRESULT         __fastcall set_FormName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_RecordSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RecordSource(void);
  HRESULT         __fastcall set_RecordSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Filter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Filter(void);
  HRESULT         __fastcall set_Filter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_FilterOn(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FilterOn(void);
  HRESULT         __fastcall set_FilterOn(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OrderBy(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OrderBy(void);
  HRESULT         __fastcall set_OrderBy(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OrderByOn(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_OrderByOn(void);
  HRESULT         __fastcall set_OrderByOn(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AllowFilters(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowFilters(void);
  HRESULT         __fastcall set_AllowFilters(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_DefaultView(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DefaultView(void);
  HRESULT         __fastcall set_DefaultView(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ViewsAllowed(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ViewsAllowed(void);
  HRESULT         __fastcall set_ViewsAllowed(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_AllowEditing(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowEditing(void);
  HRESULT         __fastcall set_AllowEditing(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DefaultEditing(short* pRet/*[out,retval]*/);
  short           __fastcall get_DefaultEditing(void);
  HRESULT         __fastcall set_DefaultEditing(short pRet/*[in]*/);
  HRESULT         __fastcall get_AllowEdits(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowEdits(void);
  HRESULT         __fastcall set_AllowEdits(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AllowDeletions(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowDeletions(void);
  HRESULT         __fastcall set_AllowDeletions(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AllowAdditions(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowAdditions(void);
  HRESULT         __fastcall set_AllowAdditions(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DataEntry(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DataEntry(void);
  HRESULT         __fastcall set_DataEntry(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AllowUpdating(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_AllowUpdating(void);
  HRESULT         __fastcall set_AllowUpdating(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_RecordsetType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_RecordsetType(void);
  HRESULT         __fastcall set_RecordsetType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_RecordLocks(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_RecordLocks(void);
  HRESULT         __fastcall set_RecordLocks(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ScrollBars(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ScrollBars(void);
  HRESULT         __fastcall set_ScrollBars(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_RecordSelectors(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_RecordSelectors(void);
  HRESULT         __fastcall set_RecordSelectors(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_NavigationButtons(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_NavigationButtons(void);
  HRESULT         __fastcall set_NavigationButtons(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DividingLines(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DividingLines(void);
  HRESULT         __fastcall set_DividingLines(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoResize(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoResize(void);
  HRESULT         __fastcall set_AutoResize(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_AutoCenter(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoCenter(void);
  HRESULT         __fastcall set_AutoCenter(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_PopUp(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PopUp(void);
  HRESULT         __fastcall set_PopUp(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Modal(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Modal(void);
  HRESULT         __fastcall set_Modal(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT         __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_ControlBox(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ControlBox(void);
  HRESULT         __fastcall set_ControlBox(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_MinButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MinButton(void);
  HRESULT         __fastcall set_MinButton(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_MaxButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MaxButton(void);
  HRESULT         __fastcall set_MaxButton(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_MinMaxButtons(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_MinMaxButtons(void);
  HRESULT         __fastcall set_MinMaxButtons(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_CloseButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CloseButton(void);
  HRESULT         __fastcall set_CloseButton(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_WhatsThisButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_WhatsThisButton(void);
  HRESULT         __fastcall set_WhatsThisButton(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT         __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT         __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureSizeMode(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureSizeMode(void);
  HRESULT         __fastcall set_PictureSizeMode(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureAlignment(void);
  HRESULT         __fastcall set_PictureAlignment(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PictureTiling(void);
  HRESULT         __fastcall set_PictureTiling(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Cycle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_Cycle(void);
  HRESULT         __fastcall set_Cycle(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_MenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_MenuBar(void);
  HRESULT         __fastcall set_MenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Toolbar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Toolbar(void);
  HRESULT         __fastcall set_Toolbar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenu(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShortcutMenu(void);
  HRESULT         __fastcall set_ShortcutMenu(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_GridX(short* pRet/*[out,retval]*/);
  short           __fastcall get_GridX(void);
  HRESULT         __fastcall set_GridX(short pRet/*[in]*/);
  HRESULT         __fastcall get_GridY(short* pRet/*[out,retval]*/);
  short           __fastcall get_GridY(void);
  HRESULT         __fastcall set_GridY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LayoutForPrint(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LayoutForPrint(void);
  HRESULT         __fastcall set_LayoutForPrint(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FastLaserPrinting(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FastLaserPrinting(void);
  HRESULT         __fastcall set_FastLaserPrinting(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_HelpFile(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_RowHeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_RowHeight(void);
  HRESULT         __fastcall set_RowHeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_DatasheetFontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DatasheetFontName(void);
  HRESULT         __fastcall set_DatasheetFontName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_DatasheetFontHeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_DatasheetFontHeight(void);
  HRESULT         __fastcall set_DatasheetFontHeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_DatasheetFontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_DatasheetFontWeight(void);
  HRESULT         __fastcall set_DatasheetFontWeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_DatasheetFontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DatasheetFontItalic(void);
  HRESULT         __fastcall set_DatasheetFontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DatasheetFontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DatasheetFontUnderline(void);
  HRESULT         __fastcall set_DatasheetFontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_TabularCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TabularCharSet(void);
  HRESULT         __fastcall set_TabularCharSet(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_DatasheetGridlinesBehavior(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DatasheetGridlinesBehavior(void);
  HRESULT         __fastcall set_DatasheetGridlinesBehavior(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_DatasheetGridlinesColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_DatasheetGridlinesColor(void);
  HRESULT         __fastcall set_DatasheetGridlinesColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_DatasheetCellsEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DatasheetCellsEffect(void);
  HRESULT         __fastcall set_DatasheetCellsEffect(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_DatasheetForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_DatasheetForeColor(void);
  HRESULT         __fastcall set_DatasheetForeColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_ShowGrid(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowGrid(void);
  HRESULT         __fastcall set_ShowGrid(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_DatasheetBackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_DatasheetBackColor(void);
  HRESULT         __fastcall set_DatasheetBackColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_Hwnd(long* pRet/*[out,retval]*/);
  long            __fastcall get_Hwnd(void);
  HRESULT         __fastcall set_Hwnd(long pRet/*[in]*/);
  HRESULT         __fastcall get_Count(short* pRet/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(short pRet/*[in]*/);
  HRESULT         __fastcall get_Page(long* pRet/*[out,retval]*/);
  long            __fastcall get_Page(void);
  HRESULT         __fastcall set_Page(long pRet/*[in]*/);
  HRESULT         __fastcall get_Pages(short* pRet/*[out,retval]*/);
  short           __fastcall get_Pages(void);
  HRESULT         __fastcall set_Pages(short pRet/*[in]*/);
  HRESULT         __fastcall get_LogicalPageWidth(long* pRet/*[out,retval]*/);
  long            __fastcall get_LogicalPageWidth(void);
  HRESULT         __fastcall set_LogicalPageWidth(long pRet/*[in]*/);
  HRESULT         __fastcall get_LogicalPageHeight(long* pRet/*[out,retval]*/);
  long            __fastcall get_LogicalPageHeight(void);
  HRESULT         __fastcall set_LogicalPageHeight(long pRet/*[in]*/);
  HRESULT         __fastcall get_ZoomControl(long* pRet/*[out,retval]*/);
  long            __fastcall get_ZoomControl(void);
  HRESULT         __fastcall set_ZoomControl(long pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Painting(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Painting(void);
  HRESULT         __fastcall set_Painting(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_PrtMip(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtMip(void);
  HRESULT         __fastcall set_PrtMip(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_PrtDevMode(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtDevMode(void);
  HRESULT         __fastcall set_PrtDevMode(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_PrtDevNames(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtDevNames(void);
  HRESULT         __fastcall set_PrtDevNames(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_FrozenColumns(short* pRet/*[out,retval]*/);
  short           __fastcall get_FrozenColumns(void);
  HRESULT         __fastcall set_FrozenColumns(short pRet/*[in]*/);
  HRESULT         __fastcall get_Bookmark(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Bookmark(void);
  HRESULT         __fastcall set_Bookmark(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_TabularFamily(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TabularFamily(void);
  HRESULT         __fastcall set_TabularFamily(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PaletteSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_PaletteSource(void);
  HRESULT         __fastcall set_PaletteSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PaintPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PaintPalette(void);
  HRESULT         __fastcall set_PaintPalette(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_OnMenu(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMenu(void);
  HRESULT         __fastcall set_OnMenu(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OpenArgs(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OpenArgs(void);
  HRESULT         __fastcall set_OpenArgs(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_ConnectSynch(short* pRet/*[out,retval]*/);
  short           __fastcall get_ConnectSynch(void);
  HRESULT         __fastcall set_ConnectSynch(short pRet/*[in]*/);
  HRESULT         __fastcall get_OnCurrent(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnCurrent(void);
  HRESULT         __fastcall set_OnCurrent(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnInsert(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnInsert(void);
  HRESULT         __fastcall set_OnInsert(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeInsert(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeInsert(void);
  HRESULT         __fastcall set_BeforeInsert(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterInsert(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterInsert(void);
  HRESULT         __fastcall set_AfterInsert(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT         __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT         __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDelete(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDelete(void);
  HRESULT         __fastcall set_OnDelete(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_BeforeDelConfirm(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeDelConfirm(void);
  HRESULT         __fastcall set_BeforeDelConfirm(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_AfterDelConfirm(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterDelConfirm(void);
  HRESULT         __fastcall set_AfterDelConfirm(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnOpen(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnOpen(void);
  HRESULT         __fastcall set_OnOpen(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLoad(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLoad(void);
  HRESULT         __fastcall set_OnLoad(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnResize(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnResize(void);
  HRESULT         __fastcall set_OnResize(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnUnload(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnUnload(void);
  HRESULT         __fastcall set_OnUnload(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClose(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClose(void);
  HRESULT         __fastcall set_OnClose(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnActivate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnActivate(void);
  HRESULT         __fastcall set_OnActivate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDeactivate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDeactivate(void);
  HRESULT         __fastcall set_OnDeactivate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT         __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT         __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT         __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT         __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT         __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT         __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT         __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT         __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT         __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT         __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_KeyPreview(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_KeyPreview(void);
  HRESULT         __fastcall set_KeyPreview(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OnError(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnError(void);
  HRESULT         __fastcall set_OnError(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnFilter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnFilter(void);
  HRESULT         __fastcall set_OnFilter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnApplyFilter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnApplyFilter(void);
  HRESULT         __fastcall set_OnApplyFilter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnTimer(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnTimer(void);
  HRESULT         __fastcall set_OnTimer(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_TimerInterval(long* pRet/*[out,retval]*/);
  long            __fastcall get_TimerInterval(void);
  HRESULT         __fastcall set_TimerInterval(long pRet/*[in]*/);
  HRESULT         __fastcall get_Dirty(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Dirty(void);
  HRESULT         __fastcall set_Dirty(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_WindowWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_WindowWidth(void);
  HRESULT         __fastcall set_WindowWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_WindowHeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_WindowHeight(void);
  HRESULT         __fastcall set_WindowHeight(short pRet/*[in]*/);
  HRESULT         __fastcall get_CurrentView(short* pRet/*[out,retval]*/);
  short           __fastcall get_CurrentView(void);
  HRESULT         __fastcall set_CurrentView(short pRet/*[in]*/);
  HRESULT         __fastcall get_CurrentSectionTop(short* pRet/*[out,retval]*/);
  short           __fastcall get_CurrentSectionTop(void);
  HRESULT         __fastcall set_CurrentSectionTop(short pRet/*[in]*/);
  HRESULT         __fastcall get_CurrentSectionLeft(short* pRet/*[out,retval]*/);
  short           __fastcall get_CurrentSectionLeft(void);
  HRESULT         __fastcall set_CurrentSectionLeft(short pRet/*[in]*/);
  HRESULT         __fastcall get_SelLeft(long* pRet/*[out,retval]*/);
  long            __fastcall get_SelLeft(void);
  HRESULT         __fastcall set_SelLeft(long pRet/*[in]*/);
  HRESULT         __fastcall get_SelTop(long* pRet/*[out,retval]*/);
  long            __fastcall get_SelTop(void);
  HRESULT         __fastcall set_SelTop(long pRet/*[in]*/);
  HRESULT         __fastcall get_SelWidth(long* pRet/*[out,retval]*/);
  long            __fastcall get_SelWidth(void);
  HRESULT         __fastcall set_SelWidth(long pRet/*[in]*/);
  HRESULT         __fastcall get_SelHeight(long* pRet/*[out,retval]*/);
  long            __fastcall get_SelHeight(void);
  HRESULT         __fastcall set_SelHeight(long pRet/*[in]*/);
  HRESULT         __fastcall get_CurrentRecord(long* pRet/*[out,retval]*/);
  long            __fastcall get_CurrentRecord(void);
  HRESULT         __fastcall set_CurrentRecord(long pRet/*[in]*/);
  HRESULT         __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT         __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_InsideHeight(long* pRet/*[out,retval]*/);
  long            __fastcall get_InsideHeight(void);
  HRESULT         __fastcall set_InsideHeight(long pRet/*[in]*/);
  HRESULT         __fastcall get_InsideWidth(long* pRet/*[out,retval]*/);
  long            __fastcall get_InsideWidth(void);
  HRESULT         __fastcall set_InsideWidth(long pRet/*[in]*/);
  HRESULT         __fastcall get_PicturePalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PicturePalette(void);
  HRESULT         __fastcall set_PicturePalette(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_HasModule(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasModule(void);
  HRESULT         __fastcall set_HasModule(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_acHiddenCurrentPage(long* pRet/*[out,retval]*/);
  long            __fastcall get_acHiddenCurrentPage(void);
  HRESULT         __fastcall set_acHiddenCurrentPage(long pRet/*[in]*/);
  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_NewRecord(short* pRet/*[out,retval]*/);
  short           __fastcall get_NewRecord(void);
  HRESULT         __fastcall Undo(void);
  HRESULT         __fastcall get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_ActiveControl(void);
  HRESULT         __fastcall get_DefaultControl(long ControlType/*[in]*/, 
                                                Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_DefaultControl(long ControlType/*[in]*/);
  HRESULT         __fastcall get_Dynaset(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Dynaset(void);
  HRESULT         __fastcall get_RecordsetClone(Dao_97::RecordsetPtr* pRet/*[out,retval]*/);
  Dao_97::RecordsetPtr __fastcall get_RecordsetClone(void);
  HRESULT         __fastcall get_Section(TVariantInParam var/*[in]*/, 
                                         Access_97::AccessSectionPtr* pRet/*[out,retval]*/);
  Access_97::AccessSectionPtr __fastcall get_Section(TVariantInParam var/*[in]*/);
  HRESULT         __fastcall get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_Form(void);
  HRESULT         __fastcall get_Module(Access_97::ModulePtr* pRet/*[out,retval]*/);
  Access_97::ModulePtr __fastcall get_Module(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall get_ConnectControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_ConnectControl(void);
  HRESULT         __fastcall Recalc(void);
  HRESULT         __fastcall Requery(void);
  HRESULT         __fastcall Refresh(void);
  HRESULT         __fastcall Repaint(void);
  HRESULT         __fastcall GoToPage(long PageNumber/*[in]*/, long Right/*[in,def,opt]*/, 
                                      long Down/*[in,def,opt]*/);
  HRESULT         __fastcall SetFocus(void);
  HRESULT         __fastcall get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/);
  Access_97::Controls_Ptr __fastcall get_Controls(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);

  __property   BSTR            FormName = {read = get_FormName, write = set_FormName};
  __property   BSTR            RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            Filter = {read = get_Filter, write = set_Filter};
  __property   TOLEBOOL        FilterOn = {read = get_FilterOn, write = set_FilterOn};
  __property   BSTR            OrderBy = {read = get_OrderBy, write = set_OrderBy};
  __property   TOLEBOOL        OrderByOn = {read = get_OrderByOn, write = set_OrderByOn};
  __property   TOLEBOOL        AllowFilters = {read = get_AllowFilters, write = set_AllowFilters};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   unsigned_char   DefaultView = {read = get_DefaultView, write = set_DefaultView};
  __property   unsigned_char   ViewsAllowed = {read = get_ViewsAllowed, write = set_ViewsAllowed};
  __property   TOLEBOOL        AllowEditing = {read = get_AllowEditing, write = set_AllowEditing};
  __property   short           DefaultEditing = {read = get_DefaultEditing, write = set_DefaultEditing};
  __property   TOLEBOOL        AllowEdits = {read = get_AllowEdits, write = set_AllowEdits};
  __property   TOLEBOOL        AllowDeletions = {read = get_AllowDeletions, write = set_AllowDeletions};
  __property   TOLEBOOL        AllowAdditions = {read = get_AllowAdditions, write = set_AllowAdditions};
  __property   TOLEBOOL        DataEntry = {read = get_DataEntry, write = set_DataEntry};
  __property   unsigned_char   AllowUpdating = {read = get_AllowUpdating, write = set_AllowUpdating};
  __property   unsigned_char   RecordsetType = {read = get_RecordsetType, write = set_RecordsetType};
  __property   unsigned_char   RecordLocks = {read = get_RecordLocks, write = set_RecordLocks};
  __property   unsigned_char   ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   TOLEBOOL        RecordSelectors = {read = get_RecordSelectors, write = set_RecordSelectors};
  __property   TOLEBOOL        NavigationButtons = {read = get_NavigationButtons, write = set_NavigationButtons};
  __property   TOLEBOOL        DividingLines = {read = get_DividingLines, write = set_DividingLines};
  __property   TOLEBOOL        AutoResize = {read = get_AutoResize, write = set_AutoResize};
  __property   TOLEBOOL        AutoCenter = {read = get_AutoCenter, write = set_AutoCenter};
  __property   TOLEBOOL        PopUp = {read = get_PopUp, write = set_PopUp};
  __property   TOLEBOOL        Modal = {read = get_Modal, write = set_Modal};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        ControlBox = {read = get_ControlBox, write = set_ControlBox};
  __property   TOLEBOOL        MinButton = {read = get_MinButton, write = set_MinButton};
  __property   TOLEBOOL        MaxButton = {read = get_MaxButton, write = set_MaxButton};
  __property   unsigned_char   MinMaxButtons = {read = get_MinMaxButtons, write = set_MinMaxButtons};
  __property   TOLEBOOL        CloseButton = {read = get_CloseButton, write = set_CloseButton};
  __property   TOLEBOOL        WhatsThisButton = {read = get_WhatsThisButton, write = set_WhatsThisButton};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   unsigned_char   PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   unsigned_char   PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   TOLEBOOL        PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   unsigned_char   Cycle = {read = get_Cycle, write = set_Cycle};
  __property   BSTR            MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   BSTR            Toolbar = {read = get_Toolbar, write = set_Toolbar};
  __property   TOLEBOOL        ShortcutMenu = {read = get_ShortcutMenu, write = set_ShortcutMenu};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   short           GridX = {read = get_GridX, write = set_GridX};
  __property   short           GridY = {read = get_GridY, write = set_GridY};
  __property   TOLEBOOL        LayoutForPrint = {read = get_LayoutForPrint, write = set_LayoutForPrint};
  __property   TOLEBOOL        FastLaserPrinting = {read = get_FastLaserPrinting, write = set_FastLaserPrinting};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           RowHeight = {read = get_RowHeight, write = set_RowHeight};
  __property   BSTR            DatasheetFontName = {read = get_DatasheetFontName, write = set_DatasheetFontName};
  __property   short           DatasheetFontHeight = {read = get_DatasheetFontHeight, write = set_DatasheetFontHeight};
  __property   short           DatasheetFontWeight = {read = get_DatasheetFontWeight, write = set_DatasheetFontWeight};
  __property   TOLEBOOL        DatasheetFontItalic = {read = get_DatasheetFontItalic, write = set_DatasheetFontItalic};
  __property   TOLEBOOL        DatasheetFontUnderline = {read = get_DatasheetFontUnderline, write = set_DatasheetFontUnderline};
  __property   unsigned_char   TabularCharSet = {read = get_TabularCharSet, write = set_TabularCharSet};
  __property   unsigned_char   DatasheetGridlinesBehavior = {read = get_DatasheetGridlinesBehavior, write = set_DatasheetGridlinesBehavior};
  __property   long            DatasheetGridlinesColor = {read = get_DatasheetGridlinesColor, write = set_DatasheetGridlinesColor};
  __property   unsigned_char   DatasheetCellsEffect = {read = get_DatasheetCellsEffect, write = set_DatasheetCellsEffect};
  __property   long            DatasheetForeColor = {read = get_DatasheetForeColor, write = set_DatasheetForeColor};
  __property   TOLEBOOL        ShowGrid = {read = get_ShowGrid, write = set_ShowGrid};
  __property   long            DatasheetBackColor = {read = get_DatasheetBackColor, write = set_DatasheetBackColor};
  __property   long            Hwnd = {read = get_Hwnd, write = set_Hwnd};
  __property   short           Count = {read = get_Count, write = set_Count};
  __property   long            Page = {read = get_Page, write = set_Page};
  __property   short           Pages = {read = get_Pages, write = set_Pages};
  __property   long            LogicalPageWidth = {read = get_LogicalPageWidth, write = set_LogicalPageWidth};
  __property   long            LogicalPageHeight = {read = get_LogicalPageHeight, write = set_LogicalPageHeight};
  __property   long            ZoomControl = {read = get_ZoomControl, write = set_ZoomControl};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        Painting = {read = get_Painting, write = set_Painting};
  __property   short           FrozenColumns = {read = get_FrozenColumns, write = set_FrozenColumns};
  __property   unsigned_char   TabularFamily = {read = get_TabularFamily, write = set_TabularFamily};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            PaletteSource = {read = get_PaletteSource, write = set_PaletteSource};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            OnMenu = {read = get_OnMenu, write = set_OnMenu};
  __property   short           ConnectSynch = {read = get_ConnectSynch, write = set_ConnectSynch};
  __property   BSTR            OnCurrent = {read = get_OnCurrent, write = set_OnCurrent};
  __property   BSTR            OnInsert = {read = get_OnInsert, write = set_OnInsert};
  __property   BSTR            BeforeInsert = {read = get_BeforeInsert, write = set_BeforeInsert};
  __property   BSTR            AfterInsert = {read = get_AfterInsert, write = set_AfterInsert};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnDelete = {read = get_OnDelete, write = set_OnDelete};
  __property   BSTR            BeforeDelConfirm = {read = get_BeforeDelConfirm, write = set_BeforeDelConfirm};
  __property   BSTR            AfterDelConfirm = {read = get_AfterDelConfirm, write = set_AfterDelConfirm};
  __property   BSTR            OnOpen = {read = get_OnOpen, write = set_OnOpen};
  __property   BSTR            OnLoad = {read = get_OnLoad, write = set_OnLoad};
  __property   BSTR            OnResize = {read = get_OnResize, write = set_OnResize};
  __property   BSTR            OnUnload = {read = get_OnUnload, write = set_OnUnload};
  __property   BSTR            OnClose = {read = get_OnClose, write = set_OnClose};
  __property   BSTR            OnActivate = {read = get_OnActivate, write = set_OnActivate};
  __property   BSTR            OnDeactivate = {read = get_OnDeactivate, write = set_OnDeactivate};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
  __property   TOLEBOOL        KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   BSTR            OnError = {read = get_OnError, write = set_OnError};
  __property   BSTR            OnFilter = {read = get_OnFilter, write = set_OnFilter};
  __property   BSTR            OnApplyFilter = {read = get_OnApplyFilter, write = set_OnApplyFilter};
  __property   BSTR            OnTimer = {read = get_OnTimer, write = set_OnTimer};
  __property   long            TimerInterval = {read = get_TimerInterval, write = set_TimerInterval};
  __property   TOLEBOOL        Dirty = {read = get_Dirty, write = set_Dirty};
  __property   short           WindowWidth = {read = get_WindowWidth, write = set_WindowWidth};
  __property   short           WindowHeight = {read = get_WindowHeight, write = set_WindowHeight};
  __property   short           CurrentView = {read = get_CurrentView, write = set_CurrentView};
  __property   short           CurrentSectionTop = {read = get_CurrentSectionTop, write = set_CurrentSectionTop};
  __property   short           CurrentSectionLeft = {read = get_CurrentSectionLeft, write = set_CurrentSectionLeft};
  __property   long            SelLeft = {read = get_SelLeft, write = set_SelLeft};
  __property   long            SelTop = {read = get_SelTop, write = set_SelTop};
  __property   long            SelWidth = {read = get_SelWidth, write = set_SelWidth};
  __property   long            SelHeight = {read = get_SelHeight, write = set_SelHeight};
  __property   long            CurrentRecord = {read = get_CurrentRecord, write = set_CurrentRecord};
  __property   long            InsideHeight = {read = get_InsideHeight, write = set_InsideHeight};
  __property   long            InsideWidth = {read = get_InsideWidth, write = set_InsideWidth};
  __property   TOLEBOOL        HasModule = {read = get_HasModule, write = set_HasModule};
  __property   long            acHiddenCurrentPage = {read = get_acHiddenCurrentPage, write = set_acHiddenCurrentPage};
  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   short           NewRecord = {read = get_NewRecord};
  __property   Access_97::AccessControlPtr ActiveControl = {read = get_ActiveControl};
  __property   LPDISPATCH      Dynaset = {read = get_Dynaset};
  __property   Dao_97::RecordsetPtr RecordsetClone = {read = get_RecordsetClone};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::ModulePtr Module = {read = get_Module};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::AccessControlPtr ConnectControl = {read = get_ConnectControl};
  __property   Access_97::Controls_Ptr Controls = {read = get_Controls};
};
typedef TCOM_FormT<_Form> TCOM_Form;

// *********************************************************************//
// DispIntf:  _Form
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E5135D80-8F8D-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template<class T>
class _FormDispT : public TAutoDriver<_Form>
{
public:
  _FormDispT(){}

  _FormDispT(_Form *pintf)
  {
    TAutoDriver<_Form>::Bind(pintf, false);
  }

  _FormDispT(_FormPtr pintf)
  {
    TAutoDriver<_Form>::Bind(pintf, true);
  }

  _FormDispT& operator=(_Form *pintf)
  {
    TAutoDriver<_Form>::Bind(pintf, false);
    return *this;
  }

  _FormDispT& operator=(_FormPtr pintf)
  {
    TAutoDriver<_Form>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessForm));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessForm);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FormName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FormName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FormName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RecordSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Filter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Filter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Filter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterOn(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FilterOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FilterOn(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OrderBy(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OrderBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OrderBy(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OrderByOn(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_OrderByOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OrderByOn(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowFilters(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowFilters(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowFilters(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultView(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DefaultView(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultView(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewsAllowed(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ViewsAllowed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ViewsAllowed(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowEditing(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowEditing(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowEditing(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultEditing(short* pRet/*[out,retval]*/);
  short           __fastcall get_DefaultEditing(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultEditing(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowEdits(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowEdits(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowEdits(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowDeletions(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowDeletions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowDeletions(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowAdditions(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowAdditions(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowAdditions(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DataEntry(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DataEntry(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DataEntry(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowUpdating(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_AllowUpdating(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowUpdating(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordsetType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_RecordsetType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordsetType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordLocks(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_RecordLocks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordLocks(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScrollBars(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_ScrollBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScrollBars(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordSelectors(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_RecordSelectors(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordSelectors(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NavigationButtons(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_NavigationButtons(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NavigationButtons(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DividingLines(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DividingLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DividingLines(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoResize(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoResize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoResize(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoCenter(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AutoCenter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoCenter(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PopUp(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PopUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PopUp(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Modal(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Modal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Modal(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BorderStyle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_BorderStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BorderStyle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ControlBox(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ControlBox(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ControlBox(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MinButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinButton(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MaxButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxButton(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinMaxButtons(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_MinMaxButtons(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinMaxButtons(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CloseButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CloseButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CloseButton(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WhatsThisButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_WhatsThisButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WhatsThisButton(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureSizeMode(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureSizeMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureSizeMode(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureAlignment(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PictureTiling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureTiling(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Cycle(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_Cycle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Cycle(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_MenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Toolbar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Toolbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Toolbar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenu(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShortcutMenu(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenu(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridX(short* pRet/*[out,retval]*/);
  short           __fastcall get_GridX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridY(short* pRet/*[out,retval]*/);
  short           __fastcall get_GridY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LayoutForPrint(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LayoutForPrint(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LayoutForPrint(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FastLaserPrinting(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FastLaserPrinting(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FastLaserPrinting(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowHeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_RowHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowHeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DatasheetFontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_DatasheetFontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DatasheetFontName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DatasheetFontHeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_DatasheetFontHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DatasheetFontHeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DatasheetFontWeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_DatasheetFontWeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DatasheetFontWeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DatasheetFontItalic(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DatasheetFontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DatasheetFontItalic(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DatasheetFontUnderline(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DatasheetFontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DatasheetFontUnderline(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabularCharSet(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TabularCharSet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabularCharSet(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DatasheetGridlinesBehavior(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DatasheetGridlinesBehavior(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DatasheetGridlinesBehavior(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DatasheetGridlinesColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_DatasheetGridlinesColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DatasheetGridlinesColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DatasheetCellsEffect(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DatasheetCellsEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DatasheetCellsEffect(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DatasheetForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_DatasheetForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DatasheetForeColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowGrid(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowGrid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowGrid(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DatasheetBackColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_DatasheetBackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DatasheetBackColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hwnd(long* pRet/*[out,retval]*/);
  long            __fastcall get_Hwnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Hwnd(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(short* pRet/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Page(long* pRet/*[out,retval]*/);
  long            __fastcall get_Page(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Page(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pages(short* pRet/*[out,retval]*/);
  short           __fastcall get_Pages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Pages(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LogicalPageWidth(long* pRet/*[out,retval]*/);
  long            __fastcall get_LogicalPageWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LogicalPageWidth(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LogicalPageHeight(long* pRet/*[out,retval]*/);
  long            __fastcall get_LogicalPageHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LogicalPageHeight(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZoomControl(long* pRet/*[out,retval]*/);
  long            __fastcall get_ZoomControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ZoomControl(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Painting(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Painting(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Painting(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrtMip(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtMip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrtMip(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrtDevMode(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtDevMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrtDevMode(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrtDevNames(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtDevNames(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrtDevNames(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FrozenColumns(short* pRet/*[out,retval]*/);
  short           __fastcall get_FrozenColumns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FrozenColumns(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Bookmark(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_Bookmark(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Bookmark(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TabularFamily(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_TabularFamily(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TabularFamily(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PaletteSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_PaletteSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PaletteSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PaintPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PaintPalette(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PaintPalette(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMenu(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMenu(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMenu(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OpenArgs(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_OpenArgs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OpenArgs(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectSynch(short* pRet/*[out,retval]*/);
  short           __fastcall get_ConnectSynch(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ConnectSynch(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnCurrent(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnCurrent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnCurrent(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnInsert(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnInsert(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnInsert(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeInsert(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeInsert(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeInsert(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterInsert(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterInsert(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterInsert(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterUpdate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterUpdate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterUpdate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDelete(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDelete(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDelete(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeforeDelConfirm(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_BeforeDelConfirm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeforeDelConfirm(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AfterDelConfirm(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_AfterDelConfirm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AfterDelConfirm(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnOpen(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnOpen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnOpen(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLoad(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLoad(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLoad(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnResize(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnResize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnResize(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnUnload(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnUnload(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnUnload(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClose(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClose(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClose(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnActivate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnActivate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnActivate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDeactivate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDeactivate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDeactivate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnGotFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnGotFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnGotFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnLostFocus(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnLostFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnLostFocus(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDblClick(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDblClick(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDblClick(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseMove(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseMove(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseMove(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMouseUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMouseUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMouseUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyDown(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyDown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyDown(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyUp(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyUp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyUp(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnKeyPress(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnKeyPress(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnKeyPress(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KeyPreview(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_KeyPreview(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KeyPreview(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnError(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnError(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnError(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnFilter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnFilter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnFilter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnApplyFilter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnApplyFilter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnApplyFilter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnTimer(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnTimer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnTimer(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TimerInterval(long* pRet/*[out,retval]*/);
  long            __fastcall get_TimerInterval(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TimerInterval(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Dirty(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Dirty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Dirty(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WindowWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_WindowWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WindowWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WindowHeight(short* pRet/*[out,retval]*/);
  short           __fastcall get_WindowHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_WindowHeight(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentView(short* pRet/*[out,retval]*/);
  short           __fastcall get_CurrentView(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurrentView(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentSectionTop(short* pRet/*[out,retval]*/);
  short           __fastcall get_CurrentSectionTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurrentSectionTop(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentSectionLeft(short* pRet/*[out,retval]*/);
  short           __fastcall get_CurrentSectionLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurrentSectionLeft(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelLeft(long* pRet/*[out,retval]*/);
  long            __fastcall get_SelLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelLeft(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelTop(long* pRet/*[out,retval]*/);
  long            __fastcall get_SelTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelTop(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelWidth(long* pRet/*[out,retval]*/);
  long            __fastcall get_SelWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelWidth(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelHeight(long* pRet/*[out,retval]*/);
  long            __fastcall get_SelHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelHeight(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentRecord(long* pRet/*[out,retval]*/);
  long            __fastcall get_CurrentRecord(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurrentRecord(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideHeight(long* pRet/*[out,retval]*/);
  long            __fastcall get_InsideHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InsideHeight(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InsideWidth(long* pRet/*[out,retval]*/);
  long            __fastcall get_InsideWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InsideWidth(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PicturePalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PicturePalette(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PicturePalette(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasModule(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasModule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasModule(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_acHiddenCurrentPage(long* pRet/*[out,retval]*/);
  long            __fastcall get_acHiddenCurrentPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_acHiddenCurrentPage(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewRecord(short* pRet/*[out,retval]*/);
  short           __fastcall get_NewRecord(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Undo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_ActiveControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultControl(long ControlType/*[in]*/, 
                                                           Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_DefaultControl(long ControlType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Dynaset(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Dynaset(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordsetClone(Dao_97::RecordsetPtr* pRet/*[out,retval]*/);
  Dao_97::RecordsetPtr __fastcall get_RecordsetClone(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(TVariantInParam var/*[in]*/, 
                                                    Access_97::AccessSectionPtr* pRet/*[out,retval]*/);
  Access_97::AccessSectionPtr __fastcall get_Section(TVariantInParam var/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_Form(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Module(Access_97::ModulePtr* pRet/*[out,retval]*/);
  Access_97::ModulePtr __fastcall get_Module(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_ConnectControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Recalc();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Requery();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Repaint();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GoToPage(long PageNumber/*[in]*/, long Right/*[in,def,opt]*/
                                                 , long Down/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/);
  Access_97::Controls_Ptr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);

  __property   BSTR            FormName = {read = get_FormName, write = set_FormName};
  __property   BSTR            RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            Filter = {read = get_Filter, write = set_Filter};
  __property   TOLEBOOL        FilterOn = {read = get_FilterOn, write = set_FilterOn};
  __property   BSTR            OrderBy = {read = get_OrderBy, write = set_OrderBy};
  __property   TOLEBOOL        OrderByOn = {read = get_OrderByOn, write = set_OrderByOn};
  __property   TOLEBOOL        AllowFilters = {read = get_AllowFilters, write = set_AllowFilters};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   unsigned_char   DefaultView = {read = get_DefaultView, write = set_DefaultView};
  __property   unsigned_char   ViewsAllowed = {read = get_ViewsAllowed, write = set_ViewsAllowed};
  __property   TOLEBOOL        AllowEditing = {read = get_AllowEditing, write = set_AllowEditing};
  __property   short           DefaultEditing = {read = get_DefaultEditing, write = set_DefaultEditing};
  __property   TOLEBOOL        AllowEdits = {read = get_AllowEdits, write = set_AllowEdits};
  __property   TOLEBOOL        AllowDeletions = {read = get_AllowDeletions, write = set_AllowDeletions};
  __property   TOLEBOOL        AllowAdditions = {read = get_AllowAdditions, write = set_AllowAdditions};
  __property   TOLEBOOL        DataEntry = {read = get_DataEntry, write = set_DataEntry};
  __property   unsigned_char   AllowUpdating = {read = get_AllowUpdating, write = set_AllowUpdating};
  __property   unsigned_char   RecordsetType = {read = get_RecordsetType, write = set_RecordsetType};
  __property   unsigned_char   RecordLocks = {read = get_RecordLocks, write = set_RecordLocks};
  __property   unsigned_char   ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   TOLEBOOL        RecordSelectors = {read = get_RecordSelectors, write = set_RecordSelectors};
  __property   TOLEBOOL        NavigationButtons = {read = get_NavigationButtons, write = set_NavigationButtons};
  __property   TOLEBOOL        DividingLines = {read = get_DividingLines, write = set_DividingLines};
  __property   TOLEBOOL        AutoResize = {read = get_AutoResize, write = set_AutoResize};
  __property   TOLEBOOL        AutoCenter = {read = get_AutoCenter, write = set_AutoCenter};
  __property   TOLEBOOL        PopUp = {read = get_PopUp, write = set_PopUp};
  __property   TOLEBOOL        Modal = {read = get_Modal, write = set_Modal};
  __property   unsigned_char   BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   TOLEBOOL        ControlBox = {read = get_ControlBox, write = set_ControlBox};
  __property   TOLEBOOL        MinButton = {read = get_MinButton, write = set_MinButton};
  __property   TOLEBOOL        MaxButton = {read = get_MaxButton, write = set_MaxButton};
  __property   unsigned_char   MinMaxButtons = {read = get_MinMaxButtons, write = set_MinMaxButtons};
  __property   TOLEBOOL        CloseButton = {read = get_CloseButton, write = set_CloseButton};
  __property   TOLEBOOL        WhatsThisButton = {read = get_WhatsThisButton, write = set_WhatsThisButton};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   unsigned_char   PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   unsigned_char   PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   TOLEBOOL        PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   unsigned_char   Cycle = {read = get_Cycle, write = set_Cycle};
  __property   BSTR            MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   BSTR            Toolbar = {read = get_Toolbar, write = set_Toolbar};
  __property   TOLEBOOL        ShortcutMenu = {read = get_ShortcutMenu, write = set_ShortcutMenu};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   short           GridX = {read = get_GridX, write = set_GridX};
  __property   short           GridY = {read = get_GridY, write = set_GridY};
  __property   TOLEBOOL        LayoutForPrint = {read = get_LayoutForPrint, write = set_LayoutForPrint};
  __property   TOLEBOOL        FastLaserPrinting = {read = get_FastLaserPrinting, write = set_FastLaserPrinting};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   short           RowHeight = {read = get_RowHeight, write = set_RowHeight};
  __property   BSTR            DatasheetFontName = {read = get_DatasheetFontName, write = set_DatasheetFontName};
  __property   short           DatasheetFontHeight = {read = get_DatasheetFontHeight, write = set_DatasheetFontHeight};
  __property   short           DatasheetFontWeight = {read = get_DatasheetFontWeight, write = set_DatasheetFontWeight};
  __property   TOLEBOOL        DatasheetFontItalic = {read = get_DatasheetFontItalic, write = set_DatasheetFontItalic};
  __property   TOLEBOOL        DatasheetFontUnderline = {read = get_DatasheetFontUnderline, write = set_DatasheetFontUnderline};
  __property   unsigned_char   TabularCharSet = {read = get_TabularCharSet, write = set_TabularCharSet};
  __property   unsigned_char   DatasheetGridlinesBehavior = {read = get_DatasheetGridlinesBehavior, write = set_DatasheetGridlinesBehavior};
  __property   long            DatasheetGridlinesColor = {read = get_DatasheetGridlinesColor, write = set_DatasheetGridlinesColor};
  __property   unsigned_char   DatasheetCellsEffect = {read = get_DatasheetCellsEffect, write = set_DatasheetCellsEffect};
  __property   long            DatasheetForeColor = {read = get_DatasheetForeColor, write = set_DatasheetForeColor};
  __property   TOLEBOOL        ShowGrid = {read = get_ShowGrid, write = set_ShowGrid};
  __property   long            DatasheetBackColor = {read = get_DatasheetBackColor, write = set_DatasheetBackColor};
  __property   long            Hwnd = {read = get_Hwnd, write = set_Hwnd};
  __property   short           Count = {read = get_Count, write = set_Count};
  __property   long            Page = {read = get_Page, write = set_Page};
  __property   short           Pages = {read = get_Pages, write = set_Pages};
  __property   long            LogicalPageWidth = {read = get_LogicalPageWidth, write = set_LogicalPageWidth};
  __property   long            LogicalPageHeight = {read = get_LogicalPageHeight, write = set_LogicalPageHeight};
  __property   long            ZoomControl = {read = get_ZoomControl, write = set_ZoomControl};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        Painting = {read = get_Painting, write = set_Painting};
  __property   short           FrozenColumns = {read = get_FrozenColumns, write = set_FrozenColumns};
  __property   unsigned_char   TabularFamily = {read = get_TabularFamily, write = set_TabularFamily};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            PaletteSource = {read = get_PaletteSource, write = set_PaletteSource};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            OnMenu = {read = get_OnMenu, write = set_OnMenu};
  __property   short           ConnectSynch = {read = get_ConnectSynch, write = set_ConnectSynch};
  __property   BSTR            OnCurrent = {read = get_OnCurrent, write = set_OnCurrent};
  __property   BSTR            OnInsert = {read = get_OnInsert, write = set_OnInsert};
  __property   BSTR            BeforeInsert = {read = get_BeforeInsert, write = set_BeforeInsert};
  __property   BSTR            AfterInsert = {read = get_AfterInsert, write = set_AfterInsert};
  __property   BSTR            BeforeUpdate = {read = get_BeforeUpdate, write = set_BeforeUpdate};
  __property   BSTR            AfterUpdate = {read = get_AfterUpdate, write = set_AfterUpdate};
  __property   BSTR            OnDelete = {read = get_OnDelete, write = set_OnDelete};
  __property   BSTR            BeforeDelConfirm = {read = get_BeforeDelConfirm, write = set_BeforeDelConfirm};
  __property   BSTR            AfterDelConfirm = {read = get_AfterDelConfirm, write = set_AfterDelConfirm};
  __property   BSTR            OnOpen = {read = get_OnOpen, write = set_OnOpen};
  __property   BSTR            OnLoad = {read = get_OnLoad, write = set_OnLoad};
  __property   BSTR            OnResize = {read = get_OnResize, write = set_OnResize};
  __property   BSTR            OnUnload = {read = get_OnUnload, write = set_OnUnload};
  __property   BSTR            OnClose = {read = get_OnClose, write = set_OnClose};
  __property   BSTR            OnActivate = {read = get_OnActivate, write = set_OnActivate};
  __property   BSTR            OnDeactivate = {read = get_OnDeactivate, write = set_OnDeactivate};
  __property   BSTR            OnGotFocus = {read = get_OnGotFocus, write = set_OnGotFocus};
  __property   BSTR            OnLostFocus = {read = get_OnLostFocus, write = set_OnLostFocus};
  __property   BSTR            OnClick = {read = get_OnClick, write = set_OnClick};
  __property   BSTR            OnDblClick = {read = get_OnDblClick, write = set_OnDblClick};
  __property   BSTR            OnMouseDown = {read = get_OnMouseDown, write = set_OnMouseDown};
  __property   BSTR            OnMouseMove = {read = get_OnMouseMove, write = set_OnMouseMove};
  __property   BSTR            OnMouseUp = {read = get_OnMouseUp, write = set_OnMouseUp};
  __property   BSTR            OnKeyDown = {read = get_OnKeyDown, write = set_OnKeyDown};
  __property   BSTR            OnKeyUp = {read = get_OnKeyUp, write = set_OnKeyUp};
  __property   BSTR            OnKeyPress = {read = get_OnKeyPress, write = set_OnKeyPress};
  __property   TOLEBOOL        KeyPreview = {read = get_KeyPreview, write = set_KeyPreview};
  __property   BSTR            OnError = {read = get_OnError, write = set_OnError};
  __property   BSTR            OnFilter = {read = get_OnFilter, write = set_OnFilter};
  __property   BSTR            OnApplyFilter = {read = get_OnApplyFilter, write = set_OnApplyFilter};
  __property   BSTR            OnTimer = {read = get_OnTimer, write = set_OnTimer};
  __property   long            TimerInterval = {read = get_TimerInterval, write = set_TimerInterval};
  __property   TOLEBOOL        Dirty = {read = get_Dirty, write = set_Dirty};
  __property   short           WindowWidth = {read = get_WindowWidth, write = set_WindowWidth};
  __property   short           WindowHeight = {read = get_WindowHeight, write = set_WindowHeight};
  __property   short           CurrentView = {read = get_CurrentView, write = set_CurrentView};
  __property   short           CurrentSectionTop = {read = get_CurrentSectionTop, write = set_CurrentSectionTop};
  __property   short           CurrentSectionLeft = {read = get_CurrentSectionLeft, write = set_CurrentSectionLeft};
  __property   long            SelLeft = {read = get_SelLeft, write = set_SelLeft};
  __property   long            SelTop = {read = get_SelTop, write = set_SelTop};
  __property   long            SelWidth = {read = get_SelWidth, write = set_SelWidth};
  __property   long            SelHeight = {read = get_SelHeight, write = set_SelHeight};
  __property   long            CurrentRecord = {read = get_CurrentRecord, write = set_CurrentRecord};
  __property   long            InsideHeight = {read = get_InsideHeight, write = set_InsideHeight};
  __property   long            InsideWidth = {read = get_InsideWidth, write = set_InsideWidth};
  __property   TOLEBOOL        HasModule = {read = get_HasModule, write = set_HasModule};
  __property   long            acHiddenCurrentPage = {read = get_acHiddenCurrentPage, write = set_acHiddenCurrentPage};
  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   short           NewRecord = {read = get_NewRecord};
  __property   Access_97::AccessControlPtr ActiveControl = {read = get_ActiveControl};
  __property   LPDISPATCH      Dynaset = {read = get_Dynaset};
  __property   Dao_97::RecordsetPtr RecordsetClone = {read = get_RecordsetClone};
  __property   Access_97::AccessFormPtr Form = {read = get_Form};
  __property   Access_97::ModulePtr Module = {read = get_Module};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::AccessControlPtr ConnectControl = {read = get_ConnectControl};
  __property   Access_97::Controls_Ptr Controls = {read = get_Controls};
};
typedef _FormDispT<_Form> _FormDisp;

typedef TComInterface<_FormEvents>  TCOM_FormEvents;

typedef TComInterface<Forms_>  TCOMForms_;

// *********************************************************************//
// DispIntf:  Forms
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1BB0E80-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template<class T>
class Forms_DispT : public TAutoDriver<Forms_>
{
public:
  Forms_DispT(){}

  Forms_DispT(Forms_ *pintf)
  {
    TAutoDriver<Forms_>::Bind(pintf, false);
  }

  Forms_DispT(Forms_Ptr pintf)
  {
    TAutoDriver<Forms_>::Bind(pintf, true);
  }

  Forms_DispT& operator=(Forms_ *pintf)
  {
    TAutoDriver<Forms_>::Bind(pintf, false);
    return *this;
  }

  Forms_DispT& operator=(Forms_Ptr pintf)
  {
    TAutoDriver<Forms_>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pRet/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef Forms_DispT<Forms_> Forms_Disp;

// *********************************************************************//
// SmartIntf: TCOM_Report
// Interface: _Report
// *********************************************************************//
template <class T /* _Report */ >
class TCOM_ReportT : public TComInterface<_Report>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ReportT() {}
  TCOM_ReportT(_Report *intf, bool addRef = false) : TComInterface<_Report>(intf, addRef) {}
  TCOM_ReportT(const TCOM_ReportT& src) : TComInterface<_Report>(src) {}
  TCOM_ReportT& operator=(const TCOM_ReportT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_FormName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FormName(void);
  HRESULT         __fastcall set_FormName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_RecordSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RecordSource(void);
  HRESULT         __fastcall set_RecordSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Filter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Filter(void);
  HRESULT         __fastcall set_Filter(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_FilterOn(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FilterOn(void);
  HRESULT         __fastcall set_FilterOn(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_OrderBy(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OrderBy(void);
  HRESULT         __fastcall set_OrderBy(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OrderByOn(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_OrderByOn(void);
  HRESULT         __fastcall set_OrderByOn(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_RecordLocks(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_RecordLocks(void);
  HRESULT         __fastcall set_RecordLocks(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PageHeader(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PageHeader(void);
  HRESULT         __fastcall set_PageHeader(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PageFooter(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PageFooter(void);
  HRESULT         __fastcall set_PageFooter(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_DateGrouping(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DateGrouping(void);
  HRESULT         __fastcall set_DateGrouping(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_GrpKeepTogether(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_GrpKeepTogether(void);
  HRESULT         __fastcall set_GrpKeepTogether(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_MinButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MinButton(void);
  HRESULT         __fastcall set_MinButton(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_MaxButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MaxButton(void);
  HRESULT         __fastcall set_MaxButton(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT         __fastcall set_Width(short pRet/*[in]*/);
  HRESULT         __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT         __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT         __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureSizeMode(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureSizeMode(void);
  HRESULT         __fastcall set_PictureSizeMode(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureAlignment(void);
  HRESULT         __fastcall set_PictureAlignment(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PictureTiling(void);
  HRESULT         __fastcall set_PictureTiling(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_PicturePages(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PicturePages(void);
  HRESULT         __fastcall set_PicturePages(unsigned_char pRet/*[in]*/);
  HRESULT         __fastcall get_MenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_MenuBar(void);
  HRESULT         __fastcall set_MenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Toolbar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Toolbar(void);
  HRESULT         __fastcall set_Toolbar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_GridX(short* pRet/*[out,retval]*/);
  short           __fastcall get_GridX(void);
  HRESULT         __fastcall set_GridX(short pRet/*[in]*/);
  HRESULT         __fastcall get_GridY(short* pRet/*[out,retval]*/);
  short           __fastcall get_GridY(void);
  HRESULT         __fastcall set_GridY(short pRet/*[in]*/);
  HRESULT         __fastcall get_LayoutForPrint(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LayoutForPrint(void);
  HRESULT         __fastcall set_LayoutForPrint(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FastLaserPrinting(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FastLaserPrinting(void);
  HRESULT         __fastcall set_FastLaserPrinting(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_HelpFile(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT         __fastcall set_HelpFile(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT         __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT         __fastcall get_Hwnd(long* pRet/*[out,retval]*/);
  long            __fastcall get_Hwnd(void);
  HRESULT         __fastcall set_Hwnd(long pRet/*[in]*/);
  HRESULT         __fastcall get_Count(short* pRet/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT         __fastcall set_Count(short pRet/*[in]*/);
  HRESULT         __fastcall get_Page(long* pRet/*[out,retval]*/);
  long            __fastcall get_Page(void);
  HRESULT         __fastcall set_Page(long pRet/*[in]*/);
  HRESULT         __fastcall get_Pages(short* pRet/*[out,retval]*/);
  short           __fastcall get_Pages(void);
  HRESULT         __fastcall set_Pages(short pRet/*[in]*/);
  HRESULT         __fastcall get_LogicalPageWidth(long* pRet/*[out,retval]*/);
  long            __fastcall get_LogicalPageWidth(void);
  HRESULT         __fastcall set_LogicalPageWidth(long pRet/*[in]*/);
  HRESULT         __fastcall get_LogicalPageHeight(long* pRet/*[out,retval]*/);
  long            __fastcall get_LogicalPageHeight(void);
  HRESULT         __fastcall set_LogicalPageHeight(long pRet/*[in]*/);
  HRESULT         __fastcall get_ZoomControl(long* pRet/*[out,retval]*/);
  long            __fastcall get_ZoomControl(void);
  HRESULT         __fastcall set_ZoomControl(long pRet/*[in]*/);
  HRESULT         __fastcall get_HasData(long* pRet/*[out,retval]*/);
  long            __fastcall get_HasData(void);
  HRESULT         __fastcall set_HasData(long pRet/*[in]*/);
  HRESULT         __fastcall get_Left(long* pRet/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long pRet/*[in]*/);
  HRESULT         __fastcall get_Top(long* pRet/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long pRet/*[in]*/);
  HRESULT         __fastcall get_Height(long* pRet/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT         __fastcall set_Height(long pRet/*[in]*/);
  HRESULT         __fastcall get_PrintSection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PrintSection(void);
  HRESULT         __fastcall set_PrintSection(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_NextRecord(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_NextRecord(void);
  HRESULT         __fastcall set_NextRecord(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_MoveLayout(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MoveLayout(void);
  HRESULT         __fastcall set_MoveLayout(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_FormatCount(short* pRet/*[out,retval]*/);
  short           __fastcall get_FormatCount(void);
  HRESULT         __fastcall set_FormatCount(short pRet/*[in]*/);
  HRESULT         __fastcall get_PrintCount(short* pRet/*[out,retval]*/);
  short           __fastcall get_PrintCount(void);
  HRESULT         __fastcall set_PrintCount(short pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_Painting(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Painting(void);
  HRESULT         __fastcall set_Painting(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_PrtMip(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtMip(void);
  HRESULT         __fastcall set_PrtMip(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_PrtDevMode(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtDevMode(void);
  HRESULT         __fastcall set_PrtDevMode(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_PrtDevNames(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtDevNames(void);
  HRESULT         __fastcall set_PrtDevNames(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT         __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_CurrentX(float* pRet/*[out,retval]*/);
  float           __fastcall get_CurrentX(void);
  HRESULT         __fastcall set_CurrentX(float pRet/*[in]*/);
  HRESULT         __fastcall get_CurrentY(float* pRet/*[out,retval]*/);
  float           __fastcall get_CurrentY(void);
  HRESULT         __fastcall set_CurrentY(float pRet/*[in]*/);
  HRESULT         __fastcall get_ScaleHeight(float* pRet/*[out,retval]*/);
  float           __fastcall get_ScaleHeight(void);
  HRESULT         __fastcall set_ScaleHeight(float pRet/*[in]*/);
  HRESULT         __fastcall get_ScaleLeft(float* pRet/*[out,retval]*/);
  float           __fastcall get_ScaleLeft(void);
  HRESULT         __fastcall set_ScaleLeft(float pRet/*[in]*/);
  HRESULT         __fastcall get_ScaleMode(short* pRet/*[out,retval]*/);
  short           __fastcall get_ScaleMode(void);
  HRESULT         __fastcall set_ScaleMode(short pRet/*[in]*/);
  HRESULT         __fastcall get_ScaleTop(float* pRet/*[out,retval]*/);
  float           __fastcall get_ScaleTop(void);
  HRESULT         __fastcall set_ScaleTop(float pRet/*[in]*/);
  HRESULT         __fastcall get_ScaleWidth(float* pRet/*[out,retval]*/);
  float           __fastcall get_ScaleWidth(void);
  HRESULT         __fastcall set_ScaleWidth(float pRet/*[in]*/);
  HRESULT         __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT         __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontItalic(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontItalic(void);
  HRESULT         __fastcall set_FontItalic(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT         __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT         __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT         __fastcall get_FontUnderline(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontUnderline(void);
  HRESULT         __fastcall set_FontUnderline(short pRet/*[in]*/);
  HRESULT         __fastcall get_DrawMode(short* pRet/*[out,retval]*/);
  short           __fastcall get_DrawMode(void);
  HRESULT         __fastcall set_DrawMode(short pRet/*[in]*/);
  HRESULT         __fastcall get_DrawStyle(short* pRet/*[out,retval]*/);
  short           __fastcall get_DrawStyle(void);
  HRESULT         __fastcall set_DrawStyle(short pRet/*[in]*/);
  HRESULT         __fastcall get_DrawWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_DrawWidth(void);
  HRESULT         __fastcall set_DrawWidth(short pRet/*[in]*/);
  HRESULT         __fastcall get_FillColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_FillColor(void);
  HRESULT         __fastcall set_FillColor(long pRet/*[in]*/);
  HRESULT         __fastcall get_FillStyle(short* pRet/*[out,retval]*/);
  short           __fastcall get_FillStyle(void);
  HRESULT         __fastcall set_FillStyle(short pRet/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PaletteSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_PaletteSource(void);
  HRESULT         __fastcall set_PaletteSource(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT         __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_PaintPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PaintPalette(void);
  HRESULT         __fastcall set_PaintPalette(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_OnMenu(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMenu(void);
  HRESULT         __fastcall set_OnMenu(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnOpen(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnOpen(void);
  HRESULT         __fastcall set_OnOpen(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnClose(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClose(void);
  HRESULT         __fastcall set_OnClose(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnActivate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnActivate(void);
  HRESULT         __fastcall set_OnActivate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnDeactivate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDeactivate(void);
  HRESULT         __fastcall set_OnDeactivate(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnNoData(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnNoData(void);
  HRESULT         __fastcall set_OnNoData(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnPage(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnPage(void);
  HRESULT         __fastcall set_OnPage(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_OnError(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnError(void);
  HRESULT         __fastcall set_OnError(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Dirty(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Dirty(void);
  HRESULT         __fastcall set_Dirty(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_CurrentRecord(long* pRet/*[out,retval]*/);
  long            __fastcall get_CurrentRecord(void);
  HRESULT         __fastcall set_CurrentRecord(long pRet/*[in]*/);
  HRESULT         __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT         __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_PicturePalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PicturePalette(void);
  HRESULT         __fastcall set_PicturePalette(TVariantInParam pRet/*[in]*/);
  HRESULT         __fastcall get_HasModule(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasModule(void);
  HRESULT         __fastcall set_HasModule(TOLEBOOL pRet/*[in]*/);
  HRESULT         __fastcall get_acHiddenCurrentPage(long* pRet/*[out,retval]*/);
  long            __fastcall get_acHiddenCurrentPage(void);
  HRESULT         __fastcall set_acHiddenCurrentPage(long pRet/*[in]*/);
  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_ActiveControl(void);
  HRESULT         __fastcall get_DefaultControl(long ControlType/*[in]*/, 
                                                Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_DefaultControl(long ControlType/*[in]*/);
  HRESULT         __fastcall Circle(short flags/*[in]*/, float X/*[in]*/, float Y/*[in]*/, 
                                    float radius/*[in]*/, long color/*[in]*/, float start/*[in]*/, 
                                    float end/*[in]*/, float aspect/*[in]*/);
  HRESULT         __fastcall Line(short flags/*[in]*/, float x1/*[in]*/, float y1/*[in]*/, 
                                  float x2/*[in]*/, float y2/*[in]*/, long color/*[in]*/);
  HRESULT         __fastcall PSet(short flags/*[in]*/, float X/*[in]*/, float Y/*[in]*/, 
                                  long color/*[in]*/);
  HRESULT         __fastcall Scale(short flags/*[in]*/, float x1/*[in]*/, float y1/*[in]*/, 
                                   float x2/*[in]*/, float y2/*[in]*/);
  HRESULT         __fastcall TextWidth(BSTR Expr/*[in]*/, float* pRet/*[out,retval]*/);
  float           __fastcall TextWidth(BSTR Expr/*[in]*/);
  HRESULT         __fastcall TextHeight(BSTR Expr/*[in]*/, float* pRet/*[out,retval]*/);
  float           __fastcall TextHeight(BSTR Expr/*[in]*/);
  HRESULT         __fastcall Print(BSTR Expr/*[in]*/);
  HRESULT         __fastcall get_Section(TVariantInParam Index/*[in]*/, 
                                         Access_97::AccessSectionPtr* pRet/*[out,retval]*/);
  Access_97::AccessSectionPtr __fastcall get_Section(TVariantInParam Index/*[in]*/);
  HRESULT         __fastcall get_GroupLevel(long Index/*[in]*/, 
                                            Access_97::AccessGroupLevelPtr* pRet/*[out,retval]*/);
  Access_97::AccessGroupLevelPtr __fastcall get_GroupLevel(long Index/*[in]*/);
  HRESULT         __fastcall get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall get_Report(void);
  HRESULT         __fastcall get_Module(Access_97::ModulePtr* pRet/*[out,retval]*/);
  Access_97::ModulePtr __fastcall get_Module(void);
  HRESULT         __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/);
  Access_97::Controls_Ptr __fastcall get_Controls(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);

  __property   BSTR            FormName = {read = get_FormName, write = set_FormName};
  __property   BSTR            RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            Filter = {read = get_Filter, write = set_Filter};
  __property   TOLEBOOL        FilterOn = {read = get_FilterOn, write = set_FilterOn};
  __property   BSTR            OrderBy = {read = get_OrderBy, write = set_OrderBy};
  __property   TOLEBOOL        OrderByOn = {read = get_OrderByOn, write = set_OrderByOn};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   unsigned_char   RecordLocks = {read = get_RecordLocks, write = set_RecordLocks};
  __property   unsigned_char   PageHeader = {read = get_PageHeader, write = set_PageHeader};
  __property   unsigned_char   PageFooter = {read = get_PageFooter, write = set_PageFooter};
  __property   unsigned_char   DateGrouping = {read = get_DateGrouping, write = set_DateGrouping};
  __property   unsigned_char   GrpKeepTogether = {read = get_GrpKeepTogether, write = set_GrpKeepTogether};
  __property   TOLEBOOL        MinButton = {read = get_MinButton, write = set_MinButton};
  __property   TOLEBOOL        MaxButton = {read = get_MaxButton, write = set_MaxButton};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   unsigned_char   PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   unsigned_char   PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   TOLEBOOL        PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   unsigned_char   PicturePages = {read = get_PicturePages, write = set_PicturePages};
  __property   BSTR            MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   BSTR            Toolbar = {read = get_Toolbar, write = set_Toolbar};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   short           GridX = {read = get_GridX, write = set_GridX};
  __property   short           GridY = {read = get_GridY, write = set_GridY};
  __property   TOLEBOOL        LayoutForPrint = {read = get_LayoutForPrint, write = set_LayoutForPrint};
  __property   TOLEBOOL        FastLaserPrinting = {read = get_FastLaserPrinting, write = set_FastLaserPrinting};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   long            Hwnd = {read = get_Hwnd, write = set_Hwnd};
  __property   short           Count = {read = get_Count, write = set_Count};
  __property   long            Page = {read = get_Page, write = set_Page};
  __property   short           Pages = {read = get_Pages, write = set_Pages};
  __property   long            LogicalPageWidth = {read = get_LogicalPageWidth, write = set_LogicalPageWidth};
  __property   long            LogicalPageHeight = {read = get_LogicalPageHeight, write = set_LogicalPageHeight};
  __property   long            ZoomControl = {read = get_ZoomControl, write = set_ZoomControl};
  __property   long            HasData = {read = get_HasData, write = set_HasData};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   TOLEBOOL        PrintSection = {read = get_PrintSection, write = set_PrintSection};
  __property   TOLEBOOL        NextRecord = {read = get_NextRecord, write = set_NextRecord};
  __property   TOLEBOOL        MoveLayout = {read = get_MoveLayout, write = set_MoveLayout};
  __property   short           FormatCount = {read = get_FormatCount, write = set_FormatCount};
  __property   short           PrintCount = {read = get_PrintCount, write = set_PrintCount};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        Painting = {read = get_Painting, write = set_Painting};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   float           CurrentX = {read = get_CurrentX, write = set_CurrentX};
  __property   float           CurrentY = {read = get_CurrentY, write = set_CurrentY};
  __property   float           ScaleHeight = {read = get_ScaleHeight, write = set_ScaleHeight};
  __property   float           ScaleLeft = {read = get_ScaleLeft, write = set_ScaleLeft};
  __property   short           ScaleMode = {read = get_ScaleMode, write = set_ScaleMode};
  __property   float           ScaleTop = {read = get_ScaleTop, write = set_ScaleTop};
  __property   float           ScaleWidth = {read = get_ScaleWidth, write = set_ScaleWidth};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   short           FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           DrawMode = {read = get_DrawMode, write = set_DrawMode};
  __property   short           DrawStyle = {read = get_DrawStyle, write = set_DrawStyle};
  __property   short           DrawWidth = {read = get_DrawWidth, write = set_DrawWidth};
  __property   long            FillColor = {read = get_FillColor, write = set_FillColor};
  __property   short           FillStyle = {read = get_FillStyle, write = set_FillStyle};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            PaletteSource = {read = get_PaletteSource, write = set_PaletteSource};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            OnMenu = {read = get_OnMenu, write = set_OnMenu};
  __property   BSTR            OnOpen = {read = get_OnOpen, write = set_OnOpen};
  __property   BSTR            OnClose = {read = get_OnClose, write = set_OnClose};
  __property   BSTR            OnActivate = {read = get_OnActivate, write = set_OnActivate};
  __property   BSTR            OnDeactivate = {read = get_OnDeactivate, write = set_OnDeactivate};
  __property   BSTR            OnNoData = {read = get_OnNoData, write = set_OnNoData};
  __property   BSTR            OnPage = {read = get_OnPage, write = set_OnPage};
  __property   BSTR            OnError = {read = get_OnError, write = set_OnError};
  __property   TOLEBOOL        Dirty = {read = get_Dirty, write = set_Dirty};
  __property   long            CurrentRecord = {read = get_CurrentRecord, write = set_CurrentRecord};
  __property   TOLEBOOL        HasModule = {read = get_HasModule, write = set_HasModule};
  __property   long            acHiddenCurrentPage = {read = get_acHiddenCurrentPage, write = set_acHiddenCurrentPage};
  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessControlPtr ActiveControl = {read = get_ActiveControl};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
  __property   Access_97::ModulePtr Module = {read = get_Module};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::Controls_Ptr Controls = {read = get_Controls};
};
typedef TCOM_ReportT<_Report> TCOM_Report;

// *********************************************************************//
// DispIntf:  _Report
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3E8B6B00-91FF-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template<class T>
class _ReportDispT : public TAutoDriver<_Report>
{
public:
  _ReportDispT(){}

  _ReportDispT(_Report *pintf)
  {
    TAutoDriver<_Report>::Bind(pintf, false);
  }

  _ReportDispT(_ReportPtr pintf)
  {
    TAutoDriver<_Report>::Bind(pintf, true);
  }

  _ReportDispT& operator=(_Report *pintf)
  {
    TAutoDriver<_Report>::Bind(pintf, false);
    return *this;
  }

  _ReportDispT& operator=(_ReportPtr pintf)
  {
    TAutoDriver<_Report>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessReport));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessReport);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FormName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FormName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FormName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_RecordSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Filter(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Filter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Filter(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FilterOn(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FilterOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FilterOn(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OrderBy(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OrderBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OrderBy(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OrderByOn(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_OrderByOn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OrderByOn(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecordLocks(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_RecordLocks(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecordLocks(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageHeader(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PageHeader(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PageHeader(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageFooter(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PageFooter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PageFooter(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateGrouping(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_DateGrouping(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DateGrouping(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GrpKeepTogether(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_GrpKeepTogether(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GrpKeepTogether(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MinButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinButton(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxButton(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MaxButton(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxButton(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(short* pRet/*[out,retval]*/);
  short           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Picture(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Picture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Picture(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureType(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureType(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureSizeMode(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureSizeMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureSizeMode(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PictureAlignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureAlignment(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PictureTiling(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureTiling(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PicturePages(unsigned_char* pRet/*[out,retval]*/);
  unsigned_char   __fastcall get_PicturePages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PicturePages(unsigned_char pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_MenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Toolbar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Toolbar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Toolbar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridX(short* pRet/*[out,retval]*/);
  short           __fastcall get_GridX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridX(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GridY(short* pRet/*[out,retval]*/);
  short           __fastcall get_GridY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GridY(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LayoutForPrint(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_LayoutForPrint(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LayoutForPrint(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FastLaserPrinting(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_FastLaserPrinting(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FastLaserPrinting(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(long* pRet/*[out,retval]*/);
  long            __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Hwnd(long* pRet/*[out,retval]*/);
  long            __fastcall get_Hwnd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Hwnd(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(short* pRet/*[out,retval]*/);
  short           __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Page(long* pRet/*[out,retval]*/);
  long            __fastcall get_Page(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Page(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pages(short* pRet/*[out,retval]*/);
  short           __fastcall get_Pages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Pages(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LogicalPageWidth(long* pRet/*[out,retval]*/);
  long            __fastcall get_LogicalPageWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LogicalPageWidth(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LogicalPageHeight(long* pRet/*[out,retval]*/);
  long            __fastcall get_LogicalPageHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LogicalPageHeight(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZoomControl(long* pRet/*[out,retval]*/);
  long            __fastcall get_ZoomControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ZoomControl(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasData(long* pRet/*[out,retval]*/);
  long            __fastcall get_HasData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasData(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(long* pRet/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(long* pRet/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(long* pRet/*[out,retval]*/);
  long            __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintSection(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_PrintSection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintSection(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NextRecord(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_NextRecord(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NextRecord(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MoveLayout(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_MoveLayout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MoveLayout(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FormatCount(short* pRet/*[out,retval]*/);
  short           __fastcall get_FormatCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FormatCount(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrintCount(short* pRet/*[out,retval]*/);
  short           __fastcall get_PrintCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrintCount(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Painting(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Painting(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Painting(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrtMip(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtMip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrtMip(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrtDevMode(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtDevMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrtDevMode(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PrtDevNames(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PrtDevNames(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PrtDevNames(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentX(float* pRet/*[out,retval]*/);
  float           __fastcall get_CurrentX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurrentX(float pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentY(float* pRet/*[out,retval]*/);
  float           __fastcall get_CurrentY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurrentY(float pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScaleHeight(float* pRet/*[out,retval]*/);
  float           __fastcall get_ScaleHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScaleHeight(float pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScaleLeft(float* pRet/*[out,retval]*/);
  float           __fastcall get_ScaleLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScaleLeft(float pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScaleMode(short* pRet/*[out,retval]*/);
  short           __fastcall get_ScaleMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScaleMode(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScaleTop(float* pRet/*[out,retval]*/);
  float           __fastcall get_ScaleTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScaleTop(float pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ScaleWidth(float* pRet/*[out,retval]*/);
  float           __fastcall get_ScaleWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ScaleWidth(float pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontUnderline(short* pRet/*[out,retval]*/);
  short           __fastcall get_FontUnderline(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontUnderline(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DrawMode(short* pRet/*[out,retval]*/);
  short           __fastcall get_DrawMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DrawMode(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DrawStyle(short* pRet/*[out,retval]*/);
  short           __fastcall get_DrawStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DrawStyle(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DrawWidth(short* pRet/*[out,retval]*/);
  short           __fastcall get_DrawWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DrawWidth(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FillColor(long* pRet/*[out,retval]*/);
  long            __fastcall get_FillColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FillColor(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FillStyle(short* pRet/*[out,retval]*/);
  short           __fastcall get_FillStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FillStyle(short pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PaletteSource(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_PaletteSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PaletteSource(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PaintPalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PaintPalette(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PaintPalette(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnMenu(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnMenu(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnMenu(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnOpen(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnOpen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnOpen(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnClose(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnClose(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnClose(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnActivate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnActivate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnActivate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnDeactivate(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnDeactivate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnDeactivate(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnNoData(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnNoData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnNoData(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnPage(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnPage(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnError(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_OnError(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnError(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Dirty(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Dirty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Dirty(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentRecord(long* pRet/*[out,retval]*/);
  long            __fastcall get_CurrentRecord(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CurrentRecord(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureData(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PictureData(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PictureData(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PicturePalette(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall get_PicturePalette(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PicturePalette(TVariantInParam pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HasModule(TOLEBOOL* pRet/*[out,retval]*/);
  TOLEBOOL        __fastcall get_HasModule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HasModule(TOLEBOOL pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_acHiddenCurrentPage(long* pRet/*[out,retval]*/);
  long            __fastcall get_acHiddenCurrentPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_acHiddenCurrentPage(long pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_ActiveControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultControl(long ControlType/*[in]*/, 
                                                           Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_DefaultControl(long ControlType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Circle(short flags/*[in]*/, float X/*[in]*/, float Y/*[in]*/
                                               , float radius/*[in]*/, long color/*[in]*/, 
                                               float start/*[in]*/, float end/*[in]*/, 
                                               float aspect/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Line(short flags/*[in]*/, float x1/*[in]*/, float y1/*[in]*/
                                             , float x2/*[in]*/, float y2/*[in]*/, 
                                             long color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PSet(short flags/*[in]*/, float X/*[in]*/, float Y/*[in]*/, 
                                             long color/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Scale(short flags/*[in]*/, float x1/*[in]*/, 
                                              float y1/*[in]*/, float x2/*[in]*/, float y2/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TextWidth(BSTR Expr/*[in]*/, float* pRet/*[out,retval]*/);
  float           __fastcall TextWidth(BSTR Expr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TextHeight(BSTR Expr/*[in]*/, float* pRet/*[out,retval]*/);
  float           __fastcall TextHeight(BSTR Expr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Print(BSTR Expr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Section(TVariantInParam Index/*[in]*/, 
                                                    Access_97::AccessSectionPtr* pRet/*[out,retval]*/);
  Access_97::AccessSectionPtr __fastcall get_Section(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupLevel(long Index/*[in]*/, 
                                                       Access_97::AccessGroupLevelPtr* pRet/*[out,retval]*/);
  Access_97::AccessGroupLevelPtr __fastcall get_GroupLevel(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall get_Report(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Module(Access_97::ModulePtr* pRet/*[out,retval]*/);
  Access_97::ModulePtr __fastcall get_Module(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/);
  Access_97::PropertiesPtr __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/);
  Access_97::Controls_Ptr __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall _Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/);

  __property   BSTR            FormName = {read = get_FormName, write = set_FormName};
  __property   BSTR            RecordSource = {read = get_RecordSource, write = set_RecordSource};
  __property   BSTR            Filter = {read = get_Filter, write = set_Filter};
  __property   TOLEBOOL        FilterOn = {read = get_FilterOn, write = set_FilterOn};
  __property   BSTR            OrderBy = {read = get_OrderBy, write = set_OrderBy};
  __property   TOLEBOOL        OrderByOn = {read = get_OrderByOn, write = set_OrderByOn};
  __property   BSTR            Caption = {read = get_Caption, write = set_Caption};
  __property   unsigned_char   RecordLocks = {read = get_RecordLocks, write = set_RecordLocks};
  __property   unsigned_char   PageHeader = {read = get_PageHeader, write = set_PageHeader};
  __property   unsigned_char   PageFooter = {read = get_PageFooter, write = set_PageFooter};
  __property   unsigned_char   DateGrouping = {read = get_DateGrouping, write = set_DateGrouping};
  __property   unsigned_char   GrpKeepTogether = {read = get_GrpKeepTogether, write = set_GrpKeepTogether};
  __property   TOLEBOOL        MinButton = {read = get_MinButton, write = set_MinButton};
  __property   TOLEBOOL        MaxButton = {read = get_MaxButton, write = set_MaxButton};
  __property   short           Width = {read = get_Width, write = set_Width};
  __property   BSTR            Picture = {read = get_Picture, write = set_Picture};
  __property   unsigned_char   PictureType = {read = get_PictureType, write = set_PictureType};
  __property   unsigned_char   PictureSizeMode = {read = get_PictureSizeMode, write = set_PictureSizeMode};
  __property   unsigned_char   PictureAlignment = {read = get_PictureAlignment, write = set_PictureAlignment};
  __property   TOLEBOOL        PictureTiling = {read = get_PictureTiling, write = set_PictureTiling};
  __property   unsigned_char   PicturePages = {read = get_PicturePages, write = set_PicturePages};
  __property   BSTR            MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   BSTR            Toolbar = {read = get_Toolbar, write = set_Toolbar};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   short           GridX = {read = get_GridX, write = set_GridX};
  __property   short           GridY = {read = get_GridY, write = set_GridY};
  __property   TOLEBOOL        LayoutForPrint = {read = get_LayoutForPrint, write = set_LayoutForPrint};
  __property   TOLEBOOL        FastLaserPrinting = {read = get_FastLaserPrinting, write = set_FastLaserPrinting};
  __property   BSTR            HelpFile = {read = get_HelpFile, write = set_HelpFile};
  __property   long            HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   long            Hwnd = {read = get_Hwnd, write = set_Hwnd};
  __property   short           Count = {read = get_Count, write = set_Count};
  __property   long            Page = {read = get_Page, write = set_Page};
  __property   short           Pages = {read = get_Pages, write = set_Pages};
  __property   long            LogicalPageWidth = {read = get_LogicalPageWidth, write = set_LogicalPageWidth};
  __property   long            LogicalPageHeight = {read = get_LogicalPageHeight, write = set_LogicalPageHeight};
  __property   long            ZoomControl = {read = get_ZoomControl, write = set_ZoomControl};
  __property   long            HasData = {read = get_HasData, write = set_HasData};
  __property   long            Left = {read = get_Left, write = set_Left};
  __property   long            Top = {read = get_Top, write = set_Top};
  __property   long            Height = {read = get_Height, write = set_Height};
  __property   TOLEBOOL        PrintSection = {read = get_PrintSection, write = set_PrintSection};
  __property   TOLEBOOL        NextRecord = {read = get_NextRecord, write = set_NextRecord};
  __property   TOLEBOOL        MoveLayout = {read = get_MoveLayout, write = set_MoveLayout};
  __property   short           FormatCount = {read = get_FormatCount, write = set_FormatCount};
  __property   short           PrintCount = {read = get_PrintCount, write = set_PrintCount};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        Painting = {read = get_Painting, write = set_Painting};
  __property   long            ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   float           CurrentX = {read = get_CurrentX, write = set_CurrentX};
  __property   float           CurrentY = {read = get_CurrentY, write = set_CurrentY};
  __property   float           ScaleHeight = {read = get_ScaleHeight, write = set_ScaleHeight};
  __property   float           ScaleLeft = {read = get_ScaleLeft, write = set_ScaleLeft};
  __property   short           ScaleMode = {read = get_ScaleMode, write = set_ScaleMode};
  __property   float           ScaleTop = {read = get_ScaleTop, write = set_ScaleTop};
  __property   float           ScaleWidth = {read = get_ScaleWidth, write = set_ScaleWidth};
  __property   short           FontBold = {read = get_FontBold, write = set_FontBold};
  __property   short           FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName, write = set_FontName};
  __property   short           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   short           FontUnderline = {read = get_FontUnderline, write = set_FontUnderline};
  __property   short           DrawMode = {read = get_DrawMode, write = set_DrawMode};
  __property   short           DrawStyle = {read = get_DrawStyle, write = set_DrawStyle};
  __property   short           DrawWidth = {read = get_DrawWidth, write = set_DrawWidth};
  __property   long            FillColor = {read = get_FillColor, write = set_FillColor};
  __property   short           FillStyle = {read = get_FillStyle, write = set_FillStyle};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   BSTR            PaletteSource = {read = get_PaletteSource, write = set_PaletteSource};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   BSTR            OnMenu = {read = get_OnMenu, write = set_OnMenu};
  __property   BSTR            OnOpen = {read = get_OnOpen, write = set_OnOpen};
  __property   BSTR            OnClose = {read = get_OnClose, write = set_OnClose};
  __property   BSTR            OnActivate = {read = get_OnActivate, write = set_OnActivate};
  __property   BSTR            OnDeactivate = {read = get_OnDeactivate, write = set_OnDeactivate};
  __property   BSTR            OnNoData = {read = get_OnNoData, write = set_OnNoData};
  __property   BSTR            OnPage = {read = get_OnPage, write = set_OnPage};
  __property   BSTR            OnError = {read = get_OnError, write = set_OnError};
  __property   TOLEBOOL        Dirty = {read = get_Dirty, write = set_Dirty};
  __property   long            CurrentRecord = {read = get_CurrentRecord, write = set_CurrentRecord};
  __property   TOLEBOOL        HasModule = {read = get_HasModule, write = set_HasModule};
  __property   long            acHiddenCurrentPage = {read = get_acHiddenCurrentPage, write = set_acHiddenCurrentPage};
  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessControlPtr ActiveControl = {read = get_ActiveControl};
  __property   Access_97::AccessReportPtr Report = {read = get_Report};
  __property   Access_97::ModulePtr Module = {read = get_Module};
  __property   Access_97::PropertiesPtr Properties = {read = get_Properties};
  __property   Access_97::Controls_Ptr Controls = {read = get_Controls};
};
typedef _ReportDispT<_Report> _ReportDisp;

typedef TComInterface<_ReportEvents>  TCOM_ReportEvents;

typedef TComInterface<Reports>  TCOMReports;

// *********************************************************************//
// DispIntf:  Reports
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D1523700-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template<class T>
class ReportsDispT : public TAutoDriver<Reports>
{
public:
  ReportsDispT(){}

  ReportsDispT(Reports *pintf)
  {
    TAutoDriver<Reports>::Bind(pintf, false);
  }

  ReportsDispT(ReportsPtr pintf)
  {
    TAutoDriver<Reports>::Bind(pintf, true);
  }

  ReportsDispT& operator=(Reports *pintf)
  {
    TAutoDriver<Reports>::Bind(pintf, false);
    return *this;
  }

  ReportsDispT& operator=(ReportsPtr pintf)
  {
    TAutoDriver<Reports>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(TVariantInParam Index/*[in]*/, 
                                                 Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall get_Item(TVariantInParam Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pRet/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* pRet/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef ReportsDispT<Reports> ReportsDisp;

typedef TComInterface<Screen>  TCOMScreen;

// *********************************************************************//
// DispIntf:  Screen
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DC6B66C0-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template<class T>
class ScreenDispT : public TAutoDriver<Screen>
{
public:
  ScreenDispT(){}

  ScreenDispT(Screen *pintf)
  {
    TAutoDriver<Screen>::Bind(pintf, false);
  }

  ScreenDispT(ScreenPtr pintf)
  {
    TAutoDriver<Screen>::Bind(pintf, true);
  }

  ScreenDispT& operator=(Screen *pintf)
  {
    TAutoDriver<Screen>::Bind(pintf, false);
    return *this;
  }

  ScreenDispT& operator=(ScreenPtr pintf)
  {
    TAutoDriver<Screen>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveDatasheet(Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_ActiveDatasheet(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_ActiveControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PreviousControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall get_PreviousControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveForm(Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall get_ActiveForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveReport(Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall get_ActiveReport(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MousePointer(short* pRet/*[out,retval]*/);
  short           __fastcall get_MousePointer(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MousePointer(short pRet/*[in]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Access_97::AccessFormPtr ActiveDatasheet = {read = get_ActiveDatasheet};
  __property   Access_97::AccessControlPtr ActiveControl = {read = get_ActiveControl};
  __property   Access_97::AccessControlPtr PreviousControl = {read = get_PreviousControl};
  __property   Access_97::AccessFormPtr ActiveForm = {read = get_ActiveForm};
  __property   Access_97::AccessReportPtr ActiveReport = {read = get_ActiveReport};
  __property   short           MousePointer = {read = get_MousePointer, write = set_MousePointer};
};
typedef ScreenDispT<Screen> ScreenDisp;

// *********************************************************************//
// SmartIntf: TCOM_Application
// Interface: _Application
// *********************************************************************//
template <class T /* _Application */ >
class TCOM_ApplicationT : public TComInterface<_Application>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ApplicationT() {}
  TCOM_ApplicationT(_Application *intf, bool addRef = false) : TComInterface<_Application>(intf, addRef) {}
  TCOM_ApplicationT(const TCOM_ApplicationT& src) : TComInterface<_Application>(src) {}
  TCOM_ApplicationT& operator=(const TCOM_ApplicationT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall get_CodeContextObject(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_CodeContextObject(void);
  HRESULT         __fastcall NewCurrentDatabase(BSTR filepath/*[in]*/);
  HRESULT         __fastcall OpenCurrentDatabase(BSTR filepath/*[in]*/, 
                                                 TOLEBOOL Exclusive/*[in,def,opt]*/);
  HRESULT         __fastcall get_MenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_MenuBar(void);
  HRESULT         __fastcall set_MenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_CurrentObjectType(long* pRet/*[out,retval]*/);
  long            __fastcall get_CurrentObjectType(void);
  HRESULT         __fastcall get_CurrentObjectName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_CurrentObjectName(void);
  HRESULT         __fastcall GetOption(BSTR OptionName/*[in]*/, TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall GetOption(BSTR OptionName/*[in]*/);
  HRESULT         __fastcall SetOption(BSTR OptionName/*[in]*/, TVariantInParam Setting/*[in]*/);
  HRESULT         __fastcall Echo(short EchoOn/*[in]*/, BSTR bstrStatusBarText/*[in,def,opt]*/);
  HRESULT         __fastcall CloseCurrentDatabase(void);
  HRESULT         __fastcall Quit(Access_97::AcQuitOption Option/*[in,def,opt]*/);
  HRESULT         __fastcall get_Forms(Access_97::Forms_Ptr* pRet/*[out,retval]*/);
  Access_97::Forms_Ptr __fastcall get_Forms(void);
  HRESULT         __fastcall get_Reports(Access_97::ReportsPtr* pRet/*[out,retval]*/);
  Access_97::ReportsPtr __fastcall get_Reports(void);
  HRESULT         __fastcall get_Screen(Access_97::ScreenPtr* pRet/*[out,retval]*/);
  Access_97::ScreenPtr __fastcall get_Screen(void);
  HRESULT         __fastcall get_DoCmd(Access_97::IDoCmdPtr* pRet/*[out,retval]*/);
  Access_97::IDoCmdPtr __fastcall get_DoCmd(void);
  HRESULT         __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT         __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pfVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(TOLEBOOL pfVisible/*[in]*/);
  HRESULT         __fastcall get_UserControl(TOLEBOOL* pfUserCtrl/*[out,retval]*/);
  TOLEBOOL        __fastcall get_UserControl(void);
  HRESULT         __fastcall set_UserControl(TOLEBOOL pfUserCtrl/*[in]*/);
  HRESULT         __fastcall SysCmd(Access_97::AcSysCmdAction Action/*[in]*/, 
                                    TVariantInParam Argument2/*[in,opt]*/, 
                                    TVariantInParam Argument3/*[in,opt]*/, 
                                    TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall SysCmd(Access_97::AcSysCmdAction Action/*[in]*/, 
                                    TVariantInParam Argument2/*[in,opt]*/= TNoParam(), 
                                    TVariantInParam Argument3/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CreateForm(TVariantInParam Database/*[in,opt]*/, 
                                        TVariantInParam FormTemplate/*[in,opt]*/, 
                                        Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall CreateForm(TVariantInParam Database/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam FormTemplate/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CreateReport(TVariantInParam Database/*[in,opt]*/, 
                                          TVariantInParam ReportTemplate/*[in,opt]*/, 
                                          Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall CreateReport(TVariantInParam Database/*[in,opt]*/= TNoParam(), 
                                                     TVariantInParam ReportTemplate/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CreateControl(BSTR FormName/*[in]*/, 
                                           Access_97::AcControlType ControlType/*[in]*/, 
                                           Access_97::AcSection Section/*[in,def,opt]*/, 
                                           TVariantInParam Parent/*[in,opt]*/, 
                                           TVariantInParam ColumnName/*[in,opt]*/, 
                                           TVariantInParam Left/*[in,opt]*/, 
                                           TVariantInParam Top/*[in,opt]*/, 
                                           TVariantInParam Width/*[in,opt]*/, 
                                           TVariantInParam Height/*[in,opt]*/, 
                                           Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall CreateControl(BSTR FormName/*[in]*/, 
                                                       Access_97::AcControlType ControlType/*[in]*/, 
                                                       Access_97::AcSection Section/*[in,def,opt]*/, 
                                                       TVariantInParam Parent/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam ColumnName/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Left/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Top/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Width/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Height/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CreateReportControl(BSTR ReportName/*[in]*/, 
                                                 Access_97::AcControlType ControlType/*[in]*/, 
                                                 Access_97::AcSection Section/*[in,def,opt]*/, 
                                                 TVariantInParam Parent/*[in,opt]*/, 
                                                 TVariantInParam ColumnName/*[in,opt]*/, 
                                                 TVariantInParam Left/*[in,opt]*/, 
                                                 TVariantInParam Top/*[in,opt]*/, 
                                                 TVariantInParam Width/*[in,opt]*/, 
                                                 TVariantInParam Height/*[in,opt]*/, 
                                                 Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall CreateReportControl(BSTR ReportName/*[in]*/, 
                                                             Access_97::AcControlType ControlType/*[in]*/, 
                                                             Access_97::AcSection Section/*[in,def,opt]*/, 
                                                             TVariantInParam Parent/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam ColumnName/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Left/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Top/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Width/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Height/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CreateControlEx(BSTR FormName/*[in]*/, 
                                             Access_97::AcControlType ControlType/*[in]*/, 
                                             Access_97::AcSection Section/*[in]*/, 
                                             BSTR Parent/*[in]*/, BSTR ControlSource/*[in]*/, 
                                             long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                             long Height/*[in]*/, 
                                             Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall CreateControlEx(BSTR FormName/*[in]*/, 
                                                         Access_97::AcControlType ControlType/*[in]*/, 
                                                         Access_97::AcSection Section/*[in]*/, 
                                                         BSTR Parent/*[in]*/, 
                                                         BSTR ControlSource/*[in]*/, 
                                                         long Left/*[in]*/, long Top/*[in]*/, 
                                                         long Width/*[in]*/, long Height/*[in]*/);
  HRESULT         __fastcall CreateReportControlEx(BSTR ReportName/*[in]*/, 
                                                   Access_97::AcControlType ControlType/*[in]*/, 
                                                   Access_97::AcSection Section/*[in]*/, 
                                                   BSTR Parent/*[in]*/, BSTR ControlName/*[in]*/, 
                                                   long Left/*[in]*/, long Top/*[in]*/, 
                                                   long Width/*[in]*/, long Height/*[in]*/, 
                                                   Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall CreateReportControlEx(BSTR ReportName/*[in]*/, 
                                                               Access_97::AcControlType ControlType/*[in]*/, 
                                                               Access_97::AcSection Section/*[in]*/, 
                                                               BSTR Parent/*[in]*/, 
                                                               BSTR ControlName/*[in]*/, 
                                                               long Left/*[in]*/, long Top/*[in]*/, 
                                                               long Width/*[in]*/, 
                                                               long Height/*[in]*/);
  HRESULT         __fastcall DeleteControl(BSTR FormName/*[in]*/, BSTR ControlName/*[in]*/);
  HRESULT         __fastcall DeleteReportControl(BSTR ReportName/*[in]*/, BSTR ControlName/*[in]*/);
  HRESULT         __fastcall CreateGroupLevel(BSTR ReportName/*[in]*/, BSTR Expression/*[in]*/, 
                                              short Header/*[in]*/, short Footer/*[in]*/, 
                                              long* pRet/*[out,retval]*/);
  long            __fastcall CreateGroupLevel(BSTR ReportName/*[in]*/, BSTR Expression/*[in]*/, 
                                              short Header/*[in]*/, short Footer/*[in]*/);
  HRESULT         __fastcall DMin(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/, 
                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DMin(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DMax(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/, 
                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DMax(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DSum(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/, 
                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DSum(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DAvg(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/, 
                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DAvg(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DLookup(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                     TVariantInParam Criteria/*[in,opt]*/, 
                                     TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DLookup(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                     TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DLast(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                   TVariantInParam Criteria/*[in,opt]*/, 
                                   TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DLast(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                   TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DVar(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/, 
                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DVar(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DVarP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                   TVariantInParam Criteria/*[in,opt]*/, 
                                   TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DVarP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                   TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DStDev(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                    TVariantInParam Criteria/*[in,opt]*/, 
                                    TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DStDev(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                    TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DStDevP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                     TVariantInParam Criteria/*[in,opt]*/, 
                                     TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DStDevP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                     TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DFirst(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                    TVariantInParam Criteria/*[in,opt]*/, 
                                    TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DFirst(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                    TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall DCount(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                    TVariantInParam Criteria/*[in,opt]*/, 
                                    TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DCount(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                    TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Eval(BSTR StringExpr/*[in]*/, TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall Eval(BSTR StringExpr/*[in]*/);
  HRESULT         __fastcall CurrentUser(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall CurrentUser(void);
  HRESULT         __fastcall DDEInitiate(BSTR Application/*[in]*/, BSTR Topic/*[in]*/, 
                                         TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DDEInitiate(BSTR Application/*[in]*/, BSTR Topic/*[in]*/);
  HRESULT         __fastcall DDEExecute(TVariantInParam ChanNum/*[in]*/, BSTR Command/*[in]*/);
  HRESULT         __fastcall DDEPoke(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/, 
                                     BSTR Data/*[in]*/);
  HRESULT         __fastcall DDERequest(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/, 
                                        BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall DDERequest(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/);
  HRESULT         __fastcall DDETerminate(TVariantInParam ChanNum/*[in]*/);
  HRESULT         __fastcall DDETerminateAll(void);
  HRESULT         __fastcall get_DBEngine(Dao_97::DBEnginePtr* pRet/*[out,retval]*/);
  Dao_97::DBEnginePtr __fastcall get_DBEngine(void);
  HRESULT         __fastcall CurrentDb(Dao_97::DatabasePtr* pRet/*[out,retval]*/);
  Dao_97::DatabasePtr __fastcall CurrentDb(void);
  HRESULT         __fastcall CodeDb(Dao_97::DatabasePtr* pRet/*[out,retval]*/);
  Dao_97::DatabasePtr __fastcall CodeDb(void);
  HRESULT         __fastcall BeginUndoable(long Hwnd/*[in]*/);
  HRESULT         __fastcall SetUndoRecording(short yesno/*[in]*/);
  HRESULT         __fastcall BuildCriteria(BSTR Field/*[in]*/, short FieldType/*[in]*/, 
                                           BSTR Expression/*[in]*/, BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall BuildCriteria(BSTR Field/*[in]*/, short FieldType/*[in]*/, 
                                           BSTR Expression/*[in]*/);
  HRESULT         __fastcall InsertText(BSTR Text/*[in]*/, BSTR ModuleName/*[in]*/);
  HRESULT         __fastcall ReloadAddIns(void);
  HRESULT         __fastcall DefaultWorkspaceClone(Dao_97::WorkspacePtr* pRet/*[out,retval]*/);
  Dao_97::WorkspacePtr __fastcall DefaultWorkspaceClone(void);
  HRESULT         __fastcall RefreshTitleBar(void);
  HRESULT         __fastcall AddAutoCorrect(BSTR ChangeFrom/*[in]*/, BSTR ChangeTo/*[in]*/);
  HRESULT         __fastcall DelAutoCorrect(BSTR ChangeFrom/*[in]*/);
  HRESULT         __fastcall hWndAccessApp(int* phWndAccessAppWnd/*[out,retval]*/);
  int             __fastcall hWndAccessApp(void);
  HRESULT         __fastcall Run(BSTR Procedure/*[in]*/, TVariant* Arg1/*[in,out,opt]*/, 
                                 TVariant* Arg2/*[in,out,opt]*/, TVariant* Arg3/*[in,out,opt]*/, 
                                 TVariant* Arg4/*[in,out,opt]*/, TVariant* Arg5/*[in,out,opt]*/, 
                                 TVariant* Arg6/*[in,out,opt]*/, TVariant* Arg7/*[in,out,opt]*/, 
                                 TVariant* Arg8/*[in,out,opt]*/, TVariant* Arg9/*[in,out,opt]*/, 
                                 TVariant* Arg10/*[in,out,opt]*/, TVariant* Arg11/*[in,out,opt]*/, 
                                 TVariant* Arg12/*[in,out,opt]*/, TVariant* Arg13/*[in,out,opt]*/, 
                                 TVariant* Arg14/*[in,out,opt]*/, TVariant* Arg15/*[in,out,opt]*/, 
                                 TVariant* Arg16/*[in,out,opt]*/, TVariant* Arg17/*[in,out,opt]*/, 
                                 TVariant* Arg18/*[in,out,opt]*/, TVariant* Arg19/*[in,out,opt]*/, 
                                 TVariant* Arg20/*[in,out,opt]*/, TVariant* Arg21/*[in,out,opt]*/, 
                                 TVariant* Arg22/*[in,out,opt]*/, TVariant* Arg23/*[in,out,opt]*/, 
                                 TVariant* Arg24/*[in,out,opt]*/, TVariant* Arg25/*[in,out,opt]*/, 
                                 TVariant* Arg26/*[in,out,opt]*/, TVariant* Arg27/*[in,out,opt]*/, 
                                 TVariant* Arg28/*[in,out,opt]*/, TVariant* Arg29/*[in,out,opt]*/, 
                                 TVariant* Arg30/*[in,out,opt]*/, TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall Run(BSTR Procedure/*[in]*/, TVariant* Arg1/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg2/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg3/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg4/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg5/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg6/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg7/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg8/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg9/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg10/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg11/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg12/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg13/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg14/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg15/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg16/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg17/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg18/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg19/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg20/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg21/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg22/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg23/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg24/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg25/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg26/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg27/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg28/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg29/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg30/*[in,out,opt]*/= TNoParam());
  HRESULT         __fastcall Nz(TVariantInParam Value/*[in]*/, 
                                TVariantInParam ValueIfNull/*[in,opt]*/, 
                                TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall Nz(TVariantInParam Value/*[in]*/, 
                                TVariantInParam ValueIfNull/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall LoadPicture(BSTR FileName/*[in]*/, LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall LoadPicture(BSTR FileName/*[in]*/);
  HRESULT         __fastcall ReplaceModule(long objtyp/*[in]*/, BSTR ModuleName/*[in]*/, 
                                           BSTR FileName/*[in]*/, long token/*[in]*/);
  HRESULT         __fastcall AccessError(TVariantInParam ErrorNumber/*[in]*/, 
                                         TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall AccessError(TVariantInParam ErrorNumber/*[in]*/);
  HRESULT         __fastcall BuilderString(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall BuilderString(void);
  HRESULT         __fastcall StringFromGUID(TVariantInParam Guid/*[in]*/, 
                                            TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall StringFromGUID(TVariantInParam Guid/*[in]*/);
  HRESULT         __fastcall GUIDFromString(TVariantInParam String/*[in]*/, 
                                            TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall GUIDFromString(TVariantInParam String/*[in]*/);
  HRESULT         __fastcall AppLoadString(long id/*[in]*/, TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall AppLoadString(long id/*[in]*/);
  HRESULT         __fastcall get_CommandBars(Office_97::CommandBarsPtr* pRet/*[out,retval]*/);
  Office_97::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT         __fastcall get_Assistant(Office_97::AssistantPtr* pRet/*[out,retval]*/);
  Office_97::AssistantPtr __fastcall get_Assistant(void);
  HRESULT         __fastcall FollowHyperlink(BSTR Address/*[in]*/, BSTR SubAddress/*[in,def,opt]*/, 
                                             TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                             TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                             TVariantInParam ExtraInfo/*[in,opt]*/, 
                                             Office_97::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                             BSTR HeaderInfo/*[in,def,opt]*/);
  HRESULT         __fastcall SaveAsText(long ObjectType/*[in]*/, BSTR ObjectName/*[in]*/, 
                                        BSTR FileName/*[in]*/);
  HRESULT         __fastcall LoadFromText(long ObjectType/*[in]*/, BSTR ObjectName/*[in]*/, 
                                          BSTR FileName/*[in]*/);
  HRESULT         __fastcall AddToFavorites(void);
  HRESULT         __fastcall RefreshDatabaseWindow(void);
  HRESULT         __fastcall get_References(Access_97::AccessReferencesPtr* pRet/*[out,retval]*/);
  Access_97::AccessReferencesPtr __fastcall get_References(void);
  HRESULT         __fastcall get_Modules(Access_97::ModulesPtr* pRet/*[out,retval]*/);
  Access_97::ModulesPtr __fastcall get_Modules(void);
  HRESULT         __fastcall get_FileSearch(Office_97::FileSearchPtr* pRet/*[out,retval]*/);
  Office_97::FileSearchPtr __fastcall get_FileSearch(void);
  HRESULT         __fastcall get_IsCompiled(TOLEBOOL* pfCompiled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsCompiled(void);
  HRESULT         __fastcall RunCommand(Access_97::AcCommand Command/*[in]*/);
  HRESULT         __fastcall HyperlinkPart(TVariantInParam Hyperlink/*[in]*/, 
                                           Access_97::AcHyperlinkPart Part/*[in,def,opt]*/, 
                                           BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall HyperlinkPart(TVariantInParam Hyperlink/*[in]*/, 
                                           Access_97::AcHyperlinkPart Part/*[in,def,opt]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      CodeContextObject = {read = get_CodeContextObject};
  __property   BSTR            MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   long            CurrentObjectType = {read = get_CurrentObjectType};
  __property   BSTR            CurrentObjectName = {read = get_CurrentObjectName};
  __property   Access_97::Forms_Ptr Forms = {read = get_Forms};
  __property   Access_97::ReportsPtr Reports = {read = get_Reports};
  __property   Access_97::ScreenPtr Screen = {read = get_Screen};
  __property   Access_97::IDoCmdPtr DoCmd = {read = get_DoCmd};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        UserControl = {read = get_UserControl, write = set_UserControl};
  __property   Dao_97::DBEnginePtr DBEngine = {read = get_DBEngine};
  __property   Office_97::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Office_97::AssistantPtr Assistant = {read = get_Assistant};
  __property   Access_97::AccessReferencesPtr References = {read = get_References};
  __property   Access_97::ModulesPtr Modules = {read = get_Modules};
  __property   Office_97::FileSearchPtr FileSearch = {read = get_FileSearch};
  __property   TOLEBOOL        IsCompiled = {read = get_IsCompiled};
};
typedef TCOM_ApplicationT<_Application> TCOM_Application;

// *********************************************************************//
// DispIntf:  _Application
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68CCE6C0-6129-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template<class T>
class _ApplicationDispT : public TAutoDriver<_Application>
{
public:
  _ApplicationDispT(){}

  _ApplicationDispT(_Application *pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, false);
  }

  _ApplicationDispT(_ApplicationPtr pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, true);
  }

  _ApplicationDispT& operator=(_Application *pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, false);
    return *this;
  }

  _ApplicationDispT& operator=(_ApplicationPtr pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessApplication));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessApplication);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/);
  Access_97::AccessApplicationPtr __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CodeContextObject(LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall get_CodeContextObject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewCurrentDatabase(BSTR filepath/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OpenCurrentDatabase(BSTR filepath/*[in]*/, 
                                                            TOLEBOOL Exclusive/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_MenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentObjectType(long* pRet/*[out,retval]*/);
  long            __fastcall get_CurrentObjectType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CurrentObjectName(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_CurrentObjectName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetOption(BSTR OptionName/*[in]*/, 
                                                  TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall GetOption(BSTR OptionName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetOption(BSTR OptionName/*[in]*/, 
                                                  TVariantInParam Setting/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Echo(short EchoOn/*[in]*/, 
                                             BSTR bstrStatusBarText/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CloseCurrentDatabase();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Quit(Access_97::AcQuitOption Option/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Forms(Access_97::Forms_Ptr* pRet/*[out,retval]*/);
  Access_97::Forms_Ptr __fastcall get_Forms(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Reports(Access_97::ReportsPtr* pRet/*[out,retval]*/);
  Access_97::ReportsPtr __fastcall get_Reports(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Screen(Access_97::ScreenPtr* pRet/*[out,retval]*/);
  Access_97::ScreenPtr __fastcall get_Screen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DoCmd(Access_97::IDoCmdPtr* pRet/*[out,retval]*/);
  Access_97::IDoCmdPtr __fastcall get_DoCmd(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutMenuBar(BSTR pRet/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(TOLEBOOL* pfVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(TOLEBOOL pfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UserControl(TOLEBOOL* pfUserCtrl/*[out,retval]*/);
  TOLEBOOL        __fastcall get_UserControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UserControl(TOLEBOOL pfUserCtrl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SysCmd(Access_97::AcSysCmdAction Action/*[in]*/, 
                                               TVariantInParam Argument2/*[in,opt]*/, 
                                               TVariantInParam Argument3/*[in,opt]*/, 
                                               TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall SysCmd(Access_97::AcSysCmdAction Action/*[in]*/, 
                                    TVariantInParam Argument2/*[in,opt]*/= TNoParam(), 
                                    TVariantInParam Argument3/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateForm(TVariantInParam Database/*[in,opt]*/, 
                                                   TVariantInParam FormTemplate/*[in,opt]*/, 
                                                   Access_97::AccessFormPtr* pRet/*[out,retval]*/);
  Access_97::AccessFormPtr __fastcall CreateForm(TVariantInParam Database/*[in,opt]*/= TNoParam(), 
                                                 TVariantInParam FormTemplate/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateReport(TVariantInParam Database/*[in,opt]*/, 
                                                     TVariantInParam ReportTemplate/*[in,opt]*/, 
                                                     Access_97::AccessReportPtr* pRet/*[out,retval]*/);
  Access_97::AccessReportPtr __fastcall CreateReport(TVariantInParam Database/*[in,opt]*/= TNoParam(), 
                                                     TVariantInParam ReportTemplate/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateControl(BSTR FormName/*[in]*/, 
                                                      Access_97::AcControlType ControlType/*[in]*/, 
                                                      Access_97::AcSection Section/*[in,def,opt]*/, 
                                                      TVariantInParam Parent/*[in,opt]*/, 
                                                      TVariantInParam ColumnName/*[in,opt]*/, 
                                                      TVariantInParam Left/*[in,opt]*/, 
                                                      TVariantInParam Top/*[in,opt]*/, 
                                                      TVariantInParam Width/*[in,opt]*/, 
                                                      TVariantInParam Height/*[in,opt]*/, 
                                                      Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall CreateControl(BSTR FormName/*[in]*/, 
                                                       Access_97::AcControlType ControlType/*[in]*/, 
                                                       Access_97::AcSection Section/*[in,def,opt]*/, 
                                                       TVariantInParam Parent/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam ColumnName/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Left/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Top/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Width/*[in,opt]*/= TNoParam(), 
                                                       TVariantInParam Height/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateReportControl(BSTR ReportName/*[in]*/, 
                                                            Access_97::AcControlType ControlType/*[in]*/
                                                            , 
                                                            Access_97::AcSection Section/*[in,def,opt]*/
                                                            , TVariantInParam Parent/*[in,opt]*/, 
                                                            TVariantInParam ColumnName/*[in,opt]*/, 
                                                            TVariantInParam Left/*[in,opt]*/, 
                                                            TVariantInParam Top/*[in,opt]*/, 
                                                            TVariantInParam Width/*[in,opt]*/, 
                                                            TVariantInParam Height/*[in,opt]*/, 
                                                            Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall CreateReportControl(BSTR ReportName/*[in]*/, 
                                                             Access_97::AcControlType ControlType/*[in]*/, 
                                                             Access_97::AcSection Section/*[in,def,opt]*/, 
                                                             TVariantInParam Parent/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam ColumnName/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Left/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Top/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Width/*[in,opt]*/= TNoParam(), 
                                                             TVariantInParam Height/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateControlEx(BSTR FormName/*[in]*/, 
                                                        Access_97::AcControlType ControlType/*[in]*/
                                                        , Access_97::AcSection Section/*[in]*/, 
                                                        BSTR Parent/*[in]*/, 
                                                        BSTR ControlSource/*[in]*/, 
                                                        long Left/*[in]*/, long Top/*[in]*/, 
                                                        long Width/*[in]*/, long Height/*[in]*/, 
                                                        Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall CreateControlEx(BSTR FormName/*[in]*/, 
                                                         Access_97::AcControlType ControlType/*[in]*/, 
                                                         Access_97::AcSection Section/*[in]*/, 
                                                         BSTR Parent/*[in]*/, 
                                                         BSTR ControlSource/*[in]*/, 
                                                         long Left/*[in]*/, long Top/*[in]*/, 
                                                         long Width/*[in]*/, long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateReportControlEx(BSTR ReportName/*[in]*/, 
                                                              Access_97::AcControlType ControlType/*[in]*/
                                                              , Access_97::AcSection Section/*[in]*/
                                                              , BSTR Parent/*[in]*/, 
                                                              BSTR ControlName/*[in]*/, 
                                                              long Left/*[in]*/, long Top/*[in]*/, 
                                                              long Width/*[in]*/, 
                                                              long Height/*[in]*/, 
                                                              Access_97::AccessControlPtr* pRet/*[out,retval]*/);
  Access_97::AccessControlPtr __fastcall CreateReportControlEx(BSTR ReportName/*[in]*/, 
                                                               Access_97::AcControlType ControlType/*[in]*/, 
                                                               Access_97::AcSection Section/*[in]*/, 
                                                               BSTR Parent/*[in]*/, 
                                                               BSTR ControlName/*[in]*/, 
                                                               long Left/*[in]*/, long Top/*[in]*/, 
                                                               long Width/*[in]*/, 
                                                               long Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteControl(BSTR FormName/*[in]*/, 
                                                      BSTR ControlName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteReportControl(BSTR ReportName/*[in]*/, 
                                                            BSTR ControlName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateGroupLevel(BSTR ReportName/*[in]*/, 
                                                         BSTR Expression/*[in]*/, 
                                                         short Header/*[in]*/, short Footer/*[in]*/
                                                         , long* pRet/*[out,retval]*/);
  long            __fastcall CreateGroupLevel(BSTR ReportName/*[in]*/, BSTR Expression/*[in]*/, 
                                              short Header/*[in]*/, short Footer/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DMin(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                             TVariantInParam Criteria/*[in,opt]*/, 
                                             TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DMin(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DMax(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                             TVariantInParam Criteria/*[in,opt]*/, 
                                             TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DMax(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DSum(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                             TVariantInParam Criteria/*[in,opt]*/, 
                                             TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DSum(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DAvg(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                             TVariantInParam Criteria/*[in,opt]*/, 
                                             TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DAvg(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DLookup(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                                TVariantInParam Criteria/*[in,opt]*/, 
                                                TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DLookup(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                     TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DLast(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                              TVariantInParam Criteria/*[in,opt]*/, 
                                              TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DLast(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                   TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DVar(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                             TVariantInParam Criteria/*[in,opt]*/, 
                                             TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DVar(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                  TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DVarP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                              TVariantInParam Criteria/*[in,opt]*/, 
                                              TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DVarP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                   TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DStDev(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                               TVariantInParam Criteria/*[in,opt]*/, 
                                               TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DStDev(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                    TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DStDevP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                                TVariantInParam Criteria/*[in,opt]*/, 
                                                TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DStDevP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                     TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DFirst(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                               TVariantInParam Criteria/*[in,opt]*/, 
                                               TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DFirst(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                    TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DCount(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                               TVariantInParam Criteria/*[in,opt]*/, 
                                               TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DCount(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                                    TVariantInParam Criteria/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Eval(BSTR StringExpr/*[in]*/, TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall Eval(BSTR StringExpr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CurrentUser(BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall CurrentUser(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DDEInitiate(BSTR Application/*[in]*/, BSTR Topic/*[in]*/, 
                                                    TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall DDEInitiate(BSTR Application/*[in]*/, BSTR Topic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DDEExecute(TVariantInParam ChanNum/*[in]*/, 
                                                   BSTR Command/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DDEPoke(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/, 
                                                BSTR Data/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DDERequest(TVariantInParam ChanNum/*[in]*/, 
                                                   BSTR Item/*[in]*/, BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall DDERequest(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DDETerminate(TVariantInParam ChanNum/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DDETerminateAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DBEngine(Dao_97::DBEnginePtr* pRet/*[out,retval]*/);
  Dao_97::DBEnginePtr __fastcall get_DBEngine(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CurrentDb(Dao_97::DatabasePtr* pRet/*[out,retval]*/);
  Dao_97::DatabasePtr __fastcall CurrentDb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CodeDb(Dao_97::DatabasePtr* pRet/*[out,retval]*/);
  Dao_97::DatabasePtr __fastcall CodeDb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginUndoable(long Hwnd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetUndoRecording(short yesno/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BuildCriteria(BSTR Field/*[in]*/, short FieldType/*[in]*/, 
                                                      BSTR Expression/*[in]*/, 
                                                      BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall BuildCriteria(BSTR Field/*[in]*/, short FieldType/*[in]*/, 
                                           BSTR Expression/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertText(BSTR Text/*[in]*/, BSTR ModuleName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReloadAddIns();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DefaultWorkspaceClone(Dao_97::WorkspacePtr* pRet/*[out,retval]*/);
  Dao_97::WorkspacePtr __fastcall DefaultWorkspaceClone(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RefreshTitleBar();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddAutoCorrect(BSTR ChangeFrom/*[in]*/, 
                                                       BSTR ChangeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DelAutoCorrect(BSTR ChangeFrom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall hWndAccessApp(int* phWndAccessAppWnd/*[out,retval]*/);
  int             __fastcall hWndAccessApp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Run(BSTR Procedure/*[in]*/, TVariant* Arg1/*[in,out,opt]*/, 
                                            TVariant* Arg2/*[in,out,opt]*/, 
                                            TVariant* Arg3/*[in,out,opt]*/, 
                                            TVariant* Arg4/*[in,out,opt]*/, 
                                            TVariant* Arg5/*[in,out,opt]*/, 
                                            TVariant* Arg6/*[in,out,opt]*/, 
                                            TVariant* Arg7/*[in,out,opt]*/, 
                                            TVariant* Arg8/*[in,out,opt]*/, 
                                            TVariant* Arg9/*[in,out,opt]*/, 
                                            TVariant* Arg10/*[in,out,opt]*/, 
                                            TVariant* Arg11/*[in,out,opt]*/, 
                                            TVariant* Arg12/*[in,out,opt]*/, 
                                            TVariant* Arg13/*[in,out,opt]*/, 
                                            TVariant* Arg14/*[in,out,opt]*/, 
                                            TVariant* Arg15/*[in,out,opt]*/, 
                                            TVariant* Arg16/*[in,out,opt]*/, 
                                            TVariant* Arg17/*[in,out,opt]*/, 
                                            TVariant* Arg18/*[in,out,opt]*/, 
                                            TVariant* Arg19/*[in,out,opt]*/, 
                                            TVariant* Arg20/*[in,out,opt]*/, 
                                            TVariant* Arg21/*[in,out,opt]*/, 
                                            TVariant* Arg22/*[in,out,opt]*/, 
                                            TVariant* Arg23/*[in,out,opt]*/, 
                                            TVariant* Arg24/*[in,out,opt]*/, 
                                            TVariant* Arg25/*[in,out,opt]*/, 
                                            TVariant* Arg26/*[in,out,opt]*/, 
                                            TVariant* Arg27/*[in,out,opt]*/, 
                                            TVariant* Arg28/*[in,out,opt]*/, 
                                            TVariant* Arg29/*[in,out,opt]*/, 
                                            TVariant* Arg30/*[in,out,opt]*/, 
                                            TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall Run(BSTR Procedure/*[in]*/, TVariant* Arg1/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg2/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg3/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg4/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg5/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg6/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg7/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg8/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg9/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg10/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg11/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg12/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg13/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg14/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg15/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg16/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg17/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg18/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg19/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg20/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg21/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg22/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg23/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg24/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg25/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg26/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg27/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg28/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg29/*[in,out,opt]*/= TNoParam(), 
                                 TVariant* Arg30/*[in,out,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Nz(TVariantInParam Value/*[in]*/, 
                                           TVariantInParam ValueIfNull/*[in,opt]*/, 
                                           TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall Nz(TVariantInParam Value/*[in]*/, 
                                TVariantInParam ValueIfNull/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LoadPicture(BSTR FileName/*[in]*/, 
                                                    LPDISPATCH* pRet/*[out,retval]*/);
  LPDISPATCH      __fastcall LoadPicture(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReplaceModule(long objtyp/*[in]*/, BSTR ModuleName/*[in]*/, 
                                                      BSTR FileName/*[in]*/, long token/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AccessError(TVariantInParam ErrorNumber/*[in]*/, 
                                                    TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall AccessError(TVariantInParam ErrorNumber/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BuilderString(TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall BuilderString(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall StringFromGUID(TVariantInParam Guid/*[in]*/, 
                                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall StringFromGUID(TVariantInParam Guid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GUIDFromString(TVariantInParam String/*[in]*/, 
                                                       TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall GUIDFromString(TVariantInParam String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AppLoadString(long id/*[in]*/, 
                                                      TVariant* pRet/*[out,retval]*/);
  TVariant        __fastcall AppLoadString(long id/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_97::CommandBarsPtr* pRet/*[out,retval]*/);
  Office_97::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Assistant(Office_97::AssistantPtr* pRet/*[out,retval]*/);
  Office_97::AssistantPtr __fastcall get_Assistant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FollowHyperlink(BSTR Address/*[in]*/, 
                                                        BSTR SubAddress/*[in,def,opt]*/, 
                                                        TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                                        TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                                        TVariantInParam ExtraInfo/*[in,opt]*/, 
                                                        Office_97::MsoExtraInfoMethod Method/*[in,def,opt]*/
                                                        , BSTR HeaderInfo/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveAsText(long ObjectType/*[in]*/, BSTR ObjectName/*[in]*/
                                                   , BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LoadFromText(long ObjectType/*[in]*/, 
                                                     BSTR ObjectName/*[in]*/, BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddToFavorites();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RefreshDatabaseWindow();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_References(Access_97::AccessReferencesPtr* pRet/*[out,retval]*/);
  Access_97::AccessReferencesPtr __fastcall get_References(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Modules(Access_97::ModulesPtr* pRet/*[out,retval]*/);
  Access_97::ModulesPtr __fastcall get_Modules(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileSearch(Office_97::FileSearchPtr* pRet/*[out,retval]*/);
  Office_97::FileSearchPtr __fastcall get_FileSearch(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsCompiled(TOLEBOOL* pfCompiled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsCompiled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RunCommand(Access_97::AcCommand Command/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall HyperlinkPart(TVariantInParam Hyperlink/*[in]*/, 
                                                      Access_97::AcHyperlinkPart Part/*[in,def,opt]*/
                                                      , BSTR* pRet/*[out,retval]*/);
  BSTR            __fastcall HyperlinkPart(TVariantInParam Hyperlink/*[in]*/, 
                                           Access_97::AcHyperlinkPart Part/*[in,def,opt]*/);

  __property   Access_97::AccessApplicationPtr Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      CodeContextObject = {read = get_CodeContextObject};
  __property   BSTR            MenuBar = {read = get_MenuBar, write = set_MenuBar};
  __property   long            CurrentObjectType = {read = get_CurrentObjectType};
  __property   BSTR            CurrentObjectName = {read = get_CurrentObjectName};
  __property   Access_97::Forms_Ptr Forms = {read = get_Forms};
  __property   Access_97::ReportsPtr Reports = {read = get_Reports};
  __property   Access_97::ScreenPtr Screen = {read = get_Screen};
  __property   Access_97::IDoCmdPtr DoCmd = {read = get_DoCmd};
  __property   BSTR            ShortcutMenuBar = {read = get_ShortcutMenuBar, write = set_ShortcutMenuBar};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        UserControl = {read = get_UserControl, write = set_UserControl};
  __property   Dao_97::DBEnginePtr DBEngine = {read = get_DBEngine};
  __property   Office_97::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Office_97::AssistantPtr Assistant = {read = get_Assistant};
  __property   Access_97::AccessReferencesPtr References = {read = get_References};
  __property   Access_97::ModulesPtr Modules = {read = get_Modules};
  __property   Office_97::FileSearchPtr FileSearch = {read = get_FileSearch};
  __property   TOLEBOOL        IsCompiled = {read = get_IsCompiled};
};
typedef _ApplicationDispT<_Application> _ApplicationDisp;

typedef TComInterface<Reference>  TCOMReference;

// *********************************************************************//
// DispIntf:  Reference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB106212-9C89-11CF-A2B3-00A0C90542FF}
// *********************************************************************//
template<class T>
class ReferenceDispT : public TAutoDriver<Reference>
{
public:
  ReferenceDispT(){}

  ReferenceDispT(Reference *pintf)
  {
    TAutoDriver<Reference>::Bind(pintf, false);
  }

  ReferenceDispT(ReferencePtr pintf)
  {
    TAutoDriver<Reference>::Bind(pintf, true);
  }

  ReferenceDispT& operator=(Reference *pintf)
  {
    TAutoDriver<Reference>::Bind(pintf, false);
    return *this;
  }

  ReferenceDispT& operator=(ReferencePtr pintf)
  {
    TAutoDriver<Reference>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Collection(Access_97::AccessReferencesPtr* retval/*[out,retval]*/);
  Access_97::AccessReferencesPtr __fastcall get_Collection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Guid(BSTR* pbstrGuid/*[out,retval]*/);
  BSTR            __fastcall get_Guid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Major(long* pMajor/*[out,retval]*/);
  long            __fastcall get_Major(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Minor(long* pMinor/*[out,retval]*/);
  long            __fastcall get_Minor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FullPath(BSTR* pbstrFullPath/*[out,retval]*/);
  BSTR            __fastcall get_FullPath(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(TOLEBOOL* pfBuiltIn/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsBroken(TOLEBOOL* pfIsBroken/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsBroken(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Kind(Access_97::RefKind* pKind/*[out,retval]*/);
  Access_97::RefKind __fastcall get_Kind(void);

  __property   Access_97::AccessReferencesPtr Collection = {read = get_Collection};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Guid = {read = get_Guid};
  __property   long            Major = {read = get_Major};
  __property   long            Minor = {read = get_Minor};
  __property   BSTR            FullPath = {read = get_FullPath};
  __property   TOLEBOOL        BuiltIn = {read = get_BuiltIn};
  __property   TOLEBOOL        IsBroken = {read = get_IsBroken};
  __property   Access_97::RefKind Kind = {read = get_Kind};
};
typedef ReferenceDispT<Reference> ReferenceDisp;

// *********************************************************************//
// SmartIntf: TCOM_References
// Interface: _References
// *********************************************************************//
template <class T /* _References */ >
class TCOM_ReferencesT : public TComInterface<_References>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ReferencesT() {}
  TCOM_ReferencesT(_References *intf, bool addRef = false) : TComInterface<_References>(intf, addRef) {}
  TCOM_ReferencesT(const TCOM_ReferencesT& src) : TComInterface<_References>(src) {}
  TCOM_ReferencesT& operator=(const TCOM_ReferencesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Parent(LPDISPATCH* retval/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT         __fastcall Item(TVariantInParam var/*[in]*/, 
                                  Access_97::ReferencePtr* Reference/*[out,retval]*/);
  Access_97::ReferencePtr __fastcall Item(TVariantInParam var/*[in]*/);
  HRESULT         __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/, 
                                         Access_97::ReferencePtr* Reference/*[out,retval]*/);
  Access_97::ReferencePtr __fastcall AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, 
                                                 long Minor/*[in]*/);
  HRESULT         __fastcall AddFromFile(BSTR FileName/*[in]*/, 
                                         Access_97::ReferencePtr* Reference/*[out,retval]*/);
  Access_97::ReferencePtr __fastcall AddFromFile(BSTR FileName/*[in]*/);
  HRESULT         __fastcall Remove(Access_97::ReferencePtr Reference/*[in]*/);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef TCOM_ReferencesT<_References> TCOM_References;

// *********************************************************************//
// DispIntf:  _References
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB106213-9C89-11CF-A2B3-00A0C90542FF}
// *********************************************************************//
template<class T>
class _ReferencesDispT : public TAutoDriver<_References>
{
public:
  _ReferencesDispT(){}

  _ReferencesDispT(_References *pintf)
  {
    TAutoDriver<_References>::Bind(pintf, false);
  }

  _ReferencesDispT(_ReferencesPtr pintf)
  {
    TAutoDriver<_References>::Bind(pintf, true);
  }

  _ReferencesDispT& operator=(_References *pintf)
  {
    TAutoDriver<_References>::Bind(pintf, false);
    return *this;
  }

  _ReferencesDispT& operator=(_ReferencesPtr pintf)
  {
    TAutoDriver<_References>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AccessReferences));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AccessReferences);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* retval/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam var/*[in]*/, 
                                             Access_97::ReferencePtr* Reference/*[out,retval]*/);
  Access_97::ReferencePtr __fastcall Item(TVariantInParam var/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, 
                                                    long Minor/*[in]*/, 
                                                    Access_97::ReferencePtr* Reference/*[out,retval]*/);
  Access_97::ReferencePtr __fastcall AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, 
                                                 long Minor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFromFile(BSTR FileName/*[in]*/, 
                                                    Access_97::ReferencePtr* Reference/*[out,retval]*/);
  Access_97::ReferencePtr __fastcall AddFromFile(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(Access_97::ReferencePtr Reference/*[in]*/);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
};
typedef _ReferencesDispT<_References> _ReferencesDisp;

// *********************************************************************//
// DispIntf:  _References_Events
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {F163F201-ADA2-11CF-89A9-00A0C9054129}
// *********************************************************************//
template <class T>
class _References_EventsDispT : public TAutoDriver<_References_Events>
{
public:
  _References_EventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Access_97::ReferencePtr Reference);
  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Access_97::ReferencePtr Reference);

};
typedef _References_EventsDispT<_References_Events> _References_EventsDisp;

// *********************************************************************//
// SmartIntf: TCOM_Dummy
// Interface: _Dummy
// *********************************************************************//
template <class T /* _Dummy */ >
class TCOM_DummyT : public TComInterface<_Dummy>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DummyT() {}
  TCOM_DummyT(_Dummy *intf, bool addRef = false) : TComInterface<_Dummy>(intf, addRef) {}
  TCOM_DummyT(const TCOM_DummyT& src) : TComInterface<_Dummy>(src) {}
  TCOM_DummyT& operator=(const TCOM_DummyT& src) { Bind(src, true); return *this;}


};
typedef TCOM_DummyT<_Dummy> TCOM_Dummy;

// *********************************************************************//
// DispIntf:  _Dummy
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B06E320-B23C-11CF-89A8-00A0C9054129}
// *********************************************************************//
template<class T>
class _DummyDispT : public TAutoDriver<_Dummy>
{
public:
  _DummyDispT(){}

  _DummyDispT(_Dummy *pintf)
  {
    TAutoDriver<_Dummy>::Bind(pintf, false);
  }

  _DummyDispT(_DummyPtr pintf)
  {
    TAutoDriver<_Dummy>::Bind(pintf, true);
  }

  _DummyDispT& operator=(_Dummy *pintf)
  {
    TAutoDriver<_Dummy>::Bind(pintf, false);
    return *this;
  }

  _DummyDispT& operator=(_DummyPtr pintf)
  {
    TAutoDriver<_Dummy>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Class));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Class);
  }


};
typedef _DummyDispT<_Dummy> _DummyDisp;

typedef TComInterface<_DummyEvents>  TCOM_DummyEvents;

// *********************************************************************//
// SmartIntf: TCOM___IVbaModule
// Interface: ___IVbaModule
// *********************************************************************//
template <class T /* ___IVbaModule */ >
class TCOM___IVbaModuleT : public TComInterface<___IVbaModule>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM___IVbaModuleT() {}
  TCOM___IVbaModuleT(___IVbaModule *intf, bool addRef = false) : TComInterface<___IVbaModule>(intf, addRef) {}
  TCOM___IVbaModuleT(const TCOM___IVbaModuleT& src) : TComInterface<___IVbaModule>(src) {}
  TCOM___IVbaModuleT& operator=(const TCOM___IVbaModuleT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Parent(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Parent(void);
  HRESULT         __fastcall get_VBA(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_VBA(void);
  HRESULT         __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT         __fastcall AddFromString(BSTR String/*[in]*/);
  HRESULT         __fastcall AddFromFile(BSTR FileName/*[in]*/);
  HRESULT         __fastcall get_Lines(long Line/*[in]*/, long cLine/*[in]*/, 
                                       BSTR* String/*[out,retval]*/);
  BSTR            __fastcall get_Lines(long Line/*[in]*/, long cLine/*[in]*/);
  HRESULT         __fastcall get_CountOfLines(long* CountOfLines/*[out,retval]*/);
  long            __fastcall get_CountOfLines(void);
  HRESULT         __fastcall InsertLines(long Line/*[in]*/, BSTR String/*[in]*/);
  HRESULT         __fastcall DeleteLines(long StartLine/*[in]*/, long Count/*[in]*/);
  HRESULT         __fastcall ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/);
  HRESULT         __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                               Access_97::___ProcKind ProcKind/*[in]*/, 
                                               long* ProcStartLine/*[out,retval]*/);
  long            __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                               Access_97::___ProcKind ProcKind/*[in]*/);
  HRESULT         __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                Access_97::___ProcKind ProcKind/*[in]*/, 
                                                long* ProcCountLines/*[out,retval]*/);
  long            __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                Access_97::___ProcKind ProcKind/*[in]*/);
  HRESULT         __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                              Access_97::___ProcKind ProcKind/*[in]*/, 
                                              long* ProcBodyLine/*[out,retval]*/);
  long            __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                              Access_97::___ProcKind ProcKind/*[in]*/);
  HRESULT         __fastcall get_ProcOfLine(long Line/*[in]*/, 
                                            Access_97::___ProcKind* pprockind/*[out]*/, 
                                            BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_ProcOfLine(long Line/*[in]*/, 
                                            Access_97::___ProcKind* pprockind/*[out]*/);
  HRESULT         __fastcall get_DeclCountOfLines(long* pDeclCountOfLines/*[out,retval]*/);
  long            __fastcall get_DeclCountOfLines(void);
  HRESULT         __fastcall CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/, 
                                             long* Line/*[out,retval]*/);
  long            __fastcall CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/);
  HRESULT         __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                  long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                                  long* EndColumn/*[in,out]*/, TOLEBOOL WholeWord/*[in,def,opt]*/, 
                                  TOLEBOOL MatchCase/*[in,def,opt]*/, 
                                  TOLEBOOL PatternSearch/*[in,def,opt]*/, 
                                  TOLEBOOL* pfFound/*[out,retval]*/);
  TOLEBOOL        __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                  long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                                  long* EndColumn/*[in,out]*/, TOLEBOOL WholeWord/*[in,def,opt]*/, 
                                  TOLEBOOL MatchCase/*[in,def,opt]*/, 
                                  TOLEBOOL PatternSearch/*[in,def,opt]*/);
  HRESULT         __fastcall get_GetEditor(Access_97::___EditorPtr* ___Editor/*[out,retval]*/);
  Access_97::___EditorPtr __fastcall get_GetEditor(void);

  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            CountOfLines = {read = get_CountOfLines};
  __property   long            DeclCountOfLines = {read = get_DeclCountOfLines};
  __property   Access_97::___EditorPtr GetEditor = {read = get_GetEditor};
};
typedef TCOM___IVbaModuleT<___IVbaModule> TCOM___IVbaModule;

// *********************************************************************//
// DispIntf:  ___IVbaModule
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E16E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ___IVbaModuleDispT : public TAutoDriver<___IVbaModule>
{
public:
  ___IVbaModuleDispT(){}

  ___IVbaModuleDispT(___IVbaModule *pintf)
  {
    TAutoDriver<___IVbaModule>::Bind(pintf, false);
  }

  ___IVbaModuleDispT(___IVbaModulePtr pintf)
  {
    TAutoDriver<___IVbaModule>::Bind(pintf, true);
  }

  ___IVbaModuleDispT& operator=(___IVbaModule *pintf)
  {
    TAutoDriver<___IVbaModule>::Bind(pintf, false);
    return *this;
  }

  ___IVbaModuleDispT& operator=(___IVbaModulePtr pintf)
  {
    TAutoDriver<___IVbaModule>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID____CodeModule));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID____CodeModule);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBA(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_VBA(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFromString(BSTR String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddFromFile(BSTR FileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Lines(long Line/*[in]*/, long cLine/*[in]*/, 
                                                  BSTR* String/*[out,retval]*/);
  BSTR            __fastcall get_Lines(long Line/*[in]*/, long cLine/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CountOfLines(long* CountOfLines/*[out,retval]*/);
  long            __fastcall get_CountOfLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall InsertLines(long Line/*[in]*/, BSTR String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DeleteLines(long StartLine/*[in]*/, long Count/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                                          Access_97::___ProcKind ProcKind/*[in]*/, 
                                                          long* ProcStartLine/*[out,retval]*/);
  long            __fastcall get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                               Access_97::___ProcKind ProcKind/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                           Access_97::___ProcKind ProcKind/*[in]*/, 
                                                           long* ProcCountLines/*[out,retval]*/);
  long            __fastcall get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                                Access_97::___ProcKind ProcKind/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                                         Access_97::___ProcKind ProcKind/*[in]*/, 
                                                         long* ProcBodyLine/*[out,retval]*/);
  long            __fastcall get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                              Access_97::___ProcKind ProcKind/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProcOfLine(long Line/*[in]*/, 
                                                       Access_97::___ProcKind* pprockind/*[out]*/, 
                                                       BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_ProcOfLine(long Line/*[in]*/, 
                                            Access_97::___ProcKind* pprockind/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DeclCountOfLines(long* pDeclCountOfLines/*[out,retval]*/);
  long            __fastcall get_DeclCountOfLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateEventProc(BSTR EventName/*[in]*/, 
                                                        BSTR ObjectName/*[in]*/, 
                                                        long* Line/*[out,retval]*/);
  long            __fastcall CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                             long* StartColumn/*[in,out]*/, 
                                             long* EndLine/*[in,out]*/, long* EndColumn/*[in,out]*/
                                             , TOLEBOOL WholeWord/*[in,def,opt]*/, 
                                             TOLEBOOL MatchCase/*[in,def,opt]*/, 
                                             TOLEBOOL PatternSearch/*[in,def,opt]*/, 
                                             TOLEBOOL* pfFound/*[out,retval]*/);
  TOLEBOOL        __fastcall Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                                  long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                                  long* EndColumn/*[in,out]*/, TOLEBOOL WholeWord/*[in,def,opt]*/, 
                                  TOLEBOOL MatchCase/*[in,def,opt]*/, 
                                  TOLEBOOL PatternSearch/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GetEditor(Access_97::___EditorPtr* ___Editor/*[out,retval]*/);
  Access_97::___EditorPtr __fastcall get_GetEditor(void);

  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   BSTR            Name = {read = get_Name, write = set_Name};
  __property   long            CountOfLines = {read = get_CountOfLines};
  __property   long            DeclCountOfLines = {read = get_DeclCountOfLines};
  __property   Access_97::___EditorPtr GetEditor = {read = get_GetEditor};
};
typedef ___IVbaModuleDispT<___IVbaModule> ___IVbaModuleDisp;

// *********************************************************************//
// SmartIntf: TCOM___IVbaEditors
// Interface: ___IVbaEditors
// *********************************************************************//
template <class T /* ___IVbaEditors */ >
class TCOM___IVbaEditorsT : public TComInterface<___IVbaEditors>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM___IVbaEditorsT() {}
  TCOM___IVbaEditorsT(___IVbaEditors *intf, bool addRef = false) : TComInterface<___IVbaEditors>(intf, addRef) {}
  TCOM___IVbaEditorsT(const TCOM___IVbaEditorsT& src) : TComInterface<___IVbaEditors>(src) {}
  TCOM___IVbaEditorsT& operator=(const TCOM___IVbaEditorsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Parent(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Parent(void);
  HRESULT         __fastcall get_VBA(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_VBA(void);
  HRESULT         __fastcall Item(TVariantInParam var/*[in]*/, 
                                  Access_97::___EditorPtr* ___Editor/*[out,retval]*/);
  Access_97::___EditorPtr __fastcall Item(TVariantInParam var/*[in]*/);
  HRESULT         __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall get_Current(Access_97::___EditorPtr* ___Editor/*[out,retval]*/);
  Access_97::___EditorPtr __fastcall get_Current(void);
  HRESULT         __fastcall set_Current(Access_97::___EditorPtr ___Editor/*[in]*/);

  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   long            Count = {read = get_Count};
  __property   Access_97::___EditorPtr Current = {read = get_Current, write = set_Current};
};
typedef TCOM___IVbaEditorsT<___IVbaEditors> TCOM___IVbaEditors;

// *********************************************************************//
// DispIntf:  ___IVbaEditors
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E172-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ___IVbaEditorsDispT : public TAutoDriver<___IVbaEditors>
{
public:
  ___IVbaEditorsDispT(){}

  ___IVbaEditorsDispT(___IVbaEditors *pintf)
  {
    TAutoDriver<___IVbaEditors>::Bind(pintf, false);
  }

  ___IVbaEditorsDispT(___IVbaEditorsPtr pintf)
  {
    TAutoDriver<___IVbaEditors>::Bind(pintf, true);
  }

  ___IVbaEditorsDispT& operator=(___IVbaEditors *pintf)
  {
    TAutoDriver<___IVbaEditors>::Bind(pintf, false);
    return *this;
  }

  ___IVbaEditorsDispT& operator=(___IVbaEditorsPtr pintf)
  {
    TAutoDriver<___IVbaEditors>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID____Editors));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID____Editors);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBA(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_VBA(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam var/*[in]*/, 
                                             Access_97::___EditorPtr* ___Editor/*[out,retval]*/);
  Access_97::___EditorPtr __fastcall Item(TVariantInParam var/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Current(Access_97::___EditorPtr* ___Editor/*[out,retval]*/);
  Access_97::___EditorPtr __fastcall get_Current(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Current(Access_97::___EditorPtr ___Editor/*[in]*/);

  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   long            Count = {read = get_Count};
  __property   Access_97::___EditorPtr Current = {read = get_Current, write = set_Current};
};
typedef ___IVbaEditorsDispT<___IVbaEditors> ___IVbaEditorsDisp;

// *********************************************************************//
// SmartIntf: TCOM___IVbaEditor
// Interface: ___IVbaEditor
// *********************************************************************//
template <class T /* ___IVbaEditor */ >
class TCOM___IVbaEditorT : public TComInterface<___IVbaEditor>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM___IVbaEditorT() {}
  TCOM___IVbaEditorT(___IVbaEditor *intf, bool addRef = false) : TComInterface<___IVbaEditor>(intf, addRef) {}
  TCOM___IVbaEditorT(const TCOM___IVbaEditorT& src) : TComInterface<___IVbaEditor>(src) {}
  TCOM___IVbaEditorT& operator=(const TCOM___IVbaEditorT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Parent(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Parent(void);
  HRESULT         __fastcall get_VBA(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_VBA(void);
  HRESULT         __fastcall get_Window(LPDISPATCH* retval/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Window(void);
  HRESULT         __fastcall GetSelection(long* StartLine/*[out]*/, long* StartColumn/*[out]*/, 
                                          long* EndLine/*[out]*/, long* EndColumn/*[out]*/);
  HRESULT         __fastcall SetSelection(long StartLine/*[in]*/, long StartColumn/*[in]*/, 
                                          long EndLine/*[in]*/, long EndColumn/*[in]*/);
  HRESULT         __fastcall get_TopLine(long* TopLine/*[out,retval]*/);
  long            __fastcall get_TopLine(void);
  HRESULT         __fastcall set_TopLine(long TopLine/*[in]*/);
  HRESULT         __fastcall get_CountOfVisibleLines(long* CountOfVisibleLines/*[out,retval]*/);
  long            __fastcall get_CountOfVisibleLines(void);
  HRESULT         __fastcall get____CodeModule(Access_97::___CodeModulePtr* ___CodeModule/*[out,retval]*/);
  Access_97::___CodeModulePtr __fastcall get____CodeModule(void);
  HRESULT         __fastcall Show(void);
  HRESULT         __fastcall get_CodePaneView(Access_97::___vbext_CodePaneview* pCodePaneview/*[out,retval]*/);
  Access_97::___vbext_CodePaneview __fastcall get_CodePaneView(void);

  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   LPDISPATCH      Window = {read = get_Window};
  __property   long            TopLine = {read = get_TopLine, write = set_TopLine};
  __property   long            CountOfVisibleLines = {read = get_CountOfVisibleLines};
  __property   Access_97::___CodeModulePtr ___CodeModule = {read = get____CodeModule};
  __property   Access_97::___vbext_CodePaneview CodePaneView = {read = get_CodePaneView};
};
typedef TCOM___IVbaEditorT<___IVbaEditor> TCOM___IVbaEditor;

// *********************************************************************//
// DispIntf:  ___IVbaEditor
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E176-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ___IVbaEditorDispT : public TAutoDriver<___IVbaEditor>
{
public:
  ___IVbaEditorDispT(){}

  ___IVbaEditorDispT(___IVbaEditor *pintf)
  {
    TAutoDriver<___IVbaEditor>::Bind(pintf, false);
  }

  ___IVbaEditorDispT(___IVbaEditorPtr pintf)
  {
    TAutoDriver<___IVbaEditor>::Bind(pintf, true);
  }

  ___IVbaEditorDispT& operator=(___IVbaEditor *pintf)
  {
    TAutoDriver<___IVbaEditor>::Bind(pintf, false);
    return *this;
  }

  ___IVbaEditorDispT& operator=(___IVbaEditorPtr pintf)
  {
    TAutoDriver<___IVbaEditor>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID____Editor));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID____Editor);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBA(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_VBA(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Window(LPDISPATCH* retval/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Window(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetSelection(long* StartLine/*[out]*/, 
                                                     long* StartColumn/*[out]*/, 
                                                     long* EndLine/*[out]*/, 
                                                     long* EndColumn/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetSelection(long StartLine/*[in]*/, 
                                                     long StartColumn/*[in]*/, long EndLine/*[in]*/
                                                     , long EndColumn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TopLine(long* TopLine/*[out,retval]*/);
  long            __fastcall get_TopLine(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TopLine(long TopLine/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CountOfVisibleLines(long* CountOfVisibleLines/*[out,retval]*/);
  long            __fastcall get_CountOfVisibleLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get____CodeModule(Access_97::___CodeModulePtr* ___CodeModule/*[out,retval]*/);
  Access_97::___CodeModulePtr __fastcall get____CodeModule(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Show();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CodePaneView(Access_97::___vbext_CodePaneview* pCodePaneview/*[out,retval]*/);
  Access_97::___vbext_CodePaneview __fastcall get_CodePaneView(void);

  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   LPDISPATCH      Window = {read = get_Window};
  __property   long            TopLine = {read = get_TopLine, write = set_TopLine};
  __property   long            CountOfVisibleLines = {read = get_CountOfVisibleLines};
  __property   Access_97::___CodeModulePtr ___CodeModule = {read = get____CodeModule};
  __property   Access_97::___vbext_CodePaneview CodePaneView = {read = get_CodePaneView};
};
typedef ___IVbaEditorDispT<___IVbaEditor> ___IVbaEditorDisp;

// *********************************************************************//
// SmartIntf: TCOMIVbaReferences
// Interface: IVbaReferences
// *********************************************************************//
template <class T /* IVbaReferences */ >
class TCOMIVbaReferencesT : public TComInterface<IVbaReferences>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIVbaReferencesT() {}
  TCOMIVbaReferencesT(IVbaReferences *intf, bool addRef = false) : TComInterface<IVbaReferences>(intf, addRef) {}
  TCOMIVbaReferencesT(const TCOMIVbaReferencesT& src) : TComInterface<IVbaReferences>(src) {}
  TCOMIVbaReferencesT& operator=(const TCOMIVbaReferencesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Parent(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Parent(void);
  HRESULT         __fastcall get_VBA(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_VBA(void);
  HRESULT         __fastcall Item(TVariantInParam var/*[in]*/, 
                                  Access_97::___ReferencePtr* ___Reference/*[out,retval]*/);
  Access_97::___ReferencePtr __fastcall Item(TVariantInParam var/*[in]*/);
  HRESULT         __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall CreateFromGuid(BSTR bstrGuid/*[in]*/, long Major/*[in]*/, 
                                            long Minor/*[in]*/, 
                                            Access_97::___ReferencePtr* ___Reference/*[out,retval]*/);
  Access_97::___ReferencePtr __fastcall CreateFromGuid(BSTR bstrGuid/*[in]*/, long Major/*[in]*/, 
                                                       long Minor/*[in]*/);
  HRESULT         __fastcall CreateFromFile(BSTR bstrFileName/*[in]*/, 
                                            Access_97::___ReferencePtr* ___Reference/*[out,retval]*/);
  Access_97::___ReferencePtr __fastcall CreateFromFile(BSTR bstrFileName/*[in]*/);
  HRESULT         __fastcall Remove(Access_97::___ReferencePtr ___Reference/*[in]*/);

  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   long            Count = {read = get_Count};
};
typedef TCOMIVbaReferencesT<IVbaReferences> TCOMIVbaReferences;

// *********************************************************************//
// DispIntf:  IVbaReferences
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17A-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IVbaReferencesDispT : public TAutoDriver<IVbaReferences>
{
public:
  IVbaReferencesDispT(){}

  IVbaReferencesDispT(IVbaReferences *pintf)
  {
    TAutoDriver<IVbaReferences>::Bind(pintf, false);
  }

  IVbaReferencesDispT(IVbaReferencesPtr pintf)
  {
    TAutoDriver<IVbaReferences>::Bind(pintf, true);
  }

  IVbaReferencesDispT& operator=(IVbaReferences *pintf)
  {
    TAutoDriver<IVbaReferences>::Bind(pintf, false);
    return *this;
  }

  IVbaReferencesDispT& operator=(IVbaReferencesPtr pintf)
  {
    TAutoDriver<IVbaReferences>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID____References));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID____References);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBA(LPUNKNOWN* retval/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_VBA(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(TVariantInParam var/*[in]*/, 
                                             Access_97::___ReferencePtr* ___Reference/*[out,retval]*/);
  Access_97::___ReferencePtr __fastcall Item(TVariantInParam var/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* Count/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateFromGuid(BSTR bstrGuid/*[in]*/, long Major/*[in]*/, 
                                                       long Minor/*[in]*/, 
                                                       Access_97::___ReferencePtr* ___Reference/*[out,retval]*/);
  Access_97::___ReferencePtr __fastcall CreateFromGuid(BSTR bstrGuid/*[in]*/, long Major/*[in]*/, 
                                                       long Minor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateFromFile(BSTR bstrFileName/*[in]*/, 
                                                       Access_97::___ReferencePtr* ___Reference/*[out,retval]*/);
  Access_97::___ReferencePtr __fastcall CreateFromFile(BSTR bstrFileName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(Access_97::___ReferencePtr ___Reference/*[in]*/);

  __property   LPUNKNOWN       Parent = {read = get_Parent};
  __property   LPUNKNOWN       VBA = {read = get_VBA};
  __property   long            Count = {read = get_Count};
};
typedef IVbaReferencesDispT<IVbaReferences> IVbaReferencesDisp;

typedef TComInterface<___Reference>  TCOM___Reference;

// *********************************************************************//
// DispIntf:  ___Reference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ___ReferenceDispT : public TAutoDriver<___Reference>
{
public:
  ___ReferenceDispT(){}

  ___ReferenceDispT(___Reference *pintf)
  {
    TAutoDriver<___Reference>::Bind(pintf, false);
  }

  ___ReferenceDispT(___ReferencePtr pintf)
  {
    TAutoDriver<___Reference>::Bind(pintf, true);
  }

  ___ReferenceDispT& operator=(___Reference *pintf)
  {
    TAutoDriver<___Reference>::Bind(pintf, false);
    return *this;
  }

  ___ReferenceDispT& operator=(___ReferencePtr pintf)
  {
    TAutoDriver<___Reference>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Collection(Access_97::IVbaReferencesPtr* retval/*[out,retval]*/);
  Access_97::IVbaReferencesPtr __fastcall get_Collection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBA(LPDISPATCH* retval/*[out,retval]*/);
  LPDISPATCH      __fastcall get_VBA(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Guid(BSTR* pbstrGuid/*[out,retval]*/);
  BSTR            __fastcall get_Guid(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Major(long* pMajor/*[out,retval]*/);
  long            __fastcall get_Major(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Minor(long* pMinor/*[out,retval]*/);
  long            __fastcall get_Minor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Location(BSTR* pbstrLocation/*[out,retval]*/);
  BSTR            __fastcall get_Location(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDefault(TOLEBOOL* pfIsDefault/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsDefault(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsBroken(TOLEBOOL* pfIsBroken/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsBroken(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Kind(Access_97::___RefKind* pKind/*[out,retval]*/);
  Access_97::___RefKind __fastcall get_Kind(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);

  __property   Access_97::IVbaReferencesPtr Collection = {read = get_Collection};
  __property   LPDISPATCH      VBA = {read = get_VBA};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Guid = {read = get_Guid};
  __property   long            Major = {read = get_Major};
  __property   long            Minor = {read = get_Minor};
  __property   BSTR            Location = {read = get_Location};
  __property   TOLEBOOL        IsDefault = {read = get_IsDefault};
  __property   TOLEBOOL        IsBroken = {read = get_IsBroken};
  __property   Access_97::___RefKind Kind = {read = get_Kind};
  __property   BSTR            Description = {read = get_Description};
};
typedef ___ReferenceDispT<___Reference> ___ReferenceDisp;

// *********************************************************************//
// DispIntf:  ___IVbaExtReferencesEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {CDDE3804-2064-11CF-867F-00AA005FF34A}
// *********************************************************************//
template <class T>
class ___IVbaExtReferencesEventsDispT : public TAutoDriver<___IVbaExtReferencesEvents>
{
public:
  ___IVbaExtReferencesEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall ItemAdded(Access_97::___ReferencePtr ___Reference);
  void /*[VT_VOID:0]*/ __fastcall ItemRemoved(Access_97::___ReferencePtr ___Reference);

};
typedef ___IVbaExtReferencesEventsDispT<___IVbaExtReferencesEvents> ___IVbaExtReferencesEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIDoCmd
// Interface: IDoCmd
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::AddMenu(TVariantInParam MenuName/*[in]*/, TVariantInParam MenuMacroName/*[in]*/, 
                        TVariantInParam StatusBarText/*[in]*/)
{
  return (*this)->AddMenu(MenuName, MenuMacroName, StatusBarText);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::ApplyFilter(TVariantInParam FilterName/*[in,opt]*/, 
                            TVariantInParam WhereCondition/*[in,opt]*/)
{
  return (*this)->ApplyFilter(FilterName, WhereCondition);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Beep(void)
{
  return (*this)->Beep();
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::CancelEvent(void)
{
  return (*this)->CancelEvent();
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Close(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                      TVariantInParam ObjectName/*[in,opt]*/, 
                      Access_97::AcCloseSave Save/*[in,def,opt]*/)
{
  return (*this)->Close(ObjectType, ObjectName, Save);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::CopyObject(TVariantInParam DestinationDatabase/*[in,opt]*/, 
                           TVariantInParam NewName/*[in,opt]*/, 
                           Access_97::AcObjectType SourceObjectType/*[in,def,opt]*/, 
                           TVariantInParam SourceObjectName/*[in,opt]*/)
{
  return (*this)->CopyObject(DestinationDatabase, NewName, SourceObjectType, SourceObjectName);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::DoMenuItem(TVariantInParam MenuBar/*[in]*/, TVariantInParam MenuName/*[in]*/, 
                           TVariantInParam Command/*[in]*/, TVariantInParam Subcommand/*[in,opt]*/, 
                           TVariantInParam Version/*[in,opt]*/)
{
  return (*this)->DoMenuItem(MenuBar, MenuName, Command, Subcommand, Version);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Echo(TVariantInParam EchoOn/*[in]*/, TVariantInParam StatusBarText/*[in,opt]*/)
{
  return (*this)->Echo(EchoOn, StatusBarText);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::FindNext(void)
{
  return (*this)->FindNext();
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::FindRecord(TVariantInParam FindWhat/*[in]*/, 
                           Access_97::AcFindMatch Match/*[in,def,opt]*/, 
                           TVariantInParam MatchCase/*[in,opt]*/, 
                           Access_97::AcSearchDirection Search/*[in,def,opt]*/, 
                           TVariantInParam SearchAsFormatted/*[in,opt]*/, 
                           Access_97::AcFindField OnlyCurrentField/*[in,def,opt]*/, 
                           TVariantInParam FindFirst/*[in,opt]*/)
{
  return (*this)->FindRecord(FindWhat, Match, MatchCase, Search, SearchAsFormatted, OnlyCurrentField, 
                             FindFirst);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::GoToControl(TVariantInParam ControlName/*[in]*/)
{
  return (*this)->GoToControl(ControlName);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::GoToPage(TVariantInParam PageNumber/*[in]*/, TVariantInParam Right/*[in,opt]*/, 
                         TVariantInParam Down/*[in,opt]*/)
{
  return (*this)->GoToPage(PageNumber, Right, Down);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::GoToRecord(Access_97::AcDataObjectType ObjectType/*[in,def,opt]*/, 
                           TVariantInParam ObjectName/*[in,opt]*/, 
                           Access_97::AcRecord Record/*[in,def,opt]*/, 
                           TVariantInParam Offset/*[in,opt]*/)
{
  return (*this)->GoToRecord(ObjectType, ObjectName, Record, Offset);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Hourglass(TVariantInParam HourglassOn/*[in]*/)
{
  return (*this)->Hourglass(HourglassOn);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Maximize(void)
{
  return (*this)->Maximize();
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Minimize(void)
{
  return (*this)->Minimize();
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::MoveSize(TVariantInParam Right/*[in,opt]*/, TVariantInParam Down/*[in,opt]*/, 
                         TVariantInParam Width/*[in,opt]*/, TVariantInParam Height/*[in,opt]*/)
{
  return (*this)->MoveSize(Right, Down, Width, Height);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::OpenForm(TVariantInParam FormName/*[in]*/, 
                         Access_97::AcFormView View/*[in,def,opt]*/, 
                         TVariantInParam FilterName/*[in,opt]*/, 
                         TVariantInParam WhereCondition/*[in,opt]*/, 
                         Access_97::AcFormOpenDataMode DataMode/*[in,def,opt]*/, 
                         Access_97::AcWindowMode WindowMode/*[in,def,opt]*/, 
                         TVariantInParam OpenArgs/*[in,opt]*/)
{
  return (*this)->OpenForm(FormName, View, FilterName, WhereCondition, DataMode, WindowMode, 
                           OpenArgs);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::OpenQuery(TVariantInParam QueryName/*[in]*/, Access_97::AcView View/*[in,def,opt]*/, 
                          Access_97::AcOpenDataMode DataMode/*[in,def,opt]*/)
{
  return (*this)->OpenQuery(QueryName, View, DataMode);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::OpenTable(TVariantInParam TableName/*[in]*/, Access_97::AcView View/*[in,def,opt]*/, 
                          Access_97::AcOpenDataMode DataMode/*[in,def,opt]*/)
{
  return (*this)->OpenTable(TableName, View, DataMode);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::PrintOut(Access_97::AcPrintRange PrintRange/*[in,def,opt]*/, 
                         TVariantInParam PageFrom/*[in,opt]*/, TVariantInParam PageTo/*[in,opt]*/, 
                         Access_97::AcPrintQuality PrintQuality/*[in,def,opt]*/, 
                         TVariantInParam Copies/*[in,opt]*/, 
                         TVariantInParam CollateCopies/*[in,opt]*/)
{
  return (*this)->PrintOut(PrintRange, PageFrom, PageTo, PrintQuality, Copies, CollateCopies);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Quit(Access_97::AcQuitOption Options/*[in,def,opt]*/)
{
  return (*this)->Quit(Options);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Requery(TVariantInParam ControlName/*[in,opt]*/)
{
  return (*this)->Requery(ControlName);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::RepaintObject(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                              TVariantInParam ObjectName/*[in,opt]*/)
{
  return (*this)->RepaintObject(ObjectType, ObjectName);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Rename(TVariantInParam NewName/*[in]*/, 
                       Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                       TVariantInParam OldName/*[in,opt]*/)
{
  return (*this)->Rename(NewName, ObjectType, OldName);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Restore(void)
{
  return (*this)->Restore();
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::RunMacro(TVariantInParam MacroName/*[in]*/, TVariantInParam RepeatCount/*[in,opt]*/, 
                         TVariantInParam RepeatExpression/*[in,opt]*/)
{
  return (*this)->RunMacro(MacroName, RepeatCount, RepeatExpression);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::RunSQL(TVariantInParam SQLStatement/*[in]*/, 
                       TVariantInParam UseTransaction/*[in,opt]*/)
{
  return (*this)->RunSQL(SQLStatement, UseTransaction);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::SelectObject(Access_97::AcObjectType ObjectType/*[in]*/, 
                             TVariantInParam ObjectName/*[in,opt]*/, 
                             TVariantInParam InDatabaseWindow/*[in,opt]*/)
{
  return (*this)->SelectObject(ObjectType, ObjectName, InDatabaseWindow);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::SetWarnings(TVariantInParam WarningsOn/*[in]*/)
{
  return (*this)->SetWarnings(WarningsOn);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::ShowAllRecords(void)
{
  return (*this)->ShowAllRecords();
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::OpenReport(TVariantInParam ReportName/*[in]*/, 
                           Access_97::AcView View/*[in,def,opt]*/, 
                           TVariantInParam FilterName/*[in,opt]*/, 
                           TVariantInParam WhereCondition/*[in,opt]*/)
{
  return (*this)->OpenReport(ReportName, View, FilterName, WhereCondition);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::TransferDatabase(Access_97::AcDataTransferType TransferType/*[in,def,opt]*/, 
                                 TVariantInParam DatabaseType/*[in,opt]*/, 
                                 TVariantInParam DatabaseName/*[in,opt]*/, 
                                 Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                 TVariantInParam Source/*[in,opt]*/, 
                                 TVariantInParam Destination/*[in,opt]*/, 
                                 TVariantInParam StructureOnly/*[in,opt]*/, 
                                 TVariantInParam StoreLogin/*[in,opt]*/)
{
  return (*this)->TransferDatabase(TransferType, DatabaseType, DatabaseName, ObjectType, Source, 
                                   Destination, StructureOnly, StoreLogin);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::TransferSpreadsheet(Access_97::AcDataTransferType TransferType/*[in,def,opt]*/, 
                                    Access_97::AcSpreadSheetType SpreadsheetType/*[in,def,opt]*/, 
                                    TVariantInParam TableName/*[in,opt]*/, 
                                    TVariantInParam FileName/*[in,opt]*/, 
                                    TVariantInParam HasFieldNames/*[in,opt]*/, 
                                    TVariantInParam Range/*[in,opt]*/, 
                                    TVariantInParam UseOA/*[in,opt]*/)
{
  return (*this)->TransferSpreadsheet(TransferType, SpreadsheetType, TableName, FileName, 
                                      HasFieldNames, Range, UseOA);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::TransferText(Access_97::AcTextTransferType TransferType/*[in,def,opt]*/, 
                             TVariantInParam SpecificationName/*[in,opt]*/, 
                             TVariantInParam TableName/*[in,opt]*/, 
                             TVariantInParam FileName/*[in,opt]*/, 
                             TVariantInParam HasFieldNames/*[in,opt]*/, 
                             TVariantInParam HTMLTableName/*[in,opt]*/)
{
  return (*this)->TransferText(TransferType, SpecificationName, TableName, FileName, HasFieldNames, 
                               HTMLTableName);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::OutputTo(Access_97::AcOutputObjectType ObjectType/*[in]*/, 
                         TVariantInParam ObjectName/*[in,opt]*/, 
                         TVariantInParam OutputFormat/*[in,opt]*/, 
                         TVariantInParam OutputFile/*[in,opt]*/, 
                         TVariantInParam AutoStart/*[in,opt]*/, 
                         TVariantInParam TemplateFile/*[in,opt]*/)
{
  return (*this)->OutputTo(ObjectType, ObjectName, OutputFormat, OutputFile, AutoStart, TemplateFile);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::DeleteObject(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                             TVariantInParam ObjectName/*[in,opt]*/)
{
  return (*this)->DeleteObject(ObjectType, ObjectName);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::OpenModule(TVariantInParam ModuleName/*[in,opt]*/, 
                           TVariantInParam ProcedureName/*[in,opt]*/)
{
  return (*this)->OpenModule(ModuleName, ProcedureName);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::SendObject(Access_97::AcSendObjectType ObjectType/*[in,def,opt]*/, 
                           TVariantInParam ObjectName/*[in,opt]*/, 
                           TVariantInParam OutputFormat/*[in,opt]*/, TVariantInParam To/*[in,opt]*/, 
                           TVariantInParam Cc/*[in,opt]*/, TVariantInParam Bcc/*[in,opt]*/, 
                           TVariantInParam Subject/*[in,opt]*/, 
                           TVariantInParam MessageText/*[in,opt]*/, 
                           TVariantInParam EditMessage/*[in,opt]*/, 
                           TVariantInParam TemplateFile/*[in,opt]*/)
{
  return (*this)->SendObject(ObjectType, ObjectName, OutputFormat, To, Cc, Bcc, Subject, MessageText, 
                             EditMessage, TemplateFile);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::ShowToolbar(TVariantInParam ToolbarName/*[in]*/, TVariantInParam Show/*[in,opt]*/)
{
  return (*this)->ShowToolbar(ToolbarName, Show);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::Save(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                     TVariantInParam ObjectName/*[in,opt]*/)
{
  return (*this)->Save(ObjectType, ObjectName);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::SetMenuItem(TVariantInParam MenuIndex/*[in]*/, 
                            TVariantInParam CommandIndex/*[in,opt]*/, 
                            TVariantInParam SubcommandIndex/*[in,opt]*/, 
                            TVariantInParam Flag/*[in,opt]*/)
{
  return (*this)->SetMenuItem(MenuIndex, CommandIndex, SubcommandIndex, Flag);
}

template <class T> HRESULT __fastcall
TCOMIDoCmdT<T>::RunCommand(Access_97::AcCommand Command/*[in]*/)
{
  return (*this)->RunCommand(Command);
}

// *********************************************************************//
// DispIntf:  IDoCmd
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C547E760-9658-101B-81EE-00AA004750E2}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::AddMenu(TVariantInParam MenuName/*[in]*/, TVariantInParam MenuMacroName/*[in]*/, 
                        TVariantInParam StatusBarText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddMenu"), DISPID(1001));
  TAutoArgs<3> _args;
  _args[1] = MenuName /*[VT_VARIANT:0]*/;
  _args[2] = MenuMacroName /*[VT_VARIANT:0]*/;
  _args[3] = StatusBarText /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::ApplyFilter(TVariantInParam FilterName/*[in,opt]*/, 
                            TVariantInParam WhereCondition/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyFilter"), DISPID(1002));
  TAutoArgs<2> _args;
  _args[1] = FilterName /*[VT_VARIANT:0]*/;
  _args[2] = WhereCondition /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Beep()
{
  _TDispID _dispid(*this, OLETEXT("Beep"), DISPID(1003));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::CancelEvent()
{
  _TDispID _dispid(*this, OLETEXT("CancelEvent"), DISPID(1004));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Close(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                      TVariantInParam ObjectName/*[in,opt]*/, 
                      Access_97::AcCloseSave Save/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(1005));
  TAutoArgs<3> _args;
  _args[1] = (int)ObjectType /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectName /*[VT_VARIANT:0]*/;
  _args[3] = (int)Save /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::CopyObject(TVariantInParam DestinationDatabase/*[in,opt]*/, 
                           TVariantInParam NewName/*[in,opt]*/, 
                           Access_97::AcObjectType SourceObjectType/*[in,def,opt]*/, 
                           TVariantInParam SourceObjectName/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("CopyObject"), DISPID(1006));
  TAutoArgs<4> _args;
  _args[1] = DestinationDatabase /*[VT_VARIANT:0]*/;
  _args[2] = NewName /*[VT_VARIANT:0]*/;
  _args[3] = (int)SourceObjectType /*[VT_USERDEFINED:0]*/;
  _args[4] = SourceObjectName /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::DoMenuItem(TVariantInParam MenuBar/*[in]*/, TVariantInParam MenuName/*[in]*/, 
                           TVariantInParam Command/*[in]*/, TVariantInParam Subcommand/*[in,opt]*/, 
                           TVariantInParam Version/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoMenuItem"), DISPID(1007));
  TAutoArgs<5> _args;
  _args[1] = MenuBar /*[VT_VARIANT:0]*/;
  _args[2] = MenuName /*[VT_VARIANT:0]*/;
  _args[3] = Command /*[VT_VARIANT:0]*/;
  _args[4] = Subcommand /*[VT_VARIANT:0]*/;
  _args[5] = Version /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Echo(TVariantInParam EchoOn/*[in]*/, TVariantInParam StatusBarText/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Echo"), DISPID(1008));
  TAutoArgs<2> _args;
  _args[1] = EchoOn /*[VT_VARIANT:0]*/;
  _args[2] = StatusBarText /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::FindNext()
{
  _TDispID _dispid(*this, OLETEXT("FindNext"), DISPID(1009));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::FindRecord(TVariantInParam FindWhat/*[in]*/, 
                           Access_97::AcFindMatch Match/*[in,def,opt]*/, 
                           TVariantInParam MatchCase/*[in,opt]*/, 
                           Access_97::AcSearchDirection Search/*[in,def,opt]*/, 
                           TVariantInParam SearchAsFormatted/*[in,opt]*/, 
                           Access_97::AcFindField OnlyCurrentField/*[in,def,opt]*/, 
                           TVariantInParam FindFirst/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindRecord"), DISPID(1010));
  TAutoArgs<7> _args;
  _args[1] = FindWhat /*[VT_VARIANT:0]*/;
  _args[2] = (int)Match /*[VT_USERDEFINED:0]*/;
  _args[3] = MatchCase /*[VT_VARIANT:0]*/;
  _args[4] = (int)Search /*[VT_USERDEFINED:0]*/;
  _args[5] = SearchAsFormatted /*[VT_VARIANT:0]*/;
  _args[6] = (int)OnlyCurrentField /*[VT_USERDEFINED:0]*/;
  _args[7] = FindFirst /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::GoToControl(TVariantInParam ControlName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GoToControl"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = ControlName /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::GoToPage(TVariantInParam PageNumber/*[in]*/, TVariantInParam Right/*[in,opt]*/, 
                         TVariantInParam Down/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("GoToPage"), DISPID(1012));
  TAutoArgs<3> _args;
  _args[1] = PageNumber /*[VT_VARIANT:0]*/;
  _args[2] = Right /*[VT_VARIANT:0]*/;
  _args[3] = Down /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::GoToRecord(Access_97::AcDataObjectType ObjectType/*[in,def,opt]*/, 
                           TVariantInParam ObjectName/*[in,opt]*/, 
                           Access_97::AcRecord Record/*[in,def,opt]*/, 
                           TVariantInParam Offset/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("GoToRecord"), DISPID(1013));
  TAutoArgs<4> _args;
  _args[1] = (int)ObjectType /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectName /*[VT_VARIANT:0]*/;
  _args[3] = (int)Record /*[VT_USERDEFINED:0]*/;
  _args[4] = Offset /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Hourglass(TVariantInParam HourglassOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hourglass"), DISPID(1014));
  TAutoArgs<1> _args;
  _args[1] = HourglassOn /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Maximize()
{
  _TDispID _dispid(*this, OLETEXT("Maximize"), DISPID(1015));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Minimize()
{
  _TDispID _dispid(*this, OLETEXT("Minimize"), DISPID(1016));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::MoveSize(TVariantInParam Right/*[in,opt]*/, TVariantInParam Down/*[in,opt]*/, 
                         TVariantInParam Width/*[in,opt]*/, TVariantInParam Height/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveSize"), DISPID(1017));
  TAutoArgs<4> _args;
  _args[1] = Right /*[VT_VARIANT:0]*/;
  _args[2] = Down /*[VT_VARIANT:0]*/;
  _args[3] = Width /*[VT_VARIANT:0]*/;
  _args[4] = Height /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::OpenForm(TVariantInParam FormName/*[in]*/, 
                         Access_97::AcFormView View/*[in,def,opt]*/, 
                         TVariantInParam FilterName/*[in,opt]*/, 
                         TVariantInParam WhereCondition/*[in,opt]*/, 
                         Access_97::AcFormOpenDataMode DataMode/*[in,def,opt]*/, 
                         Access_97::AcWindowMode WindowMode/*[in,def,opt]*/, 
                         TVariantInParam OpenArgs/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenForm"), DISPID(1019));
  TAutoArgs<7> _args;
  _args[1] = FormName /*[VT_VARIANT:0]*/;
  _args[2] = (int)View /*[VT_USERDEFINED:0]*/;
  _args[3] = FilterName /*[VT_VARIANT:0]*/;
  _args[4] = WhereCondition /*[VT_VARIANT:0]*/;
  _args[5] = (int)DataMode /*[VT_USERDEFINED:0]*/;
  _args[6] = (int)WindowMode /*[VT_USERDEFINED:0]*/;
  _args[7] = OpenArgs /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::OpenQuery(TVariantInParam QueryName/*[in]*/, Access_97::AcView View/*[in,def,opt]*/
                          , Access_97::AcOpenDataMode DataMode/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenQuery"), DISPID(1020));
  TAutoArgs<3> _args;
  _args[1] = QueryName /*[VT_VARIANT:0]*/;
  _args[2] = (int)View /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)DataMode /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::OpenTable(TVariantInParam TableName/*[in]*/, Access_97::AcView View/*[in,def,opt]*/
                          , Access_97::AcOpenDataMode DataMode/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenTable"), DISPID(1021));
  TAutoArgs<3> _args;
  _args[1] = TableName /*[VT_VARIANT:0]*/;
  _args[2] = (int)View /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)DataMode /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::PrintOut(Access_97::AcPrintRange PrintRange/*[in,def,opt]*/, 
                         TVariantInParam PageFrom/*[in,opt]*/, TVariantInParam PageTo/*[in,opt]*/, 
                         Access_97::AcPrintQuality PrintQuality/*[in,def,opt]*/, 
                         TVariantInParam Copies/*[in,opt]*/, 
                         TVariantInParam CollateCopies/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintOut"), DISPID(1022));
  TAutoArgs<6> _args;
  _args[1] = (int)PrintRange /*[VT_USERDEFINED:0]*/;
  _args[2] = PageFrom /*[VT_VARIANT:0]*/;
  _args[3] = PageTo /*[VT_VARIANT:0]*/;
  _args[4] = (int)PrintQuality /*[VT_USERDEFINED:0]*/;
  _args[5] = Copies /*[VT_VARIANT:0]*/;
  _args[6] = CollateCopies /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Quit(Access_97::AcQuitOption Options/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quit"), DISPID(1023));
  TAutoArgs<1> _args;
  _args[1] = (int)Options /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Requery(TVariantInParam ControlName/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(1024));
  TAutoArgs<1> _args;
  _args[1] = ControlName /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::RepaintObject(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                              TVariantInParam ObjectName/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("RepaintObject"), DISPID(1025));
  TAutoArgs<2> _args;
  _args[1] = (int)ObjectType /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectName /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Rename(TVariantInParam NewName/*[in]*/, 
                       Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                       TVariantInParam OldName/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rename"), DISPID(1026));
  TAutoArgs<3> _args;
  _args[1] = NewName /*[VT_VARIANT:0]*/;
  _args[2] = (int)ObjectType /*[VT_USERDEFINED:0]*/;
  _args[3] = OldName /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Restore()
{
  _TDispID _dispid(*this, OLETEXT("Restore"), DISPID(1027));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::RunMacro(TVariantInParam MacroName/*[in]*/, TVariantInParam RepeatCount/*[in,opt]*/
                         , TVariantInParam RepeatExpression/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("RunMacro"), DISPID(1030));
  TAutoArgs<3> _args;
  _args[1] = MacroName /*[VT_VARIANT:0]*/;
  _args[2] = RepeatCount /*[VT_VARIANT:0]*/;
  _args[3] = RepeatExpression /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::RunSQL(TVariantInParam SQLStatement/*[in]*/, 
                       TVariantInParam UseTransaction/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("RunSQL"), DISPID(1031));
  TAutoArgs<2> _args;
  _args[1] = SQLStatement /*[VT_VARIANT:0]*/;
  _args[2] = UseTransaction /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::SelectObject(Access_97::AcObjectType ObjectType/*[in]*/, 
                             TVariantInParam ObjectName/*[in,opt]*/, 
                             TVariantInParam InDatabaseWindow/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectObject"), DISPID(1032));
  TAutoArgs<3> _args;
  _args[1] = (int)ObjectType /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectName /*[VT_VARIANT:0]*/;
  _args[3] = InDatabaseWindow /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::SetWarnings(TVariantInParam WarningsOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetWarnings"), DISPID(1035));
  TAutoArgs<1> _args;
  _args[1] = WarningsOn /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::ShowAllRecords()
{
  _TDispID _dispid(*this, OLETEXT("ShowAllRecords"), DISPID(1036));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::OpenReport(TVariantInParam ReportName/*[in]*/, 
                           Access_97::AcView View/*[in,def,opt]*/, 
                           TVariantInParam FilterName/*[in,opt]*/, 
                           TVariantInParam WhereCondition/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenReport"), DISPID(1039));
  TAutoArgs<4> _args;
  _args[1] = ReportName /*[VT_VARIANT:0]*/;
  _args[2] = (int)View /*[VT_USERDEFINED:0]*/;
  _args[3] = FilterName /*[VT_VARIANT:0]*/;
  _args[4] = WhereCondition /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::TransferDatabase(Access_97::AcDataTransferType TransferType/*[in,def,opt]*/, 
                                 TVariantInParam DatabaseType/*[in,opt]*/, 
                                 TVariantInParam DatabaseName/*[in,opt]*/, 
                                 Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                                 TVariantInParam Source/*[in,opt]*/, 
                                 TVariantInParam Destination/*[in,opt]*/, 
                                 TVariantInParam StructureOnly/*[in,opt]*/, 
                                 TVariantInParam StoreLogin/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransferDatabase"), DISPID(1040));
  TAutoArgs<8> _args;
  _args[1] = (int)TransferType /*[VT_USERDEFINED:0]*/;
  _args[2] = DatabaseType /*[VT_VARIANT:0]*/;
  _args[3] = DatabaseName /*[VT_VARIANT:0]*/;
  _args[4] = (int)ObjectType /*[VT_USERDEFINED:0]*/;
  _args[5] = Source /*[VT_VARIANT:0]*/;
  _args[6] = Destination /*[VT_VARIANT:0]*/;
  _args[7] = StructureOnly /*[VT_VARIANT:0]*/;
  _args[8] = StoreLogin /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::TransferSpreadsheet(Access_97::AcDataTransferType TransferType/*[in,def,opt]*/, 
                                    Access_97::AcSpreadSheetType SpreadsheetType/*[in,def,opt]*/, 
                                    TVariantInParam TableName/*[in,opt]*/, 
                                    TVariantInParam FileName/*[in,opt]*/, 
                                    TVariantInParam HasFieldNames/*[in,opt]*/, 
                                    TVariantInParam Range/*[in,opt]*/, 
                                    TVariantInParam UseOA/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransferSpreadsheet"), DISPID(1041));
  TAutoArgs<7> _args;
  _args[1] = (int)TransferType /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)SpreadsheetType /*[VT_USERDEFINED:0]*/;
  _args[3] = TableName /*[VT_VARIANT:0]*/;
  _args[4] = FileName /*[VT_VARIANT:0]*/;
  _args[5] = HasFieldNames /*[VT_VARIANT:0]*/;
  _args[6] = Range /*[VT_VARIANT:0]*/;
  _args[7] = UseOA /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::TransferText(Access_97::AcTextTransferType TransferType/*[in,def,opt]*/, 
                             TVariantInParam SpecificationName/*[in,opt]*/, 
                             TVariantInParam TableName/*[in,opt]*/, 
                             TVariantInParam FileName/*[in,opt]*/, 
                             TVariantInParam HasFieldNames/*[in,opt]*/, 
                             TVariantInParam HTMLTableName/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransferText"), DISPID(1042));
  TAutoArgs<6> _args;
  _args[1] = (int)TransferType /*[VT_USERDEFINED:0]*/;
  _args[2] = SpecificationName /*[VT_VARIANT:0]*/;
  _args[3] = TableName /*[VT_VARIANT:0]*/;
  _args[4] = FileName /*[VT_VARIANT:0]*/;
  _args[5] = HasFieldNames /*[VT_VARIANT:0]*/;
  _args[6] = HTMLTableName /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::OutputTo(Access_97::AcOutputObjectType ObjectType/*[in]*/, 
                         TVariantInParam ObjectName/*[in,opt]*/, 
                         TVariantInParam OutputFormat/*[in,opt]*/, 
                         TVariantInParam OutputFile/*[in,opt]*/, 
                         TVariantInParam AutoStart/*[in,opt]*/, 
                         TVariantInParam TemplateFile/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OutputTo"), DISPID(1341));
  TAutoArgs<6> _args;
  _args[1] = (int)ObjectType /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectName /*[VT_VARIANT:0]*/;
  _args[3] = OutputFormat /*[VT_VARIANT:0]*/;
  _args[4] = OutputFile /*[VT_VARIANT:0]*/;
  _args[5] = AutoStart /*[VT_VARIANT:0]*/;
  _args[6] = TemplateFile /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::DeleteObject(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                             TVariantInParam ObjectName/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteObject"), DISPID(1372));
  TAutoArgs<2> _args;
  _args[1] = (int)ObjectType /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectName /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::OpenModule(TVariantInParam ModuleName/*[in,opt]*/, 
                           TVariantInParam ProcedureName/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenModule"), DISPID(1374));
  TAutoArgs<2> _args;
  _args[1] = ModuleName /*[VT_VARIANT:0]*/;
  _args[2] = ProcedureName /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::SendObject(Access_97::AcSendObjectType ObjectType/*[in,def,opt]*/, 
                           TVariantInParam ObjectName/*[in,opt]*/, 
                           TVariantInParam OutputFormat/*[in,opt]*/, TVariantInParam To/*[in,opt]*/
                           , TVariantInParam Cc/*[in,opt]*/, TVariantInParam Bcc/*[in,opt]*/, 
                           TVariantInParam Subject/*[in,opt]*/, 
                           TVariantInParam MessageText/*[in,opt]*/, 
                           TVariantInParam EditMessage/*[in,opt]*/, 
                           TVariantInParam TemplateFile/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendObject"), DISPID(1377));
  TAutoArgs<10> _args;
  _args[1] = (int)ObjectType /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectName /*[VT_VARIANT:0]*/;
  _args[3] = OutputFormat /*[VT_VARIANT:0]*/;
  _args[4] = To /*[VT_VARIANT:0]*/;
  _args[5] = Cc /*[VT_VARIANT:0]*/;
  _args[6] = Bcc /*[VT_VARIANT:0]*/;
  _args[7] = Subject /*[VT_VARIANT:0]*/;
  _args[8] = MessageText /*[VT_VARIANT:0]*/;
  _args[9] = EditMessage /*[VT_VARIANT:0]*/;
  _args[10] = TemplateFile /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::ShowToolbar(TVariantInParam ToolbarName/*[in]*/, TVariantInParam Show/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowToolbar"), DISPID(1394));
  TAutoArgs<2> _args;
  _args[1] = ToolbarName /*[VT_VARIANT:0]*/;
  _args[2] = Show /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::Save(Access_97::AcObjectType ObjectType/*[in,def,opt]*/, 
                     TVariantInParam ObjectName/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Save"), DISPID(1453));
  TAutoArgs<2> _args;
  _args[1] = (int)ObjectType /*[VT_USERDEFINED:0]*/;
  _args[2] = ObjectName /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::SetMenuItem(TVariantInParam MenuIndex/*[in]*/, 
                            TVariantInParam CommandIndex/*[in,opt]*/, 
                            TVariantInParam SubcommandIndex/*[in,opt]*/, 
                            TVariantInParam Flag/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetMenuItem"), DISPID(1454));
  TAutoArgs<4> _args;
  _args[1] = MenuIndex /*[VT_VARIANT:0]*/;
  _args[2] = CommandIndex /*[VT_VARIANT:0]*/;
  _args[3] = SubcommandIndex /*[VT_VARIANT:0]*/;
  _args[4] = Flag /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IDoCmdDispT<T>::RunCommand(Access_97::AcCommand Command/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RunCommand"), DISPID(1602));
  TAutoArgs<1> _args;
  _args[1] = (int)Command /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _AccessProperty
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD00-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_AccessPropertyDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_AccessPropertyDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::get_Category(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Category"), DISPID(2096));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_AccessPropertyDispT<T>::get_Category(void)
{
  short pRet;
  this->get_Category((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::get_Value(TVariant* pval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pval /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_AccessPropertyDispT<T>::get_Value(void)
{
  TVariant pval;
  this->get_Value((TVariant*)&pval);
  return pval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::set_Value(TVariantInParam pval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pval /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::get_Name(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_AccessPropertyDispT<T>::get_Name(void)
{
  BSTR pbstr;
  this->get_Name((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::set_Name(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610809346));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::get_Type(short* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ptype /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_AccessPropertyDispT<T>::get_Type(void)
{
  short ptype;
  this->get_Type((short*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::set_Type(short ptype/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1610809348));
  TAutoArgs<1> _args;
  _args[1] = ptype /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::get_Inherited(TOLEBOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Inherited"), DISPID(DISPID_UNKNOWN/*[1610809350]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_AccessPropertyDispT<T>::get_Inherited(void)
{
  TOLEBOOL pb;
  this->get_Inherited((TOLEBOOL*)&pb);
  return pb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessPropertyDispT<T>::get_Properties(Dao_97::PropertiesPtr* ppprops/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Dao_97::Properties**)ppprops /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Dao_97::PropertiesPtr __fastcall
_AccessPropertyDispT<T>::get_Properties(void)
{
  Dao_97::PropertiesPtr ppprops;
  this->get_Properties((Dao_97::PropertiesPtr*)&ppprops);
  return ppprops;
}

// *********************************************************************//
// DispIntf:  Properties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD02-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
PropertiesDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PropertiesDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::get_Item(TVariantInParam Index/*[in]*/, LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PropertiesDispT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  LPDISPATCH pRet;
  this->get_Item(Index, (LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::get_Count(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PropertiesDispT<T>::get_Count(void)
{
  long pRet;
  this->get_Count((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PropertiesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

// *********************************************************************//
// DispIntf:  _ItemsSelected
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {31B09710-EADC-11CD-B9F7-00AA004753B5}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ItemsSelectedDispT<T>::get_Item(TVariantInParam Index/*[in]*/, long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ItemsSelectedDispT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  long pRet;
  this->get_Item(Index, (long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ItemsSelectedDispT<T>::get_Count(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ItemsSelectedDispT<T>::get_Count(void)
{
  long pRet;
  this->get_Count((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ItemsSelectedDispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_ItemsSelectedDispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

// *********************************************************************//
// DispIntf:  Children
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E977-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChildrenDispT<T>::get_Item(TVariantInParam Index/*[in]*/, LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ChildrenDispT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  LPDISPATCH pRet;
  this->get_Item(Index, (LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChildrenDispT<T>::get_Count(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ChildrenDispT<T>::get_Count(void)
{
  long pRet;
  this->get_Count((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ChildrenDispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ChildrenDispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

// *********************************************************************//
// SmartIntf: TCOM_AccessField
// Interface: _AccessField
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_AccessFieldT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_AccessFieldT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_AccessFieldT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

// *********************************************************************//
// DispIntf:  _AccessField
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1C1EAC1-486F-11CE-A65D-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessFieldDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_AccessFieldDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_AccessFieldDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Hyperlink
// Interface: _Hyperlink
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_HyperlinkT<T>::get_SubAddress(BSTR* pbstrResult/*[out,retval]*/)
{
  return (*this)->get_SubAddress(pbstrResult);
}

template <class T> BSTR __fastcall
TCOM_HyperlinkT<T>::get_SubAddress(void)
{
  BSTR pbstrResult = 0;
  OLECHECK(this->get_SubAddress((BSTR*)&pbstrResult));
  return pbstrResult;
}

template <class T> HRESULT __fastcall
TCOM_HyperlinkT<T>::set_SubAddress(TVariantInParam pbstrResult/*[in]*/)
{
  return (*this)->set_SubAddress(pbstrResult);
}

template <class T> HRESULT __fastcall
TCOM_HyperlinkT<T>::get_Address(BSTR* pbstrResult/*[out,retval]*/)
{
  return (*this)->get_Address(pbstrResult);
}

template <class T> BSTR __fastcall
TCOM_HyperlinkT<T>::get_Address(void)
{
  BSTR pbstrResult = 0;
  OLECHECK(this->get_Address((BSTR*)&pbstrResult));
  return pbstrResult;
}

template <class T> HRESULT __fastcall
TCOM_HyperlinkT<T>::set_Address(TVariantInParam pbstrResult/*[in]*/)
{
  return (*this)->set_Address(pbstrResult);
}

template <class T> HRESULT __fastcall
TCOM_HyperlinkT<T>::AddToFavorites(void)
{
  return (*this)->AddToFavorites();
}

template <class T> HRESULT __fastcall
TCOM_HyperlinkT<T>::Follow(TOLEBOOL NewWindow/*[in,def,opt]*/, TOLEBOOL AddHistory/*[in,def,opt]*/, 
                           TVariantInParam ExtraInfo/*[in,opt]*/, 
                           Office_97::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                           BSTR HeaderInfo/*[in,def,opt]*/)
{
  return (*this)->Follow(NewWindow, AddHistory, ExtraInfo, Method, HeaderInfo);
}

// *********************************************************************//
// DispIntf:  _Hyperlink
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {50D56611-60AC-11CF-82C9-00AA004B9FE6}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_HyperlinkDispT<T>::get_SubAddress(BSTR* pbstrResult/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubAddress"), DISPID(2182));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrResult /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_HyperlinkDispT<T>::get_SubAddress(void)
{
  BSTR pbstrResult;
  this->get_SubAddress((BSTR*)&pbstrResult);
  return pbstrResult;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_HyperlinkDispT<T>::set_SubAddress(TVariantInParam pbstrResult/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubAddress"), DISPID(2182));
  TAutoArgs<1> _args;
  _args[1] = pbstrResult /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_HyperlinkDispT<T>::get_Address(BSTR* pbstrResult/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(2183));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrResult /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_HyperlinkDispT<T>::get_Address(void)
{
  BSTR pbstrResult;
  this->get_Address((BSTR*)&pbstrResult);
  return pbstrResult;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_HyperlinkDispT<T>::set_Address(TVariantInParam pbstrResult/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Address"), DISPID(2183));
  TAutoArgs<1> _args;
  _args[1] = pbstrResult /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_HyperlinkDispT<T>::AddToFavorites()
{
  _TDispID _dispid(*this, OLETEXT("AddToFavorites"), DISPID(2184));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_HyperlinkDispT<T>::Follow(TOLEBOOL NewWindow/*[in,def,opt]*/, TOLEBOOL AddHistory/*[in,def,opt]*/, 
                           TVariantInParam ExtraInfo/*[in,opt]*/, 
                           Office_97::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                           BSTR HeaderInfo/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Follow"), DISPID(2185));
  TAutoArgs<5> _args;
  _args[1] = NewWindow /*[VT_BOOL:0]*/;
  _args[2] = AddHistory /*[VT_BOOL:0]*/;
  _args[3] = ExtraInfo /*[VT_VARIANT:0]*/;
  _args[4] = (int)Method /*[VT_USERDEFINED:0]*/;
  _args[5] = HeaderInfo /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Page
// Interface: _Page
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_PageT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_PageT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_PageT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                         TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_PageT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_PageT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_PageT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Caption(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_Caption(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Caption((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  return (*this)->set_Caption(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Picture(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_Picture(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Picture((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  return (*this)->set_Picture(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_PageT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_PageIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_PageIndex(pRet);
}

template <class T> short __fastcall
TCOM_PageT<T>::get_PageIndex(void)
{
  short pRet;
  OLECHECK(this->get_PageIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_PageIndex(short pRet/*[in]*/)
{
  return (*this)->set_PageIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PageT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PageT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_PageT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_PageT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_PageT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_PageT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_PageT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_PageT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PageT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PageT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureData(pRet);
}

template <class T> TVariant __fastcall
TCOM_PageT<T>::get_PictureData(void)
{
  TVariant pRet;
  OLECHECK(this->get_PictureData((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PictureData(pRet);
}

// *********************************************************************//
// DispIntf:  _Page
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E974-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_PageDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PageDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_PageDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                         TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_PageDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_PageDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_PageDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_Caption(void)
{
  BSTR pRet;
  this->get_Caption((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_Picture(void)
{
  BSTR pRet;
  this->get_Picture((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_PageDispT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  this->get_PictureType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_PageIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageIndex"), DISPID(395));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PageDispT<T>::get_PageIndex(void)
{
  short pRet;
  this->get_PageIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_PageIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageIndex"), DISPID(395));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PageDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PageDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PageDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PageDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PageDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PageDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_PageDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PageDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PageDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PageDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_PageDispT<T>::get_PictureData(void)
{
  TVariant pRet;
  this->get_PictureData((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageDispT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Pages
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E978-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::get_Item(TVariantInParam Index/*[in]*/, 
                        Access_97::AccessPagePtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessPage**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessPagePtr __fastcall
PagesDispT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  Access_97::AccessPagePtr pRet;
  this->get_Item(Index, (Access_97::AccessPagePtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::get_Count(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PagesDispT<T>::get_Count(void)
{
  long pRet;
  this->get_Count((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PagesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::Add(TVariantInParam Before/*[in,opt]*/, 
                   Access_97::AccessPagePtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2191));
  TAutoArgs<1> _args;
  _args[1] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessPage**)pRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::AccessPagePtr __fastcall
PagesDispT<T>::Add(TVariantInParam Before/*[in,opt]*/)
{
  Access_97::AccessPagePtr pRet;
  this->Add(Before, (Access_97::AccessPagePtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PagesDispT<T>::Remove(TVariantInParam Item/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(2192));
  TAutoArgs<1> _args;
  _args[1] = Item /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Control
// Interface: _Control
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_ControlT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ControlT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::Undo(void)
{
  return (*this)->Undo();
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::Dropdown(void)
{
  return (*this)->Dropdown();
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                             TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Column(Index, Row, pRet);
}

template <class T> TVariant __fastcall
TCOM_ControlT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->get_Column(Index, Row, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Selected(long lRow/*[in]*/, long* pRet/*[out,retval]*/)
{
  return (*this)->get_Selected(lRow, pRet);
}

template <class T> long __fastcall
TCOM_ControlT<T>::get_Selected(long lRow/*[in]*/)
{
  long pRet;
  OLECHECK(this->get_Selected(lRow, (long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::set_Selected(long lRow/*[in]*/, long pRet/*[in]*/)
{
  return (*this)->set_Selected(lRow, pRet);
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_ControlT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Form(pRet);
}

template <class T> Access_97::AccessFormPtr __fastcall
TCOM_ControlT<T>::get_Form(void)
{
  Access_97::AccessFormPtr pRet;
  OLECHECK(this->get_Form((Access_97::AccessFormPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Report(pRet);
}

template <class T> Access_97::AccessReportPtr __fastcall
TCOM_ControlT<T>::get_Report(void)
{
  Access_97::AccessReportPtr pRet;
  OLECHECK(this->get_Report((Access_97::AccessReportPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_ItemData(Index, pRet);
}

template <class T> TVariant __fastcall
TCOM_ControlT<T>::get_ItemData(long Index/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->get_ItemData(Index, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Object(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Object(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ControlT<T>::get_Object(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Object((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectVerbs(Index, pRet);
}

template <class T> BSTR __fastcall
TCOM_ControlT<T>::get_ObjectVerbs(long Index/*[in]*/)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ObjectVerbs(Index, (BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_ControlT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_ItemsSelected(Access_97::_ItemsSelectedPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_ItemsSelected(pRet);
}

template <class T> Access_97::_ItemsSelectedPtr __fastcall
TCOM_ControlT<T>::get_ItemsSelected(void)
{
  Access_97::_ItemsSelectedPtr pRet;
  OLECHECK(this->get_ItemsSelected((Access_97::_ItemsSelectedPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                            TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_ControlT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Pages(Access_97::PagesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Pages(pRet);
}

template <class T> Access_97::PagesPtr __fastcall
TCOM_ControlT<T>::get_Pages(void)
{
  Access_97::PagesPtr pRet;
  OLECHECK(this->get_Pages((Access_97::PagesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_ControlT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ControlT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  return (*this)->get_Hyperlink(ppRet);
}

template <class T> Access_97::_HyperlinkPtr __fastcall
TCOM_ControlT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
  return ppRet;
}

// *********************************************************************//
// DispIntf:  _Control
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {26B96540-8F8E-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_ControlDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ControlDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(2144));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::Dropdown()
{
  _TDispID _dispid(*this, OLETEXT("Dropdown"), DISPID(2143));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                             TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Column"), DISPID(2101));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Row /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ControlDispT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/)
{
  TVariant pRet;
  this->get_Column(Index, Row, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Selected(long lRow/*[in]*/, long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(2113));
  TAutoArgs<1> _args;
  _args[1] = lRow /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ControlDispT<T>::get_Selected(long lRow/*[in]*/)
{
  long pRet;
  this->get_Selected(lRow, (long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::set_Selected(long lRow/*[in]*/, long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(2113));
  TAutoArgs<2> _args;
  _args[1] = lRow /*[VT_I4:0]*/;
  _args[2] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ControlDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Form"), DISPID(2089));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessForm**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessFormPtr __fastcall
_ControlDispT<T>::get_Form(void)
{
  Access_97::AccessFormPtr pRet;
  this->get_Form((Access_97::AccessFormPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Report"), DISPID(2097));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessReport**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessReportPtr __fastcall
_ControlDispT<T>::get_Report(void)
{
  Access_97::AccessReportPtr pRet;
  this->get_Report((Access_97::AccessReportPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemData"), DISPID(2103));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ControlDispT<T>::get_ItemData(long Index/*[in]*/)
{
  TVariant pRet;
  this->get_ItemData(Index, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Object(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(2104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ControlDispT<T>::get_Object(void)
{
  LPDISPATCH pRet;
  this->get_Object((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbs"), DISPID(2105));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ControlDispT<T>::get_ObjectVerbs(long Index/*[in]*/)
{
  BSTR pRet;
  this->get_ObjectVerbs(Index, (BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_ControlDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_ItemsSelected(Access_97::_ItemsSelectedPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemsSelected"), DISPID(2137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::_ItemsSelected**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::_ItemsSelectedPtr __fastcall
_ControlDispT<T>::get_ItemsSelected(void)
{
  Access_97::_ItemsSelectedPtr pRet;
  this->get_ItemsSelected((Access_97::_ItemsSelectedPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                            TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ControlDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Pages(Access_97::PagesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pages"), DISPID(2180));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Pages**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PagesPtr __fastcall
_ControlDispT<T>::get_Pages(void)
{
  Access_97::PagesPtr pRet;
  this->get_Pages((Access_97::PagesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_ControlDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ControlDispT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(2181));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::_Hyperlink**)ppRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::_HyperlinkPtr __fastcall
_ControlDispT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet);
  return ppRet;
}

// *********************************************************************//
// DispIntf:  Controls
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5970C574-EB8C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
Controls_DispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
Controls_DispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::get_Item(TVariantInParam Index/*[in]*/, LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
Controls_DispT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  LPDISPATCH pRet;
  this->get_Item(Index, (LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::get_Count(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Controls_DispT<T>::get_Count(void)
{
  long pRet;
  this->get_Count((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Controls_DispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
Controls_DispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

// *********************************************************************//
// SmartIntf: TCOM_Label
// Interface: _Label
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_LabelT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_LabelT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_LabelT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                          TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_LabelT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  return (*this)->get_Hyperlink(ppRet);
}

template <class T> Access_97::_HyperlinkPtr __fastcall
TCOM_LabelT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
  return ppRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LabelT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Caption(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_Caption(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Caption((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  return (*this)->set_Caption(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_HyperlinkAddress(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_HyperlinkAddress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_HyperlinkAddress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_HyperlinkAddress(BSTR pRet/*[in]*/)
{
  return (*this)->set_HyperlinkAddress(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_HyperlinkSubAddress(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_HyperlinkSubAddress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_HyperlinkSubAddress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_HyperlinkSubAddress(BSTR pRet/*[in]*/)
{
  return (*this)->set_HyperlinkSubAddress(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_LabelT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LabelT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_LabelT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_LabelT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_LabelT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_LabelT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BackStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LabelT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BackStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_LabelT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LabelT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LabelT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LabelT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_LabelT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LabelT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LabelT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pRet);
}

template <class T> long __fastcall
TCOM_LabelT<T>::get_ForeColor(void)
{
  long pRet;
  OLECHECK(this->get_ForeColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_ForeColor(long pRet/*[in]*/)
{
  return (*this)->set_ForeColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FontName(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_FontName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FontName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  return (*this)->set_FontName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontSize(pRet);
}

template <class T> short __fastcall
TCOM_LabelT<T>::get_FontSize(void)
{
  short pRet;
  OLECHECK(this->get_FontSize((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_FontSize(short pRet/*[in]*/)
{
  return (*this)->set_FontSize(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontWeight(pRet);
}

template <class T> short __fastcall
TCOM_LabelT<T>::get_FontWeight(void)
{
  short pRet;
  OLECHECK(this->get_FontWeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_FontWeight(short pRet/*[in]*/)
{
  return (*this)->set_FontWeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontItalic(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_LabelT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontItalic(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_LabelT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontUnderline(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TextFontCharSet(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LabelT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TextFontCharSet(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_TextAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TextAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LabelT<T>::get_TextAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TextAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_TextAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TextAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontBold(pRet);
}

template <class T> short __fastcall
TCOM_LabelT<T>::get_FontBold(void)
{
  short pRet;
  OLECHECK(this->get_FontBold((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_FontBold(short pRet/*[in]*/)
{
  return (*this)->set_FontBold(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_LabelT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_LabelT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_LabelT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_LabelT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_LabelT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LabelT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

// *********************************************************************//
// DispIntf:  _Label
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E948-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_LabelDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_LabelDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_LabelDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                          TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_LabelDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(2181));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::_Hyperlink**)ppRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::_HyperlinkPtr __fastcall
_LabelDispT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet);
  return ppRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LabelDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_Caption(void)
{
  BSTR pRet;
  this->get_Caption((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkAddress"), DISPID(386));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_HyperlinkAddress(void)
{
  BSTR pRet;
  this->get_HyperlinkAddress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_HyperlinkAddress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkAddress"), DISPID(386));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkSubAddress"), DISPID(390));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_HyperlinkSubAddress(void)
{
  BSTR pRet;
  this->get_HyperlinkSubAddress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_HyperlinkSubAddress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkSubAddress"), DISPID(390));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_LabelDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LabelDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LabelDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LabelDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LabelDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LabelDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LabelDispT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  this->get_BackStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_LabelDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LabelDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LabelDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LabelDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_LabelDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LabelDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LabelDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_LabelDispT<T>::get_ForeColor(void)
{
  long pRet;
  this->get_ForeColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_ForeColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_FontName(void)
{
  BSTR pRet;
  this->get_FontName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LabelDispT<T>::get_FontSize(void)
{
  short pRet;
  this->get_FontSize((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_FontSize(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LabelDispT<T>::get_FontWeight(void)
{
  short pRet;
  this->get_FontWeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_FontWeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_LabelDispT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  this->get_FontItalic((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_LabelDispT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  this->get_FontUnderline((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LabelDispT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  this->get_TextFontCharSet((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_TextAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LabelDispT<T>::get_TextAlign(void)
{
  unsigned_char pRet;
  this->get_TextAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_TextAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(133));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LabelDispT<T>::get_FontBold(void)
{
  short pRet;
  this->get_FontBold((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_FontBold(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_LabelDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LabelDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_LabelDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_LabelDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LabelDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LabelDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Rectangle
// Interface: _Rectangle
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_RectangleT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_RectangleT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_RectangleT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                              TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_RectangleT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_RectangleT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_RectangleT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_RectangleT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_RectangleT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_RectangleT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_RectangleT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_RectangleT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_RectangleT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_RectangleT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BackStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_RectangleT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BackStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_RectangleT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_RectangleT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_RectangleT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_RectangleT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_RectangleT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_RectangleT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_RectangleT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_RectangleT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_RectangleT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_RectangleT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_RectangleT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_RectangleT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_RectangleT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_RectangleT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_RectangleT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_RectangleT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_RectangleT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_RectangleT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

// *********************************************************************//
// DispIntf:  _Rectangle
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94A-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_RectangleDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_RectangleDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_RectangleDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                              TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_RectangleDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RectangleDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RectangleDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_RectangleDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_RectangleDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_RectangleDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_RectangleDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_RectangleDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_RectangleDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_RectangleDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_RectangleDispT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  this->get_BackStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_RectangleDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_RectangleDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_RectangleDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_RectangleDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_RectangleDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_RectangleDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_RectangleDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_RectangleDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RectangleDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RectangleDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_RectangleDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_RectangleDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RectangleDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RectangleDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RectangleDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RectangleDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RectangleDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_RectangleDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Line
// Interface: _Line
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_LineT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_LineT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_LineT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                         TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_LineT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_LineT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_LineT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LineT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_LineSlant(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_LineSlant(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_LineT<T>::get_LineSlant(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_LineSlant((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_LineSlant(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_LineSlant(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_LineT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LineT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_LineT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_LineT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_LineT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_LineT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LineT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LineT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LineT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_LineT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LineT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_LineT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_LineT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_LineT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_LineT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_LineT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_LineT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_LineT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

// *********************************************************************//
// DispIntf:  _Line
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94C-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_LineDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_LineDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_LineDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                         TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_LineDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LineDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LineDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LineDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_LineSlant(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineSlant"), DISPID(55));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_LineDispT<T>::get_LineSlant(void)
{
  TOLEBOOL pRet;
  this->get_LineSlant((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_LineSlant(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LineSlant"), DISPID(55));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_LineDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LineDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LineDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LineDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LineDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LineDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LineDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LineDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LineDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_LineDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LineDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_LineDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_LineDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LineDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_LineDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_LineDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_LineDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_LineDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Image
// Interface: _Image
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_ImageT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ImageT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_ImageT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_ImageT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_ImageT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                          TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_ImageT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  return (*this)->get_Hyperlink(ppRet);
}

template <class T> Access_97::_HyperlinkPtr __fastcall
TCOM_ImageT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
  return ppRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_ImageT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Picture(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_Picture(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Picture((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  return (*this)->set_Picture(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureData(pRet);
}

template <class T> TVariant __fastcall
TCOM_ImageT<T>::get_PictureData(void)
{
  TVariant pRet;
  OLECHECK(this->get_PictureData((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PictureData(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_SizeMode(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SizeMode(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_SizeMode(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SizeMode((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_SizeMode(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SizeMode(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureAlignment(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_PictureAlignment(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureAlignment((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_PictureAlignment(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureAlignment(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureTiling(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ImageT<T>::get_PictureTiling(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_PictureTiling((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_PictureTiling(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_PictureTiling(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_HyperlinkAddress(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_HyperlinkAddress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_HyperlinkAddress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_HyperlinkAddress(BSTR pRet/*[in]*/)
{
  return (*this)->set_HyperlinkAddress(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_HyperlinkSubAddress(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_HyperlinkSubAddress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_HyperlinkSubAddress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_HyperlinkSubAddress(BSTR pRet/*[in]*/)
{
  return (*this)->set_HyperlinkSubAddress(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ImageT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_ImageT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_ImageT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_ImageT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_ImageT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BackStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BackStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_ImageT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_ImageT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ImageT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_ImageT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_ImageT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectPalette(pRet);
}

template <class T> TVariant __fastcall
TCOM_ImageT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_ObjectPalette(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ImageT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_ImageHeight(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ImageHeight(pRet);
}

template <class T> long __fastcall
TCOM_ImageT<T>::get_ImageHeight(void)
{
  long pRet;
  OLECHECK(this->get_ImageHeight((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_ImageHeight(long pRet/*[in]*/)
{
  return (*this)->set_ImageHeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_ImageWidth(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ImageWidth(pRet);
}

template <class T> long __fastcall
TCOM_ImageT<T>::get_ImageWidth(void)
{
  long pRet;
  OLECHECK(this->get_ImageWidth((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_ImageWidth(long pRet/*[in]*/)
{
  return (*this)->set_ImageWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ImageT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_ImageT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ImageT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

// *********************************************************************//
// DispIntf:  _Image
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E94E-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_ImageDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ImageDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ImageDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_ImageDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_ImageDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                          TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ImageDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(2181));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::_Hyperlink**)ppRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::_HyperlinkPtr __fastcall
_ImageDispT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet);
  return ppRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ImageDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_Picture(void)
{
  BSTR pRet;
  this->get_Picture((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  this->get_PictureType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ImageDispT<T>::get_PictureData(void)
{
  TVariant pRet;
  this->get_PictureData((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_SizeMode(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SizeMode"), DISPID(85));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_SizeMode(void)
{
  unsigned_char pRet;
  this->get_SizeMode((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_SizeMode(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SizeMode"), DISPID(85));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(354));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_PictureAlignment(void)
{
  unsigned_char pRet;
  this->get_PictureAlignment((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_PictureAlignment(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(358));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ImageDispT<T>::get_PictureTiling(void)
{
  TOLEBOOL pRet;
  this->get_PictureTiling((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_PictureTiling(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(358));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkAddress"), DISPID(386));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_HyperlinkAddress(void)
{
  BSTR pRet;
  this->get_HyperlinkAddress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_HyperlinkAddress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkAddress"), DISPID(386));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkSubAddress"), DISPID(390));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_HyperlinkSubAddress(void)
{
  BSTR pRet;
  this->get_HyperlinkSubAddress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_HyperlinkSubAddress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkSubAddress"), DISPID(390));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ImageDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ImageDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ImageDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ImageDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ImageDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  this->get_BackStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ImageDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ImageDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ImageDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ImageDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ImageDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ImageDispT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  this->get_ObjectPalette((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ImageDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_ImageHeight(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageHeight"), DISPID(350));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ImageDispT<T>::get_ImageHeight(void)
{
  long pRet;
  this->get_ImageHeight((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_ImageHeight(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageHeight"), DISPID(350));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_ImageWidth(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageWidth"), DISPID(351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ImageDispT<T>::get_ImageWidth(void)
{
  long pRet;
  this->get_ImageWidth((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_ImageWidth(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImageWidth"), DISPID(351));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ImageDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ImageDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ImageDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_CommandButton
// Interface: _CommandButton
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_CommandButtonT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_CommandButtonT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_CommandButtonT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_CommandButtonT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_CommandButtonT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                  TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_CommandButtonT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  return (*this)->get_Hyperlink(ppRet);
}

template <class T> Access_97::_HyperlinkPtr __fastcall
TCOM_CommandButtonT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
  return ppRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_CommandButtonT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CommandButtonT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Caption(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_Caption(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Caption((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  return (*this)->set_Caption(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Picture(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_Picture(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Picture((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  return (*this)->set_Picture(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CommandButtonT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureData(pRet);
}

template <class T> TVariant __fastcall
TCOM_CommandButtonT<T>::get_PictureData(void)
{
  TVariant pRet;
  OLECHECK(this->get_PictureData((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PictureData(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Transparent(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Transparent(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_Transparent(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Transparent((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Transparent(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Transparent(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Default(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Default(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_Default(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Default((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Default(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Default(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Cancel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Cancel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_Cancel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Cancel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Cancel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Cancel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_AutoRepeat(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoRepeat(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_AutoRepeat(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoRepeat((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_AutoRepeat(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoRepeat(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnPush(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnPush(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnPush(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnPush((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnPush(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnPush(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_HyperlinkAddress(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_HyperlinkAddress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_HyperlinkAddress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_HyperlinkAddress(BSTR pRet/*[in]*/)
{
  return (*this)->set_HyperlinkAddress(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_HyperlinkSubAddress(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_HyperlinkSubAddress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_HyperlinkSubAddress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_HyperlinkSubAddress(BSTR pRet/*[in]*/)
{
  return (*this)->set_HyperlinkSubAddress(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CommandButtonT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pRet);
}

template <class T> long __fastcall
TCOM_CommandButtonT<T>::get_ForeColor(void)
{
  long pRet;
  OLECHECK(this->get_ForeColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_ForeColor(long pRet/*[in]*/)
{
  return (*this)->set_ForeColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FontName(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_FontName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FontName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  return (*this)->set_FontName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontSize(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_FontSize(void)
{
  short pRet;
  OLECHECK(this->get_FontSize((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_FontSize(short pRet/*[in]*/)
{
  return (*this)->set_FontSize(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontWeight(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_FontWeight(void)
{
  short pRet;
  OLECHECK(this->get_FontWeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_FontWeight(short pRet/*[in]*/)
{
  return (*this)->set_FontWeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontItalic(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontItalic(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontUnderline(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TextFontCharSet(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CommandButtonT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TextFontCharSet(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontBold(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_FontBold(void)
{
  short pRet;
  OLECHECK(this->get_FontBold((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_FontBold(short pRet/*[in]*/)
{
  return (*this)->set_FontBold(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_CommandButtonT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CommandButtonT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_CommandButtonT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectPalette(pRet);
}

template <class T> TVariant __fastcall
TCOM_CommandButtonT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_ObjectPalette(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CommandButtonT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_CommandButtonT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CommandButtonT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

// *********************************************************************//
// DispIntf:  _CommandButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E950-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_CommandButtonDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CommandButtonDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandButtonDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_CommandButtonDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_CommandButtonDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                  TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandButtonDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(2181));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::_Hyperlink**)ppRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::_HyperlinkPtr __fastcall
_CommandButtonDispT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet);
  return ppRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandButtonDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CommandButtonDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_Caption(void)
{
  BSTR pRet;
  this->get_Caption((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_Picture(void)
{
  BSTR pRet;
  this->get_Picture((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CommandButtonDispT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  this->get_PictureType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandButtonDispT<T>::get_PictureData(void)
{
  TVariant pRet;
  this->get_PictureData((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Transparent(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparent"), DISPID(46));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_Transparent(void)
{
  TOLEBOOL pRet;
  this->get_Transparent((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Transparent(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparent"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Default(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_Default(void)
{
  TOLEBOOL pRet;
  this->get_Default((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Default(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Cancel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_Cancel(void)
{
  TOLEBOOL pRet;
  this->get_Cancel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Cancel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_AutoRepeat(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoRepeat"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_AutoRepeat(void)
{
  TOLEBOOL pRet;
  this->get_AutoRepeat((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_AutoRepeat(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoRepeat"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnPush(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnPush"), DISPID(152));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnPush(void)
{
  BSTR pRet;
  this->get_OnPush((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnPush(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnPush"), DISPID(152));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_HyperlinkAddress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkAddress"), DISPID(386));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_HyperlinkAddress(void)
{
  BSTR pRet;
  this->get_HyperlinkAddress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_HyperlinkAddress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkAddress"), DISPID(386));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_HyperlinkSubAddress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkSubAddress"), DISPID(390));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_HyperlinkSubAddress(void)
{
  BSTR pRet;
  this->get_HyperlinkSubAddress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_HyperlinkSubAddress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkSubAddress"), DISPID(390));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CommandButtonDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandButtonDispT<T>::get_ForeColor(void)
{
  long pRet;
  this->get_ForeColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_ForeColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_FontName(void)
{
  BSTR pRet;
  this->get_FontName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_FontSize(void)
{
  short pRet;
  this->get_FontSize((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_FontSize(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_FontWeight(void)
{
  short pRet;
  this->get_FontWeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_FontWeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  this->get_FontItalic((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  this->get_FontUnderline((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CommandButtonDispT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  this->get_TextFontCharSet((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_FontBold(void)
{
  short pRet;
  this->get_FontBold((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_FontBold(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CommandButtonDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CommandButtonDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CommandButtonDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CommandButtonDispT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  this->get_ObjectPalette((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CommandButtonDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CommandButtonDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CommandButtonDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_OptionButton
// Interface: _OptionButton
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_OptionButtonT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_OptionButtonT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_OptionButtonT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_OptionButtonT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_OptionButtonT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                 TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_OptionButtonT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_OptionButtonT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionButtonT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OptionValue(long* pRet/*[out,retval]*/)
{
  return (*this)->get_OptionValue(pRet);
}

template <class T> long __fastcall
TCOM_OptionButtonT<T>::get_OptionValue(void)
{
  long pRet;
  OLECHECK(this->get_OptionValue((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OptionValue(long pRet/*[in]*/)
{
  return (*this)->set_OptionValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_DefaultValue(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  return (*this)->set_DefaultValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationRule(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_ValidationRule(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationRule(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationText(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_ValidationText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionButtonT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_TripleState(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TripleState(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_TripleState(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TripleState((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_TripleState(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TripleState(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_OptionButtonT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HideDuplicates(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HideDuplicates(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_OptionButtonT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_OptionButtonT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_OptionButtonT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_OptionButtonT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionButtonT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionButtonT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionButtonT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionButtonT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionButtonT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_OptionButtonT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_OptionButtonT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidth(pRet);
}

template <class T> short __fastcall
TCOM_OptionButtonT<T>::get_ColumnWidth(void)
{
  short pRet;
  OLECHECK(this->get_ColumnWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  return (*this)->set_ColumnWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnOrder(pRet);
}

template <class T> short __fastcall
TCOM_OptionButtonT<T>::get_ColumnOrder(void)
{
  short pRet;
  OLECHECK(this->get_ColumnOrder((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  return (*this)->set_ColumnOrder(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHidden(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHidden(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_OptionButtonT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_OptionButtonT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionButtonT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_OptionButtonT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionButtonT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_BeforeUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_AfterUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionButtonT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionButtonT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

// *********************************************************************//
// DispIntf:  _OptionButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E952-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_OptionButtonDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_OptionButtonDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_OptionButtonDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_OptionButtonDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_OptionButtonDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                 TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_OptionButtonDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_OptionButtonDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionButtonDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OptionValue(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionValue"), DISPID(58));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_OptionButtonDispT<T>::get_OptionValue(void)
{
  long pRet;
  this->get_OptionValue((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OptionValue(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionValue"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_DefaultValue(void)
{
  BSTR pRet;
  this->get_DefaultValue((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_ValidationRule(void)
{
  BSTR pRet;
  this->get_ValidationRule((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_ValidationText(void)
{
  BSTR pRet;
  this->get_ValidationText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionButtonDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_TripleState(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_TripleState(void)
{
  TOLEBOOL pRet;
  this->get_TripleState((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_TripleState(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(326));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionButtonDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  this->get_HideDuplicates((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionButtonDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionButtonDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionButtonDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionButtonDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionButtonDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionButtonDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionButtonDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionButtonDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionButtonDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_OptionButtonDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_OptionButtonDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionButtonDispT<T>::get_ColumnWidth(void)
{
  short pRet;
  this->get_ColumnWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionButtonDispT<T>::get_ColumnOrder(void)
{
  short pRet;
  this->get_ColumnOrder((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHidden((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionButtonDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionButtonDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionButtonDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionButtonDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionButtonDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_BeforeUpdate(void)
{
  BSTR pRet;
  this->get_BeforeUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_AfterUpdate(void)
{
  BSTR pRet;
  this->get_AfterUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionButtonDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionButtonDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Checkbox
// Interface: _Checkbox
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_CheckboxT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_CheckboxT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::Undo(void)
{
  return (*this)->Undo();
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_CheckboxT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_CheckboxT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_CheckboxT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                             TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_CheckboxT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_CheckboxT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CheckboxT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OptionValue(long* pRet/*[out,retval]*/)
{
  return (*this)->get_OptionValue(pRet);
}

template <class T> long __fastcall
TCOM_CheckboxT<T>::get_OptionValue(void)
{
  long pRet;
  OLECHECK(this->get_OptionValue((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OptionValue(long pRet/*[in]*/)
{
  return (*this)->set_OptionValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_DefaultValue(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  return (*this)->set_DefaultValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationRule(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_ValidationRule(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationRule(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationText(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_ValidationText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CheckboxT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_TripleState(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TripleState(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_TripleState(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TripleState((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_TripleState(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TripleState(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_CheckboxT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HideDuplicates(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HideDuplicates(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_CheckboxT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_CheckboxT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_CheckboxT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_CheckboxT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CheckboxT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CheckboxT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CheckboxT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CheckboxT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CheckboxT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_CheckboxT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_CheckboxT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidth(pRet);
}

template <class T> short __fastcall
TCOM_CheckboxT<T>::get_ColumnWidth(void)
{
  short pRet;
  OLECHECK(this->get_ColumnWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  return (*this)->set_ColumnWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnOrder(pRet);
}

template <class T> short __fastcall
TCOM_CheckboxT<T>::get_ColumnOrder(void)
{
  short pRet;
  OLECHECK(this->get_ColumnOrder((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  return (*this)->set_ColumnOrder(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHidden(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHidden(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_CheckboxT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_CheckboxT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CheckboxT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_CheckboxT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CheckboxT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_BeforeUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_AfterUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_CheckboxT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CheckboxT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

// *********************************************************************//
// DispIntf:  _Checkbox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E954-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_CheckboxDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CheckboxDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(2144));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CheckboxDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_CheckboxDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_CheckboxDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                             TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_CheckboxDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CheckboxDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CheckboxDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OptionValue(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionValue"), DISPID(58));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CheckboxDispT<T>::get_OptionValue(void)
{
  long pRet;
  this->get_OptionValue((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OptionValue(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionValue"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_DefaultValue(void)
{
  BSTR pRet;
  this->get_DefaultValue((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_ValidationRule(void)
{
  BSTR pRet;
  this->get_ValidationRule((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_ValidationText(void)
{
  BSTR pRet;
  this->get_ValidationText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CheckboxDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_TripleState(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_TripleState(void)
{
  TOLEBOOL pRet;
  this->get_TripleState((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_TripleState(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(326));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CheckboxDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  this->get_HideDuplicates((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CheckboxDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CheckboxDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CheckboxDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CheckboxDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CheckboxDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CheckboxDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CheckboxDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CheckboxDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CheckboxDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CheckboxDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CheckboxDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CheckboxDispT<T>::get_ColumnWidth(void)
{
  short pRet;
  this->get_ColumnWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CheckboxDispT<T>::get_ColumnOrder(void)
{
  short pRet;
  this->get_ColumnOrder((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHidden((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CheckboxDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CheckboxDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CheckboxDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CheckboxDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CheckboxDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_BeforeUpdate(void)
{
  BSTR pRet;
  this->get_BeforeUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_AfterUpdate(void)
{
  BSTR pRet;
  this->get_AfterUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CheckboxDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CheckboxDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_OptionGroup
// Interface: _OptionGroup
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_OptionGroupT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_OptionGroupT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::Undo(void)
{
  return (*this)->Undo();
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_OptionGroupT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_OptionGroupT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_OptionGroupT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_OptionGroupT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_OptionGroupT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionGroupT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_DefaultValue(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  return (*this)->set_DefaultValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationRule(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_ValidationRule(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationRule(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationText(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_ValidationText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionGroupT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionGroupT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionGroupT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionGroupT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionGroupT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_OptionGroupT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HideDuplicates(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionGroupT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HideDuplicates(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_OptionGroupT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_OptionGroupT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_OptionGroupT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_OptionGroupT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BackStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionGroupT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BackStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_OptionGroupT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionGroupT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionGroupT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionGroupT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_OptionGroupT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionGroupT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionGroupT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_OptionGroupT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidth(pRet);
}

template <class T> short __fastcall
TCOM_OptionGroupT<T>::get_ColumnWidth(void)
{
  short pRet;
  OLECHECK(this->get_ColumnWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  return (*this)->set_ColumnWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnOrder(pRet);
}

template <class T> short __fastcall
TCOM_OptionGroupT<T>::get_ColumnOrder(void)
{
  short pRet;
  OLECHECK(this->get_ColumnOrder((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  return (*this)->set_ColumnOrder(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHidden(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionGroupT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHidden(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionGroupT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionGroupT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_OptionGroupT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_OptionGroupT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_OptionGroupT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_OptionGroupT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionGroupT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_OptionGroupT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_BeforeUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_AfterUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_OptionGroupT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_OptionGroupT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

// *********************************************************************//
// DispIntf:  _OptionGroup
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E956-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_OptionGroupDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_OptionGroupDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(2144));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_OptionGroupDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_OptionGroupDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_OptionGroupDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_OptionGroupDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_OptionGroupDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionGroupDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_DefaultValue(void)
{
  BSTR pRet;
  this->get_DefaultValue((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_ValidationRule(void)
{
  BSTR pRet;
  this->get_ValidationRule((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_ValidationText(void)
{
  BSTR pRet;
  this->get_ValidationText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionGroupDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionGroupDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionGroupDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionGroupDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionGroupDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionGroupDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionGroupDispT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  this->get_HideDuplicates((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionGroupDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionGroupDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionGroupDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionGroupDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionGroupDispT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  this->get_BackStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_OptionGroupDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionGroupDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionGroupDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionGroupDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_OptionGroupDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionGroupDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionGroupDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_OptionGroupDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionGroupDispT<T>::get_ColumnWidth(void)
{
  short pRet;
  this->get_ColumnWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionGroupDispT<T>::get_ColumnOrder(void)
{
  short pRet;
  this->get_ColumnOrder((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionGroupDispT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHidden((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionGroupDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionGroupDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionGroupDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionGroupDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_OptionGroupDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_OptionGroupDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionGroupDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_OptionGroupDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_BeforeUpdate(void)
{
  BSTR pRet;
  this->get_BeforeUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_AfterUpdate(void)
{
  BSTR pRet;
  this->get_AfterUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_OptionGroupDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_OptionGroupDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_BoundObjectFrame
// Interface: _BoundObjectFrame
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_BoundObjectFrameT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_BoundObjectFrameT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_BoundObjectFrameT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Object(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Object(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_BoundObjectFrameT<T>::get_Object(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Object((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectVerbs(Index, pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_ObjectVerbs(long Index/*[in]*/)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ObjectVerbs(Index, (BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_BoundObjectFrameT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_BoundObjectFrameT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                     TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_BoundObjectFrameT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_BoundObjectFrameT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_SizeMode(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SizeMode(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_SizeMode(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SizeMode((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_SizeMode(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SizeMode(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Class(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Class(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_Class(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Class((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Class(BSTR pRet/*[in]*/)
{
  return (*this)->set_Class(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_SourceDoc(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_SourceDoc(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_SourceDoc(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_SourceDoc((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_SourceDoc(BSTR pRet/*[in]*/)
{
  return (*this)->set_SourceDoc(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_SourceItem(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_SourceItem(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_SourceItem(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_SourceItem((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_SourceItem(BSTR pRet/*[in]*/)
{
  return (*this)->set_SourceItem(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_AutoActivate(short* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoActivate(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_AutoActivate(void)
{
  short pRet;
  OLECHECK(this->get_AutoActivate((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_AutoActivate(short pRet/*[in]*/)
{
  return (*this)->set_AutoActivate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_DisplayType(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayType(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_BoundObjectFrameT<T>::get_DisplayType(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_DisplayType((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_DisplayType(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_DisplayType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_UpdateOptions(short* pRet/*[out,retval]*/)
{
  return (*this)->get_UpdateOptions(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_UpdateOptions(void)
{
  short pRet;
  OLECHECK(this->get_UpdateOptions((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_UpdateOptions(short pRet/*[in]*/)
{
  return (*this)->set_UpdateOptions(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Verb(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Verb(pRet);
}

template <class T> long __fastcall
TCOM_BoundObjectFrameT<T>::get_Verb(void)
{
  long pRet;
  OLECHECK(this->get_Verb((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Verb(long pRet/*[in]*/)
{
  return (*this)->set_Verb(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OLETypeAllowed(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OLETypeAllowed(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_OLETypeAllowed(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OLETypeAllowed((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OLETypeAllowed(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OLETypeAllowed(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_BoundObjectFrameT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_BoundObjectFrameT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_BoundObjectFrameT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_BoundObjectFrameT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BackStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BackStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_BoundObjectFrameT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_BoundObjectFrameT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_BoundObjectFrameT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidth(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_ColumnWidth(void)
{
  short pRet;
  OLECHECK(this->get_ColumnWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  return (*this)->set_ColumnWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnOrder(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_ColumnOrder(void)
{
  short pRet;
  OLECHECK(this->get_ColumnOrder((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  return (*this)->set_ColumnOrder(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHidden(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_BoundObjectFrameT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHidden(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_BoundObjectFrameT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_BoundObjectFrameT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectPalette(pRet);
}

template <class T> TVariant __fastcall
TCOM_BoundObjectFrameT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_ObjectPalette(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_LpOleObject(long* pRet/*[out,retval]*/)
{
  return (*this)->get_LpOleObject(pRet);
}

template <class T> long __fastcall
TCOM_BoundObjectFrameT<T>::get_LpOleObject(void)
{
  long pRet;
  OLECHECK(this->get_LpOleObject((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_LpOleObject(long pRet/*[in]*/)
{
  return (*this)->set_LpOleObject(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_ObjectVerbsCount(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectVerbsCount(pRet);
}

template <class T> long __fastcall
TCOM_BoundObjectFrameT<T>::get_ObjectVerbsCount(void)
{
  long pRet;
  OLECHECK(this->get_ObjectVerbsCount((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_ObjectVerbsCount(long pRet/*[in]*/)
{
  return (*this)->set_ObjectVerbsCount(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Action(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Action(pRet);
}

template <class T> short __fastcall
TCOM_BoundObjectFrameT<T>::get_Action(void)
{
  short pRet;
  OLECHECK(this->get_Action((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Action(short pRet/*[in]*/)
{
  return (*this)->set_Action(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_Scaling(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_Scaling(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_Scaling(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_Scaling((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_Scaling(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_Scaling(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OLEType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OLEType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_BoundObjectFrameT<T>::get_OLEType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OLEType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OLEType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OLEType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_BoundObjectFrameT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_BoundObjectFrameT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_BeforeUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_AfterUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnUpdated(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnUpdated(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnUpdated(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnUpdated((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnUpdated(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnUpdated(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_BoundObjectFrameT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_BoundObjectFrameT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

// *********************************************************************//
// DispIntf:  _BoundObjectFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E958-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_BoundObjectFrameDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_BoundObjectFrameDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_BoundObjectFrameDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Object(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(2104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_BoundObjectFrameDispT<T>::get_Object(void)
{
  LPDISPATCH pRet;
  this->get_Object((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbs"), DISPID(2105));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_ObjectVerbs(long Index/*[in]*/)
{
  BSTR pRet;
  this->get_ObjectVerbs(Index, (BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_BoundObjectFrameDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_BoundObjectFrameDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                     TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_BoundObjectFrameDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_BoundObjectFrameDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_SizeMode(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SizeMode"), DISPID(85));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_SizeMode(void)
{
  unsigned_char pRet;
  this->get_SizeMode((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_SizeMode(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SizeMode"), DISPID(85));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Class(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Class"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_Class(void)
{
  BSTR pRet;
  this->get_Class((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Class(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Class"), DISPID(306));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_SourceDoc(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceDoc"), DISPID(130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_SourceDoc(void)
{
  BSTR pRet;
  this->get_SourceDoc((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_SourceDoc(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceDoc"), DISPID(130));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_SourceItem(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceItem"), DISPID(48));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_SourceItem(void)
{
  BSTR pRet;
  this->get_SourceItem((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_SourceItem(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceItem"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_AutoActivate(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoActivate"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_AutoActivate(void)
{
  short pRet;
  this->get_AutoActivate((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_AutoActivate(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoActivate"), DISPID(98));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_DisplayType(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayType"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_BoundObjectFrameDispT<T>::get_DisplayType(void)
{
  TOLEBOOL pRet;
  this->get_DisplayType((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_DisplayType(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayType"), DISPID(304));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_UpdateOptions(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateOptions"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_UpdateOptions(void)
{
  short pRet;
  this->get_UpdateOptions((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_UpdateOptions(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateOptions"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Verb(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Verb"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_BoundObjectFrameDispT<T>::get_Verb(void)
{
  long pRet;
  this->get_Verb((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Verb(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Verb"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OLETypeAllowed(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLETypeAllowed"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_OLETypeAllowed(void)
{
  unsigned_char pRet;
  this->get_OLETypeAllowed((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OLETypeAllowed(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLETypeAllowed"), DISPID(307));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_BoundObjectFrameDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_BoundObjectFrameDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_BoundObjectFrameDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_BoundObjectFrameDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  this->get_BackStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_BoundObjectFrameDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_BoundObjectFrameDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_BoundObjectFrameDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_ColumnWidth(void)
{
  short pRet;
  this->get_ColumnWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_ColumnOrder(void)
{
  short pRet;
  this->get_ColumnOrder((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_BoundObjectFrameDispT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHidden((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_BoundObjectFrameDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_BoundObjectFrameDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_BoundObjectFrameDispT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  this->get_ObjectPalette((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_LpOleObject(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LpOleObject"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_BoundObjectFrameDispT<T>::get_LpOleObject(void)
{
  long pRet;
  this->get_LpOleObject((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_LpOleObject(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LpOleObject"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_ObjectVerbsCount(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbsCount"), DISPID(172));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_BoundObjectFrameDispT<T>::get_ObjectVerbsCount(void)
{
  long pRet;
  this->get_ObjectVerbsCount((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_ObjectVerbsCount(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbsCount"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Action(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_BoundObjectFrameDispT<T>::get_Action(void)
{
  short pRet;
  this->get_Action((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Action(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(305));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_Scaling(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaling"), DISPID(84));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_Scaling(void)
{
  unsigned_char pRet;
  this->get_Scaling((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_Scaling(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaling"), DISPID(84));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OLEType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEType"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_BoundObjectFrameDispT<T>::get_OLEType(void)
{
  unsigned_char pRet;
  this->get_OLEType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OLEType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEType"), DISPID(308));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_BoundObjectFrameDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_BoundObjectFrameDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_BeforeUpdate(void)
{
  BSTR pRet;
  this->get_BeforeUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_AfterUpdate(void)
{
  BSTR pRet;
  this->get_AfterUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnUpdated(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnUpdated"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnUpdated(void)
{
  BSTR pRet;
  this->get_OnUpdated((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnUpdated(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnUpdated"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BoundObjectFrameDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BoundObjectFrameDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Textbox
// Interface: _Textbox
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_TextboxT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_TextboxT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::Undo(void)
{
  return (*this)->Undo();
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_TextboxT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_TextboxT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_TextboxT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                            TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_TextboxT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  return (*this)->get_Hyperlink(ppRet);
}

template <class T> Access_97::_HyperlinkPtr __fastcall
TCOM_TextboxT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
  return ppRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_TextboxT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Format(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Format(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_Format(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Format((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Format(BSTR pRet/*[in]*/)
{
  return (*this)->set_Format(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_DecimalPlaces(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DecimalPlaces(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_DecimalPlaces(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DecimalPlaces((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_DecimalPlaces(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DecimalPlaces(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_InputMask(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_InputMask(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_InputMask(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_InputMask((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_InputMask(BSTR pRet/*[in]*/)
{
  return (*this)->set_InputMask(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_DefaultValue(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  return (*this)->set_DefaultValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationRule(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_ValidationRule(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationRule(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationText(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_ValidationText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_EnterKeyBehavior(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_EnterKeyBehavior(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_EnterKeyBehavior(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_EnterKeyBehavior((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_EnterKeyBehavior(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_EnterKeyBehavior(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_AllowAutoCorrect(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AllowAutoCorrect(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_AllowAutoCorrect(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AllowAutoCorrect((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_AllowAutoCorrect(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AllowAutoCorrect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_FilterLookup(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_FilterLookup(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_FilterLookup(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_FilterLookup((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_FilterLookup(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_FilterLookup(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_AutoTab(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoTab(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_AutoTab(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoTab((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_AutoTab(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoTab(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ScrollBars(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ScrollBars(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_ScrollBars(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ScrollBars((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ScrollBars(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ScrollBars(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HideDuplicates(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HideDuplicates(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_CanGrow(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_CanGrow(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_CanGrow((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_CanGrow(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_CanGrow(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_CanShrink(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_CanShrink(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_CanShrink((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_CanShrink(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_CanShrink(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_RunningSum(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_RunningSum(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_RunningSum(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_RunningSum((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_RunningSum(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_RunningSum(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BackStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BackStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_TextboxT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_TextboxT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pRet);
}

template <class T> long __fastcall
TCOM_TextboxT<T>::get_ForeColor(void)
{
  long pRet;
  OLECHECK(this->get_ForeColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ForeColor(long pRet/*[in]*/)
{
  return (*this)->set_ForeColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FontName(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_FontName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FontName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  return (*this)->set_FontName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontSize(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_FontSize(void)
{
  short pRet;
  OLECHECK(this->get_FontSize((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_FontSize(short pRet/*[in]*/)
{
  return (*this)->set_FontSize(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontWeight(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_FontWeight(void)
{
  short pRet;
  OLECHECK(this->get_FontWeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_FontWeight(short pRet/*[in]*/)
{
  return (*this)->set_FontWeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontItalic(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontItalic(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontUnderline(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TextFontCharSet(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TextFontCharSet(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_TextAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TextAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_TextAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TextAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_TextAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TextAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontBold(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_FontBold(void)
{
  short pRet;
  OLECHECK(this->get_FontBold((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_FontBold(short pRet/*[in]*/)
{
  return (*this)->set_FontBold(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_TextboxT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidth(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_ColumnWidth(void)
{
  short pRet;
  OLECHECK(this->get_ColumnWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  return (*this)->set_ColumnWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnOrder(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_ColumnOrder(void)
{
  short pRet;
  OLECHECK(this->get_ColumnOrder((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  return (*this)->set_ColumnOrder(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHidden(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHidden(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TextboxT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Text(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Text(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_Text(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Text((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Text(BSTR pRet/*[in]*/)
{
  return (*this)->set_Text(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_SelText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_SelText(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_SelText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_SelText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_SelText(BSTR pRet/*[in]*/)
{
  return (*this)->set_SelText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_SelStart(short* pRet/*[out,retval]*/)
{
  return (*this)->get_SelStart(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_SelStart(void)
{
  short pRet;
  OLECHECK(this->get_SelStart((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_SelStart(short pRet/*[in]*/)
{
  return (*this)->set_SelStart(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_SelLength(short* pRet/*[out,retval]*/)
{
  return (*this)->get_SelLength(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_SelLength(void)
{
  short pRet;
  OLECHECK(this->get_SelLength((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_SelLength(short pRet/*[in]*/)
{
  return (*this)->set_SelLength(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_TextAlignGeneral(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TextAlignGeneral(pRet);
}

template <class T> short __fastcall
TCOM_TextboxT<T>::get_TextAlignGeneral(void)
{
  short pRet;
  OLECHECK(this->get_TextAlignGeneral((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_TextAlignGeneral(short pRet/*[in]*/)
{
  return (*this)->set_TextAlignGeneral(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_Coltyp(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Coltyp(pRet);
}

template <class T> long __fastcall
TCOM_TextboxT<T>::get_Coltyp(void)
{
  long pRet;
  OLECHECK(this->get_Coltyp((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_Coltyp(long pRet/*[in]*/)
{
  return (*this)->set_Coltyp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_FormatPictureText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FormatPictureText(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_FormatPictureText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FormatPictureText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_FormatPictureText(BSTR pRet/*[in]*/)
{
  return (*this)->set_FormatPictureText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TextboxT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_BeforeUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_AfterUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnChange(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnChange(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnChange(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnChange((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnChange(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnChange(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_TextboxT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TextboxT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

// *********************************************************************//
// DispIntf:  _Textbox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E946-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_TextboxDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_TextboxDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(2144));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_TextboxDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_TextboxDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_TextboxDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                            TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_TextboxDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(2181));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::_Hyperlink**)ppRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::_HyperlinkPtr __fastcall
_TextboxDispT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet);
  return ppRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_TextboxDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Format(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_Format(void)
{
  BSTR pRet;
  this->get_Format((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Format(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_DecimalPlaces(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DecimalPlaces"), DISPID(67));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_DecimalPlaces(void)
{
  unsigned_char pRet;
  this->get_DecimalPlaces((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_DecimalPlaces(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DecimalPlaces"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_InputMask(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMask"), DISPID(68));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_InputMask(void)
{
  BSTR pRet;
  this->get_InputMask((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_InputMask(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMask"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_DefaultValue(void)
{
  BSTR pRet;
  this->get_DefaultValue((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_ValidationRule(void)
{
  BSTR pRet;
  this->get_ValidationRule((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_ValidationText(void)
{
  BSTR pRet;
  this->get_ValidationText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_EnterKeyBehavior(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnterKeyBehavior"), DISPID(70));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_EnterKeyBehavior(void)
{
  TOLEBOOL pRet;
  this->get_EnterKeyBehavior((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_EnterKeyBehavior(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EnterKeyBehavior"), DISPID(70));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_AllowAutoCorrect(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowAutoCorrect"), DISPID(383));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_AllowAutoCorrect(void)
{
  TOLEBOOL pRet;
  this->get_AllowAutoCorrect((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_AllowAutoCorrect(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowAutoCorrect"), DISPID(383));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_FilterLookup(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterLookup"), DISPID(337));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_FilterLookup(void)
{
  unsigned_char pRet;
  this->get_FilterLookup((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_FilterLookup(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterLookup"), DISPID(337));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_AutoTab(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoTab"), DISPID(69));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_AutoTab(void)
{
  TOLEBOOL pRet;
  this->get_AutoTab((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_AutoTab(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoTab"), DISPID(69));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ScrollBars(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(149));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_ScrollBars(void)
{
  unsigned_char pRet;
  this->get_ScrollBars((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ScrollBars(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(149));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  this->get_HideDuplicates((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanGrow"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_CanGrow(void)
{
  TOLEBOOL pRet;
  this->get_CanGrow((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_CanGrow(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanGrow"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanShrink"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_CanShrink(void)
{
  TOLEBOOL pRet;
  this->get_CanShrink((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_CanShrink(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanShrink"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_RunningSum(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RunningSum"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_RunningSum(void)
{
  unsigned_char pRet;
  this->get_RunningSum((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_RunningSum(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RunningSum"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  this->get_BackStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_TextboxDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_TextboxDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_TextboxDispT<T>::get_ForeColor(void)
{
  long pRet;
  this->get_ForeColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ForeColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_FontName(void)
{
  BSTR pRet;
  this->get_FontName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_FontSize(void)
{
  short pRet;
  this->get_FontSize((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_FontSize(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_FontWeight(void)
{
  short pRet;
  this->get_FontWeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_FontWeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  this->get_FontItalic((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  this->get_FontUnderline((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  this->get_TextFontCharSet((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_TextAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_TextAlign(void)
{
  unsigned_char pRet;
  this->get_TextAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_TextAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(133));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_FontBold(void)
{
  short pRet;
  this->get_FontBold((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_FontBold(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_TextboxDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_ColumnWidth(void)
{
  short pRet;
  this->get_ColumnWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_ColumnOrder(void)
{
  short pRet;
  this->get_ColumnOrder((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHidden((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TextboxDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Text(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_Text(void)
{
  BSTR pRet;
  this->get_Text((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Text(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(298));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_SelText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelText"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_SelText(void)
{
  BSTR pRet;
  this->get_SelText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_SelText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelText"), DISPID(302));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_SelStart(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_SelStart(void)
{
  short pRet;
  this->get_SelStart((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_SelStart(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(301));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_SelLength(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_SelLength(void)
{
  short pRet;
  this->get_SelLength((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_SelLength(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(300));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_TextAlignGeneral(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlignGeneral"), DISPID(134));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TextboxDispT<T>::get_TextAlignGeneral(void)
{
  short pRet;
  this->get_TextAlignGeneral((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_TextAlignGeneral(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlignGeneral"), DISPID(134));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_Coltyp(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Coltyp"), DISPID(136));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_TextboxDispT<T>::get_Coltyp(void)
{
  long pRet;
  this->get_Coltyp((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_Coltyp(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Coltyp"), DISPID(136));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_FormatPictureText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormatPictureText"), DISPID(135));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_FormatPictureText(void)
{
  BSTR pRet;
  this->get_FormatPictureText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_FormatPictureText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormatPictureText"), DISPID(135));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TextboxDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_BeforeUpdate(void)
{
  BSTR pRet;
  this->get_BeforeUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_AfterUpdate(void)
{
  BSTR pRet;
  this->get_AfterUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnChange(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnChange"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnChange(void)
{
  BSTR pRet;
  this->get_OnChange((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnChange(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnChange"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TextboxDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TextboxDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_ListBox
// Interface: _ListBox
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_ListBoxT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ListBoxT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::Undo(void)
{
  return (*this)->Undo();
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                             TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Column(Index, Row, pRet);
}

template <class T> TVariant __fastcall
TCOM_ListBoxT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->get_Column(Index, Row, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Selected(long lRow/*[in]*/, long* pRet/*[out,retval]*/)
{
  return (*this)->get_Selected(lRow, pRet);
}

template <class T> long __fastcall
TCOM_ListBoxT<T>::get_Selected(long lRow/*[in]*/)
{
  long pRet;
  OLECHECK(this->get_Selected(lRow, (long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Selected(long lRow/*[in]*/, long pRet/*[in]*/)
{
  return (*this)->set_Selected(lRow, pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_ListBoxT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_ItemData(Index, pRet);
}

template <class T> TVariant __fastcall
TCOM_ListBoxT<T>::get_ItemData(long Index/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->get_ItemData(Index, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_ListBoxT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_ListBoxT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ItemsSelected(Access_97::_ItemsSelectedPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_ItemsSelected(pRet);
}

template <class T> Access_97::_ItemsSelectedPtr __fastcall
TCOM_ListBoxT<T>::get_ItemsSelected(void)
{
  Access_97::_ItemsSelectedPtr pRet;
  OLECHECK(this->get_ItemsSelected((Access_97::_ItemsSelectedPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                            TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_ListBoxT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  return (*this)->get_Hyperlink(ppRet);
}

template <class T> Access_97::_HyperlinkPtr __fastcall
TCOM_ListBoxT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
  return ppRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_ListBoxT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ListBoxT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_RowSourceType(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_RowSourceType(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_RowSourceType(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_RowSourceType((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_RowSourceType(BSTR pRet/*[in]*/)
{
  return (*this)->set_RowSourceType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_RowSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_RowSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_RowSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_RowSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_RowSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_RowSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ColumnCount(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnCount(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_ColumnCount(void)
{
  short pRet;
  OLECHECK(this->get_ColumnCount((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ColumnCount(short pRet/*[in]*/)
{
  return (*this)->set_ColumnCount(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHeads(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_ColumnHeads(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHeads((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ColumnHeads(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHeads(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ColumnWidths(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidths(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_ColumnWidths(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ColumnWidths((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ColumnWidths(BSTR pRet/*[in]*/)
{
  return (*this)->set_ColumnWidths(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_BoundColumn(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BoundColumn(pRet);
}

template <class T> long __fastcall
TCOM_ListBoxT<T>::get_BoundColumn(void)
{
  long pRet;
  OLECHECK(this->get_BoundColumn((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_BoundColumn(long pRet/*[in]*/)
{
  return (*this)->set_BoundColumn(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_DefaultValue(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  return (*this)->set_DefaultValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationRule(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_ValidationRule(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationRule(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_ValidationText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ListBoxT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_MultiSelect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_MultiSelect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ListBoxT<T>::get_MultiSelect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_MultiSelect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_MultiSelect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_MultiSelect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HideDuplicates(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HideDuplicates(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_ListBoxT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ListBoxT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ListBoxT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ListBoxT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ListBoxT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ListBoxT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_ListBoxT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pRet);
}

template <class T> long __fastcall
TCOM_ListBoxT<T>::get_ForeColor(void)
{
  long pRet;
  OLECHECK(this->get_ForeColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ForeColor(long pRet/*[in]*/)
{
  return (*this)->set_ForeColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FontName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_FontName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FontName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  return (*this)->set_FontName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontSize(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_FontSize(void)
{
  short pRet;
  OLECHECK(this->get_FontSize((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_FontSize(short pRet/*[in]*/)
{
  return (*this)->set_FontSize(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontWeight(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_FontWeight(void)
{
  short pRet;
  OLECHECK(this->get_FontWeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_FontWeight(short pRet/*[in]*/)
{
  return (*this)->set_FontWeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontItalic(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontItalic(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontUnderline(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TextFontCharSet(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ListBoxT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TextFontCharSet(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontBold(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_FontBold(void)
{
  short pRet;
  OLECHECK(this->get_FontBold((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_FontBold(short pRet/*[in]*/)
{
  return (*this)->set_FontBold(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_ListBoxT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidth(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_ColumnWidth(void)
{
  short pRet;
  OLECHECK(this->get_ColumnWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  return (*this)->set_ColumnWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnOrder(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_ColumnOrder(void)
{
  short pRet;
  OLECHECK(this->get_ColumnOrder((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  return (*this)->set_ColumnOrder(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHidden(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHidden(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ListBoxT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_ListBoxT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ListCount(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ListCount(pRet);
}

template <class T> long __fastcall
TCOM_ListBoxT<T>::get_ListCount(void)
{
  long pRet;
  OLECHECK(this->get_ListCount((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ListCount(long pRet/*[in]*/)
{
  return (*this)->set_ListCount(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_ListIndex(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ListIndex(pRet);
}

template <class T> long __fastcall
TCOM_ListBoxT<T>::get_ListIndex(void)
{
  long pRet;
  OLECHECK(this->get_ListIndex((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_ListIndex(long pRet/*[in]*/)
{
  return (*this)->set_ListIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListBoxT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_BeforeUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_AfterUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_ListBoxT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ListBoxT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

// *********************************************************************//
// DispIntf:  _ListBox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E95A-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_ListBoxDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListBoxDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(2144));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                             TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Column"), DISPID(2101));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Row /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ListBoxDispT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/)
{
  TVariant pRet;
  this->get_Column(Index, Row, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Selected(long lRow/*[in]*/, long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(2113));
  TAutoArgs<1> _args;
  _args[1] = lRow /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ListBoxDispT<T>::get_Selected(long lRow/*[in]*/)
{
  long pRet;
  this->get_Selected(lRow, (long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Selected(long lRow/*[in]*/, long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(2113));
  TAutoArgs<2> _args;
  _args[1] = lRow /*[VT_I4:0]*/;
  _args[2] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ListBoxDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemData"), DISPID(2103));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ListBoxDispT<T>::get_ItemData(long Index/*[in]*/)
{
  TVariant pRet;
  this->get_ItemData(Index, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_ListBoxDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_ListBoxDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ItemsSelected(Access_97::_ItemsSelectedPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemsSelected"), DISPID(2137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::_ItemsSelected**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::_ItemsSelectedPtr __fastcall
_ListBoxDispT<T>::get_ItemsSelected(void)
{
  Access_97::_ItemsSelectedPtr pRet;
  this->get_ItemsSelected((Access_97::_ItemsSelectedPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                            TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ListBoxDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(2181));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::_Hyperlink**)ppRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::_HyperlinkPtr __fastcall
_ListBoxDispT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet);
  return ppRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ListBoxDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ListBoxDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_RowSourceType(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSourceType"), DISPID(90));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_RowSourceType(void)
{
  BSTR pRet;
  this->get_RowSourceType((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_RowSourceType(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSourceType"), DISPID(90));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_RowSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSource"), DISPID(88));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_RowSource(void)
{
  BSTR pRet;
  this->get_RowSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_RowSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSource"), DISPID(88));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ColumnCount(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnCount"), DISPID(66));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_ColumnCount(void)
{
  short pRet;
  this->get_ColumnCount((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ColumnCount(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnCount"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeads"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_ColumnHeads(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHeads((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ColumnHeads(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeads"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ColumnWidths(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidths"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_ColumnWidths(void)
{
  BSTR pRet;
  this->get_ColumnWidths((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ColumnWidths(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidths"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_BoundColumn(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundColumn"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ListBoxDispT<T>::get_BoundColumn(void)
{
  long pRet;
  this->get_BoundColumn((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_BoundColumn(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundColumn"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_DefaultValue(void)
{
  BSTR pRet;
  this->get_DefaultValue((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_ValidationRule(void)
{
  BSTR pRet;
  this->get_ValidationRule((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_ValidationText(void)
{
  BSTR pRet;
  this->get_ValidationText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ListBoxDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_MultiSelect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(325));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ListBoxDispT<T>::get_MultiSelect(void)
{
  unsigned_char pRet;
  this->get_MultiSelect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_MultiSelect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiSelect"), DISPID(325));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  this->get_HideDuplicates((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ListBoxDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ListBoxDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ListBoxDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ListBoxDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ListBoxDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ListBoxDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ListBoxDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ListBoxDispT<T>::get_ForeColor(void)
{
  long pRet;
  this->get_ForeColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ForeColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_FontName(void)
{
  BSTR pRet;
  this->get_FontName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_FontSize(void)
{
  short pRet;
  this->get_FontSize((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_FontSize(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_FontWeight(void)
{
  short pRet;
  this->get_FontWeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_FontWeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  this->get_FontItalic((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  this->get_FontUnderline((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ListBoxDispT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  this->get_TextFontCharSet((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_FontBold(void)
{
  short pRet;
  this->get_FontBold((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_FontBold(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ListBoxDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_ColumnWidth(void)
{
  short pRet;
  this->get_ColumnWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_ColumnOrder(void)
{
  short pRet;
  this->get_ColumnOrder((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHidden((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ListBoxDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ListBoxDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ListCount(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCount"), DISPID(241));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ListBoxDispT<T>::get_ListCount(void)
{
  long pRet;
  this->get_ListCount((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ListCount(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCount"), DISPID(241));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_ListIndex(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(242));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ListBoxDispT<T>::get_ListIndex(void)
{
  long pRet;
  this->get_ListIndex((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_ListIndex(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(242));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ListBoxDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_BeforeUpdate(void)
{
  BSTR pRet;
  this->get_BeforeUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_AfterUpdate(void)
{
  BSTR pRet;
  this->get_AfterUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListBoxDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListBoxDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Combobox
// Interface: _Combobox
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_ComboboxT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ComboboxT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::Undo(void)
{
  return (*this)->Undo();
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::Dropdown(void)
{
  return (*this)->Dropdown();
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                              TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Column(Index, Row, pRet);
}

template <class T> TVariant __fastcall
TCOM_ComboboxT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->get_Column(Index, Row, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_ComboboxT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_ItemData(Index, pRet);
}

template <class T> TVariant __fastcall
TCOM_ComboboxT<T>::get_ItemData(long Index/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->get_ItemData(Index, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_ComboboxT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_ComboboxT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                             TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_ComboboxT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  return (*this)->get_Hyperlink(ppRet);
}

template <class T> Access_97::_HyperlinkPtr __fastcall
TCOM_ComboboxT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  OLECHECK(this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet));
  return ppRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_ComboboxT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Format(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Format(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_Format(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Format((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Format(BSTR pRet/*[in]*/)
{
  return (*this)->set_Format(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_DecimalPlaces(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DecimalPlaces(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_DecimalPlaces(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DecimalPlaces((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_DecimalPlaces(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DecimalPlaces(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_InputMask(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_InputMask(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_InputMask(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_InputMask((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_InputMask(BSTR pRet/*[in]*/)
{
  return (*this)->set_InputMask(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_RowSourceType(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_RowSourceType(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_RowSourceType(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_RowSourceType((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_RowSourceType(BSTR pRet/*[in]*/)
{
  return (*this)->set_RowSourceType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_RowSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_RowSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_RowSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_RowSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_RowSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_RowSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ColumnCount(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnCount(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_ColumnCount(void)
{
  short pRet;
  OLECHECK(this->get_ColumnCount((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ColumnCount(short pRet/*[in]*/)
{
  return (*this)->set_ColumnCount(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHeads(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_ColumnHeads(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHeads((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ColumnHeads(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHeads(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ColumnWidths(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidths(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_ColumnWidths(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ColumnWidths((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ColumnWidths(BSTR pRet/*[in]*/)
{
  return (*this)->set_ColumnWidths(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_BoundColumn(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BoundColumn(pRet);
}

template <class T> long __fastcall
TCOM_ComboboxT<T>::get_BoundColumn(void)
{
  long pRet;
  OLECHECK(this->get_BoundColumn((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_BoundColumn(long pRet/*[in]*/)
{
  return (*this)->set_BoundColumn(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ListRows(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ListRows(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_ListRows(void)
{
  short pRet;
  OLECHECK(this->get_ListRows((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ListRows(short pRet/*[in]*/)
{
  return (*this)->set_ListRows(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ListWidth(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ListWidth(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_ListWidth(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ListWidth((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ListWidth(BSTR pRet/*[in]*/)
{
  return (*this)->set_ListWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_LimitToList(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_LimitToList(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_LimitToList(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_LimitToList((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_LimitToList(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_LimitToList(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_AutoExpand(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoExpand(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_AutoExpand(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoExpand((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_AutoExpand(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoExpand(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_DefaultValue(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  return (*this)->set_DefaultValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationRule(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_ValidationRule(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationRule(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_ValidationText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_AllowAutoCorrect(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AllowAutoCorrect(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_AllowAutoCorrect(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AllowAutoCorrect((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_AllowAutoCorrect(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AllowAutoCorrect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HideDuplicates(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HideDuplicates(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BackStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BackStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_ComboboxT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_ComboboxT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pRet);
}

template <class T> long __fastcall
TCOM_ComboboxT<T>::get_ForeColor(void)
{
  long pRet;
  OLECHECK(this->get_ForeColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ForeColor(long pRet/*[in]*/)
{
  return (*this)->set_ForeColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FontName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_FontName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FontName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  return (*this)->set_FontName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontSize(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_FontSize(void)
{
  short pRet;
  OLECHECK(this->get_FontSize((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_FontSize(short pRet/*[in]*/)
{
  return (*this)->set_FontSize(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontWeight(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_FontWeight(void)
{
  short pRet;
  OLECHECK(this->get_FontWeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_FontWeight(short pRet/*[in]*/)
{
  return (*this)->set_FontWeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontItalic(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontItalic(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontUnderline(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TextFontCharSet(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TextFontCharSet(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_TextAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TextAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_TextAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TextAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_TextAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TextAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontBold(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_FontBold(void)
{
  short pRet;
  OLECHECK(this->get_FontBold((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_FontBold(short pRet/*[in]*/)
{
  return (*this)->set_FontBold(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_ComboboxT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidth(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_ColumnWidth(void)
{
  short pRet;
  OLECHECK(this->get_ColumnWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  return (*this)->set_ColumnWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnOrder(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_ColumnOrder(void)
{
  short pRet;
  OLECHECK(this->get_ColumnOrder((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  return (*this)->set_ColumnOrder(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHidden(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHidden(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ComboboxT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Text(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Text(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_Text(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Text((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Text(BSTR pRet/*[in]*/)
{
  return (*this)->set_Text(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_SelText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_SelText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_SelText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_SelText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_SelText(BSTR pRet/*[in]*/)
{
  return (*this)->set_SelText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_SelStart(short* pRet/*[out,retval]*/)
{
  return (*this)->get_SelStart(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_SelStart(void)
{
  short pRet;
  OLECHECK(this->get_SelStart((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_SelStart(short pRet/*[in]*/)
{
  return (*this)->set_SelStart(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_SelLength(short* pRet/*[out,retval]*/)
{
  return (*this)->get_SelLength(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_SelLength(void)
{
  short pRet;
  OLECHECK(this->get_SelLength((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_SelLength(short pRet/*[in]*/)
{
  return (*this)->set_SelLength(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_TextAlignGeneral(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TextAlignGeneral(pRet);
}

template <class T> short __fastcall
TCOM_ComboboxT<T>::get_TextAlignGeneral(void)
{
  short pRet;
  OLECHECK(this->get_TextAlignGeneral((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_TextAlignGeneral(short pRet/*[in]*/)
{
  return (*this)->set_TextAlignGeneral(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_FormatPictureText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FormatPictureText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_FormatPictureText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FormatPictureText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_FormatPictureText(BSTR pRet/*[in]*/)
{
  return (*this)->set_FormatPictureText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_Coltyp(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Coltyp(pRet);
}

template <class T> long __fastcall
TCOM_ComboboxT<T>::get_Coltyp(void)
{
  long pRet;
  OLECHECK(this->get_Coltyp((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_Coltyp(long pRet/*[in]*/)
{
  return (*this)->set_Coltyp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ListCount(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ListCount(pRet);
}

template <class T> long __fastcall
TCOM_ComboboxT<T>::get_ListCount(void)
{
  long pRet;
  OLECHECK(this->get_ListCount((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ListCount(long pRet/*[in]*/)
{
  return (*this)->set_ListCount(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_ListIndex(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ListIndex(pRet);
}

template <class T> long __fastcall
TCOM_ComboboxT<T>::get_ListIndex(void)
{
  long pRet;
  OLECHECK(this->get_ListIndex((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_ListIndex(long pRet/*[in]*/)
{
  return (*this)->set_ListIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ComboboxT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_BeforeUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_AfterUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnChange(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnChange(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnChange(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnChange((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnChange(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnChange(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnNotInList(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnNotInList(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnNotInList(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnNotInList((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnNotInList(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnNotInList(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_ComboboxT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ComboboxT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

// *********************************************************************//
// DispIntf:  _Combobox
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E95C-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_ComboboxDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ComboboxDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(2144));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::Dropdown()
{
  _TDispID _dispid(*this, OLETEXT("Dropdown"), DISPID(2143));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/, 
                              TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Column"), DISPID(2101));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Row /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ComboboxDispT<T>::get_Column(long Index/*[in]*/, TVariantInParam Row/*[in,opt]*/)
{
  TVariant pRet;
  this->get_Column(Index, Row, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ComboboxDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ItemData(long Index/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ItemData"), DISPID(2103));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ComboboxDispT<T>::get_ItemData(long Index/*[in]*/)
{
  TVariant pRet;
  this->get_ItemData(Index, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_ComboboxDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_ComboboxDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                             TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ComboboxDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Hyperlink(Access_97::_HyperlinkPtr* ppRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hyperlink"), DISPID(2181));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::_Hyperlink**)ppRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::_HyperlinkPtr __fastcall
_ComboboxDispT<T>::get_Hyperlink(void)
{
  Access_97::_HyperlinkPtr ppRet;
  this->get_Hyperlink((Access_97::_HyperlinkPtr*)&ppRet);
  return ppRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ComboboxDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Format(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_Format(void)
{
  BSTR pRet;
  this->get_Format((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Format(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_DecimalPlaces(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DecimalPlaces"), DISPID(67));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_DecimalPlaces(void)
{
  unsigned_char pRet;
  this->get_DecimalPlaces((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_DecimalPlaces(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DecimalPlaces"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_InputMask(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMask"), DISPID(68));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_InputMask(void)
{
  BSTR pRet;
  this->get_InputMask((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_InputMask(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InputMask"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_RowSourceType(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSourceType"), DISPID(90));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_RowSourceType(void)
{
  BSTR pRet;
  this->get_RowSourceType((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_RowSourceType(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSourceType"), DISPID(90));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_RowSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSource"), DISPID(88));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_RowSource(void)
{
  BSTR pRet;
  this->get_RowSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_RowSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSource"), DISPID(88));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ColumnCount(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnCount"), DISPID(66));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_ColumnCount(void)
{
  short pRet;
  this->get_ColumnCount((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ColumnCount(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnCount"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeads"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_ColumnHeads(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHeads((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ColumnHeads(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeads"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ColumnWidths(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidths"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_ColumnWidths(void)
{
  BSTR pRet;
  this->get_ColumnWidths((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ColumnWidths(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidths"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_BoundColumn(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundColumn"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ComboboxDispT<T>::get_BoundColumn(void)
{
  long pRet;
  this->get_BoundColumn((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_BoundColumn(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BoundColumn"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ListRows(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListRows"), DISPID(150));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_ListRows(void)
{
  short pRet;
  this->get_ListRows((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ListRows(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListRows"), DISPID(150));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ListWidth(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListWidth"), DISPID(151));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_ListWidth(void)
{
  BSTR pRet;
  this->get_ListWidth((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ListWidth(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListWidth"), DISPID(151));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_LimitToList(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LimitToList"), DISPID(63));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_LimitToList(void)
{
  TOLEBOOL pRet;
  this->get_LimitToList((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_LimitToList(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LimitToList"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_AutoExpand(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoExpand"), DISPID(64));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_AutoExpand(void)
{
  TOLEBOOL pRet;
  this->get_AutoExpand((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_AutoExpand(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoExpand"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_DefaultValue(void)
{
  BSTR pRet;
  this->get_DefaultValue((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_ValidationRule(void)
{
  BSTR pRet;
  this->get_ValidationRule((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_ValidationText(void)
{
  BSTR pRet;
  this->get_ValidationText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_AllowAutoCorrect(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowAutoCorrect"), DISPID(383));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_AllowAutoCorrect(void)
{
  TOLEBOOL pRet;
  this->get_AllowAutoCorrect((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_AllowAutoCorrect(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowAutoCorrect"), DISPID(383));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  this->get_HideDuplicates((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  this->get_BackStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ComboboxDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ComboboxDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ComboboxDispT<T>::get_ForeColor(void)
{
  long pRet;
  this->get_ForeColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ForeColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_FontName(void)
{
  BSTR pRet;
  this->get_FontName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_FontSize(void)
{
  short pRet;
  this->get_FontSize((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_FontSize(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_FontWeight(void)
{
  short pRet;
  this->get_FontWeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_FontWeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  this->get_FontItalic((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  this->get_FontUnderline((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  this->get_TextFontCharSet((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_TextAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(133));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_TextAlign(void)
{
  unsigned_char pRet;
  this->get_TextAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_TextAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlign"), DISPID(133));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_FontBold(void)
{
  short pRet;
  this->get_FontBold((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_FontBold(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ComboboxDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_ColumnWidth(void)
{
  short pRet;
  this->get_ColumnWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_ColumnOrder(void)
{
  short pRet;
  this->get_ColumnOrder((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHidden((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ComboboxDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Text(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(298));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_Text(void)
{
  BSTR pRet;
  this->get_Text((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Text(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(298));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_SelText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelText"), DISPID(302));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_SelText(void)
{
  BSTR pRet;
  this->get_SelText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_SelText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelText"), DISPID(302));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_SelStart(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(301));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_SelStart(void)
{
  short pRet;
  this->get_SelStart((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_SelStart(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelStart"), DISPID(301));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_SelLength(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(300));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_SelLength(void)
{
  short pRet;
  this->get_SelLength((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_SelLength(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLength"), DISPID(300));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_TextAlignGeneral(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlignGeneral"), DISPID(134));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ComboboxDispT<T>::get_TextAlignGeneral(void)
{
  short pRet;
  this->get_TextAlignGeneral((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_TextAlignGeneral(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextAlignGeneral"), DISPID(134));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_FormatPictureText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormatPictureText"), DISPID(135));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_FormatPictureText(void)
{
  BSTR pRet;
  this->get_FormatPictureText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_FormatPictureText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormatPictureText"), DISPID(135));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_Coltyp(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Coltyp"), DISPID(136));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ComboboxDispT<T>::get_Coltyp(void)
{
  long pRet;
  this->get_Coltyp((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_Coltyp(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Coltyp"), DISPID(136));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ListCount(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCount"), DISPID(241));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ComboboxDispT<T>::get_ListCount(void)
{
  long pRet;
  this->get_ListCount((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ListCount(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCount"), DISPID(241));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_ListIndex(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(242));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ComboboxDispT<T>::get_ListIndex(void)
{
  long pRet;
  this->get_ListIndex((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_ListIndex(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(242));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ComboboxDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_BeforeUpdate(void)
{
  BSTR pRet;
  this->get_BeforeUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_AfterUpdate(void)
{
  BSTR pRet;
  this->get_AfterUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnChange(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnChange"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnChange(void)
{
  BSTR pRet;
  this->get_OnChange((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnChange(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnChange"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnNotInList(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnNotInList"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnNotInList(void)
{
  BSTR pRet;
  this->get_OnNotInList((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnNotInList(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnNotInList"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ComboboxDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ComboboxDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_ObjectFrame
// Interface: _ObjectFrame
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_ObjectFrameT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ObjectFrameT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_ObjectFrameT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Object(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Object(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ObjectFrameT<T>::get_Object(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Object((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectVerbs(Index, pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_ObjectVerbs(long Index/*[in]*/)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ObjectVerbs(Index, (BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_ObjectFrameT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_ObjectFrameT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_ObjectFrameT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_ObjectFrameT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_SizeMode(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SizeMode(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_SizeMode(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SizeMode((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_SizeMode(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SizeMode(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OLEClass(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OLEClass(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OLEClass(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OLEClass((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OLEClass(BSTR pRet/*[in]*/)
{
  return (*this)->set_OLEClass(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Item(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Item(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_Item(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Item((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Item(BSTR pRet/*[in]*/)
{
  return (*this)->set_Item(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_RowSourceType(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_RowSourceType(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_RowSourceType(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_RowSourceType((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_RowSourceType(BSTR pRet/*[in]*/)
{
  return (*this)->set_RowSourceType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_RowSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_RowSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_RowSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_RowSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_RowSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_RowSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_LinkChildFields(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_LinkChildFields(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_LinkChildFields(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_LinkChildFields((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_LinkChildFields(BSTR pRet/*[in]*/)
{
  return (*this)->set_LinkChildFields(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_LinkMasterFields(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_LinkMasterFields(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_LinkMasterFields(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_LinkMasterFields((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_LinkMasterFields(BSTR pRet/*[in]*/)
{
  return (*this)->set_LinkMasterFields(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_AutoActivate(short* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoActivate(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_AutoActivate(void)
{
  short pRet;
  OLECHECK(this->get_AutoActivate((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_AutoActivate(short pRet/*[in]*/)
{
  return (*this)->set_AutoActivate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_DisplayType(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayType(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ObjectFrameT<T>::get_DisplayType(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_DisplayType((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_DisplayType(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_DisplayType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_UpdateOptions(short* pRet/*[out,retval]*/)
{
  return (*this)->get_UpdateOptions(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_UpdateOptions(void)
{
  short pRet;
  OLECHECK(this->get_UpdateOptions((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_UpdateOptions(short pRet/*[in]*/)
{
  return (*this)->set_UpdateOptions(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Verb(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Verb(pRet);
}

template <class T> long __fastcall
TCOM_ObjectFrameT<T>::get_Verb(void)
{
  long pRet;
  OLECHECK(this->get_Verb((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Verb(long pRet/*[in]*/)
{
  return (*this)->set_Verb(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OLEType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OLEType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_OLEType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OLEType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OLEType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OLEType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OLETypeAllowed(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OLETypeAllowed(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_OLETypeAllowed(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OLETypeAllowed((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OLETypeAllowed(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OLETypeAllowed(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_SourceObject(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_SourceObject(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_SourceObject(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_SourceObject((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_SourceObject(BSTR pRet/*[in]*/)
{
  return (*this)->set_SourceObject(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Class(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Class(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_Class(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Class((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Class(BSTR pRet/*[in]*/)
{
  return (*this)->set_Class(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_SourceDoc(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_SourceDoc(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_SourceDoc(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_SourceDoc((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_SourceDoc(BSTR pRet/*[in]*/)
{
  return (*this)->set_SourceDoc(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_SourceItem(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_SourceItem(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_SourceItem(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_SourceItem((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_SourceItem(BSTR pRet/*[in]*/)
{
  return (*this)->set_SourceItem(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_ColumnCount(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnCount(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_ColumnCount(void)
{
  short pRet;
  OLECHECK(this->get_ColumnCount((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_ColumnCount(short pRet/*[in]*/)
{
  return (*this)->set_ColumnCount(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHeads(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ObjectFrameT<T>::get_ColumnHeads(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHeads((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_ColumnHeads(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHeads(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ObjectFrameT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OleData(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OleData(pRet);
}

template <class T> TVariant __fastcall
TCOM_ObjectFrameT<T>::get_OleData(void)
{
  TVariant pRet;
  OLECHECK(this->get_OleData((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OleData(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_OleData(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_UpdateMethod(short* pRet/*[out,retval]*/)
{
  return (*this)->get_UpdateMethod(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_UpdateMethod(void)
{
  short pRet;
  OLECHECK(this->get_UpdateMethod((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_UpdateMethod(short pRet/*[in]*/)
{
  return (*this)->set_UpdateMethod(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ObjectFrameT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ObjectFrameT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ObjectFrameT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BackStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BackStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_ObjectFrameT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_ObjectFrameT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_ObjectFrameT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Data(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Data(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_Data(void)
{
  short pRet;
  OLECHECK(this->get_Data((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Data(short pRet/*[in]*/)
{
  return (*this)->set_Data(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectPalette(pRet);
}

template <class T> TVariant __fastcall
TCOM_ObjectFrameT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_ObjectPalette(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_LpOleObject(long* pRet/*[out,retval]*/)
{
  return (*this)->get_LpOleObject(pRet);
}

template <class T> long __fastcall
TCOM_ObjectFrameT<T>::get_LpOleObject(void)
{
  long pRet;
  OLECHECK(this->get_LpOleObject((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_LpOleObject(long pRet/*[in]*/)
{
  return (*this)->set_LpOleObject(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_ObjectVerbsCount(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectVerbsCount(pRet);
}

template <class T> long __fastcall
TCOM_ObjectFrameT<T>::get_ObjectVerbsCount(void)
{
  long pRet;
  OLECHECK(this->get_ObjectVerbsCount((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_ObjectVerbsCount(long pRet/*[in]*/)
{
  return (*this)->set_ObjectVerbsCount(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Action(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Action(pRet);
}

template <class T> short __fastcall
TCOM_ObjectFrameT<T>::get_Action(void)
{
  short pRet;
  OLECHECK(this->get_Action((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Action(short pRet/*[in]*/)
{
  return (*this)->set_Action(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_Scaling(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_Scaling(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ObjectFrameT<T>::get_Scaling(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_Scaling((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_Scaling(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_Scaling(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ObjectFrameT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ObjectFrameT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OnUpdated(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnUpdated(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OnUpdated(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnUpdated((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OnUpdated(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnUpdated(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_ObjectFrameT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ObjectFrameT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

// *********************************************************************//
// DispIntf:  _ObjectFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E95E-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_ObjectFrameDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ObjectFrameDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ObjectFrameDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Object(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(2104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ObjectFrameDispT<T>::get_Object(void)
{
  LPDISPATCH pRet;
  this->get_Object((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbs"), DISPID(2105));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_ObjectVerbs(long Index/*[in]*/)
{
  BSTR pRet;
  this->get_ObjectVerbs(Index, (BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_ObjectFrameDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_ObjectFrameDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ObjectFrameDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ObjectFrameDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_SizeMode(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SizeMode"), DISPID(85));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_SizeMode(void)
{
  unsigned_char pRet;
  this->get_SizeMode((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_SizeMode(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SizeMode"), DISPID(85));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OLEClass(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEClass"), DISPID(72));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OLEClass(void)
{
  BSTR pRet;
  this->get_OLEClass((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OLEClass(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEClass"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Item(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(47));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_Item(void)
{
  BSTR pRet;
  this->get_Item((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Item(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_RowSourceType(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSourceType"), DISPID(90));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_RowSourceType(void)
{
  BSTR pRet;
  this->get_RowSourceType((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_RowSourceType(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSourceType"), DISPID(90));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_RowSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSource"), DISPID(88));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_RowSource(void)
{
  BSTR pRet;
  this->get_RowSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_RowSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowSource"), DISPID(88));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_LinkChildFields(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkChildFields"), DISPID(49));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_LinkChildFields(void)
{
  BSTR pRet;
  this->get_LinkChildFields((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_LinkChildFields(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkChildFields"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_LinkMasterFields(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkMasterFields"), DISPID(50));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_LinkMasterFields(void)
{
  BSTR pRet;
  this->get_LinkMasterFields((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_LinkMasterFields(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkMasterFields"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_AutoActivate(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoActivate"), DISPID(98));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_AutoActivate(void)
{
  short pRet;
  this->get_AutoActivate((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_AutoActivate(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoActivate"), DISPID(98));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_DisplayType(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayType"), DISPID(304));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ObjectFrameDispT<T>::get_DisplayType(void)
{
  TOLEBOOL pRet;
  this->get_DisplayType((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_DisplayType(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayType"), DISPID(304));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_UpdateOptions(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateOptions"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_UpdateOptions(void)
{
  short pRet;
  this->get_UpdateOptions((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_UpdateOptions(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateOptions"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Verb(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Verb"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ObjectFrameDispT<T>::get_Verb(void)
{
  long pRet;
  this->get_Verb((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Verb(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Verb"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OLEType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEType"), DISPID(308));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_OLEType(void)
{
  unsigned_char pRet;
  this->get_OLEType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OLEType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEType"), DISPID(308));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OLETypeAllowed(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLETypeAllowed"), DISPID(307));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_OLETypeAllowed(void)
{
  unsigned_char pRet;
  this->get_OLETypeAllowed((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OLETypeAllowed(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLETypeAllowed"), DISPID(307));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_SourceObject(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceObject"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_SourceObject(void)
{
  BSTR pRet;
  this->get_SourceObject((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_SourceObject(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceObject"), DISPID(129));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Class(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Class"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_Class(void)
{
  BSTR pRet;
  this->get_Class((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Class(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Class"), DISPID(306));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_SourceDoc(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceDoc"), DISPID(130));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_SourceDoc(void)
{
  BSTR pRet;
  this->get_SourceDoc((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_SourceDoc(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceDoc"), DISPID(130));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_SourceItem(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceItem"), DISPID(48));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_SourceItem(void)
{
  BSTR pRet;
  this->get_SourceItem((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_SourceItem(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceItem"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_ColumnCount(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnCount"), DISPID(66));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_ColumnCount(void)
{
  short pRet;
  this->get_ColumnCount((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_ColumnCount(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnCount"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_ColumnHeads(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeads"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ObjectFrameDispT<T>::get_ColumnHeads(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHeads((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_ColumnHeads(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHeads"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ObjectFrameDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OleData(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OleData"), DISPID(168));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ObjectFrameDispT<T>::get_OleData(void)
{
  TVariant pRet;
  this->get_OleData((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OleData(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OleData"), DISPID(168));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_UpdateMethod(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateMethod"), DISPID(139));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_UpdateMethod(void)
{
  short pRet;
  this->get_UpdateMethod((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_UpdateMethod(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateMethod"), DISPID(139));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ObjectFrameDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ObjectFrameDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ObjectFrameDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  this->get_BackStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ObjectFrameDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ObjectFrameDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ObjectFrameDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Data(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(265));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_Data(void)
{
  short pRet;
  this->get_Data((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Data(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Data"), DISPID(265));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ObjectFrameDispT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  this->get_ObjectPalette((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_LpOleObject(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LpOleObject"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ObjectFrameDispT<T>::get_LpOleObject(void)
{
  long pRet;
  this->get_LpOleObject((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_LpOleObject(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LpOleObject"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_ObjectVerbsCount(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbsCount"), DISPID(172));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ObjectFrameDispT<T>::get_ObjectVerbsCount(void)
{
  long pRet;
  this->get_ObjectVerbsCount((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_ObjectVerbsCount(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbsCount"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Action(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(305));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ObjectFrameDispT<T>::get_Action(void)
{
  short pRet;
  this->get_Action((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Action(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Action"), DISPID(305));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_Scaling(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaling"), DISPID(84));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ObjectFrameDispT<T>::get_Scaling(void)
{
  unsigned_char pRet;
  this->get_Scaling((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_Scaling(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scaling"), DISPID(84));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ObjectFrameDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ObjectFrameDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OnUpdated(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnUpdated"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OnUpdated(void)
{
  BSTR pRet;
  this->get_OnUpdated((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OnUpdated(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnUpdated"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ObjectFrameDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ObjectFrameDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_PageBreak
// Interface: _PageBreak
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_PageBreakT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_PageBreakT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_PageBreakT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                              TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_PageBreakT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageBreakT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageBreakT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_PageBreakT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_PageBreakT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_PageBreakT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageBreakT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_PageBreakT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PageBreakT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PageBreakT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PageBreakT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_PageBreakT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PageBreakT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

// *********************************************************************//
// DispIntf:  _PageBreak
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E960-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_PageBreakDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PageBreakDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_PageBreakDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                              TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_PageBreakDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageBreakDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageBreakDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_PageBreakDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PageBreakDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PageBreakDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageBreakDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PageBreakDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PageBreakDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PageBreakDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PageBreakDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PageBreakDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PageBreakDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_ToggleButton
// Interface: _ToggleButton
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_ToggleButtonT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ToggleButtonT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::Undo(void)
{
  return (*this)->Undo();
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_ToggleButtonT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_ToggleButtonT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_ToggleButtonT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                 TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_ToggleButtonT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_ToggleButtonT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ToggleButtonT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Caption(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_Caption(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Caption((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  return (*this)->set_Caption(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Picture(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_Picture(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Picture((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  return (*this)->set_Picture(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ToggleButtonT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureData(pRet);
}

template <class T> TVariant __fastcall
TCOM_ToggleButtonT<T>::get_PictureData(void)
{
  TVariant pRet;
  OLECHECK(this->get_PictureData((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PictureData(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OptionValue(long* pRet/*[out,retval]*/)
{
  return (*this)->get_OptionValue(pRet);
}

template <class T> long __fastcall
TCOM_ToggleButtonT<T>::get_OptionValue(void)
{
  long pRet;
  OLECHECK(this->get_OptionValue((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OptionValue(long pRet/*[in]*/)
{
  return (*this)->set_OptionValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_DefaultValue(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  return (*this)->set_DefaultValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationRule(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_ValidationRule(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationRule(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_ValidationText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ToggleButtonT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_TripleState(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TripleState(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_TripleState(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TripleState((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_TripleState(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TripleState(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HideDuplicates(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HideDuplicates(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pRet);
}

template <class T> long __fastcall
TCOM_ToggleButtonT<T>::get_ForeColor(void)
{
  long pRet;
  OLECHECK(this->get_ForeColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ForeColor(long pRet/*[in]*/)
{
  return (*this)->set_ForeColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FontName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_FontName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FontName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  return (*this)->set_FontName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontSize(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_FontSize(void)
{
  short pRet;
  OLECHECK(this->get_FontSize((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_FontSize(short pRet/*[in]*/)
{
  return (*this)->set_FontSize(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontWeight(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_FontWeight(void)
{
  short pRet;
  OLECHECK(this->get_FontWeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_FontWeight(short pRet/*[in]*/)
{
  return (*this)->set_FontWeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontItalic(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontItalic(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontUnderline(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TextFontCharSet(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ToggleButtonT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TextFontCharSet(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontBold(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_FontBold(void)
{
  short pRet;
  OLECHECK(this->get_FontBold((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_FontBold(short pRet/*[in]*/)
{
  return (*this)->set_FontBold(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_ToggleButtonT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidth(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_ColumnWidth(void)
{
  short pRet;
  OLECHECK(this->get_ColumnWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  return (*this)->set_ColumnWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnOrder(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_ColumnOrder(void)
{
  short pRet;
  OLECHECK(this->get_ColumnOrder((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  return (*this)->set_ColumnOrder(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHidden(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHidden(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ToggleButtonT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_ToggleButtonT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectPalette(pRet);
}

template <class T> TVariant __fastcall
TCOM_ToggleButtonT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_ObjectPalette(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ToggleButtonT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_BeforeUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_AfterUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_ToggleButtonT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ToggleButtonT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

// *********************************************************************//
// DispIntf:  _ToggleButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E962-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_ToggleButtonDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ToggleButtonDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(2144));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ToggleButtonDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_ToggleButtonDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_ToggleButtonDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                 TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ToggleButtonDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ToggleButtonDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ToggleButtonDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_Caption(void)
{
  BSTR pRet;
  this->get_Caption((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_Picture(void)
{
  BSTR pRet;
  this->get_Picture((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ToggleButtonDispT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  this->get_PictureType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ToggleButtonDispT<T>::get_PictureData(void)
{
  TVariant pRet;
  this->get_PictureData((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OptionValue(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionValue"), DISPID(58));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ToggleButtonDispT<T>::get_OptionValue(void)
{
  long pRet;
  this->get_OptionValue((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OptionValue(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionValue"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_DefaultValue(void)
{
  BSTR pRet;
  this->get_DefaultValue((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_ValidationRule(void)
{
  BSTR pRet;
  this->get_ValidationRule((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_ValidationText(void)
{
  BSTR pRet;
  this->get_ValidationText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ToggleButtonDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_TripleState(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_TripleState(void)
{
  TOLEBOOL pRet;
  this->get_TripleState((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_TripleState(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(326));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  this->get_HideDuplicates((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ToggleButtonDispT<T>::get_ForeColor(void)
{
  long pRet;
  this->get_ForeColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ForeColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_FontName(void)
{
  BSTR pRet;
  this->get_FontName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_FontSize(void)
{
  short pRet;
  this->get_FontSize((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_FontSize(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_FontWeight(void)
{
  short pRet;
  this->get_FontWeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_FontWeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  this->get_FontItalic((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  this->get_FontUnderline((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ToggleButtonDispT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  this->get_TextFontCharSet((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_FontBold(void)
{
  short pRet;
  this->get_FontBold((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_FontBold(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ToggleButtonDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_ColumnWidth(void)
{
  short pRet;
  this->get_ColumnWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_ColumnOrder(void)
{
  short pRet;
  this->get_ColumnOrder((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHidden((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ToggleButtonDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ToggleButtonDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ToggleButtonDispT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  this->get_ObjectPalette((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ToggleButtonDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_BeforeUpdate(void)
{
  BSTR pRet;
  this->get_BeforeUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_AfterUpdate(void)
{
  BSTR pRet;
  this->get_AfterUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ToggleButtonDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ToggleButtonDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_PaletteButton
// Interface: _PaletteButton
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_PaletteButtonT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_PaletteButtonT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_PaletteButtonT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_PaletteButtonT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_PaletteButtonT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                  TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_PaletteButtonT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_PaletteButtonT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_PaletteButtonT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OptionValue(long* pRet/*[out,retval]*/)
{
  return (*this)->get_OptionValue(pRet);
}

template <class T> long __fastcall
TCOM_PaletteButtonT<T>::get_OptionValue(void)
{
  long pRet;
  OLECHECK(this->get_OptionValue((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OptionValue(long pRet/*[in]*/)
{
  return (*this)->set_OptionValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_DefaultValue(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_DefaultValue((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  return (*this)->set_DefaultValue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationRule(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_ValidationRule(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationRule((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationRule(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ValidationText(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_ValidationText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ValidationText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ValidationText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_PaletteButtonT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_TripleState(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TripleState(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_TripleState(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TripleState((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_TripleState(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TripleState(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_PaletteButtonT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HideDuplicates(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HideDuplicates((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HideDuplicates(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_PaletteButtonT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_PaletteButtonT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_PaletteButtonT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_PaletteButtonT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BackStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_PaletteButtonT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BackStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_PaletteButtonT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_PaletteButtonT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnWidth(pRet);
}

template <class T> short __fastcall
TCOM_PaletteButtonT<T>::get_ColumnWidth(void)
{
  short pRet;
  OLECHECK(this->get_ColumnWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  return (*this)->set_ColumnWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnOrder(pRet);
}

template <class T> short __fastcall
TCOM_PaletteButtonT<T>::get_ColumnOrder(void)
{
  short pRet;
  OLECHECK(this->get_ColumnOrder((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  return (*this)->set_ColumnOrder(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ColumnHidden(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ColumnHidden((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ColumnHidden(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_PaletteButtonT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_PaletteButtonT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_PaletteButtonT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_PaletteButtonT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_PaletteButtonT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_BeforeUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_AfterUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_PaletteButtonT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_PaletteButtonT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

// *********************************************************************//
// DispIntf:  _PaletteButton
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9CD4A760-A6A9-11CE-A686-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_PaletteButtonDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_PaletteButtonDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_PaletteButtonDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_PaletteButtonDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_PaletteButtonDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                  TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_PaletteButtonDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_PaletteButtonDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_PaletteButtonDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OptionValue(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionValue"), DISPID(58));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_PaletteButtonDispT<T>::get_OptionValue(void)
{
  long pRet;
  this->get_OptionValue((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OptionValue(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionValue"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_DefaultValue(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_DefaultValue(void)
{
  BSTR pRet;
  this->get_DefaultValue((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_DefaultValue(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_ValidationRule(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_ValidationRule(void)
{
  BSTR pRet;
  this->get_ValidationRule((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_ValidationRule(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationRule"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_ValidationText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_ValidationText(void)
{
  BSTR pRet;
  this->get_ValidationText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_ValidationText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ValidationText"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_PaletteButtonDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_TripleState(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(326));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_TripleState(void)
{
  TOLEBOOL pRet;
  this->get_TripleState((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_TripleState(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TripleState"), DISPID(326));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PaletteButtonDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_HideDuplicates(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_HideDuplicates(void)
{
  TOLEBOOL pRet;
  this->get_HideDuplicates((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_HideDuplicates(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HideDuplicates"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PaletteButtonDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PaletteButtonDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PaletteButtonDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PaletteButtonDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_PaletteButtonDispT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  this->get_BackStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_PaletteButtonDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_PaletteButtonDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_ColumnWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PaletteButtonDispT<T>::get_ColumnWidth(void)
{
  short pRet;
  this->get_ColumnWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_ColumnWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnWidth"), DISPID(163));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_ColumnOrder(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PaletteButtonDispT<T>::get_ColumnOrder(void)
{
  short pRet;
  this->get_ColumnOrder((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_ColumnOrder(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnOrder"), DISPID(162));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_ColumnHidden(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_ColumnHidden(void)
{
  TOLEBOOL pRet;
  this->get_ColumnHidden((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_ColumnHidden(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColumnHidden"), DISPID(164));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PaletteButtonDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PaletteButtonDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_PaletteButtonDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_PaletteButtonDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_PaletteButtonDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_BeforeUpdate(void)
{
  BSTR pRet;
  this->get_BeforeUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_AfterUpdate(void)
{
  BSTR pRet;
  this->get_AfterUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_PaletteButtonDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_PaletteButtonDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_SubForm
// Interface: _SubForm
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_SubFormT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_SubFormT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Form(pRet);
}

template <class T> Access_97::AccessFormPtr __fastcall
TCOM_SubFormT<T>::get_Form(void)
{
  Access_97::AccessFormPtr pRet;
  OLECHECK(this->get_Form((Access_97::AccessFormPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Report(pRet);
}

template <class T> Access_97::AccessReportPtr __fastcall
TCOM_SubFormT<T>::get_Report(void)
{
  Access_97::AccessReportPtr pRet;
  OLECHECK(this->get_Report((Access_97::AccessReportPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_SubFormT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                            TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_SubFormT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::Controls_Ptr __fastcall
TCOM_SubFormT<T>::get_Controls(void)
{
  Access_97::Controls_Ptr pRet;
  OLECHECK(this->get_Controls((Access_97::Controls_Ptr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_SubFormT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_SubFormT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SubFormT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_SourceObject(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_SourceObject(pRet);
}

template <class T> BSTR __fastcall
TCOM_SubFormT<T>::get_SourceObject(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_SourceObject((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_SourceObject(BSTR pRet/*[in]*/)
{
  return (*this)->set_SourceObject(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_LinkChildFields(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_LinkChildFields(pRet);
}

template <class T> BSTR __fastcall
TCOM_SubFormT<T>::get_LinkChildFields(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_LinkChildFields((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_LinkChildFields(BSTR pRet/*[in]*/)
{
  return (*this)->set_LinkChildFields(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_LinkMasterFields(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_LinkMasterFields(pRet);
}

template <class T> BSTR __fastcall
TCOM_SubFormT<T>::get_LinkMasterFields(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_LinkMasterFields((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_LinkMasterFields(BSTR pRet/*[in]*/)
{
  return (*this)->set_LinkMasterFields(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_SubFormT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SubFormT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SubFormT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SubFormT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SubFormT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SubFormT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_SubFormT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_CanGrow(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SubFormT<T>::get_CanGrow(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_CanGrow((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_CanGrow(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_CanGrow(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_CanShrink(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SubFormT<T>::get_CanShrink(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_CanShrink((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_CanShrink(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_CanShrink(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_SubFormT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_SubFormT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_SubFormT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_SubFormT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SubFormT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SubFormT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SubFormT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SubFormT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SubFormT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_SubFormT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoLabel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SubFormT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoLabel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoLabel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AddColon(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SubFormT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AddColon((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AddColon(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelX(pRet);
}

template <class T> short __fastcall
TCOM_SubFormT<T>::get_LabelX(void)
{
  short pRet;
  OLECHECK(this->get_LabelX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_LabelX(short pRet/*[in]*/)
{
  return (*this)->set_LabelX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelY(pRet);
}

template <class T> short __fastcall
TCOM_SubFormT<T>::get_LabelY(void)
{
  short pRet;
  OLECHECK(this->get_LabelY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_LabelY(short pRet/*[in]*/)
{
  return (*this)->set_LabelY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_LabelAlign(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SubFormT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_LabelAlign((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_LabelAlign(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_SubFormT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_SubFormT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_SubFormT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SubFormT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SubFormT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_SubFormT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_SubFormT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubFormT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

// *********************************************************************//
// DispIntf:  _SubForm
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E964-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_SubFormDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_SubFormDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Form"), DISPID(2089));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessForm**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessFormPtr __fastcall
_SubFormDispT<T>::get_Form(void)
{
  Access_97::AccessFormPtr pRet;
  this->get_Form((Access_97::AccessFormPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Report"), DISPID(2097));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessReport**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessReportPtr __fastcall
_SubFormDispT<T>::get_Report(void)
{
  Access_97::AccessReportPtr pRet;
  this->get_Report((Access_97::AccessReportPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_SubFormDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                            TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_SubFormDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Controls_**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::Controls_Ptr __fastcall
_SubFormDispT<T>::get_Controls(void)
{
  Access_97::Controls_Ptr pRet;
  this->get_Controls((Access_97::Controls_Ptr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SubFormDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SubFormDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SubFormDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_SourceObject(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceObject"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SubFormDispT<T>::get_SourceObject(void)
{
  BSTR pRet;
  this->get_SourceObject((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_SourceObject(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SourceObject"), DISPID(129));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_LinkChildFields(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkChildFields"), DISPID(49));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SubFormDispT<T>::get_LinkChildFields(void)
{
  BSTR pRet;
  this->get_LinkChildFields((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_LinkChildFields(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkChildFields"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_LinkMasterFields(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkMasterFields"), DISPID(50));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SubFormDispT<T>::get_LinkMasterFields(void)
{
  BSTR pRet;
  this->get_LinkMasterFields((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_LinkMasterFields(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LinkMasterFields"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SubFormDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SubFormDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SubFormDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SubFormDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SubFormDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SubFormDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_SubFormDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanGrow"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SubFormDispT<T>::get_CanGrow(void)
{
  TOLEBOOL pRet;
  this->get_CanGrow((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_CanGrow(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanGrow"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanShrink"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SubFormDispT<T>::get_CanShrink(void)
{
  TOLEBOOL pRet;
  this->get_CanShrink((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_CanShrink(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanShrink"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_SubFormDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_SubFormDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_SubFormDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_SubFormDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SubFormDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SubFormDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SubFormDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SubFormDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SubFormDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_SubFormDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_AutoLabel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SubFormDispT<T>::get_AutoLabel(void)
{
  TOLEBOOL pRet;
  this->get_AutoLabel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_AutoLabel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLabel"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_AddColon(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SubFormDispT<T>::get_AddColon(void)
{
  TOLEBOOL pRet;
  this->get_AddColon((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_AddColon(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddColon"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_LabelX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_SubFormDispT<T>::get_LabelX(void)
{
  short pRet;
  this->get_LabelX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_LabelX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelX"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_LabelY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_SubFormDispT<T>::get_LabelY(void)
{
  short pRet;
  this->get_LabelY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_LabelY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelY"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_LabelAlign(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SubFormDispT<T>::get_LabelAlign(void)
{
  unsigned_char pRet;
  this->get_LabelAlign((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_LabelAlign(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LabelAlign"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_SubFormDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SubFormDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SubFormDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SubFormDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SubFormDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SubFormDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SubFormDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubFormDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_SubReport
// Interface: _SubReport
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_SubReportT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_SubReportT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubReportT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_SubReportT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubReportT<T>::get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Form(pRet);
}

template <class T> Access_97::AccessFormPtr __fastcall
TCOM_SubReportT<T>::get_Form(void)
{
  Access_97::AccessFormPtr pRet;
  OLECHECK(this->get_Form((Access_97::AccessFormPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SubReportT<T>::get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Report(pRet);
}

template <class T> Access_97::AccessReportPtr __fastcall
TCOM_SubReportT<T>::get_Report(void)
{
  Access_97::AccessReportPtr pRet;
  OLECHECK(this->get_Report((Access_97::AccessReportPtr*)&pRet));
  return pRet;
}

// *********************************************************************//
// DispIntf:  _SubReport
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E966-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubReportDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_SubReportDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubReportDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_SubReportDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubReportDispT<T>::get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Form"), DISPID(2089));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessForm**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessFormPtr __fastcall
_SubReportDispT<T>::get_Form(void)
{
  Access_97::AccessFormPtr pRet;
  this->get_Form((Access_97::AccessFormPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SubReportDispT<T>::get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Report"), DISPID(2097));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessReport**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessReportPtr __fastcall
_SubReportDispT<T>::get_Report(void)
{
  Access_97::AccessReportPtr pRet;
  this->get_Report((Access_97::AccessReportPtr*)&pRet);
  return pRet;
}

// *********************************************************************//
// SmartIntf: TCOM_CustomControl
// Interface: _CustomControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_CustomControlT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_CustomControlT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_CustomControlT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Object(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Object(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_CustomControlT<T>::get_Object(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Object((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectVerbs(Index, pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_ObjectVerbs(long Index/*[in]*/)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ObjectVerbs(Index, (BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_CustomControlT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::Goto(void)
{
  return (*this)->Goto();
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_CustomControlT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                  TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_CustomControlT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_CustomControlT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CustomControlT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_OLEClass(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OLEClass(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_OLEClass(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OLEClass((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_OLEClass(BSTR pRet/*[in]*/)
{
  return (*this)->set_OLEClass(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Verb(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Verb(pRet);
}

template <class T> long __fastcall
TCOM_CustomControlT<T>::get_Verb(void)
{
  long pRet;
  OLECHECK(this->get_Verb((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Verb(long pRet/*[in]*/)
{
  return (*this)->set_Verb(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Class(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Class(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_Class(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Class((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Class(BSTR pRet/*[in]*/)
{
  return (*this)->set_Class(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CustomControlT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CustomControlT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CustomControlT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Locked(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CustomControlT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Locked((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Locked(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_OleData(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OleData(pRet);
}

template <class T> TVariant __fastcall
TCOM_CustomControlT<T>::get_OleData(void)
{
  TVariant pRet;
  OLECHECK(this->get_OleData((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_OleData(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_OleData(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CustomControlT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_CustomControlT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_CustomControlT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_CustomControlT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_CustomControlT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_CustomControlT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CustomControlT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CustomControlT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_OldBorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CustomControlT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_OldBorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_OldBorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderColor(pRet);
}

template <class T> long __fastcall
TCOM_CustomControlT<T>::get_BorderColor(void)
{
  long pRet;
  OLECHECK(this->get_BorderColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_BorderColor(long pRet/*[in]*/)
{
  return (*this)->set_BorderColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderWidth(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CustomControlT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderWidth((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderLineStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_CustomControlT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderLineStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderLineStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlTipText(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_ControlTipText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlTipText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlTipText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_CustomControlT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_CustomControlT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectPalette(pRet);
}

template <class T> TVariant __fastcall
TCOM_CustomControlT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  OLECHECK(this->get_ObjectPalette((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_ObjectPalette(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_LpOleObject(long* pRet/*[out,retval]*/)
{
  return (*this)->get_LpOleObject(pRet);
}

template <class T> long __fastcall
TCOM_CustomControlT<T>::get_LpOleObject(void)
{
  long pRet;
  OLECHECK(this->get_LpOleObject((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_LpOleObject(long pRet/*[in]*/)
{
  return (*this)->set_LpOleObject(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_ObjectVerbsCount(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ObjectVerbsCount(pRet);
}

template <class T> long __fastcall
TCOM_CustomControlT<T>::get_ObjectVerbsCount(void)
{
  long pRet;
  OLECHECK(this->get_ObjectVerbsCount((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_ObjectVerbsCount(long pRet/*[in]*/)
{
  return (*this)->set_ObjectVerbsCount(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CustomControlT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CustomControlT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_OnUpdated(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnUpdated(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_OnUpdated(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnUpdated((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_OnUpdated(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnUpdated(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnEnter(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_OnEnter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnEnter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnEnter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnExit(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_OnExit(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnExit((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnExit(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Default(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Default(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CustomControlT<T>::get_Default(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Default((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Default(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Default(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Cancel(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Cancel(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_CustomControlT<T>::get_Cancel(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Cancel((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Cancel(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Cancel(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_Custom(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Custom(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_Custom(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Custom((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_Custom(BSTR pRet/*[in]*/)
{
  return (*this)->set_Custom(pRet);
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::get_About(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_About(pRet);
}

template <class T> BSTR __fastcall
TCOM_CustomControlT<T>::get_About(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_About((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_CustomControlT<T>::set_About(BSTR pRet/*[in]*/)
{
  return (*this)->set_About(pRet);
}

// *********************************************************************//
// DispIntf:  _CustomControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3B06E968-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_CustomControlDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CustomControlDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CustomControlDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Object(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Object"), DISPID(2104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_CustomControlDispT<T>::get_Object(void)
{
  LPDISPATCH pRet;
  this->get_Object((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_ObjectVerbs(long Index/*[in]*/, BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbs"), DISPID(2105));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_ObjectVerbs(long Index/*[in]*/)
{
  BSTR pRet;
  this->get_ObjectVerbs(Index, (BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_CustomControlDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::Goto()
{
  _TDispID _dispid(*this, OLETEXT("Goto"), DISPID(2023));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_CustomControlDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                                  TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_CustomControlDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CustomControlDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CustomControlDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_OLEClass(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEClass"), DISPID(72));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_OLEClass(void)
{
  BSTR pRet;
  this->get_OLEClass((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_OLEClass(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEClass"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Verb(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Verb"), DISPID(99));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CustomControlDispT<T>::get_Verb(void)
{
  long pRet;
  this->get_Verb((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Verb(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Verb"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Class(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Class"), DISPID(306));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_Class(void)
{
  BSTR pRet;
  this->get_Class((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Class(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Class"), DISPID(306));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CustomControlDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CustomControlDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CustomControlDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Locked(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CustomControlDispT<T>::get_Locked(void)
{
  TOLEBOOL pRet;
  this->get_Locked((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Locked(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Locked"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_OleData(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OleData"), DISPID(168));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CustomControlDispT<T>::get_OleData(void)
{
  TVariant pRet;
  this->get_OleData((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_OleData(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OleData"), DISPID(168));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CustomControlDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CustomControlDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CustomControlDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CustomControlDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CustomControlDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CustomControlDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CustomControlDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CustomControlDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_OldBorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CustomControlDispT<T>::get_OldBorderStyle(void)
{
  unsigned_char pRet;
  this->get_OldBorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_OldBorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldBorderStyle"), DISPID(371));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_BorderColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CustomControlDispT<T>::get_BorderColor(void)
{
  long pRet;
  this->get_BorderColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_BorderColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderColor"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_BorderWidth(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CustomControlDispT<T>::get_BorderWidth(void)
{
  unsigned_char pRet;
  this->get_BorderWidth((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_BorderWidth(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderWidth"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_BorderLineStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_CustomControlDispT<T>::get_BorderLineStyle(void)
{
  unsigned_char pRet;
  this->get_BorderLineStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_BorderLineStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderLineStyle"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_ControlTipText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_ControlTipText(void)
{
  BSTR pRet;
  this->get_ControlTipText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_ControlTipText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlTipText"), DISPID(362));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CustomControlDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_CustomControlDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_ObjectPalette(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_CustomControlDispT<T>::get_ObjectPalette(void)
{
  TVariant pRet;
  this->get_ObjectPalette((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_ObjectPalette(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectPalette"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_LpOleObject(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LpOleObject"), DISPID(169));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CustomControlDispT<T>::get_LpOleObject(void)
{
  long pRet;
  this->get_LpOleObject((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_LpOleObject(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LpOleObject"), DISPID(169));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_ObjectVerbsCount(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbsCount"), DISPID(172));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CustomControlDispT<T>::get_ObjectVerbsCount(void)
{
  long pRet;
  this->get_ObjectVerbsCount((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_ObjectVerbsCount(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObjectVerbsCount"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CustomControlDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CustomControlDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_OnUpdated(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnUpdated"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_OnUpdated(void)
{
  BSTR pRet;
  this->get_OnUpdated((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_OnUpdated(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnUpdated"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_OnEnter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_OnEnter(void)
{
  BSTR pRet;
  this->get_OnEnter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_OnEnter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnEnter"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_OnExit(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_OnExit(void)
{
  BSTR pRet;
  this->get_OnExit((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_OnExit(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnExit"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Default(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(219));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CustomControlDispT<T>::get_Default(void)
{
  TOLEBOOL pRet;
  this->get_Default((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Default(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(219));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Cancel(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_CustomControlDispT<T>::get_Cancel(void)
{
  TOLEBOOL pRet;
  this->get_Cancel((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Cancel(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(220));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_Custom(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Custom"), DISPID(328));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_Custom(void)
{
  BSTR pRet;
  this->get_Custom((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_Custom(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Custom"), DISPID(328));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::get_About(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("About"), DISPID(329));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_CustomControlDispT<T>::get_About(void)
{
  BSTR pRet;
  this->get_About((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_CustomControlDispT<T>::set_About(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("About"), DISPID(329));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_TabControl
// Interface: _TabControl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_TabControlT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_TabControlT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OldValue(pRet);
}

template <class T> TVariant __fastcall
TCOM_TabControlT<T>::get_OldValue(void)
{
  TVariant pRet;
  OLECHECK(this->get_OldValue((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_TabControlT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::SizeToFit(void)
{
  return (*this)->SizeToFit();
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Pages(Access_97::PagesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Pages(pRet);
}

template <class T> Access_97::PagesPtr __fastcall
TCOM_TabControlT<T>::get_Pages(void)
{
  Access_97::PagesPtr pRet;
  OLECHECK(this->get_Pages((Access_97::PagesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                               TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_TabControlT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Value(pRet);
}

template <class T> TVariant __fastcall
TCOM_TabControlT<T>::get_Value(void)
{
  TVariant pRet;
  OLECHECK(this->get_Value((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Value(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TabControlT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ControlType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ControlType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_StatusBarText(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_StatusBarText(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_StatusBarText((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  return (*this)->set_StatusBarText(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TabControlT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TabControlT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Enabled(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TabControlT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Enabled((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Enabled(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_TabStop(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TabControlT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_TabStop((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_TabStop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabIndex(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_TabIndex(void)
{
  short pRet;
  OLECHECK(this->get_TabIndex((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_TabIndex(short pRet/*[in]*/)
{
  return (*this)->set_TabIndex(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_Left(void)
{
  short pRet;
  OLECHECK(this->get_Left((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Left(short pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_Top(void)
{
  short pRet;
  OLECHECK(this->get_Top((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Top(short pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BackStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TabControlT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BackStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BackStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_MultiRow(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_MultiRow(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TabControlT<T>::get_MultiRow(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_MultiRow((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_MultiRow(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_MultiRow(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Style(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_Style(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TabControlT<T>::get_Style(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_Style((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Style(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_Style(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_TabFixedHeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabFixedHeight(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_TabFixedHeight(void)
{
  short pRet;
  OLECHECK(this->get_TabFixedHeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_TabFixedHeight(short pRet/*[in]*/)
{
  return (*this)->set_TabFixedHeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_TabFixedWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_TabFixedWidth(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_TabFixedWidth(void)
{
  short pRet;
  OLECHECK(this->get_TabFixedWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_TabFixedWidth(short pRet/*[in]*/)
{
  return (*this)->set_TabFixedWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FontName(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_FontName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FontName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  return (*this)->set_FontName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontSize(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_FontSize(void)
{
  short pRet;
  OLECHECK(this->get_FontSize((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_FontSize(short pRet/*[in]*/)
{
  return (*this)->set_FontSize(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontWeight(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_FontWeight(void)
{
  short pRet;
  OLECHECK(this->get_FontWeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_FontWeight(short pRet/*[in]*/)
{
  return (*this)->set_FontWeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontItalic(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TabControlT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontItalic((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontItalic(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TabControlT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FontUnderline((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FontUnderline(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TextFontCharSet(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_TabControlT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TextFontCharSet((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TextFontCharSet(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontBold(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_FontBold(void)
{
  short pRet;
  OLECHECK(this->get_FontBold((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_FontBold(short pRet/*[in]*/)
{
  return (*this)->set_FontBold(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_TabControlT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(pRet);
}

template <class T> short __fastcall
TCOM_TabControlT<T>::get_Section(void)
{
  short pRet;
  OLECHECK(this->get_Section((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Section(short pRet/*[in]*/)
{
  return (*this)->set_Section(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlName(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_ControlName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_IsVisible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TabControlT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_IsVisible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_IsVisible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_TabControlT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_OnChange(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnChange(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_OnChange(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnChange((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_OnChange(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnChange(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_TabControlT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

template <class T> HRESULT __fastcall
TCOM_TabControlT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  return (*this)->_NewEnum(pRet);
}

template <class T> LPUNKNOWN __fastcall
TCOM_TabControlT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
  return pRet;
}

// *********************************************************************//
// DispIntf:  _TabControl
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3B06E971-E47C-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_TabControlDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_TabControlDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_OldValue(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OldValue"), DISPID(2102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_TabControlDispT<T>::get_OldValue(void)
{
  TVariant pRet;
  this->get_OldValue((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_TabControlDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::SizeToFit()
{
  _TDispID _dispid(*this, OLETEXT("SizeToFit"), DISPID(2151));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Pages(Access_97::PagesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pages"), DISPID(2180));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Pages**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PagesPtr __fastcall
_TabControlDispT<T>::get_Pages(void)
{
  Access_97::PagesPtr pRet;
  this->get_Pages((Access_97::PagesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                               TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_TabControlDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Value(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_TabControlDispT<T>::get_Value(void)
{
  TVariant pRet;
  this->get_Value((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Value(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_ControlType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TabControlDispT<T>::get_ControlType(void)
{
  unsigned_char pRet;
  this->get_ControlType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_ControlType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlType"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_StatusBarText(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_StatusBarText(void)
{
  BSTR pRet;
  this->get_StatusBarText((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_StatusBarText(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StatusBarText"), DISPID(132));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TabControlDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TabControlDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Enabled(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TabControlDispT<T>::get_Enabled(void)
{
  TOLEBOOL pRet;
  this->get_Enabled((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Enabled(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_TabStop(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TabControlDispT<T>::get_TabStop(void)
{
  TOLEBOOL pRet;
  this->get_TabStop((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_TabStop(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabStop"), DISPID(292));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_TabIndex(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_TabIndex(void)
{
  short pRet;
  this->get_TabIndex((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_TabIndex(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabIndex"), DISPID(291));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Left(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_Left(void)
{
  short pRet;
  this->get_Left((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Left(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Top(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_Top(void)
{
  short pRet;
  this->get_Top((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Top(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_BackStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TabControlDispT<T>::get_BackStyle(void)
{
  unsigned_char pRet;
  this->get_BackStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_BackStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackStyle"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_MultiRow(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiRow"), DISPID(391));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TabControlDispT<T>::get_MultiRow(void)
{
  TOLEBOOL pRet;
  this->get_MultiRow((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_MultiRow(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiRow"), DISPID(391));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Style(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(392));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TabControlDispT<T>::get_Style(void)
{
  unsigned_char pRet;
  this->get_Style((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Style(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(392));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_TabFixedHeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedHeight"), DISPID(393));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_TabFixedHeight(void)
{
  short pRet;
  this->get_TabFixedHeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_TabFixedHeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedHeight"), DISPID(393));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_TabFixedWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedWidth"), DISPID(394));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_TabFixedWidth(void)
{
  short pRet;
  this->get_TabFixedWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_TabFixedWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabFixedWidth"), DISPID(394));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_FontName(void)
{
  BSTR pRet;
  this->get_FontName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_FontSize(void)
{
  short pRet;
  this->get_FontSize((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_FontSize(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_FontWeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_FontWeight(void)
{
  short pRet;
  this->get_FontWeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_FontWeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontWeight"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_FontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TabControlDispT<T>::get_FontItalic(void)
{
  TOLEBOOL pRet;
  this->get_FontItalic((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_FontItalic(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_FontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TabControlDispT<T>::get_FontUnderline(void)
{
  TOLEBOOL pRet;
  this->get_FontUnderline((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_FontUnderline(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_TextFontCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_TabControlDispT<T>::get_TextFontCharSet(void)
{
  unsigned_char pRet;
  this->get_TextFontCharSet((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_TextFontCharSet(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFontCharSet"), DISPID(192));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_FontBold(void)
{
  short pRet;
  this->get_FontBold((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_FontBold(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_TabControlDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Section(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_TabControlDispT<T>::get_Section(void)
{
  short pRet;
  this->get_Section((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Section(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_ControlName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_ControlName(void)
{
  BSTR pRet;
  this->get_ControlName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_ControlName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlName"), DISPID(296));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_IsVisible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TabControlDispT<T>::get_IsVisible(void)
{
  TOLEBOOL pRet;
  this->get_IsVisible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_IsVisible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsVisible"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_TabControlDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_OnChange(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnChange"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_OnChange(void)
{
  BSTR pRet;
  this->get_OnChange((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_OnChange(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnChange"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_TabControlDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_TabControlDispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_TabControlDispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

// *********************************************************************//
// SmartIntf: TCOM_Section
// Interface: _Section
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_SectionT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_SectionT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_SectionT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::ChildrenPtr __fastcall
TCOM_SectionT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  OLECHECK(this->get_Controls((Access_97::ChildrenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_EventProcPrefix(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_EventProcPrefix(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_EventProcPrefix((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  return (*this)->set_EventProcPrefix(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_ForceNewPage(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ForceNewPage(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SectionT<T>::get_ForceNewPage(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ForceNewPage((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_ForceNewPage(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ForceNewPage(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_NewRowOrCol(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_NewRowOrCol(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SectionT<T>::get_NewRowOrCol(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_NewRowOrCol((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_NewRowOrCol(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_NewRowOrCol(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_KeepTogether(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_KeepTogether(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SectionT<T>::get_KeepTogether(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_KeepTogether((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_KeepTogether(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_KeepTogether(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SectionT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DisplayWhen(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SectionT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DisplayWhen((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DisplayWhen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_CanGrow(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SectionT<T>::get_CanGrow(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_CanGrow((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_CanGrow(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_CanGrow(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_CanShrink(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SectionT<T>::get_CanShrink(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_CanShrink((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_CanShrink(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_CanShrink(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_RepeatSection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_RepeatSection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SectionT<T>::get_RepeatSection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_RepeatSection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_RepeatSection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_RepeatSection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> short __fastcall
TCOM_SectionT<T>::get_Height(void)
{
  short pRet;
  OLECHECK(this->get_Height((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_Height(short pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_BackColor(pRet);
}

template <class T> long __fastcall
TCOM_SectionT<T>::get_BackColor(void)
{
  long pRet;
  OLECHECK(this->get_BackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_BackColor(long pRet/*[in]*/)
{
  return (*this)->set_BackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_SpecialEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_SectionT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_SpecialEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_SpecialEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_OnFormat(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnFormat(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_OnFormat(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnFormat((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_OnFormat(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnFormat(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_OnPrint(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnPrint(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_OnPrint(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnPrint((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_OnPrint(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnPrint(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_OnRetreat(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnRetreat(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_OnRetreat(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnRetreat((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_OnRetreat(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnRetreat(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_SectionT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_HasContinued(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HasContinued(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SectionT<T>::get_HasContinued(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HasContinued((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_HasContinued(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HasContinued(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_WillContinue(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_WillContinue(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SectionT<T>::get_WillContinue(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_WillContinue((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_WillContinue(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_WillContinue(pRet);
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_InSelection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_SectionT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_InSelection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_SectionT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_InSelection(pRet);
}

// *********************************************************************//
// DispIntf:  _Section
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDCFC-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_SectionDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_SectionDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_SectionDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_Controls(Access_97::ChildrenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(2190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Children**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ChildrenPtr __fastcall
_SectionDispT<T>::get_Controls(void)
{
  Access_97::ChildrenPtr pRet;
  this->get_Controls((Access_97::ChildrenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_EventProcPrefix(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_EventProcPrefix(void)
{
  BSTR pRet;
  this->get_EventProcPrefix((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_EventProcPrefix(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EventProcPrefix"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_ForceNewPage(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForceNewPage"), DISPID(148));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SectionDispT<T>::get_ForceNewPage(void)
{
  unsigned_char pRet;
  this->get_ForceNewPage((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_ForceNewPage(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForceNewPage"), DISPID(148));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_NewRowOrCol(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewRowOrCol"), DISPID(230));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SectionDispT<T>::get_NewRowOrCol(void)
{
  unsigned_char pRet;
  this->get_NewRowOrCol((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_NewRowOrCol(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewRowOrCol"), DISPID(230));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_KeepTogether(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeepTogether"), DISPID(71));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SectionDispT<T>::get_KeepTogether(void)
{
  TOLEBOOL pRet;
  this->get_KeepTogether((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_KeepTogether(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeepTogether"), DISPID(71));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SectionDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_DisplayWhen(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SectionDispT<T>::get_DisplayWhen(void)
{
  unsigned_char pRet;
  this->get_DisplayWhen((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_DisplayWhen(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayWhen"), DISPID(146));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_CanGrow(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanGrow"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SectionDispT<T>::get_CanGrow(void)
{
  TOLEBOOL pRet;
  this->get_CanGrow((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_CanGrow(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanGrow"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_CanShrink(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanShrink"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SectionDispT<T>::get_CanShrink(void)
{
  TOLEBOOL pRet;
  this->get_CanShrink((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_CanShrink(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CanShrink"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_RepeatSection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RepeatSection"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SectionDispT<T>::get_RepeatSection(void)
{
  TOLEBOOL pRet;
  this->get_RepeatSection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_RepeatSection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RepeatSection"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_Height(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_SectionDispT<T>::get_Height(void)
{
  short pRet;
  this->get_Height((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_Height(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_BackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_SectionDispT<T>::get_BackColor(void)
{
  long pRet;
  this->get_BackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_BackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_SpecialEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_SectionDispT<T>::get_SpecialEffect(void)
{
  unsigned_char pRet;
  this->get_SpecialEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_SpecialEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpecialEffect"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_OnFormat(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnFormat"), DISPID(76));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_OnFormat(void)
{
  BSTR pRet;
  this->get_OnFormat((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_OnFormat(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnFormat"), DISPID(76));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_OnPrint(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnPrint"), DISPID(78));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_OnPrint(void)
{
  BSTR pRet;
  this->get_OnPrint((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_OnPrint(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnPrint"), DISPID(78));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_OnRetreat(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnRetreat"), DISPID(80));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_OnRetreat(void)
{
  BSTR pRet;
  this->get_OnRetreat((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_OnRetreat(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnRetreat"), DISPID(80));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SectionDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_HasContinued(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasContinued"), DISPID(199));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SectionDispT<T>::get_HasContinued(void)
{
  TOLEBOOL pRet;
  this->get_HasContinued((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_HasContinued(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasContinued"), DISPID(199));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_WillContinue(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WillContinue"), DISPID(200));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SectionDispT<T>::get_WillContinue(void)
{
  TOLEBOOL pRet;
  this->get_WillContinue((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_WillContinue(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WillContinue"), DISPID(200));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::get_InSelection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_SectionDispT<T>::get_InSelection(void)
{
  TOLEBOOL pRet;
  this->get_InSelection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SectionDispT<T>::set_InSelection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InSelection"), DISPID(312));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_GroupLevel
// Interface: _GroupLevel
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_GroupLevelT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_GroupLevelT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_GroupLevelT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_GroupLevelT<T>::get_ControlSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ControlSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_ControlSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::get_SortOrder(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_SortOrder(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_GroupLevelT<T>::get_SortOrder(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_SortOrder((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::set_SortOrder(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_SortOrder(pRet);
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::get_GroupHeader(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_GroupHeader(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_GroupLevelT<T>::get_GroupHeader(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_GroupHeader((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::set_GroupHeader(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_GroupHeader(pRet);
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::get_GroupFooter(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_GroupFooter(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_GroupLevelT<T>::get_GroupFooter(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_GroupFooter((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::set_GroupFooter(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_GroupFooter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::get_GroupOn(short* pRet/*[out,retval]*/)
{
  return (*this)->get_GroupOn(pRet);
}

template <class T> short __fastcall
TCOM_GroupLevelT<T>::get_GroupOn(void)
{
  short pRet;
  OLECHECK(this->get_GroupOn((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::set_GroupOn(short pRet/*[in]*/)
{
  return (*this)->set_GroupOn(pRet);
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::get_GroupInterval(long* pRet/*[out,retval]*/)
{
  return (*this)->get_GroupInterval(pRet);
}

template <class T> long __fastcall
TCOM_GroupLevelT<T>::get_GroupInterval(void)
{
  long pRet;
  OLECHECK(this->get_GroupInterval((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::set_GroupInterval(long pRet/*[in]*/)
{
  return (*this)->set_GroupInterval(pRet);
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::get_KeepTogether(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_KeepTogether(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_GroupLevelT<T>::get_KeepTogether(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_KeepTogether((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_GroupLevelT<T>::set_KeepTogether(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_KeepTogether(pRet);
}

// *********************************************************************//
// DispIntf:  _GroupLevel
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDD27-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_GroupLevelDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_GroupLevelDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_GroupLevelDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::get_ControlSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_GroupLevelDispT<T>::get_ControlSource(void)
{
  BSTR pRet;
  this->get_ControlSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::set_ControlSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlSource"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::get_SortOrder(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortOrder"), DISPID(173));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_GroupLevelDispT<T>::get_SortOrder(void)
{
  TOLEBOOL pRet;
  this->get_SortOrder((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::set_SortOrder(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortOrder"), DISPID(173));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::get_GroupHeader(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupHeader"), DISPID(174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_GroupLevelDispT<T>::get_GroupHeader(void)
{
  TOLEBOOL pRet;
  this->get_GroupHeader((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::set_GroupHeader(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupHeader"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::get_GroupFooter(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFooter"), DISPID(175));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_GroupLevelDispT<T>::get_GroupFooter(void)
{
  TOLEBOOL pRet;
  this->get_GroupFooter((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::set_GroupFooter(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupFooter"), DISPID(175));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::get_GroupOn(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupOn"), DISPID(176));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_GroupLevelDispT<T>::get_GroupOn(void)
{
  short pRet;
  this->get_GroupOn((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::set_GroupOn(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupOn"), DISPID(176));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::get_GroupInterval(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupInterval"), DISPID(177));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_GroupLevelDispT<T>::get_GroupInterval(void)
{
  long pRet;
  this->get_GroupInterval((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::set_GroupInterval(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupInterval"), DISPID(177));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::get_KeepTogether(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeepTogether"), DISPID(71));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_GroupLevelDispT<T>::get_KeepTogether(void)
{
  unsigned_char pRet;
  this->get_KeepTogether((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_GroupLevelDispT<T>::set_KeepTogether(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeepTogether"), DISPID(71));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Module
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {331FDCFE-CF31-11CD-8701-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
ModuleDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ModuleDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::InsertText(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertText"), DISPID(2093));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ModuleDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::AddFromString(BSTR String/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFromString"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = String /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::AddFromFile(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFromFile"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_Lines(long Line/*[in]*/, long NumLines/*[in]*/, BSTR* String/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Lines"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = NumLines /*[VT_I4:0]*/;
  return OutRetValSetterPtr(String /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ModuleDispT<T>::get_Lines(long Line/*[in]*/, long NumLines/*[in]*/)
{
  BSTR String;
  this->get_Lines(Line, NumLines, (BSTR*)&String);
  return String;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_CountOfLines(long* CountOfLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CountOfLines"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CountOfLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ModuleDispT<T>::get_CountOfLines(void)
{
  long CountOfLines;
  this->get_CountOfLines((long*)&CountOfLines);
  return CountOfLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::InsertLines(long Line/*[in]*/, BSTR String/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertLines"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = String /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::DeleteLines(long StartLine/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteLines"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<2> _args;
  _args[1] = StartLine /*[VT_I4:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceLine"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = String /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_ProcStartLine(BSTR ProcName/*[in]*/, Access_97::ProcKind ProcKind/*[in]*/, 
                                  long* ProcStartLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcStartLine"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<2> _args;
  _args[1] = ProcName /*[VT_BSTR:0]*/;
  _args[2] = (int)ProcKind /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ProcStartLine /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ModuleDispT<T>::get_ProcStartLine(BSTR ProcName/*[in]*/, Access_97::ProcKind ProcKind/*[in]*/)
{
  long ProcStartLine;
  this->get_ProcStartLine(ProcName, ProcKind, (long*)&ProcStartLine);
  return ProcStartLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_ProcCountLines(BSTR ProcName/*[in]*/, Access_97::ProcKind ProcKind/*[in]*/, 
                                   long* ProcCountLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcCountLines"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<2> _args;
  _args[1] = ProcName /*[VT_BSTR:0]*/;
  _args[2] = (int)ProcKind /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ProcCountLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ModuleDispT<T>::get_ProcCountLines(BSTR ProcName/*[in]*/, Access_97::ProcKind ProcKind/*[in]*/)
{
  long ProcCountLines;
  this->get_ProcCountLines(ProcName, ProcKind, (long*)&ProcCountLines);
  return ProcCountLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_ProcBodyLine(BSTR ProcName/*[in]*/, Access_97::ProcKind ProcKind/*[in]*/, 
                                 long* ProcBodyLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcBodyLine"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<2> _args;
  _args[1] = ProcName /*[VT_BSTR:0]*/;
  _args[2] = (int)ProcKind /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ProcBodyLine /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ModuleDispT<T>::get_ProcBodyLine(BSTR ProcName/*[in]*/, Access_97::ProcKind ProcKind/*[in]*/)
{
  long ProcBodyLine;
  this->get_ProcBodyLine(ProcName, ProcKind, (long*)&ProcBodyLine);
  return ProcBodyLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_ProcOfLine(long Line/*[in]*/, Access_97::ProcKind* pprockind/*[out]*/, 
                               BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcOfLine"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = (int*)pprockind /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ModuleDispT<T>::get_ProcOfLine(long Line/*[in]*/, Access_97::ProcKind* pprockind/*[out]*/)
{
  BSTR pbstrName;
  this->get_ProcOfLine(Line, pprockind, (BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_CountOfDeclarationLines(long* pDeclCountOfLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CountOfDeclarationLines"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDeclCountOfLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ModuleDispT<T>::get_CountOfDeclarationLines(void)
{
  long pDeclCountOfLines;
  this->get_CountOfDeclarationLines((long*)&pDeclCountOfLines);
  return pDeclCountOfLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/, 
                                long* Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateEventProc"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<2> _args;
  _args[1] = EventName /*[VT_BSTR:0]*/;
  _args[2] = ObjectName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Line /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ModuleDispT<T>::CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/)
{
  long Line;
  this->CreateEventProc(EventName, ObjectName, (long*)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, long* StartColumn/*[in,out]*/
                     , long* EndLine/*[in,out]*/, long* EndColumn/*[in,out]*/, 
                     TOLEBOOL WholeWord/*[in,def,opt]*/, TOLEBOOL MatchCase/*[in,def,opt]*/, 
                     TOLEBOOL PatternSearch/*[in,def,opt]*/, TOLEBOOL* pfFound/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<8> _args;
  _args[1] = Target /*[VT_BSTR:0]*/;
  _args[2] = StartLine /*[VT_I4:1]*/;
  _args[3] = StartColumn /*[VT_I4:1]*/;
  _args[4] = EndLine /*[VT_I4:1]*/;
  _args[5] = EndColumn /*[VT_I4:1]*/;
  _args[6] = WholeWord /*[VT_BOOL:0]*/;
  _args[7] = MatchCase /*[VT_BOOL:0]*/;
  _args[8] = PatternSearch /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pfFound /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ModuleDispT<T>::Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, long* StartColumn/*[in,out]*/, 
                     long* EndLine/*[in,out]*/, long* EndColumn/*[in,out]*/, 
                     TOLEBOOL WholeWord/*[in,def,opt]*/, TOLEBOOL MatchCase/*[in,def,opt]*/, 
                     TOLEBOOL PatternSearch/*[in,def,opt]*/)
{
  TOLEBOOL pfFound;
  this->Find(Target, StartLine, StartColumn, EndLine, EndColumn, WholeWord, MatchCase, PatternSearch, (TOLEBOOL*)&pfFound);
  return pfFound;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModuleDispT<T>::get_Type(Access_97::AcModuleType* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pRet /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AcModuleType __fastcall
ModuleDispT<T>::get_Type(void)
{
  Access_97::AcModuleType pRet;
  this->get_Type((Access_97::AcModuleType*)&pRet);
  return pRet;
}

// *********************************************************************//
// DispIntf:  Modules
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9DD0AF42-6E28-11CF-9008-00AA0042B7CE}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModulesDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
ModulesDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModulesDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ModulesDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModulesDispT<T>::get_Item(TVariantInParam Index/*[in]*/, Access_97::ModulePtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Module**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ModulePtr __fastcall
ModulesDispT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  Access_97::ModulePtr pRet;
  this->get_Item(Index, (Access_97::ModulePtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModulesDispT<T>::get_Count(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ModulesDispT<T>::get_Count(void)
{
  long pRet;
  this->get_Count((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ModulesDispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ModulesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

// *********************************************************************//
// SmartIntf: TCOM_Form
// Interface: _Form
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_FormName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FormName(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_FormName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FormName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_FormName(BSTR pRet/*[in]*/)
{
  return (*this)->set_FormName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_RecordSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_RecordSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_RecordSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_RecordSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_RecordSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_RecordSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Filter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Filter(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_Filter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Filter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Filter(BSTR pRet/*[in]*/)
{
  return (*this)->set_Filter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_FilterOn(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FilterOn(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_FilterOn(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FilterOn((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_FilterOn(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FilterOn(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OrderBy(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OrderBy(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OrderBy(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OrderBy((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OrderBy(BSTR pRet/*[in]*/)
{
  return (*this)->set_OrderBy(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OrderByOn(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_OrderByOn(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_OrderByOn(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_OrderByOn((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OrderByOn(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_OrderByOn(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AllowFilters(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AllowFilters(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_AllowFilters(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AllowFilters((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AllowFilters(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AllowFilters(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Caption(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_Caption(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Caption((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  return (*this)->set_Caption(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DefaultView(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultView(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_DefaultView(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DefaultView((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DefaultView(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DefaultView(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_ViewsAllowed(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ViewsAllowed(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_ViewsAllowed(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ViewsAllowed((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_ViewsAllowed(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ViewsAllowed(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AllowEditing(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AllowEditing(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_AllowEditing(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AllowEditing((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AllowEditing(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AllowEditing(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DefaultEditing(short* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultEditing(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_DefaultEditing(void)
{
  short pRet;
  OLECHECK(this->get_DefaultEditing((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DefaultEditing(short pRet/*[in]*/)
{
  return (*this)->set_DefaultEditing(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AllowEdits(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AllowEdits(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_AllowEdits(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AllowEdits((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AllowEdits(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AllowEdits(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AllowDeletions(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AllowDeletions(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_AllowDeletions(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AllowDeletions((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AllowDeletions(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AllowDeletions(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AllowAdditions(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AllowAdditions(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_AllowAdditions(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AllowAdditions((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AllowAdditions(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AllowAdditions(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DataEntry(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_DataEntry(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_DataEntry(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_DataEntry((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DataEntry(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_DataEntry(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AllowUpdating(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_AllowUpdating(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_AllowUpdating(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_AllowUpdating((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AllowUpdating(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_AllowUpdating(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_RecordsetType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_RecordsetType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_RecordsetType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_RecordsetType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_RecordsetType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_RecordsetType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_RecordLocks(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_RecordLocks(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_RecordLocks(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_RecordLocks((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_RecordLocks(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_RecordLocks(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_ScrollBars(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_ScrollBars(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_ScrollBars(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_ScrollBars((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_ScrollBars(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_ScrollBars(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_RecordSelectors(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_RecordSelectors(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_RecordSelectors(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_RecordSelectors((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_RecordSelectors(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_RecordSelectors(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_NavigationButtons(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_NavigationButtons(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_NavigationButtons(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_NavigationButtons((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_NavigationButtons(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_NavigationButtons(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DividingLines(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_DividingLines(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_DividingLines(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_DividingLines((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DividingLines(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_DividingLines(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AutoResize(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoResize(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_AutoResize(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoResize((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AutoResize(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoResize(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AutoCenter(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_AutoCenter(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_AutoCenter(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_AutoCenter((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AutoCenter(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_AutoCenter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PopUp(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_PopUp(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_PopUp(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_PopUp((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PopUp(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_PopUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Modal(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Modal(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_Modal(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Modal((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Modal(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Modal(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_BorderStyle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_BorderStyle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_BorderStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_ControlBox(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ControlBox(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_ControlBox(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ControlBox((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_ControlBox(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ControlBox(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_MinButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_MinButton(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_MinButton(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_MinButton((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_MinButton(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_MinButton(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_MaxButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_MaxButton(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_MaxButton(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_MaxButton((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_MaxButton(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_MaxButton(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_MinMaxButtons(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_MinMaxButtons(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_MinMaxButtons(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_MinMaxButtons((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_MinMaxButtons(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_MinMaxButtons(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_CloseButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_CloseButton(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_CloseButton(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_CloseButton((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_CloseButton(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_CloseButton(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_WhatsThisButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_WhatsThisButton(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_WhatsThisButton(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_WhatsThisButton((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_WhatsThisButton(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_WhatsThisButton(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Picture(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_Picture(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Picture((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  return (*this)->set_Picture(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PictureSizeMode(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureSizeMode(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_PictureSizeMode(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureSizeMode((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PictureSizeMode(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureSizeMode(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureAlignment(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_PictureAlignment(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureAlignment((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PictureAlignment(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureAlignment(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureTiling(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_PictureTiling(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_PictureTiling((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PictureTiling(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_PictureTiling(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Cycle(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_Cycle(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_Cycle(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_Cycle((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Cycle(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_Cycle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_MenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_MenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_MenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_MenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_MenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_MenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Toolbar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Toolbar(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_Toolbar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Toolbar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Toolbar(BSTR pRet/*[in]*/)
{
  return (*this)->set_Toolbar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_ShortcutMenu(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenu(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_ShortcutMenu(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ShortcutMenu((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_ShortcutMenu(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenu(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_GridX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_GridX(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_GridX(void)
{
  short pRet;
  OLECHECK(this->get_GridX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_GridX(short pRet/*[in]*/)
{
  return (*this)->set_GridX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_GridY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_GridY(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_GridY(void)
{
  short pRet;
  OLECHECK(this->get_GridY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_GridY(short pRet/*[in]*/)
{
  return (*this)->set_GridY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_LayoutForPrint(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_LayoutForPrint(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_LayoutForPrint(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_LayoutForPrint((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_LayoutForPrint(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_LayoutForPrint(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_FastLaserPrinting(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FastLaserPrinting(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_FastLaserPrinting(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FastLaserPrinting((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_FastLaserPrinting(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FastLaserPrinting(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_HelpFile(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpFile(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_HelpFile(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_HelpFile((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_HelpFile(BSTR pRet/*[in]*/)
{
  return (*this)->set_HelpFile(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_RowHeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_RowHeight(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_RowHeight(void)
{
  short pRet;
  OLECHECK(this->get_RowHeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_RowHeight(short pRet/*[in]*/)
{
  return (*this)->set_RowHeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DatasheetFontName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_DatasheetFontName(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_DatasheetFontName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_DatasheetFontName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DatasheetFontName(BSTR pRet/*[in]*/)
{
  return (*this)->set_DatasheetFontName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DatasheetFontHeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_DatasheetFontHeight(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_DatasheetFontHeight(void)
{
  short pRet;
  OLECHECK(this->get_DatasheetFontHeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DatasheetFontHeight(short pRet/*[in]*/)
{
  return (*this)->set_DatasheetFontHeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DatasheetFontWeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_DatasheetFontWeight(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_DatasheetFontWeight(void)
{
  short pRet;
  OLECHECK(this->get_DatasheetFontWeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DatasheetFontWeight(short pRet/*[in]*/)
{
  return (*this)->set_DatasheetFontWeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DatasheetFontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_DatasheetFontItalic(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_DatasheetFontItalic(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_DatasheetFontItalic((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DatasheetFontItalic(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_DatasheetFontItalic(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DatasheetFontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_DatasheetFontUnderline(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_DatasheetFontUnderline(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_DatasheetFontUnderline((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DatasheetFontUnderline(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_DatasheetFontUnderline(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_TabularCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TabularCharSet(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_TabularCharSet(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TabularCharSet((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_TabularCharSet(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TabularCharSet(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DatasheetGridlinesBehavior(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DatasheetGridlinesBehavior(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_DatasheetGridlinesBehavior(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DatasheetGridlinesBehavior((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DatasheetGridlinesBehavior(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DatasheetGridlinesBehavior(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DatasheetGridlinesColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_DatasheetGridlinesColor(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_DatasheetGridlinesColor(void)
{
  long pRet;
  OLECHECK(this->get_DatasheetGridlinesColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DatasheetGridlinesColor(long pRet/*[in]*/)
{
  return (*this)->set_DatasheetGridlinesColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DatasheetCellsEffect(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DatasheetCellsEffect(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_DatasheetCellsEffect(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DatasheetCellsEffect((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DatasheetCellsEffect(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DatasheetCellsEffect(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DatasheetForeColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_DatasheetForeColor(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_DatasheetForeColor(void)
{
  long pRet;
  OLECHECK(this->get_DatasheetForeColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DatasheetForeColor(long pRet/*[in]*/)
{
  return (*this)->set_DatasheetForeColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_ShowGrid(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_ShowGrid(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_ShowGrid(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_ShowGrid((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_ShowGrid(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_ShowGrid(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DatasheetBackColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_DatasheetBackColor(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_DatasheetBackColor(void)
{
  long pRet;
  OLECHECK(this->get_DatasheetBackColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_DatasheetBackColor(long pRet/*[in]*/)
{
  return (*this)->set_DatasheetBackColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Hwnd(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Hwnd(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_Hwnd(void)
{
  long pRet;
  OLECHECK(this->get_Hwnd((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Hwnd(long pRet/*[in]*/)
{
  return (*this)->set_Hwnd(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Count(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Count(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_Count(void)
{
  short pRet;
  OLECHECK(this->get_Count((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Count(short pRet/*[in]*/)
{
  return (*this)->set_Count(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Page(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Page(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_Page(void)
{
  long pRet;
  OLECHECK(this->get_Page((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Page(long pRet/*[in]*/)
{
  return (*this)->set_Page(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Pages(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Pages(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_Pages(void)
{
  short pRet;
  OLECHECK(this->get_Pages((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Pages(short pRet/*[in]*/)
{
  return (*this)->set_Pages(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_LogicalPageWidth(long* pRet/*[out,retval]*/)
{
  return (*this)->get_LogicalPageWidth(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_LogicalPageWidth(void)
{
  long pRet;
  OLECHECK(this->get_LogicalPageWidth((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_LogicalPageWidth(long pRet/*[in]*/)
{
  return (*this)->set_LogicalPageWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_LogicalPageHeight(long* pRet/*[out,retval]*/)
{
  return (*this)->get_LogicalPageHeight(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_LogicalPageHeight(void)
{
  long pRet;
  OLECHECK(this->get_LogicalPageHeight((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_LogicalPageHeight(long pRet/*[in]*/)
{
  return (*this)->set_LogicalPageHeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_ZoomControl(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ZoomControl(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_ZoomControl(void)
{
  long pRet;
  OLECHECK(this->get_ZoomControl((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_ZoomControl(long pRet/*[in]*/)
{
  return (*this)->set_ZoomControl(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Painting(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Painting(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_Painting(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Painting((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Painting(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Painting(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PrtMip(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PrtMip(pRet);
}

template <class T> TVariant __fastcall
TCOM_FormT<T>::get_PrtMip(void)
{
  TVariant pRet;
  OLECHECK(this->get_PrtMip((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PrtMip(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PrtMip(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PrtDevMode(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PrtDevMode(pRet);
}

template <class T> TVariant __fastcall
TCOM_FormT<T>::get_PrtDevMode(void)
{
  TVariant pRet;
  OLECHECK(this->get_PrtDevMode((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PrtDevMode(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PrtDevMode(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PrtDevNames(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PrtDevNames(pRet);
}

template <class T> TVariant __fastcall
TCOM_FormT<T>::get_PrtDevNames(void)
{
  TVariant pRet;
  OLECHECK(this->get_PrtDevNames((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PrtDevNames(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PrtDevNames(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_FrozenColumns(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FrozenColumns(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_FrozenColumns(void)
{
  short pRet;
  OLECHECK(this->get_FrozenColumns((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_FrozenColumns(short pRet/*[in]*/)
{
  return (*this)->set_FrozenColumns(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Bookmark(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_Bookmark(pRet);
}

template <class T> TVariant __fastcall
TCOM_FormT<T>::get_Bookmark(void)
{
  TVariant pRet;
  OLECHECK(this->get_Bookmark((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Bookmark(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_Bookmark(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_TabularFamily(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_TabularFamily(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_FormT<T>::get_TabularFamily(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_TabularFamily((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_TabularFamily(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_TabularFamily(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PaletteSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_PaletteSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_PaletteSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_PaletteSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PaletteSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_PaletteSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PaintPalette(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PaintPalette(pRet);
}

template <class T> TVariant __fastcall
TCOM_FormT<T>::get_PaintPalette(void)
{
  TVariant pRet;
  OLECHECK(this->get_PaintPalette((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PaintPalette(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PaintPalette(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnMenu(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMenu(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnMenu(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMenu((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnMenu(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMenu(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OpenArgs(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_OpenArgs(pRet);
}

template <class T> TVariant __fastcall
TCOM_FormT<T>::get_OpenArgs(void)
{
  TVariant pRet;
  OLECHECK(this->get_OpenArgs((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OpenArgs(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_OpenArgs(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_ConnectSynch(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ConnectSynch(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_ConnectSynch(void)
{
  short pRet;
  OLECHECK(this->get_ConnectSynch((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_ConnectSynch(short pRet/*[in]*/)
{
  return (*this)->set_ConnectSynch(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnCurrent(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnCurrent(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnCurrent(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnCurrent((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnCurrent(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnCurrent(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnInsert(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnInsert(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnInsert(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnInsert((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnInsert(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnInsert(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_BeforeInsert(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeInsert(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_BeforeInsert(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeInsert((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_BeforeInsert(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeInsert(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AfterInsert(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterInsert(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_AfterInsert(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterInsert((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AfterInsert(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterInsert(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_BeforeUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterUpdate(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_AfterUpdate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterUpdate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterUpdate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnDelete(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDelete(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnDelete(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDelete((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnDelete(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDelete(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_BeforeDelConfirm(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_BeforeDelConfirm(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_BeforeDelConfirm(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_BeforeDelConfirm((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_BeforeDelConfirm(BSTR pRet/*[in]*/)
{
  return (*this)->set_BeforeDelConfirm(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_AfterDelConfirm(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_AfterDelConfirm(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_AfterDelConfirm(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_AfterDelConfirm((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_AfterDelConfirm(BSTR pRet/*[in]*/)
{
  return (*this)->set_AfterDelConfirm(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnOpen(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnOpen(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnOpen(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnOpen((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnOpen(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnOpen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnLoad(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLoad(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnLoad(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLoad((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnLoad(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLoad(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnResize(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnResize(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnResize(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnResize((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnResize(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnResize(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnUnload(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnUnload(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnUnload(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnUnload((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnUnload(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnUnload(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnClose(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClose(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnClose(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClose((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnClose(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClose(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnActivate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnActivate(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnActivate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnActivate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnActivate(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnActivate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnDeactivate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDeactivate(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnDeactivate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDeactivate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnDeactivate(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDeactivate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnGotFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnGotFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnGotFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnGotFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnLostFocus(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnLostFocus(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnLostFocus((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnLostFocus(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDblClick(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnDblClick(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDblClick((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDblClick(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnMouseDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseMove(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnMouseMove(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseMove((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseMove(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMouseUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnMouseUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMouseUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMouseUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyDown(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnKeyDown(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyDown((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyDown(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyUp(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnKeyUp(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyUp((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyUp(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnKeyPress(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnKeyPress(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnKeyPress((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnKeyPress(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_KeyPreview(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_KeyPreview(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_KeyPreview(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_KeyPreview((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_KeyPreview(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_KeyPreview(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnError(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnError(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnError(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnError((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnError(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnError(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnFilter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnFilter(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnFilter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnFilter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnFilter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnFilter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnApplyFilter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnApplyFilter(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnApplyFilter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnApplyFilter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnApplyFilter(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnApplyFilter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_OnTimer(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnTimer(pRet);
}

template <class T> BSTR __fastcall
TCOM_FormT<T>::get_OnTimer(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnTimer((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_OnTimer(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnTimer(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_TimerInterval(long* pRet/*[out,retval]*/)
{
  return (*this)->get_TimerInterval(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_TimerInterval(void)
{
  long pRet;
  OLECHECK(this->get_TimerInterval((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_TimerInterval(long pRet/*[in]*/)
{
  return (*this)->set_TimerInterval(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Dirty(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Dirty(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_Dirty(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Dirty((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_Dirty(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Dirty(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_WindowWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_WindowWidth(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_WindowWidth(void)
{
  short pRet;
  OLECHECK(this->get_WindowWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_WindowWidth(short pRet/*[in]*/)
{
  return (*this)->set_WindowWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_WindowHeight(short* pRet/*[out,retval]*/)
{
  return (*this)->get_WindowHeight(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_WindowHeight(void)
{
  short pRet;
  OLECHECK(this->get_WindowHeight((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_WindowHeight(short pRet/*[in]*/)
{
  return (*this)->set_WindowHeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_CurrentView(short* pRet/*[out,retval]*/)
{
  return (*this)->get_CurrentView(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_CurrentView(void)
{
  short pRet;
  OLECHECK(this->get_CurrentView((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_CurrentView(short pRet/*[in]*/)
{
  return (*this)->set_CurrentView(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_CurrentSectionTop(short* pRet/*[out,retval]*/)
{
  return (*this)->get_CurrentSectionTop(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_CurrentSectionTop(void)
{
  short pRet;
  OLECHECK(this->get_CurrentSectionTop((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_CurrentSectionTop(short pRet/*[in]*/)
{
  return (*this)->set_CurrentSectionTop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_CurrentSectionLeft(short* pRet/*[out,retval]*/)
{
  return (*this)->get_CurrentSectionLeft(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_CurrentSectionLeft(void)
{
  short pRet;
  OLECHECK(this->get_CurrentSectionLeft((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_CurrentSectionLeft(short pRet/*[in]*/)
{
  return (*this)->set_CurrentSectionLeft(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_SelLeft(long* pRet/*[out,retval]*/)
{
  return (*this)->get_SelLeft(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_SelLeft(void)
{
  long pRet;
  OLECHECK(this->get_SelLeft((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_SelLeft(long pRet/*[in]*/)
{
  return (*this)->set_SelLeft(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_SelTop(long* pRet/*[out,retval]*/)
{
  return (*this)->get_SelTop(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_SelTop(void)
{
  long pRet;
  OLECHECK(this->get_SelTop((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_SelTop(long pRet/*[in]*/)
{
  return (*this)->set_SelTop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_SelWidth(long* pRet/*[out,retval]*/)
{
  return (*this)->get_SelWidth(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_SelWidth(void)
{
  long pRet;
  OLECHECK(this->get_SelWidth((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_SelWidth(long pRet/*[in]*/)
{
  return (*this)->set_SelWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_SelHeight(long* pRet/*[out,retval]*/)
{
  return (*this)->get_SelHeight(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_SelHeight(void)
{
  long pRet;
  OLECHECK(this->get_SelHeight((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_SelHeight(long pRet/*[in]*/)
{
  return (*this)->set_SelHeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_CurrentRecord(long* pRet/*[out,retval]*/)
{
  return (*this)->get_CurrentRecord(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_CurrentRecord(void)
{
  long pRet;
  OLECHECK(this->get_CurrentRecord((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_CurrentRecord(long pRet/*[in]*/)
{
  return (*this)->set_CurrentRecord(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureData(pRet);
}

template <class T> TVariant __fastcall
TCOM_FormT<T>::get_PictureData(void)
{
  TVariant pRet;
  OLECHECK(this->get_PictureData((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PictureData(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_InsideHeight(long* pRet/*[out,retval]*/)
{
  return (*this)->get_InsideHeight(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_InsideHeight(void)
{
  long pRet;
  OLECHECK(this->get_InsideHeight((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_InsideHeight(long pRet/*[in]*/)
{
  return (*this)->set_InsideHeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_InsideWidth(long* pRet/*[out,retval]*/)
{
  return (*this)->get_InsideWidth(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_InsideWidth(void)
{
  long pRet;
  OLECHECK(this->get_InsideWidth((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_InsideWidth(long pRet/*[in]*/)
{
  return (*this)->set_InsideWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_PicturePalette(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PicturePalette(pRet);
}

template <class T> TVariant __fastcall
TCOM_FormT<T>::get_PicturePalette(void)
{
  TVariant pRet;
  OLECHECK(this->get_PicturePalette((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_PicturePalette(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PicturePalette(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_HasModule(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HasModule(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_FormT<T>::get_HasModule(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HasModule((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_HasModule(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HasModule(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_acHiddenCurrentPage(long* pRet/*[out,retval]*/)
{
  return (*this)->get_acHiddenCurrentPage(pRet);
}

template <class T> long __fastcall
TCOM_FormT<T>::get_acHiddenCurrentPage(void)
{
  long pRet;
  OLECHECK(this->get_acHiddenCurrentPage((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::set_acHiddenCurrentPage(long pRet/*[in]*/)
{
  return (*this)->set_acHiddenCurrentPage(pRet);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_FormT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_FormT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_NewRecord(short* pRet/*[out,retval]*/)
{
  return (*this)->get_NewRecord(pRet);
}

template <class T> short __fastcall
TCOM_FormT<T>::get_NewRecord(void)
{
  short pRet;
  OLECHECK(this->get_NewRecord((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::Undo(void)
{
  return (*this)->Undo();
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_ActiveControl(pRet);
}

template <class T> Access_97::AccessControlPtr __fastcall
TCOM_FormT<T>::get_ActiveControl(void)
{
  Access_97::AccessControlPtr pRet;
  OLECHECK(this->get_ActiveControl((Access_97::AccessControlPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_DefaultControl(long ControlType/*[in]*/, 
                                  Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultControl(ControlType, pRet);
}

template <class T> Access_97::AccessControlPtr __fastcall
TCOM_FormT<T>::get_DefaultControl(long ControlType/*[in]*/)
{
  Access_97::AccessControlPtr pRet;
  OLECHECK(this->get_DefaultControl(ControlType, (Access_97::AccessControlPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Dynaset(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Dynaset(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_FormT<T>::get_Dynaset(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Dynaset((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_RecordsetClone(Dao_97::RecordsetPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_RecordsetClone(pRet);
}

template <class T> Dao_97::RecordsetPtr __fastcall
TCOM_FormT<T>::get_RecordsetClone(void)
{
  Dao_97::RecordsetPtr pRet;
  OLECHECK(this->get_RecordsetClone((Dao_97::RecordsetPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Section(TVariantInParam var/*[in]*/, 
                           Access_97::AccessSectionPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(var, pRet);
}

template <class T> Access_97::AccessSectionPtr __fastcall
TCOM_FormT<T>::get_Section(TVariantInParam var/*[in]*/)
{
  Access_97::AccessSectionPtr pRet;
  OLECHECK(this->get_Section(var, (Access_97::AccessSectionPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Form(pRet);
}

template <class T> Access_97::AccessFormPtr __fastcall
TCOM_FormT<T>::get_Form(void)
{
  Access_97::AccessFormPtr pRet;
  OLECHECK(this->get_Form((Access_97::AccessFormPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Module(Access_97::ModulePtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Module(pRet);
}

template <class T> Access_97::ModulePtr __fastcall
TCOM_FormT<T>::get_Module(void)
{
  Access_97::ModulePtr pRet;
  OLECHECK(this->get_Module((Access_97::ModulePtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_FormT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_ConnectControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_ConnectControl(pRet);
}

template <class T> Access_97::AccessControlPtr __fastcall
TCOM_FormT<T>::get_ConnectControl(void)
{
  Access_97::AccessControlPtr pRet;
  OLECHECK(this->get_ConnectControl((Access_97::AccessControlPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::Recalc(void)
{
  return (*this)->Recalc();
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::Requery(void)
{
  return (*this)->Requery();
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::Refresh(void)
{
  return (*this)->Refresh();
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::Repaint(void)
{
  return (*this)->Repaint();
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::GoToPage(long PageNumber/*[in]*/, long Right/*[in,def,opt]*/, 
                        long Down/*[in,def,opt]*/)
{
  return (*this)->GoToPage(PageNumber, Right, Down);
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::SetFocus(void)
{
  return (*this)->SetFocus();
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::Controls_Ptr __fastcall
TCOM_FormT<T>::get_Controls(void)
{
  Access_97::Controls_Ptr pRet;
  OLECHECK(this->get_Controls((Access_97::Controls_Ptr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  return (*this)->_NewEnum(pRet);
}

template <class T> LPUNKNOWN __fastcall
TCOM_FormT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_FormT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                         TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_FormT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

// *********************************************************************//
// DispIntf:  _Form
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E5135D80-8F8D-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_FormName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormName"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_FormName(void)
{
  BSTR pRet;
  this->get_FormName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_FormName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormName"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_RecordSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSource"), DISPID(153));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_RecordSource(void)
{
  BSTR pRet;
  this->get_RecordSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_RecordSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSource"), DISPID(153));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Filter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_Filter(void)
{
  BSTR pRet;
  this->get_Filter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Filter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(271));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_FilterOn(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterOn"), DISPID(374));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_FilterOn(void)
{
  TOLEBOOL pRet;
  this->get_FilterOn((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_FilterOn(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterOn"), DISPID(374));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OrderBy(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderBy"), DISPID(373));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OrderBy(void)
{
  BSTR pRet;
  this->get_OrderBy((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OrderBy(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderBy"), DISPID(373));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OrderByOn(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderByOn"), DISPID(379));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_OrderByOn(void)
{
  TOLEBOOL pRet;
  this->get_OrderByOn((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OrderByOn(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderByOn"), DISPID(379));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AllowFilters(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFilters"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_AllowFilters(void)
{
  TOLEBOOL pRet;
  this->get_AllowFilters((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AllowFilters(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowFilters"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_Caption(void)
{
  BSTR pRet;
  this->get_Caption((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DefaultView(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultView"), DISPID(144));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_DefaultView(void)
{
  unsigned_char pRet;
  this->get_DefaultView((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DefaultView(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultView"), DISPID(144));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_ViewsAllowed(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewsAllowed"), DISPID(143));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_ViewsAllowed(void)
{
  unsigned_char pRet;
  this->get_ViewsAllowed((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_ViewsAllowed(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewsAllowed"), DISPID(143));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AllowEditing(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowEditing"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_AllowEditing(void)
{
  TOLEBOOL pRet;
  this->get_AllowEditing((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AllowEditing(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowEditing"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DefaultEditing(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultEditing"), DISPID(131));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_DefaultEditing(void)
{
  short pRet;
  this->get_DefaultEditing((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DefaultEditing(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultEditing"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AllowEdits(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowEdits"), DISPID(382));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_AllowEdits(void)
{
  TOLEBOOL pRet;
  this->get_AllowEdits((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AllowEdits(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowEdits"), DISPID(382));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AllowDeletions(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDeletions"), DISPID(324));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_AllowDeletions(void)
{
  TOLEBOOL pRet;
  this->get_AllowDeletions((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AllowDeletions(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowDeletions"), DISPID(324));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AllowAdditions(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowAdditions"), DISPID(367));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_AllowAdditions(void)
{
  TOLEBOOL pRet;
  this->get_AllowAdditions((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AllowAdditions(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowAdditions"), DISPID(367));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DataEntry(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataEntry"), DISPID(381));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_DataEntry(void)
{
  TOLEBOOL pRet;
  this->get_DataEntry((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DataEntry(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataEntry"), DISPID(381));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AllowUpdating(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowUpdating"), DISPID(45));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_AllowUpdating(void)
{
  unsigned_char pRet;
  this->get_AllowUpdating((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AllowUpdating(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowUpdating"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_RecordsetType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetType"), DISPID(380));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_RecordsetType(void)
{
  unsigned_char pRet;
  this->get_RecordsetType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_RecordsetType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetType"), DISPID(380));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_RecordLocks(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordLocks"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_RecordLocks(void)
{
  unsigned_char pRet;
  this->get_RecordLocks((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_RecordLocks(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordLocks"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_ScrollBars(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(149));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_ScrollBars(void)
{
  unsigned_char pRet;
  this->get_ScrollBars((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_ScrollBars(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(149));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_RecordSelectors(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSelectors"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_RecordSelectors(void)
{
  TOLEBOOL pRet;
  this->get_RecordSelectors((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_RecordSelectors(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSelectors"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_NavigationButtons(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NavigationButtons"), DISPID(311));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_NavigationButtons(void)
{
  TOLEBOOL pRet;
  this->get_NavigationButtons((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_NavigationButtons(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NavigationButtons"), DISPID(311));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DividingLines(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DividingLines"), DISPID(359));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_DividingLines(void)
{
  TOLEBOOL pRet;
  this->get_DividingLines((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DividingLines(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DividingLines"), DISPID(359));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AutoResize(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoResize"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_AutoResize(void)
{
  TOLEBOOL pRet;
  this->get_AutoResize((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AutoResize(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoResize"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AutoCenter(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoCenter"), DISPID(310));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_AutoCenter(void)
{
  TOLEBOOL pRet;
  this->get_AutoCenter((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AutoCenter(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoCenter"), DISPID(310));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PopUp(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PopUp"), DISPID(86));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_PopUp(void)
{
  TOLEBOOL pRet;
  this->get_PopUp((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PopUp(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PopUp"), DISPID(86));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Modal(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Modal"), DISPID(62));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_Modal(void)
{
  TOLEBOOL pRet;
  this->get_Modal((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Modal(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Modal"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_BorderStyle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_BorderStyle(void)
{
  unsigned_char pRet;
  this->get_BorderStyle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_BorderStyle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_ControlBox(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlBox"), DISPID(94));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_ControlBox(void)
{
  TOLEBOOL pRet;
  this->get_ControlBox((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_ControlBox(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ControlBox"), DISPID(94));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_MinButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinButton"), DISPID(92));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_MinButton(void)
{
  TOLEBOOL pRet;
  this->get_MinButton((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_MinButton(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinButton"), DISPID(92));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_MaxButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxButton"), DISPID(91));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_MaxButton(void)
{
  TOLEBOOL pRet;
  this->get_MaxButton((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_MaxButton(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxButton"), DISPID(91));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_MinMaxButtons(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinMaxButtons"), DISPID(369));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_MinMaxButtons(void)
{
  unsigned_char pRet;
  this->get_MinMaxButtons((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_MinMaxButtons(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinMaxButtons"), DISPID(369));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_CloseButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseButton"), DISPID(335));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_CloseButton(void)
{
  TOLEBOOL pRet;
  this->get_CloseButton((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_CloseButton(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseButton"), DISPID(335));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_WhatsThisButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WhatsThisButton"), DISPID(93));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_WhatsThisButton(void)
{
  TOLEBOOL pRet;
  this->get_WhatsThisButton((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_WhatsThisButton(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WhatsThisButton"), DISPID(93));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_Picture(void)
{
  BSTR pRet;
  this->get_Picture((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  this->get_PictureType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PictureSizeMode(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_PictureSizeMode(void)
{
  unsigned_char pRet;
  this->get_PictureSizeMode((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PictureSizeMode(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(357));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(354));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_PictureAlignment(void)
{
  unsigned_char pRet;
  this->get_PictureAlignment((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PictureAlignment(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(358));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_PictureTiling(void)
{
  TOLEBOOL pRet;
  this->get_PictureTiling((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PictureTiling(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(358));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Cycle(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cycle"), DISPID(372));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_Cycle(void)
{
  unsigned_char pRet;
  this->get_Cycle((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Cycle(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Cycle"), DISPID(372));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_MenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuBar"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_MenuBar(void)
{
  BSTR pRet;
  this->get_MenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_MenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuBar"), DISPID(261));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Toolbar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Toolbar"), DISPID(396));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_Toolbar(void)
{
  BSTR pRet;
  this->get_Toolbar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Toolbar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Toolbar"), DISPID(396));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_ShortcutMenu(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenu"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_ShortcutMenu(void)
{
  TOLEBOOL pRet;
  this->get_ShortcutMenu((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_ShortcutMenu(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenu"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_GridX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(41));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_GridX(void)
{
  short pRet;
  this->get_GridX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_GridX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_GridY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(42));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_GridY(void)
{
  short pRet;
  this->get_GridY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_GridY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_LayoutForPrint(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayoutForPrint"), DISPID(140));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_LayoutForPrint(void)
{
  TOLEBOOL pRet;
  this->get_LayoutForPrint((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_LayoutForPrint(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayoutForPrint"), DISPID(140));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_FastLaserPrinting(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FastLaserPrinting"), DISPID(141));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_FastLaserPrinting(void)
{
  TOLEBOOL pRet;
  this->get_FastLaserPrinting((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_FastLaserPrinting(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FastLaserPrinting"), DISPID(141));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_HelpFile(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_HelpFile(void)
{
  BSTR pRet;
  this->get_HelpFile((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_HelpFile(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_RowHeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowHeight"), DISPID(165));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_RowHeight(void)
{
  short pRet;
  this->get_RowHeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_RowHeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowHeight"), DISPID(165));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DatasheetFontName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetFontName"), DISPID(157));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_DatasheetFontName(void)
{
  BSTR pRet;
  this->get_DatasheetFontName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DatasheetFontName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetFontName"), DISPID(157));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DatasheetFontHeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetFontHeight"), DISPID(158));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_DatasheetFontHeight(void)
{
  short pRet;
  this->get_DatasheetFontHeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DatasheetFontHeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetFontHeight"), DISPID(158));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DatasheetFontWeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetFontWeight"), DISPID(159));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_DatasheetFontWeight(void)
{
  short pRet;
  this->get_DatasheetFontWeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DatasheetFontWeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetFontWeight"), DISPID(159));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DatasheetFontItalic(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetFontItalic"), DISPID(160));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_DatasheetFontItalic(void)
{
  TOLEBOOL pRet;
  this->get_DatasheetFontItalic((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DatasheetFontItalic(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetFontItalic"), DISPID(160));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DatasheetFontUnderline(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetFontUnderline"), DISPID(161));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_DatasheetFontUnderline(void)
{
  TOLEBOOL pRet;
  this->get_DatasheetFontUnderline((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DatasheetFontUnderline(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetFontUnderline"), DISPID(161));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_TabularCharSet(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabularCharSet"), DISPID(193));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_TabularCharSet(void)
{
  unsigned_char pRet;
  this->get_TabularCharSet((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_TabularCharSet(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabularCharSet"), DISPID(193));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DatasheetGridlinesBehavior(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetGridlinesBehavior"), DISPID(363));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_DatasheetGridlinesBehavior(void)
{
  unsigned_char pRet;
  this->get_DatasheetGridlinesBehavior((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DatasheetGridlinesBehavior(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetGridlinesBehavior"), DISPID(363));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DatasheetGridlinesColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetGridlinesColor"), DISPID(364));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_DatasheetGridlinesColor(void)
{
  long pRet;
  this->get_DatasheetGridlinesColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DatasheetGridlinesColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetGridlinesColor"), DISPID(364));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DatasheetCellsEffect(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetCellsEffect"), DISPID(365));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_DatasheetCellsEffect(void)
{
  unsigned_char pRet;
  this->get_DatasheetCellsEffect((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DatasheetCellsEffect(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetCellsEffect"), DISPID(365));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DatasheetForeColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetForeColor"), DISPID(349));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_DatasheetForeColor(void)
{
  long pRet;
  this->get_DatasheetForeColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DatasheetForeColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetForeColor"), DISPID(349));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_ShowGrid(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGrid"), DISPID(166));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_ShowGrid(void)
{
  TOLEBOOL pRet;
  this->get_ShowGrid((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_ShowGrid(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowGrid"), DISPID(166));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DatasheetBackColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetBackColor"), DISPID(366));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_DatasheetBackColor(void)
{
  long pRet;
  this->get_DatasheetBackColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_DatasheetBackColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatasheetBackColor"), DISPID(366));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Hwnd(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hwnd"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_Hwnd(void)
{
  long pRet;
  this->get_Hwnd((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Hwnd(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hwnd"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Count(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_Count(void)
{
  short pRet;
  this->get_Count((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Count(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Page(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Page"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_Page(void)
{
  long pRet;
  this->get_Page((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Page(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Page"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Pages(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pages"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_Pages(void)
{
  short pRet;
  this->get_Pages((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Pages(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pages"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_LogicalPageWidth(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LogicalPageWidth"), DISPID(197));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_LogicalPageWidth(void)
{
  long pRet;
  this->get_LogicalPageWidth((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_LogicalPageWidth(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LogicalPageWidth"), DISPID(197));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_LogicalPageHeight(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LogicalPageHeight"), DISPID(198));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_LogicalPageHeight(void)
{
  long pRet;
  this->get_LogicalPageHeight((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_LogicalPageHeight(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LogicalPageHeight"), DISPID(198));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_ZoomControl(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZoomControl"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_ZoomControl(void)
{
  long pRet;
  this->get_ZoomControl((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_ZoomControl(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZoomControl"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Painting(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Painting"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_Painting(void)
{
  TOLEBOOL pRet;
  this->get_Painting((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Painting(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Painting"), DISPID(264));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PrtMip(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtMip"), DISPID(188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_FormDispT<T>::get_PrtMip(void)
{
  TVariant pRet;
  this->get_PrtMip((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PrtMip(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtMip"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PrtDevMode(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtDevMode"), DISPID(189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_FormDispT<T>::get_PrtDevMode(void)
{
  TVariant pRet;
  this->get_PrtDevMode((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PrtDevMode(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtDevMode"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PrtDevNames(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtDevNames"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_FormDispT<T>::get_PrtDevNames(void)
{
  TVariant pRet;
  this->get_PrtDevNames((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PrtDevNames(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtDevNames"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_FrozenColumns(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrozenColumns"), DISPID(167));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_FrozenColumns(void)
{
  short pRet;
  this->get_FrozenColumns((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_FrozenColumns(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrozenColumns"), DISPID(167));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Bookmark(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(229));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_FormDispT<T>::get_Bookmark(void)
{
  TVariant pRet;
  this->get_Bookmark((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Bookmark(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(229));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_TabularFamily(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabularFamily"), DISPID(267));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_FormDispT<T>::get_TabularFamily(void)
{
  unsigned_char pRet;
  this->get_TabularFamily((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_TabularFamily(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TabularFamily"), DISPID(267));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PaletteSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PaletteSource"), DISPID(95));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_PaletteSource(void)
{
  BSTR pRet;
  this->get_PaletteSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PaletteSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PaletteSource"), DISPID(95));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PaintPalette(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PaintPalette"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_FormDispT<T>::get_PaintPalette(void)
{
  TVariant pRet;
  this->get_PaintPalette((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PaintPalette(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PaintPalette"), DISPID(97));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnMenu(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMenu"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnMenu(void)
{
  BSTR pRet;
  this->get_OnMenu((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnMenu(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMenu"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OpenArgs(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenArgs"), DISPID(316));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_FormDispT<T>::get_OpenArgs(void)
{
  TVariant pRet;
  this->get_OpenArgs((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OpenArgs(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenArgs"), DISPID(316));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_ConnectSynch(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectSynch"), DISPID(317));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_ConnectSynch(void)
{
  short pRet;
  this->get_ConnectSynch((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_ConnectSynch(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectSynch"), DISPID(317));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnCurrent(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnCurrent"), DISPID(83));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnCurrent(void)
{
  BSTR pRet;
  this->get_OnCurrent((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnCurrent(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnCurrent"), DISPID(83));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnInsert(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnInsert"), DISPID(77));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnInsert(void)
{
  BSTR pRet;
  this->get_OnInsert((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnInsert(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnInsert"), DISPID(77));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_BeforeInsert(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeInsert"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_BeforeInsert(void)
{
  BSTR pRet;
  this->get_BeforeInsert((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_BeforeInsert(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeInsert"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AfterInsert(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterInsert"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_AfterInsert(void)
{
  BSTR pRet;
  this->get_AfterInsert((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AfterInsert(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterInsert"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_BeforeUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_BeforeUpdate(void)
{
  BSTR pRet;
  this->get_BeforeUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_BeforeUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeUpdate"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AfterUpdate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_AfterUpdate(void)
{
  BSTR pRet;
  this->get_AfterUpdate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AfterUpdate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterUpdate"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnDelete(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDelete"), DISPID(75));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnDelete(void)
{
  BSTR pRet;
  this->get_OnDelete((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnDelete(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDelete"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_BeforeDelConfirm(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeDelConfirm"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_BeforeDelConfirm(void)
{
  BSTR pRet;
  this->get_BeforeDelConfirm((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_BeforeDelConfirm(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeforeDelConfirm"), DISPID(121));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_AfterDelConfirm(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterDelConfirm"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_AfterDelConfirm(void)
{
  BSTR pRet;
  this->get_AfterDelConfirm((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_AfterDelConfirm(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AfterDelConfirm"), DISPID(122));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnOpen(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnOpen"), DISPID(73));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnOpen(void)
{
  BSTR pRet;
  this->get_OnOpen((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnOpen(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnOpen"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnLoad(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLoad"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnLoad(void)
{
  BSTR pRet;
  this->get_OnLoad((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnLoad(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLoad"), DISPID(124));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnResize(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnResize"), DISPID(114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnResize(void)
{
  BSTR pRet;
  this->get_OnResize((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnResize(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnResize"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnUnload(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnUnload"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnUnload(void)
{
  BSTR pRet;
  this->get_OnUnload((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnUnload(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnUnload"), DISPID(125));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnClose(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClose"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnClose(void)
{
  BSTR pRet;
  this->get_OnClose((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnClose(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClose"), DISPID(74));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnActivate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnActivate"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnActivate(void)
{
  BSTR pRet;
  this->get_OnActivate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnActivate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnActivate"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnDeactivate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDeactivate"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnDeactivate(void)
{
  BSTR pRet;
  this->get_OnDeactivate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnDeactivate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDeactivate"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnGotFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnGotFocus(void)
{
  BSTR pRet;
  this->get_OnGotFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnGotFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnGotFocus"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnLostFocus(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnLostFocus(void)
{
  BSTR pRet;
  this->get_OnLostFocus((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnLostFocus(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnLostFocus"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnClick(void)
{
  BSTR pRet;
  this->get_OnClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClick"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnDblClick(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnDblClick(void)
{
  BSTR pRet;
  this->get_OnDblClick((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnDblClick(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDblClick"), DISPID(223));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnMouseDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnMouseDown(void)
{
  BSTR pRet;
  this->get_OnMouseDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnMouseDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseDown"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnMouseMove(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnMouseMove(void)
{
  BSTR pRet;
  this->get_OnMouseMove((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnMouseMove(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseMove"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnMouseUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnMouseUp(void)
{
  BSTR pRet;
  this->get_OnMouseUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnMouseUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMouseUp"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnKeyDown(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnKeyDown(void)
{
  BSTR pRet;
  this->get_OnKeyDown((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnKeyDown(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyDown"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnKeyUp(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnKeyUp(void)
{
  BSTR pRet;
  this->get_OnKeyUp((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnKeyUp(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyUp"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnKeyPress(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnKeyPress(void)
{
  BSTR pRet;
  this->get_OnKeyPress((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnKeyPress(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnKeyPress"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_KeyPreview(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(368));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_KeyPreview(void)
{
  TOLEBOOL pRet;
  this->get_KeyPreview((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_KeyPreview(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyPreview"), DISPID(368));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnError(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnError"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnError(void)
{
  BSTR pRet;
  this->get_OnError((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnError(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnError"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnFilter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnFilter"), DISPID(375));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnFilter(void)
{
  BSTR pRet;
  this->get_OnFilter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnFilter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnFilter"), DISPID(375));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnApplyFilter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnApplyFilter"), DISPID(376));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnApplyFilter(void)
{
  BSTR pRet;
  this->get_OnApplyFilter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnApplyFilter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnApplyFilter"), DISPID(376));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_OnTimer(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnTimer"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_FormDispT<T>::get_OnTimer(void)
{
  BSTR pRet;
  this->get_OnTimer((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_OnTimer(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnTimer"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_TimerInterval(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimerInterval"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_TimerInterval(void)
{
  long pRet;
  this->get_TimerInterval((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_TimerInterval(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimerInterval"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Dirty(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dirty"), DISPID(318));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_Dirty(void)
{
  TOLEBOOL pRet;
  this->get_Dirty((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_Dirty(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dirty"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_WindowWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowWidth"), DISPID(319));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_WindowWidth(void)
{
  short pRet;
  this->get_WindowWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_WindowWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowWidth"), DISPID(319));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_WindowHeight(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowHeight"), DISPID(320));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_WindowHeight(void)
{
  short pRet;
  this->get_WindowHeight((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_WindowHeight(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("WindowHeight"), DISPID(320));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_CurrentView(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentView"), DISPID(321));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_CurrentView(void)
{
  short pRet;
  this->get_CurrentView((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_CurrentView(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentView"), DISPID(321));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_CurrentSectionTop(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentSectionTop"), DISPID(323));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_CurrentSectionTop(void)
{
  short pRet;
  this->get_CurrentSectionTop((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_CurrentSectionTop(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentSectionTop"), DISPID(323));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_CurrentSectionLeft(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentSectionLeft"), DISPID(322));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_CurrentSectionLeft(void)
{
  short pRet;
  this->get_CurrentSectionLeft((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_CurrentSectionLeft(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentSectionLeft"), DISPID(322));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_SelLeft(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLeft"), DISPID(330));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_SelLeft(void)
{
  long pRet;
  this->get_SelLeft((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_SelLeft(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelLeft"), DISPID(330));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_SelTop(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelTop"), DISPID(331));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_SelTop(void)
{
  long pRet;
  this->get_SelTop((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_SelTop(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelTop"), DISPID(331));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_SelWidth(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelWidth"), DISPID(332));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_SelWidth(void)
{
  long pRet;
  this->get_SelWidth((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_SelWidth(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelWidth"), DISPID(332));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_SelHeight(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelHeight"), DISPID(333));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_SelHeight(void)
{
  long pRet;
  this->get_SelHeight((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_SelHeight(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelHeight"), DISPID(333));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_CurrentRecord(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentRecord"), DISPID(334));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_CurrentRecord(void)
{
  long pRet;
  this->get_CurrentRecord((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_CurrentRecord(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentRecord"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_FormDispT<T>::get_PictureData(void)
{
  TVariant pRet;
  this->get_PictureData((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_InsideHeight(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsideHeight"), DISPID(360));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_InsideHeight(void)
{
  long pRet;
  this->get_InsideHeight((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_InsideHeight(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsideHeight"), DISPID(360));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_InsideWidth(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsideWidth"), DISPID(361));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_InsideWidth(void)
{
  long pRet;
  this->get_InsideWidth((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_InsideWidth(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsideWidth"), DISPID(361));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_PicturePalette(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePalette"), DISPID(356));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_FormDispT<T>::get_PicturePalette(void)
{
  TVariant pRet;
  this->get_PicturePalette((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_PicturePalette(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePalette"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_HasModule(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasModule"), DISPID(385));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_FormDispT<T>::get_HasModule(void)
{
  TOLEBOOL pRet;
  this->get_HasModule((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_HasModule(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasModule"), DISPID(385));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_acHiddenCurrentPage(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("acHiddenCurrentPage"), DISPID(406));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_FormDispT<T>::get_acHiddenCurrentPage(void)
{
  long pRet;
  this->get_acHiddenCurrentPage((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::set_acHiddenCurrentPage(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("acHiddenCurrentPage"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_FormDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_FormDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_NewRecord(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewRecord"), DISPID(2147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_FormDispT<T>::get_NewRecord(void)
{
  short pRet;
  this->get_NewRecord((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(2145));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveControl"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
_FormDispT<T>::get_ActiveControl(void)
{
  Access_97::AccessControlPtr pRet;
  this->get_ActiveControl((Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_DefaultControl(long ControlType/*[in]*/, 
                                  Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultControl"), DISPID(2150));
  TAutoArgs<1> _args;
  _args[1] = ControlType /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
_FormDispT<T>::get_DefaultControl(long ControlType/*[in]*/)
{
  Access_97::AccessControlPtr pRet;
  this->get_DefaultControl(ControlType, (Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Dynaset(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dynaset"), DISPID(2085));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_FormDispT<T>::get_Dynaset(void)
{
  LPDISPATCH pRet;
  this->get_Dynaset((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_RecordsetClone(Dao_97::RecordsetPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordsetClone"), DISPID(2086));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Dao_97::Recordset**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Dao_97::RecordsetPtr __fastcall
_FormDispT<T>::get_RecordsetClone(void)
{
  Dao_97::RecordsetPtr pRet;
  this->get_RecordsetClone((Dao_97::RecordsetPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Section(TVariantInParam var/*[in]*/, 
                           Access_97::AccessSectionPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(2088));
  TAutoArgs<1> _args;
  _args[1] = var /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessSection**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessSectionPtr __fastcall
_FormDispT<T>::get_Section(TVariantInParam var/*[in]*/)
{
  Access_97::AccessSectionPtr pRet;
  this->get_Section(var, (Access_97::AccessSectionPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Form(Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Form"), DISPID(2089));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessForm**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessFormPtr __fastcall
_FormDispT<T>::get_Form(void)
{
  Access_97::AccessFormPtr pRet;
  this->get_Form((Access_97::AccessFormPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Module(Access_97::ModulePtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Module"), DISPID(2090));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Module**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ModulePtr __fastcall
_FormDispT<T>::get_Module(void)
{
  Access_97::ModulePtr pRet;
  this->get_Module((Access_97::ModulePtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_FormDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_ConnectControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectControl"), DISPID(2092));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
_FormDispT<T>::get_ConnectControl(void)
{
  Access_97::AccessControlPtr pRet;
  this->get_ConnectControl((Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::Recalc()
{
  _TDispID _dispid(*this, OLETEXT("Recalc"), DISPID(2017));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::Requery()
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(2018));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::Repaint()
{
  _TDispID _dispid(*this, OLETEXT("Repaint"), DISPID(2020));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::GoToPage(long PageNumber/*[in]*/, long Right/*[in,def,opt]*/, 
                        long Down/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("GoToPage"), DISPID(2021));
  TAutoArgs<3> _args;
  _args[1] = PageNumber /*[VT_I4:0]*/;
  _args[2] = Right /*[VT_I4:0]*/;
  _args[3] = Down /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(2022));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Controls_**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::Controls_Ptr __fastcall
_FormDispT<T>::get_Controls(void)
{
  Access_97::Controls_Ptr pRet;
  this->get_Controls((Access_97::Controls_Ptr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_FormDispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_FormDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                         TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_FormDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

// *********************************************************************//
// DispIntf:  Forms
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {B1BB0E80-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Forms_DispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
Forms_DispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Forms_DispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
Forms_DispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Forms_DispT<T>::get_Item(TVariantInParam Index/*[in]*/, 
                         Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessForm**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessFormPtr __fastcall
Forms_DispT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  Access_97::AccessFormPtr pRet;
  this->get_Item(Index, (Access_97::AccessFormPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Forms_DispT<T>::get_Count(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Forms_DispT<T>::get_Count(void)
{
  long pRet;
  this->get_Count((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
Forms_DispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
Forms_DispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

// *********************************************************************//
// SmartIntf: TCOM_Report
// Interface: _Report
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FormName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FormName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_FormName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FormName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FormName(BSTR pRet/*[in]*/)
{
  return (*this)->set_FormName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_RecordSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_RecordSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_RecordSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_RecordSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_RecordSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_RecordSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Filter(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Filter(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_Filter(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Filter((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Filter(BSTR pRet/*[in]*/)
{
  return (*this)->set_Filter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FilterOn(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FilterOn(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_FilterOn(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FilterOn((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FilterOn(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FilterOn(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_OrderBy(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OrderBy(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_OrderBy(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OrderBy((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_OrderBy(BSTR pRet/*[in]*/)
{
  return (*this)->set_OrderBy(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_OrderByOn(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_OrderByOn(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_OrderByOn(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_OrderByOn((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_OrderByOn(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_OrderByOn(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Caption(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_Caption(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Caption((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  return (*this)->set_Caption(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_RecordLocks(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_RecordLocks(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ReportT<T>::get_RecordLocks(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_RecordLocks((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_RecordLocks(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_RecordLocks(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PageHeader(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PageHeader(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ReportT<T>::get_PageHeader(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PageHeader((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PageHeader(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PageHeader(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PageFooter(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PageFooter(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ReportT<T>::get_PageFooter(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PageFooter((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PageFooter(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PageFooter(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_DateGrouping(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_DateGrouping(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ReportT<T>::get_DateGrouping(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_DateGrouping((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_DateGrouping(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_DateGrouping(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_GrpKeepTogether(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_GrpKeepTogether(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ReportT<T>::get_GrpKeepTogether(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_GrpKeepTogether((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_GrpKeepTogether(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_GrpKeepTogether(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_MinButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_MinButton(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_MinButton(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_MinButton((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_MinButton(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_MinButton(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_MaxButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_MaxButton(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_MaxButton(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_MaxButton((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_MaxButton(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_MaxButton(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Width(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_Width(void)
{
  short pRet;
  OLECHECK(this->get_Width((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Width(short pRet/*[in]*/)
{
  return (*this)->set_Width(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Picture(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_Picture(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Picture((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  return (*this)->set_Picture(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureType(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ReportT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureType((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureType(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PictureSizeMode(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureSizeMode(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ReportT<T>::get_PictureSizeMode(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureSizeMode((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PictureSizeMode(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureSizeMode(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureAlignment(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ReportT<T>::get_PictureAlignment(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PictureAlignment((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PictureAlignment(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PictureAlignment(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureTiling(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_PictureTiling(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_PictureTiling((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PictureTiling(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_PictureTiling(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PicturePages(unsigned_char* pRet/*[out,retval]*/)
{
  return (*this)->get_PicturePages(pRet);
}

template <class T> unsigned_char __fastcall
TCOM_ReportT<T>::get_PicturePages(void)
{
  unsigned_char pRet;
  OLECHECK(this->get_PicturePages((unsigned_char*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PicturePages(unsigned_char pRet/*[in]*/)
{
  return (*this)->set_PicturePages(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_MenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_MenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_MenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_MenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_MenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_MenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Toolbar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Toolbar(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_Toolbar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Toolbar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Toolbar(BSTR pRet/*[in]*/)
{
  return (*this)->set_Toolbar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_GridX(short* pRet/*[out,retval]*/)
{
  return (*this)->get_GridX(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_GridX(void)
{
  short pRet;
  OLECHECK(this->get_GridX((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_GridX(short pRet/*[in]*/)
{
  return (*this)->set_GridX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_GridY(short* pRet/*[out,retval]*/)
{
  return (*this)->get_GridY(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_GridY(void)
{
  short pRet;
  OLECHECK(this->get_GridY((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_GridY(short pRet/*[in]*/)
{
  return (*this)->set_GridY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_LayoutForPrint(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_LayoutForPrint(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_LayoutForPrint(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_LayoutForPrint((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_LayoutForPrint(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_LayoutForPrint(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FastLaserPrinting(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_FastLaserPrinting(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_FastLaserPrinting(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_FastLaserPrinting((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FastLaserPrinting(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_FastLaserPrinting(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_HelpFile(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpFile(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_HelpFile(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_HelpFile((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_HelpFile(BSTR pRet/*[in]*/)
{
  return (*this)->set_HelpFile(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HelpContextId(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_HelpContextId(void)
{
  long pRet;
  OLECHECK(this->get_HelpContextId((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  return (*this)->set_HelpContextId(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Hwnd(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Hwnd(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_Hwnd(void)
{
  long pRet;
  OLECHECK(this->get_Hwnd((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Hwnd(long pRet/*[in]*/)
{
  return (*this)->set_Hwnd(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Count(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Count(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_Count(void)
{
  short pRet;
  OLECHECK(this->get_Count((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Count(short pRet/*[in]*/)
{
  return (*this)->set_Count(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Page(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Page(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_Page(void)
{
  long pRet;
  OLECHECK(this->get_Page((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Page(long pRet/*[in]*/)
{
  return (*this)->set_Page(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Pages(short* pRet/*[out,retval]*/)
{
  return (*this)->get_Pages(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_Pages(void)
{
  short pRet;
  OLECHECK(this->get_Pages((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Pages(short pRet/*[in]*/)
{
  return (*this)->set_Pages(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_LogicalPageWidth(long* pRet/*[out,retval]*/)
{
  return (*this)->get_LogicalPageWidth(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_LogicalPageWidth(void)
{
  long pRet;
  OLECHECK(this->get_LogicalPageWidth((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_LogicalPageWidth(long pRet/*[in]*/)
{
  return (*this)->set_LogicalPageWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_LogicalPageHeight(long* pRet/*[out,retval]*/)
{
  return (*this)->get_LogicalPageHeight(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_LogicalPageHeight(void)
{
  long pRet;
  OLECHECK(this->get_LogicalPageHeight((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_LogicalPageHeight(long pRet/*[in]*/)
{
  return (*this)->set_LogicalPageHeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_ZoomControl(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ZoomControl(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_ZoomControl(void)
{
  long pRet;
  OLECHECK(this->get_ZoomControl((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_ZoomControl(long pRet/*[in]*/)
{
  return (*this)->set_ZoomControl(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_HasData(long* pRet/*[out,retval]*/)
{
  return (*this)->get_HasData(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_HasData(void)
{
  long pRet;
  OLECHECK(this->get_HasData((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_HasData(long pRet/*[in]*/)
{
  return (*this)->set_HasData(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Left(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Left(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_Left(void)
{
  long pRet;
  OLECHECK(this->get_Left((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Left(long pRet/*[in]*/)
{
  return (*this)->set_Left(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Top(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Top(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_Top(void)
{
  long pRet;
  OLECHECK(this->get_Top((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Top(long pRet/*[in]*/)
{
  return (*this)->set_Top(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Height(long* pRet/*[out,retval]*/)
{
  return (*this)->get_Height(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_Height(void)
{
  long pRet;
  OLECHECK(this->get_Height((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Height(long pRet/*[in]*/)
{
  return (*this)->set_Height(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PrintSection(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_PrintSection(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_PrintSection(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_PrintSection((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PrintSection(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_PrintSection(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_NextRecord(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_NextRecord(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_NextRecord(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_NextRecord((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_NextRecord(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_NextRecord(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_MoveLayout(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_MoveLayout(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_MoveLayout(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_MoveLayout((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_MoveLayout(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_MoveLayout(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FormatCount(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FormatCount(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_FormatCount(void)
{
  short pRet;
  OLECHECK(this->get_FormatCount((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FormatCount(short pRet/*[in]*/)
{
  return (*this)->set_FormatCount(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PrintCount(short* pRet/*[out,retval]*/)
{
  return (*this)->get_PrintCount(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_PrintCount(void)
{
  short pRet;
  OLECHECK(this->get_PrintCount((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PrintCount(short pRet/*[in]*/)
{
  return (*this)->set_PrintCount(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Visible(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Visible(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Painting(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Painting(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_Painting(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Painting((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Painting(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Painting(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PrtMip(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PrtMip(pRet);
}

template <class T> TVariant __fastcall
TCOM_ReportT<T>::get_PrtMip(void)
{
  TVariant pRet;
  OLECHECK(this->get_PrtMip((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PrtMip(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PrtMip(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PrtDevMode(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PrtDevMode(pRet);
}

template <class T> TVariant __fastcall
TCOM_ReportT<T>::get_PrtDevMode(void)
{
  TVariant pRet;
  OLECHECK(this->get_PrtDevMode((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PrtDevMode(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PrtDevMode(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PrtDevNames(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PrtDevNames(pRet);
}

template <class T> TVariant __fastcall
TCOM_ReportT<T>::get_PrtDevNames(void)
{
  TVariant pRet;
  OLECHECK(this->get_PrtDevNames((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PrtDevNames(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PrtDevNames(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_ForeColor(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_ForeColor(void)
{
  long pRet;
  OLECHECK(this->get_ForeColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_ForeColor(long pRet/*[in]*/)
{
  return (*this)->set_ForeColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_CurrentX(float* pRet/*[out,retval]*/)
{
  return (*this)->get_CurrentX(pRet);
}

template <class T> float __fastcall
TCOM_ReportT<T>::get_CurrentX(void)
{
  float pRet;
  OLECHECK(this->get_CurrentX((float*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_CurrentX(float pRet/*[in]*/)
{
  return (*this)->set_CurrentX(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_CurrentY(float* pRet/*[out,retval]*/)
{
  return (*this)->get_CurrentY(pRet);
}

template <class T> float __fastcall
TCOM_ReportT<T>::get_CurrentY(void)
{
  float pRet;
  OLECHECK(this->get_CurrentY((float*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_CurrentY(float pRet/*[in]*/)
{
  return (*this)->set_CurrentY(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_ScaleHeight(float* pRet/*[out,retval]*/)
{
  return (*this)->get_ScaleHeight(pRet);
}

template <class T> float __fastcall
TCOM_ReportT<T>::get_ScaleHeight(void)
{
  float pRet;
  OLECHECK(this->get_ScaleHeight((float*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_ScaleHeight(float pRet/*[in]*/)
{
  return (*this)->set_ScaleHeight(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_ScaleLeft(float* pRet/*[out,retval]*/)
{
  return (*this)->get_ScaleLeft(pRet);
}

template <class T> float __fastcall
TCOM_ReportT<T>::get_ScaleLeft(void)
{
  float pRet;
  OLECHECK(this->get_ScaleLeft((float*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_ScaleLeft(float pRet/*[in]*/)
{
  return (*this)->set_ScaleLeft(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_ScaleMode(short* pRet/*[out,retval]*/)
{
  return (*this)->get_ScaleMode(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_ScaleMode(void)
{
  short pRet;
  OLECHECK(this->get_ScaleMode((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_ScaleMode(short pRet/*[in]*/)
{
  return (*this)->set_ScaleMode(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_ScaleTop(float* pRet/*[out,retval]*/)
{
  return (*this)->get_ScaleTop(pRet);
}

template <class T> float __fastcall
TCOM_ReportT<T>::get_ScaleTop(void)
{
  float pRet;
  OLECHECK(this->get_ScaleTop((float*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_ScaleTop(float pRet/*[in]*/)
{
  return (*this)->set_ScaleTop(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_ScaleWidth(float* pRet/*[out,retval]*/)
{
  return (*this)->get_ScaleWidth(pRet);
}

template <class T> float __fastcall
TCOM_ReportT<T>::get_ScaleWidth(void)
{
  float pRet;
  OLECHECK(this->get_ScaleWidth((float*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_ScaleWidth(float pRet/*[in]*/)
{
  return (*this)->set_ScaleWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontBold(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_FontBold(void)
{
  short pRet;
  OLECHECK(this->get_FontBold((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FontBold(short pRet/*[in]*/)
{
  return (*this)->set_FontBold(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FontItalic(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontItalic(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_FontItalic(void)
{
  short pRet;
  OLECHECK(this->get_FontItalic((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FontItalic(short pRet/*[in]*/)
{
  return (*this)->set_FontItalic(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_FontName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_FontName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_FontName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  return (*this)->set_FontName(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontSize(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_FontSize(void)
{
  short pRet;
  OLECHECK(this->get_FontSize((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FontSize(short pRet/*[in]*/)
{
  return (*this)->set_FontSize(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FontUnderline(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FontUnderline(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_FontUnderline(void)
{
  short pRet;
  OLECHECK(this->get_FontUnderline((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FontUnderline(short pRet/*[in]*/)
{
  return (*this)->set_FontUnderline(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_DrawMode(short* pRet/*[out,retval]*/)
{
  return (*this)->get_DrawMode(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_DrawMode(void)
{
  short pRet;
  OLECHECK(this->get_DrawMode((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_DrawMode(short pRet/*[in]*/)
{
  return (*this)->set_DrawMode(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_DrawStyle(short* pRet/*[out,retval]*/)
{
  return (*this)->get_DrawStyle(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_DrawStyle(void)
{
  short pRet;
  OLECHECK(this->get_DrawStyle((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_DrawStyle(short pRet/*[in]*/)
{
  return (*this)->set_DrawStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_DrawWidth(short* pRet/*[out,retval]*/)
{
  return (*this)->get_DrawWidth(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_DrawWidth(void)
{
  short pRet;
  OLECHECK(this->get_DrawWidth((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_DrawWidth(short pRet/*[in]*/)
{
  return (*this)->set_DrawWidth(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FillColor(long* pRet/*[out,retval]*/)
{
  return (*this)->get_FillColor(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_FillColor(void)
{
  long pRet;
  OLECHECK(this->get_FillColor((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FillColor(long pRet/*[in]*/)
{
  return (*this)->set_FillColor(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_FillStyle(short* pRet/*[out,retval]*/)
{
  return (*this)->get_FillStyle(pRet);
}

template <class T> short __fastcall
TCOM_ReportT<T>::get_FillStyle(void)
{
  short pRet;
  OLECHECK(this->get_FillStyle((short*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_FillStyle(short pRet/*[in]*/)
{
  return (*this)->set_FillStyle(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Name(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_Name(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Name((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Name(BSTR pRet/*[in]*/)
{
  return (*this)->set_Name(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PaletteSource(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_PaletteSource(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_PaletteSource(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_PaletteSource((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PaletteSource(BSTR pRet/*[in]*/)
{
  return (*this)->set_PaletteSource(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_Tag(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_Tag(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_Tag((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  return (*this)->set_Tag(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PaintPalette(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PaintPalette(pRet);
}

template <class T> TVariant __fastcall
TCOM_ReportT<T>::get_PaintPalette(void)
{
  TVariant pRet;
  OLECHECK(this->get_PaintPalette((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PaintPalette(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PaintPalette(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_OnMenu(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnMenu(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_OnMenu(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnMenu((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_OnMenu(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnMenu(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_OnOpen(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnOpen(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_OnOpen(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnOpen((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_OnOpen(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnOpen(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_OnClose(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnClose(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_OnClose(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnClose((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_OnClose(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnClose(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_OnActivate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnActivate(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_OnActivate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnActivate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_OnActivate(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnActivate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_OnDeactivate(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnDeactivate(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_OnDeactivate(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnDeactivate((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_OnDeactivate(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnDeactivate(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_OnNoData(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnNoData(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_OnNoData(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnNoData((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_OnNoData(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnNoData(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_OnPage(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnPage(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_OnPage(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnPage((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_OnPage(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnPage(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_OnError(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_OnError(pRet);
}

template <class T> BSTR __fastcall
TCOM_ReportT<T>::get_OnError(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_OnError((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_OnError(BSTR pRet/*[in]*/)
{
  return (*this)->set_OnError(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Dirty(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_Dirty(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_Dirty(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_Dirty((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_Dirty(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_Dirty(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_CurrentRecord(long* pRet/*[out,retval]*/)
{
  return (*this)->get_CurrentRecord(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_CurrentRecord(void)
{
  long pRet;
  OLECHECK(this->get_CurrentRecord((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_CurrentRecord(long pRet/*[in]*/)
{
  return (*this)->set_CurrentRecord(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PictureData(pRet);
}

template <class T> TVariant __fastcall
TCOM_ReportT<T>::get_PictureData(void)
{
  TVariant pRet;
  OLECHECK(this->get_PictureData((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PictureData(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_PicturePalette(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->get_PicturePalette(pRet);
}

template <class T> TVariant __fastcall
TCOM_ReportT<T>::get_PicturePalette(void)
{
  TVariant pRet;
  OLECHECK(this->get_PicturePalette((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_PicturePalette(TVariantInParam pRet/*[in]*/)
{
  return (*this)->set_PicturePalette(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_HasModule(TOLEBOOL* pRet/*[out,retval]*/)
{
  return (*this)->get_HasModule(pRet);
}

template <class T> TOLEBOOL __fastcall
TCOM_ReportT<T>::get_HasModule(void)
{
  TOLEBOOL pRet;
  OLECHECK(this->get_HasModule((TOLEBOOL*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_HasModule(TOLEBOOL pRet/*[in]*/)
{
  return (*this)->set_HasModule(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_acHiddenCurrentPage(long* pRet/*[out,retval]*/)
{
  return (*this)->get_acHiddenCurrentPage(pRet);
}

template <class T> long __fastcall
TCOM_ReportT<T>::get_acHiddenCurrentPage(void)
{
  long pRet;
  OLECHECK(this->get_acHiddenCurrentPage((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::set_acHiddenCurrentPage(long pRet/*[in]*/)
{
  return (*this)->set_acHiddenCurrentPage(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_ReportT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ReportT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_ActiveControl(pRet);
}

template <class T> Access_97::AccessControlPtr __fastcall
TCOM_ReportT<T>::get_ActiveControl(void)
{
  Access_97::AccessControlPtr pRet;
  OLECHECK(this->get_ActiveControl((Access_97::AccessControlPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_DefaultControl(long ControlType/*[in]*/, 
                                    Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_DefaultControl(ControlType, pRet);
}

template <class T> Access_97::AccessControlPtr __fastcall
TCOM_ReportT<T>::get_DefaultControl(long ControlType/*[in]*/)
{
  Access_97::AccessControlPtr pRet;
  OLECHECK(this->get_DefaultControl(ControlType, (Access_97::AccessControlPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::Circle(short flags/*[in]*/, float X/*[in]*/, float Y/*[in]*/, float radius/*[in]*/, 
                        long color/*[in]*/, float start/*[in]*/, float end/*[in]*/, 
                        float aspect/*[in]*/)
{
  return (*this)->Circle(flags, X, Y, radius, color, start, end, aspect);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::Line(short flags/*[in]*/, float x1/*[in]*/, float y1/*[in]*/, float x2/*[in]*/, 
                      float y2/*[in]*/, long color/*[in]*/)
{
  return (*this)->Line(flags, x1, y1, x2, y2, color);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::PSet(short flags/*[in]*/, float X/*[in]*/, float Y/*[in]*/, long color/*[in]*/)
{
  return (*this)->PSet(flags, X, Y, color);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::Scale(short flags/*[in]*/, float x1/*[in]*/, float y1/*[in]*/, float x2/*[in]*/, 
                       float y2/*[in]*/)
{
  return (*this)->Scale(flags, x1, y1, x2, y2);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::TextWidth(BSTR Expr/*[in]*/, float* pRet/*[out,retval]*/)
{
  return (*this)->TextWidth(Expr, pRet);
}

template <class T> float __fastcall
TCOM_ReportT<T>::TextWidth(BSTR Expr/*[in]*/)
{
  float pRet;
  OLECHECK(this->TextWidth(Expr, (float*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::TextHeight(BSTR Expr/*[in]*/, float* pRet/*[out,retval]*/)
{
  return (*this)->TextHeight(Expr, pRet);
}

template <class T> float __fastcall
TCOM_ReportT<T>::TextHeight(BSTR Expr/*[in]*/)
{
  float pRet;
  OLECHECK(this->TextHeight(Expr, (float*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::Print(BSTR Expr/*[in]*/)
{
  return (*this)->Print(Expr);
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Section(TVariantInParam Index/*[in]*/, 
                             Access_97::AccessSectionPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Section(Index, pRet);
}

template <class T> Access_97::AccessSectionPtr __fastcall
TCOM_ReportT<T>::get_Section(TVariantInParam Index/*[in]*/)
{
  Access_97::AccessSectionPtr pRet;
  OLECHECK(this->get_Section(Index, (Access_97::AccessSectionPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_GroupLevel(long Index/*[in]*/, 
                                Access_97::AccessGroupLevelPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_GroupLevel(Index, pRet);
}

template <class T> Access_97::AccessGroupLevelPtr __fastcall
TCOM_ReportT<T>::get_GroupLevel(long Index/*[in]*/)
{
  Access_97::AccessGroupLevelPtr pRet;
  OLECHECK(this->get_GroupLevel(Index, (Access_97::AccessGroupLevelPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Report(pRet);
}

template <class T> Access_97::AccessReportPtr __fastcall
TCOM_ReportT<T>::get_Report(void)
{
  Access_97::AccessReportPtr pRet;
  OLECHECK(this->get_Report((Access_97::AccessReportPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Module(Access_97::ModulePtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Module(pRet);
}

template <class T> Access_97::ModulePtr __fastcall
TCOM_ReportT<T>::get_Module(void)
{
  Access_97::ModulePtr pRet;
  OLECHECK(this->get_Module((Access_97::ModulePtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Properties(pRet);
}

template <class T> Access_97::PropertiesPtr __fastcall
TCOM_ReportT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  OLECHECK(this->get_Properties((Access_97::PropertiesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/)
{
  return (*this)->get_Controls(pRet);
}

template <class T> Access_97::Controls_Ptr __fastcall
TCOM_ReportT<T>::get_Controls(void)
{
  Access_97::Controls_Ptr pRet;
  OLECHECK(this->get_Controls((Access_97::Controls_Ptr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  return (*this)->_NewEnum(pRet);
}

template <class T> LPUNKNOWN __fastcall
TCOM_ReportT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ReportT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                           TVariant* pRet/*[out,retval]*/)
{
  return (*this)->_Evaluate(bstrExpr, ppsa, pRet);
}

template <class T> TVariant __fastcall
TCOM_ReportT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet));
  return pRet;
}

// *********************************************************************//
// DispIntf:  _Report
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3E8B6B00-91FF-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FormName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormName"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_FormName(void)
{
  BSTR pRet;
  this->get_FormName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FormName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormName"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_RecordSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSource"), DISPID(153));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_RecordSource(void)
{
  BSTR pRet;
  this->get_RecordSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_RecordSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordSource"), DISPID(153));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Filter(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(271));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_Filter(void)
{
  BSTR pRet;
  this->get_Filter((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Filter(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(271));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FilterOn(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterOn"), DISPID(374));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_FilterOn(void)
{
  TOLEBOOL pRet;
  this->get_FilterOn((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FilterOn(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FilterOn"), DISPID(374));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_OrderBy(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderBy"), DISPID(373));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_OrderBy(void)
{
  BSTR pRet;
  this->get_OrderBy((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_OrderBy(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderBy"), DISPID(373));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_OrderByOn(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderByOn"), DISPID(379));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_OrderByOn(void)
{
  TOLEBOOL pRet;
  this->get_OrderByOn((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_OrderByOn(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrderByOn"), DISPID(379));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Caption(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_Caption(void)
{
  BSTR pRet;
  this->get_Caption((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Caption(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_RecordLocks(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordLocks"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ReportDispT<T>::get_RecordLocks(void)
{
  unsigned_char pRet;
  this->get_RecordLocks((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_RecordLocks(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordLocks"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PageHeader(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageHeader"), DISPID(43));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ReportDispT<T>::get_PageHeader(void)
{
  unsigned_char pRet;
  this->get_PageHeader((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PageHeader(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageHeader"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PageFooter(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageFooter"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ReportDispT<T>::get_PageFooter(void)
{
  unsigned_char pRet;
  this->get_PageFooter((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PageFooter(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageFooter"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_DateGrouping(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateGrouping"), DISPID(314));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ReportDispT<T>::get_DateGrouping(void)
{
  unsigned_char pRet;
  this->get_DateGrouping((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_DateGrouping(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateGrouping"), DISPID(314));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_GrpKeepTogether(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrpKeepTogether"), DISPID(315));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ReportDispT<T>::get_GrpKeepTogether(void)
{
  unsigned_char pRet;
  this->get_GrpKeepTogether((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_GrpKeepTogether(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GrpKeepTogether"), DISPID(315));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_MinButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinButton"), DISPID(92));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_MinButton(void)
{
  TOLEBOOL pRet;
  this->get_MinButton((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_MinButton(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinButton"), DISPID(92));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_MaxButton(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxButton"), DISPID(91));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_MaxButton(void)
{
  TOLEBOOL pRet;
  this->get_MaxButton((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_MaxButton(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxButton"), DISPID(91));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Width(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_Width(void)
{
  short pRet;
  this->get_Width((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Width(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Picture(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_Picture(void)
{
  BSTR pRet;
  this->get_Picture((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Picture(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PictureType(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ReportDispT<T>::get_PictureType(void)
{
  unsigned_char pRet;
  this->get_PictureType((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PictureType(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureType"), DISPID(384));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PictureSizeMode(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ReportDispT<T>::get_PictureSizeMode(void)
{
  unsigned_char pRet;
  this->get_PictureSizeMode((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PictureSizeMode(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureSizeMode"), DISPID(357));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PictureAlignment(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(354));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ReportDispT<T>::get_PictureAlignment(void)
{
  unsigned_char pRet;
  this->get_PictureAlignment((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PictureAlignment(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureAlignment"), DISPID(354));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PictureTiling(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(358));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_PictureTiling(void)
{
  TOLEBOOL pRet;
  this->get_PictureTiling((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PictureTiling(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureTiling"), DISPID(358));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PicturePages(unsigned_char* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePages"), DISPID(355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
_ReportDispT<T>::get_PicturePages(void)
{
  unsigned_char pRet;
  this->get_PicturePages((unsigned_char*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PicturePages(unsigned_char pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePages"), DISPID(355));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_MenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuBar"), DISPID(261));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_MenuBar(void)
{
  BSTR pRet;
  this->get_MenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_MenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuBar"), DISPID(261));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Toolbar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Toolbar"), DISPID(396));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_Toolbar(void)
{
  BSTR pRet;
  this->get_Toolbar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Toolbar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Toolbar"), DISPID(396));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(336));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_GridX(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(41));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_GridX(void)
{
  short pRet;
  this->get_GridX((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_GridX(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridX"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_GridY(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(42));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_GridY(void)
{
  short pRet;
  this->get_GridY((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_GridY(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GridY"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_LayoutForPrint(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayoutForPrint"), DISPID(140));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_LayoutForPrint(void)
{
  TOLEBOOL pRet;
  this->get_LayoutForPrint((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_LayoutForPrint(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LayoutForPrint"), DISPID(140));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FastLaserPrinting(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FastLaserPrinting"), DISPID(141));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_FastLaserPrinting(void)
{
  TOLEBOOL pRet;
  this->get_FastLaserPrinting((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FastLaserPrinting(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FastLaserPrinting"), DISPID(141));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_HelpFile(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(217));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_HelpFile(void)
{
  BSTR pRet;
  this->get_HelpFile((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_HelpFile(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_HelpContextId(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_HelpContextId(void)
{
  long pRet;
  this->get_HelpContextId((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_HelpContextId(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(218));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Hwnd(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hwnd"), DISPID(191));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_Hwnd(void)
{
  long pRet;
  this->get_Hwnd((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Hwnd(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Hwnd"), DISPID(191));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Count(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(194));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_Count(void)
{
  short pRet;
  this->get_Count((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Count(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(194));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Page(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Page"), DISPID(195));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_Page(void)
{
  long pRet;
  this->get_Page((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Page(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Page"), DISPID(195));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Pages(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pages"), DISPID(196));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_Pages(void)
{
  short pRet;
  this->get_Pages((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Pages(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pages"), DISPID(196));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_LogicalPageWidth(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LogicalPageWidth"), DISPID(197));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_LogicalPageWidth(void)
{
  long pRet;
  this->get_LogicalPageWidth((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_LogicalPageWidth(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LogicalPageWidth"), DISPID(197));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_LogicalPageHeight(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LogicalPageHeight"), DISPID(198));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_LogicalPageHeight(void)
{
  long pRet;
  this->get_LogicalPageHeight((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_LogicalPageHeight(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LogicalPageHeight"), DISPID(198));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_ZoomControl(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZoomControl"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_ZoomControl(void)
{
  long pRet;
  this->get_ZoomControl((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_ZoomControl(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZoomControl"), DISPID(216));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_HasData(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasData"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_HasData(void)
{
  long pRet;
  this->get_HasData((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_HasData(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasData"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Left(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_Left(void)
{
  long pRet;
  this->get_Left((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Left(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Top(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_Top(void)
{
  long pRet;
  this->get_Top((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Top(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Height(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_Height(void)
{
  long pRet;
  this->get_Height((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Height(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PrintSection(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintSection"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_PrintSection(void)
{
  TOLEBOOL pRet;
  this->get_PrintSection((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PrintSection(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintSection"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_NextRecord(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextRecord"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_NextRecord(void)
{
  TOLEBOOL pRet;
  this->get_NextRecord((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_NextRecord(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextRecord"), DISPID(225));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_MoveLayout(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveLayout"), DISPID(226));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_MoveLayout(void)
{
  TOLEBOOL pRet;
  this->get_MoveLayout((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_MoveLayout(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveLayout"), DISPID(226));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FormatCount(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormatCount"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_FormatCount(void)
{
  short pRet;
  this->get_FormatCount((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FormatCount(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FormatCount"), DISPID(227));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PrintCount(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintCount"), DISPID(228));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_PrintCount(void)
{
  short pRet;
  this->get_PrintCount((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PrintCount(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrintCount"), DISPID(228));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Visible(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_Visible(void)
{
  TOLEBOOL pRet;
  this->get_Visible((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Visible(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Painting(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Painting"), DISPID(264));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_Painting(void)
{
  TOLEBOOL pRet;
  this->get_Painting((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Painting(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Painting"), DISPID(264));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PrtMip(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtMip"), DISPID(188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ReportDispT<T>::get_PrtMip(void)
{
  TVariant pRet;
  this->get_PrtMip((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PrtMip(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtMip"), DISPID(188));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PrtDevMode(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtDevMode"), DISPID(189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ReportDispT<T>::get_PrtDevMode(void)
{
  TVariant pRet;
  this->get_PrtDevMode((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PrtDevMode(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtDevMode"), DISPID(189));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PrtDevNames(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtDevNames"), DISPID(190));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ReportDispT<T>::get_PrtDevNames(void)
{
  TVariant pRet;
  this->get_PrtDevNames((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PrtDevNames(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrtDevNames"), DISPID(190));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_ForeColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_ForeColor(void)
{
  long pRet;
  this->get_ForeColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_ForeColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(203));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_CurrentX(float* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentX"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ReportDispT<T>::get_CurrentX(void)
{
  float pRet;
  this->get_CurrentX((float*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_CurrentX(float pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentX"), DISPID(204));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_CurrentY(float* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentY"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ReportDispT<T>::get_CurrentY(void)
{
  float pRet;
  this->get_CurrentY((float*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_CurrentY(float pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentY"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_ScaleHeight(float* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleHeight"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ReportDispT<T>::get_ScaleHeight(void)
{
  float pRet;
  this->get_ScaleHeight((float*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_ScaleHeight(float pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleHeight"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_ScaleLeft(float* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleLeft"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ReportDispT<T>::get_ScaleLeft(void)
{
  float pRet;
  this->get_ScaleLeft((float*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_ScaleLeft(float pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleLeft"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_ScaleMode(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleMode"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_ScaleMode(void)
{
  short pRet;
  this->get_ScaleMode((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_ScaleMode(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleMode"), DISPID(208));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_ScaleTop(float* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleTop"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ReportDispT<T>::get_ScaleTop(void)
{
  float pRet;
  this->get_ScaleTop((float*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_ScaleTop(float pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleTop"), DISPID(209));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_ScaleWidth(float* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleWidth"), DISPID(210));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
_ReportDispT<T>::get_ScaleWidth(void)
{
  float pRet;
  this->get_ScaleWidth((float*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_ScaleWidth(float pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleWidth"), DISPID(210));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FontBold(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_FontBold(void)
{
  short pRet;
  this->get_FontBold((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FontBold(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FontItalic(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_FontItalic(void)
{
  short pRet;
  this->get_FontItalic((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FontItalic(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FontName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_FontName(void)
{
  BSTR pRet;
  this->get_FontName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FontName(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FontSize(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_FontSize(void)
{
  short pRet;
  this->get_FontSize((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FontSize(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FontUnderline(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_FontUnderline(void)
{
  short pRet;
  this->get_FontUnderline((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FontUnderline(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontUnderline"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_DrawMode(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawMode"), DISPID(211));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_DrawMode(void)
{
  short pRet;
  this->get_DrawMode((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_DrawMode(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawMode"), DISPID(211));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_DrawStyle(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawStyle"), DISPID(212));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_DrawStyle(void)
{
  short pRet;
  this->get_DrawStyle((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_DrawStyle(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawStyle"), DISPID(212));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_DrawWidth(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawWidth"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_DrawWidth(void)
{
  short pRet;
  this->get_DrawWidth((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_DrawWidth(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawWidth"), DISPID(213));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FillColor(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FillColor"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_FillColor(void)
{
  long pRet;
  this->get_FillColor((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FillColor(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FillColor"), DISPID(215));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_FillStyle(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FillStyle"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
_ReportDispT<T>::get_FillStyle(void)
{
  short pRet;
  this->get_FillStyle((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_FillStyle(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FillStyle"), DISPID(214));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Name(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_Name(void)
{
  BSTR pRet;
  this->get_Name((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Name(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PaletteSource(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PaletteSource"), DISPID(95));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_PaletteSource(void)
{
  BSTR pRet;
  this->get_PaletteSource((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PaletteSource(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PaletteSource"), DISPID(95));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Tag(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_Tag(void)
{
  BSTR pRet;
  this->get_Tag((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Tag(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(297));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PaintPalette(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PaintPalette"), DISPID(97));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ReportDispT<T>::get_PaintPalette(void)
{
  TVariant pRet;
  this->get_PaintPalette((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PaintPalette(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PaintPalette"), DISPID(97));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_OnMenu(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMenu"), DISPID(60));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_OnMenu(void)
{
  BSTR pRet;
  this->get_OnMenu((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_OnMenu(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnMenu"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_OnOpen(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnOpen"), DISPID(73));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_OnOpen(void)
{
  BSTR pRet;
  this->get_OnOpen((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_OnOpen(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnOpen"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_OnClose(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClose"), DISPID(74));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_OnClose(void)
{
  BSTR pRet;
  this->get_OnClose((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_OnClose(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnClose"), DISPID(74));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_OnActivate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnActivate"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_OnActivate(void)
{
  BSTR pRet;
  this->get_OnActivate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_OnActivate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnActivate"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_OnDeactivate(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDeactivate"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_OnDeactivate(void)
{
  BSTR pRet;
  this->get_OnDeactivate((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_OnDeactivate(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnDeactivate"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_OnNoData(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnNoData"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_OnNoData(void)
{
  BSTR pRet;
  this->get_OnNoData((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_OnNoData(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnNoData"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_OnPage(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnPage"), DISPID(79));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_OnPage(void)
{
  BSTR pRet;
  this->get_OnPage((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_OnPage(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnPage"), DISPID(79));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_OnError(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnError"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ReportDispT<T>::get_OnError(void)
{
  BSTR pRet;
  this->get_OnError((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_OnError(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnError"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Dirty(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dirty"), DISPID(318));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_Dirty(void)
{
  TOLEBOOL pRet;
  this->get_Dirty((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_Dirty(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Dirty"), DISPID(318));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_CurrentRecord(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentRecord"), DISPID(334));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_CurrentRecord(void)
{
  long pRet;
  this->get_CurrentRecord((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_CurrentRecord(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentRecord"), DISPID(334));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PictureData(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ReportDispT<T>::get_PictureData(void)
{
  TVariant pRet;
  this->get_PictureData((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PictureData(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureData"), DISPID(187));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_PicturePalette(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePalette"), DISPID(356));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TVariant __fastcall
_ReportDispT<T>::get_PicturePalette(void)
{
  TVariant pRet;
  this->get_PicturePalette((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_PicturePalette(TVariantInParam pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PicturePalette"), DISPID(356));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_HasModule(TOLEBOOL* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasModule"), DISPID(385));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ReportDispT<T>::get_HasModule(void)
{
  TOLEBOOL pRet;
  this->get_HasModule((TOLEBOOL*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_HasModule(TOLEBOOL pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HasModule"), DISPID(385));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_acHiddenCurrentPage(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("acHiddenCurrentPage"), DISPID(406));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReportDispT<T>::get_acHiddenCurrentPage(void)
{
  long pRet;
  this->get_acHiddenCurrentPage((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::set_acHiddenCurrentPage(long pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("acHiddenCurrentPage"), DISPID(406));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_ReportDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ReportDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveControl"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
_ReportDispT<T>::get_ActiveControl(void)
{
  Access_97::AccessControlPtr pRet;
  this->get_ActiveControl((Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_DefaultControl(long ControlType/*[in]*/, 
                                    Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultControl"), DISPID(2150));
  TAutoArgs<1> _args;
  _args[1] = ControlType /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
_ReportDispT<T>::get_DefaultControl(long ControlType/*[in]*/)
{
  Access_97::AccessControlPtr pRet;
  this->get_DefaultControl(ControlType, (Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::Circle(short flags/*[in]*/, float X/*[in]*/, float Y/*[in]*/, float radius/*[in]*/
                        , long color/*[in]*/, float start/*[in]*/, float end/*[in]*/, 
                        float aspect/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Circle"), DISPID(2118));
  TAutoArgs<8> _args;
  _args[1] = flags /*[VT_I2:0]*/;
  _args[2] = X /*[VT_R4:0]*/;
  _args[3] = Y /*[VT_R4:0]*/;
  _args[4] = radius /*[VT_R4:0]*/;
  _args[5] = color /*[VT_I4:0]*/;
  _args[6] = start /*[VT_R4:0]*/;
  _args[7] = end /*[VT_R4:0]*/;
  _args[8] = aspect /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::Line(short flags/*[in]*/, float x1/*[in]*/, float y1/*[in]*/, float x2/*[in]*/, 
                      float y2/*[in]*/, long color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(2152));
  TAutoArgs<6> _args;
  _args[1] = flags /*[VT_I2:0]*/;
  _args[2] = x1 /*[VT_R4:0]*/;
  _args[3] = y1 /*[VT_R4:0]*/;
  _args[4] = x2 /*[VT_R4:0]*/;
  _args[5] = y2 /*[VT_R4:0]*/;
  _args[6] = color /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::PSet(short flags/*[in]*/, float X/*[in]*/, float Y/*[in]*/, long color/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PSet"), DISPID(2117));
  TAutoArgs<4> _args;
  _args[1] = flags /*[VT_I2:0]*/;
  _args[2] = X /*[VT_R4:0]*/;
  _args[3] = Y /*[VT_R4:0]*/;
  _args[4] = color /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::Scale(short flags/*[in]*/, float x1/*[in]*/, float y1/*[in]*/, float x2/*[in]*/, 
                       float y2/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Scale"), DISPID(2116));
  TAutoArgs<5> _args;
  _args[1] = flags /*[VT_I2:0]*/;
  _args[2] = x1 /*[VT_R4:0]*/;
  _args[3] = y1 /*[VT_R4:0]*/;
  _args[4] = x2 /*[VT_R4:0]*/;
  _args[5] = y2 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::TextWidth(BSTR Expr/*[in]*/, float* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextWidth"), DISPID(2114));
  TAutoArgs<1> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_R4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> float __fastcall
_ReportDispT<T>::TextWidth(BSTR Expr/*[in]*/)
{
  float pRet;
  this->TextWidth(Expr, (float*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::TextHeight(BSTR Expr/*[in]*/, float* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextHeight"), DISPID(2115));
  TAutoArgs<1> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_R4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> float __fastcall
_ReportDispT<T>::TextHeight(BSTR Expr/*[in]*/)
{
  float pRet;
  this->TextHeight(Expr, (float*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::Print(BSTR Expr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Print"), DISPID(2153));
  TAutoArgs<1> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Section(TVariantInParam Index/*[in]*/, 
                             Access_97::AccessSectionPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Section"), DISPID(2088));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessSection**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessSectionPtr __fastcall
_ReportDispT<T>::get_Section(TVariantInParam Index/*[in]*/)
{
  Access_97::AccessSectionPtr pRet;
  this->get_Section(Index, (Access_97::AccessSectionPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_GroupLevel(long Index/*[in]*/, 
                                Access_97::AccessGroupLevelPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupLevel"), DISPID(2098));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessGroupLevel**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessGroupLevelPtr __fastcall
_ReportDispT<T>::get_GroupLevel(long Index/*[in]*/)
{
  Access_97::AccessGroupLevelPtr pRet;
  this->get_GroupLevel(Index, (Access_97::AccessGroupLevelPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Report(Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Report"), DISPID(2097));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessReport**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessReportPtr __fastcall
_ReportDispT<T>::get_Report(void)
{
  Access_97::AccessReportPtr pRet;
  this->get_Report((Access_97::AccessReportPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Module(Access_97::ModulePtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Module"), DISPID(2090));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Module**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ModulePtr __fastcall
_ReportDispT<T>::get_Module(void)
{
  Access_97::ModulePtr pRet;
  this->get_Module((Access_97::ModulePtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Properties(Access_97::PropertiesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(2091));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Properties**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::PropertiesPtr __fastcall
_ReportDispT<T>::get_Properties(void)
{
  Access_97::PropertiesPtr pRet;
  this->get_Properties((Access_97::PropertiesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::get_Controls(Access_97::Controls_Ptr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Controls_**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::Controls_Ptr __fastcall
_ReportDispT<T>::get_Controls(void)
{
  Access_97::Controls_Ptr pRet;
  this->get_Controls((Access_97::Controls_Ptr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_ReportDispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReportDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/, 
                           TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Evaluate"), DISPID(-5));
  TAutoArgs<2> _args;
  _args[1] = bstrExpr /*[VT_BSTR:0]*/;
  _args[2] = ppsa /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ReportDispT<T>::_Evaluate(BSTR bstrExpr/*[in]*/, LPSAFEARRAY* ppsa/*[in]*/)
{
  TVariant pRet;
  this->_Evaluate(bstrExpr, ppsa, (TVariant*)&pRet);
  return pRet;
}

// *********************************************************************//
// DispIntf:  Reports
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {D1523700-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReportsDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
ReportsDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReportsDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ReportsDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReportsDispT<T>::get_Item(TVariantInParam Index/*[in]*/, 
                          Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessReport**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessReportPtr __fastcall
ReportsDispT<T>::get_Item(TVariantInParam Index/*[in]*/)
{
  Access_97::AccessReportPtr pRet;
  this->get_Item(Index, (Access_97::AccessReportPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReportsDispT<T>::get_Count(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ReportsDispT<T>::get_Count(void)
{
  long pRet;
  this->get_Count((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReportsDispT<T>::_NewEnum(LPUNKNOWN* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ReportsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN pRet;
  this->_NewEnum((LPUNKNOWN*)&pRet);
  return pRet;
}

// *********************************************************************//
// DispIntf:  Screen
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DC6B66C0-6128-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScreenDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
ScreenDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScreenDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ScreenDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScreenDispT<T>::get_ActiveDatasheet(Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveDatasheet"), DISPID(2146));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessForm**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessFormPtr __fastcall
ScreenDispT<T>::get_ActiveDatasheet(void)
{
  Access_97::AccessFormPtr pRet;
  this->get_ActiveDatasheet((Access_97::AccessFormPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScreenDispT<T>::get_ActiveControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveControl"), DISPID(2006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
ScreenDispT<T>::get_ActiveControl(void)
{
  Access_97::AccessControlPtr pRet;
  this->get_ActiveControl((Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScreenDispT<T>::get_PreviousControl(Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreviousControl"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
ScreenDispT<T>::get_PreviousControl(void)
{
  Access_97::AccessControlPtr pRet;
  this->get_PreviousControl((Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScreenDispT<T>::get_ActiveForm(Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveForm"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessForm**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessFormPtr __fastcall
ScreenDispT<T>::get_ActiveForm(void)
{
  Access_97::AccessFormPtr pRet;
  this->get_ActiveForm((Access_97::AccessFormPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScreenDispT<T>::get_ActiveReport(Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveReport"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessReport**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessReportPtr __fastcall
ScreenDispT<T>::get_ActiveReport(void)
{
  Access_97::AccessReportPtr pRet;
  this->get_ActiveReport((Access_97::AccessReportPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScreenDispT<T>::get_MousePointer(short* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(2106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
ScreenDispT<T>::get_MousePointer(void)
{
  short pRet;
  this->get_MousePointer((short*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ScreenDispT<T>::set_MousePointer(short pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(2106));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Application
// Interface: _Application
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Application(pRet);
}

template <class T> Access_97::AccessApplicationPtr __fastcall
TCOM_ApplicationT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  OLECHECK(this->get_Application((Access_97::AccessApplicationPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_Parent(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ApplicationT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_Parent((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_CodeContextObject(LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->get_CodeContextObject(pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ApplicationT<T>::get_CodeContextObject(void)
{
  LPDISPATCH pRet;
  OLECHECK(this->get_CodeContextObject((LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::NewCurrentDatabase(BSTR filepath/*[in]*/)
{
  return (*this)->NewCurrentDatabase(filepath);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::OpenCurrentDatabase(BSTR filepath/*[in]*/, TOLEBOOL Exclusive/*[in,def,opt]*/)
{
  return (*this)->OpenCurrentDatabase(filepath, Exclusive);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_MenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_MenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_MenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_MenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_MenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_MenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_CurrentObjectType(long* pRet/*[out,retval]*/)
{
  return (*this)->get_CurrentObjectType(pRet);
}

template <class T> long __fastcall
TCOM_ApplicationT<T>::get_CurrentObjectType(void)
{
  long pRet;
  OLECHECK(this->get_CurrentObjectType((long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_CurrentObjectName(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_CurrentObjectName(pRet);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_CurrentObjectName(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_CurrentObjectName((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::GetOption(BSTR OptionName/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->GetOption(OptionName, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::GetOption(BSTR OptionName/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->GetOption(OptionName, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::SetOption(BSTR OptionName/*[in]*/, TVariantInParam Setting/*[in]*/)
{
  return (*this)->SetOption(OptionName, Setting);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Echo(short EchoOn/*[in]*/, BSTR bstrStatusBarText/*[in,def,opt]*/)
{
  return (*this)->Echo(EchoOn, bstrStatusBarText);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CloseCurrentDatabase(void)
{
  return (*this)->CloseCurrentDatabase();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Quit(Access_97::AcQuitOption Option/*[in,def,opt]*/)
{
  return (*this)->Quit(Option);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Forms(Access_97::Forms_Ptr* pRet/*[out,retval]*/)
{
  return (*this)->get_Forms(pRet);
}

template <class T> Access_97::Forms_Ptr __fastcall
TCOM_ApplicationT<T>::get_Forms(void)
{
  Access_97::Forms_Ptr pRet;
  OLECHECK(this->get_Forms((Access_97::Forms_Ptr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Reports(Access_97::ReportsPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Reports(pRet);
}

template <class T> Access_97::ReportsPtr __fastcall
TCOM_ApplicationT<T>::get_Reports(void)
{
  Access_97::ReportsPtr pRet;
  OLECHECK(this->get_Reports((Access_97::ReportsPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Screen(Access_97::ScreenPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Screen(pRet);
}

template <class T> Access_97::ScreenPtr __fastcall
TCOM_ApplicationT<T>::get_Screen(void)
{
  Access_97::ScreenPtr pRet;
  OLECHECK(this->get_Screen((Access_97::ScreenPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_DoCmd(Access_97::IDoCmdPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_DoCmd(pRet);
}

template <class T> Access_97::IDoCmdPtr __fastcall
TCOM_ApplicationT<T>::get_DoCmd(void)
{
  Access_97::IDoCmdPtr pRet;
  OLECHECK(this->get_DoCmd((Access_97::IDoCmdPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->get_ShortcutMenuBar(pRet);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet = 0;
  OLECHECK(this->get_ShortcutMenuBar((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  return (*this)->set_ShortcutMenuBar(pRet);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Visible(TOLEBOOL* pfVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(pfVisible);
}

template <class T> TOLEBOOL __fastcall
TCOM_ApplicationT<T>::get_Visible(void)
{
  TOLEBOOL pfVisible;
  OLECHECK(this->get_Visible((TOLEBOOL*)&pfVisible));
  return pfVisible;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_Visible(TOLEBOOL pfVisible/*[in]*/)
{
  return (*this)->set_Visible(pfVisible);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_UserControl(TOLEBOOL* pfUserCtrl/*[out,retval]*/)
{
  return (*this)->get_UserControl(pfUserCtrl);
}

template <class T> TOLEBOOL __fastcall
TCOM_ApplicationT<T>::get_UserControl(void)
{
  TOLEBOOL pfUserCtrl;
  OLECHECK(this->get_UserControl((TOLEBOOL*)&pfUserCtrl));
  return pfUserCtrl;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_UserControl(TOLEBOOL pfUserCtrl/*[in]*/)
{
  return (*this)->set_UserControl(pfUserCtrl);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::SysCmd(Access_97::AcSysCmdAction Action/*[in]*/, 
                             TVariantInParam Argument2/*[in,opt]*/, 
                             TVariantInParam Argument3/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->SysCmd(Action, Argument2, Argument3, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::SysCmd(Access_97::AcSysCmdAction Action/*[in]*/, 
                             TVariantInParam Argument2/*[in,opt]*/, 
                             TVariantInParam Argument3/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->SysCmd(Action, Argument2, Argument3, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CreateForm(TVariantInParam Database/*[in,opt]*/, 
                                 TVariantInParam FormTemplate/*[in,opt]*/, 
                                 Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  return (*this)->CreateForm(Database, FormTemplate, pRet);
}

template <class T> Access_97::AccessFormPtr __fastcall
TCOM_ApplicationT<T>::CreateForm(TVariantInParam Database/*[in,opt]*/, 
                                 TVariantInParam FormTemplate/*[in,opt]*/)
{
  Access_97::AccessFormPtr pRet;
  OLECHECK(this->CreateForm(Database, FormTemplate, (Access_97::AccessFormPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CreateReport(TVariantInParam Database/*[in,opt]*/, 
                                   TVariantInParam ReportTemplate/*[in,opt]*/, 
                                   Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  return (*this)->CreateReport(Database, ReportTemplate, pRet);
}

template <class T> Access_97::AccessReportPtr __fastcall
TCOM_ApplicationT<T>::CreateReport(TVariantInParam Database/*[in,opt]*/, 
                                   TVariantInParam ReportTemplate/*[in,opt]*/)
{
  Access_97::AccessReportPtr pRet;
  OLECHECK(this->CreateReport(Database, ReportTemplate, (Access_97::AccessReportPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CreateControl(BSTR FormName/*[in]*/, 
                                    Access_97::AcControlType ControlType/*[in]*/, 
                                    Access_97::AcSection Section/*[in,def,opt]*/, 
                                    TVariantInParam Parent/*[in,opt]*/, 
                                    TVariantInParam ColumnName/*[in,opt]*/, 
                                    TVariantInParam Left/*[in,opt]*/, 
                                    TVariantInParam Top/*[in,opt]*/, 
                                    TVariantInParam Width/*[in,opt]*/, 
                                    TVariantInParam Height/*[in,opt]*/, 
                                    Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  return (*this)->CreateControl(FormName, ControlType, Section, Parent, ColumnName, Left, Top, Width, 
                                Height, pRet);
}

template <class T> Access_97::AccessControlPtr __fastcall
TCOM_ApplicationT<T>::CreateControl(BSTR FormName/*[in]*/, 
                                    Access_97::AcControlType ControlType/*[in]*/, 
                                    Access_97::AcSection Section/*[in,def,opt]*/, 
                                    TVariantInParam Parent/*[in,opt]*/, 
                                    TVariantInParam ColumnName/*[in,opt]*/, 
                                    TVariantInParam Left/*[in,opt]*/, 
                                    TVariantInParam Top/*[in,opt]*/, 
                                    TVariantInParam Width/*[in,opt]*/, 
                                    TVariantInParam Height/*[in,opt]*/)
{
  Access_97::AccessControlPtr pRet;
  OLECHECK(this->CreateControl(FormName, ControlType, Section, Parent, ColumnName, Left, Top, Width, 
                               Height, (Access_97::AccessControlPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CreateReportControl(BSTR ReportName/*[in]*/, 
                                          Access_97::AcControlType ControlType/*[in]*/, 
                                          Access_97::AcSection Section/*[in,def,opt]*/, 
                                          TVariantInParam Parent/*[in,opt]*/, 
                                          TVariantInParam ColumnName/*[in,opt]*/, 
                                          TVariantInParam Left/*[in,opt]*/, 
                                          TVariantInParam Top/*[in,opt]*/, 
                                          TVariantInParam Width/*[in,opt]*/, 
                                          TVariantInParam Height/*[in,opt]*/, 
                                          Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  return (*this)->CreateReportControl(ReportName, ControlType, Section, Parent, ColumnName, Left, 
                                      Top, Width, Height, pRet);
}

template <class T> Access_97::AccessControlPtr __fastcall
TCOM_ApplicationT<T>::CreateReportControl(BSTR ReportName/*[in]*/, 
                                          Access_97::AcControlType ControlType/*[in]*/, 
                                          Access_97::AcSection Section/*[in,def,opt]*/, 
                                          TVariantInParam Parent/*[in,opt]*/, 
                                          TVariantInParam ColumnName/*[in,opt]*/, 
                                          TVariantInParam Left/*[in,opt]*/, 
                                          TVariantInParam Top/*[in,opt]*/, 
                                          TVariantInParam Width/*[in,opt]*/, 
                                          TVariantInParam Height/*[in,opt]*/)
{
  Access_97::AccessControlPtr pRet;
  OLECHECK(this->CreateReportControl(ReportName, ControlType, Section, Parent, ColumnName, Left, Top, 
                                     Width, Height, (Access_97::AccessControlPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CreateControlEx(BSTR FormName/*[in]*/, 
                                      Access_97::AcControlType ControlType/*[in]*/, 
                                      Access_97::AcSection Section/*[in]*/, BSTR Parent/*[in]*/, 
                                      BSTR ControlSource/*[in]*/, long Left/*[in]*/, 
                                      long Top/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                      Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  return (*this)->CreateControlEx(FormName, ControlType, Section, Parent, ControlSource, Left, Top, 
                                  Width, Height, pRet);
}

template <class T> Access_97::AccessControlPtr __fastcall
TCOM_ApplicationT<T>::CreateControlEx(BSTR FormName/*[in]*/, 
                                      Access_97::AcControlType ControlType/*[in]*/, 
                                      Access_97::AcSection Section/*[in]*/, BSTR Parent/*[in]*/, 
                                      BSTR ControlSource/*[in]*/, long Left/*[in]*/, 
                                      long Top/*[in]*/, long Width/*[in]*/, long Height/*[in]*/)
{
  Access_97::AccessControlPtr pRet;
  OLECHECK(this->CreateControlEx(FormName, ControlType, Section, Parent, ControlSource, Left, Top, 
                                 Width, Height, (Access_97::AccessControlPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CreateReportControlEx(BSTR ReportName/*[in]*/, 
                                            Access_97::AcControlType ControlType/*[in]*/, 
                                            Access_97::AcSection Section/*[in]*/, 
                                            BSTR Parent/*[in]*/, BSTR ControlName/*[in]*/, 
                                            long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                            long Height/*[in]*/, 
                                            Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  return (*this)->CreateReportControlEx(ReportName, ControlType, Section, Parent, ControlName, Left, 
                                        Top, Width, Height, pRet);
}

template <class T> Access_97::AccessControlPtr __fastcall
TCOM_ApplicationT<T>::CreateReportControlEx(BSTR ReportName/*[in]*/, 
                                            Access_97::AcControlType ControlType/*[in]*/, 
                                            Access_97::AcSection Section/*[in]*/, 
                                            BSTR Parent/*[in]*/, BSTR ControlName/*[in]*/, 
                                            long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                            long Height/*[in]*/)
{
  Access_97::AccessControlPtr pRet;
  OLECHECK(this->CreateReportControlEx(ReportName, ControlType, Section, Parent, ControlName, Left, 
                                       Top, Width, Height, (Access_97::AccessControlPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DeleteControl(BSTR FormName/*[in]*/, BSTR ControlName/*[in]*/)
{
  return (*this)->DeleteControl(FormName, ControlName);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DeleteReportControl(BSTR ReportName/*[in]*/, BSTR ControlName/*[in]*/)
{
  return (*this)->DeleteReportControl(ReportName, ControlName);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CreateGroupLevel(BSTR ReportName/*[in]*/, BSTR Expression/*[in]*/, 
                                       short Header/*[in]*/, short Footer/*[in]*/, 
                                       long* pRet/*[out,retval]*/)
{
  return (*this)->CreateGroupLevel(ReportName, Expression, Header, Footer, pRet);
}

template <class T> long __fastcall
TCOM_ApplicationT<T>::CreateGroupLevel(BSTR ReportName/*[in]*/, BSTR Expression/*[in]*/, 
                                       short Header/*[in]*/, short Footer/*[in]*/)
{
  long pRet;
  OLECHECK(this->CreateGroupLevel(ReportName, Expression, Header, Footer, (long*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DMin(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DMin(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DMin(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DMin(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DMax(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DMax(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DMax(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DMax(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DSum(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DSum(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DSum(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DSum(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DAvg(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DAvg(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DAvg(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DAvg(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DLookup(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                              TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DLookup(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DLookup(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                              TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DLookup(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DLast(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                            TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DLast(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DLast(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                            TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DLast(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DVar(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DVar(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DVar(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DVar(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DVarP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                            TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DVarP(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DVarP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                            TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DVarP(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DStDev(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DStDev(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DStDev(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DStDev(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DStDevP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                              TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DStDevP(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DStDevP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                              TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DStDevP(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DFirst(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DFirst(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DFirst(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DFirst(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DCount(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DCount(Expr, Domain, Criteria, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DCount(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->DCount(Expr, Domain, Criteria, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Eval(BSTR StringExpr/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->Eval(StringExpr, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::Eval(BSTR StringExpr/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->Eval(StringExpr, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CurrentUser(BSTR* pRet/*[out,retval]*/)
{
  return (*this)->CurrentUser(pRet);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::CurrentUser(void)
{
  BSTR pRet = 0;
  OLECHECK(this->CurrentUser((BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DDEInitiate(BSTR Application/*[in]*/, BSTR Topic/*[in]*/, 
                                  TVariant* pRet/*[out,retval]*/)
{
  return (*this)->DDEInitiate(Application, Topic, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::DDEInitiate(BSTR Application/*[in]*/, BSTR Topic/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->DDEInitiate(Application, Topic, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DDEExecute(TVariantInParam ChanNum/*[in]*/, BSTR Command/*[in]*/)
{
  return (*this)->DDEExecute(ChanNum, Command);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DDEPoke(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/, BSTR Data/*[in]*/)
{
  return (*this)->DDEPoke(ChanNum, Item, Data);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DDERequest(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/, 
                                 BSTR* pRet/*[out,retval]*/)
{
  return (*this)->DDERequest(ChanNum, Item, pRet);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::DDERequest(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/)
{
  BSTR pRet = 0;
  OLECHECK(this->DDERequest(ChanNum, Item, (BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DDETerminate(TVariantInParam ChanNum/*[in]*/)
{
  return (*this)->DDETerminate(ChanNum);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DDETerminateAll(void)
{
  return (*this)->DDETerminateAll();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_DBEngine(Dao_97::DBEnginePtr* pRet/*[out,retval]*/)
{
  return (*this)->get_DBEngine(pRet);
}

template <class T> Dao_97::DBEnginePtr __fastcall
TCOM_ApplicationT<T>::get_DBEngine(void)
{
  Dao_97::DBEnginePtr pRet;
  OLECHECK(this->get_DBEngine((Dao_97::DBEnginePtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CurrentDb(Dao_97::DatabasePtr* pRet/*[out,retval]*/)
{
  return (*this)->CurrentDb(pRet);
}

template <class T> Dao_97::DatabasePtr __fastcall
TCOM_ApplicationT<T>::CurrentDb(void)
{
  Dao_97::DatabasePtr pRet;
  OLECHECK(this->CurrentDb((Dao_97::DatabasePtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::CodeDb(Dao_97::DatabasePtr* pRet/*[out,retval]*/)
{
  return (*this)->CodeDb(pRet);
}

template <class T> Dao_97::DatabasePtr __fastcall
TCOM_ApplicationT<T>::CodeDb(void)
{
  Dao_97::DatabasePtr pRet;
  OLECHECK(this->CodeDb((Dao_97::DatabasePtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::BeginUndoable(long Hwnd/*[in]*/)
{
  return (*this)->BeginUndoable(Hwnd);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::SetUndoRecording(short yesno/*[in]*/)
{
  return (*this)->SetUndoRecording(yesno);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::BuildCriteria(BSTR Field/*[in]*/, short FieldType/*[in]*/, 
                                    BSTR Expression/*[in]*/, BSTR* pRet/*[out,retval]*/)
{
  return (*this)->BuildCriteria(Field, FieldType, Expression, pRet);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::BuildCriteria(BSTR Field/*[in]*/, short FieldType/*[in]*/, 
                                    BSTR Expression/*[in]*/)
{
  BSTR pRet = 0;
  OLECHECK(this->BuildCriteria(Field, FieldType, Expression, (BSTR*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::InsertText(BSTR Text/*[in]*/, BSTR ModuleName/*[in]*/)
{
  return (*this)->InsertText(Text, ModuleName);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::ReloadAddIns(void)
{
  return (*this)->ReloadAddIns();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DefaultWorkspaceClone(Dao_97::WorkspacePtr* pRet/*[out,retval]*/)
{
  return (*this)->DefaultWorkspaceClone(pRet);
}

template <class T> Dao_97::WorkspacePtr __fastcall
TCOM_ApplicationT<T>::DefaultWorkspaceClone(void)
{
  Dao_97::WorkspacePtr pRet;
  OLECHECK(this->DefaultWorkspaceClone((Dao_97::WorkspacePtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::RefreshTitleBar(void)
{
  return (*this)->RefreshTitleBar();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::AddAutoCorrect(BSTR ChangeFrom/*[in]*/, BSTR ChangeTo/*[in]*/)
{
  return (*this)->AddAutoCorrect(ChangeFrom, ChangeTo);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::DelAutoCorrect(BSTR ChangeFrom/*[in]*/)
{
  return (*this)->DelAutoCorrect(ChangeFrom);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::hWndAccessApp(int* phWndAccessAppWnd/*[out,retval]*/)
{
  return (*this)->hWndAccessApp(phWndAccessAppWnd);
}

template <class T> int __fastcall
TCOM_ApplicationT<T>::hWndAccessApp(void)
{
  int phWndAccessAppWnd;
  OLECHECK(this->hWndAccessApp((int*)&phWndAccessAppWnd));
  return phWndAccessAppWnd;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Run(BSTR Procedure/*[in]*/, TVariant* Arg1/*[in,out,opt]*/, 
                          TVariant* Arg2/*[in,out,opt]*/, TVariant* Arg3/*[in,out,opt]*/, 
                          TVariant* Arg4/*[in,out,opt]*/, TVariant* Arg5/*[in,out,opt]*/, 
                          TVariant* Arg6/*[in,out,opt]*/, TVariant* Arg7/*[in,out,opt]*/, 
                          TVariant* Arg8/*[in,out,opt]*/, TVariant* Arg9/*[in,out,opt]*/, 
                          TVariant* Arg10/*[in,out,opt]*/, TVariant* Arg11/*[in,out,opt]*/, 
                          TVariant* Arg12/*[in,out,opt]*/, TVariant* Arg13/*[in,out,opt]*/, 
                          TVariant* Arg14/*[in,out,opt]*/, TVariant* Arg15/*[in,out,opt]*/, 
                          TVariant* Arg16/*[in,out,opt]*/, TVariant* Arg17/*[in,out,opt]*/, 
                          TVariant* Arg18/*[in,out,opt]*/, TVariant* Arg19/*[in,out,opt]*/, 
                          TVariant* Arg20/*[in,out,opt]*/, TVariant* Arg21/*[in,out,opt]*/, 
                          TVariant* Arg22/*[in,out,opt]*/, TVariant* Arg23/*[in,out,opt]*/, 
                          TVariant* Arg24/*[in,out,opt]*/, TVariant* Arg25/*[in,out,opt]*/, 
                          TVariant* Arg26/*[in,out,opt]*/, TVariant* Arg27/*[in,out,opt]*/, 
                          TVariant* Arg28/*[in,out,opt]*/, TVariant* Arg29/*[in,out,opt]*/, 
                          TVariant* Arg30/*[in,out,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->Run(Procedure, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, 
                      Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, 
                      Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::Run(BSTR Procedure/*[in]*/, TVariant* Arg1/*[in,out,opt]*/, 
                          TVariant* Arg2/*[in,out,opt]*/, TVariant* Arg3/*[in,out,opt]*/, 
                          TVariant* Arg4/*[in,out,opt]*/, TVariant* Arg5/*[in,out,opt]*/, 
                          TVariant* Arg6/*[in,out,opt]*/, TVariant* Arg7/*[in,out,opt]*/, 
                          TVariant* Arg8/*[in,out,opt]*/, TVariant* Arg9/*[in,out,opt]*/, 
                          TVariant* Arg10/*[in,out,opt]*/, TVariant* Arg11/*[in,out,opt]*/, 
                          TVariant* Arg12/*[in,out,opt]*/, TVariant* Arg13/*[in,out,opt]*/, 
                          TVariant* Arg14/*[in,out,opt]*/, TVariant* Arg15/*[in,out,opt]*/, 
                          TVariant* Arg16/*[in,out,opt]*/, TVariant* Arg17/*[in,out,opt]*/, 
                          TVariant* Arg18/*[in,out,opt]*/, TVariant* Arg19/*[in,out,opt]*/, 
                          TVariant* Arg20/*[in,out,opt]*/, TVariant* Arg21/*[in,out,opt]*/, 
                          TVariant* Arg22/*[in,out,opt]*/, TVariant* Arg23/*[in,out,opt]*/, 
                          TVariant* Arg24/*[in,out,opt]*/, TVariant* Arg25/*[in,out,opt]*/, 
                          TVariant* Arg26/*[in,out,opt]*/, TVariant* Arg27/*[in,out,opt]*/, 
                          TVariant* Arg28/*[in,out,opt]*/, TVariant* Arg29/*[in,out,opt]*/, 
                          TVariant* Arg30/*[in,out,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->Run(Procedure, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, 
                     Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, 
                     Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Nz(TVariantInParam Value/*[in]*/, TVariantInParam ValueIfNull/*[in,opt]*/, 
                         TVariant* pRet/*[out,retval]*/)
{
  return (*this)->Nz(Value, ValueIfNull, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::Nz(TVariantInParam Value/*[in]*/, TVariantInParam ValueIfNull/*[in,opt]*/)
{
  TVariant pRet;
  OLECHECK(this->Nz(Value, ValueIfNull, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::LoadPicture(BSTR FileName/*[in]*/, LPDISPATCH* pRet/*[out,retval]*/)
{
  return (*this)->LoadPicture(FileName, pRet);
}

template <class T> LPDISPATCH __fastcall
TCOM_ApplicationT<T>::LoadPicture(BSTR FileName/*[in]*/)
{
  LPDISPATCH pRet;
  OLECHECK(this->LoadPicture(FileName, (LPDISPATCH*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::ReplaceModule(long objtyp/*[in]*/, BSTR ModuleName/*[in]*/, 
                                    BSTR FileName/*[in]*/, long token/*[in]*/)
{
  return (*this)->ReplaceModule(objtyp, ModuleName, FileName, token);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::AccessError(TVariantInParam ErrorNumber/*[in]*/, 
                                  TVariant* pRet/*[out,retval]*/)
{
  return (*this)->AccessError(ErrorNumber, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::AccessError(TVariantInParam ErrorNumber/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->AccessError(ErrorNumber, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::BuilderString(TVariant* pRet/*[out,retval]*/)
{
  return (*this)->BuilderString(pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::BuilderString(void)
{
  TVariant pRet;
  OLECHECK(this->BuilderString((TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::StringFromGUID(TVariantInParam Guid/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->StringFromGUID(Guid, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::StringFromGUID(TVariantInParam Guid/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->StringFromGUID(Guid, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::GUIDFromString(TVariantInParam String/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->GUIDFromString(String, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::GUIDFromString(TVariantInParam String/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->GUIDFromString(String, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::AppLoadString(long id/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  return (*this)->AppLoadString(id, pRet);
}

template <class T> TVariant __fastcall
TCOM_ApplicationT<T>::AppLoadString(long id/*[in]*/)
{
  TVariant pRet;
  OLECHECK(this->AppLoadString(id, (TVariant*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_CommandBars(Office_97::CommandBarsPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_CommandBars(pRet);
}

template <class T> Office_97::CommandBarsPtr __fastcall
TCOM_ApplicationT<T>::get_CommandBars(void)
{
  Office_97::CommandBarsPtr pRet;
  OLECHECK(this->get_CommandBars((Office_97::CommandBarsPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Assistant(Office_97::AssistantPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Assistant(pRet);
}

template <class T> Office_97::AssistantPtr __fastcall
TCOM_ApplicationT<T>::get_Assistant(void)
{
  Office_97::AssistantPtr pRet;
  OLECHECK(this->get_Assistant((Office_97::AssistantPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::FollowHyperlink(BSTR Address/*[in]*/, BSTR SubAddress/*[in,def,opt]*/, 
                                      TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                      TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                      TVariantInParam ExtraInfo/*[in,opt]*/, 
                                      Office_97::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                      BSTR HeaderInfo/*[in,def,opt]*/)
{
  return (*this)->FollowHyperlink(Address, SubAddress, NewWindow, AddHistory, ExtraInfo, Method, 
                                  HeaderInfo);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::SaveAsText(long ObjectType/*[in]*/, BSTR ObjectName/*[in]*/, 
                                 BSTR FileName/*[in]*/)
{
  return (*this)->SaveAsText(ObjectType, ObjectName, FileName);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::LoadFromText(long ObjectType/*[in]*/, BSTR ObjectName/*[in]*/, 
                                   BSTR FileName/*[in]*/)
{
  return (*this)->LoadFromText(ObjectType, ObjectName, FileName);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::AddToFavorites(void)
{
  return (*this)->AddToFavorites();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::RefreshDatabaseWindow(void)
{
  return (*this)->RefreshDatabaseWindow();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_References(Access_97::AccessReferencesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_References(pRet);
}

template <class T> Access_97::AccessReferencesPtr __fastcall
TCOM_ApplicationT<T>::get_References(void)
{
  Access_97::AccessReferencesPtr pRet;
  OLECHECK(this->get_References((Access_97::AccessReferencesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Modules(Access_97::ModulesPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_Modules(pRet);
}

template <class T> Access_97::ModulesPtr __fastcall
TCOM_ApplicationT<T>::get_Modules(void)
{
  Access_97::ModulesPtr pRet;
  OLECHECK(this->get_Modules((Access_97::ModulesPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileSearch(Office_97::FileSearchPtr* pRet/*[out,retval]*/)
{
  return (*this)->get_FileSearch(pRet);
}

template <class T> Office_97::FileSearchPtr __fastcall
TCOM_ApplicationT<T>::get_FileSearch(void)
{
  Office_97::FileSearchPtr pRet;
  OLECHECK(this->get_FileSearch((Office_97::FileSearchPtr*)&pRet));
  return pRet;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_IsCompiled(TOLEBOOL* pfCompiled/*[out,retval]*/)
{
  return (*this)->get_IsCompiled(pfCompiled);
}

template <class T> TOLEBOOL __fastcall
TCOM_ApplicationT<T>::get_IsCompiled(void)
{
  TOLEBOOL pfCompiled;
  OLECHECK(this->get_IsCompiled((TOLEBOOL*)&pfCompiled));
  return pfCompiled;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::RunCommand(Access_97::AcCommand Command/*[in]*/)
{
  return (*this)->RunCommand(Command);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::HyperlinkPart(TVariantInParam Hyperlink/*[in]*/, 
                                    Access_97::AcHyperlinkPart Part/*[in,def,opt]*/, 
                                    BSTR* pRet/*[out,retval]*/)
{
  return (*this)->HyperlinkPart(Hyperlink, Part, pRet);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::HyperlinkPart(TVariantInParam Hyperlink/*[in]*/, 
                                    Access_97::AcHyperlinkPart Part/*[in,def,opt]*/)
{
  BSTR pRet = 0;
  OLECHECK(this->HyperlinkPart(Hyperlink, Part, (BSTR*)&pRet));
  return pRet;
}

// *********************************************************************//
// DispIntf:  _Application
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68CCE6C0-6129-101B-AF4E-00AA003F0F07}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Application(Access_97::AccessApplicationPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(2005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessApplication**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessApplicationPtr __fastcall
_ApplicationDispT<T>::get_Application(void)
{
  Access_97::AccessApplicationPtr pRet;
  this->get_Application((Access_97::AccessApplicationPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Parent(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(2087));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ApplicationDispT<T>::get_Parent(void)
{
  LPDISPATCH pRet;
  this->get_Parent((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_CodeContextObject(LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeContextObject"), DISPID(2082));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ApplicationDispT<T>::get_CodeContextObject(void)
{
  LPDISPATCH pRet;
  this->get_CodeContextObject((LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::NewCurrentDatabase(BSTR filepath/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewCurrentDatabase"), DISPID(2142));
  TAutoArgs<1> _args;
  _args[1] = filepath /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::OpenCurrentDatabase(BSTR filepath/*[in]*/, TOLEBOOL Exclusive/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenCurrentDatabase"), DISPID(2140));
  TAutoArgs<2> _args;
  _args[1] = filepath /*[VT_BSTR:0]*/;
  _args[2] = Exclusive /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_MenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuBar"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_MenuBar(void)
{
  BSTR pRet;
  this->get_MenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_MenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuBar"), DISPID(2010));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_CurrentObjectType(long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentObjectType"), DISPID(2011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ApplicationDispT<T>::get_CurrentObjectType(void)
{
  long pRet;
  this->get_CurrentObjectType((long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_CurrentObjectName(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentObjectName"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_CurrentObjectName(void)
{
  BSTR pRet;
  this->get_CurrentObjectName((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::GetOption(BSTR OptionName/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOption"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = OptionName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::GetOption(BSTR OptionName/*[in]*/)
{
  TVariant pRet;
  this->GetOption(OptionName, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::SetOption(BSTR OptionName/*[in]*/, TVariantInParam Setting/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOption"), DISPID(2014));
  TAutoArgs<2> _args;
  _args[1] = OptionName /*[VT_BSTR:0]*/;
  _args[2] = Setting /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Echo(short EchoOn/*[in]*/, BSTR bstrStatusBarText/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Echo"), DISPID(2015));
  TAutoArgs<2> _args;
  _args[1] = EchoOn /*[VT_I2:0]*/;
  _args[2] = bstrStatusBarText /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CloseCurrentDatabase()
{
  _TDispID _dispid(*this, OLETEXT("CloseCurrentDatabase"), DISPID(2141));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Quit(Access_97::AcQuitOption Option/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Quit"), DISPID(2016));
  TAutoArgs<1> _args;
  _args[1] = (int)Option /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Forms(Access_97::Forms_Ptr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Forms"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Forms_**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::Forms_Ptr __fastcall
_ApplicationDispT<T>::get_Forms(void)
{
  Access_97::Forms_Ptr pRet;
  this->get_Forms((Access_97::Forms_Ptr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Reports(Access_97::ReportsPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reports"), DISPID(2003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Reports**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ReportsPtr __fastcall
_ApplicationDispT<T>::get_Reports(void)
{
  Access_97::ReportsPtr pRet;
  this->get_Reports((Access_97::ReportsPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Screen(Access_97::ScreenPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Screen"), DISPID(2004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Screen**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ScreenPtr __fastcall
_ApplicationDispT<T>::get_Screen(void)
{
  Access_97::ScreenPtr pRet;
  this->get_Screen((Access_97::ScreenPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_DoCmd(Access_97::IDoCmdPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoCmd"), DISPID(2025));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::IDoCmd**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::IDoCmdPtr __fastcall
_ApplicationDispT<T>::get_DoCmd(void)
{
  Access_97::IDoCmdPtr pRet;
  this->get_DoCmd((Access_97::IDoCmdPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ShortcutMenuBar(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(2107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_ShortcutMenuBar(void)
{
  BSTR pRet;
  this->get_ShortcutMenuBar((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_ShortcutMenuBar(BSTR pRet/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutMenuBar"), DISPID(2107));
  TAutoArgs<1> _args;
  _args[1] = pRet /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Visible(TOLEBOOL* pfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2148));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ApplicationDispT<T>::get_Visible(void)
{
  TOLEBOOL pfVisible;
  this->get_Visible((TOLEBOOL*)&pfVisible);
  return pfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_Visible(TOLEBOOL pfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(2148));
  TAutoArgs<1> _args;
  _args[1] = pfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_UserControl(TOLEBOOL* pfUserCtrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserControl"), DISPID(2149));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfUserCtrl /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ApplicationDispT<T>::get_UserControl(void)
{
  TOLEBOOL pfUserCtrl;
  this->get_UserControl((TOLEBOOL*)&pfUserCtrl);
  return pfUserCtrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_UserControl(TOLEBOOL pfUserCtrl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserControl"), DISPID(2149));
  TAutoArgs<1> _args;
  _args[1] = pfUserCtrl /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::SysCmd(Access_97::AcSysCmdAction Action/*[in]*/, 
                             TVariantInParam Argument2/*[in,opt]*/, 
                             TVariantInParam Argument3/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysCmd"), DISPID(2028));
  TAutoArgs<3> _args;
  _args[1] = (int)Action /*[VT_USERDEFINED:0]*/;
  _args[2] = Argument2 /*[VT_VARIANT:0]*/;
  _args[3] = Argument3 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::SysCmd(Access_97::AcSysCmdAction Action/*[in]*/, 
                             TVariantInParam Argument2/*[in,opt]*/, 
                             TVariantInParam Argument3/*[in,opt]*/)
{
  TVariant pRet;
  this->SysCmd(Action, Argument2, Argument3, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CreateForm(TVariantInParam Database/*[in,opt]*/, 
                                 TVariantInParam FormTemplate/*[in,opt]*/, 
                                 Access_97::AccessFormPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateForm"), DISPID(2029));
  TAutoArgs<2> _args;
  _args[1] = Database /*[VT_VARIANT:0]*/;
  _args[2] = FormTemplate /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessForm**)pRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::AccessFormPtr __fastcall
_ApplicationDispT<T>::CreateForm(TVariantInParam Database/*[in,opt]*/, 
                                 TVariantInParam FormTemplate/*[in,opt]*/)
{
  Access_97::AccessFormPtr pRet;
  this->CreateForm(Database, FormTemplate, (Access_97::AccessFormPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CreateReport(TVariantInParam Database/*[in,opt]*/, 
                                   TVariantInParam ReportTemplate/*[in,opt]*/, 
                                   Access_97::AccessReportPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateReport"), DISPID(2030));
  TAutoArgs<2> _args;
  _args[1] = Database /*[VT_VARIANT:0]*/;
  _args[2] = ReportTemplate /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessReport**)pRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::AccessReportPtr __fastcall
_ApplicationDispT<T>::CreateReport(TVariantInParam Database/*[in,opt]*/, 
                                   TVariantInParam ReportTemplate/*[in,opt]*/)
{
  Access_97::AccessReportPtr pRet;
  this->CreateReport(Database, ReportTemplate, (Access_97::AccessReportPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CreateControl(BSTR FormName/*[in]*/, 
                                    Access_97::AcControlType ControlType/*[in]*/, 
                                    Access_97::AcSection Section/*[in,def,opt]*/, 
                                    TVariantInParam Parent/*[in,opt]*/, 
                                    TVariantInParam ColumnName/*[in,opt]*/, 
                                    TVariantInParam Left/*[in,opt]*/, 
                                    TVariantInParam Top/*[in,opt]*/, 
                                    TVariantInParam Width/*[in,opt]*/, 
                                    TVariantInParam Height/*[in,opt]*/, 
                                    Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateControl"), DISPID(2031));
  TAutoArgs<9> _args;
  _args[1] = FormName /*[VT_BSTR:0]*/;
  _args[2] = (int)ControlType /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Section /*[VT_USERDEFINED:0]*/;
  _args[4] = Parent /*[VT_VARIANT:0]*/;
  _args[5] = ColumnName /*[VT_VARIANT:0]*/;
  _args[6] = Left /*[VT_VARIANT:0]*/;
  _args[7] = Top /*[VT_VARIANT:0]*/;
  _args[8] = Width /*[VT_VARIANT:0]*/;
  _args[9] = Height /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
_ApplicationDispT<T>::CreateControl(BSTR FormName/*[in]*/, 
                                    Access_97::AcControlType ControlType/*[in]*/, 
                                    Access_97::AcSection Section/*[in,def,opt]*/, 
                                    TVariantInParam Parent/*[in,opt]*/, 
                                    TVariantInParam ColumnName/*[in,opt]*/, 
                                    TVariantInParam Left/*[in,opt]*/, 
                                    TVariantInParam Top/*[in,opt]*/, 
                                    TVariantInParam Width/*[in,opt]*/, 
                                    TVariantInParam Height/*[in,opt]*/)
{
  Access_97::AccessControlPtr pRet;
  this->CreateControl(FormName, ControlType, Section, Parent, ColumnName, Left, Top, Width, Height, (Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CreateReportControl(BSTR ReportName/*[in]*/, 
                                          Access_97::AcControlType ControlType/*[in]*/, 
                                          Access_97::AcSection Section/*[in,def,opt]*/, 
                                          TVariantInParam Parent/*[in,opt]*/, 
                                          TVariantInParam ColumnName/*[in,opt]*/, 
                                          TVariantInParam Left/*[in,opt]*/, 
                                          TVariantInParam Top/*[in,opt]*/, 
                                          TVariantInParam Width/*[in,opt]*/, 
                                          TVariantInParam Height/*[in,opt]*/, 
                                          Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateReportControl"), DISPID(2032));
  TAutoArgs<9> _args;
  _args[1] = ReportName /*[VT_BSTR:0]*/;
  _args[2] = (int)ControlType /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Section /*[VT_USERDEFINED:0]*/;
  _args[4] = Parent /*[VT_VARIANT:0]*/;
  _args[5] = ColumnName /*[VT_VARIANT:0]*/;
  _args[6] = Left /*[VT_VARIANT:0]*/;
  _args[7] = Top /*[VT_VARIANT:0]*/;
  _args[8] = Width /*[VT_VARIANT:0]*/;
  _args[9] = Height /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
_ApplicationDispT<T>::CreateReportControl(BSTR ReportName/*[in]*/, 
                                          Access_97::AcControlType ControlType/*[in]*/, 
                                          Access_97::AcSection Section/*[in,def,opt]*/, 
                                          TVariantInParam Parent/*[in,opt]*/, 
                                          TVariantInParam ColumnName/*[in,opt]*/, 
                                          TVariantInParam Left/*[in,opt]*/, 
                                          TVariantInParam Top/*[in,opt]*/, 
                                          TVariantInParam Width/*[in,opt]*/, 
                                          TVariantInParam Height/*[in,opt]*/)
{
  Access_97::AccessControlPtr pRet;
  this->CreateReportControl(ReportName, ControlType, Section, Parent, ColumnName, Left, Top, Width, 
                            Height, (Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CreateControlEx(BSTR FormName/*[in]*/, 
                                      Access_97::AcControlType ControlType/*[in]*/, 
                                      Access_97::AcSection Section/*[in]*/, BSTR Parent/*[in]*/, 
                                      BSTR ControlSource/*[in]*/, long Left/*[in]*/, 
                                      long Top/*[in]*/, long Width/*[in]*/, long Height/*[in]*/, 
                                      Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateControlEx"), DISPID(2164));
  TAutoArgs<9> _args;
  _args[1] = FormName /*[VT_BSTR:0]*/;
  _args[2] = (int)ControlType /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Section /*[VT_USERDEFINED:0]*/;
  _args[4] = Parent /*[VT_BSTR:0]*/;
  _args[5] = ControlSource /*[VT_BSTR:0]*/;
  _args[6] = Left /*[VT_I4:0]*/;
  _args[7] = Top /*[VT_I4:0]*/;
  _args[8] = Width /*[VT_I4:0]*/;
  _args[9] = Height /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
_ApplicationDispT<T>::CreateControlEx(BSTR FormName/*[in]*/, 
                                      Access_97::AcControlType ControlType/*[in]*/, 
                                      Access_97::AcSection Section/*[in]*/, BSTR Parent/*[in]*/, 
                                      BSTR ControlSource/*[in]*/, long Left/*[in]*/, 
                                      long Top/*[in]*/, long Width/*[in]*/, long Height/*[in]*/)
{
  Access_97::AccessControlPtr pRet;
  this->CreateControlEx(FormName, ControlType, Section, Parent, ControlSource, Left, Top, Width, 
                        Height, (Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CreateReportControlEx(BSTR ReportName/*[in]*/, 
                                            Access_97::AcControlType ControlType/*[in]*/, 
                                            Access_97::AcSection Section/*[in]*/, 
                                            BSTR Parent/*[in]*/, BSTR ControlName/*[in]*/, 
                                            long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/
                                            , long Height/*[in]*/, 
                                            Access_97::AccessControlPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateReportControlEx"), DISPID(2165));
  TAutoArgs<9> _args;
  _args[1] = ReportName /*[VT_BSTR:0]*/;
  _args[2] = (int)ControlType /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)Section /*[VT_USERDEFINED:0]*/;
  _args[4] = Parent /*[VT_BSTR:0]*/;
  _args[5] = ControlName /*[VT_BSTR:0]*/;
  _args[6] = Left /*[VT_I4:0]*/;
  _args[7] = Top /*[VT_I4:0]*/;
  _args[8] = Width /*[VT_I4:0]*/;
  _args[9] = Height /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessControl**)pRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::AccessControlPtr __fastcall
_ApplicationDispT<T>::CreateReportControlEx(BSTR ReportName/*[in]*/, 
                                            Access_97::AcControlType ControlType/*[in]*/, 
                                            Access_97::AcSection Section/*[in]*/, 
                                            BSTR Parent/*[in]*/, BSTR ControlName/*[in]*/, 
                                            long Left/*[in]*/, long Top/*[in]*/, long Width/*[in]*/, 
                                            long Height/*[in]*/)
{
  Access_97::AccessControlPtr pRet;
  this->CreateReportControlEx(ReportName, ControlType, Section, Parent, ControlName, Left, Top, 
                              Width, Height, (Access_97::AccessControlPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DeleteControl(BSTR FormName/*[in]*/, BSTR ControlName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteControl"), DISPID(2033));
  TAutoArgs<2> _args;
  _args[1] = FormName /*[VT_BSTR:0]*/;
  _args[2] = ControlName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DeleteReportControl(BSTR ReportName/*[in]*/, BSTR ControlName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteReportControl"), DISPID(2034));
  TAutoArgs<2> _args;
  _args[1] = ReportName /*[VT_BSTR:0]*/;
  _args[2] = ControlName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CreateGroupLevel(BSTR ReportName/*[in]*/, BSTR Expression/*[in]*/, 
                                       short Header/*[in]*/, short Footer/*[in]*/, 
                                       long* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateGroupLevel"), DISPID(2051));
  TAutoArgs<4> _args;
  _args[1] = ReportName /*[VT_BSTR:0]*/;
  _args[2] = Expression /*[VT_BSTR:0]*/;
  _args[3] = Header /*[VT_I2:0]*/;
  _args[4] = Footer /*[VT_I2:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
_ApplicationDispT<T>::CreateGroupLevel(BSTR ReportName/*[in]*/, BSTR Expression/*[in]*/, 
                                       short Header/*[in]*/, short Footer/*[in]*/)
{
  long pRet;
  this->CreateGroupLevel(ReportName, Expression, Header, Footer, (long*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DMin(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DMin"), DISPID(2035));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DMin(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DMin(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DMax(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DMax"), DISPID(2036));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DMax(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DMax(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DSum(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DSum"), DISPID(2037));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DSum(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DSum(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DAvg(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DAvg"), DISPID(2038));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DAvg(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DAvg(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DLookup(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                              TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DLookup"), DISPID(2039));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DLookup(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                              TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DLookup(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DLast(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                            TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DLast"), DISPID(2040));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DLast(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                            TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DLast(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DVar(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DVar"), DISPID(2041));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DVar(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                           TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DVar(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DVarP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                            TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DVarP"), DISPID(2042));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DVarP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                            TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DVarP(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DStDev(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DStDev"), DISPID(2043));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DStDev(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DStDev(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DStDevP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                              TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DStDevP"), DISPID(2044));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DStDevP(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                              TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DStDevP(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DFirst(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DFirst"), DISPID(2045));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DFirst(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DFirst(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DCount(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DCount"), DISPID(2046));
  TAutoArgs<3> _args;
  _args[1] = Expr /*[VT_BSTR:0]*/;
  _args[2] = Domain /*[VT_BSTR:0]*/;
  _args[3] = Criteria /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DCount(BSTR Expr/*[in]*/, BSTR Domain/*[in]*/, 
                             TVariantInParam Criteria/*[in,opt]*/)
{
  TVariant pRet;
  this->DCount(Expr, Domain, Criteria, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Eval(BSTR StringExpr/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Eval"), DISPID(2047));
  TAutoArgs<1> _args;
  _args[1] = StringExpr /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::Eval(BSTR StringExpr/*[in]*/)
{
  TVariant pRet;
  this->Eval(StringExpr, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CurrentUser(BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentUser"), DISPID(2048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::CurrentUser(void)
{
  BSTR pRet;
  this->CurrentUser((BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DDEInitiate(BSTR Application/*[in]*/, BSTR Topic/*[in]*/, 
                                  TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DDEInitiate"), DISPID(2052));
  TAutoArgs<2> _args;
  _args[1] = Application /*[VT_BSTR:0]*/;
  _args[2] = Topic /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::DDEInitiate(BSTR Application/*[in]*/, BSTR Topic/*[in]*/)
{
  TVariant pRet;
  this->DDEInitiate(Application, Topic, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DDEExecute(TVariantInParam ChanNum/*[in]*/, BSTR Command/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DDEExecute"), DISPID(2053));
  TAutoArgs<2> _args;
  _args[1] = ChanNum /*[VT_VARIANT:0]*/;
  _args[2] = Command /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DDEPoke(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/, BSTR Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DDEPoke"), DISPID(2054));
  TAutoArgs<3> _args;
  _args[1] = ChanNum /*[VT_VARIANT:0]*/;
  _args[2] = Item /*[VT_BSTR:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DDERequest(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/, 
                                 BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DDERequest"), DISPID(2055));
  TAutoArgs<2> _args;
  _args[1] = ChanNum /*[VT_VARIANT:0]*/;
  _args[2] = Item /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::DDERequest(TVariantInParam ChanNum/*[in]*/, BSTR Item/*[in]*/)
{
  BSTR pRet;
  this->DDERequest(ChanNum, Item, (BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DDETerminate(TVariantInParam ChanNum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DDETerminate"), DISPID(2056));
  TAutoArgs<1> _args;
  _args[1] = ChanNum /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DDETerminateAll()
{
  _TDispID _dispid(*this, OLETEXT("DDETerminateAll"), DISPID(2057));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_DBEngine(Dao_97::DBEnginePtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DBEngine"), DISPID(2110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Dao_97::DBEngine**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Dao_97::DBEnginePtr __fastcall
_ApplicationDispT<T>::get_DBEngine(void)
{
  Dao_97::DBEnginePtr pRet;
  this->get_DBEngine((Dao_97::DBEnginePtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CurrentDb(Dao_97::DatabasePtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentDb"), DISPID(2049));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Dao_97::Database**)pRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Dao_97::DatabasePtr __fastcall
_ApplicationDispT<T>::CurrentDb(void)
{
  Dao_97::DatabasePtr pRet;
  this->CurrentDb((Dao_97::DatabasePtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::CodeDb(Dao_97::DatabasePtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodeDb"), DISPID(2050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Dao_97::Database**)pRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Dao_97::DatabasePtr __fastcall
_ApplicationDispT<T>::CodeDb(void)
{
  Dao_97::DatabasePtr pRet;
  this->CodeDb((Dao_97::DatabasePtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::BeginUndoable(long Hwnd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginUndoable"), DISPID(2099));
  TAutoArgs<1> _args;
  _args[1] = Hwnd /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::SetUndoRecording(short yesno/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetUndoRecording"), DISPID(2100));
  TAutoArgs<1> _args;
  _args[1] = yesno /*[VT_I2:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::BuildCriteria(BSTR Field/*[in]*/, short FieldType/*[in]*/, 
                                    BSTR Expression/*[in]*/, BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildCriteria"), DISPID(2138));
  TAutoArgs<3> _args;
  _args[1] = Field /*[VT_BSTR:0]*/;
  _args[2] = FieldType /*[VT_I2:0]*/;
  _args[3] = Expression /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::BuildCriteria(BSTR Field/*[in]*/, short FieldType/*[in]*/, 
                                    BSTR Expression/*[in]*/)
{
  BSTR pRet;
  this->BuildCriteria(Field, FieldType, Expression, (BSTR*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::InsertText(BSTR Text/*[in]*/, BSTR ModuleName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertText"), DISPID(2093));
  TAutoArgs<2> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = ModuleName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::ReloadAddIns()
{
  _TDispID _dispid(*this, OLETEXT("ReloadAddIns"), DISPID(2154));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DefaultWorkspaceClone(Dao_97::WorkspacePtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultWorkspaceClone"), DISPID(2157));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Dao_97::Workspace**)pRet /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Dao_97::WorkspacePtr __fastcall
_ApplicationDispT<T>::DefaultWorkspaceClone(void)
{
  Dao_97::WorkspacePtr pRet;
  this->DefaultWorkspaceClone((Dao_97::WorkspacePtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::RefreshTitleBar()
{
  _TDispID _dispid(*this, OLETEXT("RefreshTitleBar"), DISPID(2158));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::AddAutoCorrect(BSTR ChangeFrom/*[in]*/, BSTR ChangeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddAutoCorrect"), DISPID(2159));
  TAutoArgs<2> _args;
  _args[1] = ChangeFrom /*[VT_BSTR:0]*/;
  _args[2] = ChangeTo /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::DelAutoCorrect(BSTR ChangeFrom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DelAutoCorrect"), DISPID(2160));
  TAutoArgs<1> _args;
  _args[1] = ChangeFrom /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::hWndAccessApp(int* phWndAccessAppWnd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("hWndAccessApp"), DISPID(2163));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(phWndAccessAppWnd /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
_ApplicationDispT<T>::hWndAccessApp(void)
{
  int phWndAccessAppWnd;
  this->hWndAccessApp((int*)&phWndAccessAppWnd);
  return phWndAccessAppWnd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Run(BSTR Procedure/*[in]*/, TVariant* Arg1/*[in,out,opt]*/, 
                          TVariant* Arg2/*[in,out,opt]*/, TVariant* Arg3/*[in,out,opt]*/, 
                          TVariant* Arg4/*[in,out,opt]*/, TVariant* Arg5/*[in,out,opt]*/, 
                          TVariant* Arg6/*[in,out,opt]*/, TVariant* Arg7/*[in,out,opt]*/, 
                          TVariant* Arg8/*[in,out,opt]*/, TVariant* Arg9/*[in,out,opt]*/, 
                          TVariant* Arg10/*[in,out,opt]*/, TVariant* Arg11/*[in,out,opt]*/, 
                          TVariant* Arg12/*[in,out,opt]*/, TVariant* Arg13/*[in,out,opt]*/, 
                          TVariant* Arg14/*[in,out,opt]*/, TVariant* Arg15/*[in,out,opt]*/, 
                          TVariant* Arg16/*[in,out,opt]*/, TVariant* Arg17/*[in,out,opt]*/, 
                          TVariant* Arg18/*[in,out,opt]*/, TVariant* Arg19/*[in,out,opt]*/, 
                          TVariant* Arg20/*[in,out,opt]*/, TVariant* Arg21/*[in,out,opt]*/, 
                          TVariant* Arg22/*[in,out,opt]*/, TVariant* Arg23/*[in,out,opt]*/, 
                          TVariant* Arg24/*[in,out,opt]*/, TVariant* Arg25/*[in,out,opt]*/, 
                          TVariant* Arg26/*[in,out,opt]*/, TVariant* Arg27/*[in,out,opt]*/, 
                          TVariant* Arg28/*[in,out,opt]*/, TVariant* Arg29/*[in,out,opt]*/, 
                          TVariant* Arg30/*[in,out,opt]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(2134));
  TAutoArgs<31> _args;
  _args[1] = Procedure /*[VT_BSTR:0]*/;
  _args[2] = Arg1 /*[VT_VARIANT:1]*/;
  _args[3] = Arg2 /*[VT_VARIANT:1]*/;
  _args[4] = Arg3 /*[VT_VARIANT:1]*/;
  _args[5] = Arg4 /*[VT_VARIANT:1]*/;
  _args[6] = Arg5 /*[VT_VARIANT:1]*/;
  _args[7] = Arg6 /*[VT_VARIANT:1]*/;
  _args[8] = Arg7 /*[VT_VARIANT:1]*/;
  _args[9] = Arg8 /*[VT_VARIANT:1]*/;
  _args[10] = Arg9 /*[VT_VARIANT:1]*/;
  _args[11] = Arg10 /*[VT_VARIANT:1]*/;
  _args[12] = Arg11 /*[VT_VARIANT:1]*/;
  _args[13] = Arg12 /*[VT_VARIANT:1]*/;
  _args[14] = Arg13 /*[VT_VARIANT:1]*/;
  _args[15] = Arg14 /*[VT_VARIANT:1]*/;
  _args[16] = Arg15 /*[VT_VARIANT:1]*/;
  _args[17] = Arg16 /*[VT_VARIANT:1]*/;
  _args[18] = Arg17 /*[VT_VARIANT:1]*/;
  _args[19] = Arg18 /*[VT_VARIANT:1]*/;
  _args[20] = Arg19 /*[VT_VARIANT:1]*/;
  _args[21] = Arg20 /*[VT_VARIANT:1]*/;
  _args[22] = Arg21 /*[VT_VARIANT:1]*/;
  _args[23] = Arg22 /*[VT_VARIANT:1]*/;
  _args[24] = Arg23 /*[VT_VARIANT:1]*/;
  _args[25] = Arg24 /*[VT_VARIANT:1]*/;
  _args[26] = Arg25 /*[VT_VARIANT:1]*/;
  _args[27] = Arg26 /*[VT_VARIANT:1]*/;
  _args[28] = Arg27 /*[VT_VARIANT:1]*/;
  _args[29] = Arg28 /*[VT_VARIANT:1]*/;
  _args[30] = Arg29 /*[VT_VARIANT:1]*/;
  _args[31] = Arg30 /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::Run(BSTR Procedure/*[in]*/, TVariant* Arg1/*[in,out,opt]*/, 
                          TVariant* Arg2/*[in,out,opt]*/, TVariant* Arg3/*[in,out,opt]*/, 
                          TVariant* Arg4/*[in,out,opt]*/, TVariant* Arg5/*[in,out,opt]*/, 
                          TVariant* Arg6/*[in,out,opt]*/, TVariant* Arg7/*[in,out,opt]*/, 
                          TVariant* Arg8/*[in,out,opt]*/, TVariant* Arg9/*[in,out,opt]*/, 
                          TVariant* Arg10/*[in,out,opt]*/, TVariant* Arg11/*[in,out,opt]*/, 
                          TVariant* Arg12/*[in,out,opt]*/, TVariant* Arg13/*[in,out,opt]*/, 
                          TVariant* Arg14/*[in,out,opt]*/, TVariant* Arg15/*[in,out,opt]*/, 
                          TVariant* Arg16/*[in,out,opt]*/, TVariant* Arg17/*[in,out,opt]*/, 
                          TVariant* Arg18/*[in,out,opt]*/, TVariant* Arg19/*[in,out,opt]*/, 
                          TVariant* Arg20/*[in,out,opt]*/, TVariant* Arg21/*[in,out,opt]*/, 
                          TVariant* Arg22/*[in,out,opt]*/, TVariant* Arg23/*[in,out,opt]*/, 
                          TVariant* Arg24/*[in,out,opt]*/, TVariant* Arg25/*[in,out,opt]*/, 
                          TVariant* Arg26/*[in,out,opt]*/, TVariant* Arg27/*[in,out,opt]*/, 
                          TVariant* Arg28/*[in,out,opt]*/, TVariant* Arg29/*[in,out,opt]*/, 
                          TVariant* Arg30/*[in,out,opt]*/)
{
  TVariant pRet;
  this->Run(Procedure, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, 
            Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, 
            Arg25, Arg26, Arg27, Arg28, Arg29, Arg30, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Nz(TVariantInParam Value/*[in]*/, TVariantInParam ValueIfNull/*[in,opt]*/, 
                         TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nz"), DISPID(2135));
  TAutoArgs<2> _args;
  _args[1] = Value /*[VT_VARIANT:0]*/;
  _args[2] = ValueIfNull /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::Nz(TVariantInParam Value/*[in]*/, TVariantInParam ValueIfNull/*[in,opt]*/)
{
  TVariant pRet;
  this->Nz(Value, ValueIfNull, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::LoadPicture(BSTR FileName/*[in]*/, LPDISPATCH* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadPicture"), DISPID(2166));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_DISPATCH:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ApplicationDispT<T>::LoadPicture(BSTR FileName/*[in]*/)
{
  LPDISPATCH pRet;
  this->LoadPicture(FileName, (LPDISPATCH*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::ReplaceModule(long objtyp/*[in]*/, BSTR ModuleName/*[in]*/, 
                                    BSTR FileName/*[in]*/, long token/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceModule"), DISPID(2168));
  TAutoArgs<4> _args;
  _args[1] = objtyp /*[VT_I4:0]*/;
  _args[2] = ModuleName /*[VT_BSTR:0]*/;
  _args[3] = FileName /*[VT_BSTR:0]*/;
  _args[4] = token /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::AccessError(TVariantInParam ErrorNumber/*[in]*/, 
                                  TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AccessError"), DISPID(2169));
  TAutoArgs<1> _args;
  _args[1] = ErrorNumber /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::AccessError(TVariantInParam ErrorNumber/*[in]*/)
{
  TVariant pRet;
  this->AccessError(ErrorNumber, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::BuilderString(TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuilderString"), DISPID(2170));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::BuilderString(void)
{
  TVariant pRet;
  this->BuilderString((TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::StringFromGUID(TVariantInParam Guid/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StringFromGUID"), DISPID(2171));
  TAutoArgs<1> _args;
  _args[1] = Guid /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::StringFromGUID(TVariantInParam Guid/*[in]*/)
{
  TVariant pRet;
  this->StringFromGUID(Guid, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::GUIDFromString(TVariantInParam String/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GUIDFromString"), DISPID(2172));
  TAutoArgs<1> _args;
  _args[1] = String /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::GUIDFromString(TVariantInParam String/*[in]*/)
{
  TVariant pRet;
  this->GUIDFromString(String, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::AppLoadString(long id/*[in]*/, TVariant* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AppLoadString"), DISPID(2173));
  TAutoArgs<1> _args;
  _args[1] = id /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TVariant __fastcall
_ApplicationDispT<T>::AppLoadString(long id/*[in]*/)
{
  TVariant pRet;
  this->AppLoadString(id, (TVariant*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_CommandBars(Office_97::CommandBarsPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(2174));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBars**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBarsPtr __fastcall
_ApplicationDispT<T>::get_CommandBars(void)
{
  Office_97::CommandBarsPtr pRet;
  this->get_CommandBars((Office_97::CommandBarsPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Assistant(Office_97::AssistantPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Assistant"), DISPID(2175));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Assistant**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::AssistantPtr __fastcall
_ApplicationDispT<T>::get_Assistant(void)
{
  Office_97::AssistantPtr pRet;
  this->get_Assistant((Office_97::AssistantPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::FollowHyperlink(BSTR Address/*[in]*/, BSTR SubAddress/*[in,def,opt]*/, 
                                      TOLEBOOL NewWindow/*[in,def,opt]*/, 
                                      TOLEBOOL AddHistory/*[in,def,opt]*/, 
                                      TVariantInParam ExtraInfo/*[in,opt]*/, 
                                      Office_97::MsoExtraInfoMethod Method/*[in,def,opt]*/, 
                                      BSTR HeaderInfo/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("FollowHyperlink"), DISPID(2176));
  TAutoArgs<7> _args;
  _args[1] = Address /*[VT_BSTR:0]*/;
  _args[2] = SubAddress /*[VT_BSTR:0]*/;
  _args[3] = NewWindow /*[VT_BOOL:0]*/;
  _args[4] = AddHistory /*[VT_BOOL:0]*/;
  _args[5] = ExtraInfo /*[VT_VARIANT:0]*/;
  _args[6] = (int)Method /*[VT_USERDEFINED:0]*/;
  _args[7] = HeaderInfo /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::SaveAsText(long ObjectType/*[in]*/, BSTR ObjectName/*[in]*/, 
                                 BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveAsText"), DISPID(2178));
  TAutoArgs<3> _args;
  _args[1] = ObjectType /*[VT_I4:0]*/;
  _args[2] = ObjectName /*[VT_BSTR:0]*/;
  _args[3] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::LoadFromText(long ObjectType/*[in]*/, BSTR ObjectName/*[in]*/, 
                                   BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadFromText"), DISPID(2179));
  TAutoArgs<3> _args;
  _args[1] = ObjectType /*[VT_I4:0]*/;
  _args[2] = ObjectName /*[VT_BSTR:0]*/;
  _args[3] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::AddToFavorites()
{
  _TDispID _dispid(*this, OLETEXT("AddToFavorites"), DISPID(2184));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::RefreshDatabaseWindow()
{
  _TDispID _dispid(*this, OLETEXT("RefreshDatabaseWindow"), DISPID(2186));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_References(Access_97::AccessReferencesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("References"), DISPID(2187));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessReferences**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessReferencesPtr __fastcall
_ApplicationDispT<T>::get_References(void)
{
  Access_97::AccessReferencesPtr pRet;
  this->get_References((Access_97::AccessReferencesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Modules(Access_97::ModulesPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Modules"), DISPID(2188));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Modules**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::ModulesPtr __fastcall
_ApplicationDispT<T>::get_Modules(void)
{
  Access_97::ModulesPtr pRet;
  this->get_Modules((Access_97::ModulesPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_FileSearch(Office_97::FileSearchPtr* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileSearch"), DISPID(2189));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::FileSearch**)pRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::FileSearchPtr __fastcall
_ApplicationDispT<T>::get_FileSearch(void)
{
  Office_97::FileSearchPtr pRet;
  this->get_FileSearch((Office_97::FileSearchPtr*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_IsCompiled(TOLEBOOL* pfCompiled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsCompiled"), DISPID(2193));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfCompiled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
_ApplicationDispT<T>::get_IsCompiled(void)
{
  TOLEBOOL pfCompiled;
  this->get_IsCompiled((TOLEBOOL*)&pfCompiled);
  return pfCompiled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::RunCommand(Access_97::AcCommand Command/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RunCommand"), DISPID(2194));
  TAutoArgs<1> _args;
  _args[1] = (int)Command /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::HyperlinkPart(TVariantInParam Hyperlink/*[in]*/, 
                                    Access_97::AcHyperlinkPart Part/*[in,def,opt]*/, 
                                    BSTR* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HyperlinkPart"), DISPID(2195));
  TAutoArgs<2> _args;
  _args[1] = Hyperlink /*[VT_VARIANT:0]*/;
  _args[2] = (int)Part /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::HyperlinkPart(TVariantInParam Hyperlink/*[in]*/, 
                                    Access_97::AcHyperlinkPart Part/*[in,def,opt]*/)
{
  BSTR pRet;
  this->HyperlinkPart(Hyperlink, Part, (BSTR*)&pRet);
  return pRet;
}

// *********************************************************************//
// DispIntf:  Reference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB106212-9C89-11CF-A2B3-00A0C90542FF}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Collection(Access_97::AccessReferencesPtr* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collection"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::AccessReferences**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::AccessReferencesPtr __fastcall
ReferenceDispT<T>::get_Collection(void)
{
  Access_97::AccessReferencesPtr retval;
  this->get_Collection((Access_97::AccessReferencesPtr*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ReferenceDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Guid(BSTR* pbstrGuid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Guid"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrGuid /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ReferenceDispT<T>::get_Guid(void)
{
  BSTR pbstrGuid;
  this->get_Guid((BSTR*)&pbstrGuid);
  return pbstrGuid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Major(long* pMajor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Major"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMajor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ReferenceDispT<T>::get_Major(void)
{
  long pMajor;
  this->get_Major((long*)&pMajor);
  return pMajor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Minor(long* pMinor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Minor"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMinor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ReferenceDispT<T>::get_Minor(void)
{
  long pMinor;
  this->get_Minor((long*)&pMinor);
  return pMinor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_FullPath(BSTR* pbstrFullPath/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FullPath"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFullPath /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ReferenceDispT<T>::get_FullPath(void)
{
  BSTR pbstrFullPath;
  this->get_FullPath((BSTR*)&pbstrFullPath);
  return pbstrFullPath;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_BuiltIn(TOLEBOOL* pfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ReferenceDispT<T>::get_BuiltIn(void)
{
  TOLEBOOL pfBuiltIn;
  this->get_BuiltIn((TOLEBOOL*)&pfBuiltIn);
  return pfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_IsBroken(TOLEBOOL* pfIsBroken/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsBroken"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsBroken /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
ReferenceDispT<T>::get_IsBroken(void)
{
  TOLEBOOL pfIsBroken;
  this->get_IsBroken((TOLEBOOL*)&pfIsBroken);
  return pfIsBroken;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ReferenceDispT<T>::get_Kind(Access_97::RefKind* pKind/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Kind"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pKind /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::RefKind __fastcall
ReferenceDispT<T>::get_Kind(void)
{
  Access_97::RefKind pKind;
  this->get_Kind((Access_97::RefKind*)&pKind);
  return pKind;
}

// *********************************************************************//
// SmartIntf: TCOM_References
// Interface: _References
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::get_Parent(LPDISPATCH* retval/*[out,retval]*/)
{
  return (*this)->get_Parent(retval);
}

template <class T> LPDISPATCH __fastcall
TCOM_ReferencesT<T>::get_Parent(void)
{
  LPDISPATCH retval;
  OLECHECK(this->get_Parent((LPDISPATCH*)&retval));
  return retval;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::Item(TVariantInParam var/*[in]*/, 
                          Access_97::ReferencePtr* Reference/*[out,retval]*/)
{
  return (*this)->Item(var, Reference);
}

template <class T> Access_97::ReferencePtr __fastcall
TCOM_ReferencesT<T>::Item(TVariantInParam var/*[in]*/)
{
  Access_97::ReferencePtr Reference;
  OLECHECK(this->Item(var, (Access_97::ReferencePtr*)&Reference));
  return Reference;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::get_Count(long* Count/*[out,retval]*/)
{
  return (*this)->get_Count(Count);
}

template <class T> long __fastcall
TCOM_ReferencesT<T>::get_Count(void)
{
  long Count;
  OLECHECK(this->get_Count((long*)&Count));
  return Count;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::_NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppenum);
}

template <class T> LPUNKNOWN __fastcall
TCOM_ReferencesT<T>::_NewEnum(void)
{
  LPUNKNOWN ppenum;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppenum));
  return ppenum;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/, 
                                 Access_97::ReferencePtr* Reference/*[out,retval]*/)
{
  return (*this)->AddFromGuid(Guid, Major, Minor, Reference);
}

template <class T> Access_97::ReferencePtr __fastcall
TCOM_ReferencesT<T>::AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/)
{
  Access_97::ReferencePtr Reference;
  OLECHECK(this->AddFromGuid(Guid, Major, Minor, (Access_97::ReferencePtr*)&Reference));
  return Reference;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::AddFromFile(BSTR FileName/*[in]*/, 
                                 Access_97::ReferencePtr* Reference/*[out,retval]*/)
{
  return (*this)->AddFromFile(FileName, Reference);
}

template <class T> Access_97::ReferencePtr __fastcall
TCOM_ReferencesT<T>::AddFromFile(BSTR FileName/*[in]*/)
{
  Access_97::ReferencePtr Reference;
  OLECHECK(this->AddFromFile(FileName, (Access_97::ReferencePtr*)&Reference));
  return Reference;
}

template <class T> HRESULT __fastcall
TCOM_ReferencesT<T>::Remove(Access_97::ReferencePtr Reference/*[in]*/)
{
  return (*this)->Remove(Reference);
}

// *********************************************************************//
// DispIntf:  _References
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EB106213-9C89-11CF-A2B3-00A0C90542FF}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::get_Parent(LPDISPATCH* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ReferencesDispT<T>::get_Parent(void)
{
  LPDISPATCH retval;
  this->get_Parent((LPDISPATCH*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::Item(TVariantInParam var/*[in]*/, 
                          Access_97::ReferencePtr* Reference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = var /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Reference**)Reference /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::ReferencePtr __fastcall
_ReferencesDispT<T>::Item(TVariantInParam var/*[in]*/)
{
  Access_97::ReferencePtr Reference;
  this->Item(var, (Access_97::ReferencePtr*)&Reference);
  return Reference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ReferencesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::_NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppenum /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_ReferencesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppenum;
  this->_NewEnum((LPUNKNOWN*)&ppenum);
  return ppenum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/, 
                                 Access_97::ReferencePtr* Reference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFromGuid"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<3> _args;
  _args[1] = Guid /*[VT_BSTR:0]*/;
  _args[2] = Major /*[VT_I4:0]*/;
  _args[3] = Minor /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Reference**)Reference /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::ReferencePtr __fastcall
_ReferencesDispT<T>::AddFromGuid(BSTR Guid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/)
{
  Access_97::ReferencePtr Reference;
  this->AddFromGuid(Guid, Major, Minor, (Access_97::ReferencePtr*)&Reference);
  return Reference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::AddFromFile(BSTR FileName/*[in]*/, 
                                 Access_97::ReferencePtr* Reference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFromFile"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::Reference**)Reference /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::ReferencePtr __fastcall
_ReferencesDispT<T>::AddFromFile(BSTR FileName/*[in]*/)
{
  Access_97::ReferencePtr Reference;
  this->AddFromFile(FileName, (Access_97::ReferencePtr*)&Reference);
  return Reference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ReferencesDispT<T>::Remove(Access_97::ReferencePtr Reference/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Access_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _References_Events
// Flags:     (4240) Hidden NonExtensible Dispatchable
// GUID:      {F163F201-ADA2-11CF-89A9-00A0C9054129}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_References_EventsDispT<T>::ItemAdded(Access_97::ReferencePtr Reference)
{
  _TDispID _dispid(/* ItemAdded */ DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Access_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_References_EventsDispT<T>::ItemRemoved(Access_97::ReferencePtr Reference)
{
  _TDispID _dispid(/* ItemRemoved */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Access_97::Reference*)Reference /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM_Dummy
// Interface: _Dummy
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _Dummy
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B06E320-B23C-11CF-89A8-00A0C9054129}
// *********************************************************************//
// *********************************************************************//
// SmartIntf: TCOM___IVbaModule
// Interface: ___IVbaModule
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_Parent(LPUNKNOWN* retval/*[out,retval]*/)
{
  return (*this)->get_Parent(retval);
}

template <class T> LPUNKNOWN __fastcall
TCOM___IVbaModuleT<T>::get_Parent(void)
{
  LPUNKNOWN retval;
  OLECHECK(this->get_Parent((LPUNKNOWN*)&retval));
  return retval;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_VBA(LPUNKNOWN* retval/*[out,retval]*/)
{
  return (*this)->get_VBA(retval);
}

template <class T> LPUNKNOWN __fastcall
TCOM___IVbaModuleT<T>::get_VBA(void)
{
  LPUNKNOWN retval;
  OLECHECK(this->get_VBA((LPUNKNOWN*)&retval));
  return retval;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  return (*this)->get_Name(pbstrName);
}

template <class T> BSTR __fastcall
TCOM___IVbaModuleT<T>::get_Name(void)
{
  BSTR pbstrName = 0;
  OLECHECK(this->get_Name((BSTR*)&pbstrName));
  return pbstrName;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  return (*this)->set_Name(pbstrName);
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::AddFromString(BSTR String/*[in]*/)
{
  return (*this)->AddFromString(String);
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::AddFromFile(BSTR FileName/*[in]*/)
{
  return (*this)->AddFromFile(FileName);
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_Lines(long Line/*[in]*/, long cLine/*[in]*/, BSTR* String/*[out,retval]*/)
{
  return (*this)->get_Lines(Line, cLine, String);
}

template <class T> BSTR __fastcall
TCOM___IVbaModuleT<T>::get_Lines(long Line/*[in]*/, long cLine/*[in]*/)
{
  BSTR String = 0;
  OLECHECK(this->get_Lines(Line, cLine, (BSTR*)&String));
  return String;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_CountOfLines(long* CountOfLines/*[out,retval]*/)
{
  return (*this)->get_CountOfLines(CountOfLines);
}

template <class T> long __fastcall
TCOM___IVbaModuleT<T>::get_CountOfLines(void)
{
  long CountOfLines;
  OLECHECK(this->get_CountOfLines((long*)&CountOfLines));
  return CountOfLines;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::InsertLines(long Line/*[in]*/, BSTR String/*[in]*/)
{
  return (*this)->InsertLines(Line, String);
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::DeleteLines(long StartLine/*[in]*/, long Count/*[in]*/)
{
  return (*this)->DeleteLines(StartLine, Count);
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/)
{
  return (*this)->ReplaceLine(Line, String);
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                         Access_97::___ProcKind ProcKind/*[in]*/, 
                                         long* ProcStartLine/*[out,retval]*/)
{
  return (*this)->get_ProcStartLine(ProcName, ProcKind, ProcStartLine);
}

template <class T> long __fastcall
TCOM___IVbaModuleT<T>::get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                         Access_97::___ProcKind ProcKind/*[in]*/)
{
  long ProcStartLine;
  OLECHECK(this->get_ProcStartLine(ProcName, ProcKind, (long*)&ProcStartLine));
  return ProcStartLine;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                          Access_97::___ProcKind ProcKind/*[in]*/, 
                                          long* ProcCountLines/*[out,retval]*/)
{
  return (*this)->get_ProcCountLines(ProcName, ProcKind, ProcCountLines);
}

template <class T> long __fastcall
TCOM___IVbaModuleT<T>::get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                          Access_97::___ProcKind ProcKind/*[in]*/)
{
  long ProcCountLines;
  OLECHECK(this->get_ProcCountLines(ProcName, ProcKind, (long*)&ProcCountLines));
  return ProcCountLines;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                        Access_97::___ProcKind ProcKind/*[in]*/, 
                                        long* ProcBodyLine/*[out,retval]*/)
{
  return (*this)->get_ProcBodyLine(ProcName, ProcKind, ProcBodyLine);
}

template <class T> long __fastcall
TCOM___IVbaModuleT<T>::get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                        Access_97::___ProcKind ProcKind/*[in]*/)
{
  long ProcBodyLine;
  OLECHECK(this->get_ProcBodyLine(ProcName, ProcKind, (long*)&ProcBodyLine));
  return ProcBodyLine;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_ProcOfLine(long Line/*[in]*/, Access_97::___ProcKind* pprockind/*[out]*/, 
                                      BSTR* pbstrName/*[out,retval]*/)
{
  return (*this)->get_ProcOfLine(Line, pprockind, pbstrName);
}

template <class T> BSTR __fastcall
TCOM___IVbaModuleT<T>::get_ProcOfLine(long Line/*[in]*/, Access_97::___ProcKind* pprockind/*[out]*/)
{
  BSTR pbstrName = 0;
  OLECHECK(this->get_ProcOfLine(Line, pprockind, (BSTR*)&pbstrName));
  return pbstrName;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_DeclCountOfLines(long* pDeclCountOfLines/*[out,retval]*/)
{
  return (*this)->get_DeclCountOfLines(pDeclCountOfLines);
}

template <class T> long __fastcall
TCOM___IVbaModuleT<T>::get_DeclCountOfLines(void)
{
  long pDeclCountOfLines;
  OLECHECK(this->get_DeclCountOfLines((long*)&pDeclCountOfLines));
  return pDeclCountOfLines;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/, 
                                       long* Line/*[out,retval]*/)
{
  return (*this)->CreateEventProc(EventName, ObjectName, Line);
}

template <class T> long __fastcall
TCOM___IVbaModuleT<T>::CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/)
{
  long Line;
  OLECHECK(this->CreateEventProc(EventName, ObjectName, (long*)&Line));
  return Line;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                            long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                            long* EndColumn/*[in,out]*/, TOLEBOOL WholeWord/*[in,def,opt]*/, 
                            TOLEBOOL MatchCase/*[in,def,opt]*/, 
                            TOLEBOOL PatternSearch/*[in,def,opt]*/, 
                            TOLEBOOL* pfFound/*[out,retval]*/)
{
  return (*this)->Find(Target, StartLine, StartColumn, EndLine, EndColumn, WholeWord, MatchCase, 
                       PatternSearch, pfFound);
}

template <class T> TOLEBOOL __fastcall
TCOM___IVbaModuleT<T>::Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                            long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                            long* EndColumn/*[in,out]*/, TOLEBOOL WholeWord/*[in,def,opt]*/, 
                            TOLEBOOL MatchCase/*[in,def,opt]*/, 
                            TOLEBOOL PatternSearch/*[in,def,opt]*/)
{
  TOLEBOOL pfFound;
  OLECHECK(this->Find(Target, StartLine, StartColumn, EndLine, EndColumn, WholeWord, MatchCase, 
                      PatternSearch, (TOLEBOOL*)&pfFound));
  return pfFound;
}

template <class T> HRESULT __fastcall
TCOM___IVbaModuleT<T>::get_GetEditor(Access_97::___EditorPtr* ___Editor/*[out,retval]*/)
{
  return (*this)->get_GetEditor(___Editor);
}

template <class T> Access_97::___EditorPtr __fastcall
TCOM___IVbaModuleT<T>::get_GetEditor(void)
{
  Access_97::___EditorPtr ___Editor;
  OLECHECK(this->get_GetEditor((Access_97::___EditorPtr*)&___Editor));
  return ___Editor;
}

// *********************************************************************//
// DispIntf:  ___IVbaModule
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E16E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_Parent(LPUNKNOWN* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
___IVbaModuleDispT<T>::get_Parent(void)
{
  LPUNKNOWN retval;
  this->get_Parent((LPUNKNOWN*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_VBA(LPUNKNOWN* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBA"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
___IVbaModuleDispT<T>::get_VBA(void)
{
  LPUNKNOWN retval;
  this->get_VBA((LPUNKNOWN*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
___IVbaModuleDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::AddFromString(BSTR String/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFromString"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<1> _args;
  _args[1] = String /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::AddFromFile(BSTR FileName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddFromFile"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_Lines(long Line/*[in]*/, long cLine/*[in]*/, BSTR* String/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Lines"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = cLine /*[VT_I4:0]*/;
  return OutRetValSetterPtr(String /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
___IVbaModuleDispT<T>::get_Lines(long Line/*[in]*/, long cLine/*[in]*/)
{
  BSTR String;
  this->get_Lines(Line, cLine, (BSTR*)&String);
  return String;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_CountOfLines(long* CountOfLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CountOfLines"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CountOfLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
___IVbaModuleDispT<T>::get_CountOfLines(void)
{
  long CountOfLines;
  this->get_CountOfLines((long*)&CountOfLines);
  return CountOfLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::InsertLines(long Line/*[in]*/, BSTR String/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertLines"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = String /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::DeleteLines(long StartLine/*[in]*/, long Count/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeleteLines"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<2> _args;
  _args[1] = StartLine /*[VT_I4:0]*/;
  _args[2] = Count /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::ReplaceLine(long Line/*[in]*/, BSTR String/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReplaceLine"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = String /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                         Access_97::___ProcKind ProcKind/*[in]*/, 
                                         long* ProcStartLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcStartLine"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<2> _args;
  _args[1] = ProcName /*[VT_BSTR:0]*/;
  _args[2] = (int)ProcKind /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ProcStartLine /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
___IVbaModuleDispT<T>::get_ProcStartLine(BSTR ProcName/*[in]*/, 
                                         Access_97::___ProcKind ProcKind/*[in]*/)
{
  long ProcStartLine;
  this->get_ProcStartLine(ProcName, ProcKind, (long*)&ProcStartLine);
  return ProcStartLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                          Access_97::___ProcKind ProcKind/*[in]*/, 
                                          long* ProcCountLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcCountLines"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<2> _args;
  _args[1] = ProcName /*[VT_BSTR:0]*/;
  _args[2] = (int)ProcKind /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ProcCountLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
___IVbaModuleDispT<T>::get_ProcCountLines(BSTR ProcName/*[in]*/, 
                                          Access_97::___ProcKind ProcKind/*[in]*/)
{
  long ProcCountLines;
  this->get_ProcCountLines(ProcName, ProcKind, (long*)&ProcCountLines);
  return ProcCountLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                        Access_97::___ProcKind ProcKind/*[in]*/, 
                                        long* ProcBodyLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcBodyLine"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<2> _args;
  _args[1] = ProcName /*[VT_BSTR:0]*/;
  _args[2] = (int)ProcKind /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ProcBodyLine /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
___IVbaModuleDispT<T>::get_ProcBodyLine(BSTR ProcName/*[in]*/, 
                                        Access_97::___ProcKind ProcKind/*[in]*/)
{
  long ProcBodyLine;
  this->get_ProcBodyLine(ProcName, ProcKind, (long*)&ProcBodyLine);
  return ProcBodyLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_ProcOfLine(long Line/*[in]*/, Access_97::___ProcKind* pprockind/*[out]*/
                                      , BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProcOfLine"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<2> _args;
  _args[1] = Line /*[VT_I4:0]*/;
  _args[2] = (int*)pprockind /*[VT_USERDEFINED:1]*/;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
___IVbaModuleDispT<T>::get_ProcOfLine(long Line/*[in]*/, Access_97::___ProcKind* pprockind/*[out]*/)
{
  BSTR pbstrName;
  this->get_ProcOfLine(Line, pprockind, (BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_DeclCountOfLines(long* pDeclCountOfLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeclCountOfLines"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pDeclCountOfLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
___IVbaModuleDispT<T>::get_DeclCountOfLines(void)
{
  long pDeclCountOfLines;
  this->get_DeclCountOfLines((long*)&pDeclCountOfLines);
  return pDeclCountOfLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/, 
                                       long* Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateEventProc"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<2> _args;
  _args[1] = EventName /*[VT_BSTR:0]*/;
  _args[2] = ObjectName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Line /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
___IVbaModuleDispT<T>::CreateEventProc(BSTR EventName/*[in]*/, BSTR ObjectName/*[in]*/)
{
  long Line;
  this->CreateEventProc(EventName, ObjectName, (long*)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                            long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                            long* EndColumn/*[in,out]*/, TOLEBOOL WholeWord/*[in,def,opt]*/, 
                            TOLEBOOL MatchCase/*[in,def,opt]*/, 
                            TOLEBOOL PatternSearch/*[in,def,opt]*/, 
                            TOLEBOOL* pfFound/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<8> _args;
  _args[1] = Target /*[VT_BSTR:0]*/;
  _args[2] = StartLine /*[VT_I4:1]*/;
  _args[3] = StartColumn /*[VT_I4:1]*/;
  _args[4] = EndLine /*[VT_I4:1]*/;
  _args[5] = EndColumn /*[VT_I4:1]*/;
  _args[6] = WholeWord /*[VT_BOOL:0]*/;
  _args[7] = MatchCase /*[VT_BOOL:0]*/;
  _args[8] = PatternSearch /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pfFound /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
___IVbaModuleDispT<T>::Find(BSTR Target/*[in]*/, long* StartLine/*[in,out]*/, 
                            long* StartColumn/*[in,out]*/, long* EndLine/*[in,out]*/, 
                            long* EndColumn/*[in,out]*/, TOLEBOOL WholeWord/*[in,def,opt]*/, 
                            TOLEBOOL MatchCase/*[in,def,opt]*/, 
                            TOLEBOOL PatternSearch/*[in,def,opt]*/)
{
  TOLEBOOL pfFound;
  this->Find(Target, StartLine, StartColumn, EndLine, EndColumn, WholeWord, MatchCase, PatternSearch, (TOLEBOOL*)&pfFound);
  return pfFound;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaModuleDispT<T>::get_GetEditor(Access_97::___EditorPtr* ___Editor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetEditor"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::___Editor**)___Editor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::___EditorPtr __fastcall
___IVbaModuleDispT<T>::get_GetEditor(void)
{
  Access_97::___EditorPtr ___Editor;
  this->get_GetEditor((Access_97::___EditorPtr*)&___Editor);
  return ___Editor;
}

// *********************************************************************//
// SmartIntf: TCOM___IVbaEditors
// Interface: ___IVbaEditors
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM___IVbaEditorsT<T>::get_Parent(LPUNKNOWN* retval/*[out,retval]*/)
{
  return (*this)->get_Parent(retval);
}

template <class T> LPUNKNOWN __fastcall
TCOM___IVbaEditorsT<T>::get_Parent(void)
{
  LPUNKNOWN retval;
  OLECHECK(this->get_Parent((LPUNKNOWN*)&retval));
  return retval;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorsT<T>::get_VBA(LPUNKNOWN* retval/*[out,retval]*/)
{
  return (*this)->get_VBA(retval);
}

template <class T> LPUNKNOWN __fastcall
TCOM___IVbaEditorsT<T>::get_VBA(void)
{
  LPUNKNOWN retval;
  OLECHECK(this->get_VBA((LPUNKNOWN*)&retval));
  return retval;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorsT<T>::Item(TVariantInParam var/*[in]*/, 
                             Access_97::___EditorPtr* ___Editor/*[out,retval]*/)
{
  return (*this)->Item(var, ___Editor);
}

template <class T> Access_97::___EditorPtr __fastcall
TCOM___IVbaEditorsT<T>::Item(TVariantInParam var/*[in]*/)
{
  Access_97::___EditorPtr ___Editor;
  OLECHECK(this->Item(var, (Access_97::___EditorPtr*)&___Editor));
  return ___Editor;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorsT<T>::get_Count(long* Count/*[out,retval]*/)
{
  return (*this)->get_Count(Count);
}

template <class T> long __fastcall
TCOM___IVbaEditorsT<T>::get_Count(void)
{
  long Count;
  OLECHECK(this->get_Count((long*)&Count));
  return Count;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorsT<T>::_NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppenum);
}

template <class T> LPUNKNOWN __fastcall
TCOM___IVbaEditorsT<T>::_NewEnum(void)
{
  LPUNKNOWN ppenum;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppenum));
  return ppenum;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorsT<T>::get_Current(Access_97::___EditorPtr* ___Editor/*[out,retval]*/)
{
  return (*this)->get_Current(___Editor);
}

template <class T> Access_97::___EditorPtr __fastcall
TCOM___IVbaEditorsT<T>::get_Current(void)
{
  Access_97::___EditorPtr ___Editor;
  OLECHECK(this->get_Current((Access_97::___EditorPtr*)&___Editor));
  return ___Editor;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorsT<T>::set_Current(Access_97::___EditorPtr ___Editor/*[in]*/)
{
  return (*this)->set_Current(___Editor);
}

// *********************************************************************//
// DispIntf:  ___IVbaEditors
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E172-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorsDispT<T>::get_Parent(LPUNKNOWN* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
___IVbaEditorsDispT<T>::get_Parent(void)
{
  LPUNKNOWN retval;
  this->get_Parent((LPUNKNOWN*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorsDispT<T>::get_VBA(LPUNKNOWN* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBA"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
___IVbaEditorsDispT<T>::get_VBA(void)
{
  LPUNKNOWN retval;
  this->get_VBA((LPUNKNOWN*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorsDispT<T>::Item(TVariantInParam var/*[in]*/, 
                             Access_97::___EditorPtr* ___Editor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = var /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::___Editor**)___Editor /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::___EditorPtr __fastcall
___IVbaEditorsDispT<T>::Item(TVariantInParam var/*[in]*/)
{
  Access_97::___EditorPtr ___Editor;
  this->Item(var, (Access_97::___EditorPtr*)&___Editor);
  return ___Editor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorsDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
___IVbaEditorsDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorsDispT<T>::_NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppenum /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
___IVbaEditorsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppenum;
  this->_NewEnum((LPUNKNOWN*)&ppenum);
  return ppenum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorsDispT<T>::get_Current(Access_97::___EditorPtr* ___Editor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Current"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::___Editor**)___Editor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::___EditorPtr __fastcall
___IVbaEditorsDispT<T>::get_Current(void)
{
  Access_97::___EditorPtr ___Editor;
  this->get_Current((Access_97::___EditorPtr*)&___Editor);
  return ___Editor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorsDispT<T>::set_Current(Access_97::___EditorPtr ___Editor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Current"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Access_97::___Editor*)___Editor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOM___IVbaEditor
// Interface: ___IVbaEditor
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::get_Parent(LPUNKNOWN* retval/*[out,retval]*/)
{
  return (*this)->get_Parent(retval);
}

template <class T> LPUNKNOWN __fastcall
TCOM___IVbaEditorT<T>::get_Parent(void)
{
  LPUNKNOWN retval;
  OLECHECK(this->get_Parent((LPUNKNOWN*)&retval));
  return retval;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::get_VBA(LPUNKNOWN* retval/*[out,retval]*/)
{
  return (*this)->get_VBA(retval);
}

template <class T> LPUNKNOWN __fastcall
TCOM___IVbaEditorT<T>::get_VBA(void)
{
  LPUNKNOWN retval;
  OLECHECK(this->get_VBA((LPUNKNOWN*)&retval));
  return retval;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::get_Window(LPDISPATCH* retval/*[out,retval]*/)
{
  return (*this)->get_Window(retval);
}

template <class T> LPDISPATCH __fastcall
TCOM___IVbaEditorT<T>::get_Window(void)
{
  LPDISPATCH retval;
  OLECHECK(this->get_Window((LPDISPATCH*)&retval));
  return retval;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::GetSelection(long* StartLine/*[out]*/, long* StartColumn/*[out]*/, 
                                    long* EndLine/*[out]*/, long* EndColumn/*[out]*/)
{
  return (*this)->GetSelection(StartLine, StartColumn, EndLine, EndColumn);
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::SetSelection(long StartLine/*[in]*/, long StartColumn/*[in]*/, 
                                    long EndLine/*[in]*/, long EndColumn/*[in]*/)
{
  return (*this)->SetSelection(StartLine, StartColumn, EndLine, EndColumn);
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::get_TopLine(long* TopLine/*[out,retval]*/)
{
  return (*this)->get_TopLine(TopLine);
}

template <class T> long __fastcall
TCOM___IVbaEditorT<T>::get_TopLine(void)
{
  long TopLine;
  OLECHECK(this->get_TopLine((long*)&TopLine));
  return TopLine;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::set_TopLine(long TopLine/*[in]*/)
{
  return (*this)->set_TopLine(TopLine);
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::get_CountOfVisibleLines(long* CountOfVisibleLines/*[out,retval]*/)
{
  return (*this)->get_CountOfVisibleLines(CountOfVisibleLines);
}

template <class T> long __fastcall
TCOM___IVbaEditorT<T>::get_CountOfVisibleLines(void)
{
  long CountOfVisibleLines;
  OLECHECK(this->get_CountOfVisibleLines((long*)&CountOfVisibleLines));
  return CountOfVisibleLines;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::get____CodeModule(Access_97::___CodeModulePtr* ___CodeModule/*[out,retval]*/)
{
  return (*this)->get____CodeModule(___CodeModule);
}

template <class T> Access_97::___CodeModulePtr __fastcall
TCOM___IVbaEditorT<T>::get____CodeModule(void)
{
  Access_97::___CodeModulePtr ___CodeModule;
  OLECHECK(this->get____CodeModule((Access_97::___CodeModulePtr*)&___CodeModule));
  return ___CodeModule;
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::Show(void)
{
  return (*this)->Show();
}

template <class T> HRESULT __fastcall
TCOM___IVbaEditorT<T>::get_CodePaneView(Access_97::___vbext_CodePaneview* pCodePaneview/*[out,retval]*/)
{
  return (*this)->get_CodePaneView(pCodePaneview);
}

template <class T> Access_97::___vbext_CodePaneview __fastcall
TCOM___IVbaEditorT<T>::get_CodePaneView(void)
{
  Access_97::___vbext_CodePaneview pCodePaneview;
  OLECHECK(this->get_CodePaneView((Access_97::___vbext_CodePaneview*)&pCodePaneview));
  return pCodePaneview;
}

// *********************************************************************//
// DispIntf:  ___IVbaEditor
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E176-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::get_Parent(LPUNKNOWN* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
___IVbaEditorDispT<T>::get_Parent(void)
{
  LPUNKNOWN retval;
  this->get_Parent((LPUNKNOWN*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::get_VBA(LPUNKNOWN* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBA"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
___IVbaEditorDispT<T>::get_VBA(void)
{
  LPUNKNOWN retval;
  this->get_VBA((LPUNKNOWN*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::get_Window(LPDISPATCH* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Window"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
___IVbaEditorDispT<T>::get_Window(void)
{
  LPDISPATCH retval;
  this->get_Window((LPDISPATCH*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::GetSelection(long* StartLine/*[out]*/, long* StartColumn/*[out]*/, 
                                    long* EndLine/*[out]*/, long* EndColumn/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSelection"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<4> _args;
  _args[1] = StartLine /*[VT_I4:1]*/;
  _args[2] = StartColumn /*[VT_I4:1]*/;
  _args[3] = EndLine /*[VT_I4:1]*/;
  _args[4] = EndColumn /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::SetSelection(long StartLine/*[in]*/, long StartColumn/*[in]*/, 
                                    long EndLine/*[in]*/, long EndColumn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSelection"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<4> _args;
  _args[1] = StartLine /*[VT_I4:0]*/;
  _args[2] = StartColumn /*[VT_I4:0]*/;
  _args[3] = EndLine /*[VT_I4:0]*/;
  _args[4] = EndColumn /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::get_TopLine(long* TopLine/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopLine"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TopLine /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
___IVbaEditorDispT<T>::get_TopLine(void)
{
  long TopLine;
  this->get_TopLine((long*)&TopLine);
  return TopLine;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::set_TopLine(long TopLine/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TopLine"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = TopLine /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::get_CountOfVisibleLines(long* CountOfVisibleLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CountOfVisibleLines"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CountOfVisibleLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
___IVbaEditorDispT<T>::get_CountOfVisibleLines(void)
{
  long CountOfVisibleLines;
  this->get_CountOfVisibleLines((long*)&CountOfVisibleLines);
  return CountOfVisibleLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::get____CodeModule(Access_97::___CodeModulePtr* ___CodeModule/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("___CodeModule"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::___CodeModule**)___CodeModule /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::___CodeModulePtr __fastcall
___IVbaEditorDispT<T>::get____CodeModule(void)
{
  Access_97::___CodeModulePtr ___CodeModule;
  this->get____CodeModule((Access_97::___CodeModulePtr*)&___CodeModule);
  return ___CodeModule;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::Show()
{
  _TDispID _dispid(*this, OLETEXT("Show"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___IVbaEditorDispT<T>::get_CodePaneView(Access_97::___vbext_CodePaneview* pCodePaneview/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodePaneView"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pCodePaneview /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::___vbext_CodePaneview __fastcall
___IVbaEditorDispT<T>::get_CodePaneView(void)
{
  Access_97::___vbext_CodePaneview pCodePaneview;
  this->get_CodePaneView((Access_97::___vbext_CodePaneview*)&pCodePaneview);
  return pCodePaneview;
}

// *********************************************************************//
// SmartIntf: TCOMIVbaReferences
// Interface: IVbaReferences
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIVbaReferencesT<T>::get_Parent(LPUNKNOWN* retval/*[out,retval]*/)
{
  return (*this)->get_Parent(retval);
}

template <class T> LPUNKNOWN __fastcall
TCOMIVbaReferencesT<T>::get_Parent(void)
{
  LPUNKNOWN retval;
  OLECHECK(this->get_Parent((LPUNKNOWN*)&retval));
  return retval;
}

template <class T> HRESULT __fastcall
TCOMIVbaReferencesT<T>::get_VBA(LPUNKNOWN* retval/*[out,retval]*/)
{
  return (*this)->get_VBA(retval);
}

template <class T> LPUNKNOWN __fastcall
TCOMIVbaReferencesT<T>::get_VBA(void)
{
  LPUNKNOWN retval;
  OLECHECK(this->get_VBA((LPUNKNOWN*)&retval));
  return retval;
}

template <class T> HRESULT __fastcall
TCOMIVbaReferencesT<T>::Item(TVariantInParam var/*[in]*/, 
                             Access_97::___ReferencePtr* ___Reference/*[out,retval]*/)
{
  return (*this)->Item(var, ___Reference);
}

template <class T> Access_97::___ReferencePtr __fastcall
TCOMIVbaReferencesT<T>::Item(TVariantInParam var/*[in]*/)
{
  Access_97::___ReferencePtr ___Reference;
  OLECHECK(this->Item(var, (Access_97::___ReferencePtr*)&___Reference));
  return ___Reference;
}

template <class T> HRESULT __fastcall
TCOMIVbaReferencesT<T>::get_Count(long* Count/*[out,retval]*/)
{
  return (*this)->get_Count(Count);
}

template <class T> long __fastcall
TCOMIVbaReferencesT<T>::get_Count(void)
{
  long Count;
  OLECHECK(this->get_Count((long*)&Count));
  return Count;
}

template <class T> HRESULT __fastcall
TCOMIVbaReferencesT<T>::_NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/)
{
  return (*this)->_NewEnum(ppenum);
}

template <class T> LPUNKNOWN __fastcall
TCOMIVbaReferencesT<T>::_NewEnum(void)
{
  LPUNKNOWN ppenum;
  OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppenum));
  return ppenum;
}

template <class T> HRESULT __fastcall
TCOMIVbaReferencesT<T>::CreateFromGuid(BSTR bstrGuid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/, 
                                       Access_97::___ReferencePtr* ___Reference/*[out,retval]*/)
{
  return (*this)->CreateFromGuid(bstrGuid, Major, Minor, ___Reference);
}

template <class T> Access_97::___ReferencePtr __fastcall
TCOMIVbaReferencesT<T>::CreateFromGuid(BSTR bstrGuid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/)
{
  Access_97::___ReferencePtr ___Reference;
  OLECHECK(this->CreateFromGuid(bstrGuid, Major, Minor, (Access_97::___ReferencePtr*)&___Reference));
  return ___Reference;
}

template <class T> HRESULT __fastcall
TCOMIVbaReferencesT<T>::CreateFromFile(BSTR bstrFileName/*[in]*/, 
                                       Access_97::___ReferencePtr* ___Reference/*[out,retval]*/)
{
  return (*this)->CreateFromFile(bstrFileName, ___Reference);
}

template <class T> Access_97::___ReferencePtr __fastcall
TCOMIVbaReferencesT<T>::CreateFromFile(BSTR bstrFileName/*[in]*/)
{
  Access_97::___ReferencePtr ___Reference;
  OLECHECK(this->CreateFromFile(bstrFileName, (Access_97::___ReferencePtr*)&___Reference));
  return ___Reference;
}

template <class T> HRESULT __fastcall
TCOMIVbaReferencesT<T>::Remove(Access_97::___ReferencePtr ___Reference/*[in]*/)
{
  return (*this)->Remove(___Reference);
}

// *********************************************************************//
// DispIntf:  IVbaReferences
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17A-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVbaReferencesDispT<T>::get_Parent(LPUNKNOWN* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IVbaReferencesDispT<T>::get_Parent(void)
{
  LPUNKNOWN retval;
  this->get_Parent((LPUNKNOWN*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVbaReferencesDispT<T>::get_VBA(LPUNKNOWN* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBA"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IVbaReferencesDispT<T>::get_VBA(void)
{
  LPUNKNOWN retval;
  this->get_VBA((LPUNKNOWN*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVbaReferencesDispT<T>::Item(TVariantInParam var/*[in]*/, 
                             Access_97::___ReferencePtr* ___Reference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = var /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::___Reference**)___Reference /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::___ReferencePtr __fastcall
IVbaReferencesDispT<T>::Item(TVariantInParam var/*[in]*/)
{
  Access_97::___ReferencePtr ___Reference;
  this->Item(var, (Access_97::___ReferencePtr*)&___Reference);
  return ___Reference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVbaReferencesDispT<T>::get_Count(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IVbaReferencesDispT<T>::get_Count(void)
{
  long Count;
  this->get_Count((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVbaReferencesDispT<T>::_NewEnum(LPUNKNOWN* ppenum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppenum /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IVbaReferencesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppenum;
  this->_NewEnum((LPUNKNOWN*)&ppenum);
  return ppenum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVbaReferencesDispT<T>::CreateFromGuid(BSTR bstrGuid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/
                                       , Access_97::___ReferencePtr* ___Reference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateFromGuid"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<3> _args;
  _args[1] = bstrGuid /*[VT_BSTR:0]*/;
  _args[2] = Major /*[VT_I4:0]*/;
  _args[3] = Minor /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::___Reference**)___Reference /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::___ReferencePtr __fastcall
IVbaReferencesDispT<T>::CreateFromGuid(BSTR bstrGuid/*[in]*/, long Major/*[in]*/, long Minor/*[in]*/)
{
  Access_97::___ReferencePtr ___Reference;
  this->CreateFromGuid(bstrGuid, Major, Minor, (Access_97::___ReferencePtr*)&___Reference);
  return ___Reference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVbaReferencesDispT<T>::CreateFromFile(BSTR bstrFileName/*[in]*/, 
                                       Access_97::___ReferencePtr* ___Reference/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateFromFile"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<1> _args;
  _args[1] = bstrFileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::___Reference**)___Reference /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Access_97::___ReferencePtr __fastcall
IVbaReferencesDispT<T>::CreateFromFile(BSTR bstrFileName/*[in]*/)
{
  Access_97::___ReferencePtr ___Reference;
  this->CreateFromFile(bstrFileName, (Access_97::___ReferencePtr*)&___Reference);
  return ___Reference;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IVbaReferencesDispT<T>::Remove(Access_97::___ReferencePtr ___Reference/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Access_97::___Reference*)___Reference /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  ___Reference
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0002E17E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_Collection(Access_97::IVbaReferencesPtr* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collection"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Access_97::IVbaReferences**)retval /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::IVbaReferencesPtr __fastcall
___ReferenceDispT<T>::get_Collection(void)
{
  Access_97::IVbaReferencesPtr retval;
  this->get_Collection((Access_97::IVbaReferencesPtr*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_VBA(LPDISPATCH* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBA"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
___ReferenceDispT<T>::get_VBA(void)
{
  LPDISPATCH retval;
  this->get_VBA((LPDISPATCH*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
___ReferenceDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_Guid(BSTR* pbstrGuid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Guid"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrGuid /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
___ReferenceDispT<T>::get_Guid(void)
{
  BSTR pbstrGuid;
  this->get_Guid((BSTR*)&pbstrGuid);
  return pbstrGuid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_Major(long* pMajor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Major"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMajor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
___ReferenceDispT<T>::get_Major(void)
{
  long pMajor;
  this->get_Major((long*)&pMajor);
  return pMajor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_Minor(long* pMinor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Minor"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pMinor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
___ReferenceDispT<T>::get_Minor(void)
{
  long pMinor;
  this->get_Minor((long*)&pMinor);
  return pMinor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_Location(BSTR* pbstrLocation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Location"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrLocation /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
___ReferenceDispT<T>::get_Location(void)
{
  BSTR pbstrLocation;
  this->get_Location((BSTR*)&pbstrLocation);
  return pbstrLocation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_IsDefault(TOLEBOOL* pfIsDefault/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDefault"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsDefault /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
___ReferenceDispT<T>::get_IsDefault(void)
{
  TOLEBOOL pfIsDefault;
  this->get_IsDefault((TOLEBOOL*)&pfIsDefault);
  return pfIsDefault;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_IsBroken(TOLEBOOL* pfIsBroken/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsBroken"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsBroken /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> TOLEBOOL __fastcall
___ReferenceDispT<T>::get_IsBroken(void)
{
  TOLEBOOL pfIsBroken;
  this->get_IsBroken((TOLEBOOL*)&pfIsBroken);
  return pfIsBroken;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_Kind(Access_97::___RefKind* pKind/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Kind"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pKind /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Access_97::___RefKind __fastcall
___ReferenceDispT<T>::get_Kind(void)
{
  Access_97::___RefKind pKind;
  this->get_Kind((Access_97::___RefKind*)&pKind);
  return pKind;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
___ReferenceDispT<T>::get_Description(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
___ReferenceDispT<T>::get_Description(void)
{
  BSTR pbstrName;
  this->get_Description((BSTR*)&pbstrName);
  return pbstrName;
}

// *********************************************************************//
// DispIntf:  ___IVbaExtReferencesEvents
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {CDDE3804-2064-11CF-867F-00AA005FF34A}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
___IVbaExtReferencesEventsDispT<T>::ItemAdded(Access_97::___ReferencePtr ___Reference)
{
  _TDispID _dispid(/* ItemAdded */ DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Access_97::___Reference*)___Reference /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
___IVbaExtReferencesEventsDispT<T>::ItemRemoved(Access_97::___ReferencePtr ___Reference)
{
  _TDispID _dispid(/* ItemRemoved */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Access_97::___Reference*)___Reference /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DoCmd
// Interface: TCOMIDoCmd
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDoCmd, IDoCmd, &CLSID_DoCmd, &IID_IDoCmd> CoDoCmd;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AccessHyperlink
// Interface: TCOM_Hyperlink
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Hyperlink, _Hyperlink, &CLSID_AccessHyperlink, &IID__Hyperlink> CoAccessHyperlink;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AccessForm
// Interface: TCOM_Form
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Form, _Form, &CLSID_AccessForm, &IID__Form> CoAccessForm;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AccessReport
// Interface: TCOM_Report
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Report, _Report, &CLSID_AccessReport, &IID__Report> CoAccessReport;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AccessApplication
// Interface: TCOM_Application
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Application, _Application, &CLSID_AccessApplication, &IID__Application> CoAccessApplication;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : AccessReferences
// Interface: TCOM_References
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_References, _References, &CLSID_AccessReferences, &IID__References> CoAccessReferences;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Class
// Interface: TCOM_Dummy
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Dummy, _Dummy, &CLSID_Class, &IID__Dummy> CoClass;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ___CodeModule
// Interface: TCOM___IVbaModule
// *********************************************************************//
typedef TCoClassCreatorT<TCOM___IVbaModule, ___IVbaModule, &CLSID____CodeModule, &IID____IVbaModule> Co___CodeModule;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ___Editors
// Interface: TCOM___IVbaEditors
// *********************************************************************//
typedef TCoClassCreatorT<TCOM___IVbaEditors, ___IVbaEditors, &CLSID____Editors, &IID____IVbaEditors> Co___Editors;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ___Editor
// Interface: TCOM___IVbaEditor
// *********************************************************************//
typedef TCoClassCreatorT<TCOM___IVbaEditor, ___IVbaEditor, &CLSID____Editor, &IID____IVbaEditor> Co___Editor;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ___References
// Interface: TCOMIVbaReferences
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIVbaReferences, IVbaReferences, &CLSID____References, &IID_IVbaReferences> Co___References;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Access_97

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Access_97;
#endif

#pragma option pop

#endif // __Access_97_h__
