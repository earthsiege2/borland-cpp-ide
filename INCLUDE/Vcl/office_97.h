// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.21  $
// File generated on 1/28/2002 7:56:10 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Microsoft Office\office97\Office\MSO97.DLL (2)
// LIBID: {2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}
// LCID: 0
// Helpfile: C:\Program Files\Microsoft Office\office97\Office\vbaoff8.hlp
// HelpString: Microsoft Office 8.0 Object Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
// Parent TypeLibrary:
//   (0) v1.2 Excel, (c:\program files\microsoft office\office\excel8.olb)
// ************************************************************************ //
#ifndef   Office_97H
#define   Office_97H

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Office_97
{

// *********************************************************************//
// HelpString: Microsoft Office 8.0 Object Library
// Version:    2.0
// *********************************************************************//

/*   **********************************************************

  Type Library Options: 
  Generate C++ Import file
  Expose namespace with 'using'.
  Generate files for dependant type libraries
  Map HRESULT to safecall on dual interfaces
  Place warnings in imported files
  Generate IDE registration for component wrappers
  Generate dispinterfaces
  Generate CoClassCreator wrappers
  Generate C++Builder 4.0 event wrappers for servers
  Generate VCL component wrappers for servers
  Ignore [PreDefined] flag
  Ignore Standard Type Libraries
  Show Debug Output
  Place comments in imported files
   ******************************************************** */

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_Office;
extern __declspec (package) const GUID GUID_MsoLineDashStyle;
extern __declspec (package) const GUID GUID_MsoLineStyle;
extern __declspec (package) const GUID GUID_MsoArrowheadStyle;
extern __declspec (package) const GUID GUID_MsoArrowheadWidth;
extern __declspec (package) const GUID GUID_MsoArrowheadLength;
extern __declspec (package) const GUID GUID_MsoFillType;
extern __declspec (package) const GUID GUID_MsoGradientStyle;
extern __declspec (package) const GUID GUID_MsoGradientColorType;
extern __declspec (package) const GUID GUID_MsoTextureType;
extern __declspec (package) const GUID GUID_MsoPresetTexture;
extern __declspec (package) const GUID GUID_MsoPatternType;
extern __declspec (package) const GUID GUID_MsoPresetGradientType;
extern __declspec (package) const GUID GUID_MsoShadowType;
extern __declspec (package) const GUID GUID_MsoPresetTextEffect;
extern __declspec (package) const GUID GUID_MsoPresetTextEffectShape;
extern __declspec (package) const GUID GUID_MsoTextEffectAlignment;
extern __declspec (package) const GUID GUID_MsoPresetLightingDirection;
extern __declspec (package) const GUID GUID_MsoPresetLightingSoftness;
extern __declspec (package) const GUID GUID_MsoPresetMaterial;
extern __declspec (package) const GUID GUID_MsoPresetExtrusionDirection;
extern __declspec (package) const GUID GUID_MsoPresetThreeDFormat;
extern __declspec (package) const GUID GUID_MsoExtrusionColorType;
extern __declspec (package) const GUID GUID_MsoAlignCmd;
extern __declspec (package) const GUID GUID_MsoDistributeCmd;
extern __declspec (package) const GUID GUID_MsoConnectorType;
extern __declspec (package) const GUID GUID_MsoHorizontalAnchor;
extern __declspec (package) const GUID GUID_MsoVerticalAnchor;
extern __declspec (package) const GUID GUID_MsoOrientation;
extern __declspec (package) const GUID GUID_MsoZOrderCmd;
extern __declspec (package) const GUID GUID_MsoSegmentType;
extern __declspec (package) const GUID GUID_MsoEditingType;
extern __declspec (package) const GUID GUID_MsoAutoShapeType;
extern __declspec (package) const GUID GUID_MsoShapeType;
extern __declspec (package) const GUID GUID_MsoFlipCmd;
extern __declspec (package) const GUID GUID_MsoTriState;
extern __declspec (package) const GUID GUID_MsoColorType;
extern __declspec (package) const GUID GUID_MsoPictureColorType;
extern __declspec (package) const GUID GUID_MsoCalloutAngleType;
extern __declspec (package) const GUID GUID_MsoCalloutDropType;
extern __declspec (package) const GUID GUID_MsoCalloutType;
extern __declspec (package) const GUID GUID_MsoBlackWhiteMode;
extern __declspec (package) const GUID GUID_MsoMixedType;
extern __declspec (package) const GUID GUID_MsoTextOrientation;
extern __declspec (package) const GUID GUID_MsoScaleFrom;
extern __declspec (package) const GUID GUID_MsoRGBType;
extern __declspec (package) const GUID GUID_MsoBarPosition;
extern __declspec (package) const GUID GUID_MsoBarProtection;
extern __declspec (package) const GUID GUID_MsoBarType;
extern __declspec (package) const GUID GUID_MsoControlType;
extern __declspec (package) const GUID GUID_MsoButtonState;
extern __declspec (package) const GUID GUID_MsoControlOLEUsage;
extern __declspec (package) const GUID GUID_MsoButtonStyle;
extern __declspec (package) const GUID GUID_MsoComboStyle;
extern __declspec (package) const GUID GUID_MsoOLEMenuGroup;
extern __declspec (package) const GUID GUID_MsoMenuAnimation;
extern __declspec (package) const GUID GUID_MsoBarRow;
extern __declspec (package) const GUID GUID_MsoHyperlinkType;
extern __declspec (package) const GUID GUID_MsoExtraInfoMethod;
extern __declspec (package) const GUID GUID_MsoAnimationType;
extern __declspec (package) const GUID GUID_MsoButtonSetType;
extern __declspec (package) const GUID GUID_MsoIconType;
extern __declspec (package) const GUID GUID_MsoBalloonType;
extern __declspec (package) const GUID GUID_MsoModeType;
extern __declspec (package) const GUID GUID_MsoBalloonErrorType;
extern __declspec (package) const GUID GUID_MsoWizardActType;
extern __declspec (package) const GUID GUID_MsoWizardMsgType;
extern __declspec (package) const GUID GUID_MsoBalloonButtonType;
extern __declspec (package) const GUID GUID_DocProperties;
extern __declspec (package) const GUID GUID_MsoDocProperties;
extern __declspec (package) const GUID IID_IAccessible;
extern __declspec (package) const GUID IID__IMsoDispObj;
extern __declspec (package) const GUID IID__IMsoOleAccDispObj;
extern __declspec (package) const GUID IID_CommandBars;
extern __declspec (package) const GUID IID_CommandBar;
extern __declspec (package) const GUID IID_CommandBarControls;
extern __declspec (package) const GUID IID_CommandBarControl;
extern __declspec (package) const GUID IID_CommandBarButton;
extern __declspec (package) const GUID IID_CommandBarPopup;
extern __declspec (package) const GUID IID_CommandBarComboBox;
extern __declspec (package) const GUID IID_Adjustments;
extern __declspec (package) const GUID IID_CalloutFormat;
extern __declspec (package) const GUID IID_ColorFormat;
extern __declspec (package) const GUID IID_ConnectorFormat;
extern __declspec (package) const GUID IID_FillFormat;
extern __declspec (package) const GUID IID_FreeformBuilder;
extern __declspec (package) const GUID IID_GroupShapes;
extern __declspec (package) const GUID IID_LineFormat;
extern __declspec (package) const GUID IID_ShapeNode;
extern __declspec (package) const GUID IID_ShapeNodes;
extern __declspec (package) const GUID IID_PictureFormat;
extern __declspec (package) const GUID IID_ShadowFormat;
extern __declspec (package) const GUID IID_Shape;
extern __declspec (package) const GUID IID_ShapeRange;
extern __declspec (package) const GUID IID_Shapes;
extern __declspec (package) const GUID IID_TextEffectFormat;
extern __declspec (package) const GUID IID_TextFrame;
extern __declspec (package) const GUID IID_ThreeDFormat;
extern __declspec (package) const GUID IID_Assistant;
extern __declspec (package) const GUID IID_Balloon;
extern __declspec (package) const GUID IID_BalloonCheckboxes;
extern __declspec (package) const GUID IID_BalloonCheckbox;
extern __declspec (package) const GUID IID_BalloonLabels;
extern __declspec (package) const GUID IID_BalloonLabel;
extern __declspec (package) const GUID IID_DocumentProperty;
extern __declspec (package) const GUID IID_DocumentProperties;
extern __declspec (package) const GUID GUID_MsoFileFindOptions;
extern __declspec (package) const GUID GUID_MsoFileFindView;
extern __declspec (package) const GUID GUID_MsoFileFindSortBy;
extern __declspec (package) const GUID GUID_MsoFileFindListBy;
extern __declspec (package) const GUID IID_IFoundFiles;
extern __declspec (package) const GUID IID_IFind;
extern __declspec (package) const GUID GUID_MsoLastModified;
extern __declspec (package) const GUID GUID_MsoSortBy;
extern __declspec (package) const GUID GUID_MsoSortOrder;
extern __declspec (package) const GUID GUID_MsoConnector;
extern __declspec (package) const GUID GUID_MsoCondition;
extern __declspec (package) const GUID GUID_MsoFileType;
extern __declspec (package) const GUID IID_FoundFiles;
extern __declspec (package) const GUID IID_PropertyTest;
extern __declspec (package) const GUID IID_PropertyTests;
extern __declspec (package) const GUID IID_FileSearch;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      MsoLineDashStyle;
enum      MsoLineStyle;
enum      MsoArrowheadStyle;
enum      MsoArrowheadWidth;
enum      MsoArrowheadLength;
enum      MsoFillType;
enum      MsoGradientStyle;
enum      MsoGradientColorType;
enum      MsoTextureType;
enum      MsoPresetTexture;
enum      MsoPatternType;
enum      MsoPresetGradientType;
enum      MsoShadowType;
enum      MsoPresetTextEffect;
enum      MsoPresetTextEffectShape;
enum      MsoTextEffectAlignment;
enum      MsoPresetLightingDirection;
enum      MsoPresetLightingSoftness;
enum      MsoPresetMaterial;
enum      MsoPresetExtrusionDirection;
enum      MsoPresetThreeDFormat;
enum      MsoExtrusionColorType;
enum      MsoAlignCmd;
enum      MsoDistributeCmd;
enum      MsoConnectorType;
enum      MsoHorizontalAnchor;
enum      MsoVerticalAnchor;
enum      MsoOrientation;
enum      MsoZOrderCmd;
enum      MsoSegmentType;
enum      MsoEditingType;
enum      MsoAutoShapeType;
enum      MsoShapeType;
enum      MsoFlipCmd;
enum      MsoTriState;
enum      MsoColorType;
enum      MsoPictureColorType;
enum      MsoCalloutAngleType;
enum      MsoCalloutDropType;
enum      MsoCalloutType;
enum      MsoBlackWhiteMode;
enum      MsoMixedType;
enum      MsoTextOrientation;
enum      MsoScaleFrom;
enum      MsoBarPosition;
enum      MsoBarProtection;
enum      MsoBarType;
enum      MsoControlType;
enum      MsoButtonState;
enum      MsoControlOLEUsage;
enum      MsoButtonStyle;
enum      MsoComboStyle;
enum      MsoOLEMenuGroup;
enum      MsoMenuAnimation;
enum      MsoBarRow;
enum      MsoHyperlinkType;
enum      MsoExtraInfoMethod;
enum      MsoAnimationType;
enum      MsoButtonSetType;
enum      MsoIconType;
enum      MsoBalloonType;
enum      MsoModeType;
enum      MsoBalloonErrorType;
enum      MsoWizardActType;
enum      MsoWizardMsgType;
enum      MsoBalloonButtonType;
enum      DocProperties;
enum      MsoDocProperties;
enum      MsoFileFindOptions;
enum      MsoFileFindView;
enum      MsoFileFindSortBy;
enum      MsoFileFindListBy;
enum      MsoLastModified;
enum      MsoSortBy;
enum      MsoSortOrder;
enum      MsoConnector;
enum      MsoCondition;
enum      MsoFileType;
interface DECLSPEC_UUID("{618736E0-3C3D-11CF-810C-00AA00389B71}") IAccessible;
typedef TComInterface<IAccessible, &IID_IAccessible> IAccessiblePtr;

interface DECLSPEC_UUID("{000C0300-0000-0000-C000-000000000046}") _IMsoDispObj;
typedef TComInterface<_IMsoDispObj, &IID__IMsoDispObj> _IMsoDispObjPtr;

interface DECLSPEC_UUID("{000C0301-0000-0000-C000-000000000046}") _IMsoOleAccDispObj;
typedef TComInterface<_IMsoOleAccDispObj, &IID__IMsoOleAccDispObj> _IMsoOleAccDispObjPtr;

interface DECLSPEC_UUID("{000C0302-0000-0000-C000-000000000046}") CommandBars;
typedef TComInterface<CommandBars, &IID_CommandBars> CommandBarsPtr;

interface DECLSPEC_UUID("{000C0304-0000-0000-C000-000000000046}") CommandBar;
typedef TComInterface<CommandBar, &IID_CommandBar> CommandBarPtr;

interface DECLSPEC_UUID("{000C0306-0000-0000-C000-000000000046}") CommandBarControls;
typedef TComInterface<CommandBarControls, &IID_CommandBarControls> CommandBarControlsPtr;

interface DECLSPEC_UUID("{000C0308-0000-0000-C000-000000000046}") CommandBarControl;
typedef TComInterface<CommandBarControl, &IID_CommandBarControl> CommandBarControlPtr;

interface DECLSPEC_UUID("{000C030E-0000-0000-C000-000000000046}") CommandBarButton;
typedef TComInterface<CommandBarButton, &IID_CommandBarButton> CommandBarButtonPtr;

interface DECLSPEC_UUID("{000C030A-0000-0000-C000-000000000046}") CommandBarPopup;
typedef TComInterface<CommandBarPopup, &IID_CommandBarPopup> CommandBarPopupPtr;

interface DECLSPEC_UUID("{000C030C-0000-0000-C000-000000000046}") CommandBarComboBox;
typedef TComInterface<CommandBarComboBox, &IID_CommandBarComboBox> CommandBarComboBoxPtr;

interface DECLSPEC_UUID("{000C0310-0000-0000-C000-000000000046}") Adjustments;
typedef TComInterface<Adjustments, &IID_Adjustments> AdjustmentsPtr;

interface DECLSPEC_UUID("{000C0311-0000-0000-C000-000000000046}") CalloutFormat;
typedef TComInterface<CalloutFormat, &IID_CalloutFormat> CalloutFormatPtr;

interface DECLSPEC_UUID("{000C0312-0000-0000-C000-000000000046}") ColorFormat;
typedef TComInterface<ColorFormat, &IID_ColorFormat> ColorFormatPtr;

interface DECLSPEC_UUID("{000C0313-0000-0000-C000-000000000046}") ConnectorFormat;
typedef TComInterface<ConnectorFormat, &IID_ConnectorFormat> ConnectorFormatPtr;

interface DECLSPEC_UUID("{000C0314-0000-0000-C000-000000000046}") FillFormat;
typedef TComInterface<FillFormat, &IID_FillFormat> FillFormatPtr;

interface DECLSPEC_UUID("{000C0315-0000-0000-C000-000000000046}") FreeformBuilder;
typedef TComInterface<FreeformBuilder, &IID_FreeformBuilder> FreeformBuilderPtr;

interface DECLSPEC_UUID("{000C0316-0000-0000-C000-000000000046}") GroupShapes;
typedef TComInterface<GroupShapes, &IID_GroupShapes> GroupShapesPtr;

interface DECLSPEC_UUID("{000C0317-0000-0000-C000-000000000046}") LineFormat;
typedef TComInterface<LineFormat, &IID_LineFormat> LineFormatPtr;

interface DECLSPEC_UUID("{000C0318-0000-0000-C000-000000000046}") ShapeNode;
typedef TComInterface<ShapeNode, &IID_ShapeNode> ShapeNodePtr;

interface DECLSPEC_UUID("{000C0319-0000-0000-C000-000000000046}") ShapeNodes;
typedef TComInterface<ShapeNodes, &IID_ShapeNodes> ShapeNodesPtr;

interface DECLSPEC_UUID("{000C031A-0000-0000-C000-000000000046}") PictureFormat;
typedef TComInterface<PictureFormat, &IID_PictureFormat> PictureFormatPtr;

interface DECLSPEC_UUID("{000C031B-0000-0000-C000-000000000046}") ShadowFormat;
typedef TComInterface<ShadowFormat, &IID_ShadowFormat> ShadowFormatPtr;

interface DECLSPEC_UUID("{000C031C-0000-0000-C000-000000000046}") Shape;
typedef TComInterface<Shape, &IID_Shape> ShapePtr;

interface DECLSPEC_UUID("{000C031D-0000-0000-C000-000000000046}") ShapeRange;
typedef TComInterface<ShapeRange, &IID_ShapeRange> ShapeRangePtr;

interface DECLSPEC_UUID("{000C031E-0000-0000-C000-000000000046}") Shapes;
typedef TComInterface<Shapes, &IID_Shapes> ShapesPtr;

interface DECLSPEC_UUID("{000C031F-0000-0000-C000-000000000046}") TextEffectFormat;
typedef TComInterface<TextEffectFormat, &IID_TextEffectFormat> TextEffectFormatPtr;

interface DECLSPEC_UUID("{000C0320-0000-0000-C000-000000000046}") TextFrame;
typedef TComInterface<TextFrame, &IID_TextFrame> TextFramePtr;

interface DECLSPEC_UUID("{000C0321-0000-0000-C000-000000000046}") ThreeDFormat;
typedef TComInterface<ThreeDFormat, &IID_ThreeDFormat> ThreeDFormatPtr;

interface DECLSPEC_UUID("{000C0322-0000-0000-C000-000000000046}") Assistant;
typedef TComInterface<Assistant, &IID_Assistant> AssistantPtr;

interface DECLSPEC_UUID("{000C0324-0000-0000-C000-000000000046}") Balloon;
typedef TComInterface<Balloon, &IID_Balloon> BalloonPtr;

interface DECLSPEC_UUID("{000C0326-0000-0000-C000-000000000046}") BalloonCheckboxes;
typedef TComInterface<BalloonCheckboxes, &IID_BalloonCheckboxes> BalloonCheckboxesPtr;

interface DECLSPEC_UUID("{000C0328-0000-0000-C000-000000000046}") BalloonCheckbox;
typedef TComInterface<BalloonCheckbox, &IID_BalloonCheckbox> BalloonCheckboxPtr;

interface DECLSPEC_UUID("{000C032E-0000-0000-C000-000000000046}") BalloonLabels;
typedef TComInterface<BalloonLabels, &IID_BalloonLabels> BalloonLabelsPtr;

interface DECLSPEC_UUID("{000C0330-0000-0000-C000-000000000046}") BalloonLabel;
typedef TComInterface<BalloonLabel, &IID_BalloonLabel> BalloonLabelPtr;

interface DECLSPEC_UUID("{2DF8D04E-5BFA-101B-BDE5-00AA0044DE52}") DocumentProperty;
typedef TComInterface<DocumentProperty, &IID_DocumentProperty> DocumentPropertyPtr;

interface DECLSPEC_UUID("{2DF8D04D-5BFA-101B-BDE5-00AA0044DE52}") DocumentProperties;
typedef TComInterface<DocumentProperties, &IID_DocumentProperties> DocumentPropertiesPtr;

interface DECLSPEC_UUID("{000C0338-0000-0000-C000-000000000046}") IFoundFiles;
typedef TComInterface<IFoundFiles, &IID_IFoundFiles> IFoundFilesPtr;

interface DECLSPEC_UUID("{000C0337-0000-0000-C000-000000000046}") IFind;
typedef TComInterface<IFind, &IID_IFind> IFindPtr;

interface DECLSPEC_UUID("{000C0331-0000-0000-C000-000000000046}") FoundFiles;
typedef TComInterface<FoundFiles, &IID_FoundFiles> FoundFilesPtr;

interface DECLSPEC_UUID("{000C0333-0000-0000-C000-000000000046}") PropertyTest;
typedef TComInterface<PropertyTest, &IID_PropertyTest> PropertyTestPtr;

interface DECLSPEC_UUID("{000C0334-0000-0000-C000-000000000046}") PropertyTests;
typedef TComInterface<PropertyTests, &IID_PropertyTests> PropertyTestsPtr;

interface DECLSPEC_UUID("{000C0332-0000-0000-C000-000000000046}") FileSearch;
typedef TComInterface<FileSearch, &IID_FileSearch> FileSearchPtr;


// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef long MsoRGBType;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum MsoLineDashStyle
{
  msoLineDashStyleMixed = 0xFFFFFFFE, 
  msoLineSolid = 1, 
  msoLineSquareDot = 2, 
  msoLineRoundDot = 3, 
  msoLineDash = 4, 
  msoLineDashDot = 5, 
  msoLineDashDotDot = 6, 
  msoLineLongDash = 7, 
  msoLineLongDashDot = 8
} MsoLineDashStyle;

typedef enum MsoLineStyle
{
  msoLineStyleMixed = 0xFFFFFFFE, 
  msoLineSingle = 1, 
  msoLineThinThin = 2, 
  msoLineThinThick = 3, 
  msoLineThickThin = 4, 
  msoLineThickBetweenThin = 5
} MsoLineStyle;

typedef enum MsoArrowheadStyle
{
  msoArrowheadStyleMixed = 0xFFFFFFFE, 
  msoArrowheadNone = 1, 
  msoArrowheadTriangle = 2, 
  msoArrowheadOpen = 3, 
  msoArrowheadStealth = 4, 
  msoArrowheadDiamond = 5, 
  msoArrowheadOval = 6
} MsoArrowheadStyle;

typedef enum MsoArrowheadWidth
{
  msoArrowheadWidthMixed = 0xFFFFFFFE, 
  msoArrowheadNarrow = 1, 
  msoArrowheadWidthMedium = 2, 
  msoArrowheadWide = 3
} MsoArrowheadWidth;

typedef enum MsoArrowheadLength
{
  msoArrowheadLengthMixed = 0xFFFFFFFE, 
  msoArrowheadShort = 1, 
  msoArrowheadLengthMedium = 2, 
  msoArrowheadLong = 3
} MsoArrowheadLength;

typedef enum MsoFillType
{
  msoFillMixed = 0xFFFFFFFE, 
  msoFillSolid = 1, 
  msoFillPatterned = 2, 
  msoFillGradient = 3, 
  msoFillTextured = 4, 
  msoFillBackground = 5, 
  msoFillPicture = 6
} MsoFillType;

typedef enum MsoGradientStyle
{
  msoGradientMixed = 0xFFFFFFFE, 
  msoGradientHorizontal = 1, 
  msoGradientVertical = 2, 
  msoGradientDiagonalUp = 3, 
  msoGradientDiagonalDown = 4, 
  msoGradientFromCorner = 5, 
  msoGradientFromTitle = 6, 
  msoGradientFromCenter = 7
} MsoGradientStyle;

typedef enum MsoGradientColorType
{
  msoGradientColorMixed = 0xFFFFFFFE, 
  msoGradientOneColor = 1, 
  msoGradientTwoColors = 2, 
  msoGradientPresetColors = 3
} MsoGradientColorType;

typedef enum MsoTextureType
{
  msoTextureTypeMixed = 0xFFFFFFFE, 
  msoTexturePreset = 1, 
  msoTextureUserDefined = 2
} MsoTextureType;

typedef enum MsoPresetTexture
{
  msoPresetTextureMixed = 0xFFFFFFFE, 
  msoTexturePapyrus = 1, 
  msoTextureCanvas = 2, 
  msoTextureDenim = 3, 
  msoTextureWovenMat = 4, 
  msoTextureWaterDroplets = 5, 
  msoTexturePaperBag = 6, 
  msoTextureFishFossil = 7, 
  msoTextureSand = 8, 
  msoTextureGreenMarble = 9, 
  msoTextureWhiteMarble = 10, 
  msoTextureBrownMarble = 11, 
  msoTextureGranite = 12, 
  msoTextureNewsprint = 13, 
  msoTextureRecycledPaper = 14, 
  msoTextureParchment = 15, 
  msoTextureStationery = 16, 
  msoTextureBlueTissuePaper = 17, 
  msoTexturePinkTissuePaper = 18, 
  msoTexturePurpleMesh = 19, 
  msoTextureBouquet = 20, 
  msoTextureCork = 21, 
  msoTextureWalnut = 22, 
  msoTextureOak = 23, 
  msoTextureMediumWood = 24
} MsoPresetTexture;

typedef enum MsoPatternType
{
  msoPatternMixed = 0xFFFFFFFE, 
  msoPattern5Percent = 1, 
  msoPattern10Percent = 2, 
  msoPattern20Percent = 3, 
  msoPattern25Percent = 4, 
  msoPattern30Percent = 5, 
  msoPattern40Percent = 6, 
  msoPattern50Percent = 7, 
  msoPattern60Percent = 8, 
  msoPattern70Percent = 9, 
  msoPattern75Percent = 10, 
  msoPattern80Percent = 11, 
  msoPattern90Percent = 12, 
  msoPatternDarkHorizontal = 13, 
  msoPatternDarkVertical = 14, 
  msoPatternDarkDownwardDiagonal = 15, 
  msoPatternDarkUpwardDiagonal = 16, 
  msoPatternSmallCheckerBoard = 17, 
  msoPatternTrellis = 18, 
  msoPatternLightHorizontal = 19, 
  msoPatternLightVertical = 20, 
  msoPatternLightDownwardDiagonal = 21, 
  msoPatternLightUpwardDiagonal = 22, 
  msoPatternSmallGrid = 23, 
  msoPatternDottedDiamond = 24, 
  msoPatternWideDownwardDiagonal = 25, 
  msoPatternWideUpwardDiagonal = 26, 
  msoPatternDashedUpwardDiagonal = 27, 
  msoPatternDashedDownwardDiagonal = 28, 
  msoPatternNarrowVertical = 29, 
  msoPatternNarrowHorizontal = 30, 
  msoPatternDashedVertical = 31, 
  msoPatternDashedHorizontal = 32, 
  msoPatternLargeConfetti = 33, 
  msoPatternLargeGrid = 34, 
  msoPatternHorizontalBrick = 35, 
  msoPatternLargeCheckerBoard = 36, 
  msoPatternSmallConfetti = 37, 
  msoPatternZigZag = 38, 
  msoPatternSolidDiamond = 39, 
  msoPatternDiagonalBrick = 40, 
  msoPatternOutlinedDiamond = 41, 
  msoPatternPlaid = 42, 
  msoPatternSphere = 43, 
  msoPatternWeave = 44, 
  msoPatternDottedGrid = 45, 
  msoPatternDivot = 46, 
  msoPatternShingle = 47, 
  msoPatternWave = 48
} MsoPatternType;

typedef enum MsoPresetGradientType
{
  msoPresetGradientMixed = 0xFFFFFFFE, 
  msoGradientEarlySunset = 1, 
  msoGradientLateSunset = 2, 
  msoGradientNightfall = 3, 
  msoGradientDaybreak = 4, 
  msoGradientHorizon = 5, 
  msoGradientDesert = 6, 
  msoGradientOcean = 7, 
  msoGradientCalmWater = 8, 
  msoGradientFire = 9, 
  msoGradientFog = 10, 
  msoGradientMoss = 11, 
  msoGradientPeacock = 12, 
  msoGradientWheat = 13, 
  msoGradientParchment = 14, 
  msoGradientMahogany = 15, 
  msoGradientRainbow = 16, 
  msoGradientRainbowII = 17, 
  msoGradientGold = 18, 
  msoGradientGoldII = 19, 
  msoGradientBrass = 20, 
  msoGradientChrome = 21, 
  msoGradientChromeII = 22, 
  msoGradientSilver = 23, 
  msoGradientSapphire = 24
} MsoPresetGradientType;

typedef enum MsoShadowType
{
  msoShadowMixed = 0xFFFFFFFE, 
  msoShadow1 = 1, 
  msoShadow2 = 2, 
  msoShadow3 = 3, 
  msoShadow4 = 4, 
  msoShadow5 = 5, 
  msoShadow6 = 6, 
  msoShadow7 = 7, 
  msoShadow8 = 8, 
  msoShadow9 = 9, 
  msoShadow10 = 10, 
  msoShadow11 = 11, 
  msoShadow12 = 12, 
  msoShadow13 = 13, 
  msoShadow14 = 14, 
  msoShadow15 = 15, 
  msoShadow16 = 16, 
  msoShadow17 = 17, 
  msoShadow18 = 18, 
  msoShadow19 = 19, 
  msoShadow20 = 20
} MsoShadowType;

typedef enum MsoPresetTextEffect
{
  msoTextEffectMixed = 0xFFFFFFFE, 
  msoTextEffect1 = 0, 
  msoTextEffect2 = 1, 
  msoTextEffect3 = 2, 
  msoTextEffect4 = 3, 
  msoTextEffect5 = 4, 
  msoTextEffect6 = 5, 
  msoTextEffect7 = 6, 
  msoTextEffect8 = 7, 
  msoTextEffect9 = 8, 
  msoTextEffect10 = 9, 
  msoTextEffect11 = 10, 
  msoTextEffect12 = 11, 
  msoTextEffect13 = 12, 
  msoTextEffect14 = 13, 
  msoTextEffect15 = 14, 
  msoTextEffect16 = 15, 
  msoTextEffect17 = 16, 
  msoTextEffect18 = 17, 
  msoTextEffect19 = 18, 
  msoTextEffect20 = 19, 
  msoTextEffect21 = 20, 
  msoTextEffect22 = 21, 
  msoTextEffect23 = 22, 
  msoTextEffect24 = 23, 
  msoTextEffect25 = 24, 
  msoTextEffect26 = 25, 
  msoTextEffect27 = 26, 
  msoTextEffect28 = 27, 
  msoTextEffect29 = 28, 
  msoTextEffect30 = 29
} MsoPresetTextEffect;

typedef enum MsoPresetTextEffectShape
{
  msoTextEffectShapeMixed = 0xFFFFFFFE, 
  msoTextEffectShapePlainText = 1, 
  msoTextEffectShapeStop = 2, 
  msoTextEffectShapeTriangleUp = 3, 
  msoTextEffectShapeTriangleDown = 4, 
  msoTextEffectShapeChevronUp = 5, 
  msoTextEffectShapeChevronDown = 6, 
  msoTextEffectShapeRingInside = 7, 
  msoTextEffectShapeRingOutside = 8, 
  msoTextEffectShapeArchUpCurve = 9, 
  msoTextEffectShapeArchDownCurve = 10, 
  msoTextEffectShapeCircleCurve = 11, 
  msoTextEffectShapeButtonCurve = 12, 
  msoTextEffectShapeArchUpPour = 13, 
  msoTextEffectShapeArchDownPour = 14, 
  msoTextEffectShapeCirclePour = 15, 
  msoTextEffectShapeButtonPour = 16, 
  msoTextEffectShapeCurveUp = 17, 
  msoTextEffectShapeCurveDown = 18, 
  msoTextEffectShapeCanUp = 19, 
  msoTextEffectShapeCanDown = 20, 
  msoTextEffectShapeWave1 = 21, 
  msoTextEffectShapeWave2 = 22, 
  msoTextEffectShapeDoubleWave1 = 23, 
  msoTextEffectShapeDoubleWave2 = 24, 
  msoTextEffectShapeInflate = 25, 
  msoTextEffectShapeDeflate = 26, 
  msoTextEffectShapeInflateBottom = 27, 
  msoTextEffectShapeDeflateBottom = 28, 
  msoTextEffectShapeInflateTop = 29, 
  msoTextEffectShapeDeflateTop = 30, 
  msoTextEffectShapeDeflateInflate = 31, 
  msoTextEffectShapeDeflateInflateDeflate = 32, 
  msoTextEffectShapeFadeRight = 33, 
  msoTextEffectShapeFadeLeft = 34, 
  msoTextEffectShapeFadeUp = 35, 
  msoTextEffectShapeFadeDown = 36, 
  msoTextEffectShapeSlantUp = 37, 
  msoTextEffectShapeSlantDown = 38, 
  msoTextEffectShapeCascadeUp = 39, 
  msoTextEffectShapeCascadeDown = 40
} MsoPresetTextEffectShape;

typedef enum MsoTextEffectAlignment
{
  msoTextEffectAlignmentMixed = 0xFFFFFFFE, 
  msoTextEffectAlignmentLeft = 1, 
  msoTextEffectAlignmentCentered = 2, 
  msoTextEffectAlignmentRight = 3, 
  msoTextEffectAlignmentLetterJustify = 4, 
  msoTextEffectAlignmentWordJustify = 5, 
  msoTextEffectAlignmentStretchJustify = 6
} MsoTextEffectAlignment;

typedef enum MsoPresetLightingDirection
{
  msoPresetLightingDirectionMixed = 0xFFFFFFFE, 
  msoLightingTopLeft = 1, 
  msoLightingTop = 2, 
  msoLightingTopRight = 3, 
  msoLightingLeft = 4, 
  msoLightingNone = 5, 
  msoLightingRight = 6, 
  msoLightingBottomLeft = 7, 
  msoLightingBottom = 8, 
  msoLightingBottomRight = 9
} MsoPresetLightingDirection;

typedef enum MsoPresetLightingSoftness
{
  msoPresetLightingSoftnessMixed = 0xFFFFFFFE, 
  msoLightingDim = 1, 
  msoLightingNormal = 2, 
  msoLightingBright = 3
} MsoPresetLightingSoftness;

typedef enum MsoPresetMaterial
{
  msoPresetMaterialMixed = 0xFFFFFFFE, 
  msoMaterialMatte = 1, 
  msoMaterialPlastic = 2, 
  msoMaterialMetal = 3, 
  msoMaterialWireFrame = 4
} MsoPresetMaterial;

typedef enum MsoPresetExtrusionDirection
{
  msoPresetExtrusionDirectionMixed = 0xFFFFFFFE, 
  msoExtrusionBottomRight = 1, 
  msoExtrusionBottom = 2, 
  msoExtrusionBottomLeft = 3, 
  msoExtrusionRight = 4, 
  msoExtrusionNone = 5, 
  msoExtrusionLeft = 6, 
  msoExtrusionTopRight = 7, 
  msoExtrusionTop = 8, 
  msoExtrusionTopLeft = 9
} MsoPresetExtrusionDirection;

typedef enum MsoPresetThreeDFormat
{
  msoPresetThreeDFormatMixed = 0xFFFFFFFE, 
  msoThreeD1 = 1, 
  msoThreeD2 = 2, 
  msoThreeD3 = 3, 
  msoThreeD4 = 4, 
  msoThreeD5 = 5, 
  msoThreeD6 = 6, 
  msoThreeD7 = 7, 
  msoThreeD8 = 8, 
  msoThreeD9 = 9, 
  msoThreeD10 = 10, 
  msoThreeD11 = 11, 
  msoThreeD12 = 12, 
  msoThreeD13 = 13, 
  msoThreeD14 = 14, 
  msoThreeD15 = 15, 
  msoThreeD16 = 16, 
  msoThreeD17 = 17, 
  msoThreeD18 = 18, 
  msoThreeD19 = 19, 
  msoThreeD20 = 20
} MsoPresetThreeDFormat;

typedef enum MsoExtrusionColorType
{
  msoExtrusionColorTypeMixed = 0xFFFFFFFE, 
  msoExtrusionColorAutomatic = 1, 
  msoExtrusionColorCustom = 2
} MsoExtrusionColorType;

typedef enum MsoAlignCmd
{
  msoAlignLefts = 0, 
  msoAlignCenters = 1, 
  msoAlignRights = 2, 
  msoAlignTops = 3, 
  msoAlignMiddles = 4, 
  msoAlignBottoms = 5
} MsoAlignCmd;

typedef enum MsoDistributeCmd
{
  msoDistributeHorizontally = 0, 
  msoDistributeVertically = 1
} MsoDistributeCmd;

typedef enum MsoConnectorType
{
  msoConnectorTypeMixed = 0xFFFFFFFE, 
  msoConnectorStraight = 1, 
  msoConnectorElbow = 2, 
  msoConnectorCurve = 3
} MsoConnectorType;

typedef enum MsoHorizontalAnchor
{
  msoHorizontalAnchorMixed = 0xFFFFFFFE, 
  msoAnchorNone = 1, 
  msoAnchorCenter = 2
} MsoHorizontalAnchor;

typedef enum MsoVerticalAnchor
{
  msoVerticalAnchorMixed = 0xFFFFFFFE, 
  msoAnchorTop = 1, 
  msoAnchorTopBaseline = 2, 
  msoAnchorMiddle = 3, 
  msoAnchorBottom = 4, 
  msoAnchorBottomBaseLine = 5
} MsoVerticalAnchor;

typedef enum MsoOrientation
{
  msoOrientationMixed = 0xFFFFFFFE, 
  msoOrientationHorizontal = 1, 
  msoOrientationVertical = 2
} MsoOrientation;

typedef enum MsoZOrderCmd
{
  msoBringToFront = 0, 
  msoSendToBack = 1, 
  msoBringForward = 2, 
  msoSendBackward = 3, 
  msoBringInFrontOfText = 4, 
  msoSendBehindText = 5
} MsoZOrderCmd;

typedef enum MsoSegmentType
{
  msoSegmentLine = 0, 
  msoSegmentCurve = 1
} MsoSegmentType;

typedef enum MsoEditingType
{
  msoEditingAuto = 0, 
  msoEditingCorner = 1, 
  msoEditingSmooth = 2, 
  msoEditingSymmetric = 3
} MsoEditingType;

typedef enum MsoAutoShapeType
{
  msoShapeMixed = 0xFFFFFFFE, 
  msoShapeRectangle = 1, 
  msoShapeParallelogram = 2, 
  msoShapeTrapezoid = 3, 
  msoShapeDiamond = 4, 
  msoShapeRoundedRectangle = 5, 
  msoShapeOctagon = 6, 
  msoShapeIsoscelesTriangle = 7, 
  msoShapeRightTriangle = 8, 
  msoShapeOval = 9, 
  msoShapeHexagon = 10, 
  msoShapeCross = 11, 
  msoShapeRegularPentagon = 12, 
  msoShapeCan = 13, 
  msoShapeCube = 14, 
  msoShapeBevel = 15, 
  msoShapeFoldedCorner = 16, 
  msoShapeSmileyFace = 17, 
  msoShapeDonut = 18, 
  msoShapeNoSymbol = 19, 
  msoShapeBlockArc = 20, 
  msoShapeHeart = 21, 
  msoShapeLightningBolt = 22, 
  msoShapeSun = 23, 
  msoShapeMoon = 24, 
  msoShapeArc = 25, 
  msoShapeDoubleBracket = 26, 
  msoShapeDoubleBrace = 27, 
  msoShapePlaque = 28, 
  msoShapeLeftBracket = 29, 
  msoShapeRightBracket = 30, 
  msoShapeLeftBrace = 31, 
  msoShapeRightBrace = 32, 
  msoShapeRightArrow = 33, 
  msoShapeLeftArrow = 34, 
  msoShapeUpArrow = 35, 
  msoShapeDownArrow = 36, 
  msoShapeLeftRightArrow = 37, 
  msoShapeUpDownArrow = 38, 
  msoShapeQuadArrow = 39, 
  msoShapeLeftRightUpArrow = 40, 
  msoShapeBentArrow = 41, 
  msoShapeUTurnArrow = 42, 
  msoShapeLeftUpArrow = 43, 
  msoShapeBentUpArrow = 44, 
  msoShapeCurvedRightArrow = 45, 
  msoShapeCurvedLeftArrow = 46, 
  msoShapeCurvedUpArrow = 47, 
  msoShapeCurvedDownArrow = 48, 
  msoShapeStripedRightArrow = 49, 
  msoShapeNotchedRightArrow = 50, 
  msoShapePentagon = 51, 
  msoShapeChevron = 52, 
  msoShapeRightArrowCallout = 53, 
  msoShapeLeftArrowCallout = 54, 
  msoShapeUpArrowCallout = 55, 
  msoShapeDownArrowCallout = 56, 
  msoShapeLeftRightArrowCallout = 57, 
  msoShapeUpDownArrowCallout = 58, 
  msoShapeQuadArrowCallout = 59, 
  msoShapeCircularArrow = 60, 
  msoShapeFlowchartProcess = 61, 
  msoShapeFlowchartAlternateProcess = 62, 
  msoShapeFlowchartDecision = 63, 
  msoShapeFlowchartData = 64, 
  msoShapeFlowchartPredefinedProcess = 65, 
  msoShapeFlowchartInternalStorage = 66, 
  msoShapeFlowchartDocument = 67, 
  msoShapeFlowchartMultidocument = 68, 
  msoShapeFlowchartTerminator = 69, 
  msoShapeFlowchartPreparation = 70, 
  msoShapeFlowchartManualInput = 71, 
  msoShapeFlowchartManualOperation = 72, 
  msoShapeFlowchartConnector = 73, 
  msoShapeFlowchartOffpageConnector = 74, 
  msoShapeFlowchartCard = 75, 
  msoShapeFlowchartPunchedTape = 76, 
  msoShapeFlowchartSummingJunction = 77, 
  msoShapeFlowchartOr = 78, 
  msoShapeFlowchartCollate = 79, 
  msoShapeFlowchartSort = 80, 
  msoShapeFlowchartExtract = 81, 
  msoShapeFlowchartMerge = 82, 
  msoShapeFlowchartStoredData = 83, 
  msoShapeFlowchartDelay = 84, 
  msoShapeFlowchartSequentialAccessStorage = 85, 
  msoShapeFlowchartMagneticDisk = 86, 
  msoShapeFlowchartDirectAccessStorage = 87, 
  msoShapeFlowchartDisplay = 88, 
  msoShapeExplosion1 = 89, 
  msoShapeExplosion2 = 90, 
  msoShape4pointStar = 91, 
  msoShape5pointStar = 92, 
  msoShape8pointStar = 93, 
  msoShape16pointStar = 94, 
  msoShape24pointStar = 95, 
  msoShape32pointStar = 96, 
  msoShapeUpRibbon = 97, 
  msoShapeDownRibbon = 98, 
  msoShapeCurvedUpRibbon = 99, 
  msoShapeCurvedDownRibbon = 100, 
  msoShapeVerticalScroll = 101, 
  msoShapeHorizontalScroll = 102, 
  msoShapeWave = 103, 
  msoShapeDoubleWave = 104, 
  msoShapeRectangularCallout = 105, 
  msoShapeRoundedRectangularCallout = 106, 
  msoShapeOvalCallout = 107, 
  msoShapeCloudCallout = 108, 
  msoShapeLineCallout1 = 109, 
  msoShapeLineCallout2 = 110, 
  msoShapeLineCallout3 = 111, 
  msoShapeLineCallout4 = 112, 
  msoShapeLineCallout1AccentBar = 113, 
  msoShapeLineCallout2AccentBar = 114, 
  msoShapeLineCallout3AccentBar = 115, 
  msoShapeLineCallout4AccentBar = 116, 
  msoShapeLineCallout1NoBorder = 117, 
  msoShapeLineCallout2NoBorder = 118, 
  msoShapeLineCallout3NoBorder = 119, 
  msoShapeLineCallout4NoBorder = 120, 
  msoShapeLineCallout1BorderandAccentBar = 121, 
  msoShapeLineCallout2BorderandAccentBar = 122, 
  msoShapeLineCallout3BorderandAccentBar = 123, 
  msoShapeLineCallout4BorderandAccentBar = 124, 
  msoShapeActionButtonCustom = 125, 
  msoShapeActionButtonHome = 126, 
  msoShapeActionButtonHelp = 127, 
  msoShapeActionButtonInformation = 128, 
  msoShapeActionButtonBackorPrevious = 129, 
  msoShapeActionButtonForwardorNext = 130, 
  msoShapeActionButtonBeginning = 131, 
  msoShapeActionButtonEnd = 132, 
  msoShapeActionButtonReturn = 133, 
  msoShapeActionButtonDocument = 134, 
  msoShapeActionButtonSound = 135, 
  msoShapeActionButtonMovie = 136, 
  msoShapeBalloon = 137, 
  msoShapeNotPrimitive = 138
} MsoAutoShapeType;

typedef enum MsoShapeType
{
  msoShapeTypeMixed = 0xFFFFFFFE, 
  msoAutoShape = 1, 
  msoCallout = 2, 
  msoChart = 3, 
  msoComment = 4, 
  msoFreeform = 5, 
  msoGroup = 6, 
  msoEmbeddedOLEObject = 7, 
  msoFormControl = 8, 
  msoLine = 9, 
  msoLinkedOLEObject = 10, 
  msoLinkedPicture = 11, 
  msoOLEControlObject = 12, 
  msoPicture = 13, 
  msoPlaceholder = 14, 
  msoTextEffect = 15, 
  msoMedia = 16, 
  msoTextBox = 17
} MsoShapeType;

typedef enum MsoFlipCmd
{
  msoFlipHorizontal = 0, 
  msoFlipVertical = 1
} MsoFlipCmd;

typedef enum MsoTriState
{
  msoTrue = 0xFFFFFFFF, 
  msoFalse = 0, 
  msoCTrue = 1, 
  msoTriStateToggle = 0xFFFFFFFD, 
  msoTriStateMixed = 0xFFFFFFFE
} MsoTriState;

typedef enum MsoColorType
{
  msoColorTypeMixed = 0xFFFFFFFE, 
  msoColorTypeRGB = 1, 
  msoColorTypeScheme = 2
} MsoColorType;

typedef enum MsoPictureColorType
{
  msoPictureMixed = 0xFFFFFFFE, 
  msoPictureAutomatic = 1, 
  msoPictureGrayscale = 2, 
  msoPictureBlackAndWhite = 3, 
  msoPictureWatermark = 4
} MsoPictureColorType;

typedef enum MsoCalloutAngleType
{
  msoCalloutAngleMixed = 0xFFFFFFFE, 
  msoCalloutAngleAutomatic = 1, 
  msoCalloutAngle30 = 2, 
  msoCalloutAngle45 = 3, 
  msoCalloutAngle60 = 4, 
  msoCalloutAngle90 = 5
} MsoCalloutAngleType;

typedef enum MsoCalloutDropType
{
  msoCalloutDropMixed = 0xFFFFFFFE, 
  msoCalloutDropCustom = 1, 
  msoCalloutDropTop = 2, 
  msoCalloutDropCenter = 3, 
  msoCalloutDropBottom = 4
} MsoCalloutDropType;

typedef enum MsoCalloutType
{
  msoCalloutMixed = 0xFFFFFFFE, 
  msoCalloutOne = 1, 
  msoCalloutTwo = 2, 
  msoCalloutThree = 3, 
  msoCalloutFour = 4
} MsoCalloutType;

typedef enum MsoBlackWhiteMode
{
  msoBlackWhiteMixed = 0xFFFFFFFE, 
  msoBlackWhiteAutomatic = 1, 
  msoBlackWhiteGrayScale = 2, 
  msoBlackWhiteLightGrayScale = 3, 
  msoBlackWhiteInverseGrayScale = 4, 
  msoBlackWhiteGrayOutline = 5, 
  msoBlackWhiteBlackTextAndLine = 6, 
  msoBlackWhiteHighContrast = 7, 
  msoBlackWhiteBlack = 8, 
  msoBlackWhiteWhite = 9, 
  msoBlackWhiteDontShow = 10
} MsoBlackWhiteMode;

typedef enum MsoMixedType
{
  msoIntegerMixed = 32768, 
  msoSingleMixed = 0x80000000
} MsoMixedType;

typedef enum MsoTextOrientation
{
  msoTextOrientationMixed = 0xFFFFFFFE, 
  msoTextOrientationHorizontal = 1, 
  msoTextOrientationUpward = 2, 
  msoTextOrientationDownward = 3, 
  msoTextOrientationVerticalFarEast = 4, 
  msoTextOrientationVertical = 5, 
  msoTextOrientationHorizontalRotatedFarEast = 6
} MsoTextOrientation;

typedef enum MsoScaleFrom
{
  msoScaleFromTopLeft = 0, 
  msoScaleFromMiddle = 1, 
  msoScaleFromBottomRight = 2
} MsoScaleFrom;

typedef enum MsoBarPosition
{
  msoBarLeft = 0, 
  msoBarTop = 1, 
  msoBarRight = 2, 
  msoBarBottom = 3, 
  msoBarFloating = 4, 
  msoBarPopup = 5, 
  msoBarMenuBar = 6
} MsoBarPosition;

typedef enum MsoBarProtection
{
  msoBarNoProtection = 0, 
  msoBarNoCustomize = 1, 
  msoBarNoResize = 2, 
  msoBarNoMove = 4, 
  msoBarNoChangeVisible = 8, 
  msoBarNoChangeDock = 16, 
  msoBarNoVerticalDock = 32, 
  msoBarNoHorizontalDock = 64
} MsoBarProtection;

typedef enum MsoBarType
{
  msoBarTypeNormal = 0, 
  msoBarTypeMenuBar = 1, 
  msoBarTypePopup = 2
} MsoBarType;

typedef enum MsoControlType
{
  msoControlCustom = 0, 
  msoControlButton = 1, 
  msoControlEdit = 2, 
  msoControlDropdown = 3, 
  msoControlComboBox = 4, 
  msoControlButtonDropdown = 5, 
  msoControlSplitDropdown = 6, 
  msoControlOCXDropdown = 7, 
  msoControlGenericDropdown = 8, 
  msoControlGraphicDropdown = 9, 
  msoControlPopup = 10, 
  msoControlGraphicPopup = 11, 
  msoControlButtonPopup = 12, 
  msoControlSplitButtonPopup = 13, 
  msoControlSplitButtonMRUPopup = 14, 
  msoControlLabel = 15, 
  msoControlExpandingGrid = 16, 
  msoControlSplitExpandingGrid = 17, 
  msoControlGrid = 18, 
  msoControlGauge = 19, 
  msoControlGraphicCombo = 20
} MsoControlType;

typedef enum MsoButtonState
{
  msoButtonUp = 0, 
  msoButtonDown = 0xFFFFFFFF, 
  msoButtonMixed = 2
} MsoButtonState;

typedef enum MsoControlOLEUsage
{
  msoControlOLEUsageNeither = 0, 
  msoControlOLEUsageServer = 1, 
  msoControlOLEUsageClient = 2, 
  msoControlOLEUsageBoth = 3
} MsoControlOLEUsage;

typedef enum MsoButtonStyle
{
  msoButtonAutomatic = 0, 
  msoButtonIcon = 1, 
  msoButtonCaption = 2, 
  msoButtonIconAndCaption = 3
} MsoButtonStyle;

typedef enum MsoComboStyle
{
  msoComboNormal = 0, 
  msoComboLabel = 1
} MsoComboStyle;

typedef enum MsoOLEMenuGroup
{
  msoOLEMenuGroupNone = 0xFFFFFFFF, 
  msoOLEMenuGroupFile = 0, 
  msoOLEMenuGroupEdit = 1, 
  msoOLEMenuGroupContainer = 2, 
  msoOLEMenuGroupObject = 3, 
  msoOLEMenuGroupWindow = 4, 
  msoOLEMenuGroupHelp = 5
} MsoOLEMenuGroup;

typedef enum MsoMenuAnimation
{
  msoMenuAnimationNone = 0, 
  msoMenuAnimationRandom = 1, 
  msoMenuAnimationUnfold = 2, 
  msoMenuAnimationSlide = 3
} MsoMenuAnimation;

typedef enum MsoBarRow
{
  msoBarRowFirst = 0, 
  msoBarRowLast = 0xFFFFFFFF
} MsoBarRow;

typedef enum MsoHyperlinkType
{
  msoHyperlinkRange = 0, 
  msoHyperlinkShape = 1, 
  msoHyperlinkInlineShape = 2
} MsoHyperlinkType;

typedef enum MsoExtraInfoMethod
{
  msoMethodGet = 0, 
  msoMethodPost = 1
} MsoExtraInfoMethod;

typedef enum MsoAnimationType
{
  msoAnimationIdle = 1, 
  msoAnimationGreeting = 2, 
  msoAnimationGoodbye = 3, 
  msoAnimationBeginSpeaking = 4, 
  msoAnimationCharacterSuccessMajor = 6, 
  msoAnimationGetAttentionMajor = 11, 
  msoAnimationGetAttentionMinor = 12, 
  msoAnimationSearching = 13, 
  msoAnimationPrinting = 18, 
  msoAnimationGestureRight = 19, 
  msoAnimationWritingNotingSomething = 22, 
  msoAnimationWorkingAtSomething = 23, 
  msoAnimationThinking = 24, 
  msoAnimationSendingMail = 25, 
  msoAnimationListensToComputer = 26, 
  msoAnimationDisappear = 31, 
  msoAnimationAppear = 32, 
  msoAnimationGetArtsy = 100, 
  msoAnimationGetTechy = 101, 
  msoAnimationGetWizardy = 102, 
  msoAnimationCheckingSomething = 103, 
  msoAnimationLookDown = 104, 
  msoAnimationLookDownLeft = 105, 
  msoAnimationLookDownRight = 106, 
  msoAnimationLookLeft = 107, 
  msoAnimationLookRight = 108, 
  msoAnimationLookUp = 109, 
  msoAnimationLookUpLeft = 110, 
  msoAnimationLookUpRight = 111, 
  msoAnimationSaving = 112, 
  msoAnimationGestureDown = 113, 
  msoAnimationGestureLeft = 114, 
  msoAnimationGestureUp = 115, 
  msoAnimationEmptyTrash = 116
} MsoAnimationType;

typedef enum MsoButtonSetType
{
  msoButtonSetNone = 0, 
  msoButtonSetOK = 1, 
  msoButtonSetCancel = 2, 
  msoButtonSetOkCancel = 3, 
  msoButtonSetYesNo = 4, 
  msoButtonSetYesNoCancel = 5, 
  msoButtonSetBackClose = 6, 
  msoButtonSetNextClose = 7, 
  msoButtonSetBackNextClose = 8, 
  msoButtonSetRetryCancel = 9, 
  msoButtonSetAbortRetryIgnore = 10, 
  msoButtonSetSearchClose = 11, 
  msoButtonSetBackNextSnooze = 12, 
  msoButtonSetTipsOptionsClose = 13, 
  msoButtonSetYesAllNoCancel = 14
} MsoButtonSetType;

typedef enum MsoIconType
{
  msoIconNone = 0, 
  msoIconAlert = 2, 
  msoIconTip = 3
} MsoIconType;

typedef enum MsoBalloonType
{
  msoBalloonTypeButtons = 0, 
  msoBalloonTypeBullets = 1, 
  msoBalloonTypeNumbers = 2
} MsoBalloonType;

typedef enum MsoModeType
{
  msoModeModal = 0, 
  msoModeAutoDown = 1, 
  msoModeModeless = 2
} MsoModeType;

typedef enum MsoBalloonErrorType
{
  msoBalloonErrorNone = 0, 
  msoBalloonErrorOther = 1, 
  msoBalloonErrorTooBig = 2, 
  msoBalloonErrorOutOfMemory = 3, 
  msoBalloonErrorBadPictureRef = 4, 
  msoBalloonErrorBadReference = 5, 
  msoBalloonErrorButtonlessModal = 6, 
  msoBalloonErrorButtonModeless = 7, 
  msoBalloonErrorBadCharacter = 8
} MsoBalloonErrorType;

typedef enum MsoWizardActType
{
  msoWizardActInactive = 0, 
  msoWizardActActive = 1, 
  msoWizardActSuspend = 2, 
  msoWizardActResume = 3
} MsoWizardActType;

typedef enum MsoWizardMsgType
{
  msoWizardMsgLocalStateOn = 1, 
  msoWizardMsgLocalStateOff = 2, 
  msoWizardMsgShowHelp = 3, 
  msoWizardMsgSuspending = 4, 
  msoWizardMsgResuming = 5
} MsoWizardMsgType;

typedef enum MsoBalloonButtonType
{
  msoBalloonButtonYesToAll = 0xFFFFFFF1, 
  msoBalloonButtonOptions = 0xFFFFFFF2, 
  msoBalloonButtonTips = 0xFFFFFFF3, 
  msoBalloonButtonClose = 0xFFFFFFF4, 
  msoBalloonButtonSnooze = 0xFFFFFFF5, 
  msoBalloonButtonSearch = 0xFFFFFFF6, 
  msoBalloonButtonIgnore = 0xFFFFFFF7, 
  msoBalloonButtonAbort = 0xFFFFFFF8, 
  msoBalloonButtonRetry = 0xFFFFFFF9, 
  msoBalloonButtonNext = 0xFFFFFFFA, 
  msoBalloonButtonBack = 0xFFFFFFFB, 
  msoBalloonButtonNo = 0xFFFFFFFC, 
  msoBalloonButtonYes = 0xFFFFFFFD, 
  msoBalloonButtonCancel = 0xFFFFFFFE, 
  msoBalloonButtonOK = 0xFFFFFFFF, 
  msoBalloonButtonNull = 0
} MsoBalloonButtonType;

typedef enum DocProperties
{
  offPropertyTypeNumber = 1, 
  offPropertyTypeBoolean = 2, 
  offPropertyTypeDate = 3, 
  offPropertyTypeString = 4, 
  offPropertyTypeFloat = 5
} DocProperties;

typedef enum MsoDocProperties
{
  msoPropertyTypeNumber = 1, 
  msoPropertyTypeBoolean = 2, 
  msoPropertyTypeDate = 3, 
  msoPropertyTypeString = 4, 
  msoPropertyTypeFloat = 5
} MsoDocProperties;

typedef enum MsoFileFindOptions
{
  msoOptionsNew = 1, 
  msoOptionsAdd = 2, 
  msoOptionsWithin = 3
} MsoFileFindOptions;

typedef enum MsoFileFindView
{
  msoViewFileInfo = 1, 
  msoViewPreview = 2, 
  msoViewSummaryInfo = 3
} MsoFileFindView;

typedef enum MsoFileFindSortBy
{
  msoFileFindSortbyAuthor = 1, 
  msoFileFindSortbyDateCreated = 2, 
  msoFileFindSortbyLastSavedBy = 3, 
  msoFileFindSortbyDateSaved = 4, 
  msoFileFindSortbyFileName = 5, 
  msoFileFindSortbySize = 6, 
  msoFileFindSortbyTitle = 7
} MsoFileFindSortBy;

typedef enum MsoFileFindListBy
{
  msoListbyName = 1, 
  msoListbyTitle = 2
} MsoFileFindListBy;

typedef enum MsoLastModified
{
  msoLastModifiedYesterday = 1, 
  msoLastModifiedToday = 2, 
  msoLastModifiedLastWeek = 3, 
  msoLastModifiedThisWeek = 4, 
  msoLastModifiedLastMonth = 5, 
  msoLastModifiedThisMonth = 6, 
  msoLastModifiedAnyTime = 7
} MsoLastModified;

typedef enum MsoSortBy
{
  msoSortByFileName = 1, 
  msoSortBySize = 2, 
  msoSortByFileType = 3, 
  msoSortByLastModified = 4
} MsoSortBy;

typedef enum MsoSortOrder
{
  msoSortOrderAscending = 1, 
  msoSortOrderDescending = 2
} MsoSortOrder;

typedef enum MsoConnector
{
  msoConnectorAnd = 1, 
  msoConnectorOr = 2
} MsoConnector;

typedef enum MsoCondition
{
  msoConditionFileTypeAllFiles = 1, 
  msoConditionFileTypeOfficeFiles = 2, 
  msoConditionFileTypeWordDocuments = 3, 
  msoConditionFileTypeExcelWorkbooks = 4, 
  msoConditionFileTypePowerPointPresentations = 5, 
  msoConditionFileTypeBinders = 6, 
  msoConditionFileTypeDatabases = 7, 
  msoConditionFileTypeTemplates = 8, 
  msoConditionIncludes = 9, 
  msoConditionIncludesPhrase = 10, 
  msoConditionBeginsWith = 11, 
  msoConditionEndsWith = 12, 
  msoConditionIncludesNearEachOther = 13, 
  msoConditionIsExactly = 14, 
  msoConditionIsNot = 15, 
  msoConditionYesterday = 16, 
  msoConditionToday = 17, 
  msoConditionTomorrow = 18, 
  msoConditionLastWeek = 19, 
  msoConditionThisWeek = 20, 
  msoConditionNextWeek = 21, 
  msoConditionLastMonth = 22, 
  msoConditionThisMonth = 23, 
  msoConditionNextMonth = 24, 
  msoConditionAnytime = 25, 
  msoConditionAnytimeBetween = 26, 
  msoConditionOn = 27, 
  msoConditionOnOrAfter = 28, 
  msoConditionOnOrBefore = 29, 
  msoConditionInTheNext = 30, 
  msoConditionInTheLast = 31, 
  msoConditionEquals = 32, 
  msoConditionDoesNotEqual = 33, 
  msoConditionAnyNumberBetween = 34, 
  msoConditionAtMost = 35, 
  msoConditionAtLeast = 36, 
  msoConditionMoreThan = 37, 
  msoConditionLessThan = 38, 
  msoConditionIsYes = 39, 
  msoConditionIsNo = 40
} MsoCondition;

typedef enum MsoFileType
{
  msoFileTypeAllFiles = 1, 
  msoFileTypeOfficeFiles = 2, 
  msoFileTypeWordDocuments = 3, 
  msoFileTypeExcelWorkbooks = 4, 
  msoFileTypePowerPointPresentations = 5, 
  msoFileTypeBinders = 6, 
  msoFileTypeDatabases = 7, 
  msoFileTypeTemplates = 8
} MsoFileType;

// *********************************************************************//
// Interface: IAccessible
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {618736E0-3C3D-11CF-810C-00AA00389B71}
// *********************************************************************//
interface IAccessible  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/) = 0; // [-5000]
  virtual HRESULT STDMETHODCALLTYPE get_accChildCount(long* pcountChildren/*[out,retval]*/) = 0; // [-5001]
  virtual HRESULT STDMETHODCALLTYPE get_accChild(VARIANT varChild/*[in]*/, 
                                                 LPDISPATCH* ppdispChild/*[out,retval]*/) = 0; // [-5002]
  virtual HRESULT STDMETHODCALLTYPE get_accName(VARIANT varChild/*[in,opt]*/, 
                                                BSTR* pszName/*[out,retval]*/) = 0; // [-5003]
  virtual HRESULT STDMETHODCALLTYPE get_accValue(VARIANT varChild/*[in,opt]*/, 
                                                 BSTR* pszValue/*[out,retval]*/) = 0; // [-5004]
  virtual HRESULT STDMETHODCALLTYPE get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                                       BSTR* pszDescription/*[out,retval]*/) = 0; // [-5005]
  virtual HRESULT STDMETHODCALLTYPE get_accRole(VARIANT varChild/*[in,opt]*/, 
                                                VARIANT* pvarRole/*[out,retval]*/) = 0; // [-5006]
  virtual HRESULT STDMETHODCALLTYPE get_accState(VARIANT varChild/*[in,opt]*/, 
                                                 VARIANT* pvarState/*[out,retval]*/) = 0; // [-5007]
  virtual HRESULT STDMETHODCALLTYPE get_accHelp(VARIANT varChild/*[in,opt]*/, 
                                                BSTR* pszHelp/*[out,retval]*/) = 0; // [-5008]
  virtual HRESULT STDMETHODCALLTYPE get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                     VARIANT varChild/*[in,opt]*/, 
                                                     long* pidTopic/*[out,retval]*/) = 0; // [-5009]
  virtual HRESULT STDMETHODCALLTYPE get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                            BSTR* pszKeyboardShortcut/*[out,retval]*/) = 0; // [-5010]
  virtual HRESULT STDMETHODCALLTYPE get_accFocus(VARIANT* pvarChild/*[out,retval]*/) = 0; // [-5011]
  virtual HRESULT STDMETHODCALLTYPE get_accSelection(VARIANT* pvarChildren/*[out,retval]*/) = 0; // [-5012]
  virtual HRESULT STDMETHODCALLTYPE get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                         BSTR* pszDefaultAction/*[out,retval]*/) = 0; // [-5013]
  virtual HRESULT STDMETHODCALLTYPE accSelect(long flagsSelect/*[in]*/, 
                                              VARIANT varChild/*[in,opt]*/= TNoParam()) = 0; // [-5014]
  virtual HRESULT STDMETHODCALLTYPE accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                                VARIANT varChild/*[in,opt]*/= TNoParam()) = 0; // [-5015]
  virtual HRESULT STDMETHODCALLTYPE accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                                VARIANT* pvarEndUpAt/*[out,retval]*/) = 0; // [-5016]
  virtual HRESULT STDMETHODCALLTYPE accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                               VARIANT* pvarChild/*[out,retval]*/) = 0; // [-5017]
  virtual HRESULT STDMETHODCALLTYPE accDoDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam()) = 0; // [-5018]
  virtual HRESULT STDMETHODCALLTYPE set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/) = 0; // [-5003]
  virtual HRESULT STDMETHODCALLTYPE set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/) = 0; // [-5004]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_accParent(void)
  {
    LPDISPATCH ppdispParent;
    OLECHECK(this->get_accParent((LPDISPATCH*)&ppdispParent));
    return ppdispParent;
  }

  long __fastcall get_accChildCount(void)
  {
    long pcountChildren;
    OLECHECK(this->get_accChildCount((long*)&pcountChildren));
    return pcountChildren;
  }

  LPDISPATCH __fastcall get_accChild(VARIANT varChild/*[in]*/)
  {
    LPDISPATCH ppdispChild;
    OLECHECK(this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild));
    return ppdispChild;
  }

  BSTR __fastcall get_accName(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszName = 0;
    OLECHECK(this->get_accName(varChild, (BSTR*)&pszName));
    return pszName;
  }

  BSTR __fastcall get_accValue(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszValue = 0;
    OLECHECK(this->get_accValue(varChild, (BSTR*)&pszValue));
    return pszValue;
  }

  BSTR __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszDescription = 0;
    OLECHECK(this->get_accDescription(varChild, (BSTR*)&pszDescription));
    return pszDescription;
  }

  VARIANT __fastcall get_accRole(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    VARIANT pvarRole;
    OLECHECK(this->get_accRole(varChild, (VARIANT*)&pvarRole));
    return pvarRole;
  }

  VARIANT __fastcall get_accState(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    VARIANT pvarState;
    OLECHECK(this->get_accState(varChild, (VARIANT*)&pvarState));
    return pvarState;
  }

  BSTR __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszHelp = 0;
    OLECHECK(this->get_accHelp(varChild, (BSTR*)&pszHelp));
    return pszHelp;
  }

  long __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                   VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    long pidTopic;
    OLECHECK(this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic));
    return pidTopic;
  }

  BSTR __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszKeyboardShortcut = 0;
    OLECHECK(this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut));
    return pszKeyboardShortcut;
  }

  VARIANT __fastcall get_accFocus(void)
  {
    VARIANT pvarChild;
    OLECHECK(this->get_accFocus((VARIANT*)&pvarChild));
    return pvarChild;
  }

  VARIANT __fastcall get_accSelection(void)
  {
    VARIANT pvarChildren;
    OLECHECK(this->get_accSelection((VARIANT*)&pvarChildren));
    return pvarChildren;
  }

  BSTR __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam())
  {
    BSTR pszDefaultAction = 0;
    OLECHECK(this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction));
    return pszDefaultAction;
  }

  VARIANT __fastcall accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/= TNoParam())
  {
    VARIANT pvarEndUpAt;
    OLECHECK(this->accNavigate(navDir, varStart, (VARIANT*)&pvarEndUpAt));
    return pvarEndUpAt;
  }

  VARIANT __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
  {
    VARIANT pvarChild;
    OLECHECK(this->accHitTest(xLeft, yTop, (VARIANT*)&pvarChild));
    return pvarChild;
  }


  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IMsoDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0300-0000-0000-C000-000000000046}
// *********************************************************************//
interface _IMsoDispObj  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IMsoOleAccDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0301-0000-0000-C000-000000000046}
// *********************************************************************//
interface _IMsoOleAccDispObj  : public Office_97::IAccessible
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Application(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Application((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  long __fastcall get_Creator(void)
  {
    long plCreator;
    OLECHECK(this->get_Creator((long*)&plCreator));
    return plCreator;
  }


  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBars
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0302-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBars  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActionControl(Office_97::CommandBarControl** ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveMenuBar(Office_97::CommandBar** ppcb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT Name/*[in,opt]*/, VARIANT Position/*[in,opt]*/, 
                                        VARIANT MenuBar/*[in,opt]*/, VARIANT Temporary/*[in,opt]*/, 
                                        Office_97::CommandBar** ppcb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pcToolbars/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayTooltips(VARIANT_BOOL* pvarfDisplayTooltips/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayTooltips(VARIANT_BOOL pvarfDisplayTooltips/*[in]*/) = 0; // [1610809348]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayKeysInTooltips(VARIANT_BOOL* pvarfDisplayKeys/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayKeysInTooltips(VARIANT_BOOL pvarfDisplayKeys/*[in]*/) = 0; // [1610809350]
  virtual HRESULT STDMETHODCALLTYPE FindControl(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/, 
                                                VARIANT Tag/*[in,opt]*/, VARIANT Visible/*[in,opt]*/, 
                                                Office_97::CommandBarControl** ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Office_97::CommandBar** ppcb/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_LargeButtons(VARIANT_BOOL* pvarfLargeButtons/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_LargeButtons(VARIANT_BOOL pvarfLargeButtons/*[in]*/) = 0; // [1610809354]
  virtual HRESULT STDMETHODCALLTYPE get_MenuAnimationStyle(Office_97::MsoMenuAnimation* pma/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_MenuAnimationStyle(Office_97::MsoMenuAnimation pma/*[in]*/) = 0; // [1610809356]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ReleaseFocus(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_97::CommandBarControl* __fastcall get_ActionControl(void)
  {
    Office_97::CommandBarControl* ppcbc;
    OLECHECK(this->get_ActionControl((Office_97::CommandBarControl**)&ppcbc));
    return ppcbc;
  }

  Office_97::CommandBar* __fastcall get_ActiveMenuBar(void)
  {
    Office_97::CommandBar* ppcb;
    OLECHECK(this->get_ActiveMenuBar((Office_97::CommandBar**)&ppcb));
    return ppcb;
  }

  Office_97::CommandBar* __fastcall Add(VARIANT Name/*[in,opt]*/= TNoParam(), 
                                        VARIANT Position/*[in,opt]*/= TNoParam(), 
                                        VARIANT MenuBar/*[in,opt]*/= TNoParam(), 
                                        VARIANT Temporary/*[in,opt]*/= TNoParam())
  {
    Office_97::CommandBar* ppcb;
    OLECHECK(this->Add(Name, Position, MenuBar, Temporary, (Office_97::CommandBar**)&ppcb));
    return ppcb;
  }

  int __fastcall get_Count(void)
  {
    int pcToolbars;
    OLECHECK(this->get_Count((int*)&pcToolbars));
    return pcToolbars;
  }

  VARIANT_BOOL __fastcall get_DisplayTooltips(void)
  {
    VARIANT_BOOL pvarfDisplayTooltips;
    OLECHECK(this->get_DisplayTooltips((VARIANT_BOOL*)&pvarfDisplayTooltips));
    return pvarfDisplayTooltips;
  }

  VARIANT_BOOL __fastcall get_DisplayKeysInTooltips(void)
  {
    VARIANT_BOOL pvarfDisplayKeys;
    OLECHECK(this->get_DisplayKeysInTooltips((VARIANT_BOOL*)&pvarfDisplayKeys));
    return pvarfDisplayKeys;
  }

  Office_97::CommandBarControl* __fastcall FindControl(VARIANT Type/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Id/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Tag/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Visible/*[in,opt]*/= TNoParam())
  {
    Office_97::CommandBarControl* ppcbc;
    OLECHECK(this->FindControl(Type, Id, Tag, Visible, (Office_97::CommandBarControl**)&ppcbc));
    return ppcbc;
  }

  Office_97::CommandBar* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Office_97::CommandBar* ppcb;
    OLECHECK(this->get_Item(Index, (Office_97::CommandBar**)&ppcb));
    return ppcb;
  }

  VARIANT_BOOL __fastcall get_LargeButtons(void)
  {
    VARIANT_BOOL pvarfLargeButtons;
    OLECHECK(this->get_LargeButtons((VARIANT_BOOL*)&pvarfLargeButtons));
    return pvarfLargeButtons;
  }

  Office_97::MsoMenuAnimation __fastcall get_MenuAnimationStyle(void)
  {
    Office_97::MsoMenuAnimation pma;
    OLECHECK(this->get_MenuAnimationStyle((Office_97::MsoMenuAnimation*)&pma));
    return pma;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }


  __property   Office_97::CommandBarControl* ActionControl = {read = get_ActionControl};
  __property   Office_97::CommandBar* ActiveMenuBar = {read = get_ActiveMenuBar};
  __property   int             Count = {read = get_Count};
  __property   VARIANT_BOOL    DisplayTooltips = {read = get_DisplayTooltips, write = set_DisplayTooltips};
  __property   VARIANT_BOOL    DisplayKeysInTooltips = {read = get_DisplayKeysInTooltips, write = set_DisplayKeysInTooltips};
  __property   VARIANT_BOOL    LargeButtons = {read = get_LargeButtons, write = set_LargeButtons};
  __property   Office_97::MsoMenuAnimation MenuAnimationStyle = {read = get_MenuAnimationStyle, write = set_MenuAnimationStyle};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0304-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBar  : public Office_97::_IMsoOleAccDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Context(BSTR* pbstrContext/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Context(BSTR pbstrContext/*[in]*/) = 0; // [1610874881]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Office_97::CommandBarControls** ppcbcs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/) = 0; // [1610874885]
  virtual HRESULT STDMETHODCALLTYPE FindControl(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/, 
                                                VARIANT Tag/*[in,opt]*/, VARIANT Visible/*[in,opt]*/, 
                                                VARIANT Recursive/*[in,opt]*/, 
                                                Office_97::CommandBarControl** ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(int* pdy/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Height(int pdy/*[in]*/) = 0; // [1610874888]
  virtual HRESULT STDMETHODCALLTYPE get_Index(int* pi/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InstanceId(long* pid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(int* pxpLeft/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Left(int pxpLeft/*[in]*/) = 0; // [1610874892]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstrName/*[in]*/) = 0; // [1610874894]
  virtual HRESULT STDMETHODCALLTYPE get_NameLocal(BSTR* pbstrNameLocal/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_NameLocal(BSTR pbstrNameLocal/*[in]*/) = 0; // [1610874896]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Position(Office_97::MsoBarPosition* ppos/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Position(Office_97::MsoBarPosition ppos/*[in]*/) = 0; // [1610874899]
  virtual HRESULT STDMETHODCALLTYPE get_RowIndex(int* piRow/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_RowIndex(int piRow/*[in]*/) = 0; // [1610874901]
  virtual HRESULT STDMETHODCALLTYPE get_Protection(Office_97::MsoBarProtection* pprot/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Protection(Office_97::MsoBarProtection pprot/*[in]*/) = 0; // [1610874903]
  virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ShowPopup(VARIANT x/*[in,opt]*/= TNoParam(), 
                                              VARIANT y/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(int* pypTop/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(int pypTop/*[in]*/) = 0; // [1610874907]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_97::MsoBarType* ptype/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/) = 0; // [1610874910]
  virtual HRESULT STDMETHODCALLTYPE get_Width(int* pdx/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Width(int pdx/*[in]*/) = 0; // [1610874912]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_BuiltIn(void)
  {
    VARIANT_BOOL pvarfBuiltIn;
    OLECHECK(this->get_BuiltIn((VARIANT_BOOL*)&pvarfBuiltIn));
    return pvarfBuiltIn;
  }

  BSTR __fastcall get_Context(void)
  {
    BSTR pbstrContext = 0;
    OLECHECK(this->get_Context((BSTR*)&pbstrContext));
    return pbstrContext;
  }

  Office_97::CommandBarControls* __fastcall get_Controls(void)
  {
    Office_97::CommandBarControls* ppcbcs;
    OLECHECK(this->get_Controls((Office_97::CommandBarControls**)&ppcbcs));
    return ppcbcs;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pvarfEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pvarfEnabled));
    return pvarfEnabled;
  }

  Office_97::CommandBarControl* __fastcall FindControl(VARIANT Type/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Id/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Tag/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Visible/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Recursive/*[in,opt]*/= TNoParam())
  {
    Office_97::CommandBarControl* ppcbc;
    OLECHECK(this->FindControl(Type, Id, Tag, Visible, Recursive, (Office_97::CommandBarControl**)&ppcbc));
    return ppcbc;
  }

  int __fastcall get_Height(void)
  {
    int pdy;
    OLECHECK(this->get_Height((int*)&pdy));
    return pdy;
  }

  int __fastcall get_Index(void)
  {
    int pi;
    OLECHECK(this->get_Index((int*)&pi));
    return pi;
  }

  long __fastcall get_InstanceId(void)
  {
    long pid;
    OLECHECK(this->get_InstanceId((long*)&pid));
    return pid;
  }

  int __fastcall get_Left(void)
  {
    int pxpLeft;
    OLECHECK(this->get_Left((int*)&pxpLeft));
    return pxpLeft;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_NameLocal(void)
  {
    BSTR pbstrNameLocal = 0;
    OLECHECK(this->get_NameLocal((BSTR*)&pbstrNameLocal));
    return pbstrNameLocal;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  Office_97::MsoBarPosition __fastcall get_Position(void)
  {
    Office_97::MsoBarPosition ppos;
    OLECHECK(this->get_Position((Office_97::MsoBarPosition*)&ppos));
    return ppos;
  }

  int __fastcall get_RowIndex(void)
  {
    int piRow;
    OLECHECK(this->get_RowIndex((int*)&piRow));
    return piRow;
  }

  Office_97::MsoBarProtection __fastcall get_Protection(void)
  {
    Office_97::MsoBarProtection pprot;
    OLECHECK(this->get_Protection((Office_97::MsoBarProtection*)&pprot));
    return pprot;
  }

  int __fastcall get_Top(void)
  {
    int pypTop;
    OLECHECK(this->get_Top((int*)&pypTop));
    return pypTop;
  }

  Office_97::MsoBarType __fastcall get_Type(void)
  {
    Office_97::MsoBarType ptype;
    OLECHECK(this->get_Type((Office_97::MsoBarType*)&ptype));
    return ptype;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pvarfVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pvarfVisible));
    return pvarfVisible;
  }

  int __fastcall get_Width(void)
  {
    int pdx;
    OLECHECK(this->get_Width((int*)&pdx));
    return pdx;
  }


  __property   VARIANT_BOOL    BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Context = {read = get_Context};
  __property   Office_97::CommandBarControls* Controls = {read = get_Controls};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left, write = set_Left};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            NameLocal = {read = get_NameLocal};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoBarPosition Position = {read = get_Position, write = set_Position};
  __property   int             RowIndex = {read = get_RowIndex, write = set_RowIndex};
  __property   Office_97::MsoBarProtection Protection = {read = get_Protection, write = set_Protection};
  __property   int             Top = {read = get_Top, write = set_Top};
  __property   Office_97::MsoBarType Type = {read = get_Type};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBarControls
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0306-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBarControls  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE Add(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/, 
                                        VARIANT Parameter/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                        VARIANT Temporary/*[in,opt]*/, 
                                        Office_97::CommandBarControl** ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pcToolbarControls/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Office_97::CommandBarControl** ppcbc/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_97::CommandBarControl* __fastcall Add(VARIANT Type/*[in,opt]*/= TNoParam(), 
                                               VARIANT Id/*[in,opt]*/= TNoParam(), 
                                               VARIANT Parameter/*[in,opt]*/= TNoParam(), 
                                               VARIANT Before/*[in,opt]*/= TNoParam(), 
                                               VARIANT Temporary/*[in,opt]*/= TNoParam())
  {
    Office_97::CommandBarControl* ppcbc;
    OLECHECK(this->Add(Type, Id, Parameter, Before, Temporary, (Office_97::CommandBarControl**)&ppcbc));
    return ppcbc;
  }

  int __fastcall get_Count(void)
  {
    int pcToolbarControls;
    OLECHECK(this->get_Count((int*)&pcToolbarControls));
    return pcToolbarControls;
  }

  Office_97::CommandBarControl* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Office_97::CommandBarControl* ppcbc;
    OLECHECK(this->get_Item(Index, (Office_97::CommandBarControl**)&ppcbc));
    return ppcbc;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }

  Office_97::CommandBar* __fastcall get_Parent(void)
  {
    Office_97::CommandBar* ppcb;
    OLECHECK(this->get_Parent((Office_97::CommandBar**)&ppcb));
    return ppcb;
  }


  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_97::CommandBar* Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBarControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0308-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBarControl  : public Office_97::_IMsoOleAccDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_BeginGroup(VARIANT_BOOL* pvarfBeginGroup/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_BeginGroup(VARIANT_BOOL pvarfBeginGroup/*[in]*/) = 0; // [1610874880]
  virtual HRESULT STDMETHODCALLTYPE get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pbstrCaption/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Caption(BSTR pbstrCaption/*[in]*/) = 0; // [1610874883]
  virtual HRESULT STDMETHODCALLTYPE get_Control(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                         Office_97::CommandBarControl** ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Temporary/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DescriptionText(BSTR* pbstrText/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DescriptionText(BSTR pbstrText/*[in]*/) = 0; // [1610874888]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/) = 0; // [1610874890]
  virtual HRESULT STDMETHODCALLTYPE Execute(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Height(int* pdy/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Height(int pdy/*[in]*/) = 0; // [1610874893]
  virtual HRESULT STDMETHODCALLTYPE get_HelpContextId(int* pid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HelpContextId(int pid/*[in]*/) = 0; // [1610874895]
  virtual HRESULT STDMETHODCALLTYPE get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_HelpFile(BSTR pbstrFilename/*[in]*/) = 0; // [1610874897]
  virtual HRESULT STDMETHODCALLTYPE get_Id(int* pid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Index(int* pi/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_InstanceId(long* pid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                         Office_97::CommandBarControl** ppcbc/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(int* px/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_OLEUsage(Office_97::MsoControlOLEUsage* pcou/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_OLEUsage(Office_97::MsoControlOLEUsage pcou/*[in]*/) = 0; // [1610874904]
  virtual HRESULT STDMETHODCALLTYPE get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_OnAction(BSTR pbstrOnAction/*[in]*/) = 0; // [1610874906]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parameter(BSTR* pbstrParam/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Parameter(BSTR pbstrParam/*[in]*/) = 0; // [1610874909]
  virtual HRESULT STDMETHODCALLTYPE get_Priority(int* pnPri/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Priority(int pnPri/*[in]*/) = 0; // [1610874911]
  virtual HRESULT STDMETHODCALLTYPE Reset(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE SetFocus(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Tag(BSTR* pbstrTag/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Tag(BSTR pbstrTag/*[in]*/) = 0; // [1610874915]
  virtual HRESULT STDMETHODCALLTYPE get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_TooltipText(BSTR pbstrTooltip/*[in]*/) = 0; // [1610874917]
  virtual HRESULT STDMETHODCALLTYPE get_Top(int* py/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_97::MsoControlType* ptype/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/) = 0; // [1610874921]
  virtual HRESULT STDMETHODCALLTYPE get_Width(int* pdx/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Width(int pdx/*[in]*/) = 0; // [1610874923]
  virtual HRESULT STDMETHODCALLTYPE Reserved1(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved2(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved3(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved4(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved5(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved6(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved7(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Reserved8(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_BeginGroup(void)
  {
    VARIANT_BOOL pvarfBeginGroup;
    OLECHECK(this->get_BeginGroup((VARIANT_BOOL*)&pvarfBeginGroup));
    return pvarfBeginGroup;
  }

  VARIANT_BOOL __fastcall get_BuiltIn(void)
  {
    VARIANT_BOOL pvarfBuiltIn;
    OLECHECK(this->get_BuiltIn((VARIANT_BOOL*)&pvarfBuiltIn));
    return pvarfBuiltIn;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pbstrCaption = 0;
    OLECHECK(this->get_Caption((BSTR*)&pbstrCaption));
    return pbstrCaption;
  }

  LPDISPATCH __fastcall get_Control(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Control((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  Office_97::CommandBarControl* __fastcall Copy(VARIANT Bar/*[in,opt]*/= TNoParam(), 
                                                VARIANT Before/*[in,opt]*/= TNoParam())
  {
    Office_97::CommandBarControl* ppcbc;
    OLECHECK(this->Copy(Bar, Before, (Office_97::CommandBarControl**)&ppcbc));
    return ppcbc;
  }

  BSTR __fastcall get_DescriptionText(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_DescriptionText((BSTR*)&pbstrText));
    return pbstrText;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL pvarfEnabled;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&pvarfEnabled));
    return pvarfEnabled;
  }

  int __fastcall get_Height(void)
  {
    int pdy;
    OLECHECK(this->get_Height((int*)&pdy));
    return pdy;
  }

  int __fastcall get_HelpContextId(void)
  {
    int pid;
    OLECHECK(this->get_HelpContextId((int*)&pid));
    return pid;
  }

  BSTR __fastcall get_HelpFile(void)
  {
    BSTR pbstrFilename = 0;
    OLECHECK(this->get_HelpFile((BSTR*)&pbstrFilename));
    return pbstrFilename;
  }

  int __fastcall get_Id(void)
  {
    int pid;
    OLECHECK(this->get_Id((int*)&pid));
    return pid;
  }

  int __fastcall get_Index(void)
  {
    int pi;
    OLECHECK(this->get_Index((int*)&pi));
    return pi;
  }

  long __fastcall get_InstanceId(void)
  {
    long pid;
    OLECHECK(this->get_InstanceId((long*)&pid));
    return pid;
  }

  Office_97::CommandBarControl* __fastcall Move(VARIANT Bar/*[in,opt]*/= TNoParam(), 
                                                VARIANT Before/*[in,opt]*/= TNoParam())
  {
    Office_97::CommandBarControl* ppcbc;
    OLECHECK(this->Move(Bar, Before, (Office_97::CommandBarControl**)&ppcbc));
    return ppcbc;
  }

  int __fastcall get_Left(void)
  {
    int px;
    OLECHECK(this->get_Left((int*)&px));
    return px;
  }

  Office_97::MsoControlOLEUsage __fastcall get_OLEUsage(void)
  {
    Office_97::MsoControlOLEUsage pcou;
    OLECHECK(this->get_OLEUsage((Office_97::MsoControlOLEUsage*)&pcou));
    return pcou;
  }

  BSTR __fastcall get_OnAction(void)
  {
    BSTR pbstrOnAction = 0;
    OLECHECK(this->get_OnAction((BSTR*)&pbstrOnAction));
    return pbstrOnAction;
  }

  Office_97::CommandBar* __fastcall get_Parent(void)
  {
    Office_97::CommandBar* ppcb;
    OLECHECK(this->get_Parent((Office_97::CommandBar**)&ppcb));
    return ppcb;
  }

  BSTR __fastcall get_Parameter(void)
  {
    BSTR pbstrParam = 0;
    OLECHECK(this->get_Parameter((BSTR*)&pbstrParam));
    return pbstrParam;
  }

  int __fastcall get_Priority(void)
  {
    int pnPri;
    OLECHECK(this->get_Priority((int*)&pnPri));
    return pnPri;
  }

  BSTR __fastcall get_Tag(void)
  {
    BSTR pbstrTag = 0;
    OLECHECK(this->get_Tag((BSTR*)&pbstrTag));
    return pbstrTag;
  }

  BSTR __fastcall get_TooltipText(void)
  {
    BSTR pbstrTooltip = 0;
    OLECHECK(this->get_TooltipText((BSTR*)&pbstrTooltip));
    return pbstrTooltip;
  }

  int __fastcall get_Top(void)
  {
    int py;
    OLECHECK(this->get_Top((int*)&py));
    return py;
  }

  Office_97::MsoControlType __fastcall get_Type(void)
  {
    Office_97::MsoControlType ptype;
    OLECHECK(this->get_Type((Office_97::MsoControlType*)&ptype));
    return ptype;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pvarfVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pvarfVisible));
    return pvarfVisible;
  }

  int __fastcall get_Width(void)
  {
    int pdx;
    OLECHECK(this->get_Width((int*)&pdx));
    return pdx;
  }


  __property   VARIANT_BOOL    BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   VARIANT_BOOL    BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_97::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction};
  __property   Office_97::CommandBar* Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_97::MsoControlType Type = {read = get_Type};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBarButton
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030E-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBarButton  : public Office_97::CommandBarControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_BuiltInFace(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_BuiltInFace(VARIANT_BOOL pvarfBuiltIn/*[in]*/) = 0; // [1610940416]
  virtual HRESULT STDMETHODCALLTYPE CopyFace(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FaceId(int* pid/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FaceId(int pid/*[in]*/) = 0; // [1610940419]
  virtual HRESULT STDMETHODCALLTYPE PasteFace(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ShortcutText(BSTR* pbstrText/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ShortcutText(BSTR pbstrText/*[in]*/) = 0; // [1610940422]
  virtual HRESULT STDMETHODCALLTYPE get_State(Office_97::MsoButtonState* pstate/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_State(Office_97::MsoButtonState pstate/*[in]*/) = 0; // [1610940424]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Office_97::MsoButtonStyle* pstyle/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Office_97::MsoButtonStyle pstyle/*[in]*/) = 0; // [1610940426]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_BuiltInFace(void)
  {
    VARIANT_BOOL pvarfBuiltIn;
    OLECHECK(this->get_BuiltInFace((VARIANT_BOOL*)&pvarfBuiltIn));
    return pvarfBuiltIn;
  }

  int __fastcall get_FaceId(void)
  {
    int pid;
    OLECHECK(this->get_FaceId((int*)&pid));
    return pid;
  }

  BSTR __fastcall get_ShortcutText(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_ShortcutText((BSTR*)&pbstrText));
    return pbstrText;
  }

  Office_97::MsoButtonState __fastcall get_State(void)
  {
    Office_97::MsoButtonState pstate;
    OLECHECK(this->get_State((Office_97::MsoButtonState*)&pstate));
    return pstate;
  }

  Office_97::MsoButtonStyle __fastcall get_Style(void)
  {
    Office_97::MsoButtonStyle pstyle;
    OLECHECK(this->get_Style((Office_97::MsoButtonStyle*)&pstyle));
    return pstyle;
  }


  __property   VARIANT_BOOL    BuiltInFace = {read = get_BuiltInFace, write = set_BuiltInFace};
  __property   int             FaceId = {read = get_FaceId, write = set_FaceId};
  __property   BSTR            ShortcutText = {read = get_ShortcutText};
  __property   Office_97::MsoButtonState State = {read = get_State, write = set_State};
  __property   Office_97::MsoButtonStyle Style = {read = get_Style, write = set_Style};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBarPopup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030A-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBarPopup  : public Office_97::CommandBarControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CommandBar(Office_97::CommandBar** ppcb/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Controls(Office_97::CommandBarControls** ppcbcs/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_OLEMenuGroup(Office_97::MsoOLEMenuGroup* pomg/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_OLEMenuGroup(Office_97::MsoOLEMenuGroup pomg/*[in]*/) = 0; // [1610940418]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_97::CommandBar* __fastcall get_CommandBar(void)
  {
    Office_97::CommandBar* ppcb;
    OLECHECK(this->get_CommandBar((Office_97::CommandBar**)&ppcb));
    return ppcb;
  }

  Office_97::CommandBarControls* __fastcall get_Controls(void)
  {
    Office_97::CommandBarControls* ppcbcs;
    OLECHECK(this->get_Controls((Office_97::CommandBarControls**)&ppcbcs));
    return ppcbcs;
  }

  Office_97::MsoOLEMenuGroup __fastcall get_OLEMenuGroup(void)
  {
    Office_97::MsoOLEMenuGroup pomg;
    OLECHECK(this->get_OLEMenuGroup((Office_97::MsoOLEMenuGroup*)&pomg));
    return pomg;
  }


  __property   Office_97::CommandBar* CommandBar = {read = get_CommandBar};
  __property   Office_97::CommandBarControls* Controls = {read = get_Controls};
  __property   Office_97::MsoOLEMenuGroup OLEMenuGroup = {read = get_OLEMenuGroup, write = set_OLEMenuGroup};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CommandBarComboBox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030C-0000-0000-C000-000000000046}
// *********************************************************************//
interface CommandBarComboBox  : public Office_97::CommandBarControl
{
public:
  virtual HRESULT STDMETHODCALLTYPE AddItem(BSTR Text/*[in]*/, VARIANT Index/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Clear(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DropDownLines(int* pcLines/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DropDownLines(int pcLines/*[in]*/) = 0; // [1610940418]
  virtual HRESULT STDMETHODCALLTYPE get_DropDownWidth(int* pdx/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_DropDownWidth(int pdx/*[in]*/) = 0; // [1610940420]
  virtual HRESULT STDMETHODCALLTYPE get_List(int Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_List(int Index/*[in]*/, BSTR pbstrItem/*[in]*/) = 0; // [1610940422]
  virtual HRESULT STDMETHODCALLTYPE get_ListCount(int* pcItems/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ListHeaderCount(int* pcItems/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ListHeaderCount(int pcItems/*[in]*/) = 0; // [1610940425]
  virtual HRESULT STDMETHODCALLTYPE get_ListIndex(int* pi/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_ListIndex(int pi/*[in]*/) = 0; // [1610940427]
  virtual HRESULT STDMETHODCALLTYPE RemoveItem(int Index/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Office_97::MsoComboStyle* pstyle/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Office_97::MsoComboStyle pstyle/*[in]*/) = 0; // [1610940430]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstrText/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstrText/*[in]*/) = 0; // [1610940432]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall get_DropDownLines(void)
  {
    int pcLines;
    OLECHECK(this->get_DropDownLines((int*)&pcLines));
    return pcLines;
  }

  int __fastcall get_DropDownWidth(void)
  {
    int pdx;
    OLECHECK(this->get_DropDownWidth((int*)&pdx));
    return pdx;
  }

  BSTR __fastcall get_List(int Index/*[in]*/)
  {
    BSTR pbstrItem = 0;
    OLECHECK(this->get_List(Index, (BSTR*)&pbstrItem));
    return pbstrItem;
  }

  int __fastcall get_ListCount(void)
  {
    int pcItems;
    OLECHECK(this->get_ListCount((int*)&pcItems));
    return pcItems;
  }

  int __fastcall get_ListHeaderCount(void)
  {
    int pcItems;
    OLECHECK(this->get_ListHeaderCount((int*)&pcItems));
    return pcItems;
  }

  int __fastcall get_ListIndex(void)
  {
    int pi;
    OLECHECK(this->get_ListIndex((int*)&pi));
    return pi;
  }

  Office_97::MsoComboStyle __fastcall get_Style(void)
  {
    Office_97::MsoComboStyle pstyle;
    OLECHECK(this->get_Style((Office_97::MsoComboStyle*)&pstyle));
    return pstyle;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstrText = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstrText));
    return pbstrText;
  }


  __property   int             DropDownLines = {read = get_DropDownLines, write = set_DropDownLines};
  __property   int             DropDownWidth = {read = get_DropDownWidth, write = set_DropDownWidth};
  __property   int             ListCount = {read = get_ListCount};
  __property   int             ListHeaderCount = {read = get_ListHeaderCount, write = set_ListHeaderCount};
  __property   int             ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   Office_97::MsoComboStyle Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Adjustments
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0310-0000-0000-C000-000000000046}
// *********************************************************************//
interface Adjustments  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, float* Val/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Item(int Index/*[in]*/, float Val/*[in]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  float __fastcall get_Item(int Index/*[in]*/)
  {
    float Val;
    OLECHECK(this->get_Item(Index, (float*)&Val));
    return Val;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: CalloutFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0311-0000-0000-C000-000000000046}
// *********************************************************************//
interface CalloutFormat  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE AutomaticLength(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE CustomDrop(float Drop/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE CustomLength(float Length/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE PresetDrop(Office_97::MsoCalloutDropType DropType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_Accent(Office_97::MsoTriState* Accent/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Accent(Office_97::MsoTriState Accent/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Angle(Office_97::MsoCalloutAngleType* Angle/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_Angle(Office_97::MsoCalloutAngleType Angle/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_AutoAttach(Office_97::MsoTriState* AutoAttach/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_AutoAttach(Office_97::MsoTriState AutoAttach/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_AutoLength(Office_97::MsoTriState* AutoLength/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Border(Office_97::MsoTriState* Border/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Border(Office_97::MsoTriState Border/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Drop(float* Drop/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_DropType(Office_97::MsoCalloutDropType* DropType/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Gap(float* Gap/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_Gap(float Gap/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_Length(float* Length/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_97::MsoCalloutType* Type/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_97::MsoCalloutType Type/*[in]*/) = 0; // [109]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_97::MsoTriState __fastcall get_Accent(void)
  {
    Office_97::MsoTriState Accent;
    OLECHECK(this->get_Accent((Office_97::MsoTriState*)&Accent));
    return Accent;
  }

  Office_97::MsoCalloutAngleType __fastcall get_Angle(void)
  {
    Office_97::MsoCalloutAngleType Angle;
    OLECHECK(this->get_Angle((Office_97::MsoCalloutAngleType*)&Angle));
    return Angle;
  }

  Office_97::MsoTriState __fastcall get_AutoAttach(void)
  {
    Office_97::MsoTriState AutoAttach;
    OLECHECK(this->get_AutoAttach((Office_97::MsoTriState*)&AutoAttach));
    return AutoAttach;
  }

  Office_97::MsoTriState __fastcall get_AutoLength(void)
  {
    Office_97::MsoTriState AutoLength;
    OLECHECK(this->get_AutoLength((Office_97::MsoTriState*)&AutoLength));
    return AutoLength;
  }

  Office_97::MsoTriState __fastcall get_Border(void)
  {
    Office_97::MsoTriState Border;
    OLECHECK(this->get_Border((Office_97::MsoTriState*)&Border));
    return Border;
  }

  float __fastcall get_Drop(void)
  {
    float Drop;
    OLECHECK(this->get_Drop((float*)&Drop));
    return Drop;
  }

  Office_97::MsoCalloutDropType __fastcall get_DropType(void)
  {
    Office_97::MsoCalloutDropType DropType;
    OLECHECK(this->get_DropType((Office_97::MsoCalloutDropType*)&DropType));
    return DropType;
  }

  float __fastcall get_Gap(void)
  {
    float Gap;
    OLECHECK(this->get_Gap((float*)&Gap));
    return Gap;
  }

  float __fastcall get_Length(void)
  {
    float Length;
    OLECHECK(this->get_Length((float*)&Length));
    return Length;
  }

  Office_97::MsoCalloutType __fastcall get_Type(void)
  {
    Office_97::MsoCalloutType Type;
    OLECHECK(this->get_Type((Office_97::MsoCalloutType*)&Type));
    return Type;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoTriState Accent = {read = get_Accent, write = set_Accent};
  __property   Office_97::MsoCalloutAngleType Angle = {read = get_Angle, write = set_Angle};
  __property   Office_97::MsoTriState AutoAttach = {read = get_AutoAttach, write = set_AutoAttach};
  __property   Office_97::MsoTriState AutoLength = {read = get_AutoLength};
  __property   Office_97::MsoTriState Border = {read = get_Border, write = set_Border};
  __property   float           Drop = {read = get_Drop};
  __property   Office_97::MsoCalloutDropType DropType = {read = get_DropType};
  __property   float           Gap = {read = get_Gap, write = set_Gap};
  __property   float           Length = {read = get_Length};
  __property   Office_97::MsoCalloutType Type = {read = get_Type, write = set_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ColorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0312-0000-0000-C000-000000000046}
// *********************************************************************//
interface ColorFormat  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_rgb(Office_97::MsoRGBType* rgb/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_rgb(Office_97::MsoRGBType rgb/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_SchemeColor(int* SchemeColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_SchemeColor(int SchemeColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_97::MsoColorType* Type/*[out,retval]*/) = 0; // [101]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_97::MsoRGBType __fastcall get_rgb(void)
  {
    Office_97::MsoRGBType rgb;
    OLECHECK(this->get_rgb((Office_97::MsoRGBType*)&rgb));
    return rgb;
  }

  int __fastcall get_SchemeColor(void)
  {
    int SchemeColor;
    OLECHECK(this->get_SchemeColor((int*)&SchemeColor));
    return SchemeColor;
  }

  Office_97::MsoColorType __fastcall get_Type(void)
  {
    Office_97::MsoColorType Type;
    OLECHECK(this->get_Type((Office_97::MsoColorType*)&Type));
    return Type;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoRGBType rgb = {read = get_rgb, write = set_rgb};
  __property   int             SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};
  __property   Office_97::MsoColorType Type = {read = get_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ConnectorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0313-0000-0000-C000-000000000046}
// *********************************************************************//
interface ConnectorFormat  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE BeginConnect(Office_97::Shape* ConnectedShape/*[in]*/, 
                                                 int ConnectionSite/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE BeginDisconnect(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE EndConnect(Office_97::Shape* ConnectedShape/*[in]*/, 
                                               int ConnectionSite/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE EndDisconnect(void) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnected(Office_97::MsoTriState* BeginConnected/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnectedShape(Office_97::Shape** BeginConnectedShape/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnected(Office_97::MsoTriState* EndConnected/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnectedShape(Office_97::Shape** EndConnectedShape/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_97::MsoConnectorType* Type/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_97::MsoConnectorType Type/*[in]*/) = 0; // [106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_97::MsoTriState __fastcall get_BeginConnected(void)
  {
    Office_97::MsoTriState BeginConnected;
    OLECHECK(this->get_BeginConnected((Office_97::MsoTriState*)&BeginConnected));
    return BeginConnected;
  }

  Office_97::Shape* __fastcall get_BeginConnectedShape(void)
  {
    Office_97::Shape* BeginConnectedShape;
    OLECHECK(this->get_BeginConnectedShape((Office_97::Shape**)&BeginConnectedShape));
    return BeginConnectedShape;
  }

  int __fastcall get_BeginConnectionSite(void)
  {
    int BeginConnectionSite;
    OLECHECK(this->get_BeginConnectionSite((int*)&BeginConnectionSite));
    return BeginConnectionSite;
  }

  Office_97::MsoTriState __fastcall get_EndConnected(void)
  {
    Office_97::MsoTriState EndConnected;
    OLECHECK(this->get_EndConnected((Office_97::MsoTriState*)&EndConnected));
    return EndConnected;
  }

  Office_97::Shape* __fastcall get_EndConnectedShape(void)
  {
    Office_97::Shape* EndConnectedShape;
    OLECHECK(this->get_EndConnectedShape((Office_97::Shape**)&EndConnectedShape));
    return EndConnectedShape;
  }

  int __fastcall get_EndConnectionSite(void)
  {
    int EndConnectionSite;
    OLECHECK(this->get_EndConnectionSite((int*)&EndConnectionSite));
    return EndConnectionSite;
  }

  Office_97::MsoConnectorType __fastcall get_Type(void)
  {
    Office_97::MsoConnectorType Type;
    OLECHECK(this->get_Type((Office_97::MsoConnectorType*)&Type));
    return Type;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoTriState BeginConnected = {read = get_BeginConnected};
  __property   Office_97::Shape* BeginConnectedShape = {read = get_BeginConnectedShape};
  __property   int             BeginConnectionSite = {read = get_BeginConnectionSite};
  __property   Office_97::MsoTriState EndConnected = {read = get_EndConnected};
  __property   Office_97::Shape* EndConnectedShape = {read = get_EndConnectedShape};
  __property   int             EndConnectionSite = {read = get_EndConnectionSite};
  __property   Office_97::MsoConnectorType Type = {read = get_Type, write = set_Type};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FillFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0314-0000-0000-C000-000000000046}
// *********************************************************************//
interface FillFormat  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Background(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE OneColorGradient(Office_97::MsoGradientStyle Style/*[in]*/, 
                                                     int Variant/*[in]*/, float Degree/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Patterned(Office_97::MsoPatternType Pattern/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE PresetGradient(Office_97::MsoGradientStyle Style/*[in]*/, 
                                                   int Variant/*[in]*/, 
                                                   Office_97::MsoPresetGradientType PresetGradientType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE PresetTextured(Office_97::MsoPresetTexture PresetTexture/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE Solid(void) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE TwoColorGradient(Office_97::MsoGradientStyle Style/*[in]*/, 
                                                     int Variant/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE UserPicture(BSTR PictureFile/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE UserTextured(BSTR TextureFile/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Office_97::ColorFormat** BackColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Office_97::ColorFormat* BackColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Office_97::ColorFormat** ForeColor/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Office_97::ColorFormat* ForeColor/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_GradientColorType(Office_97::MsoGradientColorType* GradientColorType/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_GradientDegree(float* GradientDegree/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_GradientStyle(Office_97::MsoGradientStyle* GradientStyle/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_GradientVariant(int* GradientVariant/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Pattern(Office_97::MsoPatternType* Pattern/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetGradientType(Office_97::MsoPresetGradientType* PresetGradientType/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetTexture(Office_97::MsoPresetTexture* PresetTexture/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_TextureName(BSTR* TextureName/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_TextureType(Office_97::MsoTextureType* TextureType/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_97::MsoFillType* Type/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_97::MsoTriState Visible/*[in]*/) = 0; // [113]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_97::ColorFormat* __fastcall get_BackColor(void)
  {
    Office_97::ColorFormat* BackColor;
    OLECHECK(this->get_BackColor((Office_97::ColorFormat**)&BackColor));
    return BackColor;
  }

  Office_97::ColorFormat* __fastcall get_ForeColor(void)
  {
    Office_97::ColorFormat* ForeColor;
    OLECHECK(this->get_ForeColor((Office_97::ColorFormat**)&ForeColor));
    return ForeColor;
  }

  Office_97::MsoGradientColorType __fastcall get_GradientColorType(void)
  {
    Office_97::MsoGradientColorType GradientColorType;
    OLECHECK(this->get_GradientColorType((Office_97::MsoGradientColorType*)&GradientColorType));
    return GradientColorType;
  }

  float __fastcall get_GradientDegree(void)
  {
    float GradientDegree;
    OLECHECK(this->get_GradientDegree((float*)&GradientDegree));
    return GradientDegree;
  }

  Office_97::MsoGradientStyle __fastcall get_GradientStyle(void)
  {
    Office_97::MsoGradientStyle GradientStyle;
    OLECHECK(this->get_GradientStyle((Office_97::MsoGradientStyle*)&GradientStyle));
    return GradientStyle;
  }

  int __fastcall get_GradientVariant(void)
  {
    int GradientVariant;
    OLECHECK(this->get_GradientVariant((int*)&GradientVariant));
    return GradientVariant;
  }

  Office_97::MsoPatternType __fastcall get_Pattern(void)
  {
    Office_97::MsoPatternType Pattern;
    OLECHECK(this->get_Pattern((Office_97::MsoPatternType*)&Pattern));
    return Pattern;
  }

  Office_97::MsoPresetGradientType __fastcall get_PresetGradientType(void)
  {
    Office_97::MsoPresetGradientType PresetGradientType;
    OLECHECK(this->get_PresetGradientType((Office_97::MsoPresetGradientType*)&PresetGradientType));
    return PresetGradientType;
  }

  Office_97::MsoPresetTexture __fastcall get_PresetTexture(void)
  {
    Office_97::MsoPresetTexture PresetTexture;
    OLECHECK(this->get_PresetTexture((Office_97::MsoPresetTexture*)&PresetTexture));
    return PresetTexture;
  }

  BSTR __fastcall get_TextureName(void)
  {
    BSTR TextureName = 0;
    OLECHECK(this->get_TextureName((BSTR*)&TextureName));
    return TextureName;
  }

  Office_97::MsoTextureType __fastcall get_TextureType(void)
  {
    Office_97::MsoTextureType TextureType;
    OLECHECK(this->get_TextureType((Office_97::MsoTextureType*)&TextureType));
    return TextureType;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_97::MsoFillType __fastcall get_Type(void)
  {
    Office_97::MsoFillType Type;
    OLECHECK(this->get_Type((Office_97::MsoFillType*)&Type));
    return Type;
  }

  Office_97::MsoTriState __fastcall get_Visible(void)
  {
    Office_97::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_97::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::ColorFormat* BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_97::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_97::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_97::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   int             GradientVariant = {read = get_GradientVariant};
  __property   Office_97::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_97::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_97::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_97::MsoTextureType TextureType = {read = get_TextureType};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_97::MsoFillType Type = {read = get_Type};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FreeformBuilder
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0315-0000-0000-C000-000000000046}
// *********************************************************************//
interface FreeformBuilder  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE AddNodes(Office_97::MsoSegmentType SegmentType/*[in]*/, 
                                             Office_97::MsoEditingType EditingType/*[in]*/, 
                                             float X1/*[in]*/, float Y1/*[in]*/, 
                                             float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                             float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE ConvertToShape(Office_97::Shape** Freeform/*[out,retval]*/) = 0; // [11]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_97::Shape* __fastcall ConvertToShape(void)
  {
    Office_97::Shape* Freeform;
    OLECHECK(this->ConvertToShape((Office_97::Shape**)&Freeform));
    return Freeform;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: GroupShapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0316-0000-0000-C000-000000000046}
// *********************************************************************//
interface GroupShapes  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pnShapes/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Office_97::Shape** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_Count(void)
  {
    int pnShapes;
    OLECHECK(this->get_Count((int*)&pnShapes));
    return pnShapes;
  }

  Office_97::Shape* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Office_97::Shape* Item;
    OLECHECK(this->Item(Index, (Office_97::Shape**)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: LineFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0317-0000-0000-C000-000000000046}
// *********************************************************************//
interface LineFormat  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_BackColor(Office_97::ColorFormat** BackColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_BackColor(Office_97::ColorFormat* BackColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadLength(Office_97::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadLength(Office_97::MsoArrowheadLength BeginArrowheadLength/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadStyle(Office_97::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadStyle(Office_97::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_BeginArrowheadWidth(Office_97::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_BeginArrowheadWidth(Office_97::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_DashStyle(Office_97::MsoLineDashStyle* DashStyle/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_DashStyle(Office_97::MsoLineDashStyle DashStyle/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadLength(Office_97::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadLength(Office_97::MsoArrowheadLength EndArrowheadLength/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadStyle(Office_97::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadStyle(Office_97::MsoArrowheadStyle EndArrowheadStyle/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_EndArrowheadWidth(Office_97::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_EndArrowheadWidth(Office_97::MsoArrowheadWidth EndArrowheadWidth/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Office_97::ColorFormat** ForeColor/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Office_97::ColorFormat* ForeColor/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Pattern(Office_97::MsoPatternType* Pattern/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Pattern(Office_97::MsoPatternType Pattern/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_Style(Office_97::MsoLineStyle* Style/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_Style(Office_97::MsoLineStyle Style/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_97::MsoTriState Visible/*[in]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_Weight(float* Weight/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_Weight(float Weight/*[in]*/) = 0; // [113]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_97::ColorFormat* __fastcall get_BackColor(void)
  {
    Office_97::ColorFormat* BackColor;
    OLECHECK(this->get_BackColor((Office_97::ColorFormat**)&BackColor));
    return BackColor;
  }

  Office_97::MsoArrowheadLength __fastcall get_BeginArrowheadLength(void)
  {
    Office_97::MsoArrowheadLength BeginArrowheadLength;
    OLECHECK(this->get_BeginArrowheadLength((Office_97::MsoArrowheadLength*)&BeginArrowheadLength));
    return BeginArrowheadLength;
  }

  Office_97::MsoArrowheadStyle __fastcall get_BeginArrowheadStyle(void)
  {
    Office_97::MsoArrowheadStyle BeginArrowheadStyle;
    OLECHECK(this->get_BeginArrowheadStyle((Office_97::MsoArrowheadStyle*)&BeginArrowheadStyle));
    return BeginArrowheadStyle;
  }

  Office_97::MsoArrowheadWidth __fastcall get_BeginArrowheadWidth(void)
  {
    Office_97::MsoArrowheadWidth BeginArrowheadWidth;
    OLECHECK(this->get_BeginArrowheadWidth((Office_97::MsoArrowheadWidth*)&BeginArrowheadWidth));
    return BeginArrowheadWidth;
  }

  Office_97::MsoLineDashStyle __fastcall get_DashStyle(void)
  {
    Office_97::MsoLineDashStyle DashStyle;
    OLECHECK(this->get_DashStyle((Office_97::MsoLineDashStyle*)&DashStyle));
    return DashStyle;
  }

  Office_97::MsoArrowheadLength __fastcall get_EndArrowheadLength(void)
  {
    Office_97::MsoArrowheadLength EndArrowheadLength;
    OLECHECK(this->get_EndArrowheadLength((Office_97::MsoArrowheadLength*)&EndArrowheadLength));
    return EndArrowheadLength;
  }

  Office_97::MsoArrowheadStyle __fastcall get_EndArrowheadStyle(void)
  {
    Office_97::MsoArrowheadStyle EndArrowheadStyle;
    OLECHECK(this->get_EndArrowheadStyle((Office_97::MsoArrowheadStyle*)&EndArrowheadStyle));
    return EndArrowheadStyle;
  }

  Office_97::MsoArrowheadWidth __fastcall get_EndArrowheadWidth(void)
  {
    Office_97::MsoArrowheadWidth EndArrowheadWidth;
    OLECHECK(this->get_EndArrowheadWidth((Office_97::MsoArrowheadWidth*)&EndArrowheadWidth));
    return EndArrowheadWidth;
  }

  Office_97::ColorFormat* __fastcall get_ForeColor(void)
  {
    Office_97::ColorFormat* ForeColor;
    OLECHECK(this->get_ForeColor((Office_97::ColorFormat**)&ForeColor));
    return ForeColor;
  }

  Office_97::MsoPatternType __fastcall get_Pattern(void)
  {
    Office_97::MsoPatternType Pattern;
    OLECHECK(this->get_Pattern((Office_97::MsoPatternType*)&Pattern));
    return Pattern;
  }

  Office_97::MsoLineStyle __fastcall get_Style(void)
  {
    Office_97::MsoLineStyle Style;
    OLECHECK(this->get_Style((Office_97::MsoLineStyle*)&Style));
    return Style;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_97::MsoTriState __fastcall get_Visible(void)
  {
    Office_97::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_97::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Weight(void)
  {
    float Weight;
    OLECHECK(this->get_Weight((float*)&Weight));
    return Weight;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::ColorFormat* BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_97::MsoArrowheadLength BeginArrowheadLength = {read = get_BeginArrowheadLength, write = set_BeginArrowheadLength};
  __property   Office_97::MsoArrowheadStyle BeginArrowheadStyle = {read = get_BeginArrowheadStyle, write = set_BeginArrowheadStyle};
  __property   Office_97::MsoArrowheadWidth BeginArrowheadWidth = {read = get_BeginArrowheadWidth, write = set_BeginArrowheadWidth};
  __property   Office_97::MsoLineDashStyle DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   Office_97::MsoArrowheadLength EndArrowheadLength = {read = get_EndArrowheadLength, write = set_EndArrowheadLength};
  __property   Office_97::MsoArrowheadStyle EndArrowheadStyle = {read = get_EndArrowheadStyle, write = set_EndArrowheadStyle};
  __property   Office_97::MsoArrowheadWidth EndArrowheadWidth = {read = get_EndArrowheadWidth, write = set_EndArrowheadWidth};
  __property   Office_97::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_97::MsoPatternType Pattern = {read = get_Pattern, write = set_Pattern};
  __property   Office_97::MsoLineStyle Style = {read = get_Style, write = set_Style};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Weight = {read = get_Weight, write = set_Weight};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeNode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0318-0000-0000-C000-000000000046}
// *********************************************************************//
interface ShapeNode  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_EditingType(Office_97::MsoEditingType* EditingType/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Points(VARIANT* Points/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_SegmentType(Office_97::MsoSegmentType* SegmentType/*[out,retval]*/) = 0; // [102]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_97::MsoEditingType __fastcall get_EditingType(void)
  {
    Office_97::MsoEditingType EditingType;
    OLECHECK(this->get_EditingType((Office_97::MsoEditingType*)&EditingType));
    return EditingType;
  }

  VARIANT __fastcall get_Points(void)
  {
    VARIANT Points;
    OLECHECK(this->get_Points((VARIANT*)&Points));
    return Points;
  }

  Office_97::MsoSegmentType __fastcall get_SegmentType(void)
  {
    Office_97::MsoSegmentType SegmentType;
    OLECHECK(this->get_SegmentType((Office_97::MsoSegmentType*)&SegmentType));
    return SegmentType;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoEditingType EditingType = {read = get_EditingType};
  __property   Office_97::MsoSegmentType SegmentType = {read = get_SegmentType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeNodes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0319-0000-0000-C000-000000000046}
// *********************************************************************//
interface ShapeNodes  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Office_97::ShapeNode** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Delete(int Index/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Insert(int Index/*[in]*/, 
                                           Office_97::MsoSegmentType SegmentType/*[in]*/, 
                                           Office_97::MsoEditingType EditingType/*[in]*/, 
                                           float X1/*[in]*/, float Y1/*[in]*/, 
                                           float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                           float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE SetEditingType(int Index/*[in]*/, 
                                                   Office_97::MsoEditingType EditingType/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE SetPosition(int Index/*[in]*/, float X1/*[in]*/, 
                                                float Y1/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE SetSegmentType(int Index/*[in]*/, 
                                                   Office_97::MsoSegmentType SegmentType/*[in]*/) = 0; // [15]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Office_97::ShapeNode* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Office_97::ShapeNode* Item;
    OLECHECK(this->Item(Index, (Office_97::ShapeNode**)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PictureFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031A-0000-0000-C000-000000000046}
// *********************************************************************//
interface PictureFormat  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementBrightness(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementContrast(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Brightness(float* Brightness/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Brightness(float Brightness/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ColorType(Office_97::MsoPictureColorType* ColorType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_ColorType(Office_97::MsoPictureColorType ColorType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_Contrast(float* Contrast/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_Contrast(float Contrast/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_CropBottom(float* CropBottom/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_CropBottom(float CropBottom/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_CropLeft(float* CropLeft/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_CropLeft(float CropLeft/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_CropRight(float* CropRight/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_CropRight(float CropRight/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_CropTop(float* CropTop/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_CropTop(float CropTop/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_TransparencyColor(Office_97::MsoRGBType* TransparencyColor/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_TransparencyColor(Office_97::MsoRGBType TransparencyColor/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_TransparentBackground(Office_97::MsoTriState* TransparentBackground/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_TransparentBackground(Office_97::MsoTriState TransparentBackground/*[in]*/) = 0; // [108]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_Brightness(void)
  {
    float Brightness;
    OLECHECK(this->get_Brightness((float*)&Brightness));
    return Brightness;
  }

  Office_97::MsoPictureColorType __fastcall get_ColorType(void)
  {
    Office_97::MsoPictureColorType ColorType;
    OLECHECK(this->get_ColorType((Office_97::MsoPictureColorType*)&ColorType));
    return ColorType;
  }

  float __fastcall get_Contrast(void)
  {
    float Contrast;
    OLECHECK(this->get_Contrast((float*)&Contrast));
    return Contrast;
  }

  float __fastcall get_CropBottom(void)
  {
    float CropBottom;
    OLECHECK(this->get_CropBottom((float*)&CropBottom));
    return CropBottom;
  }

  float __fastcall get_CropLeft(void)
  {
    float CropLeft;
    OLECHECK(this->get_CropLeft((float*)&CropLeft));
    return CropLeft;
  }

  float __fastcall get_CropRight(void)
  {
    float CropRight;
    OLECHECK(this->get_CropRight((float*)&CropRight));
    return CropRight;
  }

  float __fastcall get_CropTop(void)
  {
    float CropTop;
    OLECHECK(this->get_CropTop((float*)&CropTop));
    return CropTop;
  }

  Office_97::MsoRGBType __fastcall get_TransparencyColor(void)
  {
    Office_97::MsoRGBType TransparencyColor;
    OLECHECK(this->get_TransparencyColor((Office_97::MsoRGBType*)&TransparencyColor));
    return TransparencyColor;
  }

  Office_97::MsoTriState __fastcall get_TransparentBackground(void)
  {
    Office_97::MsoTriState TransparentBackground;
    OLECHECK(this->get_TransparentBackground((Office_97::MsoTriState*)&TransparentBackground));
    return TransparentBackground;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Brightness = {read = get_Brightness, write = set_Brightness};
  __property   Office_97::MsoPictureColorType ColorType = {read = get_ColorType, write = set_ColorType};
  __property   float           Contrast = {read = get_Contrast, write = set_Contrast};
  __property   float           CropBottom = {read = get_CropBottom, write = set_CropBottom};
  __property   float           CropLeft = {read = get_CropLeft, write = set_CropLeft};
  __property   float           CropRight = {read = get_CropRight, write = set_CropRight};
  __property   float           CropTop = {read = get_CropTop, write = set_CropTop};
  __property   Office_97::MsoRGBType TransparencyColor = {read = get_TransparencyColor, write = set_TransparencyColor};
  __property   Office_97::MsoTriState TransparentBackground = {read = get_TransparentBackground, write = set_TransparentBackground};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShadowFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031B-0000-0000-C000-000000000046}
// *********************************************************************//
interface ShadowFormat  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementOffsetX(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementOffsetY(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ForeColor(Office_97::ColorFormat** ForeColor/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_ForeColor(Office_97::ColorFormat* ForeColor/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Obscured(Office_97::MsoTriState* Obscured/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_Obscured(Office_97::MsoTriState Obscured/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_OffsetX(float* OffsetX/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_OffsetX(float OffsetX/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_OffsetY(float* OffsetY/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_OffsetY(float OffsetY/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Transparency(float* Transparency/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Transparency(float Transparency/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_97::MsoShadowType* Type/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Office_97::MsoShadowType Type/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_97::MsoTriState Visible/*[in]*/) = 0; // [106]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_97::ColorFormat* __fastcall get_ForeColor(void)
  {
    Office_97::ColorFormat* ForeColor;
    OLECHECK(this->get_ForeColor((Office_97::ColorFormat**)&ForeColor));
    return ForeColor;
  }

  Office_97::MsoTriState __fastcall get_Obscured(void)
  {
    Office_97::MsoTriState Obscured;
    OLECHECK(this->get_Obscured((Office_97::MsoTriState*)&Obscured));
    return Obscured;
  }

  float __fastcall get_OffsetX(void)
  {
    float OffsetX;
    OLECHECK(this->get_OffsetX((float*)&OffsetX));
    return OffsetX;
  }

  float __fastcall get_OffsetY(void)
  {
    float OffsetY;
    OLECHECK(this->get_OffsetY((float*)&OffsetY));
    return OffsetY;
  }

  float __fastcall get_Transparency(void)
  {
    float Transparency;
    OLECHECK(this->get_Transparency((float*)&Transparency));
    return Transparency;
  }

  Office_97::MsoShadowType __fastcall get_Type(void)
  {
    Office_97::MsoShadowType Type;
    OLECHECK(this->get_Type((Office_97::MsoShadowType*)&Type));
    return Type;
  }

  Office_97::MsoTriState __fastcall get_Visible(void)
  {
    Office_97::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_97::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_97::MsoTriState Obscured = {read = get_Obscured, write = set_Obscured};
  __property   float           OffsetX = {read = get_OffsetX, write = set_OffsetX};
  __property   float           OffsetY = {read = get_OffsetY, write = set_OffsetY};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_97::MsoShadowType Type = {read = get_Type, write = set_Type};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Shape
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031C-0000-0000-C000-000000000046}
// *********************************************************************//
interface Shape  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Apply(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Office_97::Shape** Duplicate/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE Flip(Office_97::MsoFlipCmd FlipCmd/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE IncrementLeft(float Increment/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotation(float Increment/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE IncrementTop(float Increment/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE PickUp(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE RerouteConnections(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE ScaleHeight(float Factor/*[in]*/, 
                                                Office_97::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                                Office_97::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE ScaleWidth(float Factor/*[in]*/, 
                                               Office_97::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                               Office_97::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Select(VARIANT Replace/*[in,opt]*/= TNoParam()) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Ungroup(Office_97::ShapeRange** Ungroup/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE ZOrder(Office_97::MsoZOrderCmd ZOrderCmd/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_Adjustments(Office_97::Adjustments** Adjustments/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_AutoShapeType(Office_97::MsoAutoShapeType* AutoShapeType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_AutoShapeType(Office_97::MsoAutoShapeType AutoShapeType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BlackWhiteMode(Office_97::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BlackWhiteMode(Office_97::MsoBlackWhiteMode BlackWhiteMode/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Callout(Office_97::CalloutFormat** Callout/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Connector(Office_97::MsoTriState* Connector/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectorFormat(Office_97::ConnectorFormat** ConnectorFormat/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Fill(Office_97::FillFormat** Fill/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_GroupItems(Office_97::GroupShapes** GroupItems/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalFlip(Office_97::MsoTriState* HorizontalFlip/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Office_97::LineFormat** Line/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_LockAspectRatio(Office_97::MsoTriState* LockAspectRatio/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_LockAspectRatio(Office_97::MsoTriState LockAspectRatio/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_Nodes(Office_97::ShapeNodes** Nodes/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_Rotation(float* Rotation/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_Rotation(float Rotation/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_PictureFormat(Office_97::PictureFormat** Picture/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_Shadow(Office_97::ShadowFormat** Shadow/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_TextEffect(Office_97::TextEffectFormat** TextEffect/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_TextFrame(Office_97::TextFrame** TextFrame/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_ThreeD(Office_97::ThreeDFormat** ThreeD/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_97::MsoShapeType* Type/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalFlip(Office_97::MsoTriState* VerticalFlip/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE get_Vertices(VARIANT* Vertices/*[out,retval]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_97::MsoTriState Visible/*[in]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/) = 0; // [129]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_97::Shape* __fastcall Duplicate(void)
  {
    Office_97::Shape* Duplicate;
    OLECHECK(this->Duplicate((Office_97::Shape**)&Duplicate));
    return Duplicate;
  }

  Office_97::ShapeRange* __fastcall Ungroup(void)
  {
    Office_97::ShapeRange* Ungroup;
    OLECHECK(this->Ungroup((Office_97::ShapeRange**)&Ungroup));
    return Ungroup;
  }

  Office_97::Adjustments* __fastcall get_Adjustments(void)
  {
    Office_97::Adjustments* Adjustments;
    OLECHECK(this->get_Adjustments((Office_97::Adjustments**)&Adjustments));
    return Adjustments;
  }

  Office_97::MsoAutoShapeType __fastcall get_AutoShapeType(void)
  {
    Office_97::MsoAutoShapeType AutoShapeType;
    OLECHECK(this->get_AutoShapeType((Office_97::MsoAutoShapeType*)&AutoShapeType));
    return AutoShapeType;
  }

  Office_97::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void)
  {
    Office_97::MsoBlackWhiteMode BlackWhiteMode;
    OLECHECK(this->get_BlackWhiteMode((Office_97::MsoBlackWhiteMode*)&BlackWhiteMode));
    return BlackWhiteMode;
  }

  Office_97::CalloutFormat* __fastcall get_Callout(void)
  {
    Office_97::CalloutFormat* Callout;
    OLECHECK(this->get_Callout((Office_97::CalloutFormat**)&Callout));
    return Callout;
  }

  int __fastcall get_ConnectionSiteCount(void)
  {
    int ConnectionSiteCount;
    OLECHECK(this->get_ConnectionSiteCount((int*)&ConnectionSiteCount));
    return ConnectionSiteCount;
  }

  Office_97::MsoTriState __fastcall get_Connector(void)
  {
    Office_97::MsoTriState Connector;
    OLECHECK(this->get_Connector((Office_97::MsoTriState*)&Connector));
    return Connector;
  }

  Office_97::ConnectorFormat* __fastcall get_ConnectorFormat(void)
  {
    Office_97::ConnectorFormat* ConnectorFormat;
    OLECHECK(this->get_ConnectorFormat((Office_97::ConnectorFormat**)&ConnectorFormat));
    return ConnectorFormat;
  }

  Office_97::FillFormat* __fastcall get_Fill(void)
  {
    Office_97::FillFormat* Fill;
    OLECHECK(this->get_Fill((Office_97::FillFormat**)&Fill));
    return Fill;
  }

  Office_97::GroupShapes* __fastcall get_GroupItems(void)
  {
    Office_97::GroupShapes* GroupItems;
    OLECHECK(this->get_GroupItems((Office_97::GroupShapes**)&GroupItems));
    return GroupItems;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Office_97::MsoTriState __fastcall get_HorizontalFlip(void)
  {
    Office_97::MsoTriState HorizontalFlip;
    OLECHECK(this->get_HorizontalFlip((Office_97::MsoTriState*)&HorizontalFlip));
    return HorizontalFlip;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  Office_97::LineFormat* __fastcall get_Line(void)
  {
    Office_97::LineFormat* Line;
    OLECHECK(this->get_Line((Office_97::LineFormat**)&Line));
    return Line;
  }

  Office_97::MsoTriState __fastcall get_LockAspectRatio(void)
  {
    Office_97::MsoTriState LockAspectRatio;
    OLECHECK(this->get_LockAspectRatio((Office_97::MsoTriState*)&LockAspectRatio));
    return LockAspectRatio;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Office_97::ShapeNodes* __fastcall get_Nodes(void)
  {
    Office_97::ShapeNodes* Nodes;
    OLECHECK(this->get_Nodes((Office_97::ShapeNodes**)&Nodes));
    return Nodes;
  }

  float __fastcall get_Rotation(void)
  {
    float Rotation;
    OLECHECK(this->get_Rotation((float*)&Rotation));
    return Rotation;
  }

  Office_97::PictureFormat* __fastcall get_PictureFormat(void)
  {
    Office_97::PictureFormat* Picture;
    OLECHECK(this->get_PictureFormat((Office_97::PictureFormat**)&Picture));
    return Picture;
  }

  Office_97::ShadowFormat* __fastcall get_Shadow(void)
  {
    Office_97::ShadowFormat* Shadow;
    OLECHECK(this->get_Shadow((Office_97::ShadowFormat**)&Shadow));
    return Shadow;
  }

  Office_97::TextEffectFormat* __fastcall get_TextEffect(void)
  {
    Office_97::TextEffectFormat* TextEffect;
    OLECHECK(this->get_TextEffect((Office_97::TextEffectFormat**)&TextEffect));
    return TextEffect;
  }

  Office_97::TextFrame* __fastcall get_TextFrame(void)
  {
    Office_97::TextFrame* TextFrame;
    OLECHECK(this->get_TextFrame((Office_97::TextFrame**)&TextFrame));
    return TextFrame;
  }

  Office_97::ThreeDFormat* __fastcall get_ThreeD(void)
  {
    Office_97::ThreeDFormat* ThreeD;
    OLECHECK(this->get_ThreeD((Office_97::ThreeDFormat**)&ThreeD));
    return ThreeD;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  Office_97::MsoShapeType __fastcall get_Type(void)
  {
    Office_97::MsoShapeType Type;
    OLECHECK(this->get_Type((Office_97::MsoShapeType*)&Type));
    return Type;
  }

  Office_97::MsoTriState __fastcall get_VerticalFlip(void)
  {
    Office_97::MsoTriState VerticalFlip;
    OLECHECK(this->get_VerticalFlip((Office_97::MsoTriState*)&VerticalFlip));
    return VerticalFlip;
  }

  VARIANT __fastcall get_Vertices(void)
  {
    VARIANT Vertices;
    OLECHECK(this->get_Vertices((VARIANT*)&Vertices));
    return Vertices;
  }

  Office_97::MsoTriState __fastcall get_Visible(void)
  {
    Office_97::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_97::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall get_ZOrderPosition(void)
  {
    int ZOrderPosition;
    OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
    return ZOrderPosition;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::Adjustments* Adjustments = {read = get_Adjustments};
  __property   Office_97::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_97::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Office_97::CalloutFormat* Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_97::MsoTriState Connector = {read = get_Connector};
  __property   Office_97::ConnectorFormat* ConnectorFormat = {read = get_ConnectorFormat};
  __property   Office_97::FillFormat* Fill = {read = get_Fill};
  __property   Office_97::GroupShapes* GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_97::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Office_97::LineFormat* Line = {read = get_Line};
  __property   Office_97::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name};
  __property   Office_97::ShapeNodes* Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Office_97::PictureFormat* PictureFormat = {read = get_PictureFormat};
  __property   Office_97::ShadowFormat* Shadow = {read = get_Shadow};
  __property   Office_97::TextEffectFormat* TextEffect = {read = get_TextEffect};
  __property   Office_97::TextFrame* TextFrame = {read = get_TextFrame};
  __property   Office_97::ThreeDFormat* ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_97::MsoShapeType Type = {read = get_Type};
  __property   Office_97::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ShapeRange
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031D-0000-0000-C000-000000000046}
// *********************************************************************//
interface ShapeRange  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Office_97::Shape** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Align(Office_97::MsoAlignCmd AlignCmd/*[in]*/, 
                                          Office_97::MsoTriState RelativeTo/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Apply(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE Distribute(Office_97::MsoDistributeCmd DistributeCmd/*[in]*/, 
                                               Office_97::MsoTriState RelativeTo/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE Duplicate(Office_97::ShapeRange** Duplicate/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE Flip(Office_97::MsoFlipCmd FlipCmd/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE IncrementLeft(float Increment/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotation(float Increment/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE IncrementTop(float Increment/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE Group(Office_97::Shape** Group/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE PickUp(void) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Regroup(Office_97::Shape** Regroup/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE RerouteConnections(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE ScaleHeight(float Factor/*[in]*/, 
                                                Office_97::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                                Office_97::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE ScaleWidth(float Factor/*[in]*/, 
                                               Office_97::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                               Office_97::MsoScaleFrom fScale/*[in,def,opt]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE Select(VARIANT Replace/*[in,opt]*/= TNoParam()) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE SetShapesDefaultProperties(void) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE Ungroup(Office_97::ShapeRange** Ungroup/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE ZOrder(Office_97::MsoZOrderCmd ZOrderCmd/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_Adjustments(Office_97::Adjustments** Adjustments/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_AutoShapeType(Office_97::MsoAutoShapeType* AutoShapeType/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_AutoShapeType(Office_97::MsoAutoShapeType AutoShapeType/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_BlackWhiteMode(Office_97::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_BlackWhiteMode(Office_97::MsoBlackWhiteMode BlackWhiteMode/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Callout(Office_97::CalloutFormat** Callout/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_Connector(Office_97::MsoTriState* Connector/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectorFormat(Office_97::ConnectorFormat** ConnectorFormat/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_Fill(Office_97::FillFormat** Fill/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_GroupItems(Office_97::GroupShapes** GroupItems/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_Height(float* Height/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_Height(float Height/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalFlip(Office_97::MsoTriState* HorizontalFlip/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Left(float* Left/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Left(float Left/*[in]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE get_Line(Office_97::LineFormat** Line/*[out,retval]*/) = 0; // [112]
  virtual HRESULT STDMETHODCALLTYPE get_LockAspectRatio(Office_97::MsoTriState* LockAspectRatio/*[out,retval]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE set_LockAspectRatio(Office_97::MsoTriState LockAspectRatio/*[in]*/) = 0; // [113]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* Name/*[out,retval]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR Name/*[in]*/) = 0; // [115]
  virtual HRESULT STDMETHODCALLTYPE get_Nodes(Office_97::ShapeNodes** Nodes/*[out,retval]*/) = 0; // [116]
  virtual HRESULT STDMETHODCALLTYPE get_Rotation(float* Rotation/*[out,retval]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE set_Rotation(float Rotation/*[in]*/) = 0; // [117]
  virtual HRESULT STDMETHODCALLTYPE get_PictureFormat(Office_97::PictureFormat** Picture/*[out,retval]*/) = 0; // [118]
  virtual HRESULT STDMETHODCALLTYPE get_Shadow(Office_97::ShadowFormat** Shadow/*[out,retval]*/) = 0; // [119]
  virtual HRESULT STDMETHODCALLTYPE get_TextEffect(Office_97::TextEffectFormat** TextEffect/*[out,retval]*/) = 0; // [120]
  virtual HRESULT STDMETHODCALLTYPE get_TextFrame(Office_97::TextFrame** TextFrame/*[out,retval]*/) = 0; // [121]
  virtual HRESULT STDMETHODCALLTYPE get_ThreeD(Office_97::ThreeDFormat** ThreeD/*[out,retval]*/) = 0; // [122]
  virtual HRESULT STDMETHODCALLTYPE get_Top(float* Top/*[out,retval]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE set_Top(float Top/*[in]*/) = 0; // [123]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Office_97::MsoShapeType* Type/*[out,retval]*/) = 0; // [124]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalFlip(Office_97::MsoTriState* VerticalFlip/*[out,retval]*/) = 0; // [125]
  virtual HRESULT STDMETHODCALLTYPE get_Vertices(VARIANT* Vertices/*[out,retval]*/) = 0; // [126]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_97::MsoTriState Visible/*[in]*/) = 0; // [127]
  virtual HRESULT STDMETHODCALLTYPE get_Width(float* Width/*[out,retval]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE set_Width(float Width/*[in]*/) = 0; // [128]
  virtual HRESULT STDMETHODCALLTYPE get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/) = 0; // [129]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Office_97::Shape* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Office_97::Shape* Item;
    OLECHECK(this->Item(Index, (Office_97::Shape**)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  Office_97::ShapeRange* __fastcall Duplicate(void)
  {
    Office_97::ShapeRange* Duplicate;
    OLECHECK(this->Duplicate((Office_97::ShapeRange**)&Duplicate));
    return Duplicate;
  }

  Office_97::Shape* __fastcall Group(void)
  {
    Office_97::Shape* Group;
    OLECHECK(this->Group((Office_97::Shape**)&Group));
    return Group;
  }

  Office_97::Shape* __fastcall Regroup(void)
  {
    Office_97::Shape* Regroup;
    OLECHECK(this->Regroup((Office_97::Shape**)&Regroup));
    return Regroup;
  }

  Office_97::ShapeRange* __fastcall Ungroup(void)
  {
    Office_97::ShapeRange* Ungroup;
    OLECHECK(this->Ungroup((Office_97::ShapeRange**)&Ungroup));
    return Ungroup;
  }

  Office_97::Adjustments* __fastcall get_Adjustments(void)
  {
    Office_97::Adjustments* Adjustments;
    OLECHECK(this->get_Adjustments((Office_97::Adjustments**)&Adjustments));
    return Adjustments;
  }

  Office_97::MsoAutoShapeType __fastcall get_AutoShapeType(void)
  {
    Office_97::MsoAutoShapeType AutoShapeType;
    OLECHECK(this->get_AutoShapeType((Office_97::MsoAutoShapeType*)&AutoShapeType));
    return AutoShapeType;
  }

  Office_97::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void)
  {
    Office_97::MsoBlackWhiteMode BlackWhiteMode;
    OLECHECK(this->get_BlackWhiteMode((Office_97::MsoBlackWhiteMode*)&BlackWhiteMode));
    return BlackWhiteMode;
  }

  Office_97::CalloutFormat* __fastcall get_Callout(void)
  {
    Office_97::CalloutFormat* Callout;
    OLECHECK(this->get_Callout((Office_97::CalloutFormat**)&Callout));
    return Callout;
  }

  int __fastcall get_ConnectionSiteCount(void)
  {
    int ConnectionSiteCount;
    OLECHECK(this->get_ConnectionSiteCount((int*)&ConnectionSiteCount));
    return ConnectionSiteCount;
  }

  Office_97::MsoTriState __fastcall get_Connector(void)
  {
    Office_97::MsoTriState Connector;
    OLECHECK(this->get_Connector((Office_97::MsoTriState*)&Connector));
    return Connector;
  }

  Office_97::ConnectorFormat* __fastcall get_ConnectorFormat(void)
  {
    Office_97::ConnectorFormat* ConnectorFormat;
    OLECHECK(this->get_ConnectorFormat((Office_97::ConnectorFormat**)&ConnectorFormat));
    return ConnectorFormat;
  }

  Office_97::FillFormat* __fastcall get_Fill(void)
  {
    Office_97::FillFormat* Fill;
    OLECHECK(this->get_Fill((Office_97::FillFormat**)&Fill));
    return Fill;
  }

  Office_97::GroupShapes* __fastcall get_GroupItems(void)
  {
    Office_97::GroupShapes* GroupItems;
    OLECHECK(this->get_GroupItems((Office_97::GroupShapes**)&GroupItems));
    return GroupItems;
  }

  float __fastcall get_Height(void)
  {
    float Height;
    OLECHECK(this->get_Height((float*)&Height));
    return Height;
  }

  Office_97::MsoTriState __fastcall get_HorizontalFlip(void)
  {
    Office_97::MsoTriState HorizontalFlip;
    OLECHECK(this->get_HorizontalFlip((Office_97::MsoTriState*)&HorizontalFlip));
    return HorizontalFlip;
  }

  float __fastcall get_Left(void)
  {
    float Left;
    OLECHECK(this->get_Left((float*)&Left));
    return Left;
  }

  Office_97::LineFormat* __fastcall get_Line(void)
  {
    Office_97::LineFormat* Line;
    OLECHECK(this->get_Line((Office_97::LineFormat**)&Line));
    return Line;
  }

  Office_97::MsoTriState __fastcall get_LockAspectRatio(void)
  {
    Office_97::MsoTriState LockAspectRatio;
    OLECHECK(this->get_LockAspectRatio((Office_97::MsoTriState*)&LockAspectRatio));
    return LockAspectRatio;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR Name = 0;
    OLECHECK(this->get_Name((BSTR*)&Name));
    return Name;
  }

  Office_97::ShapeNodes* __fastcall get_Nodes(void)
  {
    Office_97::ShapeNodes* Nodes;
    OLECHECK(this->get_Nodes((Office_97::ShapeNodes**)&Nodes));
    return Nodes;
  }

  float __fastcall get_Rotation(void)
  {
    float Rotation;
    OLECHECK(this->get_Rotation((float*)&Rotation));
    return Rotation;
  }

  Office_97::PictureFormat* __fastcall get_PictureFormat(void)
  {
    Office_97::PictureFormat* Picture;
    OLECHECK(this->get_PictureFormat((Office_97::PictureFormat**)&Picture));
    return Picture;
  }

  Office_97::ShadowFormat* __fastcall get_Shadow(void)
  {
    Office_97::ShadowFormat* Shadow;
    OLECHECK(this->get_Shadow((Office_97::ShadowFormat**)&Shadow));
    return Shadow;
  }

  Office_97::TextEffectFormat* __fastcall get_TextEffect(void)
  {
    Office_97::TextEffectFormat* TextEffect;
    OLECHECK(this->get_TextEffect((Office_97::TextEffectFormat**)&TextEffect));
    return TextEffect;
  }

  Office_97::TextFrame* __fastcall get_TextFrame(void)
  {
    Office_97::TextFrame* TextFrame;
    OLECHECK(this->get_TextFrame((Office_97::TextFrame**)&TextFrame));
    return TextFrame;
  }

  Office_97::ThreeDFormat* __fastcall get_ThreeD(void)
  {
    Office_97::ThreeDFormat* ThreeD;
    OLECHECK(this->get_ThreeD((Office_97::ThreeDFormat**)&ThreeD));
    return ThreeD;
  }

  float __fastcall get_Top(void)
  {
    float Top;
    OLECHECK(this->get_Top((float*)&Top));
    return Top;
  }

  Office_97::MsoShapeType __fastcall get_Type(void)
  {
    Office_97::MsoShapeType Type;
    OLECHECK(this->get_Type((Office_97::MsoShapeType*)&Type));
    return Type;
  }

  Office_97::MsoTriState __fastcall get_VerticalFlip(void)
  {
    Office_97::MsoTriState VerticalFlip;
    OLECHECK(this->get_VerticalFlip((Office_97::MsoTriState*)&VerticalFlip));
    return VerticalFlip;
  }

  VARIANT __fastcall get_Vertices(void)
  {
    VARIANT Vertices;
    OLECHECK(this->get_Vertices((VARIANT*)&Vertices));
    return Vertices;
  }

  Office_97::MsoTriState __fastcall get_Visible(void)
  {
    Office_97::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_97::MsoTriState*)&Visible));
    return Visible;
  }

  float __fastcall get_Width(void)
  {
    float Width;
    OLECHECK(this->get_Width((float*)&Width));
    return Width;
  }

  int __fastcall get_ZOrderPosition(void)
  {
    int ZOrderPosition;
    OLECHECK(this->get_ZOrderPosition((int*)&ZOrderPosition));
    return ZOrderPosition;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_97::Adjustments* Adjustments = {read = get_Adjustments};
  __property   Office_97::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_97::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Office_97::CalloutFormat* Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_97::MsoTriState Connector = {read = get_Connector};
  __property   Office_97::ConnectorFormat* ConnectorFormat = {read = get_ConnectorFormat};
  __property   Office_97::FillFormat* Fill = {read = get_Fill};
  __property   Office_97::GroupShapes* GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_97::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Office_97::LineFormat* Line = {read = get_Line};
  __property   Office_97::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name};
  __property   Office_97::ShapeNodes* Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Office_97::PictureFormat* PictureFormat = {read = get_PictureFormat};
  __property   Office_97::ShadowFormat* Shadow = {read = get_Shadow};
  __property   Office_97::TextEffectFormat* TextEffect = {read = get_TextEffect};
  __property   Office_97::TextFrame* TextFrame = {read = get_TextFrame};
  __property   Office_97::ThreeDFormat* ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_97::MsoShapeType Type = {read = get_Type};
  __property   Office_97::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Shapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031E-0000-0000-C000-000000000046}
// *********************************************************************//
interface Shapes  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* Count/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE Item(VARIANT Index/*[in]*/, 
                                         Office_97::Shape** Item/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE AddCallout(Office_97::MsoCalloutType Type/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Office_97::Shape** Callout/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE AddConnector(Office_97::MsoConnectorType Type/*[in]*/, 
                                                 float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                 float EndX/*[in]*/, float EndY/*[in]*/, 
                                                 Office_97::Shape** Connector/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE AddCurve(VARIANT SafeArrayOfPoints/*[in]*/, 
                                             Office_97::Shape** Curve/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE AddLabel(Office_97::MsoTextOrientation Orientation/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Office_97::Shape** Label/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                            float EndX/*[in]*/, float EndY/*[in]*/, 
                                            Office_97::Shape** Line/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE AddPicture(BSTR FileName/*[in]*/, 
                                               Office_97::MsoTriState LinkToFile/*[in]*/, 
                                               Office_97::MsoTriState SaveWithDocument/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Office_97::Shape** Picture/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/, 
                                                Office_97::Shape** Polyline/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE AddShape(Office_97::MsoAutoShapeType Type/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/, 
                                             float Width/*[in]*/, float Height/*[in]*/, 
                                             Office_97::Shape** Shape/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE AddTextEffect(Office_97::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                                  BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                  float FontSize/*[in]*/, 
                                                  Office_97::MsoTriState FontBold/*[in]*/, 
                                                  Office_97::MsoTriState FontItalic/*[in]*/, 
                                                  float Left/*[in]*/, float Top/*[in]*/, 
                                                  Office_97::Shape** TextEffect/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE AddTextbox(Office_97::MsoTextOrientation Orientation/*[in]*/, 
                                               float Left/*[in]*/, float Top/*[in]*/, 
                                               float Width/*[in]*/, float Height/*[in]*/, 
                                               Office_97::Shape** Textbox/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE BuildFreeform(Office_97::MsoEditingType EditingType/*[in]*/, 
                                                  float X1/*[in]*/, float Y1/*[in]*/, 
                                                  Office_97::FreeformBuilder** FreeformBuilder/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Range(VARIANT Index/*[in]*/, 
                                          Office_97::ShapeRange** Range/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE SelectAll(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_Background(Office_97::Shape** Background/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_Default(Office_97::Shape** Default/*[out,retval]*/) = 0; // [101]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  int __fastcall get_Count(void)
  {
    int Count;
    OLECHECK(this->get_Count((int*)&Count));
    return Count;
  }

  Office_97::Shape* __fastcall Item(VARIANT Index/*[in]*/)
  {
    Office_97::Shape* Item;
    OLECHECK(this->Item(Index, (Office_97::Shape**)&Item));
    return Item;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN _NewEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&_NewEnum));
    return _NewEnum;
  }

  Office_97::Shape* __fastcall AddCallout(Office_97::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                                          float Top/*[in]*/, float Width/*[in]*/, 
                                          float Height/*[in]*/)
  {
    Office_97::Shape* Callout;
    OLECHECK(this->AddCallout(Type, Left, Top, Width, Height, (Office_97::Shape**)&Callout));
    return Callout;
  }

  Office_97::Shape* __fastcall AddConnector(Office_97::MsoConnectorType Type/*[in]*/, 
                                            float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                            float EndX/*[in]*/, float EndY/*[in]*/)
  {
    Office_97::Shape* Connector;
    OLECHECK(this->AddConnector(Type, BeginX, BeginY, EndX, EndY, (Office_97::Shape**)&Connector));
    return Connector;
  }

  Office_97::Shape* __fastcall AddCurve(VARIANT SafeArrayOfPoints/*[in]*/)
  {
    Office_97::Shape* Curve;
    OLECHECK(this->AddCurve(SafeArrayOfPoints, (Office_97::Shape**)&Curve));
    return Curve;
  }

  Office_97::Shape* __fastcall AddLabel(Office_97::MsoTextOrientation Orientation/*[in]*/, 
                                        float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                        float Height/*[in]*/)
  {
    Office_97::Shape* Label;
    OLECHECK(this->AddLabel(Orientation, Left, Top, Width, Height, (Office_97::Shape**)&Label));
    return Label;
  }

  Office_97::Shape* __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                       float EndX/*[in]*/, float EndY/*[in]*/)
  {
    Office_97::Shape* Line;
    OLECHECK(this->AddLine(BeginX, BeginY, EndX, EndY, (Office_97::Shape**)&Line));
    return Line;
  }

  Office_97::Shape* __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                          Office_97::MsoTriState LinkToFile/*[in]*/, 
                                          Office_97::MsoTriState SaveWithDocument/*[in]*/, 
                                          float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                          float Height/*[in]*/)
  {
    Office_97::Shape* Picture;
    OLECHECK(this->AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, (Office_97::Shape**)&Picture));
    return Picture;
  }

  Office_97::Shape* __fastcall AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/)
  {
    Office_97::Shape* Polyline;
    OLECHECK(this->AddPolyline(SafeArrayOfPoints, (Office_97::Shape**)&Polyline));
    return Polyline;
  }

  Office_97::Shape* __fastcall AddShape(Office_97::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                                        float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
  {
    Office_97::Shape* Shape;
    OLECHECK(this->AddShape(Type, Left, Top, Width, Height, (Office_97::Shape**)&Shape));
    return Shape;
  }

  Office_97::Shape* __fastcall AddTextEffect(Office_97::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                             BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                             float FontSize/*[in]*/, 
                                             Office_97::MsoTriState FontBold/*[in]*/, 
                                             Office_97::MsoTriState FontItalic/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/)
  {
    Office_97::Shape* TextEffect;
    OLECHECK(this->AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, 
                                 Left, Top, (Office_97::Shape**)&TextEffect));
    return TextEffect;
  }

  Office_97::Shape* __fastcall AddTextbox(Office_97::MsoTextOrientation Orientation/*[in]*/, 
                                          float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                          float Height/*[in]*/)
  {
    Office_97::Shape* Textbox;
    OLECHECK(this->AddTextbox(Orientation, Left, Top, Width, Height, (Office_97::Shape**)&Textbox));
    return Textbox;
  }

  Office_97::FreeformBuilder* __fastcall BuildFreeform(Office_97::MsoEditingType EditingType/*[in]*/, 
                                                       float X1/*[in]*/, float Y1/*[in]*/)
  {
    Office_97::FreeformBuilder* FreeformBuilder;
    OLECHECK(this->BuildFreeform(EditingType, X1, Y1, (Office_97::FreeformBuilder**)&FreeformBuilder));
    return FreeformBuilder;
  }

  Office_97::ShapeRange* __fastcall Range(VARIANT Index/*[in]*/)
  {
    Office_97::ShapeRange* Range;
    OLECHECK(this->Range(Index, (Office_97::ShapeRange**)&Range));
    return Range;
  }

  Office_97::Shape* __fastcall get_Background(void)
  {
    Office_97::Shape* Background;
    OLECHECK(this->get_Background((Office_97::Shape**)&Background));
    return Background;
  }

  Office_97::Shape* __fastcall get_Default(void)
  {
    Office_97::Shape* Default;
    OLECHECK(this->get_Default((Office_97::Shape**)&Default));
    return Default;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_97::Shape* Background = {read = get_Background};
  __property   Office_97::Shape* Default = {read = get_Default};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextEffectFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031F-0000-0000-C000-000000000046}
// *********************************************************************//
interface TextEffectFormat  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE ToggleVerticalText(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Alignment(Office_97::MsoTextEffectAlignment* Alignment/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Alignment(Office_97::MsoTextEffectAlignment Alignment/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_FontBold(Office_97::MsoTriState* FontBold/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_FontBold(Office_97::MsoTriState FontBold/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_FontItalic(Office_97::MsoTriState* FontItalic/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_FontItalic(Office_97::MsoTriState FontItalic/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_FontName(BSTR* FontName/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_FontName(BSTR FontName/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_FontSize(float* FontSize/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_FontSize(float FontSize/*[in]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_KernedPairs(Office_97::MsoTriState* KernedPairs/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_KernedPairs(Office_97::MsoTriState KernedPairs/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_NormalizedHeight(Office_97::MsoTriState* NormalizedHeight/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_NormalizedHeight(Office_97::MsoTriState NormalizedHeight/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetShape(Office_97::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_PresetShape(Office_97::MsoPresetTextEffectShape PresetShape/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetTextEffect(Office_97::MsoPresetTextEffect* Preset/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE set_PresetTextEffect(Office_97::MsoPresetTextEffect Preset/*[in]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_RotatedChars(Office_97::MsoTriState* RotatedChars/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_RotatedChars(Office_97::MsoTriState RotatedChars/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* Text/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR Text/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Tracking(float* Tracking/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Tracking(float Tracking/*[in]*/) = 0; // [111]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  Office_97::MsoTextEffectAlignment __fastcall get_Alignment(void)
  {
    Office_97::MsoTextEffectAlignment Alignment;
    OLECHECK(this->get_Alignment((Office_97::MsoTextEffectAlignment*)&Alignment));
    return Alignment;
  }

  Office_97::MsoTriState __fastcall get_FontBold(void)
  {
    Office_97::MsoTriState FontBold;
    OLECHECK(this->get_FontBold((Office_97::MsoTriState*)&FontBold));
    return FontBold;
  }

  Office_97::MsoTriState __fastcall get_FontItalic(void)
  {
    Office_97::MsoTriState FontItalic;
    OLECHECK(this->get_FontItalic((Office_97::MsoTriState*)&FontItalic));
    return FontItalic;
  }

  BSTR __fastcall get_FontName(void)
  {
    BSTR FontName = 0;
    OLECHECK(this->get_FontName((BSTR*)&FontName));
    return FontName;
  }

  float __fastcall get_FontSize(void)
  {
    float FontSize;
    OLECHECK(this->get_FontSize((float*)&FontSize));
    return FontSize;
  }

  Office_97::MsoTriState __fastcall get_KernedPairs(void)
  {
    Office_97::MsoTriState KernedPairs;
    OLECHECK(this->get_KernedPairs((Office_97::MsoTriState*)&KernedPairs));
    return KernedPairs;
  }

  Office_97::MsoTriState __fastcall get_NormalizedHeight(void)
  {
    Office_97::MsoTriState NormalizedHeight;
    OLECHECK(this->get_NormalizedHeight((Office_97::MsoTriState*)&NormalizedHeight));
    return NormalizedHeight;
  }

  Office_97::MsoPresetTextEffectShape __fastcall get_PresetShape(void)
  {
    Office_97::MsoPresetTextEffectShape PresetShape;
    OLECHECK(this->get_PresetShape((Office_97::MsoPresetTextEffectShape*)&PresetShape));
    return PresetShape;
  }

  Office_97::MsoPresetTextEffect __fastcall get_PresetTextEffect(void)
  {
    Office_97::MsoPresetTextEffect Preset;
    OLECHECK(this->get_PresetTextEffect((Office_97::MsoPresetTextEffect*)&Preset));
    return Preset;
  }

  Office_97::MsoTriState __fastcall get_RotatedChars(void)
  {
    Office_97::MsoTriState RotatedChars;
    OLECHECK(this->get_RotatedChars((Office_97::MsoTriState*)&RotatedChars));
    return RotatedChars;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR Text = 0;
    OLECHECK(this->get_Text((BSTR*)&Text));
    return Text;
  }

  float __fastcall get_Tracking(void)
  {
    float Tracking;
    OLECHECK(this->get_Tracking((float*)&Tracking));
    return Tracking;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoTextEffectAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Office_97::MsoTriState FontBold = {read = get_FontBold, write = set_FontBold};
  __property   Office_97::MsoTriState FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName};
  __property   float           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   Office_97::MsoTriState KernedPairs = {read = get_KernedPairs, write = set_KernedPairs};
  __property   Office_97::MsoTriState NormalizedHeight = {read = get_NormalizedHeight, write = set_NormalizedHeight};
  __property   Office_97::MsoPresetTextEffectShape PresetShape = {read = get_PresetShape, write = set_PresetShape};
  __property   Office_97::MsoPresetTextEffect PresetTextEffect = {read = get_PresetTextEffect, write = set_PresetTextEffect};
  __property   Office_97::MsoTriState RotatedChars = {read = get_RotatedChars, write = set_RotatedChars};
  __property   BSTR            Text = {read = get_Text};
  __property   float           Tracking = {read = get_Tracking, write = set_Tracking};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: TextFrame
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0320-0000-0000-C000-000000000046}
// *********************************************************************//
interface TextFrame  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_MarginBottom(float* MarginBottom/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_MarginBottom(float MarginBottom/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_MarginLeft(float* MarginLeft/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE set_MarginLeft(float MarginLeft/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_MarginRight(float* MarginRight/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_MarginRight(float MarginRight/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_MarginTop(float* MarginTop/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_MarginTop(float MarginTop/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_Orientation(Office_97::MsoTextOrientation* Orientation/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE set_Orientation(Office_97::MsoTextOrientation Orientation/*[in]*/) = 0; // [104]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_MarginBottom(void)
  {
    float MarginBottom;
    OLECHECK(this->get_MarginBottom((float*)&MarginBottom));
    return MarginBottom;
  }

  float __fastcall get_MarginLeft(void)
  {
    float MarginLeft;
    OLECHECK(this->get_MarginLeft((float*)&MarginLeft));
    return MarginLeft;
  }

  float __fastcall get_MarginRight(void)
  {
    float MarginRight;
    OLECHECK(this->get_MarginRight((float*)&MarginRight));
    return MarginRight;
  }

  float __fastcall get_MarginTop(void)
  {
    float MarginTop;
    OLECHECK(this->get_MarginTop((float*)&MarginTop));
    return MarginTop;
  }

  Office_97::MsoTextOrientation __fastcall get_Orientation(void)
  {
    Office_97::MsoTextOrientation Orientation;
    OLECHECK(this->get_Orientation((Office_97::MsoTextOrientation*)&Orientation));
    return Orientation;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   float           MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   float           MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   float           MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   Office_97::MsoTextOrientation Orientation = {read = get_Orientation, write = set_Orientation};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ThreeDFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0321-0000-0000-C000-000000000046}
// *********************************************************************//
interface ThreeDFormat  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* Parent/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotationX(float Increment/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE IncrementRotationY(float Increment/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE ResetRotation(void) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE SetThreeDFormat(Office_97::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE SetExtrusionDirection(Office_97::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_Depth(float* Depth/*[out,retval]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE set_Depth(float Depth/*[in]*/) = 0; // [100]
  virtual HRESULT STDMETHODCALLTYPE get_ExtrusionColor(Office_97::ColorFormat** ExtrusionColor/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_ExtrusionColorType(Office_97::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE set_ExtrusionColorType(Office_97::MsoExtrusionColorType ExtrusionColorType/*[in]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_Perspective(Office_97::MsoTriState* Perspective/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE set_Perspective(Office_97::MsoTriState Perspective/*[in]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_PresetExtrusionDirection(Office_97::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_PresetLightingDirection(Office_97::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE set_PresetLightingDirection(Office_97::MsoPresetLightingDirection PresetLightingDirection/*[in]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE get_PresetLightingSoftness(Office_97::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE set_PresetLightingSoftness(Office_97::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE get_PresetMaterial(Office_97::MsoPresetMaterial* PresetMaterial/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE set_PresetMaterial(Office_97::MsoPresetMaterial PresetMaterial/*[in]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE get_PresetThreeDFormat(Office_97::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE get_RotationX(float* RotationX/*[out,retval]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE set_RotationX(float RotationX/*[in]*/) = 0; // [109]
  virtual HRESULT STDMETHODCALLTYPE get_RotationY(float* RotationY/*[out,retval]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE set_RotationY(float RotationY/*[in]*/) = 0; // [110]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/) = 0; // [111]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(Office_97::MsoTriState Visible/*[in]*/) = 0; // [111]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH Parent;
    OLECHECK(this->get_Parent((LPDISPATCH*)&Parent));
    return Parent;
  }

  float __fastcall get_Depth(void)
  {
    float Depth;
    OLECHECK(this->get_Depth((float*)&Depth));
    return Depth;
  }

  Office_97::ColorFormat* __fastcall get_ExtrusionColor(void)
  {
    Office_97::ColorFormat* ExtrusionColor;
    OLECHECK(this->get_ExtrusionColor((Office_97::ColorFormat**)&ExtrusionColor));
    return ExtrusionColor;
  }

  Office_97::MsoExtrusionColorType __fastcall get_ExtrusionColorType(void)
  {
    Office_97::MsoExtrusionColorType ExtrusionColorType;
    OLECHECK(this->get_ExtrusionColorType((Office_97::MsoExtrusionColorType*)&ExtrusionColorType));
    return ExtrusionColorType;
  }

  Office_97::MsoTriState __fastcall get_Perspective(void)
  {
    Office_97::MsoTriState Perspective;
    OLECHECK(this->get_Perspective((Office_97::MsoTriState*)&Perspective));
    return Perspective;
  }

  Office_97::MsoPresetExtrusionDirection __fastcall get_PresetExtrusionDirection(void)
  {
    Office_97::MsoPresetExtrusionDirection PresetExtrusionDirection;
    OLECHECK(this->get_PresetExtrusionDirection((Office_97::MsoPresetExtrusionDirection*)&PresetExtrusionDirection));
    return PresetExtrusionDirection;
  }

  Office_97::MsoPresetLightingDirection __fastcall get_PresetLightingDirection(void)
  {
    Office_97::MsoPresetLightingDirection PresetLightingDirection;
    OLECHECK(this->get_PresetLightingDirection((Office_97::MsoPresetLightingDirection*)&PresetLightingDirection));
    return PresetLightingDirection;
  }

  Office_97::MsoPresetLightingSoftness __fastcall get_PresetLightingSoftness(void)
  {
    Office_97::MsoPresetLightingSoftness PresetLightingSoftness;
    OLECHECK(this->get_PresetLightingSoftness((Office_97::MsoPresetLightingSoftness*)&PresetLightingSoftness));
    return PresetLightingSoftness;
  }

  Office_97::MsoPresetMaterial __fastcall get_PresetMaterial(void)
  {
    Office_97::MsoPresetMaterial PresetMaterial;
    OLECHECK(this->get_PresetMaterial((Office_97::MsoPresetMaterial*)&PresetMaterial));
    return PresetMaterial;
  }

  Office_97::MsoPresetThreeDFormat __fastcall get_PresetThreeDFormat(void)
  {
    Office_97::MsoPresetThreeDFormat PresetThreeDFormat;
    OLECHECK(this->get_PresetThreeDFormat((Office_97::MsoPresetThreeDFormat*)&PresetThreeDFormat));
    return PresetThreeDFormat;
  }

  float __fastcall get_RotationX(void)
  {
    float RotationX;
    OLECHECK(this->get_RotationX((float*)&RotationX));
    return RotationX;
  }

  float __fastcall get_RotationY(void)
  {
    float RotationY;
    OLECHECK(this->get_RotationY((float*)&RotationY));
    return RotationY;
  }

  Office_97::MsoTriState __fastcall get_Visible(void)
  {
    Office_97::MsoTriState Visible;
    OLECHECK(this->get_Visible((Office_97::MsoTriState*)&Visible));
    return Visible;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Depth = {read = get_Depth, write = set_Depth};
  __property   Office_97::ColorFormat* ExtrusionColor = {read = get_ExtrusionColor};
  __property   Office_97::MsoExtrusionColorType ExtrusionColorType = {read = get_ExtrusionColorType, write = set_ExtrusionColorType};
  __property   Office_97::MsoTriState Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Office_97::MsoPresetExtrusionDirection PresetExtrusionDirection = {read = get_PresetExtrusionDirection};
  __property   Office_97::MsoPresetLightingDirection PresetLightingDirection = {read = get_PresetLightingDirection, write = set_PresetLightingDirection};
  __property   Office_97::MsoPresetLightingSoftness PresetLightingSoftness = {read = get_PresetLightingSoftness, write = set_PresetLightingSoftness};
  __property   Office_97::MsoPresetMaterial PresetMaterial = {read = get_PresetMaterial, write = set_PresetMaterial};
  __property   Office_97::MsoPresetThreeDFormat PresetThreeDFormat = {read = get_PresetThreeDFormat};
  __property   float           RotationX = {read = get_RotationX, write = set_RotationX};
  __property   float           RotationY = {read = get_RotationY, write = set_RotationY};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Assistant
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0322-0000-0000-C000-000000000046}
// *********************************************************************//
interface Assistant  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Move(int xLeft/*[in]*/, int yTop/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Top(int pyTop/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(int* pyTop/*[out,retval]*/) = 0; // [1610809346]
  virtual HRESULT STDMETHODCALLTYPE set_Left(int pxLeft/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Left(int* pxLeft/*[out,retval]*/) = 0; // [1610809348]
  virtual HRESULT STDMETHODCALLTYPE Help(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE StartWizard(VARIANT_BOOL On/*[in]*/, BSTR Callback/*[in]*/, 
                                                long PrivateX/*[in]*/, VARIANT Animation/*[in,opt]*/, 
                                                VARIANT CustomTeaser/*[in,opt]*/, 
                                                VARIANT Top/*[in,opt]*/, VARIANT Left/*[in,opt]*/, 
                                                VARIANT Bottom/*[in,opt]*/, 
                                                VARIANT Right/*[in,opt]*/, 
                                                long* plWizID/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE EndWizard(long WizardID/*[in]*/, 
                                              VARIANT_BOOL varfSuccess/*[in]*/, 
                                              VARIANT Animation/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ActivateWizard(long WizardID/*[in]*/, 
                                                   Office_97::MsoWizardActType act/*[in]*/, 
                                                   VARIANT Animation/*[in,opt]*/= TNoParam()) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE ResetTips(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_NewBalloon(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BalloonError(Office_97::MsoBalloonErrorType* pbne/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/) = 0; // [1610809357]
  virtual HRESULT STDMETHODCALLTYPE get_Animation(Office_97::MsoAnimationType* pfca/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Animation(Office_97::MsoAnimationType pfca/*[in]*/) = 0; // [1610809359]
  virtual HRESULT STDMETHODCALLTYPE get_Reduced(VARIANT_BOOL* pvarfReduced/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Reduced(VARIANT_BOOL pvarfReduced/*[in]*/) = 0; // [1610809361]
  virtual HRESULT STDMETHODCALLTYPE set_AssistWithHelp(VARIANT_BOOL pvarfAssistWithHelp/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AssistWithHelp(VARIANT_BOOL* pvarfAssistWithHelp/*[out,retval]*/) = 0; // [1610809363]
  virtual HRESULT STDMETHODCALLTYPE set_AssistWithWizards(VARIANT_BOOL pvarfAssistWithWizards/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AssistWithWizards(VARIANT_BOOL* pvarfAssistWithWizards/*[out,retval]*/) = 0; // [1610809365]
  virtual HRESULT STDMETHODCALLTYPE set_AssistWithAlerts(VARIANT_BOOL pvarfAssistWithAlerts/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_AssistWithAlerts(VARIANT_BOOL* pvarfAssistWithAlerts/*[out,retval]*/) = 0; // [1610809367]
  virtual HRESULT STDMETHODCALLTYPE set_MoveWhenInTheWay(VARIANT_BOOL pvarfMove/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MoveWhenInTheWay(VARIANT_BOOL* pvarfMove/*[out,retval]*/) = 0; // [1610809369]
  virtual HRESULT STDMETHODCALLTYPE set_Sounds(VARIANT_BOOL pvarfSounds/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Sounds(VARIANT_BOOL* pvarfSounds/*[out,retval]*/) = 0; // [1610809371]
  virtual HRESULT STDMETHODCALLTYPE set_FeatureTips(VARIANT_BOOL pvarfFeatures/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FeatureTips(VARIANT_BOOL* pvarfFeatures/*[out,retval]*/) = 0; // [1610809373]
  virtual HRESULT STDMETHODCALLTYPE set_MouseTips(VARIANT_BOOL pvarfMouse/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MouseTips(VARIANT_BOOL* pvarfMouse/*[out,retval]*/) = 0; // [1610809375]
  virtual HRESULT STDMETHODCALLTYPE set_KeyboardShortcutTips(VARIANT_BOOL pvarfKeyboardShortcuts/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_KeyboardShortcutTips(VARIANT_BOOL* pvarfKeyboardShortcuts/*[out,retval]*/) = 0; // [1610809377]
  virtual HRESULT STDMETHODCALLTYPE set_HighPriorityTips(VARIANT_BOOL pvarfHighPriorityTips/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_HighPriorityTips(VARIANT_BOOL* pvarfHighPriorityTips/*[out,retval]*/) = 0; // [1610809379]
  virtual HRESULT STDMETHODCALLTYPE set_TipOfDay(VARIANT_BOOL pvarfTipOfDay/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_TipOfDay(VARIANT_BOOL* pvarfTipOfDay/*[out,retval]*/) = 0; // [1610809381]
  virtual HRESULT STDMETHODCALLTYPE set_GuessHelp(VARIANT_BOOL pvarfGuessHelp/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_GuessHelp(VARIANT_BOOL* pvarfGuessHelp/*[out,retval]*/) = 0; // [1610809383]
  virtual HRESULT STDMETHODCALLTYPE set_SearchWhenProgramming(VARIANT_BOOL pvarfSearchInProgram/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SearchWhenProgramming(VARIANT_BOOL* pvarfSearchInProgram/*[out,retval]*/) = 0; // [1610809385]
  virtual HRESULT STDMETHODCALLTYPE get_Item(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_FileName(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FileName(BSTR pbstr/*[in]*/) = 0; // [1610809388]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_Top(void)
  {
    int pyTop;
    OLECHECK(this->get_Top((int*)&pyTop));
    return pyTop;
  }

  int __fastcall get_Left(void)
  {
    int pxLeft;
    OLECHECK(this->get_Left((int*)&pxLeft));
    return pxLeft;
  }

  long __fastcall StartWizard(VARIANT_BOOL On/*[in]*/, BSTR Callback/*[in]*/, long PrivateX/*[in]*/, 
                              VARIANT Animation/*[in,opt]*/= TNoParam(), 
                              VARIANT CustomTeaser/*[in,opt]*/= TNoParam(), 
                              VARIANT Top/*[in,opt]*/= TNoParam(), 
                              VARIANT Left/*[in,opt]*/= TNoParam(), 
                              VARIANT Bottom/*[in,opt]*/= TNoParam(), 
                              VARIANT Right/*[in,opt]*/= TNoParam())
  {
    long plWizID;
    OLECHECK(this->StartWizard(On, Callback, PrivateX, Animation, CustomTeaser, Top, Left, Bottom, 
                               Right, (long*)&plWizID));
    return plWizID;
  }

  LPDISPATCH __fastcall get_NewBalloon(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_NewBalloon((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  Office_97::MsoBalloonErrorType __fastcall get_BalloonError(void)
  {
    Office_97::MsoBalloonErrorType pbne;
    OLECHECK(this->get_BalloonError((Office_97::MsoBalloonErrorType*)&pbne));
    return pbne;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pvarfVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pvarfVisible));
    return pvarfVisible;
  }

  Office_97::MsoAnimationType __fastcall get_Animation(void)
  {
    Office_97::MsoAnimationType pfca;
    OLECHECK(this->get_Animation((Office_97::MsoAnimationType*)&pfca));
    return pfca;
  }

  VARIANT_BOOL __fastcall get_Reduced(void)
  {
    VARIANT_BOOL pvarfReduced;
    OLECHECK(this->get_Reduced((VARIANT_BOOL*)&pvarfReduced));
    return pvarfReduced;
  }

  VARIANT_BOOL __fastcall get_AssistWithHelp(void)
  {
    VARIANT_BOOL pvarfAssistWithHelp;
    OLECHECK(this->get_AssistWithHelp((VARIANT_BOOL*)&pvarfAssistWithHelp));
    return pvarfAssistWithHelp;
  }

  VARIANT_BOOL __fastcall get_AssistWithWizards(void)
  {
    VARIANT_BOOL pvarfAssistWithWizards;
    OLECHECK(this->get_AssistWithWizards((VARIANT_BOOL*)&pvarfAssistWithWizards));
    return pvarfAssistWithWizards;
  }

  VARIANT_BOOL __fastcall get_AssistWithAlerts(void)
  {
    VARIANT_BOOL pvarfAssistWithAlerts;
    OLECHECK(this->get_AssistWithAlerts((VARIANT_BOOL*)&pvarfAssistWithAlerts));
    return pvarfAssistWithAlerts;
  }

  VARIANT_BOOL __fastcall get_MoveWhenInTheWay(void)
  {
    VARIANT_BOOL pvarfMove;
    OLECHECK(this->get_MoveWhenInTheWay((VARIANT_BOOL*)&pvarfMove));
    return pvarfMove;
  }

  VARIANT_BOOL __fastcall get_Sounds(void)
  {
    VARIANT_BOOL pvarfSounds;
    OLECHECK(this->get_Sounds((VARIANT_BOOL*)&pvarfSounds));
    return pvarfSounds;
  }

  VARIANT_BOOL __fastcall get_FeatureTips(void)
  {
    VARIANT_BOOL pvarfFeatures;
    OLECHECK(this->get_FeatureTips((VARIANT_BOOL*)&pvarfFeatures));
    return pvarfFeatures;
  }

  VARIANT_BOOL __fastcall get_MouseTips(void)
  {
    VARIANT_BOOL pvarfMouse;
    OLECHECK(this->get_MouseTips((VARIANT_BOOL*)&pvarfMouse));
    return pvarfMouse;
  }

  VARIANT_BOOL __fastcall get_KeyboardShortcutTips(void)
  {
    VARIANT_BOOL pvarfKeyboardShortcuts;
    OLECHECK(this->get_KeyboardShortcutTips((VARIANT_BOOL*)&pvarfKeyboardShortcuts));
    return pvarfKeyboardShortcuts;
  }

  VARIANT_BOOL __fastcall get_HighPriorityTips(void)
  {
    VARIANT_BOOL pvarfHighPriorityTips;
    OLECHECK(this->get_HighPriorityTips((VARIANT_BOOL*)&pvarfHighPriorityTips));
    return pvarfHighPriorityTips;
  }

  VARIANT_BOOL __fastcall get_TipOfDay(void)
  {
    VARIANT_BOOL pvarfTipOfDay;
    OLECHECK(this->get_TipOfDay((VARIANT_BOOL*)&pvarfTipOfDay));
    return pvarfTipOfDay;
  }

  VARIANT_BOOL __fastcall get_GuessHelp(void)
  {
    VARIANT_BOOL pvarfGuessHelp;
    OLECHECK(this->get_GuessHelp((VARIANT_BOOL*)&pvarfGuessHelp));
    return pvarfGuessHelp;
  }

  VARIANT_BOOL __fastcall get_SearchWhenProgramming(void)
  {
    VARIANT_BOOL pvarfSearchInProgram;
    OLECHECK(this->get_SearchWhenProgramming((VARIANT_BOOL*)&pvarfSearchInProgram));
    return pvarfSearchInProgram;
  }

  BSTR __fastcall get_Item(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Item((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_FileName(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_FileName((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Top = {read = get_Top, write = set_Top};
  __property   int             Left = {read = get_Left, write = set_Left};
  __property   LPDISPATCH      NewBalloon = {read = get_NewBalloon};
  __property   Office_97::MsoBalloonErrorType BalloonError = {read = get_BalloonError};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   Office_97::MsoAnimationType Animation = {read = get_Animation, write = set_Animation};
  __property   VARIANT_BOOL    Reduced = {read = get_Reduced, write = set_Reduced};
  __property   VARIANT_BOOL    AssistWithHelp = {read = get_AssistWithHelp, write = set_AssistWithHelp};
  __property   VARIANT_BOOL    AssistWithWizards = {read = get_AssistWithWizards, write = set_AssistWithWizards};
  __property   VARIANT_BOOL    AssistWithAlerts = {read = get_AssistWithAlerts, write = set_AssistWithAlerts};
  __property   VARIANT_BOOL    MoveWhenInTheWay = {read = get_MoveWhenInTheWay, write = set_MoveWhenInTheWay};
  __property   VARIANT_BOOL    Sounds = {read = get_Sounds, write = set_Sounds};
  __property   VARIANT_BOOL    FeatureTips = {read = get_FeatureTips, write = set_FeatureTips};
  __property   VARIANT_BOOL    MouseTips = {read = get_MouseTips, write = set_MouseTips};
  __property   VARIANT_BOOL    KeyboardShortcutTips = {read = get_KeyboardShortcutTips, write = set_KeyboardShortcutTips};
  __property   VARIANT_BOOL    HighPriorityTips = {read = get_HighPriorityTips, write = set_HighPriorityTips};
  __property   VARIANT_BOOL    TipOfDay = {read = get_TipOfDay, write = set_TipOfDay};
  __property   VARIANT_BOOL    GuessHelp = {read = get_GuessHelp, write = set_GuessHelp};
  __property   VARIANT_BOOL    SearchWhenProgramming = {read = get_SearchWhenProgramming, write = set_SearchWhenProgramming};
  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            FileName = {read = get_FileName};
  __property   BSTR            Name = {read = get_Name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Balloon
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0324-0000-0000-C000-000000000046}
// *********************************************************************//
interface Balloon  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Checkboxes(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Labels(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_BalloonType(Office_97::MsoBalloonType pbty/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_BalloonType(Office_97::MsoBalloonType* pbty/*[out,retval]*/) = 0; // [1610809347]
  virtual HRESULT STDMETHODCALLTYPE set_Icon(Office_97::MsoIconType picn/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Icon(Office_97::MsoIconType* picn/*[out,retval]*/) = 0; // [1610809349]
  virtual HRESULT STDMETHODCALLTYPE set_Heading(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Heading(BSTR* pbstr/*[out,retval]*/) = 0; // [1610809351]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstr/*[out,retval]*/) = 0; // [1610809353]
  virtual HRESULT STDMETHODCALLTYPE set_Mode(Office_97::MsoModeType pmd/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Mode(Office_97::MsoModeType* pmd/*[out,retval]*/) = 0; // [1610809355]
  virtual HRESULT STDMETHODCALLTYPE set_Animation(Office_97::MsoAnimationType pfca/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Animation(Office_97::MsoAnimationType* pfca/*[out,retval]*/) = 0; // [1610809357]
  virtual HRESULT STDMETHODCALLTYPE set_Button(Office_97::MsoButtonSetType psbs/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Button(Office_97::MsoButtonSetType* psbs/*[out,retval]*/) = 0; // [1610809359]
  virtual HRESULT STDMETHODCALLTYPE set_Callback(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Callback(BSTR* pbstr/*[out,retval]*/) = 0; // [1610809361]
  virtual HRESULT STDMETHODCALLTYPE set_Private(long plPrivate/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Private(long* plPrivate/*[out,retval]*/) = 0; // [1610809363]
  virtual HRESULT STDMETHODCALLTYPE SetAvoidRectangle(int Left/*[in]*/, int Top/*[in]*/, 
                                                      int Right/*[in]*/, int Bottom/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Show(Office_97::MsoBalloonButtonType* pibtn/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  LPDISPATCH __fastcall get_Checkboxes(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Checkboxes((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  LPDISPATCH __fastcall get_Labels(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Labels((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  Office_97::MsoBalloonType __fastcall get_BalloonType(void)
  {
    Office_97::MsoBalloonType pbty;
    OLECHECK(this->get_BalloonType((Office_97::MsoBalloonType*)&pbty));
    return pbty;
  }

  Office_97::MsoIconType __fastcall get_Icon(void)
  {
    Office_97::MsoIconType picn;
    OLECHECK(this->get_Icon((Office_97::MsoIconType*)&picn));
    return picn;
  }

  BSTR __fastcall get_Heading(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Heading((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstr));
    return pbstr;
  }

  Office_97::MsoModeType __fastcall get_Mode(void)
  {
    Office_97::MsoModeType pmd;
    OLECHECK(this->get_Mode((Office_97::MsoModeType*)&pmd));
    return pmd;
  }

  Office_97::MsoAnimationType __fastcall get_Animation(void)
  {
    Office_97::MsoAnimationType pfca;
    OLECHECK(this->get_Animation((Office_97::MsoAnimationType*)&pfca));
    return pfca;
  }

  Office_97::MsoButtonSetType __fastcall get_Button(void)
  {
    Office_97::MsoButtonSetType psbs;
    OLECHECK(this->get_Button((Office_97::MsoButtonSetType*)&psbs));
    return psbs;
  }

  BSTR __fastcall get_Callback(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Callback((BSTR*)&pbstr));
    return pbstr;
  }

  long __fastcall get_Private(void)
  {
    long plPrivate;
    OLECHECK(this->get_Private((long*)&plPrivate));
    return plPrivate;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  Office_97::MsoBalloonButtonType __fastcall Show(void)
  {
    Office_97::MsoBalloonButtonType pibtn;
    OLECHECK(this->Show((Office_97::MsoBalloonButtonType*)&pibtn));
    return pibtn;
  }


  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Checkboxes = {read = get_Checkboxes};
  __property   LPDISPATCH      Labels = {read = get_Labels};
  __property   Office_97::MsoBalloonType BalloonType = {read = get_BalloonType, write = set_BalloonType};
  __property   Office_97::MsoIconType Icon = {read = get_Icon, write = set_Icon};
  __property   BSTR            Heading = {read = get_Heading, write = set_Heading};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Office_97::MsoModeType Mode = {read = get_Mode, write = set_Mode};
  __property   Office_97::MsoAnimationType Animation = {read = get_Animation, write = set_Animation};
  __property   Office_97::MsoButtonSetType Button = {read = get_Button, write = set_Button};
  __property   BSTR            Callback = {read = get_Callback, write = set_Callback};
  __property   long            Private = {read = get_Private, write = set_Private};
  __property   BSTR            Name = {read = get_Name};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: BalloonCheckboxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0326-0000-0000-C000-000000000046}
// *********************************************************************//
interface BalloonCheckboxes  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pccbx/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Count(int pccbx/*[in]*/) = 0; // [1610809347]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  LPDISPATCH __fastcall get_Item(int Index/*[in]*/)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_Count(void)
  {
    int pccbx;
    OLECHECK(this->get_Count((int*)&pccbx));
    return pccbx;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count, write = set_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: BalloonCheckbox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0328-0000-0000-C000-000000000046}
// *********************************************************************//
interface BalloonCheckbox  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Checked(VARIANT_BOOL pvarfChecked/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Checked(VARIANT_BOOL* pvarfChecked/*[out,retval]*/) = 0; // [1610809347]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstr/*[out,retval]*/) = 0; // [1610809349]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Item(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Item((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  VARIANT_BOOL __fastcall get_Checked(void)
  {
    VARIANT_BOOL pvarfChecked;
    OLECHECK(this->get_Checked((VARIANT_BOOL*)&pvarfChecked));
    return pvarfChecked;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstr));
    return pbstr;
  }


  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: BalloonLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C032E-0000-0000-C000-000000000046}
// *********************************************************************//
interface BalloonLabels  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pcwz/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Count(int pcwz/*[in]*/) = 0; // [1610809347]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  LPDISPATCH __fastcall get_Item(int Index/*[in]*/)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  int __fastcall get_Count(void)
  {
    int pcwz;
    OLECHECK(this->get_Count((int*)&pcwz));
    return pcwz;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppienum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppienum));
    return ppienum;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count, write = set_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: BalloonLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0330-0000-0000-C000-000000000046}
// *********************************************************************//
interface BalloonLabel  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstr/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstr/*[out,retval]*/) = 0; // [1610809347]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Item(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Item((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH ppidisp;
    OLECHECK(this->get_Parent((LPDISPATCH*)&ppidisp));
    return ppidisp;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstr));
    return pbstr;
  }


  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: DocumentProperty
// Flags:     (4096) Dispatchable
// GUID:      {2DF8D04E-5BFA-101B-BDE5-00AA0044DE52}
// *********************************************************************//
interface DocumentProperty  : public IDispatch
{
public:
   LPDISPATCH STDMETHODCALLTYPE get_Parent(void); // [1]
   HRESULT STDMETHODCALLTYPE Delete(void); // [2]
   HRESULT STDMETHODCALLTYPE get_Name(long lcid/*[in]*/, BSTR* pbstrRetVal/*[out,retval]*/); // [3]
   HRESULT STDMETHODCALLTYPE set_Name(long lcid/*[in]*/, BSTR pbstrRetVal/*[in]*/); // [3]
   HRESULT STDMETHODCALLTYPE get_Value(long lcid/*[in]*/, VARIANT* pvargRetVal/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE set_Value(long lcid/*[in]*/, VARIANT pvargRetVal/*[in]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Type(long lcid/*[in]*/, 
                                      Office_97::MsoDocProperties* ptypeRetVal/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE set_Type(long lcid/*[in]*/, 
                                      Office_97::MsoDocProperties ptypeRetVal/*[in]*/); // [5]
   HRESULT STDMETHODCALLTYPE get_LinkToContent(VARIANT_BOOL* pfLinkRetVal/*[out,retval]*/); // [6]
   HRESULT STDMETHODCALLTYPE set_LinkToContent(VARIANT_BOOL pfLinkRetVal/*[in]*/); // [6]
   HRESULT STDMETHODCALLTYPE get_LinkSource(BSTR* pbstrSourceRetVal/*[out,retval]*/); // [7]
   HRESULT STDMETHODCALLTYPE set_LinkSource(BSTR pbstrSourceRetVal/*[in]*/); // [7]
   HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/); // [-1]
   HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/); // [-1]
};

// *********************************************************************//
// Interface: DocumentProperties
// Flags:     (4096) Dispatchable
// GUID:      {2DF8D04D-5BFA-101B-BDE5-00AA0044DE52}
// *********************************************************************//
interface DocumentProperties  : public IDispatch
{
public:
   LPDISPATCH STDMETHODCALLTYPE get_Parent(void); // [1]
   HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, long lcid/*[in]*/, 
                                      Office_97::DocumentProperty** ppIDocProp/*[out,retval]*/); // [0]
   HRESULT STDMETHODCALLTYPE get_Count(long* pc/*[out,retval]*/); // [4]
   HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, VARIANT_BOOL LinkToContent/*[in]*/, 
                                 VARIANT Type/*[in,opt]*/, VARIANT Value/*[in,opt]*/, 
                                 VARIANT LinkSource/*[in,opt]*/, long lcid/*[in]*/, 
                                 Office_97::DocumentProperty** ppIDocProp/*[out,retval]*/); // [5]
   HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/); // [-4]
   HRESULT STDMETHODCALLTYPE get_Application(LPDISPATCH* ppidisp/*[out,retval]*/); // [-1]
   HRESULT STDMETHODCALLTYPE get_Creator(long* plCreator/*[out,retval]*/); // [-1]
};

// *********************************************************************//
// Interface: IFoundFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0338-0000-0000-C000-000000000046}
// *********************************************************************//
interface IFoundFiles  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, BSTR* pbstr/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(int* pCount/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Item(int Index/*[in]*/)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Item(Index, (BSTR*)&pbstr));
    return pbstr;
  }

  int __fastcall get_Count(void)
  {
    int pCount;
    OLECHECK(this->get_Count((int*)&pCount));
    return pCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunkEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunkEnum));
    return ppunkEnum;
  }


  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IFind
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0337-0000-0000-C000-000000000046}
// *********************************************************************//
interface IFind  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SearchPath(BSTR* pbstr/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SubDir(VARIANT_BOOL* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Title(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Author(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Keywords(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Subject(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Options(Office_97::MsoFileFindOptions* penmOptions/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_MatchCase(VARIANT_BOOL* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Text(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_PatternMatch(VARIANT_BOOL* retval/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DateSavedFrom(VARIANT* pdatSavedFrom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DateSavedTo(VARIANT* pdatSavedTo/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SavedBy(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DateCreatedFrom(VARIANT* pdatCreatedFrom/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_DateCreatedTo(VARIANT* pdatCreatedTo/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_View(Office_97::MsoFileFindView* penmView/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SortBy(Office_97::MsoFileFindSortBy* penmSortBy/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_ListBy(Office_97::MsoFileFindListBy* penmListBy/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_SelectedFile(int* pintSelectedFile/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Results(Office_97::IFoundFiles** pdisp/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Show(int* pRows/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_SearchPath(BSTR pbstr/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstr/*[in]*/) = 0; // [1610743809]
  virtual HRESULT STDMETHODCALLTYPE set_SubDir(VARIANT_BOOL retval/*[in]*/) = 0; // [1610743810]
  virtual HRESULT STDMETHODCALLTYPE set_Title(BSTR pbstr/*[in]*/) = 0; // [1610743811]
  virtual HRESULT STDMETHODCALLTYPE set_Author(BSTR pbstr/*[in]*/) = 0; // [1610743812]
  virtual HRESULT STDMETHODCALLTYPE set_Keywords(BSTR pbstr/*[in]*/) = 0; // [1610743813]
  virtual HRESULT STDMETHODCALLTYPE set_Subject(BSTR pbstr/*[in]*/) = 0; // [1610743814]
  virtual HRESULT STDMETHODCALLTYPE set_Options(Office_97::MsoFileFindOptions penmOptions/*[in]*/) = 0; // [1610743815]
  virtual HRESULT STDMETHODCALLTYPE set_MatchCase(VARIANT_BOOL retval/*[in]*/) = 0; // [1610743816]
  virtual HRESULT STDMETHODCALLTYPE set_Text(BSTR pbstr/*[in]*/) = 0; // [1610743817]
  virtual HRESULT STDMETHODCALLTYPE set_PatternMatch(VARIANT_BOOL retval/*[in]*/) = 0; // [1610743818]
  virtual HRESULT STDMETHODCALLTYPE set_DateSavedFrom(VARIANT pdatSavedFrom/*[in]*/) = 0; // [1610743819]
  virtual HRESULT STDMETHODCALLTYPE set_DateSavedTo(VARIANT pdatSavedTo/*[in]*/) = 0; // [1610743820]
  virtual HRESULT STDMETHODCALLTYPE set_SavedBy(BSTR pbstr/*[in]*/) = 0; // [1610743821]
  virtual HRESULT STDMETHODCALLTYPE set_DateCreatedFrom(VARIANT pdatCreatedFrom/*[in]*/) = 0; // [1610743822]
  virtual HRESULT STDMETHODCALLTYPE set_DateCreatedTo(VARIANT pdatCreatedTo/*[in]*/) = 0; // [1610743823]
  virtual HRESULT STDMETHODCALLTYPE set_View(Office_97::MsoFileFindView penmView/*[in]*/) = 0; // [1610743824]
  virtual HRESULT STDMETHODCALLTYPE set_SortBy(Office_97::MsoFileFindSortBy penmSortBy/*[in]*/) = 0; // [1610743825]
  virtual HRESULT STDMETHODCALLTYPE set_ListBy(Office_97::MsoFileFindListBy penmListBy/*[in]*/) = 0; // [1610743826]
  virtual HRESULT STDMETHODCALLTYPE set_SelectedFile(int pintSelectedFile/*[in]*/) = 0; // [1610743827]
  virtual HRESULT STDMETHODCALLTYPE Execute(void) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Load(BSTR bstrQueryName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Save(BSTR bstrQueryName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(BSTR bstrQueryName/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_FileType(long* plFileType/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_FileType(long plFileType/*[in]*/) = 0; // [1610743854]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_SearchPath(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_SearchPath((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstr));
    return pbstr;
  }

  VARIANT_BOOL __fastcall get_SubDir(void)
  {
    VARIANT_BOOL retval;
    OLECHECK(this->get_SubDir((VARIANT_BOOL*)&retval));
    return retval;
  }

  BSTR __fastcall get_Title(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Title((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Author(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Author((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Keywords(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Keywords((BSTR*)&pbstr));
    return pbstr;
  }

  BSTR __fastcall get_Subject(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Subject((BSTR*)&pbstr));
    return pbstr;
  }

  Office_97::MsoFileFindOptions __fastcall get_Options(void)
  {
    Office_97::MsoFileFindOptions penmOptions;
    OLECHECK(this->get_Options((Office_97::MsoFileFindOptions*)&penmOptions));
    return penmOptions;
  }

  VARIANT_BOOL __fastcall get_MatchCase(void)
  {
    VARIANT_BOOL retval;
    OLECHECK(this->get_MatchCase((VARIANT_BOOL*)&retval));
    return retval;
  }

  BSTR __fastcall get_Text(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Text((BSTR*)&pbstr));
    return pbstr;
  }

  VARIANT_BOOL __fastcall get_PatternMatch(void)
  {
    VARIANT_BOOL retval;
    OLECHECK(this->get_PatternMatch((VARIANT_BOOL*)&retval));
    return retval;
  }

  VARIANT __fastcall get_DateSavedFrom(void)
  {
    VARIANT pdatSavedFrom;
    OLECHECK(this->get_DateSavedFrom((VARIANT*)&pdatSavedFrom));
    return pdatSavedFrom;
  }

  VARIANT __fastcall get_DateSavedTo(void)
  {
    VARIANT pdatSavedTo;
    OLECHECK(this->get_DateSavedTo((VARIANT*)&pdatSavedTo));
    return pdatSavedTo;
  }

  BSTR __fastcall get_SavedBy(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_SavedBy((BSTR*)&pbstr));
    return pbstr;
  }

  VARIANT __fastcall get_DateCreatedFrom(void)
  {
    VARIANT pdatCreatedFrom;
    OLECHECK(this->get_DateCreatedFrom((VARIANT*)&pdatCreatedFrom));
    return pdatCreatedFrom;
  }

  VARIANT __fastcall get_DateCreatedTo(void)
  {
    VARIANT pdatCreatedTo;
    OLECHECK(this->get_DateCreatedTo((VARIANT*)&pdatCreatedTo));
    return pdatCreatedTo;
  }

  Office_97::MsoFileFindView __fastcall get_View(void)
  {
    Office_97::MsoFileFindView penmView;
    OLECHECK(this->get_View((Office_97::MsoFileFindView*)&penmView));
    return penmView;
  }

  Office_97::MsoFileFindSortBy __fastcall get_SortBy(void)
  {
    Office_97::MsoFileFindSortBy penmSortBy;
    OLECHECK(this->get_SortBy((Office_97::MsoFileFindSortBy*)&penmSortBy));
    return penmSortBy;
  }

  Office_97::MsoFileFindListBy __fastcall get_ListBy(void)
  {
    Office_97::MsoFileFindListBy penmListBy;
    OLECHECK(this->get_ListBy((Office_97::MsoFileFindListBy*)&penmListBy));
    return penmListBy;
  }

  int __fastcall get_SelectedFile(void)
  {
    int pintSelectedFile;
    OLECHECK(this->get_SelectedFile((int*)&pintSelectedFile));
    return pintSelectedFile;
  }

  Office_97::IFoundFiles* __fastcall get_Results(void)
  {
    Office_97::IFoundFiles* pdisp;
    OLECHECK(this->get_Results((Office_97::IFoundFiles**)&pdisp));
    return pdisp;
  }

  int __fastcall Show(void)
  {
    int pRows;
    OLECHECK(this->Show((int*)&pRows));
    return pRows;
  }

  long __fastcall get_FileType(void)
  {
    long plFileType;
    OLECHECK(this->get_FileType((long*)&plFileType));
    return plFileType;
  }


  __property   BSTR            SearchPath = {read = get_SearchPath};
  __property   BSTR            Name = {read = get_Name};
  __property   VARIANT_BOOL    SubDir = {read = get_SubDir, write = set_SubDir};
  __property   BSTR            Title = {read = get_Title};
  __property   BSTR            Author = {read = get_Author};
  __property   BSTR            Keywords = {read = get_Keywords};
  __property   BSTR            Subject = {read = get_Subject};
  __property   Office_97::MsoFileFindOptions Options = {read = get_Options, write = set_Options};
  __property   VARIANT_BOOL    MatchCase = {read = get_MatchCase, write = set_MatchCase};
  __property   BSTR            Text = {read = get_Text};
  __property   VARIANT_BOOL    PatternMatch = {read = get_PatternMatch, write = set_PatternMatch};
  __property   BSTR            SavedBy = {read = get_SavedBy};
  __property   Office_97::MsoFileFindView View = {read = get_View, write = set_View};
  __property   Office_97::MsoFileFindSortBy SortBy = {read = get_SortBy, write = set_SortBy};
  __property   Office_97::MsoFileFindListBy ListBy = {read = get_ListBy, write = set_ListBy};
  __property   int             SelectedFile = {read = get_SelectedFile, write = set_SelectedFile};
  __property   Office_97::IFoundFiles* Results = {read = get_Results};
  __property   long            FileType = {read = get_FileType, write = set_FileType};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FoundFiles
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0331-0000-0000-C000-000000000046}
// *********************************************************************//
interface FoundFiles  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, long lcid/*[in]*/, 
                                             BSTR* pbstrFile/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pc/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Item(int Index/*[in]*/, long lcid/*[in]*/= TDefLCID())
  {
    BSTR pbstrFile = 0;
    OLECHECK(this->get_Item(Index, lcid, (BSTR*)&pbstrFile));
    return pbstrFile;
  }

  long __fastcall get_Count(void)
  {
    long pc;
    OLECHECK(this->get_Count((long*)&pc));
    return pc;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunkEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunkEnum));
    return ppunkEnum;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PropertyTest
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0333-0000-0000-C000-000000000046}
// *********************************************************************//
interface PropertyTest  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrRetVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Condition(Office_97::MsoCondition* pConditionRetVal/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* pvargRetVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_SecondValue(VARIANT* pvargRetVal2/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Connector(Office_97::MsoConnector* pConnector/*[out,retval]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrRetVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrRetVal));
    return pbstrRetVal;
  }

  Office_97::MsoCondition __fastcall get_Condition(void)
  {
    Office_97::MsoCondition pConditionRetVal;
    OLECHECK(this->get_Condition((Office_97::MsoCondition*)&pConditionRetVal));
    return pConditionRetVal;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT pvargRetVal;
    OLECHECK(this->get_Value((VARIANT*)&pvargRetVal));
    return pvargRetVal;
  }

  VARIANT __fastcall get_SecondValue(void)
  {
    VARIANT pvargRetVal2;
    OLECHECK(this->get_SecondValue((VARIANT*)&pvargRetVal2));
    return pvargRetVal2;
  }

  Office_97::MsoConnector __fastcall get_Connector(void)
  {
    Office_97::MsoConnector pConnector;
    OLECHECK(this->get_Connector((Office_97::MsoConnector*)&pConnector));
    return pConnector;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   Office_97::MsoCondition Condition = {read = get_Condition};
  __property   Office_97::MsoConnector Connector = {read = get_Connector};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PropertyTests
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0334-0000-0000-C000-000000000046}
// *********************************************************************//
interface PropertyTests  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(int Index/*[in]*/, long lcid/*[in]*/, 
                                             Office_97::PropertyTest** ppIDocProp/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* pc/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, Office_97::MsoCondition Condition/*[in]*/, 
                                        VARIANT Value/*[in,opt]*/, VARIANT SecondValue/*[in,opt]*/, 
                                        Office_97::MsoConnector Connector/*[in,def,opt]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE Remove(int Index/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/) = 0; // [-4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Office_97::PropertyTest* __fastcall get_Item(int Index/*[in]*/, long lcid/*[in]*/= TDefLCID())
  {
    Office_97::PropertyTest* ppIDocProp;
    OLECHECK(this->get_Item(Index, lcid, (Office_97::PropertyTest**)&ppIDocProp));
    return ppIDocProp;
  }

  long __fastcall get_Count(void)
  {
    long pc;
    OLECHECK(this->get_Count((long*)&pc));
    return pc;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppunkEnum;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppunkEnum));
    return ppunkEnum;
  }


  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: FileSearch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0332-0000-0000-C000-000000000046}
// *********************************************************************//
interface FileSearch  : public Office_97::_IMsoDispObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_SearchSubFolders(VARIANT_BOOL* SearchSubFoldersRetVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_SearchSubFolders(VARIANT_BOOL SearchSubFoldersRetVal/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_MatchTextExactly(VARIANT_BOOL* MatchTextRetVal/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_MatchTextExactly(VARIANT_BOOL MatchTextRetVal/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_MatchAllWordForms(VARIANT_BOOL* MatchAllWordFormsRetVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_MatchAllWordForms(VARIANT_BOOL MatchAllWordFormsRetVal/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_FileName(BSTR* FileNameRetVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_FileName(BSTR FileNameRetVal/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_FileType(Office_97::MsoFileType* FileTypeRetVal/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_FileType(Office_97::MsoFileType FileTypeRetVal/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_LastModified(Office_97::MsoLastModified* LastModifiedRetVal/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_LastModified(Office_97::MsoLastModified LastModifiedRetVal/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_TextOrProperty(BSTR* TextOrProperty/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_TextOrProperty(BSTR TextOrProperty/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_LookIn(BSTR* LookInRetVal/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_LookIn(BSTR LookInRetVal/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE Execute(Office_97::MsoSortBy SortBy/*[in,def,opt]*/, 
                                            Office_97::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                                            VARIANT_BOOL AlwaysAccurate/*[in,def,opt]*/, 
                                            int* pRet/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE NewSearch(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_FoundFiles(Office_97::FoundFiles** FoundFilesRet/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_PropertyTests(Office_97::PropertyTests** PropTestsRet/*[out,retval]*/) = 0; // [12]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT_BOOL __fastcall get_SearchSubFolders(void)
  {
    VARIANT_BOOL SearchSubFoldersRetVal;
    OLECHECK(this->get_SearchSubFolders((VARIANT_BOOL*)&SearchSubFoldersRetVal));
    return SearchSubFoldersRetVal;
  }

  VARIANT_BOOL __fastcall get_MatchTextExactly(void)
  {
    VARIANT_BOOL MatchTextRetVal;
    OLECHECK(this->get_MatchTextExactly((VARIANT_BOOL*)&MatchTextRetVal));
    return MatchTextRetVal;
  }

  VARIANT_BOOL __fastcall get_MatchAllWordForms(void)
  {
    VARIANT_BOOL MatchAllWordFormsRetVal;
    OLECHECK(this->get_MatchAllWordForms((VARIANT_BOOL*)&MatchAllWordFormsRetVal));
    return MatchAllWordFormsRetVal;
  }

  BSTR __fastcall get_FileName(void)
  {
    BSTR FileNameRetVal = 0;
    OLECHECK(this->get_FileName((BSTR*)&FileNameRetVal));
    return FileNameRetVal;
  }

  Office_97::MsoFileType __fastcall get_FileType(void)
  {
    Office_97::MsoFileType FileTypeRetVal;
    OLECHECK(this->get_FileType((Office_97::MsoFileType*)&FileTypeRetVal));
    return FileTypeRetVal;
  }

  Office_97::MsoLastModified __fastcall get_LastModified(void)
  {
    Office_97::MsoLastModified LastModifiedRetVal;
    OLECHECK(this->get_LastModified((Office_97::MsoLastModified*)&LastModifiedRetVal));
    return LastModifiedRetVal;
  }

  BSTR __fastcall get_TextOrProperty(void)
  {
    BSTR TextOrProperty = 0;
    OLECHECK(this->get_TextOrProperty((BSTR*)&TextOrProperty));
    return TextOrProperty;
  }

  BSTR __fastcall get_LookIn(void)
  {
    BSTR LookInRetVal = 0;
    OLECHECK(this->get_LookIn((BSTR*)&LookInRetVal));
    return LookInRetVal;
  }

  int __fastcall Execute(Office_97::MsoSortBy SortBy/*[in,def,opt]*/, 
                         Office_97::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                         VARIANT_BOOL AlwaysAccurate/*[in,def,opt]*/)
  {
    int pRet;
    OLECHECK(this->Execute(SortBy, SortOrder, AlwaysAccurate, (int*)&pRet));
    return pRet;
  }

  Office_97::FoundFiles* __fastcall get_FoundFiles(void)
  {
    Office_97::FoundFiles* FoundFilesRet;
    OLECHECK(this->get_FoundFiles((Office_97::FoundFiles**)&FoundFilesRet));
    return FoundFilesRet;
  }

  Office_97::PropertyTests* __fastcall get_PropertyTests(void)
  {
    Office_97::PropertyTests* PropTestsRet;
    OLECHECK(this->get_PropertyTests((Office_97::PropertyTests**)&PropTestsRet));
    return PropTestsRet;
  }


  __property   VARIANT_BOOL    SearchSubFolders = {read = get_SearchSubFolders, write = set_SearchSubFolders};
  __property   VARIANT_BOOL    MatchTextExactly = {read = get_MatchTextExactly, write = set_MatchTextExactly};
  __property   VARIANT_BOOL    MatchAllWordForms = {read = get_MatchAllWordForms, write = set_MatchAllWordForms};
  __property   BSTR            FileName = {read = get_FileName};
  __property   Office_97::MsoFileType FileType = {read = get_FileType, write = set_FileType};
  __property   Office_97::MsoLastModified LastModified = {read = get_LastModified, write = set_LastModified};
  __property   BSTR            TextOrProperty = {read = get_TextOrProperty};
  __property   BSTR            LookIn = {read = get_LookIn};
  __property   Office_97::FoundFiles* FoundFiles = {read = get_FoundFiles};
  __property   Office_97::PropertyTests* PropertyTests = {read = get_PropertyTests};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IAccessible>  TCOMIAccessible;

// *********************************************************************//
// DispIntf:  IAccessible
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {618736E0-3C3D-11CF-810C-00AA00389B71}
// *********************************************************************//
template<class T>
class IAccessibleDispT : public TAutoDriver<IAccessible>
{
public:
  IAccessibleDispT(){}

  IAccessibleDispT(IAccessible *pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, false);
  }

  IAccessibleDispT(IAccessiblePtr pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, true);
  }

  IAccessibleDispT& operator=(IAccessible *pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, false);
    return *this;
  }

  IAccessibleDispT& operator=(IAccessiblePtr pintf)
  {
    TAutoDriver<IAccessible>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(VARIANT varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(VARIANT varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(VARIANT varChild/*[in,opt]*/, 
                                                    VARIANT* pvarRole/*[out,retval]*/);
  VARIANT         __fastcall get_accRole(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(VARIANT varChild/*[in,opt]*/, 
                                                     VARIANT* pvarState/*[out,retval]*/);
  VARIANT         __fastcall get_accState(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         VARIANT varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(VARIANT* pvarChildren/*[out,retval]*/);
  VARIANT         __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    VARIANT varStart/*[in,opt]*/, 
                                                    VARIANT* pvarEndUpAt/*[out,retval]*/);
  VARIANT         __fastcall accNavigate(long navDir/*[in]*/, 
                                         VARIANT varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef IAccessibleDispT<IAccessible> IAccessibleDisp;

typedef TComInterface<_IMsoDispObj>  TCOM_IMsoDispObj;

// *********************************************************************//
// DispIntf:  _IMsoDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0300-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _IMsoDispObjDispT : public TAutoDriver<_IMsoDispObj>
{
public:
  _IMsoDispObjDispT(){}

  _IMsoDispObjDispT(_IMsoDispObj *pintf)
  {
    TAutoDriver<_IMsoDispObj>::Bind(pintf, false);
  }

  _IMsoDispObjDispT(_IMsoDispObjPtr pintf)
  {
    TAutoDriver<_IMsoDispObj>::Bind(pintf, true);
  }

  _IMsoDispObjDispT& operator=(_IMsoDispObj *pintf)
  {
    TAutoDriver<_IMsoDispObj>::Bind(pintf, false);
    return *this;
  }

  _IMsoDispObjDispT& operator=(_IMsoDispObjPtr pintf)
  {
    TAutoDriver<_IMsoDispObj>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef _IMsoDispObjDispT<_IMsoDispObj> _IMsoDispObjDisp;

typedef TComInterface<_IMsoOleAccDispObj>  TCOM_IMsoOleAccDispObj;

// *********************************************************************//
// DispIntf:  _IMsoOleAccDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0301-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class _IMsoOleAccDispObjDispT : public TAutoDriver<_IMsoOleAccDispObj>
{
public:
  _IMsoOleAccDispObjDispT(){}

  _IMsoOleAccDispObjDispT(_IMsoOleAccDispObj *pintf)
  {
    TAutoDriver<_IMsoOleAccDispObj>::Bind(pintf, false);
  }

  _IMsoOleAccDispObjDispT(_IMsoOleAccDispObjPtr pintf)
  {
    TAutoDriver<_IMsoOleAccDispObj>::Bind(pintf, true);
  }

  _IMsoOleAccDispObjDispT& operator=(_IMsoOleAccDispObj *pintf)
  {
    TAutoDriver<_IMsoOleAccDispObj>::Bind(pintf, false);
    return *this;
  }

  _IMsoOleAccDispObjDispT& operator=(_IMsoOleAccDispObjPtr pintf)
  {
    TAutoDriver<_IMsoOleAccDispObj>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(VARIANT varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(VARIANT varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(VARIANT varChild/*[in,opt]*/, 
                                                    VARIANT* pvarRole/*[out,retval]*/);
  VARIANT         __fastcall get_accRole(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(VARIANT varChild/*[in,opt]*/, 
                                                     VARIANT* pvarState/*[out,retval]*/);
  VARIANT         __fastcall get_accState(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         VARIANT varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(VARIANT* pvarChildren/*[out,retval]*/);
  VARIANT         __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    VARIANT varStart/*[in,opt]*/, 
                                                    VARIANT* pvarEndUpAt/*[out,retval]*/);
  VARIANT         __fastcall accNavigate(long navDir/*[in]*/, 
                                         VARIANT varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef _IMsoOleAccDispObjDispT<_IMsoOleAccDispObj> _IMsoOleAccDispObjDisp;

typedef TComInterface<CommandBars>  TCOMCommandBars;

// *********************************************************************//
// DispIntf:  CommandBars
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0302-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarsDispT : public TAutoDriver<CommandBars>
{
public:
  CommandBarsDispT(){}

  CommandBarsDispT(CommandBars *pintf)
  {
    TAutoDriver<CommandBars>::Bind(pintf, false);
  }

  CommandBarsDispT(CommandBarsPtr pintf)
  {
    TAutoDriver<CommandBars>::Bind(pintf, true);
  }

  CommandBarsDispT& operator=(CommandBars *pintf)
  {
    TAutoDriver<CommandBars>::Bind(pintf, false);
    return *this;
  }

  CommandBarsDispT& operator=(CommandBarsPtr pintf)
  {
    TAutoDriver<CommandBars>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActionControl(Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall get_ActionControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveMenuBar(Office_97::CommandBar** ppcb/*[out,retval]*/);
  Office_97::CommandBar* __fastcall get_ActiveMenuBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT Name/*[in,opt]*/, VARIANT Position/*[in,opt]*/, 
                                            VARIANT MenuBar/*[in,opt]*/, 
                                            VARIANT Temporary/*[in,opt]*/, 
                                            Office_97::CommandBar** ppcb/*[out,retval]*/);
  Office_97::CommandBar* __fastcall Add(VARIANT Name/*[in,opt]*/= TNoParam(), 
                                        VARIANT Position/*[in,opt]*/= TNoParam(), 
                                        VARIANT MenuBar/*[in,opt]*/= TNoParam(), 
                                        VARIANT Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pcToolbars/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayTooltips(VARIANT_BOOL* pvarfDisplayTooltips/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayTooltips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayTooltips(VARIANT_BOOL pvarfDisplayTooltips/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayKeysInTooltips(VARIANT_BOOL* pvarfDisplayKeys/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DisplayKeysInTooltips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayKeysInTooltips(VARIANT_BOOL pvarfDisplayKeys/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindControl(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/
                                                    , VARIANT Tag/*[in,opt]*/, 
                                                    VARIANT Visible/*[in,opt]*/, 
                                                    Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall FindControl(VARIANT Type/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Id/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Tag/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Visible/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Office_97::CommandBar** ppcb/*[out,retval]*/);
  Office_97::CommandBar* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LargeButtons(VARIANT_BOOL* pvarfLargeButtons/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_LargeButtons(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LargeButtons(VARIANT_BOOL pvarfLargeButtons/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MenuAnimationStyle(Office_97::MsoMenuAnimation* pma/*[out,retval]*/);
  Office_97::MsoMenuAnimation __fastcall get_MenuAnimationStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MenuAnimationStyle(Office_97::MsoMenuAnimation pma/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReleaseFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   Office_97::CommandBarControl* ActionControl = {read = get_ActionControl};
  __property   Office_97::CommandBar* ActiveMenuBar = {read = get_ActiveMenuBar};
  __property   int             Count = {read = get_Count};
  __property   VARIANT_BOOL    DisplayTooltips = {read = get_DisplayTooltips, write = set_DisplayTooltips};
  __property   VARIANT_BOOL    DisplayKeysInTooltips = {read = get_DisplayKeysInTooltips, write = set_DisplayKeysInTooltips};
  __property   VARIANT_BOOL    LargeButtons = {read = get_LargeButtons, write = set_LargeButtons};
  __property   Office_97::MsoMenuAnimation MenuAnimationStyle = {read = get_MenuAnimationStyle, write = set_MenuAnimationStyle};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef CommandBarsDispT<CommandBars> CommandBarsDisp;

typedef TComInterface<CommandBar>  TCOMCommandBar;

// *********************************************************************//
// DispIntf:  CommandBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0304-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarDispT : public TAutoDriver<CommandBar>
{
public:
  CommandBarDispT(){}

  CommandBarDispT(CommandBar *pintf)
  {
    TAutoDriver<CommandBar>::Bind(pintf, false);
  }

  CommandBarDispT(CommandBarPtr pintf)
  {
    TAutoDriver<CommandBar>::Bind(pintf, true);
  }

  CommandBarDispT& operator=(CommandBar *pintf)
  {
    TAutoDriver<CommandBar>::Bind(pintf, false);
    return *this;
  }

  CommandBarDispT& operator=(CommandBarPtr pintf)
  {
    TAutoDriver<CommandBar>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Context(BSTR* pbstrContext/*[out,retval]*/);
  BSTR            __fastcall get_Context(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Context(BSTR pbstrContext/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Office_97::CommandBarControls** ppcbcs/*[out,retval]*/);
  Office_97::CommandBarControls* __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall FindControl(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/
                                                    , VARIANT Tag/*[in,opt]*/, 
                                                    VARIANT Visible/*[in,opt]*/, 
                                                    VARIANT Recursive/*[in,opt]*/, 
                                                    Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall FindControl(VARIANT Type/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Id/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Tag/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Visible/*[in,opt]*/= TNoParam(), 
                                                       VARIANT Recursive/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* pxpLeft/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(int pxpLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NameLocal(BSTR* pbstrNameLocal/*[out,retval]*/);
  BSTR            __fastcall get_NameLocal(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NameLocal(BSTR pbstrNameLocal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Position(Office_97::MsoBarPosition* ppos/*[out,retval]*/);
  Office_97::MsoBarPosition __fastcall get_Position(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Position(Office_97::MsoBarPosition ppos/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RowIndex(int* piRow/*[out,retval]*/);
  int             __fastcall get_RowIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RowIndex(int piRow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Protection(Office_97::MsoBarProtection* pprot/*[out,retval]*/);
  Office_97::MsoBarProtection __fastcall get_Protection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Protection(Office_97::MsoBarProtection pprot/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowPopup(VARIANT x/*[in,opt]*/= TNoParam(), 
                                                  VARIANT y/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* pypTop/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(int pypTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoBarType* ptype/*[out,retval]*/);
  Office_97::MsoBarType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(VARIANT varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(VARIANT varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(VARIANT varChild/*[in,opt]*/, 
                                                    VARIANT* pvarRole/*[out,retval]*/);
  VARIANT         __fastcall get_accRole(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(VARIANT varChild/*[in,opt]*/, 
                                                     VARIANT* pvarState/*[out,retval]*/);
  VARIANT         __fastcall get_accState(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         VARIANT varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(VARIANT* pvarChildren/*[out,retval]*/);
  VARIANT         __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    VARIANT varStart/*[in,opt]*/, 
                                                    VARIANT* pvarEndUpAt/*[out,retval]*/);
  VARIANT         __fastcall accNavigate(long navDir/*[in]*/, 
                                         VARIANT varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   VARIANT_BOOL    BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Context = {read = get_Context};
  __property   Office_97::CommandBarControls* Controls = {read = get_Controls};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left, write = set_Left};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            NameLocal = {read = get_NameLocal};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoBarPosition Position = {read = get_Position, write = set_Position};
  __property   int             RowIndex = {read = get_RowIndex, write = set_RowIndex};
  __property   Office_97::MsoBarProtection Protection = {read = get_Protection, write = set_Protection};
  __property   int             Top = {read = get_Top, write = set_Top};
  __property   Office_97::MsoBarType Type = {read = get_Type};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef CommandBarDispT<CommandBar> CommandBarDisp;

typedef TComInterface<CommandBarControls>  TCOMCommandBarControls;

// *********************************************************************//
// DispIntf:  CommandBarControls
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0306-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarControlsDispT : public TAutoDriver<CommandBarControls>
{
public:
  CommandBarControlsDispT(){}

  CommandBarControlsDispT(CommandBarControls *pintf)
  {
    TAutoDriver<CommandBarControls>::Bind(pintf, false);
  }

  CommandBarControlsDispT(CommandBarControlsPtr pintf)
  {
    TAutoDriver<CommandBarControls>::Bind(pintf, true);
  }

  CommandBarControlsDispT& operator=(CommandBarControls *pintf)
  {
    TAutoDriver<CommandBarControls>::Bind(pintf, false);
    return *this;
  }

  CommandBarControlsDispT& operator=(CommandBarControlsPtr pintf)
  {
    TAutoDriver<CommandBarControls>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/, 
                                            VARIANT Parameter/*[in,opt]*/, 
                                            VARIANT Before/*[in,opt]*/, 
                                            VARIANT Temporary/*[in,opt]*/, 
                                            Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall Add(VARIANT Type/*[in,opt]*/= TNoParam(), 
                                               VARIANT Id/*[in,opt]*/= TNoParam(), 
                                               VARIANT Parameter/*[in,opt]*/= TNoParam(), 
                                               VARIANT Before/*[in,opt]*/= TNoParam(), 
                                               VARIANT Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pcToolbarControls/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/);
  Office_97::CommandBar* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_97::CommandBar* Parent = {read = get_Parent};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef CommandBarControlsDispT<CommandBarControls> CommandBarControlsDisp;

typedef TComInterface<CommandBarControl>  TCOMCommandBarControl;

// *********************************************************************//
// DispIntf:  CommandBarControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0308-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarControlDispT : public TAutoDriver<CommandBarControl>
{
public:
  CommandBarControlDispT(){}

  CommandBarControlDispT(CommandBarControl *pintf)
  {
    TAutoDriver<CommandBarControl>::Bind(pintf, false);
  }

  CommandBarControlDispT(CommandBarControlPtr pintf)
  {
    TAutoDriver<CommandBarControl>::Bind(pintf, true);
  }

  CommandBarControlDispT& operator=(CommandBarControl *pintf)
  {
    TAutoDriver<CommandBarControl>::Bind(pintf, false);
    return *this;
  }

  CommandBarControlDispT& operator=(CommandBarControlPtr pintf)
  {
    TAutoDriver<CommandBarControl>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginGroup(VARIANT_BOOL* pvarfBeginGroup/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BeginGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginGroup(VARIANT_BOOL pvarfBeginGroup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                             Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall Copy(VARIANT Bar/*[in,opt]*/= TNoParam(), 
                                                VARIANT Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DescriptionText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DescriptionText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(int* pid/*[out,retval]*/);
  int             __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pbstrFilename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                             Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall Move(VARIANT Bar/*[in,opt]*/= TNoParam(), 
                                                VARIANT Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* px/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEUsage(Office_97::MsoControlOLEUsage* pcou/*[out,retval]*/);
  Office_97::MsoControlOLEUsage __fastcall get_OLEUsage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEUsage(Office_97::MsoControlOLEUsage pcou/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/);
  BSTR            __fastcall get_OnAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAction(BSTR pbstrOnAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/);
  Office_97::CommandBar* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parameter(BSTR* pbstrParam/*[out,retval]*/);
  BSTR            __fastcall get_Parameter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Parameter(BSTR pbstrParam/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Priority(int* pnPri/*[out,retval]*/);
  int             __fastcall get_Priority(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Priority(int pnPri/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pbstrTag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pbstrTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/);
  BSTR            __fastcall get_TooltipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TooltipText(BSTR pbstrTooltip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* py/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoControlType* ptype/*[out,retval]*/);
  Office_97::MsoControlType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(VARIANT varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(VARIANT varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(VARIANT varChild/*[in,opt]*/, 
                                                    VARIANT* pvarRole/*[out,retval]*/);
  VARIANT         __fastcall get_accRole(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(VARIANT varChild/*[in,opt]*/, 
                                                     VARIANT* pvarState/*[out,retval]*/);
  VARIANT         __fastcall get_accState(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         VARIANT varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(VARIANT* pvarChildren/*[out,retval]*/);
  VARIANT         __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    VARIANT varStart/*[in,opt]*/, 
                                                    VARIANT* pvarEndUpAt/*[out,retval]*/);
  VARIANT         __fastcall accNavigate(long navDir/*[in]*/, 
                                         VARIANT varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   VARIANT_BOOL    BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   VARIANT_BOOL    BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_97::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction};
  __property   Office_97::CommandBar* Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_97::MsoControlType Type = {read = get_Type};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef CommandBarControlDispT<CommandBarControl> CommandBarControlDisp;

typedef TComInterface<CommandBarButton>  TCOMCommandBarButton;

// *********************************************************************//
// DispIntf:  CommandBarButton
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarButtonDispT : public TAutoDriver<CommandBarButton>
{
public:
  CommandBarButtonDispT(){}

  CommandBarButtonDispT(CommandBarButton *pintf)
  {
    TAutoDriver<CommandBarButton>::Bind(pintf, false);
  }

  CommandBarButtonDispT(CommandBarButtonPtr pintf)
  {
    TAutoDriver<CommandBarButton>::Bind(pintf, true);
  }

  CommandBarButtonDispT& operator=(CommandBarButton *pintf)
  {
    TAutoDriver<CommandBarButton>::Bind(pintf, false);
    return *this;
  }

  CommandBarButtonDispT& operator=(CommandBarButtonPtr pintf)
  {
    TAutoDriver<CommandBarButton>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltInFace(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BuiltInFace(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BuiltInFace(VARIANT_BOOL pvarfBuiltIn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CopyFace();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FaceId(int* pid/*[out,retval]*/);
  int             __fastcall get_FaceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FaceId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PasteFace();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShortcutText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_ShortcutText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShortcutText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_State(Office_97::MsoButtonState* pstate/*[out,retval]*/);
  Office_97::MsoButtonState __fastcall get_State(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_State(Office_97::MsoButtonState pstate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Office_97::MsoButtonStyle* pstyle/*[out,retval]*/);
  Office_97::MsoButtonStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Office_97::MsoButtonStyle pstyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginGroup(VARIANT_BOOL* pvarfBeginGroup/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BeginGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginGroup(VARIANT_BOOL pvarfBeginGroup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                             Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall Copy(VARIANT Bar/*[in,opt]*/= TNoParam(), 
                                                VARIANT Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DescriptionText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DescriptionText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(int* pid/*[out,retval]*/);
  int             __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pbstrFilename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                             Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall Move(VARIANT Bar/*[in,opt]*/= TNoParam(), 
                                                VARIANT Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* px/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEUsage(Office_97::MsoControlOLEUsage* pcou/*[out,retval]*/);
  Office_97::MsoControlOLEUsage __fastcall get_OLEUsage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEUsage(Office_97::MsoControlOLEUsage pcou/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/);
  BSTR            __fastcall get_OnAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAction(BSTR pbstrOnAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/);
  Office_97::CommandBar* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parameter(BSTR* pbstrParam/*[out,retval]*/);
  BSTR            __fastcall get_Parameter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Parameter(BSTR pbstrParam/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Priority(int* pnPri/*[out,retval]*/);
  int             __fastcall get_Priority(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Priority(int pnPri/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pbstrTag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pbstrTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/);
  BSTR            __fastcall get_TooltipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TooltipText(BSTR pbstrTooltip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* py/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoControlType* ptype/*[out,retval]*/);
  Office_97::MsoControlType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(VARIANT varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(VARIANT varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(VARIANT varChild/*[in,opt]*/, 
                                                    VARIANT* pvarRole/*[out,retval]*/);
  VARIANT         __fastcall get_accRole(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(VARIANT varChild/*[in,opt]*/, 
                                                     VARIANT* pvarState/*[out,retval]*/);
  VARIANT         __fastcall get_accState(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         VARIANT varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(VARIANT* pvarChildren/*[out,retval]*/);
  VARIANT         __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    VARIANT varStart/*[in,opt]*/, 
                                                    VARIANT* pvarEndUpAt/*[out,retval]*/);
  VARIANT         __fastcall accNavigate(long navDir/*[in]*/, 
                                         VARIANT varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   VARIANT_BOOL    BuiltInFace = {read = get_BuiltInFace, write = set_BuiltInFace};
  __property   int             FaceId = {read = get_FaceId, write = set_FaceId};
  __property   BSTR            ShortcutText = {read = get_ShortcutText};
  __property   Office_97::MsoButtonState State = {read = get_State, write = set_State};
  __property   Office_97::MsoButtonStyle Style = {read = get_Style, write = set_Style};

  __property   VARIANT_BOOL    BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   VARIANT_BOOL    BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_97::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction};
  __property   Office_97::CommandBar* Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_97::MsoControlType Type = {read = get_Type};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef CommandBarButtonDispT<CommandBarButton> CommandBarButtonDisp;

typedef TComInterface<CommandBarPopup>  TCOMCommandBarPopup;

// *********************************************************************//
// DispIntf:  CommandBarPopup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030A-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarPopupDispT : public TAutoDriver<CommandBarPopup>
{
public:
  CommandBarPopupDispT(){}

  CommandBarPopupDispT(CommandBarPopup *pintf)
  {
    TAutoDriver<CommandBarPopup>::Bind(pintf, false);
  }

  CommandBarPopupDispT(CommandBarPopupPtr pintf)
  {
    TAutoDriver<CommandBarPopup>::Bind(pintf, true);
  }

  CommandBarPopupDispT& operator=(CommandBarPopup *pintf)
  {
    TAutoDriver<CommandBarPopup>::Bind(pintf, false);
    return *this;
  }

  CommandBarPopupDispT& operator=(CommandBarPopupPtr pintf)
  {
    TAutoDriver<CommandBarPopup>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBar(Office_97::CommandBar** ppcb/*[out,retval]*/);
  Office_97::CommandBar* __fastcall get_CommandBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Controls(Office_97::CommandBarControls** ppcbcs/*[out,retval]*/);
  Office_97::CommandBarControls* __fastcall get_Controls(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEMenuGroup(Office_97::MsoOLEMenuGroup* pomg/*[out,retval]*/);
  Office_97::MsoOLEMenuGroup __fastcall get_OLEMenuGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEMenuGroup(Office_97::MsoOLEMenuGroup pomg/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginGroup(VARIANT_BOOL* pvarfBeginGroup/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BeginGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginGroup(VARIANT_BOOL pvarfBeginGroup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                             Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall Copy(VARIANT Bar/*[in,opt]*/= TNoParam(), 
                                                VARIANT Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DescriptionText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DescriptionText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(int* pid/*[out,retval]*/);
  int             __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pbstrFilename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                             Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall Move(VARIANT Bar/*[in,opt]*/= TNoParam(), 
                                                VARIANT Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* px/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEUsage(Office_97::MsoControlOLEUsage* pcou/*[out,retval]*/);
  Office_97::MsoControlOLEUsage __fastcall get_OLEUsage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEUsage(Office_97::MsoControlOLEUsage pcou/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/);
  BSTR            __fastcall get_OnAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAction(BSTR pbstrOnAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/);
  Office_97::CommandBar* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parameter(BSTR* pbstrParam/*[out,retval]*/);
  BSTR            __fastcall get_Parameter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Parameter(BSTR pbstrParam/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Priority(int* pnPri/*[out,retval]*/);
  int             __fastcall get_Priority(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Priority(int pnPri/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pbstrTag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pbstrTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/);
  BSTR            __fastcall get_TooltipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TooltipText(BSTR pbstrTooltip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* py/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoControlType* ptype/*[out,retval]*/);
  Office_97::MsoControlType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(VARIANT varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(VARIANT varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(VARIANT varChild/*[in,opt]*/, 
                                                    VARIANT* pvarRole/*[out,retval]*/);
  VARIANT         __fastcall get_accRole(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(VARIANT varChild/*[in,opt]*/, 
                                                     VARIANT* pvarState/*[out,retval]*/);
  VARIANT         __fastcall get_accState(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         VARIANT varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(VARIANT* pvarChildren/*[out,retval]*/);
  VARIANT         __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    VARIANT varStart/*[in,opt]*/, 
                                                    VARIANT* pvarEndUpAt/*[out,retval]*/);
  VARIANT         __fastcall accNavigate(long navDir/*[in]*/, 
                                         VARIANT varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   Office_97::CommandBar* CommandBar = {read = get_CommandBar};
  __property   Office_97::CommandBarControls* Controls = {read = get_Controls};
  __property   Office_97::MsoOLEMenuGroup OLEMenuGroup = {read = get_OLEMenuGroup, write = set_OLEMenuGroup};

  __property   VARIANT_BOOL    BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   VARIANT_BOOL    BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_97::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction};
  __property   Office_97::CommandBar* Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_97::MsoControlType Type = {read = get_Type};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef CommandBarPopupDispT<CommandBarPopup> CommandBarPopupDisp;

typedef TComInterface<CommandBarComboBox>  TCOMCommandBarComboBox;

// *********************************************************************//
// DispIntf:  CommandBarComboBox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030C-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CommandBarComboBoxDispT : public TAutoDriver<CommandBarComboBox>
{
public:
  CommandBarComboBoxDispT(){}

  CommandBarComboBoxDispT(CommandBarComboBox *pintf)
  {
    TAutoDriver<CommandBarComboBox>::Bind(pintf, false);
  }

  CommandBarComboBoxDispT(CommandBarComboBoxPtr pintf)
  {
    TAutoDriver<CommandBarComboBox>::Bind(pintf, true);
  }

  CommandBarComboBoxDispT& operator=(CommandBarComboBox *pintf)
  {
    TAutoDriver<CommandBarComboBox>::Bind(pintf, false);
    return *this;
  }

  CommandBarComboBoxDispT& operator=(CommandBarComboBoxPtr pintf)
  {
    TAutoDriver<CommandBarComboBox>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddItem(BSTR Text/*[in]*/, 
                                                VARIANT Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Clear();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropDownLines(int* pcLines/*[out,retval]*/);
  int             __fastcall get_DropDownLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DropDownLines(int pcLines/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropDownWidth(int* pdx/*[out,retval]*/);
  int             __fastcall get_DropDownWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DropDownWidth(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_List(int Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/);
  BSTR            __fastcall get_List(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_List(int Index/*[in]*/, BSTR pbstrItem/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListCount(int* pcItems/*[out,retval]*/);
  int             __fastcall get_ListCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListHeaderCount(int* pcItems/*[out,retval]*/);
  int             __fastcall get_ListHeaderCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListHeaderCount(int pcItems/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListIndex(int* pi/*[out,retval]*/);
  int             __fastcall get_ListIndex(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListIndex(int pi/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveItem(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Office_97::MsoComboStyle* pstyle/*[out,retval]*/);
  Office_97::MsoComboStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Office_97::MsoComboStyle pstyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginGroup(VARIANT_BOOL* pvarfBeginGroup/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BeginGroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginGroup(VARIANT_BOOL pvarfBeginGroup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BuiltIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pbstrCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Caption(BSTR pbstrCaption/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Control(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Control(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                             Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall Copy(VARIANT Bar/*[in,opt]*/= TNoParam(), 
                                                VARIANT Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT Temporary/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DescriptionText(BSTR* pbstrText/*[out,retval]*/);
  BSTR            __fastcall get_DescriptionText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DescriptionText(BSTR pbstrText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(int* pdy/*[out,retval]*/);
  int             __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(int pdy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpContextId(int* pid/*[out,retval]*/);
  int             __fastcall get_HelpContextId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpContextId(int pid/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/);
  BSTR            __fastcall get_HelpFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HelpFile(BSTR pbstrFilename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Id(int* pid/*[out,retval]*/);
  int             __fastcall get_Id(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Index(int* pi/*[out,retval]*/);
  int             __fastcall get_Index(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InstanceId(long* pid/*[out,retval]*/);
  long            __fastcall get_InstanceId(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                             Office_97::CommandBarControl** ppcbc/*[out,retval]*/);
  Office_97::CommandBarControl* __fastcall Move(VARIANT Bar/*[in,opt]*/= TNoParam(), 
                                                VARIANT Before/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* px/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OLEUsage(Office_97::MsoControlOLEUsage* pcou/*[out,retval]*/);
  Office_97::MsoControlOLEUsage __fastcall get_OLEUsage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OLEUsage(Office_97::MsoControlOLEUsage pcou/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/);
  BSTR            __fastcall get_OnAction(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OnAction(BSTR pbstrOnAction/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/);
  Office_97::CommandBar* __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parameter(BSTR* pbstrParam/*[out,retval]*/);
  BSTR            __fastcall get_Parameter(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Parameter(BSTR pbstrParam/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Priority(int* pnPri/*[out,retval]*/);
  int             __fastcall get_Priority(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Priority(int pnPri/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reset();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFocus();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tag(BSTR* pbstrTag/*[out,retval]*/);
  BSTR            __fastcall get_Tag(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tag(BSTR pbstrTag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/);
  BSTR            __fastcall get_TooltipText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TooltipText(BSTR pbstrTooltip/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* py/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoControlType* ptype/*[out,retval]*/);
  Office_97::MsoControlType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(int* pdx/*[out,retval]*/);
  int             __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(int pdx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accParent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChildCount(long* pcountChildren/*[out,retval]*/);
  long            __fastcall get_accChildCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accChild(VARIANT varChild/*[in]*/, 
                                                     LPDISPATCH* ppdispChild/*[out,retval]*/);
  LPDISPATCH      __fastcall get_accChild(VARIANT varChild/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszName/*[out,retval]*/);
  BSTR            __fastcall get_accName(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR* pszValue/*[out,retval]*/);
  BSTR            __fastcall get_accValue(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                                           BSTR* pszDescription/*[out,retval]*/);
  BSTR            __fastcall get_accDescription(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accRole(VARIANT varChild/*[in,opt]*/, 
                                                    VARIANT* pvarRole/*[out,retval]*/);
  VARIANT         __fastcall get_accRole(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accState(VARIANT varChild/*[in,opt]*/, 
                                                     VARIANT* pvarState/*[out,retval]*/);
  VARIANT         __fastcall get_accState(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszHelp/*[out,retval]*/);
  BSTR            __fastcall get_accHelp(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                                         VARIANT varChild/*[in,opt]*/, 
                                                         long* pidTopic/*[out,retval]*/);
  long            __fastcall get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                              VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                                BSTR* pszKeyboardShortcut/*[out,retval]*/);
  BSTR            __fastcall get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accFocus(VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall get_accFocus(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accSelection(VARIANT* pvarChildren/*[out,retval]*/);
  VARIANT         __fastcall get_accSelection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                             BSTR* pszDefaultAction/*[out,retval]*/);
  BSTR            __fastcall get_accDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accSelect(long flagsSelect/*[in]*/, 
                                                  VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                                    long* pcxWidth/*[out]*/, 
                                                    long* pcyHeight/*[out]*/, 
                                                    VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accNavigate(long navDir/*[in]*/, 
                                                    VARIANT varStart/*[in,opt]*/, 
                                                    VARIANT* pvarEndUpAt/*[out,retval]*/);
  VARIANT         __fastcall accNavigate(long navDir/*[in]*/, 
                                         VARIANT varStart/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                                   VARIANT* pvarChild/*[out,retval]*/);
  VARIANT         __fastcall accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall accDoDefaultAction(VARIANT varChild/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accName(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR pszName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_accValue(VARIANT varChild/*[in,opt]*/, 
                                                     BSTR pszValue/*[in]*/);

  __property   int             DropDownLines = {read = get_DropDownLines, write = set_DropDownLines};
  __property   int             DropDownWidth = {read = get_DropDownWidth, write = set_DropDownWidth};
  __property   int             ListCount = {read = get_ListCount};
  __property   int             ListHeaderCount = {read = get_ListHeaderCount, write = set_ListHeaderCount};
  __property   int             ListIndex = {read = get_ListIndex, write = set_ListIndex};
  __property   Office_97::MsoComboStyle Style = {read = get_Style, write = set_Style};
  __property   BSTR            Text = {read = get_Text};

  __property   VARIANT_BOOL    BeginGroup = {read = get_BeginGroup, write = set_BeginGroup};
  __property   VARIANT_BOOL    BuiltIn = {read = get_BuiltIn};
  __property   BSTR            Caption = {read = get_Caption};
  __property   LPDISPATCH      Control = {read = get_Control};
  __property   BSTR            DescriptionText = {read = get_DescriptionText};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   int             Height = {read = get_Height, write = set_Height};
  __property   int             HelpContextId = {read = get_HelpContextId, write = set_HelpContextId};
  __property   BSTR            HelpFile = {read = get_HelpFile};
  __property   int             Id = {read = get_Id};
  __property   int             Index = {read = get_Index};
  __property   long            InstanceId = {read = get_InstanceId};
  __property   int             Left = {read = get_Left};
  __property   Office_97::MsoControlOLEUsage OLEUsage = {read = get_OLEUsage, write = set_OLEUsage};
  __property   BSTR            OnAction = {read = get_OnAction};
  __property   Office_97::CommandBar* Parent = {read = get_Parent};
  __property   BSTR            Parameter = {read = get_Parameter};
  __property   int             Priority = {read = get_Priority, write = set_Priority};
  __property   BSTR            Tag = {read = get_Tag};
  __property   BSTR            TooltipText = {read = get_TooltipText};
  __property   int             Top = {read = get_Top};
  __property   Office_97::MsoControlType Type = {read = get_Type};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   int             Width = {read = get_Width, write = set_Width};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};

  __property   LPDISPATCH      accParent = {read = get_accParent};
  __property   long            accChildCount = {read = get_accChildCount};
};
typedef CommandBarComboBoxDispT<CommandBarComboBox> CommandBarComboBoxDisp;

typedef TComInterface<Adjustments>  TCOMAdjustments;

// *********************************************************************//
// DispIntf:  Adjustments
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0310-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AdjustmentsDispT : public TAutoDriver<Adjustments>
{
public:
  AdjustmentsDispT(){}

  AdjustmentsDispT(Adjustments *pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, false);
  }

  AdjustmentsDispT(AdjustmentsPtr pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, true);
  }

  AdjustmentsDispT& operator=(Adjustments *pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, false);
    return *this;
  }

  AdjustmentsDispT& operator=(AdjustmentsPtr pintf)
  {
    TAutoDriver<Adjustments>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, float* Val/*[out,retval]*/);
  float           __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Item(int Index/*[in]*/, float Val/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef AdjustmentsDispT<Adjustments> AdjustmentsDisp;

typedef TComInterface<CalloutFormat>  TCOMCalloutFormat;

// *********************************************************************//
// DispIntf:  CalloutFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0311-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class CalloutFormatDispT : public TAutoDriver<CalloutFormat>
{
public:
  CalloutFormatDispT(){}

  CalloutFormatDispT(CalloutFormat *pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, false);
  }

  CalloutFormatDispT(CalloutFormatPtr pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, true);
  }

  CalloutFormatDispT& operator=(CalloutFormat *pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, false);
    return *this;
  }

  CalloutFormatDispT& operator=(CalloutFormatPtr pintf)
  {
    TAutoDriver<CalloutFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AutomaticLength();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CustomDrop(float Drop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CustomLength(float Length/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetDrop(Office_97::MsoCalloutDropType DropType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Accent(Office_97::MsoTriState* Accent/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Accent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Accent(Office_97::MsoTriState Accent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Angle(Office_97::MsoCalloutAngleType* Angle/*[out,retval]*/);
  Office_97::MsoCalloutAngleType __fastcall get_Angle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Angle(Office_97::MsoCalloutAngleType Angle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoAttach(Office_97::MsoTriState* AutoAttach/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_AutoAttach(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoAttach(Office_97::MsoTriState AutoAttach/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoLength(Office_97::MsoTriState* AutoLength/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_AutoLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Border(Office_97::MsoTriState* Border/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Border(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Border(Office_97::MsoTriState Border/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Drop(float* Drop/*[out,retval]*/);
  float           __fastcall get_Drop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DropType(Office_97::MsoCalloutDropType* DropType/*[out,retval]*/);
  Office_97::MsoCalloutDropType __fastcall get_DropType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Gap(float* Gap/*[out,retval]*/);
  float           __fastcall get_Gap(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Gap(float Gap/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Length(float* Length/*[out,retval]*/);
  float           __fastcall get_Length(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoCalloutType* Type/*[out,retval]*/);
  Office_97::MsoCalloutType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_97::MsoCalloutType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoTriState Accent = {read = get_Accent, write = set_Accent};
  __property   Office_97::MsoCalloutAngleType Angle = {read = get_Angle, write = set_Angle};
  __property   Office_97::MsoTriState AutoAttach = {read = get_AutoAttach, write = set_AutoAttach};
  __property   Office_97::MsoTriState AutoLength = {read = get_AutoLength};
  __property   Office_97::MsoTriState Border = {read = get_Border, write = set_Border};
  __property   float           Drop = {read = get_Drop};
  __property   Office_97::MsoCalloutDropType DropType = {read = get_DropType};
  __property   float           Gap = {read = get_Gap, write = set_Gap};
  __property   float           Length = {read = get_Length};
  __property   Office_97::MsoCalloutType Type = {read = get_Type, write = set_Type};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef CalloutFormatDispT<CalloutFormat> CalloutFormatDisp;

typedef TComInterface<ColorFormat>  TCOMColorFormat;

// *********************************************************************//
// DispIntf:  ColorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0312-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ColorFormatDispT : public TAutoDriver<ColorFormat>
{
public:
  ColorFormatDispT(){}

  ColorFormatDispT(ColorFormat *pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, false);
  }

  ColorFormatDispT(ColorFormatPtr pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, true);
  }

  ColorFormatDispT& operator=(ColorFormat *pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, false);
    return *this;
  }

  ColorFormatDispT& operator=(ColorFormatPtr pintf)
  {
    TAutoDriver<ColorFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_rgb(Office_97::MsoRGBType* rgb/*[out,retval]*/);
  Office_97::MsoRGBType __fastcall get_rgb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_rgb(Office_97::MsoRGBType rgb/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SchemeColor(int* SchemeColor/*[out,retval]*/);
  int             __fastcall get_SchemeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SchemeColor(int SchemeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoColorType* Type/*[out,retval]*/);
  Office_97::MsoColorType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoRGBType rgb = {read = get_rgb, write = set_rgb};
  __property   int             SchemeColor = {read = get_SchemeColor, write = set_SchemeColor};
  __property   Office_97::MsoColorType Type = {read = get_Type};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ColorFormatDispT<ColorFormat> ColorFormatDisp;

typedef TComInterface<ConnectorFormat>  TCOMConnectorFormat;

// *********************************************************************//
// DispIntf:  ConnectorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0313-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ConnectorFormatDispT : public TAutoDriver<ConnectorFormat>
{
public:
  ConnectorFormatDispT(){}

  ConnectorFormatDispT(ConnectorFormat *pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, false);
  }

  ConnectorFormatDispT(ConnectorFormatPtr pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, true);
  }

  ConnectorFormatDispT& operator=(ConnectorFormat *pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, false);
    return *this;
  }

  ConnectorFormatDispT& operator=(ConnectorFormatPtr pintf)
  {
    TAutoDriver<ConnectorFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginConnect(Office_97::Shape* ConnectedShape/*[in]*/, 
                                                     int ConnectionSite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BeginDisconnect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndConnect(Office_97::Shape* ConnectedShape/*[in]*/, 
                                                   int ConnectionSite/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndDisconnect();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnected(Office_97::MsoTriState* BeginConnected/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_BeginConnected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnectedShape(Office_97::Shape** BeginConnectedShape/*[out,retval]*/);
  Office_97::Shape* __fastcall get_BeginConnectedShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/);
  int             __fastcall get_BeginConnectionSite(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnected(Office_97::MsoTriState* EndConnected/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_EndConnected(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnectedShape(Office_97::Shape** EndConnectedShape/*[out,retval]*/);
  Office_97::Shape* __fastcall get_EndConnectedShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/);
  int             __fastcall get_EndConnectionSite(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoConnectorType* Type/*[out,retval]*/);
  Office_97::MsoConnectorType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_97::MsoConnectorType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoTriState BeginConnected = {read = get_BeginConnected};
  __property   Office_97::Shape* BeginConnectedShape = {read = get_BeginConnectedShape};
  __property   int             BeginConnectionSite = {read = get_BeginConnectionSite};
  __property   Office_97::MsoTriState EndConnected = {read = get_EndConnected};
  __property   Office_97::Shape* EndConnectedShape = {read = get_EndConnectedShape};
  __property   int             EndConnectionSite = {read = get_EndConnectionSite};
  __property   Office_97::MsoConnectorType Type = {read = get_Type, write = set_Type};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ConnectorFormatDispT<ConnectorFormat> ConnectorFormatDisp;

typedef TComInterface<FillFormat>  TCOMFillFormat;

// *********************************************************************//
// DispIntf:  FillFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0314-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class FillFormatDispT : public TAutoDriver<FillFormat>
{
public:
  FillFormatDispT(){}

  FillFormatDispT(FillFormat *pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, false);
  }

  FillFormatDispT(FillFormatPtr pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, true);
  }

  FillFormatDispT& operator=(FillFormat *pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, false);
    return *this;
  }

  FillFormatDispT& operator=(FillFormatPtr pintf)
  {
    TAutoDriver<FillFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Background();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OneColorGradient(Office_97::MsoGradientStyle Style/*[in]*/, 
                                                         int Variant/*[in]*/, float Degree/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Patterned(Office_97::MsoPatternType Pattern/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetGradient(Office_97::MsoGradientStyle Style/*[in]*/, 
                                                       int Variant/*[in]*/, 
                                                       Office_97::MsoPresetGradientType PresetGradientType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PresetTextured(Office_97::MsoPresetTexture PresetTexture/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Solid();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall TwoColorGradient(Office_97::MsoGradientStyle Style/*[in]*/, 
                                                         int Variant/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UserPicture(BSTR PictureFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UserTextured(BSTR TextureFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Office_97::ColorFormat** BackColor/*[out,retval]*/);
  Office_97::ColorFormat* __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Office_97::ColorFormat* BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Office_97::ColorFormat** ForeColor/*[out,retval]*/);
  Office_97::ColorFormat* __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Office_97::ColorFormat* ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientColorType(Office_97::MsoGradientColorType* GradientColorType/*[out,retval]*/);
  Office_97::MsoGradientColorType __fastcall get_GradientColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientDegree(float* GradientDegree/*[out,retval]*/);
  float           __fastcall get_GradientDegree(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientStyle(Office_97::MsoGradientStyle* GradientStyle/*[out,retval]*/);
  Office_97::MsoGradientStyle __fastcall get_GradientStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GradientVariant(int* GradientVariant/*[out,retval]*/);
  int             __fastcall get_GradientVariant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(Office_97::MsoPatternType* Pattern/*[out,retval]*/);
  Office_97::MsoPatternType __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetGradientType(Office_97::MsoPresetGradientType* PresetGradientType/*[out,retval]*/);
  Office_97::MsoPresetGradientType __fastcall get_PresetGradientType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetTexture(Office_97::MsoPresetTexture* PresetTexture/*[out,retval]*/);
  Office_97::MsoPresetTexture __fastcall get_PresetTexture(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureName(BSTR* TextureName/*[out,retval]*/);
  BSTR            __fastcall get_TextureName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextureType(Office_97::MsoTextureType* TextureType/*[out,retval]*/);
  Office_97::MsoTextureType __fastcall get_TextureType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoFillType* Type/*[out,retval]*/);
  Office_97::MsoFillType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_97::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::ColorFormat* BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_97::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_97::MsoGradientColorType GradientColorType = {read = get_GradientColorType};
  __property   float           GradientDegree = {read = get_GradientDegree};
  __property   Office_97::MsoGradientStyle GradientStyle = {read = get_GradientStyle};
  __property   int             GradientVariant = {read = get_GradientVariant};
  __property   Office_97::MsoPatternType Pattern = {read = get_Pattern};
  __property   Office_97::MsoPresetGradientType PresetGradientType = {read = get_PresetGradientType};
  __property   Office_97::MsoPresetTexture PresetTexture = {read = get_PresetTexture};
  __property   BSTR            TextureName = {read = get_TextureName};
  __property   Office_97::MsoTextureType TextureType = {read = get_TextureType};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_97::MsoFillType Type = {read = get_Type};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef FillFormatDispT<FillFormat> FillFormatDisp;

typedef TComInterface<FreeformBuilder>  TCOMFreeformBuilder;

// *********************************************************************//
// DispIntf:  FreeformBuilder
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0315-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class FreeformBuilderDispT : public TAutoDriver<FreeformBuilder>
{
public:
  FreeformBuilderDispT(){}

  FreeformBuilderDispT(FreeformBuilder *pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, false);
  }

  FreeformBuilderDispT(FreeformBuilderPtr pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, true);
  }

  FreeformBuilderDispT& operator=(FreeformBuilder *pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, false);
    return *this;
  }

  FreeformBuilderDispT& operator=(FreeformBuilderPtr pintf)
  {
    TAutoDriver<FreeformBuilder>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddNodes(Office_97::MsoSegmentType SegmentType/*[in]*/, 
                                                 Office_97::MsoEditingType EditingType/*[in]*/, 
                                                 float X1/*[in]*/, float Y1/*[in]*/, 
                                                 float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/
                                                 , float X3/*[in,def,opt]*/, 
                                                 float Y3/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ConvertToShape(Office_97::Shape** Freeform/*[out,retval]*/);
  Office_97::Shape* __fastcall ConvertToShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef FreeformBuilderDispT<FreeformBuilder> FreeformBuilderDisp;

typedef TComInterface<GroupShapes>  TCOMGroupShapes;

// *********************************************************************//
// DispIntf:  GroupShapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0316-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class GroupShapesDispT : public TAutoDriver<GroupShapes>
{
public:
  GroupShapesDispT(){}

  GroupShapesDispT(GroupShapes *pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, false);
  }

  GroupShapesDispT(GroupShapesPtr pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, true);
  }

  GroupShapesDispT& operator=(GroupShapes *pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, false);
    return *this;
  }

  GroupShapesDispT& operator=(GroupShapesPtr pintf)
  {
    TAutoDriver<GroupShapes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pnShapes/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Office_97::Shape** Item/*[out,retval]*/);
  Office_97::Shape* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef GroupShapesDispT<GroupShapes> GroupShapesDisp;

typedef TComInterface<LineFormat>  TCOMLineFormat;

// *********************************************************************//
// DispIntf:  LineFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0317-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class LineFormatDispT : public TAutoDriver<LineFormat>
{
public:
  LineFormatDispT(){}

  LineFormatDispT(LineFormat *pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, false);
  }

  LineFormatDispT(LineFormatPtr pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, true);
  }

  LineFormatDispT& operator=(LineFormat *pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, false);
    return *this;
  }

  LineFormatDispT& operator=(LineFormatPtr pintf)
  {
    TAutoDriver<LineFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BackColor(Office_97::ColorFormat** BackColor/*[out,retval]*/);
  Office_97::ColorFormat* __fastcall get_BackColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BackColor(Office_97::ColorFormat* BackColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadLength(Office_97::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/);
  Office_97::MsoArrowheadLength __fastcall get_BeginArrowheadLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadLength(Office_97::MsoArrowheadLength BeginArrowheadLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadStyle(Office_97::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/);
  Office_97::MsoArrowheadStyle __fastcall get_BeginArrowheadStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadStyle(Office_97::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BeginArrowheadWidth(Office_97::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/);
  Office_97::MsoArrowheadWidth __fastcall get_BeginArrowheadWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BeginArrowheadWidth(Office_97::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DashStyle(Office_97::MsoLineDashStyle* DashStyle/*[out,retval]*/);
  Office_97::MsoLineDashStyle __fastcall get_DashStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DashStyle(Office_97::MsoLineDashStyle DashStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadLength(Office_97::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/);
  Office_97::MsoArrowheadLength __fastcall get_EndArrowheadLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadLength(Office_97::MsoArrowheadLength EndArrowheadLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadStyle(Office_97::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/);
  Office_97::MsoArrowheadStyle __fastcall get_EndArrowheadStyle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadStyle(Office_97::MsoArrowheadStyle EndArrowheadStyle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EndArrowheadWidth(Office_97::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/);
  Office_97::MsoArrowheadWidth __fastcall get_EndArrowheadWidth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EndArrowheadWidth(Office_97::MsoArrowheadWidth EndArrowheadWidth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Office_97::ColorFormat** ForeColor/*[out,retval]*/);
  Office_97::ColorFormat* __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Office_97::ColorFormat* ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Pattern(Office_97::MsoPatternType* Pattern/*[out,retval]*/);
  Office_97::MsoPatternType __fastcall get_Pattern(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Pattern(Office_97::MsoPatternType Pattern/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Style(Office_97::MsoLineStyle* Style/*[out,retval]*/);
  Office_97::MsoLineStyle __fastcall get_Style(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Style(Office_97::MsoLineStyle Style/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_97::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Weight(float* Weight/*[out,retval]*/);
  float           __fastcall get_Weight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Weight(float Weight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::ColorFormat* BackColor = {read = get_BackColor, write = set_BackColor};
  __property   Office_97::MsoArrowheadLength BeginArrowheadLength = {read = get_BeginArrowheadLength, write = set_BeginArrowheadLength};
  __property   Office_97::MsoArrowheadStyle BeginArrowheadStyle = {read = get_BeginArrowheadStyle, write = set_BeginArrowheadStyle};
  __property   Office_97::MsoArrowheadWidth BeginArrowheadWidth = {read = get_BeginArrowheadWidth, write = set_BeginArrowheadWidth};
  __property   Office_97::MsoLineDashStyle DashStyle = {read = get_DashStyle, write = set_DashStyle};
  __property   Office_97::MsoArrowheadLength EndArrowheadLength = {read = get_EndArrowheadLength, write = set_EndArrowheadLength};
  __property   Office_97::MsoArrowheadStyle EndArrowheadStyle = {read = get_EndArrowheadStyle, write = set_EndArrowheadStyle};
  __property   Office_97::MsoArrowheadWidth EndArrowheadWidth = {read = get_EndArrowheadWidth, write = set_EndArrowheadWidth};
  __property   Office_97::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_97::MsoPatternType Pattern = {read = get_Pattern, write = set_Pattern};
  __property   Office_97::MsoLineStyle Style = {read = get_Style, write = set_Style};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Weight = {read = get_Weight, write = set_Weight};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef LineFormatDispT<LineFormat> LineFormatDisp;

typedef TComInterface<ShapeNode>  TCOMShapeNode;

// *********************************************************************//
// DispIntf:  ShapeNode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0318-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShapeNodeDispT : public TAutoDriver<ShapeNode>
{
public:
  ShapeNodeDispT(){}

  ShapeNodeDispT(ShapeNode *pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, false);
  }

  ShapeNodeDispT(ShapeNodePtr pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, true);
  }

  ShapeNodeDispT& operator=(ShapeNode *pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, false);
    return *this;
  }

  ShapeNodeDispT& operator=(ShapeNodePtr pintf)
  {
    TAutoDriver<ShapeNode>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditingType(Office_97::MsoEditingType* EditingType/*[out,retval]*/);
  Office_97::MsoEditingType __fastcall get_EditingType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Points(VARIANT* Points/*[out,retval]*/);
  VARIANT         __fastcall get_Points(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SegmentType(Office_97::MsoSegmentType* SegmentType/*[out,retval]*/);
  Office_97::MsoSegmentType __fastcall get_SegmentType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoEditingType EditingType = {read = get_EditingType};
  __property   Office_97::MsoSegmentType SegmentType = {read = get_SegmentType};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShapeNodeDispT<ShapeNode> ShapeNodeDisp;

typedef TComInterface<ShapeNodes>  TCOMShapeNodes;

// *********************************************************************//
// DispIntf:  ShapeNodes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0319-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShapeNodesDispT : public TAutoDriver<ShapeNodes>
{
public:
  ShapeNodesDispT(){}

  ShapeNodesDispT(ShapeNodes *pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, false);
  }

  ShapeNodesDispT(ShapeNodesPtr pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, true);
  }

  ShapeNodesDispT& operator=(ShapeNodes *pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, false);
    return *this;
  }

  ShapeNodesDispT& operator=(ShapeNodesPtr pintf)
  {
    TAutoDriver<ShapeNodes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Office_97::ShapeNode** Item/*[out,retval]*/);
  Office_97::ShapeNode* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Insert(int Index/*[in]*/, 
                                               Office_97::MsoSegmentType SegmentType/*[in]*/, 
                                               Office_97::MsoEditingType EditingType/*[in]*/, 
                                               float X1/*[in]*/, float Y1/*[in]*/, 
                                               float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                                               float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetEditingType(int Index/*[in]*/, 
                                                       Office_97::MsoEditingType EditingType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetPosition(int Index/*[in]*/, float X1/*[in]*/, 
                                                    float Y1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetSegmentType(int Index/*[in]*/, 
                                                       Office_97::MsoSegmentType SegmentType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShapeNodesDispT<ShapeNodes> ShapeNodesDisp;

typedef TComInterface<PictureFormat>  TCOMPictureFormat;

// *********************************************************************//
// DispIntf:  PictureFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031A-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class PictureFormatDispT : public TAutoDriver<PictureFormat>
{
public:
  PictureFormatDispT(){}

  PictureFormatDispT(PictureFormat *pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, false);
  }

  PictureFormatDispT(PictureFormatPtr pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, true);
  }

  PictureFormatDispT& operator=(PictureFormat *pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, false);
    return *this;
  }

  PictureFormatDispT& operator=(PictureFormatPtr pintf)
  {
    TAutoDriver<PictureFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementBrightness(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementContrast(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Brightness(float* Brightness/*[out,retval]*/);
  float           __fastcall get_Brightness(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Brightness(float Brightness/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ColorType(Office_97::MsoPictureColorType* ColorType/*[out,retval]*/);
  Office_97::MsoPictureColorType __fastcall get_ColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ColorType(Office_97::MsoPictureColorType ColorType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Contrast(float* Contrast/*[out,retval]*/);
  float           __fastcall get_Contrast(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Contrast(float Contrast/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropBottom(float* CropBottom/*[out,retval]*/);
  float           __fastcall get_CropBottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropBottom(float CropBottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropLeft(float* CropLeft/*[out,retval]*/);
  float           __fastcall get_CropLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropLeft(float CropLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropRight(float* CropRight/*[out,retval]*/);
  float           __fastcall get_CropRight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropRight(float CropRight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CropTop(float* CropTop/*[out,retval]*/);
  float           __fastcall get_CropTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_CropTop(float CropTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TransparencyColor(Office_97::MsoRGBType* TransparencyColor/*[out,retval]*/);
  Office_97::MsoRGBType __fastcall get_TransparencyColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TransparencyColor(Office_97::MsoRGBType TransparencyColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TransparentBackground(Office_97::MsoTriState* TransparentBackground/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_TransparentBackground(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TransparentBackground(Office_97::MsoTriState TransparentBackground/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Brightness = {read = get_Brightness, write = set_Brightness};
  __property   Office_97::MsoPictureColorType ColorType = {read = get_ColorType, write = set_ColorType};
  __property   float           Contrast = {read = get_Contrast, write = set_Contrast};
  __property   float           CropBottom = {read = get_CropBottom, write = set_CropBottom};
  __property   float           CropLeft = {read = get_CropLeft, write = set_CropLeft};
  __property   float           CropRight = {read = get_CropRight, write = set_CropRight};
  __property   float           CropTop = {read = get_CropTop, write = set_CropTop};
  __property   Office_97::MsoRGBType TransparencyColor = {read = get_TransparencyColor, write = set_TransparencyColor};
  __property   Office_97::MsoTriState TransparentBackground = {read = get_TransparentBackground, write = set_TransparentBackground};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef PictureFormatDispT<PictureFormat> PictureFormatDisp;

typedef TComInterface<ShadowFormat>  TCOMShadowFormat;

// *********************************************************************//
// DispIntf:  ShadowFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031B-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShadowFormatDispT : public TAutoDriver<ShadowFormat>
{
public:
  ShadowFormatDispT(){}

  ShadowFormatDispT(ShadowFormat *pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, false);
  }

  ShadowFormatDispT(ShadowFormatPtr pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, true);
  }

  ShadowFormatDispT& operator=(ShadowFormat *pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, false);
    return *this;
  }

  ShadowFormatDispT& operator=(ShadowFormatPtr pintf)
  {
    TAutoDriver<ShadowFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementOffsetX(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementOffsetY(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ForeColor(Office_97::ColorFormat** ForeColor/*[out,retval]*/);
  Office_97::ColorFormat* __fastcall get_ForeColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ForeColor(Office_97::ColorFormat* ForeColor/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Obscured(Office_97::MsoTriState* Obscured/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Obscured(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Obscured(Office_97::MsoTriState Obscured/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OffsetX(float* OffsetX/*[out,retval]*/);
  float           __fastcall get_OffsetX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OffsetX(float OffsetX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OffsetY(float* OffsetY/*[out,retval]*/);
  float           __fastcall get_OffsetY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OffsetY(float OffsetY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Transparency(float* Transparency/*[out,retval]*/);
  float           __fastcall get_Transparency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Transparency(float Transparency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoShadowType* Type/*[out,retval]*/);
  Office_97::MsoShadowType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_97::MsoShadowType Type/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_97::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::ColorFormat* ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Office_97::MsoTriState Obscured = {read = get_Obscured, write = set_Obscured};
  __property   float           OffsetX = {read = get_OffsetX, write = set_OffsetX};
  __property   float           OffsetY = {read = get_OffsetY, write = set_OffsetY};
  __property   float           Transparency = {read = get_Transparency, write = set_Transparency};
  __property   Office_97::MsoShadowType Type = {read = get_Type, write = set_Type};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShadowFormatDispT<ShadowFormat> ShadowFormatDisp;

typedef TComInterface<Shape>  TCOMShape;

// *********************************************************************//
// DispIntf:  Shape
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031C-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShapeDispT : public TAutoDriver<Shape>
{
public:
  ShapeDispT(){}

  ShapeDispT(Shape *pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, false);
  }

  ShapeDispT(ShapePtr pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, true);
  }

  ShapeDispT& operator=(Shape *pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, false);
    return *this;
  }

  ShapeDispT& operator=(ShapePtr pintf)
  {
    TAutoDriver<Shape>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Apply();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Office_97::Shape** Duplicate/*[out,retval]*/);
  Office_97::Shape* __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Flip(Office_97::MsoFlipCmd FlipCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementLeft(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotation(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementTop(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PickUp();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RerouteConnections();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleHeight(float Factor/*[in]*/, 
                                                    Office_97::MsoTriState RelativeToOriginalSize/*[in]*/
                                                    , Office_97::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleWidth(float Factor/*[in]*/, 
                                                   Office_97::MsoTriState RelativeToOriginalSize/*[in]*/
                                                   , Office_97::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(VARIANT Replace/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetShapesDefaultProperties();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Ungroup(Office_97::ShapeRange** Ungroup/*[out,retval]*/);
  Office_97::ShapeRange* __fastcall Ungroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ZOrder(Office_97::MsoZOrderCmd ZOrderCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Adjustments(Office_97::Adjustments** Adjustments/*[out,retval]*/);
  Office_97::Adjustments* __fastcall get_Adjustments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoShapeType(Office_97::MsoAutoShapeType* AutoShapeType/*[out,retval]*/);
  Office_97::MsoAutoShapeType __fastcall get_AutoShapeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoShapeType(Office_97::MsoAutoShapeType AutoShapeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BlackWhiteMode(Office_97::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/);
  Office_97::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BlackWhiteMode(Office_97::MsoBlackWhiteMode BlackWhiteMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Callout(Office_97::CalloutFormat** Callout/*[out,retval]*/);
  Office_97::CalloutFormat* __fastcall get_Callout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/);
  int             __fastcall get_ConnectionSiteCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connector(Office_97::MsoTriState* Connector/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Connector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectorFormat(Office_97::ConnectorFormat** ConnectorFormat/*[out,retval]*/);
  Office_97::ConnectorFormat* __fastcall get_ConnectorFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Office_97::FillFormat** Fill/*[out,retval]*/);
  Office_97::FillFormat* __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupItems(Office_97::GroupShapes** GroupItems/*[out,retval]*/);
  Office_97::GroupShapes* __fastcall get_GroupItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalFlip(Office_97::MsoTriState* HorizontalFlip/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_HorizontalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Office_97::LineFormat** Line/*[out,retval]*/);
  Office_97::LineFormat* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LockAspectRatio(Office_97::MsoTriState* LockAspectRatio/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_LockAspectRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LockAspectRatio(Office_97::MsoTriState LockAspectRatio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Nodes(Office_97::ShapeNodes** Nodes/*[out,retval]*/);
  Office_97::ShapeNodes* __fastcall get_Nodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rotation(float* Rotation/*[out,retval]*/);
  float           __fastcall get_Rotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rotation(float Rotation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureFormat(Office_97::PictureFormat** Picture/*[out,retval]*/);
  Office_97::PictureFormat* __fastcall get_PictureFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(Office_97::ShadowFormat** Shadow/*[out,retval]*/);
  Office_97::ShadowFormat* __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextEffect(Office_97::TextEffectFormat** TextEffect/*[out,retval]*/);
  Office_97::TextEffectFormat* __fastcall get_TextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFrame(Office_97::TextFrame** TextFrame/*[out,retval]*/);
  Office_97::TextFrame* __fastcall get_TextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThreeD(Office_97::ThreeDFormat** ThreeD/*[out,retval]*/);
  Office_97::ThreeDFormat* __fastcall get_ThreeD(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoShapeType* Type/*[out,retval]*/);
  Office_97::MsoShapeType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalFlip(Office_97::MsoTriState* VerticalFlip/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_VerticalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Vertices(VARIANT* Vertices/*[out,retval]*/);
  VARIANT         __fastcall get_Vertices(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_97::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::Adjustments* Adjustments = {read = get_Adjustments};
  __property   Office_97::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_97::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Office_97::CalloutFormat* Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_97::MsoTriState Connector = {read = get_Connector};
  __property   Office_97::ConnectorFormat* ConnectorFormat = {read = get_ConnectorFormat};
  __property   Office_97::FillFormat* Fill = {read = get_Fill};
  __property   Office_97::GroupShapes* GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_97::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Office_97::LineFormat* Line = {read = get_Line};
  __property   Office_97::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name};
  __property   Office_97::ShapeNodes* Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Office_97::PictureFormat* PictureFormat = {read = get_PictureFormat};
  __property   Office_97::ShadowFormat* Shadow = {read = get_Shadow};
  __property   Office_97::TextEffectFormat* TextEffect = {read = get_TextEffect};
  __property   Office_97::TextFrame* TextFrame = {read = get_TextFrame};
  __property   Office_97::ThreeDFormat* ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_97::MsoShapeType Type = {read = get_Type};
  __property   Office_97::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShapeDispT<Shape> ShapeDisp;

typedef TComInterface<ShapeRange>  TCOMShapeRange;

// *********************************************************************//
// DispIntf:  ShapeRange
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031D-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShapeRangeDispT : public TAutoDriver<ShapeRange>
{
public:
  ShapeRangeDispT(){}

  ShapeRangeDispT(ShapeRange *pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, false);
  }

  ShapeRangeDispT(ShapeRangePtr pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, true);
  }

  ShapeRangeDispT& operator=(ShapeRange *pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, false);
    return *this;
  }

  ShapeRangeDispT& operator=(ShapeRangePtr pintf)
  {
    TAutoDriver<ShapeRange>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Office_97::Shape** Item/*[out,retval]*/);
  Office_97::Shape* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Align(Office_97::MsoAlignCmd AlignCmd/*[in]*/, 
                                              Office_97::MsoTriState RelativeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Apply();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Distribute(Office_97::MsoDistributeCmd DistributeCmd/*[in]*/
                                                   , Office_97::MsoTriState RelativeTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Duplicate(Office_97::ShapeRange** Duplicate/*[out,retval]*/);
  Office_97::ShapeRange* __fastcall Duplicate(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Flip(Office_97::MsoFlipCmd FlipCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementLeft(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotation(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementTop(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Group(Office_97::Shape** Group/*[out,retval]*/);
  Office_97::Shape* __fastcall Group(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PickUp();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Regroup(Office_97::Shape** Regroup/*[out,retval]*/);
  Office_97::Shape* __fastcall Regroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RerouteConnections();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleHeight(float Factor/*[in]*/, 
                                                    Office_97::MsoTriState RelativeToOriginalSize/*[in]*/
                                                    , Office_97::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ScaleWidth(float Factor/*[in]*/, 
                                                   Office_97::MsoTriState RelativeToOriginalSize/*[in]*/
                                                   , Office_97::MsoScaleFrom fScale/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Select(VARIANT Replace/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetShapesDefaultProperties();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Ungroup(Office_97::ShapeRange** Ungroup/*[out,retval]*/);
  Office_97::ShapeRange* __fastcall Ungroup(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ZOrder(Office_97::MsoZOrderCmd ZOrderCmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Adjustments(Office_97::Adjustments** Adjustments/*[out,retval]*/);
  Office_97::Adjustments* __fastcall get_Adjustments(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AutoShapeType(Office_97::MsoAutoShapeType* AutoShapeType/*[out,retval]*/);
  Office_97::MsoAutoShapeType __fastcall get_AutoShapeType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AutoShapeType(Office_97::MsoAutoShapeType AutoShapeType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BlackWhiteMode(Office_97::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/);
  Office_97::MsoBlackWhiteMode __fastcall get_BlackWhiteMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BlackWhiteMode(Office_97::MsoBlackWhiteMode BlackWhiteMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Callout(Office_97::CalloutFormat** Callout/*[out,retval]*/);
  Office_97::CalloutFormat* __fastcall get_Callout(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/);
  int             __fastcall get_ConnectionSiteCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connector(Office_97::MsoTriState* Connector/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Connector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectorFormat(Office_97::ConnectorFormat** ConnectorFormat/*[out,retval]*/);
  Office_97::ConnectorFormat* __fastcall get_ConnectorFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fill(Office_97::FillFormat** Fill/*[out,retval]*/);
  Office_97::FillFormat* __fastcall get_Fill(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GroupItems(Office_97::GroupShapes** GroupItems/*[out,retval]*/);
  Office_97::GroupShapes* __fastcall get_GroupItems(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Height(float* Height/*[out,retval]*/);
  float           __fastcall get_Height(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Height(float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalFlip(Office_97::MsoTriState* HorizontalFlip/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_HorizontalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(float* Left/*[out,retval]*/);
  float           __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(float Left/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Line(Office_97::LineFormat** Line/*[out,retval]*/);
  Office_97::LineFormat* __fastcall get_Line(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LockAspectRatio(Office_97::MsoTriState* LockAspectRatio/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_LockAspectRatio(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LockAspectRatio(Office_97::MsoTriState LockAspectRatio/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR Name/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Nodes(Office_97::ShapeNodes** Nodes/*[out,retval]*/);
  Office_97::ShapeNodes* __fastcall get_Nodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Rotation(float* Rotation/*[out,retval]*/);
  float           __fastcall get_Rotation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Rotation(float Rotation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PictureFormat(Office_97::PictureFormat** Picture/*[out,retval]*/);
  Office_97::PictureFormat* __fastcall get_PictureFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Shadow(Office_97::ShadowFormat** Shadow/*[out,retval]*/);
  Office_97::ShadowFormat* __fastcall get_Shadow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextEffect(Office_97::TextEffectFormat** TextEffect/*[out,retval]*/);
  Office_97::TextEffectFormat* __fastcall get_TextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextFrame(Office_97::TextFrame** TextFrame/*[out,retval]*/);
  Office_97::TextFrame* __fastcall get_TextFrame(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThreeD(Office_97::ThreeDFormat** ThreeD/*[out,retval]*/);
  Office_97::ThreeDFormat* __fastcall get_ThreeD(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(float* Top/*[out,retval]*/);
  float           __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoShapeType* Type/*[out,retval]*/);
  Office_97::MsoShapeType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalFlip(Office_97::MsoTriState* VerticalFlip/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_VerticalFlip(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Vertices(VARIANT* Vertices/*[out,retval]*/);
  VARIANT         __fastcall get_Vertices(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_97::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Width(float* Width/*[out,retval]*/);
  float           __fastcall get_Width(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Width(float Width/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/);
  int             __fastcall get_ZOrderPosition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_97::Adjustments* Adjustments = {read = get_Adjustments};
  __property   Office_97::MsoAutoShapeType AutoShapeType = {read = get_AutoShapeType, write = set_AutoShapeType};
  __property   Office_97::MsoBlackWhiteMode BlackWhiteMode = {read = get_BlackWhiteMode, write = set_BlackWhiteMode};
  __property   Office_97::CalloutFormat* Callout = {read = get_Callout};
  __property   int             ConnectionSiteCount = {read = get_ConnectionSiteCount};
  __property   Office_97::MsoTriState Connector = {read = get_Connector};
  __property   Office_97::ConnectorFormat* ConnectorFormat = {read = get_ConnectorFormat};
  __property   Office_97::FillFormat* Fill = {read = get_Fill};
  __property   Office_97::GroupShapes* GroupItems = {read = get_GroupItems};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   Office_97::MsoTriState HorizontalFlip = {read = get_HorizontalFlip};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   Office_97::LineFormat* Line = {read = get_Line};
  __property   Office_97::MsoTriState LockAspectRatio = {read = get_LockAspectRatio, write = set_LockAspectRatio};
  __property   BSTR            Name = {read = get_Name};
  __property   Office_97::ShapeNodes* Nodes = {read = get_Nodes};
  __property   float           Rotation = {read = get_Rotation, write = set_Rotation};
  __property   Office_97::PictureFormat* PictureFormat = {read = get_PictureFormat};
  __property   Office_97::ShadowFormat* Shadow = {read = get_Shadow};
  __property   Office_97::TextEffectFormat* TextEffect = {read = get_TextEffect};
  __property   Office_97::TextFrame* TextFrame = {read = get_TextFrame};
  __property   Office_97::ThreeDFormat* ThreeD = {read = get_ThreeD};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   Office_97::MsoShapeType Type = {read = get_Type};
  __property   Office_97::MsoTriState VerticalFlip = {read = get_VerticalFlip};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   int             ZOrderPosition = {read = get_ZOrderPosition};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShapeRangeDispT<ShapeRange> ShapeRangeDisp;

typedef TComInterface<Shapes>  TCOMShapes;

// *********************************************************************//
// DispIntf:  Shapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ShapesDispT : public TAutoDriver<Shapes>
{
public:
  ShapesDispT(){}

  ShapesDispT(Shapes *pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, false);
  }

  ShapesDispT(ShapesPtr pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, true);
  }

  ShapesDispT& operator=(Shapes *pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, false);
    return *this;
  }

  ShapesDispT& operator=(ShapesPtr pintf)
  {
    TAutoDriver<Shapes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* Count/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Item(VARIANT Index/*[in]*/, 
                                             Office_97::Shape** Item/*[out,retval]*/);
  Office_97::Shape* __fastcall Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCallout(Office_97::MsoCalloutType Type/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Office_97::Shape** Callout/*[out,retval]*/);
  Office_97::Shape* __fastcall AddCallout(Office_97::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                                          float Top/*[in]*/, float Width/*[in]*/, 
                                          float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddConnector(Office_97::MsoConnectorType Type/*[in]*/, 
                                                     float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                     float EndX/*[in]*/, float EndY/*[in]*/, 
                                                     Office_97::Shape** Connector/*[out,retval]*/);
  Office_97::Shape* __fastcall AddConnector(Office_97::MsoConnectorType Type/*[in]*/, 
                                            float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                            float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddCurve(VARIANT SafeArrayOfPoints/*[in]*/, 
                                                 Office_97::Shape** Curve/*[out,retval]*/);
  Office_97::Shape* __fastcall AddCurve(VARIANT SafeArrayOfPoints/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLabel(Office_97::MsoTextOrientation Orientation/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Office_97::Shape** Label/*[out,retval]*/);
  Office_97::Shape* __fastcall AddLabel(Office_97::MsoTextOrientation Orientation/*[in]*/, 
                                        float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                        float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                                float EndX/*[in]*/, float EndY/*[in]*/, 
                                                Office_97::Shape** Line/*[out,retval]*/);
  Office_97::Shape* __fastcall AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, 
                                       float EndX/*[in]*/, float EndY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                                   Office_97::MsoTriState LinkToFile/*[in]*/, 
                                                   Office_97::MsoTriState SaveWithDocument/*[in]*/, 
                                                   float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Office_97::Shape** Picture/*[out,retval]*/);
  Office_97::Shape* __fastcall AddPicture(BSTR FileName/*[in]*/, 
                                          Office_97::MsoTriState LinkToFile/*[in]*/, 
                                          Office_97::MsoTriState SaveWithDocument/*[in]*/, 
                                          float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                          float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/, 
                                                    Office_97::Shape** Polyline/*[out,retval]*/);
  Office_97::Shape* __fastcall AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddShape(Office_97::MsoAutoShapeType Type/*[in]*/, 
                                                 float Left/*[in]*/, float Top/*[in]*/, 
                                                 float Width/*[in]*/, float Height/*[in]*/, 
                                                 Office_97::Shape** Shape/*[out,retval]*/);
  Office_97::Shape* __fastcall AddShape(Office_97::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                                        float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTextEffect(Office_97::MsoPresetTextEffect PresetTextEffect/*[in]*/
                                                      , BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                                      float FontSize/*[in]*/, 
                                                      Office_97::MsoTriState FontBold/*[in]*/, 
                                                      Office_97::MsoTriState FontItalic/*[in]*/, 
                                                      float Left/*[in]*/, float Top/*[in]*/, 
                                                      Office_97::Shape** TextEffect/*[out,retval]*/);
  Office_97::Shape* __fastcall AddTextEffect(Office_97::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                                             BSTR Text/*[in]*/, BSTR FontName/*[in]*/, 
                                             float FontSize/*[in]*/, 
                                             Office_97::MsoTriState FontBold/*[in]*/, 
                                             Office_97::MsoTriState FontItalic/*[in]*/, 
                                             float Left/*[in]*/, float Top/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTextbox(Office_97::MsoTextOrientation Orientation/*[in]*/
                                                   , float Left/*[in]*/, float Top/*[in]*/, 
                                                   float Width/*[in]*/, float Height/*[in]*/, 
                                                   Office_97::Shape** Textbox/*[out,retval]*/);
  Office_97::Shape* __fastcall AddTextbox(Office_97::MsoTextOrientation Orientation/*[in]*/, 
                                          float Left/*[in]*/, float Top/*[in]*/, float Width/*[in]*/, 
                                          float Height/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BuildFreeform(Office_97::MsoEditingType EditingType/*[in]*/
                                                      , float X1/*[in]*/, float Y1/*[in]*/, 
                                                      Office_97::FreeformBuilder** FreeformBuilder/*[out,retval]*/);
  Office_97::FreeformBuilder* __fastcall BuildFreeform(Office_97::MsoEditingType EditingType/*[in]*/, 
                                                       float X1/*[in]*/, float Y1/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Range(VARIANT Index/*[in]*/, 
                                              Office_97::ShapeRange** Range/*[out,retval]*/);
  Office_97::ShapeRange* __fastcall Range(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SelectAll();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Background(Office_97::Shape** Background/*[out,retval]*/);
  Office_97::Shape* __fastcall get_Background(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Default(Office_97::Shape** Default/*[out,retval]*/);
  Office_97::Shape* __fastcall get_Default(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   Office_97::Shape* Background = {read = get_Background};
  __property   Office_97::Shape* Default = {read = get_Default};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ShapesDispT<Shapes> ShapesDisp;

typedef TComInterface<TextEffectFormat>  TCOMTextEffectFormat;

// *********************************************************************//
// DispIntf:  TextEffectFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031F-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class TextEffectFormatDispT : public TAutoDriver<TextEffectFormat>
{
public:
  TextEffectFormatDispT(){}

  TextEffectFormatDispT(TextEffectFormat *pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, false);
  }

  TextEffectFormatDispT(TextEffectFormatPtr pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, true);
  }

  TextEffectFormatDispT& operator=(TextEffectFormat *pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, false);
    return *this;
  }

  TextEffectFormatDispT& operator=(TextEffectFormatPtr pintf)
  {
    TAutoDriver<TextEffectFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ToggleVerticalText();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Alignment(Office_97::MsoTextEffectAlignment* Alignment/*[out,retval]*/);
  Office_97::MsoTextEffectAlignment __fastcall get_Alignment(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Alignment(Office_97::MsoTextEffectAlignment Alignment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontBold(Office_97::MsoTriState* FontBold/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_FontBold(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontBold(Office_97::MsoTriState FontBold/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontItalic(Office_97::MsoTriState* FontItalic/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_FontItalic(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontItalic(Office_97::MsoTriState FontItalic/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontName(BSTR* FontName/*[out,retval]*/);
  BSTR            __fastcall get_FontName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontName(BSTR FontName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FontSize(float* FontSize/*[out,retval]*/);
  float           __fastcall get_FontSize(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FontSize(float FontSize/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KernedPairs(Office_97::MsoTriState* KernedPairs/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_KernedPairs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KernedPairs(Office_97::MsoTriState KernedPairs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NormalizedHeight(Office_97::MsoTriState* NormalizedHeight/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_NormalizedHeight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NormalizedHeight(Office_97::MsoTriState NormalizedHeight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetShape(Office_97::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/);
  Office_97::MsoPresetTextEffectShape __fastcall get_PresetShape(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetShape(Office_97::MsoPresetTextEffectShape PresetShape/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetTextEffect(Office_97::MsoPresetTextEffect* Preset/*[out,retval]*/);
  Office_97::MsoPresetTextEffect __fastcall get_PresetTextEffect(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetTextEffect(Office_97::MsoPresetTextEffect Preset/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotatedChars(Office_97::MsoTriState* RotatedChars/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_RotatedChars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotatedChars(Office_97::MsoTriState RotatedChars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* Text/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR Text/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Tracking(float* Tracking/*[out,retval]*/);
  float           __fastcall get_Tracking(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Tracking(float Tracking/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   Office_97::MsoTextEffectAlignment Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Office_97::MsoTriState FontBold = {read = get_FontBold, write = set_FontBold};
  __property   Office_97::MsoTriState FontItalic = {read = get_FontItalic, write = set_FontItalic};
  __property   BSTR            FontName = {read = get_FontName};
  __property   float           FontSize = {read = get_FontSize, write = set_FontSize};
  __property   Office_97::MsoTriState KernedPairs = {read = get_KernedPairs, write = set_KernedPairs};
  __property   Office_97::MsoTriState NormalizedHeight = {read = get_NormalizedHeight, write = set_NormalizedHeight};
  __property   Office_97::MsoPresetTextEffectShape PresetShape = {read = get_PresetShape, write = set_PresetShape};
  __property   Office_97::MsoPresetTextEffect PresetTextEffect = {read = get_PresetTextEffect, write = set_PresetTextEffect};
  __property   Office_97::MsoTriState RotatedChars = {read = get_RotatedChars, write = set_RotatedChars};
  __property   BSTR            Text = {read = get_Text};
  __property   float           Tracking = {read = get_Tracking, write = set_Tracking};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef TextEffectFormatDispT<TextEffectFormat> TextEffectFormatDisp;

typedef TComInterface<TextFrame>  TCOMTextFrame;

// *********************************************************************//
// DispIntf:  TextFrame
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0320-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class TextFrameDispT : public TAutoDriver<TextFrame>
{
public:
  TextFrameDispT(){}

  TextFrameDispT(TextFrame *pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, false);
  }

  TextFrameDispT(TextFramePtr pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, true);
  }

  TextFrameDispT& operator=(TextFrame *pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, false);
    return *this;
  }

  TextFrameDispT& operator=(TextFramePtr pintf)
  {
    TAutoDriver<TextFrame>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginBottom(float* MarginBottom/*[out,retval]*/);
  float           __fastcall get_MarginBottom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginBottom(float MarginBottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginLeft(float* MarginLeft/*[out,retval]*/);
  float           __fastcall get_MarginLeft(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginLeft(float MarginLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginRight(float* MarginRight/*[out,retval]*/);
  float           __fastcall get_MarginRight(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginRight(float MarginRight/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MarginTop(float* MarginTop/*[out,retval]*/);
  float           __fastcall get_MarginTop(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MarginTop(float MarginTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Orientation(Office_97::MsoTextOrientation* Orientation/*[out,retval]*/);
  Office_97::MsoTextOrientation __fastcall get_Orientation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Orientation(Office_97::MsoTextOrientation Orientation/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           MarginBottom = {read = get_MarginBottom, write = set_MarginBottom};
  __property   float           MarginLeft = {read = get_MarginLeft, write = set_MarginLeft};
  __property   float           MarginRight = {read = get_MarginRight, write = set_MarginRight};
  __property   float           MarginTop = {read = get_MarginTop, write = set_MarginTop};
  __property   Office_97::MsoTextOrientation Orientation = {read = get_Orientation, write = set_Orientation};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef TextFrameDispT<TextFrame> TextFrameDisp;

typedef TComInterface<ThreeDFormat>  TCOMThreeDFormat;

// *********************************************************************//
// DispIntf:  ThreeDFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0321-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class ThreeDFormatDispT : public TAutoDriver<ThreeDFormat>
{
public:
  ThreeDFormatDispT(){}

  ThreeDFormatDispT(ThreeDFormat *pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, false);
  }

  ThreeDFormatDispT(ThreeDFormatPtr pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, true);
  }

  ThreeDFormatDispT& operator=(ThreeDFormat *pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, false);
    return *this;
  }

  ThreeDFormatDispT& operator=(ThreeDFormatPtr pintf)
  {
    TAutoDriver<ThreeDFormat>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* Parent/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotationX(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IncrementRotationY(float Increment/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetRotation();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetThreeDFormat(Office_97::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetExtrusionDirection(Office_97::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Depth(float* Depth/*[out,retval]*/);
  float           __fastcall get_Depth(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Depth(float Depth/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtrusionColor(Office_97::ColorFormat** ExtrusionColor/*[out,retval]*/);
  Office_97::ColorFormat* __fastcall get_ExtrusionColor(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ExtrusionColorType(Office_97::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/);
  Office_97::MsoExtrusionColorType __fastcall get_ExtrusionColorType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ExtrusionColorType(Office_97::MsoExtrusionColorType ExtrusionColorType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Perspective(Office_97::MsoTriState* Perspective/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Perspective(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Perspective(Office_97::MsoTriState Perspective/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetExtrusionDirection(Office_97::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/);
  Office_97::MsoPresetExtrusionDirection __fastcall get_PresetExtrusionDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetLightingDirection(Office_97::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/);
  Office_97::MsoPresetLightingDirection __fastcall get_PresetLightingDirection(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetLightingDirection(Office_97::MsoPresetLightingDirection PresetLightingDirection/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetLightingSoftness(Office_97::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/);
  Office_97::MsoPresetLightingSoftness __fastcall get_PresetLightingSoftness(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetLightingSoftness(Office_97::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetMaterial(Office_97::MsoPresetMaterial* PresetMaterial/*[out,retval]*/);
  Office_97::MsoPresetMaterial __fastcall get_PresetMaterial(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PresetMaterial(Office_97::MsoPresetMaterial PresetMaterial/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PresetThreeDFormat(Office_97::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/);
  Office_97::MsoPresetThreeDFormat __fastcall get_PresetThreeDFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotationX(float* RotationX/*[out,retval]*/);
  float           __fastcall get_RotationX(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotationX(float RotationX/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RotationY(float* RotationY/*[out,retval]*/);
  float           __fastcall get_RotationY(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RotationY(float RotationY/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/);
  Office_97::MsoTriState __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(Office_97::MsoTriState Visible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   float           Depth = {read = get_Depth, write = set_Depth};
  __property   Office_97::ColorFormat* ExtrusionColor = {read = get_ExtrusionColor};
  __property   Office_97::MsoExtrusionColorType ExtrusionColorType = {read = get_ExtrusionColorType, write = set_ExtrusionColorType};
  __property   Office_97::MsoTriState Perspective = {read = get_Perspective, write = set_Perspective};
  __property   Office_97::MsoPresetExtrusionDirection PresetExtrusionDirection = {read = get_PresetExtrusionDirection};
  __property   Office_97::MsoPresetLightingDirection PresetLightingDirection = {read = get_PresetLightingDirection, write = set_PresetLightingDirection};
  __property   Office_97::MsoPresetLightingSoftness PresetLightingSoftness = {read = get_PresetLightingSoftness, write = set_PresetLightingSoftness};
  __property   Office_97::MsoPresetMaterial PresetMaterial = {read = get_PresetMaterial, write = set_PresetMaterial};
  __property   Office_97::MsoPresetThreeDFormat PresetThreeDFormat = {read = get_PresetThreeDFormat};
  __property   float           RotationX = {read = get_RotationX, write = set_RotationX};
  __property   float           RotationY = {read = get_RotationY, write = set_RotationY};
  __property   Office_97::MsoTriState Visible = {read = get_Visible, write = set_Visible};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef ThreeDFormatDispT<ThreeDFormat> ThreeDFormatDisp;

typedef TComInterface<Assistant>  TCOMAssistant;

// *********************************************************************//
// DispIntf:  Assistant
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0322-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class AssistantDispT : public TAutoDriver<Assistant>
{
public:
  AssistantDispT(){}

  AssistantDispT(Assistant *pintf)
  {
    TAutoDriver<Assistant>::Bind(pintf, false);
  }

  AssistantDispT(AssistantPtr pintf)
  {
    TAutoDriver<Assistant>::Bind(pintf, true);
  }

  AssistantDispT& operator=(Assistant *pintf)
  {
    TAutoDriver<Assistant>::Bind(pintf, false);
    return *this;
  }

  AssistantDispT& operator=(AssistantPtr pintf)
  {
    TAutoDriver<Assistant>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(int xLeft/*[in]*/, int yTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Top(int pyTop/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Top(int* pyTop/*[out,retval]*/);
  int             __fastcall get_Top(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Left(int pxLeft/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Left(int* pxLeft/*[out,retval]*/);
  int             __fastcall get_Left(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Help();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall StartWizard(VARIANT_BOOL On/*[in]*/, BSTR Callback/*[in]*/, 
                                                    long PrivateX/*[in]*/, 
                                                    VARIANT Animation/*[in,opt]*/, 
                                                    VARIANT CustomTeaser/*[in,opt]*/, 
                                                    VARIANT Top/*[in,opt]*/, 
                                                    VARIANT Left/*[in,opt]*/, 
                                                    VARIANT Bottom/*[in,opt]*/, 
                                                    VARIANT Right/*[in,opt]*/, 
                                                    long* plWizID/*[out,retval]*/);
  long            __fastcall StartWizard(VARIANT_BOOL On/*[in]*/, BSTR Callback/*[in]*/, 
                                         long PrivateX/*[in]*/, 
                                         VARIANT Animation/*[in,opt]*/= TNoParam(), 
                                         VARIANT CustomTeaser/*[in,opt]*/= TNoParam(), 
                                         VARIANT Top/*[in,opt]*/= TNoParam(), 
                                         VARIANT Left/*[in,opt]*/= TNoParam(), 
                                         VARIANT Bottom/*[in,opt]*/= TNoParam(), 
                                         VARIANT Right/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndWizard(long WizardID/*[in]*/, 
                                                  VARIANT_BOOL varfSuccess/*[in]*/, 
                                                  VARIANT Animation/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ActivateWizard(long WizardID/*[in]*/, 
                                                       Office_97::MsoWizardActType act/*[in]*/, 
                                                       VARIANT Animation/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ResetTips();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewBalloon(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_NewBalloon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BalloonError(Office_97::MsoBalloonErrorType* pbne/*[out,retval]*/);
  Office_97::MsoBalloonErrorType __fastcall get_BalloonError(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Animation(Office_97::MsoAnimationType* pfca/*[out,retval]*/);
  Office_97::MsoAnimationType __fastcall get_Animation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Animation(Office_97::MsoAnimationType pfca/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Reduced(VARIANT_BOOL* pvarfReduced/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Reduced(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Reduced(VARIANT_BOOL pvarfReduced/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AssistWithHelp(VARIANT_BOOL pvarfAssistWithHelp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AssistWithHelp(VARIANT_BOOL* pvarfAssistWithHelp/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AssistWithHelp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AssistWithWizards(VARIANT_BOOL pvarfAssistWithWizards/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AssistWithWizards(VARIANT_BOOL* pvarfAssistWithWizards/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AssistWithWizards(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AssistWithAlerts(VARIANT_BOOL pvarfAssistWithAlerts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AssistWithAlerts(VARIANT_BOOL* pvarfAssistWithAlerts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AssistWithAlerts(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MoveWhenInTheWay(VARIANT_BOOL pvarfMove/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MoveWhenInTheWay(VARIANT_BOOL* pvarfMove/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MoveWhenInTheWay(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Sounds(VARIANT_BOOL pvarfSounds/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Sounds(VARIANT_BOOL* pvarfSounds/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Sounds(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FeatureTips(VARIANT_BOOL pvarfFeatures/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FeatureTips(VARIANT_BOOL* pvarfFeatures/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_FeatureTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MouseTips(VARIANT_BOOL pvarfMouse/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MouseTips(VARIANT_BOOL* pvarfMouse/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MouseTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_KeyboardShortcutTips(VARIANT_BOOL pvarfKeyboardShortcuts/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_KeyboardShortcutTips(VARIANT_BOOL* pvarfKeyboardShortcuts/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_KeyboardShortcutTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_HighPriorityTips(VARIANT_BOOL pvarfHighPriorityTips/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HighPriorityTips(VARIANT_BOOL* pvarfHighPriorityTips/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HighPriorityTips(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TipOfDay(VARIANT_BOOL pvarfTipOfDay/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TipOfDay(VARIANT_BOOL* pvarfTipOfDay/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_TipOfDay(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_GuessHelp(VARIANT_BOOL pvarfGuessHelp/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_GuessHelp(VARIANT_BOOL* pvarfGuessHelp/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GuessHelp(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SearchWhenProgramming(VARIANT_BOOL pvarfSearchInProgram/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SearchWhenProgramming(VARIANT_BOOL* pvarfSearchInProgram/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SearchWhenProgramming(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Item(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileName(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileName(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Top = {read = get_Top, write = set_Top};
  __property   int             Left = {read = get_Left, write = set_Left};
  __property   LPDISPATCH      NewBalloon = {read = get_NewBalloon};
  __property   Office_97::MsoBalloonErrorType BalloonError = {read = get_BalloonError};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   Office_97::MsoAnimationType Animation = {read = get_Animation, write = set_Animation};
  __property   VARIANT_BOOL    Reduced = {read = get_Reduced, write = set_Reduced};
  __property   VARIANT_BOOL    AssistWithHelp = {read = get_AssistWithHelp, write = set_AssistWithHelp};
  __property   VARIANT_BOOL    AssistWithWizards = {read = get_AssistWithWizards, write = set_AssistWithWizards};
  __property   VARIANT_BOOL    AssistWithAlerts = {read = get_AssistWithAlerts, write = set_AssistWithAlerts};
  __property   VARIANT_BOOL    MoveWhenInTheWay = {read = get_MoveWhenInTheWay, write = set_MoveWhenInTheWay};
  __property   VARIANT_BOOL    Sounds = {read = get_Sounds, write = set_Sounds};
  __property   VARIANT_BOOL    FeatureTips = {read = get_FeatureTips, write = set_FeatureTips};
  __property   VARIANT_BOOL    MouseTips = {read = get_MouseTips, write = set_MouseTips};
  __property   VARIANT_BOOL    KeyboardShortcutTips = {read = get_KeyboardShortcutTips, write = set_KeyboardShortcutTips};
  __property   VARIANT_BOOL    HighPriorityTips = {read = get_HighPriorityTips, write = set_HighPriorityTips};
  __property   VARIANT_BOOL    TipOfDay = {read = get_TipOfDay, write = set_TipOfDay};
  __property   VARIANT_BOOL    GuessHelp = {read = get_GuessHelp, write = set_GuessHelp};
  __property   VARIANT_BOOL    SearchWhenProgramming = {read = get_SearchWhenProgramming, write = set_SearchWhenProgramming};
  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            FileName = {read = get_FileName};
  __property   BSTR            Name = {read = get_Name};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef AssistantDispT<Assistant> AssistantDisp;

typedef TComInterface<Balloon>  TCOMBalloon;

// *********************************************************************//
// DispIntf:  Balloon
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0324-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BalloonDispT : public TAutoDriver<Balloon>
{
public:
  BalloonDispT(){}

  BalloonDispT(Balloon *pintf)
  {
    TAutoDriver<Balloon>::Bind(pintf, false);
  }

  BalloonDispT(BalloonPtr pintf)
  {
    TAutoDriver<Balloon>::Bind(pintf, true);
  }

  BalloonDispT& operator=(Balloon *pintf)
  {
    TAutoDriver<Balloon>::Bind(pintf, false);
    return *this;
  }

  BalloonDispT& operator=(BalloonPtr pintf)
  {
    TAutoDriver<Balloon>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checkboxes(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Checkboxes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Labels(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Labels(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_BalloonType(Office_97::MsoBalloonType pbty/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_BalloonType(Office_97::MsoBalloonType* pbty/*[out,retval]*/);
  Office_97::MsoBalloonType __fastcall get_BalloonType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Icon(Office_97::MsoIconType picn/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Icon(Office_97::MsoIconType* picn/*[out,retval]*/);
  Office_97::MsoIconType __fastcall get_Icon(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Heading(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Heading(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Heading(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Mode(Office_97::MsoModeType pmd/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Mode(Office_97::MsoModeType* pmd/*[out,retval]*/);
  Office_97::MsoModeType __fastcall get_Mode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Animation(Office_97::MsoAnimationType pfca/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Animation(Office_97::MsoAnimationType* pfca/*[out,retval]*/);
  Office_97::MsoAnimationType __fastcall get_Animation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Button(Office_97::MsoButtonSetType psbs/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Button(Office_97::MsoButtonSetType* psbs/*[out,retval]*/);
  Office_97::MsoButtonSetType __fastcall get_Button(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Callback(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Callback(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Callback(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Private(long plPrivate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Private(long* plPrivate/*[out,retval]*/);
  long            __fastcall get_Private(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetAvoidRectangle(int Left/*[in]*/, int Top/*[in]*/, 
                                                          int Right/*[in]*/, int Bottom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Show(Office_97::MsoBalloonButtonType* pibtn/*[out,retval]*/);
  Office_97::MsoBalloonButtonType __fastcall Show(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   LPDISPATCH      Checkboxes = {read = get_Checkboxes};
  __property   LPDISPATCH      Labels = {read = get_Labels};
  __property   Office_97::MsoBalloonType BalloonType = {read = get_BalloonType, write = set_BalloonType};
  __property   Office_97::MsoIconType Icon = {read = get_Icon, write = set_Icon};
  __property   BSTR            Heading = {read = get_Heading, write = set_Heading};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   Office_97::MsoModeType Mode = {read = get_Mode, write = set_Mode};
  __property   Office_97::MsoAnimationType Animation = {read = get_Animation, write = set_Animation};
  __property   Office_97::MsoButtonSetType Button = {read = get_Button, write = set_Button};
  __property   BSTR            Callback = {read = get_Callback, write = set_Callback};
  __property   long            Private = {read = get_Private, write = set_Private};
  __property   BSTR            Name = {read = get_Name};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef BalloonDispT<Balloon> BalloonDisp;

typedef TComInterface<BalloonCheckboxes>  TCOMBalloonCheckboxes;

// *********************************************************************//
// DispIntf:  BalloonCheckboxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0326-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BalloonCheckboxesDispT : public TAutoDriver<BalloonCheckboxes>
{
public:
  BalloonCheckboxesDispT(){}

  BalloonCheckboxesDispT(BalloonCheckboxes *pintf)
  {
    TAutoDriver<BalloonCheckboxes>::Bind(pintf, false);
  }

  BalloonCheckboxesDispT(BalloonCheckboxesPtr pintf)
  {
    TAutoDriver<BalloonCheckboxes>::Bind(pintf, true);
  }

  BalloonCheckboxesDispT& operator=(BalloonCheckboxes *pintf)
  {
    TAutoDriver<BalloonCheckboxes>::Bind(pintf, false);
    return *this;
  }

  BalloonCheckboxesDispT& operator=(BalloonCheckboxesPtr pintf)
  {
    TAutoDriver<BalloonCheckboxes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, 
                                                 LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pccbx/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(int pccbx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count, write = set_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef BalloonCheckboxesDispT<BalloonCheckboxes> BalloonCheckboxesDisp;

typedef TComInterface<BalloonCheckbox>  TCOMBalloonCheckbox;

// *********************************************************************//
// DispIntf:  BalloonCheckbox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0328-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BalloonCheckboxDispT : public TAutoDriver<BalloonCheckbox>
{
public:
  BalloonCheckboxDispT(){}

  BalloonCheckboxDispT(BalloonCheckbox *pintf)
  {
    TAutoDriver<BalloonCheckbox>::Bind(pintf, false);
  }

  BalloonCheckboxDispT(BalloonCheckboxPtr pintf)
  {
    TAutoDriver<BalloonCheckbox>::Bind(pintf, true);
  }

  BalloonCheckboxDispT& operator=(BalloonCheckbox *pintf)
  {
    TAutoDriver<BalloonCheckbox>::Bind(pintf, false);
    return *this;
  }

  BalloonCheckboxDispT& operator=(BalloonCheckboxPtr pintf)
  {
    TAutoDriver<BalloonCheckbox>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Item(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Checked(VARIANT_BOOL pvarfChecked/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Checked(VARIANT_BOOL* pvarfChecked/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Checked(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   VARIANT_BOOL    Checked = {read = get_Checked, write = set_Checked};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef BalloonCheckboxDispT<BalloonCheckbox> BalloonCheckboxDisp;

typedef TComInterface<BalloonLabels>  TCOMBalloonLabels;

// *********************************************************************//
// DispIntf:  BalloonLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C032E-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BalloonLabelsDispT : public TAutoDriver<BalloonLabels>
{
public:
  BalloonLabelsDispT(){}

  BalloonLabelsDispT(BalloonLabels *pintf)
  {
    TAutoDriver<BalloonLabels>::Bind(pintf, false);
  }

  BalloonLabelsDispT(BalloonLabelsPtr pintf)
  {
    TAutoDriver<BalloonLabels>::Bind(pintf, true);
  }

  BalloonLabelsDispT& operator=(BalloonLabels *pintf)
  {
    TAutoDriver<BalloonLabels>::Bind(pintf, false);
    return *this;
  }

  BalloonLabelsDispT& operator=(BalloonLabelsPtr pintf)
  {
    TAutoDriver<BalloonLabels>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, 
                                                 LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pcwz/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Count(int pcwz/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   int             Count = {read = get_Count, write = set_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef BalloonLabelsDispT<BalloonLabels> BalloonLabelsDisp;

typedef TComInterface<BalloonLabel>  TCOMBalloonLabel;

// *********************************************************************//
// DispIntf:  BalloonLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0330-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class BalloonLabelDispT : public TAutoDriver<BalloonLabel>
{
public:
  BalloonLabelDispT(){}

  BalloonLabelDispT(BalloonLabel *pintf)
  {
    TAutoDriver<BalloonLabel>::Bind(pintf, false);
  }

  BalloonLabelDispT(BalloonLabelPtr pintf)
  {
    TAutoDriver<BalloonLabel>::Bind(pintf, true);
  }

  BalloonLabelDispT& operator=(BalloonLabel *pintf)
  {
    TAutoDriver<BalloonLabel>::Bind(pintf, false);
    return *this;
  }

  BalloonLabelDispT& operator=(BalloonLabelPtr pintf)
  {
    TAutoDriver<BalloonLabel>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Item(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Item = {read = get_Item};
  __property   BSTR            Name = {read = get_Name};
  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Text = {read = get_Text, write = set_Text};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef BalloonLabelDispT<BalloonLabel> BalloonLabelDisp;

// *********************************************************************//
// DispIntf:  DocumentProperty
// Flags:     (4096) Dispatchable
// GUID:      {2DF8D04E-5BFA-101B-BDE5-00AA0044DE52}
// *********************************************************************//
template<class T>
class DocumentPropertyDispT : public TAutoDriver<DocumentProperty>
{
public:
  DocumentPropertyDispT(){}

  DocumentPropertyDispT(DocumentProperty *pintf)
  {
    TAutoDriver<DocumentProperty>::Bind(pintf, false);
  }

  DocumentPropertyDispT(DocumentPropertyPtr pintf)
  {
    TAutoDriver<DocumentProperty>::Bind(pintf, true);
  }

  DocumentPropertyDispT& operator=(DocumentProperty *pintf)
  {
    TAutoDriver<DocumentProperty>::Bind(pintf, false);
    return *this;
  }

  DocumentPropertyDispT& operator=(DocumentPropertyPtr pintf)
  {
    TAutoDriver<DocumentProperty>::Bind(pintf, true);
    return *this;
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* pvargRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_Value();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Value(VARIANT pvargRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Office_97::MsoDocProperties* ptypeRetVal/*[out,retval]*/);
  Office_97::MsoDocProperties __fastcall get_Type();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Type(Office_97::MsoDocProperties ptypeRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkToContent(VARIANT_BOOL* pfLinkRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_LinkToContent(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LinkToContent(VARIANT_BOOL pfLinkRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LinkSource(BSTR* pbstrSourceRetVal/*[out,retval]*/);
  BSTR            __fastcall get_LinkSource(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LinkSource(BSTR pbstrSourceRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   BSTR            Name = {write = set_Name};
  __property   Office_97::MsoDocProperties Type = {write = set_Type};
  __property   VARIANT_BOOL    LinkToContent = {read = get_LinkToContent, write = set_LinkToContent};
  __property   BSTR            LinkSource = {read = get_LinkSource};
  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef DocumentPropertyDispT<DocumentProperty> DocumentPropertyDisp;

// *********************************************************************//
// DispIntf:  DocumentProperties
// Flags:     (4096) Dispatchable
// GUID:      {2DF8D04D-5BFA-101B-BDE5-00AA0044DE52}
// *********************************************************************//
template<class T>
class DocumentPropertiesDispT : public TAutoDriver<DocumentProperties>
{
public:
  DocumentPropertiesDispT(){}

  DocumentPropertiesDispT(DocumentProperties *pintf)
  {
    TAutoDriver<DocumentProperties>::Bind(pintf, false);
  }

  DocumentPropertiesDispT(DocumentPropertiesPtr pintf)
  {
    TAutoDriver<DocumentProperties>::Bind(pintf, true);
  }

  DocumentPropertiesDispT& operator=(DocumentProperties *pintf)
  {
    TAutoDriver<DocumentProperties>::Bind(pintf, false);
    return *this;
  }

  DocumentPropertiesDispT& operator=(DocumentPropertiesPtr pintf)
  {
    TAutoDriver<DocumentProperties>::Bind(pintf, true);
    return *this;
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall get_Parent();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT Index/*[in]*/, 
                                                 Office_97::DocumentProperty** ppIDocProp/*[out,retval]*/);
  Office_97::DocumentProperty* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pc/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, VARIANT_BOOL LinkToContent/*[in]*/, 
                                            VARIANT Type/*[in,opt]*/, VARIANT Value/*[in,opt]*/, 
                                            VARIANT LinkSource/*[in,opt]*/, 
                                            Office_97::DocumentProperty** ppIDocProp/*[out,retval]*/);
  Office_97::DocumentProperty* __fastcall Add(BSTR Name/*[in]*/, VARIANT_BOOL LinkToContent/*[in]*/, 
                                              VARIANT Type/*[in,opt]*/= TNoParam(), 
                                              VARIANT Value/*[in,opt]*/= TNoParam(), 
                                              VARIANT LinkSource/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   LPDISPATCH      Parent = {read = get_Parent};
  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef DocumentPropertiesDispT<DocumentProperties> DocumentPropertiesDisp;

typedef TComInterface<IFoundFiles>  TCOMIFoundFiles;

// *********************************************************************//
// DispIntf:  IFoundFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0338-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IFoundFilesDispT : public TAutoDriver<IFoundFiles>
{
public:
  IFoundFilesDispT(){}

  IFoundFilesDispT(IFoundFiles *pintf)
  {
    TAutoDriver<IFoundFiles>::Bind(pintf, false);
  }

  IFoundFilesDispT(IFoundFilesPtr pintf)
  {
    TAutoDriver<IFoundFiles>::Bind(pintf, true);
  }

  IFoundFilesDispT& operator=(IFoundFiles *pintf)
  {
    TAutoDriver<IFoundFiles>::Bind(pintf, false);
    return *this;
  }

  IFoundFilesDispT& operator=(IFoundFilesPtr pintf)
  {
    TAutoDriver<IFoundFiles>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(int* pCount/*[out,retval]*/);
  int             __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);

  __property   int             Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef IFoundFilesDispT<IFoundFiles> IFoundFilesDisp;

typedef TComInterface<IFind>  TCOMIFind;

// *********************************************************************//
// DispIntf:  IFind
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0337-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class IFindDispT : public TAutoDriver<IFind>
{
public:
  IFindDispT(){}

  IFindDispT(IFind *pintf)
  {
    TAutoDriver<IFind>::Bind(pintf, false);
  }

  IFindDispT(IFindPtr pintf)
  {
    TAutoDriver<IFind>::Bind(pintf, true);
  }

  IFindDispT& operator=(IFind *pintf)
  {
    TAutoDriver<IFind>::Bind(pintf, false);
    return *this;
  }

  IFindDispT& operator=(IFindPtr pintf)
  {
    TAutoDriver<IFind>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SearchPath(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_SearchPath(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubDir(VARIANT_BOOL* retval/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SubDir(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Title(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Author(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Author(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Keywords(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Keywords(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Subject(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Subject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Options(Office_97::MsoFileFindOptions* penmOptions/*[out,retval]*/);
  Office_97::MsoFileFindOptions __fastcall get_Options(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MatchCase(VARIANT_BOOL* retval/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MatchCase(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Text(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Text(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PatternMatch(VARIANT_BOOL* retval/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_PatternMatch(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateSavedFrom(VARIANT* pdatSavedFrom/*[out,retval]*/);
  VARIANT         __fastcall get_DateSavedFrom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateSavedTo(VARIANT* pdatSavedTo/*[out,retval]*/);
  VARIANT         __fastcall get_DateSavedTo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SavedBy(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_SavedBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateCreatedFrom(VARIANT* pdatCreatedFrom/*[out,retval]*/);
  VARIANT         __fastcall get_DateCreatedFrom(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DateCreatedTo(VARIANT* pdatCreatedTo/*[out,retval]*/);
  VARIANT         __fastcall get_DateCreatedTo(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_View(Office_97::MsoFileFindView* penmView/*[out,retval]*/);
  Office_97::MsoFileFindView __fastcall get_View(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SortBy(Office_97::MsoFileFindSortBy* penmSortBy/*[out,retval]*/);
  Office_97::MsoFileFindSortBy __fastcall get_SortBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ListBy(Office_97::MsoFileFindListBy* penmListBy/*[out,retval]*/);
  Office_97::MsoFileFindListBy __fastcall get_ListBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedFile(int* pintSelectedFile/*[out,retval]*/);
  int             __fastcall get_SelectedFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Results(Office_97::IFoundFiles** pdisp/*[out,retval]*/);
  Office_97::IFoundFiles* __fastcall get_Results(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Show(int* pRows/*[out,retval]*/);
  int             __fastcall Show(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SearchPath(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubDir(VARIANT_BOOL retval/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Title(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Author(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Keywords(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Subject(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Options(Office_97::MsoFileFindOptions penmOptions/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MatchCase(VARIANT_BOOL retval/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Text(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_PatternMatch(VARIANT_BOOL retval/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DateSavedFrom(VARIANT pdatSavedFrom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DateSavedTo(VARIANT pdatSavedTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SavedBy(BSTR pbstr/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DateCreatedFrom(VARIANT pdatCreatedFrom/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DateCreatedTo(VARIANT pdatCreatedTo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_View(Office_97::MsoFileFindView penmView/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SortBy(Office_97::MsoFileFindSortBy penmSortBy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ListBy(Office_97::MsoFileFindListBy penmListBy/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SelectedFile(int pintSelectedFile/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Load(BSTR bstrQueryName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Save(BSTR bstrQueryName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(BSTR bstrQueryName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileType(long* plFileType/*[out,retval]*/);
  long            __fastcall get_FileType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileType(long plFileType/*[in]*/);

  __property   BSTR            SearchPath = {read = get_SearchPath};
  __property   BSTR            Name = {read = get_Name};
  __property   VARIANT_BOOL    SubDir = {read = get_SubDir, write = set_SubDir};
  __property   BSTR            Title = {read = get_Title};
  __property   BSTR            Author = {read = get_Author};
  __property   BSTR            Keywords = {read = get_Keywords};
  __property   BSTR            Subject = {read = get_Subject};
  __property   Office_97::MsoFileFindOptions Options = {read = get_Options, write = set_Options};
  __property   VARIANT_BOOL    MatchCase = {read = get_MatchCase, write = set_MatchCase};
  __property   BSTR            Text = {read = get_Text};
  __property   VARIANT_BOOL    PatternMatch = {read = get_PatternMatch, write = set_PatternMatch};
  __property   BSTR            SavedBy = {read = get_SavedBy};
  __property   Office_97::MsoFileFindView View = {read = get_View, write = set_View};
  __property   Office_97::MsoFileFindSortBy SortBy = {read = get_SortBy, write = set_SortBy};
  __property   Office_97::MsoFileFindListBy ListBy = {read = get_ListBy, write = set_ListBy};
  __property   int             SelectedFile = {read = get_SelectedFile, write = set_SelectedFile};
  __property   Office_97::IFoundFiles* Results = {read = get_Results};
  __property   long            FileType = {read = get_FileType, write = set_FileType};
};
typedef IFindDispT<IFind> IFindDisp;

typedef TComInterface<FoundFiles>  TCOMFoundFiles;

// *********************************************************************//
// DispIntf:  FoundFiles
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0331-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class FoundFilesDispT : public TAutoDriver<FoundFiles>
{
public:
  FoundFilesDispT(){}

  FoundFilesDispT(FoundFiles *pintf)
  {
    TAutoDriver<FoundFiles>::Bind(pintf, false);
  }

  FoundFilesDispT(FoundFilesPtr pintf)
  {
    TAutoDriver<FoundFiles>::Bind(pintf, true);
  }

  FoundFilesDispT& operator=(FoundFiles *pintf)
  {
    TAutoDriver<FoundFiles>::Bind(pintf, false);
    return *this;
  }

  FoundFilesDispT& operator=(FoundFilesPtr pintf)
  {
    TAutoDriver<FoundFiles>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, BSTR* pbstrFile/*[out,retval]*/);
  BSTR            __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pc/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef FoundFilesDispT<FoundFiles> FoundFilesDisp;

typedef TComInterface<PropertyTest>  TCOMPropertyTest;

// *********************************************************************//
// DispIntf:  PropertyTest
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0333-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class PropertyTestDispT : public TAutoDriver<PropertyTest>
{
public:
  PropertyTestDispT(){}

  PropertyTestDispT(PropertyTest *pintf)
  {
    TAutoDriver<PropertyTest>::Bind(pintf, false);
  }

  PropertyTestDispT(PropertyTestPtr pintf)
  {
    TAutoDriver<PropertyTest>::Bind(pintf, true);
  }

  PropertyTestDispT& operator=(PropertyTest *pintf)
  {
    TAutoDriver<PropertyTest>::Bind(pintf, false);
    return *this;
  }

  PropertyTestDispT& operator=(PropertyTestPtr pintf)
  {
    TAutoDriver<PropertyTest>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrRetVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Condition(Office_97::MsoCondition* pConditionRetVal/*[out,retval]*/);
  Office_97::MsoCondition __fastcall get_Condition(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Value(VARIANT* pvargRetVal/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SecondValue(VARIANT* pvargRetVal2/*[out,retval]*/);
  VARIANT         __fastcall get_SecondValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Connector(Office_97::MsoConnector* pConnector/*[out,retval]*/);
  Office_97::MsoConnector __fastcall get_Connector(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   BSTR            Name = {read = get_Name};
  __property   Office_97::MsoCondition Condition = {read = get_Condition};
  __property   Office_97::MsoConnector Connector = {read = get_Connector};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef PropertyTestDispT<PropertyTest> PropertyTestDisp;

typedef TComInterface<PropertyTests>  TCOMPropertyTests;

// *********************************************************************//
// DispIntf:  PropertyTests
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0334-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class PropertyTestsDispT : public TAutoDriver<PropertyTests>
{
public:
  PropertyTestsDispT(){}

  PropertyTestsDispT(PropertyTests *pintf)
  {
    TAutoDriver<PropertyTests>::Bind(pintf, false);
  }

  PropertyTestsDispT(PropertyTestsPtr pintf)
  {
    TAutoDriver<PropertyTests>::Bind(pintf, true);
  }

  PropertyTestsDispT& operator=(PropertyTests *pintf)
  {
    TAutoDriver<PropertyTests>::Bind(pintf, false);
    return *this;
  }

  PropertyTestsDispT& operator=(PropertyTestsPtr pintf)
  {
    TAutoDriver<PropertyTests>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(int Index/*[in]*/, 
                                                 Office_97::PropertyTest** ppIDocProp/*[out,retval]*/);
  Office_97::PropertyTest* __fastcall get_Item(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(long* pc/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, 
                                            Office_97::MsoCondition Condition/*[in]*/, 
                                            VARIANT Value/*[in,opt]*/, 
                                            VARIANT SecondValue/*[in,opt]*/, 
                                            Office_97::MsoConnector Connector/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Remove(int Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   long            Count = {read = get_Count};
  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef PropertyTestsDispT<PropertyTests> PropertyTestsDisp;

typedef TComInterface<FileSearch>  TCOMFileSearch;

// *********************************************************************//
// DispIntf:  FileSearch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0332-0000-0000-C000-000000000046}
// *********************************************************************//
template<class T>
class FileSearchDispT : public TAutoDriver<FileSearch>
{
public:
  FileSearchDispT(){}

  FileSearchDispT(FileSearch *pintf)
  {
    TAutoDriver<FileSearch>::Bind(pintf, false);
  }

  FileSearchDispT(FileSearchPtr pintf)
  {
    TAutoDriver<FileSearch>::Bind(pintf, true);
  }

  FileSearchDispT& operator=(FileSearch *pintf)
  {
    TAutoDriver<FileSearch>::Bind(pintf, false);
    return *this;
  }

  FileSearchDispT& operator=(FileSearchPtr pintf)
  {
    TAutoDriver<FileSearch>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SearchSubFolders(VARIANT_BOOL* SearchSubFoldersRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SearchSubFolders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SearchSubFolders(VARIANT_BOOL SearchSubFoldersRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MatchTextExactly(VARIANT_BOOL* MatchTextRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MatchTextExactly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MatchTextExactly(VARIANT_BOOL MatchTextRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MatchAllWordForms(VARIANT_BOOL* MatchAllWordFormsRetVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MatchAllWordForms(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MatchAllWordForms(VARIANT_BOOL MatchAllWordFormsRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileName(BSTR* FileNameRetVal/*[out,retval]*/);
  BSTR            __fastcall get_FileName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileName(BSTR FileNameRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileType(Office_97::MsoFileType* FileTypeRetVal/*[out,retval]*/);
  Office_97::MsoFileType __fastcall get_FileType(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileType(Office_97::MsoFileType FileTypeRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LastModified(Office_97::MsoLastModified* LastModifiedRetVal/*[out,retval]*/);
  Office_97::MsoLastModified __fastcall get_LastModified(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LastModified(Office_97::MsoLastModified LastModifiedRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_TextOrProperty(BSTR* TextOrProperty/*[out,retval]*/);
  BSTR            __fastcall get_TextOrProperty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_TextOrProperty(BSTR TextOrProperty/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LookIn(BSTR* LookInRetVal/*[out,retval]*/);
  BSTR            __fastcall get_LookIn(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LookIn(BSTR LookInRetVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Execute(Office_97::MsoSortBy SortBy/*[in,def,opt]*/, 
                                                Office_97::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                                                VARIANT_BOOL AlwaysAccurate/*[in,def,opt]*/, 
                                                int* pRet/*[out,retval]*/);
  int             __fastcall Execute(Office_97::MsoSortBy SortBy/*[in,def,opt]*/, 
                                     Office_97::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                                     VARIANT_BOOL AlwaysAccurate/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewSearch();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FoundFiles(Office_97::FoundFiles** FoundFilesRet/*[out,retval]*/);
  Office_97::FoundFiles* __fastcall get_FoundFiles(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PropertyTests(Office_97::PropertyTests** PropTestsRet/*[out,retval]*/);
  Office_97::PropertyTests* __fastcall get_PropertyTests(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(LPDISPATCH* ppidisp/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(long* plCreator/*[out,retval]*/);
  long            __fastcall get_Creator(void);

  __property   VARIANT_BOOL    SearchSubFolders = {read = get_SearchSubFolders, write = set_SearchSubFolders};
  __property   VARIANT_BOOL    MatchTextExactly = {read = get_MatchTextExactly, write = set_MatchTextExactly};
  __property   VARIANT_BOOL    MatchAllWordForms = {read = get_MatchAllWordForms, write = set_MatchAllWordForms};
  __property   BSTR            FileName = {read = get_FileName};
  __property   Office_97::MsoFileType FileType = {read = get_FileType, write = set_FileType};
  __property   Office_97::MsoLastModified LastModified = {read = get_LastModified, write = set_LastModified};
  __property   BSTR            TextOrProperty = {read = get_TextOrProperty};
  __property   BSTR            LookIn = {read = get_LookIn};
  __property   Office_97::FoundFiles* FoundFiles = {read = get_FoundFiles};
  __property   Office_97::PropertyTests* PropertyTests = {read = get_PropertyTests};

  __property   LPDISPATCH      Application = {read = get_Application};
  __property   long            Creator = {read = get_Creator};
};
typedef FileSearchDispT<FileSearch> FileSearchDisp;

// *********************************************************************//
// DispIntf:  IAccessible
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {618736E0-3C3D-11CF-810C-00AA00389B71}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IAccessibleDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccessibleDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accChild(VARIANT varChild/*[in]*/, LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
IAccessibleDispT<T>::get_accChild(VARIANT varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/, BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                        BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/, VARIANT* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarRole;
  this->get_accRole(varChild, (VARIANT*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/, VARIANT* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarState;
  this->get_accState(varChild, (VARIANT*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/, 
                                      long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IAccessibleDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                             BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accFocus(VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::get_accFocus(void)
{
  VARIANT pvarChild;
  this->get_accFocus((VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accSelection(VARIANT* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::get_accSelection(void)
{
  VARIANT pvarChildren;
  this->get_accSelection((VARIANT*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                          BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IAccessibleDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::accSelect(long flagsSelect/*[in]*/, VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                 long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                 VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                 VARIANT* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/)
{
  VARIANT pvarEndUpAt;
  this->accNavigate(navDir, varStart, (VARIANT*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
IAccessibleDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  VARIANT pvarChild;
  this->accHitTest(xLeft, yTop, (VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::accDoDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IAccessibleDispT<T>::set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _IMsoDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0300-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoDispObjDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_IMsoDispObjDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoDispObjDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_IMsoDispObjDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  _IMsoOleAccDispObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0301-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_IMsoOleAccDispObjDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_IMsoOleAccDispObjDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_IMsoOleAccDispObjDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_IMsoOleAccDispObjDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accChild(VARIANT varChild/*[in]*/, 
                                         LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_IMsoOleAccDispObjDispT<T>::get_accChild(VARIANT varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/, 
                                         BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                               BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/, 
                                        VARIANT* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_IMsoOleAccDispObjDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarRole;
  this->get_accRole(varChild, (VARIANT*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/, 
                                         VARIANT* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_IMsoOleAccDispObjDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarState;
  this->get_accState(varChild, (VARIANT*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                             VARIANT varChild/*[in,opt]*/, 
                                             long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_IMsoOleAccDispObjDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                             VARIANT varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accFocus(VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_IMsoOleAccDispObjDispT<T>::get_accFocus(void)
{
  VARIANT pvarChild;
  this->get_accFocus((VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accSelection(VARIANT* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_IMsoOleAccDispObjDispT<T>::get_accSelection(void)
{
  VARIANT pvarChildren;
  this->get_accSelection((VARIANT*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                 BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_IMsoOleAccDispObjDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::accSelect(long flagsSelect/*[in]*/, VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                        long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                        VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                        VARIANT* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
_IMsoOleAccDispObjDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/)
{
  VARIANT pvarEndUpAt;
  this->accNavigate(navDir, varStart, (VARIANT*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                       VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
_IMsoOleAccDispObjDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  VARIANT pvarChild;
  this->accHitTest(xLeft, yTop, (VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::accDoDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IMsoOleAccDispObjDispT<T>::set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CommandBars
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0302-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_ActionControl(Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActionControl"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarsDispT<T>::get_ActionControl(void)
{
  Office_97::CommandBarControl* ppcbc;
  this->get_ActionControl((Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_ActiveMenuBar(Office_97::CommandBar** ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveMenuBar"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBar* __fastcall
CommandBarsDispT<T>::get_ActiveMenuBar(void)
{
  Office_97::CommandBar* ppcb;
  this->get_ActiveMenuBar((Office_97::CommandBar**)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::Add(VARIANT Name/*[in,opt]*/, VARIANT Position/*[in,opt]*/, 
                         VARIANT MenuBar/*[in,opt]*/, VARIANT Temporary/*[in,opt]*/, 
                         Office_97::CommandBar** ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<4> _args;
  _args[1] = Name /*[VT_VARIANT:0]*/;
  _args[2] = Position /*[VT_VARIANT:0]*/;
  _args[3] = MenuBar /*[VT_VARIANT:0]*/;
  _args[4] = Temporary /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBar* __fastcall
CommandBarsDispT<T>::Add(VARIANT Name/*[in,opt]*/, VARIANT Position/*[in,opt]*/, 
                         VARIANT MenuBar/*[in,opt]*/, VARIANT Temporary/*[in,opt]*/)
{
  Office_97::CommandBar* ppcb;
  this->Add(Name, Position, MenuBar, Temporary, (Office_97::CommandBar**)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_Count(int* pcToolbars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcToolbars /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarsDispT<T>::get_Count(void)
{
  int pcToolbars;
  this->get_Count((int*)&pcToolbars);
  return pcToolbars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_DisplayTooltips(VARIANT_BOOL* pvarfDisplayTooltips/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayTooltips"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfDisplayTooltips /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarsDispT<T>::get_DisplayTooltips(void)
{
  VARIANT_BOOL pvarfDisplayTooltips;
  this->get_DisplayTooltips((VARIANT_BOOL*)&pvarfDisplayTooltips);
  return pvarfDisplayTooltips;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::set_DisplayTooltips(VARIANT_BOOL pvarfDisplayTooltips/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayTooltips"), DISPID(1610809348));
  TAutoArgs<1> _args;
  _args[1] = pvarfDisplayTooltips /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_DisplayKeysInTooltips(VARIANT_BOOL* pvarfDisplayKeys/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayKeysInTooltips"), DISPID(DISPID_UNKNOWN/*[1610809350]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfDisplayKeys /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarsDispT<T>::get_DisplayKeysInTooltips(void)
{
  VARIANT_BOOL pvarfDisplayKeys;
  this->get_DisplayKeysInTooltips((VARIANT_BOOL*)&pvarfDisplayKeys);
  return pvarfDisplayKeys;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::set_DisplayKeysInTooltips(VARIANT_BOOL pvarfDisplayKeys/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayKeysInTooltips"), DISPID(1610809350));
  TAutoArgs<1> _args;
  _args[1] = pvarfDisplayKeys /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::FindControl(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/, 
                                 VARIANT Tag/*[in,opt]*/, VARIANT Visible/*[in,opt]*/, 
                                 Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindControl"), DISPID(DISPID_UNKNOWN/*[1610809352]*/));
  TAutoArgs<4> _args;
  _args[1] = Type /*[VT_VARIANT:0]*/;
  _args[2] = Id /*[VT_VARIANT:0]*/;
  _args[3] = Tag /*[VT_VARIANT:0]*/;
  _args[4] = Visible /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarsDispT<T>::FindControl(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/, 
                                 VARIANT Tag/*[in,opt]*/, VARIANT Visible/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->FindControl(Type, Id, Tag, Visible, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_Item(VARIANT Index/*[in]*/, Office_97::CommandBar** ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBar* __fastcall
CommandBarsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Office_97::CommandBar* ppcb;
  this->get_Item(Index, (Office_97::CommandBar**)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_LargeButtons(VARIANT_BOOL* pvarfLargeButtons/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeButtons"), DISPID(DISPID_UNKNOWN/*[1610809354]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfLargeButtons /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarsDispT<T>::get_LargeButtons(void)
{
  VARIANT_BOOL pvarfLargeButtons;
  this->get_LargeButtons((VARIANT_BOOL*)&pvarfLargeButtons);
  return pvarfLargeButtons;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::set_LargeButtons(VARIANT_BOOL pvarfLargeButtons/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LargeButtons"), DISPID(1610809354));
  TAutoArgs<1> _args;
  _args[1] = pvarfLargeButtons /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_MenuAnimationStyle(Office_97::MsoMenuAnimation* pma/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuAnimationStyle"), DISPID(DISPID_UNKNOWN/*[1610809356]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pma /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoMenuAnimation __fastcall
CommandBarsDispT<T>::get_MenuAnimationStyle(void)
{
  Office_97::MsoMenuAnimation pma;
  this->get_MenuAnimationStyle((Office_97::MsoMenuAnimation*)&pma);
  return pma;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::set_MenuAnimationStyle(Office_97::MsoMenuAnimation pma/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MenuAnimationStyle"), DISPID(1610809356));
  TAutoArgs<1> _args;
  _args[1] = (int)pma /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
CommandBarsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809359]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarsDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::ReleaseFocus()
{
  _TDispID _dispid(*this, OLETEXT("ReleaseFocus"), DISPID(DISPID_UNKNOWN/*[1610809360]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  CommandBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0304-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarDispT<T>::get_BuiltIn(void)
{
  VARIANT_BOOL pvarfBuiltIn;
  this->get_BuiltIn((VARIANT_BOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Context(BSTR* pbstrContext/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Context"), DISPID(DISPID_UNKNOWN/*[1610874881]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrContext /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_Context(void)
{
  BSTR pbstrContext;
  this->get_Context((BSTR*)&pbstrContext);
  return pbstrContext;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Context(BSTR pbstrContext/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Context"), DISPID(1610874881));
  TAutoArgs<1> _args;
  _args[1] = pbstrContext /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Controls(Office_97::CommandBarControls** ppcbcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControls**)ppcbcs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBarControls* __fastcall
CommandBarDispT<T>::get_Controls(void)
{
  Office_97::CommandBarControls* ppcbcs;
  this->get_Controls((Office_97::CommandBarControls**)&ppcbcs);
  return ppcbcs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874884]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pvarfEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874885));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::FindControl(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/, 
                                VARIANT Tag/*[in,opt]*/, VARIANT Visible/*[in,opt]*/, 
                                VARIANT Recursive/*[in,opt]*/, 
                                Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FindControl"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<5> _args;
  _args[1] = Type /*[VT_VARIANT:0]*/;
  _args[2] = Id /*[VT_VARIANT:0]*/;
  _args[3] = Tag /*[VT_VARIANT:0]*/;
  _args[4] = Visible /*[VT_VARIANT:0]*/;
  _args[5] = Recursive /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarDispT<T>::FindControl(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/, 
                                VARIANT Tag/*[in,opt]*/, VARIANT Visible/*[in,opt]*/, 
                                VARIANT Recursive/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->FindControl(Type, Id, Tag, Visible, Recursive, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874891]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Left(int* pxpLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pxpLeft /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_Left(void)
{
  int pxpLeft;
  this->get_Left((int*)&pxpLeft);
  return pxpLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Left(int pxpLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610874892));
  TAutoArgs<1> _args;
  _args[1] = pxpLeft /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610874894]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610874894));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_NameLocal(BSTR* pbstrNameLocal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameLocal"), DISPID(DISPID_UNKNOWN/*[1610874896]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrNameLocal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_NameLocal(void)
{
  BSTR pbstrNameLocal;
  this->get_NameLocal((BSTR*)&pbstrNameLocal);
  return pbstrNameLocal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_NameLocal(BSTR pbstrNameLocal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NameLocal"), DISPID(1610874896));
  TAutoArgs<1> _args;
  _args[1] = pbstrNameLocal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874898]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Position(Office_97::MsoBarPosition* ppos/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ppos /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoBarPosition __fastcall
CommandBarDispT<T>::get_Position(void)
{
  Office_97::MsoBarPosition ppos;
  this->get_Position((Office_97::MsoBarPosition*)&ppos);
  return ppos;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Position(Office_97::MsoBarPosition ppos/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Position"), DISPID(1610874899));
  TAutoArgs<1> _args;
  _args[1] = (int)ppos /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_RowIndex(int* piRow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowIndex"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(piRow /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_RowIndex(void)
{
  int piRow;
  this->get_RowIndex((int*)&piRow);
  return piRow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_RowIndex(int piRow/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowIndex"), DISPID(1610874901));
  TAutoArgs<1> _args;
  _args[1] = piRow /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Protection(Office_97::MsoBarProtection* pprot/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protection"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pprot /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoBarProtection __fastcall
CommandBarDispT<T>::get_Protection(void)
{
  Office_97::MsoBarProtection pprot;
  this->get_Protection((Office_97::MsoBarProtection*)&pprot);
  return pprot;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Protection(Office_97::MsoBarProtection pprot/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Protection"), DISPID(1610874903));
  TAutoArgs<1> _args;
  _args[1] = (int)pprot /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874905]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::ShowPopup(VARIANT x/*[in,opt]*/, VARIANT y/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowPopup"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_VARIANT:0]*/;
  _args[2] = y /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Top(int* pypTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874907]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pypTop /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_Top(void)
{
  int pypTop;
  this->get_Top((int*)&pypTop);
  return pypTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Top(int pypTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610874907));
  TAutoArgs<1> _args;
  _args[1] = pypTop /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Type(Office_97::MsoBarType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoBarType __fastcall
CommandBarDispT<T>::get_Type(void)
{
  Office_97::MsoBarType ptype;
  this->get_Type((Office_97::MsoBarType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874910]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pvarfVisible;
  this->get_Visible((VARIANT_BOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874910));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874912]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874912));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accChild(VARIANT varChild/*[in]*/, LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarDispT<T>::get_accChild(VARIANT varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/, BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                       BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/, VARIANT* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarRole;
  this->get_accRole(varChild, (VARIANT*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/, VARIANT* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarState;
  this->get_accState(varChild, (VARIANT*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/, 
                                     long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                            BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accFocus(VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarDispT<T>::get_accFocus(void)
{
  VARIANT pvarChild;
  this->get_accFocus((VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accSelection(VARIANT* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarDispT<T>::get_accSelection(void)
{
  VARIANT pvarChildren;
  this->get_accSelection((VARIANT*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                         BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::accSelect(long flagsSelect/*[in]*/, VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, long* pcxWidth/*[out]*/
                                , long* pcyHeight/*[out]*/, VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                VARIANT* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/)
{
  VARIANT pvarEndUpAt;
  this->accNavigate(navDir, varStart, (VARIANT*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                               VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  VARIANT pvarChild;
  this->accHitTest(xLeft, yTop, (VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::accDoDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarDispT<T>::set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CommandBarControls
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0306-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::Add(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/, 
                                VARIANT Parameter/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                VARIANT Temporary/*[in,opt]*/, 
                                Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<5> _args;
  _args[1] = Type /*[VT_VARIANT:0]*/;
  _args[2] = Id /*[VT_VARIANT:0]*/;
  _args[3] = Parameter /*[VT_VARIANT:0]*/;
  _args[4] = Before /*[VT_VARIANT:0]*/;
  _args[5] = Temporary /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarControlsDispT<T>::Add(VARIANT Type/*[in,opt]*/, VARIANT Id/*[in,opt]*/, 
                                VARIANT Parameter/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                VARIANT Temporary/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->Add(Type, Id, Parameter, Before, Temporary, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get_Count(int* pcToolbarControls/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcToolbarControls /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlsDispT<T>::get_Count(void)
{
  int pcToolbarControls;
  this->get_Count((int*)&pcToolbarControls);
  return pcToolbarControls;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get_Item(VARIANT Index/*[in]*/, 
                                     Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarControlsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->get_Item(Index, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
CommandBarControlsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBar* __fastcall
CommandBarControlsDispT<T>::get_Parent(void)
{
  Office_97::CommandBar* ppcb;
  this->get_Parent((Office_97::CommandBar**)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarControlsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarControlsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  CommandBarControl
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0308-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_BeginGroup(VARIANT_BOOL* pvarfBeginGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBeginGroup /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarControlDispT<T>::get_BeginGroup(void)
{
  VARIANT_BOOL pvarfBeginGroup;
  this->get_BeginGroup((VARIANT_BOOL*)&pvarfBeginGroup);
  return pvarfBeginGroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_BeginGroup(VARIANT_BOOL pvarfBeginGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(1610874880));
  TAutoArgs<1> _args;
  _args[1] = pvarfBeginGroup /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarControlDispT<T>::get_BuiltIn(void)
{
  VARIANT_BOOL pvarfBuiltIn;
  this->get_BuiltIn((VARIANT_BOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610874883));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Control(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarControlDispT<T>::get_Control(void)
{
  LPDISPATCH ppidisp;
  this->get_Control((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610874886]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarControlDispT<T>::Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->Copy(Bar, Before, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Delete(VARIANT Temporary/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<1> _args;
  _args[1] = Temporary /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_DescriptionText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_DescriptionText(void)
{
  BSTR pbstrText;
  this->get_DescriptionText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_DescriptionText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarControlDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pvarfEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874890));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874893));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_HelpContextId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(DISPID_UNKNOWN/*[1610874895]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_HelpContextId(void)
{
  int pid;
  this->get_HelpContextId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_HelpContextId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(1610874895));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(DISPID_UNKNOWN/*[1610874897]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFilename /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_HelpFile(void)
{
  BSTR pbstrFilename;
  this->get_HelpFile((BSTR*)&pbstrFilename);
  return pbstrFilename;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_HelpFile(BSTR pbstrFilename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(1610874897));
  TAutoArgs<1> _args;
  _args[1] = pbstrFilename /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874900]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarControlDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610874902]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarControlDispT<T>::Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->Move(Bar, Before, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Left(int* px/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(px /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Left(void)
{
  int px;
  this->get_Left((int*)&px);
  return px;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_OLEUsage(Office_97::MsoControlOLEUsage* pcou/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(DISPID_UNKNOWN/*[1610874904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcou /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoControlOLEUsage __fastcall
CommandBarControlDispT<T>::get_OLEUsage(void)
{
  Office_97::MsoControlOLEUsage pcou;
  this->get_OLEUsage((Office_97::MsoControlOLEUsage*)&pcou);
  return pcou;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_OLEUsage(Office_97::MsoControlOLEUsage pcou/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(1610874904));
  TAutoArgs<1> _args;
  _args[1] = (int)pcou /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrOnAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_OnAction(void)
{
  BSTR pbstrOnAction;
  this->get_OnAction((BSTR*)&pbstrOnAction);
  return pbstrOnAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_OnAction(BSTR pbstrOnAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(1610874906));
  TAutoArgs<1> _args;
  _args[1] = pbstrOnAction /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBar* __fastcall
CommandBarControlDispT<T>::get_Parent(void)
{
  Office_97::CommandBar* ppcb;
  this->get_Parent((Office_97::CommandBar**)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Parameter(BSTR* pbstrParam/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrParam /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_Parameter(void)
{
  BSTR pbstrParam;
  this->get_Parameter((BSTR*)&pbstrParam);
  return pbstrParam;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Parameter(BSTR pbstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(1610874909));
  TAutoArgs<1> _args;
  _args[1] = pbstrParam /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Priority(int* pnPri/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(DISPID_UNKNOWN/*[1610874911]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnPri /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Priority(void)
{
  int pnPri;
  this->get_Priority((int*)&pnPri);
  return pnPri;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Priority(int pnPri/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(1610874911));
  TAutoArgs<1> _args;
  _args[1] = pnPri /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874913]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(DISPID_UNKNOWN/*[1610874914]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Tag(BSTR* pbstrTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(DISPID_UNKNOWN/*[1610874915]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_Tag(void)
{
  BSTR pbstrTag;
  this->get_Tag((BSTR*)&pbstrTag);
  return pbstrTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Tag(BSTR pbstrTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1610874915));
  TAutoArgs<1> _args;
  _args[1] = pbstrTag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(DISPID_UNKNOWN/*[1610874917]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTooltip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_TooltipText(void)
{
  BSTR pbstrTooltip;
  this->get_TooltipText((BSTR*)&pbstrTooltip);
  return pbstrTooltip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_TooltipText(BSTR pbstrTooltip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(1610874917));
  TAutoArgs<1> _args;
  _args[1] = pbstrTooltip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Top(int* py/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874919]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(py /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Top(void)
{
  int py;
  this->get_Top((int*)&py);
  return py;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Type(Office_97::MsoControlType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874920]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoControlType __fastcall
CommandBarControlDispT<T>::get_Type(void)
{
  Office_97::MsoControlType ptype;
  this->get_Type((Office_97::MsoControlType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874921]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarControlDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pvarfVisible;
  this->get_Visible((VARIANT_BOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874921));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874923]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarControlDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874923));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(DISPID_UNKNOWN/*[1610874925]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(DISPID_UNKNOWN/*[1610874926]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(DISPID_UNKNOWN/*[1610874927]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(DISPID_UNKNOWN/*[1610874928]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(DISPID_UNKNOWN/*[1610874929]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(DISPID_UNKNOWN/*[1610874930]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(DISPID_UNKNOWN/*[1610874931]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(DISPID_UNKNOWN/*[1610874932]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarControlDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarControlDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarControlDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarControlDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accChild(VARIANT varChild/*[in]*/, 
                                        LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarControlDispT<T>::get_accChild(VARIANT varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/, BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                              BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/, 
                                       VARIANT* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarControlDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarRole;
  this->get_accRole(varChild, (VARIANT*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/, 
                                        VARIANT* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarControlDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarState;
  this->get_accState(varChild, (VARIANT*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/
                                            , long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarControlDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                   BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accFocus(VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarControlDispT<T>::get_accFocus(void)
{
  VARIANT pvarChild;
  this->get_accFocus((VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accSelection(VARIANT* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarControlDispT<T>::get_accSelection(void)
{
  VARIANT pvarChildren;
  this->get_accSelection((VARIANT*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarControlDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::accSelect(long flagsSelect/*[in]*/, VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                       long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                       VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                       VARIANT* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarControlDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/)
{
  VARIANT pvarEndUpAt;
  this->accNavigate(navDir, varStart, (VARIANT*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                      VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarControlDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  VARIANT pvarChild;
  this->accHitTest(xLeft, yTop, (VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::accDoDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarControlDispT<T>::set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CommandBarButton
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_BuiltInFace(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltInFace"), DISPID(DISPID_UNKNOWN/*[1610940416]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarButtonDispT<T>::get_BuiltInFace(void)
{
  VARIANT_BOOL pvarfBuiltIn;
  this->get_BuiltInFace((VARIANT_BOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_BuiltInFace(VARIANT_BOOL pvarfBuiltIn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltInFace"), DISPID(1610940416));
  TAutoArgs<1> _args;
  _args[1] = pvarfBuiltIn /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::CopyFace()
{
  _TDispID _dispid(*this, OLETEXT("CopyFace"), DISPID(DISPID_UNKNOWN/*[1610940418]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_FaceId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FaceId"), DISPID(DISPID_UNKNOWN/*[1610940419]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarButtonDispT<T>::get_FaceId(void)
{
  int pid;
  this->get_FaceId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_FaceId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FaceId"), DISPID(1610940419));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::PasteFace()
{
  _TDispID _dispid(*this, OLETEXT("PasteFace"), DISPID(DISPID_UNKNOWN/*[1610940421]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_ShortcutText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutText"), DISPID(DISPID_UNKNOWN/*[1610940422]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_ShortcutText(void)
{
  BSTR pbstrText;
  this->get_ShortcutText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_ShortcutText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShortcutText"), DISPID(1610940422));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_State(Office_97::MsoButtonState* pstate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(DISPID_UNKNOWN/*[1610940424]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pstate /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoButtonState __fastcall
CommandBarButtonDispT<T>::get_State(void)
{
  Office_97::MsoButtonState pstate;
  this->get_State((Office_97::MsoButtonState*)&pstate);
  return pstate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_State(Office_97::MsoButtonState pstate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(1610940424));
  TAutoArgs<1> _args;
  _args[1] = (int)pstate /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Style(Office_97::MsoButtonStyle* pstyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(DISPID_UNKNOWN/*[1610940426]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pstyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoButtonStyle __fastcall
CommandBarButtonDispT<T>::get_Style(void)
{
  Office_97::MsoButtonStyle pstyle;
  this->get_Style((Office_97::MsoButtonStyle*)&pstyle);
  return pstyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_Style(Office_97::MsoButtonStyle pstyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(1610940426));
  TAutoArgs<1> _args;
  _args[1] = (int)pstyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_BeginGroup(VARIANT_BOOL* pvarfBeginGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBeginGroup /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarButtonDispT<T>::get_BeginGroup(void)
{
  VARIANT_BOOL pvarfBeginGroup;
  this->get_BeginGroup((VARIANT_BOOL*)&pvarfBeginGroup);
  return pvarfBeginGroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_BeginGroup(VARIANT_BOOL pvarfBeginGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(1610874880));
  TAutoArgs<1> _args;
  _args[1] = pvarfBeginGroup /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarButtonDispT<T>::get_BuiltIn(void)
{
  VARIANT_BOOL pvarfBuiltIn;
  this->get_BuiltIn((VARIANT_BOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610874883));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Control(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarButtonDispT<T>::get_Control(void)
{
  LPDISPATCH ppidisp;
  this->get_Control((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                               Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610874886]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarButtonDispT<T>::Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->Copy(Bar, Before, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Delete(VARIANT Temporary/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<1> _args;
  _args[1] = Temporary /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_DescriptionText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_DescriptionText(void)
{
  BSTR pbstrText;
  this->get_DescriptionText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_DescriptionText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarButtonDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pvarfEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874890));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarButtonDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874893));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_HelpContextId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(DISPID_UNKNOWN/*[1610874895]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarButtonDispT<T>::get_HelpContextId(void)
{
  int pid;
  this->get_HelpContextId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_HelpContextId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(1610874895));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(DISPID_UNKNOWN/*[1610874897]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFilename /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_HelpFile(void)
{
  BSTR pbstrFilename;
  this->get_HelpFile((BSTR*)&pbstrFilename);
  return pbstrFilename;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_HelpFile(BSTR pbstrFilename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(1610874897));
  TAutoArgs<1> _args;
  _args[1] = pbstrFilename /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarButtonDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874900]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarButtonDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarButtonDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                               Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610874902]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarButtonDispT<T>::Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->Move(Bar, Before, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Left(int* px/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(px /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarButtonDispT<T>::get_Left(void)
{
  int px;
  this->get_Left((int*)&px);
  return px;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_OLEUsage(Office_97::MsoControlOLEUsage* pcou/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(DISPID_UNKNOWN/*[1610874904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcou /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoControlOLEUsage __fastcall
CommandBarButtonDispT<T>::get_OLEUsage(void)
{
  Office_97::MsoControlOLEUsage pcou;
  this->get_OLEUsage((Office_97::MsoControlOLEUsage*)&pcou);
  return pcou;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_OLEUsage(Office_97::MsoControlOLEUsage pcou/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(1610874904));
  TAutoArgs<1> _args;
  _args[1] = (int)pcou /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrOnAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_OnAction(void)
{
  BSTR pbstrOnAction;
  this->get_OnAction((BSTR*)&pbstrOnAction);
  return pbstrOnAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_OnAction(BSTR pbstrOnAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(1610874906));
  TAutoArgs<1> _args;
  _args[1] = pbstrOnAction /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBar* __fastcall
CommandBarButtonDispT<T>::get_Parent(void)
{
  Office_97::CommandBar* ppcb;
  this->get_Parent((Office_97::CommandBar**)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Parameter(BSTR* pbstrParam/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrParam /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_Parameter(void)
{
  BSTR pbstrParam;
  this->get_Parameter((BSTR*)&pbstrParam);
  return pbstrParam;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_Parameter(BSTR pbstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(1610874909));
  TAutoArgs<1> _args;
  _args[1] = pbstrParam /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Priority(int* pnPri/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(DISPID_UNKNOWN/*[1610874911]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnPri /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarButtonDispT<T>::get_Priority(void)
{
  int pnPri;
  this->get_Priority((int*)&pnPri);
  return pnPri;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_Priority(int pnPri/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(1610874911));
  TAutoArgs<1> _args;
  _args[1] = pnPri /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874913]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(DISPID_UNKNOWN/*[1610874914]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Tag(BSTR* pbstrTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(DISPID_UNKNOWN/*[1610874915]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_Tag(void)
{
  BSTR pbstrTag;
  this->get_Tag((BSTR*)&pbstrTag);
  return pbstrTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_Tag(BSTR pbstrTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1610874915));
  TAutoArgs<1> _args;
  _args[1] = pbstrTag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(DISPID_UNKNOWN/*[1610874917]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTooltip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_TooltipText(void)
{
  BSTR pbstrTooltip;
  this->get_TooltipText((BSTR*)&pbstrTooltip);
  return pbstrTooltip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_TooltipText(BSTR pbstrTooltip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(1610874917));
  TAutoArgs<1> _args;
  _args[1] = pbstrTooltip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Top(int* py/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874919]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(py /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarButtonDispT<T>::get_Top(void)
{
  int py;
  this->get_Top((int*)&py);
  return py;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Type(Office_97::MsoControlType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874920]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoControlType __fastcall
CommandBarButtonDispT<T>::get_Type(void)
{
  Office_97::MsoControlType ptype;
  this->get_Type((Office_97::MsoControlType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874921]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarButtonDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pvarfVisible;
  this->get_Visible((VARIANT_BOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874921));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874923]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarButtonDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874923));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(DISPID_UNKNOWN/*[1610874925]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(DISPID_UNKNOWN/*[1610874926]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(DISPID_UNKNOWN/*[1610874927]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(DISPID_UNKNOWN/*[1610874928]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(DISPID_UNKNOWN/*[1610874929]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(DISPID_UNKNOWN/*[1610874930]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(DISPID_UNKNOWN/*[1610874931]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(DISPID_UNKNOWN/*[1610874932]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarButtonDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarButtonDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarButtonDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarButtonDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accChild(VARIANT varChild/*[in]*/, 
                                       LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarButtonDispT<T>::get_accChild(VARIANT varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/, BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                             BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/, 
                                      VARIANT* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarButtonDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarRole;
  this->get_accRole(varChild, (VARIANT*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/, 
                                       VARIANT* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarButtonDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarState;
  this->get_accState(varChild, (VARIANT*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/
                                           , long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarButtonDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                  BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accFocus(VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarButtonDispT<T>::get_accFocus(void)
{
  VARIANT pvarChild;
  this->get_accFocus((VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accSelection(VARIANT* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarButtonDispT<T>::get_accSelection(void)
{
  VARIANT pvarChildren;
  this->get_accSelection((VARIANT*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                               BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarButtonDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::accSelect(long flagsSelect/*[in]*/, VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                      long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                      VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                      VARIANT* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarButtonDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/)
{
  VARIANT pvarEndUpAt;
  this->accNavigate(navDir, varStart, (VARIANT*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                     VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarButtonDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  VARIANT pvarChild;
  this->accHitTest(xLeft, yTop, (VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::accDoDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarButtonDispT<T>::set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CommandBarPopup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030A-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_CommandBar(Office_97::CommandBar** ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBar"), DISPID(DISPID_UNKNOWN/*[1610940416]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBar* __fastcall
CommandBarPopupDispT<T>::get_CommandBar(void)
{
  Office_97::CommandBar* ppcb;
  this->get_CommandBar((Office_97::CommandBar**)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Controls(Office_97::CommandBarControls** ppcbcs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Controls"), DISPID(DISPID_UNKNOWN/*[1610940417]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControls**)ppcbcs /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBarControls* __fastcall
CommandBarPopupDispT<T>::get_Controls(void)
{
  Office_97::CommandBarControls* ppcbcs;
  this->get_Controls((Office_97::CommandBarControls**)&ppcbcs);
  return ppcbcs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_OLEMenuGroup(Office_97::MsoOLEMenuGroup* pomg/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEMenuGroup"), DISPID(DISPID_UNKNOWN/*[1610940418]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pomg /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoOLEMenuGroup __fastcall
CommandBarPopupDispT<T>::get_OLEMenuGroup(void)
{
  Office_97::MsoOLEMenuGroup pomg;
  this->get_OLEMenuGroup((Office_97::MsoOLEMenuGroup*)&pomg);
  return pomg;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_OLEMenuGroup(Office_97::MsoOLEMenuGroup pomg/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEMenuGroup"), DISPID(1610940418));
  TAutoArgs<1> _args;
  _args[1] = (int)pomg /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_BeginGroup(VARIANT_BOOL* pvarfBeginGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBeginGroup /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarPopupDispT<T>::get_BeginGroup(void)
{
  VARIANT_BOOL pvarfBeginGroup;
  this->get_BeginGroup((VARIANT_BOOL*)&pvarfBeginGroup);
  return pvarfBeginGroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_BeginGroup(VARIANT_BOOL pvarfBeginGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(1610874880));
  TAutoArgs<1> _args;
  _args[1] = pvarfBeginGroup /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarPopupDispT<T>::get_BuiltIn(void)
{
  VARIANT_BOOL pvarfBuiltIn;
  this->get_BuiltIn((VARIANT_BOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610874883));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Control(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarPopupDispT<T>::get_Control(void)
{
  LPDISPATCH ppidisp;
  this->get_Control((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                              Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610874886]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarPopupDispT<T>::Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->Copy(Bar, Before, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Delete(VARIANT Temporary/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<1> _args;
  _args[1] = Temporary /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_DescriptionText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_DescriptionText(void)
{
  BSTR pbstrText;
  this->get_DescriptionText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_DescriptionText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarPopupDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pvarfEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874890));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874893));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_HelpContextId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(DISPID_UNKNOWN/*[1610874895]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_HelpContextId(void)
{
  int pid;
  this->get_HelpContextId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_HelpContextId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(1610874895));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(DISPID_UNKNOWN/*[1610874897]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFilename /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_HelpFile(void)
{
  BSTR pbstrFilename;
  this->get_HelpFile((BSTR*)&pbstrFilename);
  return pbstrFilename;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_HelpFile(BSTR pbstrFilename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(1610874897));
  TAutoArgs<1> _args;
  _args[1] = pbstrFilename /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874900]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarPopupDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                              Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610874902]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarPopupDispT<T>::Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->Move(Bar, Before, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Left(int* px/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(px /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Left(void)
{
  int px;
  this->get_Left((int*)&px);
  return px;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_OLEUsage(Office_97::MsoControlOLEUsage* pcou/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(DISPID_UNKNOWN/*[1610874904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcou /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoControlOLEUsage __fastcall
CommandBarPopupDispT<T>::get_OLEUsage(void)
{
  Office_97::MsoControlOLEUsage pcou;
  this->get_OLEUsage((Office_97::MsoControlOLEUsage*)&pcou);
  return pcou;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_OLEUsage(Office_97::MsoControlOLEUsage pcou/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(1610874904));
  TAutoArgs<1> _args;
  _args[1] = (int)pcou /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrOnAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_OnAction(void)
{
  BSTR pbstrOnAction;
  this->get_OnAction((BSTR*)&pbstrOnAction);
  return pbstrOnAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_OnAction(BSTR pbstrOnAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(1610874906));
  TAutoArgs<1> _args;
  _args[1] = pbstrOnAction /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBar* __fastcall
CommandBarPopupDispT<T>::get_Parent(void)
{
  Office_97::CommandBar* ppcb;
  this->get_Parent((Office_97::CommandBar**)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Parameter(BSTR* pbstrParam/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrParam /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_Parameter(void)
{
  BSTR pbstrParam;
  this->get_Parameter((BSTR*)&pbstrParam);
  return pbstrParam;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Parameter(BSTR pbstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(1610874909));
  TAutoArgs<1> _args;
  _args[1] = pbstrParam /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Priority(int* pnPri/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(DISPID_UNKNOWN/*[1610874911]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnPri /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Priority(void)
{
  int pnPri;
  this->get_Priority((int*)&pnPri);
  return pnPri;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Priority(int pnPri/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(1610874911));
  TAutoArgs<1> _args;
  _args[1] = pnPri /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874913]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(DISPID_UNKNOWN/*[1610874914]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Tag(BSTR* pbstrTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(DISPID_UNKNOWN/*[1610874915]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_Tag(void)
{
  BSTR pbstrTag;
  this->get_Tag((BSTR*)&pbstrTag);
  return pbstrTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Tag(BSTR pbstrTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1610874915));
  TAutoArgs<1> _args;
  _args[1] = pbstrTag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(DISPID_UNKNOWN/*[1610874917]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTooltip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_TooltipText(void)
{
  BSTR pbstrTooltip;
  this->get_TooltipText((BSTR*)&pbstrTooltip);
  return pbstrTooltip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_TooltipText(BSTR pbstrTooltip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(1610874917));
  TAutoArgs<1> _args;
  _args[1] = pbstrTooltip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Top(int* py/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874919]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(py /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Top(void)
{
  int py;
  this->get_Top((int*)&py);
  return py;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Type(Office_97::MsoControlType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874920]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoControlType __fastcall
CommandBarPopupDispT<T>::get_Type(void)
{
  Office_97::MsoControlType ptype;
  this->get_Type((Office_97::MsoControlType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874921]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarPopupDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pvarfVisible;
  this->get_Visible((VARIANT_BOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874921));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874923]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarPopupDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874923));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(DISPID_UNKNOWN/*[1610874925]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(DISPID_UNKNOWN/*[1610874926]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(DISPID_UNKNOWN/*[1610874927]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(DISPID_UNKNOWN/*[1610874928]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(DISPID_UNKNOWN/*[1610874929]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(DISPID_UNKNOWN/*[1610874930]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(DISPID_UNKNOWN/*[1610874931]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(DISPID_UNKNOWN/*[1610874932]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarPopupDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarPopupDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarPopupDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarPopupDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accChild(VARIANT varChild/*[in]*/, 
                                      LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarPopupDispT<T>::get_accChild(VARIANT varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/, BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                            BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/, VARIANT* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarPopupDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarRole;
  this->get_accRole(varChild, (VARIANT*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/, 
                                      VARIANT* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarPopupDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarState;
  this->get_accState(varChild, (VARIANT*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/, 
                                          long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarPopupDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, VARIANT varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                 BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accFocus(VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarPopupDispT<T>::get_accFocus(void)
{
  VARIANT pvarChild;
  this->get_accFocus((VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accSelection(VARIANT* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarPopupDispT<T>::get_accSelection(void)
{
  VARIANT pvarChildren;
  this->get_accSelection((VARIANT*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                              BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarPopupDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::accSelect(long flagsSelect/*[in]*/, VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                     long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                     VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                     VARIANT* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarPopupDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/)
{
  VARIANT pvarEndUpAt;
  this->accNavigate(navDir, varStart, (VARIANT*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                    VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarPopupDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  VARIANT pvarChild;
  this->accHitTest(xLeft, yTop, (VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::accDoDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarPopupDispT<T>::set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  CommandBarComboBox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C030C-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::AddItem(BSTR Text/*[in]*/, VARIANT Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddItem"), DISPID(DISPID_UNKNOWN/*[1610940416]*/));
  TAutoArgs<2> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(DISPID_UNKNOWN/*[1610940417]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_DropDownLines(int* pcLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropDownLines"), DISPID(DISPID_UNKNOWN/*[1610940418]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcLines /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_DropDownLines(void)
{
  int pcLines;
  this->get_DropDownLines((int*)&pcLines);
  return pcLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_DropDownLines(int pcLines/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropDownLines"), DISPID(1610940418));
  TAutoArgs<1> _args;
  _args[1] = pcLines /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_DropDownWidth(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropDownWidth"), DISPID(DISPID_UNKNOWN/*[1610940420]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_DropDownWidth(void)
{
  int pdx;
  this->get_DropDownWidth((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_DropDownWidth(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropDownWidth"), DISPID(1610940420));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_List(int Index/*[in]*/, BSTR* pbstrItem/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("List"), DISPID(DISPID_UNKNOWN/*[1610940422]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pbstrItem /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_List(int Index/*[in]*/)
{
  BSTR pbstrItem;
  this->get_List(Index, (BSTR*)&pbstrItem);
  return pbstrItem;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_List(int Index/*[in]*/, BSTR pbstrItem/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("List"), DISPID(1610940422));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = pbstrItem /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_ListCount(int* pcItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListCount"), DISPID(DISPID_UNKNOWN/*[1610940424]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcItems /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_ListCount(void)
{
  int pcItems;
  this->get_ListCount((int*)&pcItems);
  return pcItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_ListHeaderCount(int* pcItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListHeaderCount"), DISPID(DISPID_UNKNOWN/*[1610940425]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcItems /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_ListHeaderCount(void)
{
  int pcItems;
  this->get_ListHeaderCount((int*)&pcItems);
  return pcItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_ListHeaderCount(int pcItems/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListHeaderCount"), DISPID(1610940425));
  TAutoArgs<1> _args;
  _args[1] = pcItems /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_ListIndex(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(DISPID_UNKNOWN/*[1610940427]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_ListIndex(void)
{
  int pi;
  this->get_ListIndex((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_ListIndex(int pi/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListIndex"), DISPID(1610940427));
  TAutoArgs<1> _args;
  _args[1] = pi /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::RemoveItem(int Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveItem"), DISPID(DISPID_UNKNOWN/*[1610940429]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Style(Office_97::MsoComboStyle* pstyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(DISPID_UNKNOWN/*[1610940430]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pstyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoComboStyle __fastcall
CommandBarComboBoxDispT<T>::get_Style(void)
{
  Office_97::MsoComboStyle pstyle;
  this->get_Style((Office_97::MsoComboStyle*)&pstyle);
  return pstyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_Style(Office_97::MsoComboStyle pstyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(1610940430));
  TAutoArgs<1> _args;
  _args[1] = (int)pstyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Text(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610940432]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_Text(void)
{
  BSTR pbstrText;
  this->get_Text((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_Text(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1610940432));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_BeginGroup(VARIANT_BOOL* pvarfBeginGroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(DISPID_UNKNOWN/*[1610874880]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBeginGroup /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarComboBoxDispT<T>::get_BeginGroup(void)
{
  VARIANT_BOOL pvarfBeginGroup;
  this->get_BeginGroup((VARIANT_BOOL*)&pvarfBeginGroup);
  return pvarfBeginGroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_BeginGroup(VARIANT_BOOL pvarfBeginGroup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginGroup"), DISPID(1610874880));
  TAutoArgs<1> _args;
  _args[1] = pvarfBeginGroup /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_BuiltIn(VARIANT_BOOL* pvarfBuiltIn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuiltIn"), DISPID(DISPID_UNKNOWN/*[1610874882]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfBuiltIn /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarComboBoxDispT<T>::get_BuiltIn(void)
{
  VARIANT_BOOL pvarfBuiltIn;
  this->get_BuiltIn((VARIANT_BOOL*)&pvarfBuiltIn);
  return pvarfBuiltIn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Caption(BSTR* pbstrCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(DISPID_UNKNOWN/*[1610874883]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_Caption(void)
{
  BSTR pbstrCaption;
  this->get_Caption((BSTR*)&pbstrCaption);
  return pbstrCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_Caption(BSTR pbstrCaption/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(1610874883));
  TAutoArgs<1> _args;
  _args[1] = pbstrCaption /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Control(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Control"), DISPID(DISPID_UNKNOWN/*[1610874885]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarComboBoxDispT<T>::get_Control(void)
{
  LPDISPATCH ppidisp;
  this->get_Control((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                 Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(DISPID_UNKNOWN/*[1610874886]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarComboBoxDispT<T>::Copy(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->Copy(Bar, Before, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Delete(VARIANT Temporary/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610874887]*/));
  TAutoArgs<1> _args;
  _args[1] = Temporary /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_DescriptionText(BSTR* pbstrText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(DISPID_UNKNOWN/*[1610874888]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_DescriptionText(void)
{
  BSTR pbstrText;
  this->get_DescriptionText((BSTR*)&pbstrText);
  return pbstrText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_DescriptionText(BSTR pbstrText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DescriptionText"), DISPID(1610874888));
  TAutoArgs<1> _args;
  _args[1] = pbstrText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Enabled(VARIANT_BOOL* pvarfEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(DISPID_UNKNOWN/*[1610874890]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarComboBoxDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL pvarfEnabled;
  this->get_Enabled((VARIANT_BOOL*)&pvarfEnabled);
  return pvarfEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_Enabled(VARIANT_BOOL pvarfEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(1610874890));
  TAutoArgs<1> _args;
  _args[1] = pvarfEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610874892]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Height(int* pdy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(DISPID_UNKNOWN/*[1610874893]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdy /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_Height(void)
{
  int pdy;
  this->get_Height((int*)&pdy);
  return pdy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_Height(int pdy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(1610874893));
  TAutoArgs<1> _args;
  _args[1] = pdy /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_HelpContextId(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(DISPID_UNKNOWN/*[1610874895]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_HelpContextId(void)
{
  int pid;
  this->get_HelpContextId((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_HelpContextId(int pid/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpContextId"), DISPID(1610874895));
  TAutoArgs<1> _args;
  _args[1] = pid /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_HelpFile(BSTR* pbstrFilename/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(DISPID_UNKNOWN/*[1610874897]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrFilename /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_HelpFile(void)
{
  BSTR pbstrFilename;
  this->get_HelpFile((BSTR*)&pbstrFilename);
  return pbstrFilename;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_HelpFile(BSTR pbstrFilename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HelpFile"), DISPID(1610874897));
  TAutoArgs<1> _args;
  _args[1] = pbstrFilename /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Id(int* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Id"), DISPID(DISPID_UNKNOWN/*[1610874899]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_Id(void)
{
  int pid;
  this->get_Id((int*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Index(int* pi/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(DISPID_UNKNOWN/*[1610874900]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pi /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_Index(void)
{
  int pi;
  this->get_Index((int*)&pi);
  return pi;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_InstanceId(long* pid/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InstanceId"), DISPID(DISPID_UNKNOWN/*[1610874901]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pid /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarComboBoxDispT<T>::get_InstanceId(void)
{
  long pid;
  this->get_InstanceId((long*)&pid);
  return pid;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/, 
                                 Office_97::CommandBarControl** ppcbc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610874902]*/));
  TAutoArgs<2> _args;
  _args[1] = Bar /*[VT_VARIANT:0]*/;
  _args[2] = Before /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBarControl**)ppcbc /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::CommandBarControl* __fastcall
CommandBarComboBoxDispT<T>::Move(VARIANT Bar/*[in,opt]*/, VARIANT Before/*[in,opt]*/)
{
  Office_97::CommandBarControl* ppcbc;
  this->Move(Bar, Before, (Office_97::CommandBarControl**)&ppcbc);
  return ppcbc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Left(int* px/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610874903]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(px /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_Left(void)
{
  int px;
  this->get_Left((int*)&px);
  return px;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_OLEUsage(Office_97::MsoControlOLEUsage* pcou/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(DISPID_UNKNOWN/*[1610874904]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pcou /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoControlOLEUsage __fastcall
CommandBarComboBoxDispT<T>::get_OLEUsage(void)
{
  Office_97::MsoControlOLEUsage pcou;
  this->get_OLEUsage((Office_97::MsoControlOLEUsage*)&pcou);
  return pcou;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_OLEUsage(Office_97::MsoControlOLEUsage pcou/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OLEUsage"), DISPID(1610874904));
  TAutoArgs<1> _args;
  _args[1] = (int)pcou /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_OnAction(BSTR* pbstrOnAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(DISPID_UNKNOWN/*[1610874906]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrOnAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_OnAction(void)
{
  BSTR pbstrOnAction;
  this->get_OnAction((BSTR*)&pbstrOnAction);
  return pbstrOnAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_OnAction(BSTR pbstrOnAction/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnAction"), DISPID(1610874906));
  TAutoArgs<1> _args;
  _args[1] = pbstrOnAction /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Parent(Office_97::CommandBar** ppcb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610874908]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CommandBar**)ppcb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CommandBar* __fastcall
CommandBarComboBoxDispT<T>::get_Parent(void)
{
  Office_97::CommandBar* ppcb;
  this->get_Parent((Office_97::CommandBar**)&ppcb);
  return ppcb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Parameter(BSTR* pbstrParam/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(DISPID_UNKNOWN/*[1610874909]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrParam /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_Parameter(void)
{
  BSTR pbstrParam;
  this->get_Parameter((BSTR*)&pbstrParam);
  return pbstrParam;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_Parameter(BSTR pbstrParam/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parameter"), DISPID(1610874909));
  TAutoArgs<1> _args;
  _args[1] = pbstrParam /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Priority(int* pnPri/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(DISPID_UNKNOWN/*[1610874911]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnPri /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_Priority(void)
{
  int pnPri;
  this->get_Priority((int*)&pnPri);
  return pnPri;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_Priority(int pnPri/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Priority"), DISPID(1610874911));
  TAutoArgs<1> _args;
  _args[1] = pnPri /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Reset()
{
  _TDispID _dispid(*this, OLETEXT("Reset"), DISPID(DISPID_UNKNOWN/*[1610874913]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::SetFocus()
{
  _TDispID _dispid(*this, OLETEXT("SetFocus"), DISPID(DISPID_UNKNOWN/*[1610874914]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Tag(BSTR* pbstrTag/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(DISPID_UNKNOWN/*[1610874915]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTag /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_Tag(void)
{
  BSTR pbstrTag;
  this->get_Tag((BSTR*)&pbstrTag);
  return pbstrTag;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_Tag(BSTR pbstrTag/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(1610874915));
  TAutoArgs<1> _args;
  _args[1] = pbstrTag /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_TooltipText(BSTR* pbstrTooltip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(DISPID_UNKNOWN/*[1610874917]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTooltip /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_TooltipText(void)
{
  BSTR pbstrTooltip;
  this->get_TooltipText((BSTR*)&pbstrTooltip);
  return pbstrTooltip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_TooltipText(BSTR pbstrTooltip/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TooltipText"), DISPID(1610874917));
  TAutoArgs<1> _args;
  _args[1] = pbstrTooltip /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Top(int* py/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610874919]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(py /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_Top(void)
{
  int py;
  this->get_Top((int*)&py);
  return py;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Type(Office_97::MsoControlType* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610874920]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoControlType __fastcall
CommandBarComboBoxDispT<T>::get_Type(void)
{
  Office_97::MsoControlType ptype;
  this->get_Type((Office_97::MsoControlType*)&ptype);
  return ptype;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610874921]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
CommandBarComboBoxDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pvarfVisible;
  this->get_Visible((VARIANT_BOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610874921));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Width(int* pdx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(DISPID_UNKNOWN/*[1610874923]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
CommandBarComboBoxDispT<T>::get_Width(void)
{
  int pdx;
  this->get_Width((int*)&pdx);
  return pdx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_Width(int pdx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(1610874923));
  TAutoArgs<1> _args;
  _args[1] = pdx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(DISPID_UNKNOWN/*[1610874925]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(DISPID_UNKNOWN/*[1610874926]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(DISPID_UNKNOWN/*[1610874927]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(DISPID_UNKNOWN/*[1610874928]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(DISPID_UNKNOWN/*[1610874929]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(DISPID_UNKNOWN/*[1610874930]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(DISPID_UNKNOWN/*[1610874931]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(DISPID_UNKNOWN/*[1610874932]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarComboBoxDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarComboBoxDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accParent(LPDISPATCH* ppdispParent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accParent"), DISPID(-5000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppdispParent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarComboBoxDispT<T>::get_accParent(void)
{
  LPDISPATCH ppdispParent;
  this->get_accParent((LPDISPATCH*)&ppdispParent);
  return ppdispParent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accChildCount(long* pcountChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChildCount"), DISPID(-5001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcountChildren /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarComboBoxDispT<T>::get_accChildCount(void)
{
  long pcountChildren;
  this->get_accChildCount((long*)&pcountChildren);
  return pcountChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accChild(VARIANT varChild/*[in]*/, 
                                         LPDISPATCH* ppdispChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accChild"), DISPID(-5002));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(ppdispChild /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CommandBarComboBoxDispT<T>::get_accChild(VARIANT varChild/*[in]*/)
{
  LPDISPATCH ppdispChild;
  this->get_accChild(varChild, (LPDISPATCH*)&ppdispChild);
  return ppdispChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/, BSTR* pszName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_accName(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszName;
  this->get_accName(varChild, (BSTR*)&pszName);
  return pszName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/, 
                                         BSTR* pszValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszValue /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_accValue(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszValue;
  this->get_accValue(varChild, (BSTR*)&pszValue);
  return pszValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/, 
                                               BSTR* pszDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDescription"), DISPID(-5005));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_accDescription(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDescription;
  this->get_accDescription(varChild, (BSTR*)&pszDescription);
  return pszDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/, 
                                        VARIANT* pvarRole/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accRole"), DISPID(-5006));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarRole /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarComboBoxDispT<T>::get_accRole(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarRole;
  this->get_accRole(varChild, (VARIANT*)&pvarRole);
  return pvarRole;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/, 
                                         VARIANT* pvarState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accState"), DISPID(-5007));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarState /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarComboBoxDispT<T>::get_accState(VARIANT varChild/*[in,opt]*/)
{
  VARIANT pvarState;
  this->get_accState(varChild, (VARIANT*)&pvarState);
  return pvarState;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/, BSTR* pszHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelp"), DISPID(-5008));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszHelp /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_accHelp(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszHelp;
  this->get_accHelp(varChild, (BSTR*)&pszHelp);
  return pszHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                             VARIANT varChild/*[in,opt]*/, 
                                             long* pidTopic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHelpTopic"), DISPID(-5009));
  TAutoArgs<2> _args;
  _args[1] = pszHelpFile /*[VT_BSTR:1]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pidTopic /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CommandBarComboBoxDispT<T>::get_accHelpTopic(BSTR* pszHelpFile/*[out]*/, 
                                             VARIANT varChild/*[in,opt]*/)
{
  long pidTopic;
  this->get_accHelpTopic(pszHelpFile, varChild, (long*)&pidTopic);
  return pidTopic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/, 
                                                    BSTR* pszKeyboardShortcut/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accKeyboardShortcut"), DISPID(-5010));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszKeyboardShortcut /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_accKeyboardShortcut(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszKeyboardShortcut;
  this->get_accKeyboardShortcut(varChild, (BSTR*)&pszKeyboardShortcut);
  return pszKeyboardShortcut;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accFocus(VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accFocus"), DISPID(-5011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarComboBoxDispT<T>::get_accFocus(void)
{
  VARIANT pvarChild;
  this->get_accFocus((VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accSelection(VARIANT* pvarChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelection"), DISPID(-5012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarChildren /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarComboBoxDispT<T>::get_accSelection(void)
{
  VARIANT pvarChildren;
  this->get_accSelection((VARIANT*)&pvarChildren);
  return pvarChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/, 
                                                 BSTR* pszDefaultAction/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDefaultAction"), DISPID(-5013));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pszDefaultAction /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
CommandBarComboBoxDispT<T>::get_accDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  BSTR pszDefaultAction;
  this->get_accDefaultAction(varChild, (BSTR*)&pszDefaultAction);
  return pszDefaultAction;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::accSelect(long flagsSelect/*[in]*/, VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accSelect"), DISPID(-5014));
  TAutoArgs<2> _args;
  _args[1] = flagsSelect /*[VT_I4:0]*/;
  _args[2] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::accLocation(long* pxLeft/*[out]*/, long* pyTop/*[out]*/, 
                                        long* pcxWidth/*[out]*/, long* pcyHeight/*[out]*/, 
                                        VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accLocation"), DISPID(-5015));
  TAutoArgs<5> _args;
  _args[1] = pxLeft /*[VT_I4:1]*/;
  _args[2] = pyTop /*[VT_I4:1]*/;
  _args[3] = pcxWidth /*[VT_I4:1]*/;
  _args[4] = pcyHeight /*[VT_I4:1]*/;
  _args[5] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/, 
                                        VARIANT* pvarEndUpAt/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accNavigate"), DISPID(-5016));
  TAutoArgs<2> _args;
  _args[1] = navDir /*[VT_I4:0]*/;
  _args[2] = varStart /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvarEndUpAt /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarComboBoxDispT<T>::accNavigate(long navDir/*[in]*/, VARIANT varStart/*[in,opt]*/)
{
  VARIANT pvarEndUpAt;
  this->accNavigate(navDir, varStart, (VARIANT*)&pvarEndUpAt);
  return pvarEndUpAt;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/, 
                                       VARIANT* pvarChild/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("accHitTest"), DISPID(-5017));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_I4:0]*/;
  _args[2] = yTop /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvarChild /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
CommandBarComboBoxDispT<T>::accHitTest(long xLeft/*[in]*/, long yTop/*[in]*/)
{
  VARIANT pvarChild;
  this->accHitTest(xLeft, yTop, (VARIANT*)&pvarChild);
  return pvarChild;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::accDoDefaultAction(VARIANT varChild/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("accDoDefaultAction"), DISPID(-5018));
  TAutoArgs<1> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_accName(VARIANT varChild/*[in,opt]*/, BSTR pszName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accName"), DISPID(-5003));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CommandBarComboBoxDispT<T>::set_accValue(VARIANT varChild/*[in,opt]*/, BSTR pszValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("accValue"), DISPID(-5004));
  TAutoArgs<2> _args;
  _args[1] = varChild /*[VT_VARIANT:0]*/;
  _args[2] = pszValue /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  Adjustments
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0310-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AdjustmentsDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AdjustmentsDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Item(int Index/*[in]*/, float* Val/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Val /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
AdjustmentsDispT<T>::get_Item(int Index/*[in]*/)
{
  float Val;
  this->get_Item(Index, (float*)&Val);
  return Val;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::set_Item(int Index/*[in]*/, float Val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = Val /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AdjustmentsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AdjustmentsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AdjustmentsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  CalloutFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0311-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CalloutFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::AutomaticLength()
{
  _TDispID _dispid(*this, OLETEXT("AutomaticLength"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::CustomDrop(float Drop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomDrop"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Drop /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::CustomLength(float Length/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CustomLength"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Length /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::PresetDrop(Office_97::MsoCalloutDropType DropType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetDrop"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)DropType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Accent(Office_97::MsoTriState* Accent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accent"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Accent /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
CalloutFormatDispT<T>::get_Accent(void)
{
  Office_97::MsoTriState Accent;
  this->get_Accent((Office_97::MsoTriState*)&Accent);
  return Accent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Accent(Office_97::MsoTriState Accent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Accent"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (int)Accent /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Angle(Office_97::MsoCalloutAngleType* Angle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Angle"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Angle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoCalloutAngleType __fastcall
CalloutFormatDispT<T>::get_Angle(void)
{
  Office_97::MsoCalloutAngleType Angle;
  this->get_Angle((Office_97::MsoCalloutAngleType*)&Angle);
  return Angle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Angle(Office_97::MsoCalloutAngleType Angle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Angle"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)Angle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_AutoAttach(Office_97::MsoTriState* AutoAttach/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoAttach"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoAttach /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
CalloutFormatDispT<T>::get_AutoAttach(void)
{
  Office_97::MsoTriState AutoAttach;
  this->get_AutoAttach((Office_97::MsoTriState*)&AutoAttach);
  return AutoAttach;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_AutoAttach(Office_97::MsoTriState AutoAttach/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoAttach"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoAttach /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_AutoLength(Office_97::MsoTriState* AutoLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoLength"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
CalloutFormatDispT<T>::get_AutoLength(void)
{
  Office_97::MsoTriState AutoLength;
  this->get_AutoLength((Office_97::MsoTriState*)&AutoLength);
  return AutoLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Border(Office_97::MsoTriState* Border/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Border /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
CalloutFormatDispT<T>::get_Border(void)
{
  Office_97::MsoTriState Border;
  this->get_Border((Office_97::MsoTriState*)&Border);
  return Border;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Border(Office_97::MsoTriState Border/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Border"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)Border /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Drop(float* Drop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Drop"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Drop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Drop(void)
{
  float Drop;
  this->get_Drop((float*)&Drop);
  return Drop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_DropType(Office_97::MsoCalloutDropType* DropType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DropType"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DropType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoCalloutDropType __fastcall
CalloutFormatDispT<T>::get_DropType(void)
{
  Office_97::MsoCalloutDropType DropType;
  this->get_DropType((Office_97::MsoCalloutDropType*)&DropType);
  return DropType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Gap(float* Gap/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Gap"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Gap /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Gap(void)
{
  float Gap;
  this->get_Gap((float*)&Gap);
  return Gap;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Gap(float Gap/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Gap"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = Gap /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Length(float* Length/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Length"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Length /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
CalloutFormatDispT<T>::get_Length(void)
{
  float Length;
  this->get_Length((float*)&Length);
  return Length;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Type(Office_97::MsoCalloutType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoCalloutType __fastcall
CalloutFormatDispT<T>::get_Type(void)
{
  Office_97::MsoCalloutType Type;
  this->get_Type((Office_97::MsoCalloutType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::set_Type(Office_97::MsoCalloutType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
CalloutFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
CalloutFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
CalloutFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ColorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0312-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_rgb(Office_97::MsoRGBType* rgb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RGB /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoRGBType __fastcall
ColorFormatDispT<T>::get_rgb(void)
{
  Office_97::MsoRGBType RGB;
  this->get_rgb((Office_97::MsoRGBType*)&RGB);
  return RGB;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::set_rgb(Office_97::MsoRGBType rgb/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RGB"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = RGB /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_SchemeColor(int* SchemeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemeColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SchemeColor /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ColorFormatDispT<T>::get_SchemeColor(void)
{
  int SchemeColor;
  this->get_SchemeColor((int*)&SchemeColor);
  return SchemeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::set_SchemeColor(int SchemeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SchemeColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = SchemeColor /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Type(Office_97::MsoColorType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoColorType __fastcall
ColorFormatDispT<T>::get_Type(void)
{
  Office_97::MsoColorType Type;
  this->get_Type((Office_97::MsoColorType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ColorFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ColorFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ColorFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ConnectorFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0313-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ConnectorFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::BeginConnect(Office_97::Shape* ConnectedShape/*[in]*/, 
                                      int ConnectionSite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnect"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Office_97::Shape*)ConnectedShape /*[VT_USERDEFINED:1]*/;
  _args[2] = ConnectionSite /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::BeginDisconnect()
{
  _TDispID _dispid(*this, OLETEXT("BeginDisconnect"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::EndConnect(Office_97::Shape* ConnectedShape/*[in]*/, 
                                    int ConnectionSite/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnect"), DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Office_97::Shape*)ConnectedShape /*[VT_USERDEFINED:1]*/;
  _args[2] = ConnectionSite /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::EndDisconnect()
{
  _TDispID _dispid(*this, OLETEXT("EndDisconnect"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnected(Office_97::MsoTriState* BeginConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnected"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginConnected /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ConnectorFormatDispT<T>::get_BeginConnected(void)
{
  Office_97::MsoTriState BeginConnected;
  this->get_BeginConnected((Office_97::MsoTriState*)&BeginConnected);
  return BeginConnected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnectedShape(Office_97::Shape** BeginConnectedShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnectedShape"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)BeginConnectedShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ConnectorFormatDispT<T>::get_BeginConnectedShape(void)
{
  Office_97::Shape* BeginConnectedShape;
  this->get_BeginConnectedShape((Office_97::Shape**)&BeginConnectedShape);
  return BeginConnectedShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_BeginConnectionSite(int* BeginConnectionSite/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginConnectionSite"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(BeginConnectionSite /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ConnectorFormatDispT<T>::get_BeginConnectionSite(void)
{
  int BeginConnectionSite;
  this->get_BeginConnectionSite((int*)&BeginConnectionSite);
  return BeginConnectionSite;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnected(Office_97::MsoTriState* EndConnected/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnected"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndConnected /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ConnectorFormatDispT<T>::get_EndConnected(void)
{
  Office_97::MsoTriState EndConnected;
  this->get_EndConnected((Office_97::MsoTriState*)&EndConnected);
  return EndConnected;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnectedShape(Office_97::Shape** EndConnectedShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnectedShape"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)EndConnectedShape /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ConnectorFormatDispT<T>::get_EndConnectedShape(void)
{
  Office_97::Shape* EndConnectedShape;
  this->get_EndConnectedShape((Office_97::Shape**)&EndConnectedShape);
  return EndConnectedShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_EndConnectionSite(int* EndConnectionSite/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndConnectionSite"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(EndConnectionSite /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ConnectorFormatDispT<T>::get_EndConnectionSite(void)
{
  int EndConnectionSite;
  this->get_EndConnectionSite((int*)&EndConnectionSite);
  return EndConnectionSite;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Type(Office_97::MsoConnectorType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoConnectorType __fastcall
ConnectorFormatDispT<T>::get_Type(void)
{
  Office_97::MsoConnectorType Type;
  this->get_Type((Office_97::MsoConnectorType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::set_Type(Office_97::MsoConnectorType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ConnectorFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ConnectorFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ConnectorFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  FillFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0314-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FillFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Background()
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::OneColorGradient(Office_97::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/
                                     , float Degree/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OneColorGradient"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  _args[3] = Degree /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Patterned(Office_97::MsoPatternType Pattern/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Patterned"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)Pattern /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::PresetGradient(Office_97::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/, 
                                   Office_97::MsoPresetGradientType PresetGradientType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetGradient"), DISPID(13));
  TAutoArgs<3> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  _args[3] = (int)PresetGradientType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::PresetTextured(Office_97::MsoPresetTexture PresetTexture/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextured"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetTexture /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::Solid()
{
  _TDispID _dispid(*this, OLETEXT("Solid"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::TwoColorGradient(Office_97::MsoGradientStyle Style/*[in]*/, int Variant/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TwoColorGradient"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  _args[2] = Variant /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::UserPicture(BSTR PictureFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserPicture"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = PictureFile /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::UserTextured(BSTR TextureFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserTextured"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = TextureFile /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_BackColor(Office_97::ColorFormat** BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ColorFormat**)BackColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ColorFormat* __fastcall
FillFormatDispT<T>::get_BackColor(void)
{
  Office_97::ColorFormat* BackColor;
  this->get_BackColor((Office_97::ColorFormat**)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_BackColor(Office_97::ColorFormat* BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_97::ColorFormat*)BackColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_ForeColor(Office_97::ColorFormat** ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ColorFormat* __fastcall
FillFormatDispT<T>::get_ForeColor(void)
{
  Office_97::ColorFormat* ForeColor;
  this->get_ForeColor((Office_97::ColorFormat**)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_ForeColor(Office_97::ColorFormat* ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_97::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientColorType(Office_97::MsoGradientColorType* GradientColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientColorType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GradientColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoGradientColorType __fastcall
FillFormatDispT<T>::get_GradientColorType(void)
{
  Office_97::MsoGradientColorType GradientColorType;
  this->get_GradientColorType((Office_97::MsoGradientColorType*)&GradientColorType);
  return GradientColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientDegree(float* GradientDegree/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientDegree"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GradientDegree /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FillFormatDispT<T>::get_GradientDegree(void)
{
  float GradientDegree;
  this->get_GradientDegree((float*)&GradientDegree);
  return GradientDegree;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientStyle(Office_97::MsoGradientStyle* GradientStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientStyle"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)GradientStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoGradientStyle __fastcall
FillFormatDispT<T>::get_GradientStyle(void)
{
  Office_97::MsoGradientStyle GradientStyle;
  this->get_GradientStyle((Office_97::MsoGradientStyle*)&GradientStyle);
  return GradientStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_GradientVariant(int* GradientVariant/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GradientVariant"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(GradientVariant /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
FillFormatDispT<T>::get_GradientVariant(void)
{
  int GradientVariant;
  this->get_GradientVariant((int*)&GradientVariant);
  return GradientVariant;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Pattern(Office_97::MsoPatternType* Pattern/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Pattern /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPatternType __fastcall
FillFormatDispT<T>::get_Pattern(void)
{
  Office_97::MsoPatternType Pattern;
  this->get_Pattern((Office_97::MsoPatternType*)&Pattern);
  return Pattern;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_PresetGradientType(Office_97::MsoPresetGradientType* PresetGradientType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetGradientType"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetGradientType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPresetGradientType __fastcall
FillFormatDispT<T>::get_PresetGradientType(void)
{
  Office_97::MsoPresetGradientType PresetGradientType;
  this->get_PresetGradientType((Office_97::MsoPresetGradientType*)&PresetGradientType);
  return PresetGradientType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_PresetTexture(Office_97::MsoPresetTexture* PresetTexture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTexture"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetTexture /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPresetTexture __fastcall
FillFormatDispT<T>::get_PresetTexture(void)
{
  Office_97::MsoPresetTexture PresetTexture;
  this->get_PresetTexture((Office_97::MsoPresetTexture*)&PresetTexture);
  return PresetTexture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_TextureName(BSTR* TextureName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureName"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextureName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FillFormatDispT<T>::get_TextureName(void)
{
  BSTR TextureName;
  this->get_TextureName((BSTR*)&TextureName);
  return TextureName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_TextureType(Office_97::MsoTextureType* TextureType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextureType"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TextureType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTextureType __fastcall
FillFormatDispT<T>::get_TextureType(void)
{
  Office_97::MsoTextureType TextureType;
  this->get_TextureType((Office_97::MsoTextureType*)&TextureType);
  return TextureType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
FillFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Type(Office_97::MsoFillType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoFillType __fastcall
FillFormatDispT<T>::get_Type(void)
{
  Office_97::MsoFillType Type;
  this->get_Type((Office_97::MsoFillType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
FillFormatDispT<T>::get_Visible(void)
{
  Office_97::MsoTriState Visible;
  this->get_Visible((Office_97::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::set_Visible(Office_97::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FillFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FillFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FillFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  FreeformBuilder
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0315-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FreeformBuilderDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::AddNodes(Office_97::MsoSegmentType SegmentType/*[in]*/, 
                                  Office_97::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                                  float Y1/*[in]*/, float X2/*[in,def,opt]*/, 
                                  float Y2/*[in,def,opt]*/, float X3/*[in,def,opt]*/, 
                                  float Y3/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNodes"), DISPID(10));
  TAutoArgs<8> _args;
  _args[1] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[3] = X1 /*[VT_R4:0]*/;
  _args[4] = Y1 /*[VT_R4:0]*/;
  _args[5] = X2 /*[VT_R4:0]*/;
  _args[6] = Y2 /*[VT_R4:0]*/;
  _args[7] = X3 /*[VT_R4:0]*/;
  _args[8] = Y3 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::ConvertToShape(Office_97::Shape** Freeform/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertToShape"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Freeform /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
FreeformBuilderDispT<T>::ConvertToShape(void)
{
  Office_97::Shape* Freeform;
  this->ConvertToShape((Office_97::Shape**)&Freeform);
  return Freeform;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FreeformBuilderDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FreeformBuilderDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FreeformBuilderDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  GroupShapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0316-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
GroupShapesDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Count(int* pnShapes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pnShapes /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
GroupShapesDispT<T>::get_Count(void)
{
  int pnShapes;
  this->get_Count((int*)&pnShapes);
  return pnShapes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::Item(VARIANT Index/*[in]*/, Office_97::Shape** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
GroupShapesDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Office_97::Shape* Item;
  this->Item(Index, (Office_97::Shape**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
GroupShapesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
GroupShapesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
GroupShapesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
GroupShapesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  LineFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0317-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LineFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BackColor(Office_97::ColorFormat** BackColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ColorFormat**)BackColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ColorFormat* __fastcall
LineFormatDispT<T>::get_BackColor(void)
{
  Office_97::ColorFormat* BackColor;
  this->get_BackColor((Office_97::ColorFormat**)&BackColor);
  return BackColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BackColor(Office_97::ColorFormat* BackColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_97::ColorFormat*)BackColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadLength(Office_97::MsoArrowheadLength* BeginArrowheadLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadLength"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoArrowheadLength __fastcall
LineFormatDispT<T>::get_BeginArrowheadLength(void)
{
  Office_97::MsoArrowheadLength BeginArrowheadLength;
  this->get_BeginArrowheadLength((Office_97::MsoArrowheadLength*)&BeginArrowheadLength);
  return BeginArrowheadLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadLength(Office_97::MsoArrowheadLength BeginArrowheadLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadLength"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadLength /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadStyle(Office_97::MsoArrowheadStyle* BeginArrowheadStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadStyle"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoArrowheadStyle __fastcall
LineFormatDispT<T>::get_BeginArrowheadStyle(void)
{
  Office_97::MsoArrowheadStyle BeginArrowheadStyle;
  this->get_BeginArrowheadStyle((Office_97::MsoArrowheadStyle*)&BeginArrowheadStyle);
  return BeginArrowheadStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadStyle(Office_97::MsoArrowheadStyle BeginArrowheadStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadStyle"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_BeginArrowheadWidth(Office_97::MsoArrowheadWidth* BeginArrowheadWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadWidth"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BeginArrowheadWidth /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoArrowheadWidth __fastcall
LineFormatDispT<T>::get_BeginArrowheadWidth(void)
{
  Office_97::MsoArrowheadWidth BeginArrowheadWidth;
  this->get_BeginArrowheadWidth((Office_97::MsoArrowheadWidth*)&BeginArrowheadWidth);
  return BeginArrowheadWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_BeginArrowheadWidth(Office_97::MsoArrowheadWidth BeginArrowheadWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BeginArrowheadWidth"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int)BeginArrowheadWidth /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_DashStyle(Office_97::MsoLineDashStyle* DashStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)DashStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoLineDashStyle __fastcall
LineFormatDispT<T>::get_DashStyle(void)
{
  Office_97::MsoLineDashStyle DashStyle;
  this->get_DashStyle((Office_97::MsoLineDashStyle*)&DashStyle);
  return DashStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_DashStyle(Office_97::MsoLineDashStyle DashStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DashStyle"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)DashStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadLength(Office_97::MsoArrowheadLength* EndArrowheadLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadLength"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadLength /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoArrowheadLength __fastcall
LineFormatDispT<T>::get_EndArrowheadLength(void)
{
  Office_97::MsoArrowheadLength EndArrowheadLength;
  this->get_EndArrowheadLength((Office_97::MsoArrowheadLength*)&EndArrowheadLength);
  return EndArrowheadLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadLength(Office_97::MsoArrowheadLength EndArrowheadLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadLength"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadLength /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadStyle(Office_97::MsoArrowheadStyle* EndArrowheadStyle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadStyle"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadStyle /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoArrowheadStyle __fastcall
LineFormatDispT<T>::get_EndArrowheadStyle(void)
{
  Office_97::MsoArrowheadStyle EndArrowheadStyle;
  this->get_EndArrowheadStyle((Office_97::MsoArrowheadStyle*)&EndArrowheadStyle);
  return EndArrowheadStyle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadStyle(Office_97::MsoArrowheadStyle EndArrowheadStyle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadStyle"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadStyle /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_EndArrowheadWidth(Office_97::MsoArrowheadWidth* EndArrowheadWidth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadWidth"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EndArrowheadWidth /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoArrowheadWidth __fastcall
LineFormatDispT<T>::get_EndArrowheadWidth(void)
{
  Office_97::MsoArrowheadWidth EndArrowheadWidth;
  this->get_EndArrowheadWidth((Office_97::MsoArrowheadWidth*)&EndArrowheadWidth);
  return EndArrowheadWidth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_EndArrowheadWidth(Office_97::MsoArrowheadWidth EndArrowheadWidth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndArrowheadWidth"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)EndArrowheadWidth /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_ForeColor(Office_97::ColorFormat** ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ColorFormat* __fastcall
LineFormatDispT<T>::get_ForeColor(void)
{
  Office_97::ColorFormat* ForeColor;
  this->get_ForeColor((Office_97::ColorFormat**)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_ForeColor(Office_97::ColorFormat* ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_97::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Pattern(Office_97::MsoPatternType* Pattern/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Pattern /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPatternType __fastcall
LineFormatDispT<T>::get_Pattern(void)
{
  Office_97::MsoPatternType Pattern;
  this->get_Pattern((Office_97::MsoPatternType*)&Pattern);
  return Pattern;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Pattern(Office_97::MsoPatternType Pattern/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Pattern"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)Pattern /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Style(Office_97::MsoLineStyle* Style/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Style /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoLineStyle __fastcall
LineFormatDispT<T>::get_Style(void)
{
  Office_97::MsoLineStyle Style;
  this->get_Style((Office_97::MsoLineStyle*)&Style);
  return Style;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Style(Office_97::MsoLineStyle Style/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Style"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = (int)Style /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
LineFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
LineFormatDispT<T>::get_Visible(void)
{
  Office_97::MsoTriState Visible;
  this->get_Visible((Office_97::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Visible(Office_97::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Weight(float* Weight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Weight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
LineFormatDispT<T>::get_Weight(void)
{
  float Weight;
  this->get_Weight((float*)&Weight);
  return Weight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::set_Weight(float Weight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Weight"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = Weight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
LineFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
LineFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
LineFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ShapeNode
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0318-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_EditingType(Office_97::MsoEditingType* EditingType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditingType"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)EditingType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoEditingType __fastcall
ShapeNodeDispT<T>::get_EditingType(void)
{
  Office_97::MsoEditingType EditingType;
  this->get_EditingType((Office_97::MsoEditingType*)&EditingType);
  return EditingType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Points(VARIANT* Points/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Points"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Points /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ShapeNodeDispT<T>::get_Points(void)
{
  VARIANT Points;
  this->get_Points((VARIANT*)&Points);
  return Points;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_SegmentType(Office_97::MsoSegmentType* SegmentType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SegmentType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)SegmentType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoSegmentType __fastcall
ShapeNodeDispT<T>::get_SegmentType(void)
{
  Office_97::MsoSegmentType SegmentType;
  this->get_SegmentType((Office_97::MsoSegmentType*)&SegmentType);
  return SegmentType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeNodeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ShapeNodes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0319-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeNodesDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Item(VARIANT Index/*[in]*/, Office_97::ShapeNode** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ShapeNode**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::ShapeNode* __fastcall
ShapeNodesDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Office_97::ShapeNode* Item;
  this->Item(Index, (Office_97::ShapeNode**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapeNodesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Delete(int Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::Insert(int Index/*[in]*/, Office_97::MsoSegmentType SegmentType/*[in]*/, 
                           Office_97::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                           float Y1/*[in]*/, float X2/*[in,def,opt]*/, float Y2/*[in,def,opt]*/, 
                           float X3/*[in,def,opt]*/, float Y3/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Insert"), DISPID(12));
  TAutoArgs<9> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[4] = X1 /*[VT_R4:0]*/;
  _args[5] = Y1 /*[VT_R4:0]*/;
  _args[6] = X2 /*[VT_R4:0]*/;
  _args[7] = Y2 /*[VT_R4:0]*/;
  _args[8] = X3 /*[VT_R4:0]*/;
  _args[9] = Y3 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetEditingType(int Index/*[in]*/, Office_97::MsoEditingType EditingType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEditingType"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetPosition(int Index/*[in]*/, float X1/*[in]*/, float Y1/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetPosition"), DISPID(14));
  TAutoArgs<3> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = X1 /*[VT_R4:0]*/;
  _args[3] = Y1 /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::SetSegmentType(int Index/*[in]*/, Office_97::MsoSegmentType SegmentType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSegmentType"), DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  _args[2] = (int)SegmentType /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeNodesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeNodesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeNodesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  PictureFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031A-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PictureFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::IncrementBrightness(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementBrightness"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::IncrementContrast(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementContrast"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Brightness(float* Brightness/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Brightness"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Brightness /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_Brightness(void)
{
  float Brightness;
  this->get_Brightness((float*)&Brightness);
  return Brightness;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_Brightness(float Brightness/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Brightness"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Brightness /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_ColorType(Office_97::MsoPictureColorType* ColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPictureColorType __fastcall
PictureFormatDispT<T>::get_ColorType(void)
{
  Office_97::MsoPictureColorType ColorType;
  this->get_ColorType((Office_97::MsoPictureColorType*)&ColorType);
  return ColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_ColorType(Office_97::MsoPictureColorType ColorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ColorType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)ColorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Contrast(float* Contrast/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Contrast"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Contrast /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_Contrast(void)
{
  float Contrast;
  this->get_Contrast((float*)&Contrast);
  return Contrast;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_Contrast(float Contrast/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Contrast"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = Contrast /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropBottom(float* CropBottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropBottom"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropBottom /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropBottom(void)
{
  float CropBottom;
  this->get_CropBottom((float*)&CropBottom);
  return CropBottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropBottom(float CropBottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropBottom"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = CropBottom /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropLeft(float* CropLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropLeft"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropLeft(void)
{
  float CropLeft;
  this->get_CropLeft((float*)&CropLeft);
  return CropLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropLeft(float CropLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropLeft"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = CropLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropRight(float* CropRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropRight"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropRight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropRight(void)
{
  float CropRight;
  this->get_CropRight((float*)&CropRight);
  return CropRight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropRight(float CropRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropRight"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = CropRight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_CropTop(float* CropTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropTop"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(CropTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
PictureFormatDispT<T>::get_CropTop(void)
{
  float CropTop;
  this->get_CropTop((float*)&CropTop);
  return CropTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_CropTop(float CropTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CropTop"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = CropTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_TransparencyColor(Office_97::MsoRGBType* TransparencyColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparencyColor"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TransparencyColor /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoRGBType __fastcall
PictureFormatDispT<T>::get_TransparencyColor(void)
{
  Office_97::MsoRGBType TransparencyColor;
  this->get_TransparencyColor((Office_97::MsoRGBType*)&TransparencyColor);
  return TransparencyColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_TransparencyColor(Office_97::MsoRGBType TransparencyColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparencyColor"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = TransparencyColor /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_TransparentBackground(Office_97::MsoTriState* TransparentBackground/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentBackground"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)TransparentBackground /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
PictureFormatDispT<T>::get_TransparentBackground(void)
{
  Office_97::MsoTriState TransparentBackground;
  this->get_TransparentBackground((Office_97::MsoTriState*)&TransparentBackground);
  return TransparentBackground;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::set_TransparentBackground(Office_97::MsoTriState TransparentBackground/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TransparentBackground"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int)TransparentBackground /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PictureFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PictureFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PictureFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ShadowFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031B-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShadowFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::IncrementOffsetX(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementOffsetX"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::IncrementOffsetY(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementOffsetY"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_ForeColor(Office_97::ColorFormat** ForeColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ColorFormat**)ForeColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ColorFormat* __fastcall
ShadowFormatDispT<T>::get_ForeColor(void)
{
  Office_97::ColorFormat* ForeColor;
  this->get_ForeColor((Office_97::ColorFormat**)&ForeColor);
  return ForeColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_ForeColor(Office_97::ColorFormat* ForeColor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Office_97::ColorFormat*)ForeColor /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Obscured(Office_97::MsoTriState* Obscured/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Obscured"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Obscured /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShadowFormatDispT<T>::get_Obscured(void)
{
  Office_97::MsoTriState Obscured;
  this->get_Obscured((Office_97::MsoTriState*)&Obscured);
  return Obscured;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Obscured(Office_97::MsoTriState Obscured/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Obscured"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)Obscured /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_OffsetX(float* OffsetX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetX"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OffsetX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_OffsetX(void)
{
  float OffsetX;
  this->get_OffsetX((float*)&OffsetX);
  return OffsetX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_OffsetX(float OffsetX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetX"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = OffsetX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_OffsetY(float* OffsetY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetY"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(OffsetY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_OffsetY(void)
{
  float OffsetY;
  this->get_OffsetY((float*)&OffsetY);
  return OffsetY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_OffsetY(float OffsetY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetY"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = OffsetY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Transparency(float* Transparency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Transparency /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShadowFormatDispT<T>::get_Transparency(void)
{
  float Transparency;
  this->get_Transparency((float*)&Transparency);
  return Transparency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Transparency(float Transparency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Transparency"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = Transparency /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Type(Office_97::MsoShadowType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoShadowType __fastcall
ShadowFormatDispT<T>::get_Type(void)
{
  Office_97::MsoShadowType Type;
  this->get_Type((Office_97::MsoShadowType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Type(Office_97::MsoShadowType Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShadowFormatDispT<T>::get_Visible(void)
{
  Office_97::MsoTriState Visible;
  this->get_Visible((Office_97::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::set_Visible(Office_97::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShadowFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShadowFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShadowFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  Shape
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031C-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Apply()
{
  _TDispID _dispid(*this, OLETEXT("Apply"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Duplicate(Office_97::Shape** Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapeDispT<T>::Duplicate(void)
{
  Office_97::Shape* Duplicate;
  this->Duplicate((Office_97::Shape**)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Flip(Office_97::MsoFlipCmd FlipCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Flip"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)FlipCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementLeft(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementLeft"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementRotation(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotation"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::IncrementTop(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementTop"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::PickUp()
{
  _TDispID _dispid(*this, OLETEXT("PickUp"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::RerouteConnections()
{
  _TDispID _dispid(*this, OLETEXT("RerouteConnections"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ScaleHeight(float Factor/*[in]*/, 
                           Office_97::MsoTriState RelativeToOriginalSize/*[in]*/, 
                           Office_97::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleHeight"), DISPID(19));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ScaleWidth(float Factor/*[in]*/, 
                          Office_97::MsoTriState RelativeToOriginalSize/*[in]*/, 
                          Office_97::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleWidth"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Select(VARIANT Replace/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Replace /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::SetShapesDefaultProperties()
{
  _TDispID _dispid(*this, OLETEXT("SetShapesDefaultProperties"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::Ungroup(Office_97::ShapeRange** Ungroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ungroup"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ShapeRange**)Ungroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::ShapeRange* __fastcall
ShapeDispT<T>::Ungroup(void)
{
  Office_97::ShapeRange* Ungroup;
  this->Ungroup((Office_97::ShapeRange**)&Ungroup);
  return Ungroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::ZOrder(Office_97::MsoZOrderCmd ZOrderCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = (int)ZOrderCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Adjustments(Office_97::Adjustments** Adjustments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Adjustments"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Adjustments**)Adjustments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::Adjustments* __fastcall
ShapeDispT<T>::get_Adjustments(void)
{
  Office_97::Adjustments* Adjustments;
  this->get_Adjustments((Office_97::Adjustments**)&Adjustments);
  return Adjustments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_AutoShapeType(Office_97::MsoAutoShapeType* AutoShapeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoShapeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoAutoShapeType __fastcall
ShapeDispT<T>::get_AutoShapeType(void)
{
  Office_97::MsoAutoShapeType AutoShapeType;
  this->get_AutoShapeType((Office_97::MsoAutoShapeType*)&AutoShapeType);
  return AutoShapeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_AutoShapeType(Office_97::MsoAutoShapeType AutoShapeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoShapeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_BlackWhiteMode(Office_97::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BlackWhiteMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoBlackWhiteMode __fastcall
ShapeDispT<T>::get_BlackWhiteMode(void)
{
  Office_97::MsoBlackWhiteMode BlackWhiteMode;
  this->get_BlackWhiteMode((Office_97::MsoBlackWhiteMode*)&BlackWhiteMode);
  return BlackWhiteMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_BlackWhiteMode(Office_97::MsoBlackWhiteMode BlackWhiteMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BlackWhiteMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Callout(Office_97::CalloutFormat** Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callout"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CalloutFormat**)Callout /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CalloutFormat* __fastcall
ShapeDispT<T>::get_Callout(void)
{
  Office_97::CalloutFormat* Callout;
  this->get_Callout((Office_97::CalloutFormat**)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSiteCount"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionSiteCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeDispT<T>::get_ConnectionSiteCount(void)
{
  int ConnectionSiteCount;
  this->get_ConnectionSiteCount((int*)&ConnectionSiteCount);
  return ConnectionSiteCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Connector(Office_97::MsoTriState* Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connector"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Connector /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShapeDispT<T>::get_Connector(void)
{
  Office_97::MsoTriState Connector;
  this->get_Connector((Office_97::MsoTriState*)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ConnectorFormat(Office_97::ConnectorFormat** ConnectorFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectorFormat"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ConnectorFormat**)ConnectorFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ConnectorFormat* __fastcall
ShapeDispT<T>::get_ConnectorFormat(void)
{
  Office_97::ConnectorFormat* ConnectorFormat;
  this->get_ConnectorFormat((Office_97::ConnectorFormat**)&ConnectorFormat);
  return ConnectorFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Fill(Office_97::FillFormat** Fill/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::FillFormat**)Fill /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::FillFormat* __fastcall
ShapeDispT<T>::get_Fill(void)
{
  Office_97::FillFormat* Fill;
  this->get_Fill((Office_97::FillFormat**)&Fill);
  return Fill;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_GroupItems(Office_97::GroupShapes** GroupItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupItems"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::GroupShapes**)GroupItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::GroupShapes* __fastcall
ShapeDispT<T>::get_GroupItems(void)
{
  Office_97::GroupShapes* GroupItems;
  this->get_GroupItems((Office_97::GroupShapes**)&GroupItems);
  return GroupItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_HorizontalFlip(Office_97::MsoTriState* HorizontalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalFlip"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShapeDispT<T>::get_HorizontalFlip(void)
{
  Office_97::MsoTriState HorizontalFlip;
  this->get_HorizontalFlip((Office_97::MsoTriState*)&HorizontalFlip);
  return HorizontalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Line(Office_97::LineFormat** Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::LineFormat**)Line /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::LineFormat* __fastcall
ShapeDispT<T>::get_Line(void)
{
  Office_97::LineFormat* Line;
  this->get_Line((Office_97::LineFormat**)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_LockAspectRatio(Office_97::MsoTriState* LockAspectRatio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LockAspectRatio /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShapeDispT<T>::get_LockAspectRatio(void)
{
  Office_97::MsoTriState LockAspectRatio;
  this->get_LockAspectRatio((Office_97::MsoTriState*)&LockAspectRatio);
  return LockAspectRatio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_LockAspectRatio(Office_97::MsoTriState LockAspectRatio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)LockAspectRatio /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Nodes(Office_97::ShapeNodes** Nodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ShapeNodes**)Nodes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ShapeNodes* __fastcall
ShapeDispT<T>::get_Nodes(void)
{
  Office_97::ShapeNodes* Nodes;
  this->get_Nodes((Office_97::ShapeNodes**)&Nodes);
  return Nodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Rotation(float* Rotation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Rotation /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Rotation(void)
{
  float Rotation;
  this->get_Rotation((float*)&Rotation);
  return Rotation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Rotation(float Rotation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Rotation /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_PictureFormat(Office_97::PictureFormat** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureFormat"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::PictureFormat**)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::PictureFormat* __fastcall
ShapeDispT<T>::get_PictureFormat(void)
{
  Office_97::PictureFormat* Picture;
  this->get_PictureFormat((Office_97::PictureFormat**)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Shadow(Office_97::ShadowFormat** Shadow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ShadowFormat**)Shadow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ShadowFormat* __fastcall
ShapeDispT<T>::get_Shadow(void)
{
  Office_97::ShadowFormat* Shadow;
  this->get_Shadow((Office_97::ShadowFormat**)&Shadow);
  return Shadow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_TextEffect(Office_97::TextEffectFormat** TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextEffect"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::TextEffectFormat**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::TextEffectFormat* __fastcall
ShapeDispT<T>::get_TextEffect(void)
{
  Office_97::TextEffectFormat* TextEffect;
  this->get_TextEffect((Office_97::TextEffectFormat**)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_TextFrame(Office_97::TextFrame** TextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFrame"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::TextFrame**)TextFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::TextFrame* __fastcall
ShapeDispT<T>::get_TextFrame(void)
{
  Office_97::TextFrame* TextFrame;
  this->get_TextFrame((Office_97::TextFrame**)&TextFrame);
  return TextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ThreeD(Office_97::ThreeDFormat** ThreeD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThreeD"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ThreeDFormat**)ThreeD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ThreeDFormat* __fastcall
ShapeDispT<T>::get_ThreeD(void)
{
  Office_97::ThreeDFormat* ThreeD;
  this->get_ThreeD((Office_97::ThreeDFormat**)&ThreeD);
  return ThreeD;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Type(Office_97::MsoShapeType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoShapeType __fastcall
ShapeDispT<T>::get_Type(void)
{
  Office_97::MsoShapeType Type;
  this->get_Type((Office_97::MsoShapeType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_VerticalFlip(Office_97::MsoTriState* VerticalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalFlip"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShapeDispT<T>::get_VerticalFlip(void)
{
  Office_97::MsoTriState VerticalFlip;
  this->get_VerticalFlip((Office_97::MsoTriState*)&VerticalFlip);
  return VerticalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Vertices(VARIANT* Vertices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Vertices"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Vertices /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ShapeDispT<T>::get_Vertices(void)
{
  VARIANT Vertices;
  this->get_Vertices((VARIANT*)&Vertices);
  return Vertices;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShapeDispT<T>::get_Visible(void)
{
  Office_97::MsoTriState Visible;
  this->get_Visible((Office_97::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Visible(Office_97::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderPosition"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ZOrderPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeDispT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  this->get_ZOrderPosition((int*)&ZOrderPosition);
  return ZOrderPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ShapeRange
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031D-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeRangeDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Item(VARIANT Index/*[in]*/, Office_97::Shape** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapeRangeDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Office_97::Shape* Item;
  this->Item(Index, (Office_97::Shape**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapeRangeDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Align(Office_97::MsoAlignCmd AlignCmd/*[in]*/, 
                          Office_97::MsoTriState RelativeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Align"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = (int)AlignCmd /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)RelativeTo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Apply()
{
  _TDispID _dispid(*this, OLETEXT("Apply"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Distribute(Office_97::MsoDistributeCmd DistributeCmd/*[in]*/, 
                               Office_97::MsoTriState RelativeTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Distribute"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (int)DistributeCmd /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)RelativeTo /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Duplicate(Office_97::ShapeRange** Duplicate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Duplicate"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ShapeRange**)Duplicate /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::ShapeRange* __fastcall
ShapeRangeDispT<T>::Duplicate(void)
{
  Office_97::ShapeRange* Duplicate;
  this->Duplicate((Office_97::ShapeRange**)&Duplicate);
  return Duplicate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Flip(Office_97::MsoFlipCmd FlipCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Flip"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (int)FlipCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementLeft(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementLeft"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementRotation(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotation"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::IncrementTop(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementTop"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Group(Office_97::Shape** Group/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Group"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Group /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapeRangeDispT<T>::Group(void)
{
  Office_97::Shape* Group;
  this->Group((Office_97::Shape**)&Group);
  return Group;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::PickUp()
{
  _TDispID _dispid(*this, OLETEXT("PickUp"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Regroup(Office_97::Shape** Regroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Regroup"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Regroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapeRangeDispT<T>::Regroup(void)
{
  Office_97::Shape* Regroup;
  this->Regroup((Office_97::Shape**)&Regroup);
  return Regroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::RerouteConnections()
{
  _TDispID _dispid(*this, OLETEXT("RerouteConnections"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ScaleHeight(float Factor/*[in]*/, 
                                Office_97::MsoTriState RelativeToOriginalSize/*[in]*/, 
                                Office_97::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleHeight"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ScaleWidth(float Factor/*[in]*/, 
                               Office_97::MsoTriState RelativeToOriginalSize/*[in]*/, 
                               Office_97::MsoScaleFrom fScale/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScaleWidth"), DISPID(24));
  TAutoArgs<3> _args;
  _args[1] = Factor /*[VT_R4:0]*/;
  _args[2] = (int)RelativeToOriginalSize /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)fScale /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Select(VARIANT Replace/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Select"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Replace /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::SetShapesDefaultProperties()
{
  _TDispID _dispid(*this, OLETEXT("SetShapesDefaultProperties"), DISPID(26));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::Ungroup(Office_97::ShapeRange** Ungroup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ungroup"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ShapeRange**)Ungroup /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::ShapeRange* __fastcall
ShapeRangeDispT<T>::Ungroup(void)
{
  Office_97::ShapeRange* Ungroup;
  this->Ungroup((Office_97::ShapeRange**)&Ungroup);
  return Ungroup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::ZOrder(Office_97::MsoZOrderCmd ZOrderCmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (int)ZOrderCmd /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Adjustments(Office_97::Adjustments** Adjustments/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Adjustments"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Adjustments**)Adjustments /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::Adjustments* __fastcall
ShapeRangeDispT<T>::get_Adjustments(void)
{
  Office_97::Adjustments* Adjustments;
  this->get_Adjustments((Office_97::Adjustments**)&Adjustments);
  return Adjustments;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_AutoShapeType(Office_97::MsoAutoShapeType* AutoShapeType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)AutoShapeType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoAutoShapeType __fastcall
ShapeRangeDispT<T>::get_AutoShapeType(void)
{
  Office_97::MsoAutoShapeType AutoShapeType;
  this->get_AutoShapeType((Office_97::MsoAutoShapeType*)&AutoShapeType);
  return AutoShapeType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_AutoShapeType(Office_97::MsoAutoShapeType AutoShapeType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoShapeType"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)AutoShapeType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_BlackWhiteMode(Office_97::MsoBlackWhiteMode* BlackWhiteMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)BlackWhiteMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoBlackWhiteMode __fastcall
ShapeRangeDispT<T>::get_BlackWhiteMode(void)
{
  Office_97::MsoBlackWhiteMode BlackWhiteMode;
  this->get_BlackWhiteMode((Office_97::MsoBlackWhiteMode*)&BlackWhiteMode);
  return BlackWhiteMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_BlackWhiteMode(Office_97::MsoBlackWhiteMode BlackWhiteMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlackWhiteMode"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)BlackWhiteMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Callout(Office_97::CalloutFormat** Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callout"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::CalloutFormat**)Callout /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::CalloutFormat* __fastcall
ShapeRangeDispT<T>::get_Callout(void)
{
  Office_97::CalloutFormat* Callout;
  this->get_Callout((Office_97::CalloutFormat**)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ConnectionSiteCount(int* ConnectionSiteCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSiteCount"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ConnectionSiteCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_ConnectionSiteCount(void)
{
  int ConnectionSiteCount;
  this->get_ConnectionSiteCount((int*)&ConnectionSiteCount);
  return ConnectionSiteCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Connector(Office_97::MsoTriState* Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connector"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Connector /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShapeRangeDispT<T>::get_Connector(void)
{
  Office_97::MsoTriState Connector;
  this->get_Connector((Office_97::MsoTriState*)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ConnectorFormat(Office_97::ConnectorFormat** ConnectorFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectorFormat"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ConnectorFormat**)ConnectorFormat /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ConnectorFormat* __fastcall
ShapeRangeDispT<T>::get_ConnectorFormat(void)
{
  Office_97::ConnectorFormat* ConnectorFormat;
  this->get_ConnectorFormat((Office_97::ConnectorFormat**)&ConnectorFormat);
  return ConnectorFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Fill(Office_97::FillFormat** Fill/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fill"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::FillFormat**)Fill /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::FillFormat* __fastcall
ShapeRangeDispT<T>::get_Fill(void)
{
  Office_97::FillFormat* Fill;
  this->get_Fill((Office_97::FillFormat**)&Fill);
  return Fill;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_GroupItems(Office_97::GroupShapes** GroupItems/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GroupItems"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::GroupShapes**)GroupItems /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::GroupShapes* __fastcall
ShapeRangeDispT<T>::get_GroupItems(void)
{
  Office_97::GroupShapes* GroupItems;
  this->get_GroupItems((Office_97::GroupShapes**)&GroupItems);
  return GroupItems;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Height(float* Height/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Height /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Height(void)
{
  float Height;
  this->get_Height((float*)&Height);
  return Height;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Height(float Height/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Height /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_HorizontalFlip(Office_97::MsoTriState* HorizontalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalFlip"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)HorizontalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShapeRangeDispT<T>::get_HorizontalFlip(void)
{
  Office_97::MsoTriState HorizontalFlip;
  this->get_HorizontalFlip((Office_97::MsoTriState*)&HorizontalFlip);
  return HorizontalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Left(float* Left/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Left /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Left(void)
{
  float Left;
  this->get_Left((float*)&Left);
  return Left;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Left(float Left/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Line(Office_97::LineFormat** Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Line"), DISPID(112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::LineFormat**)Line /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::LineFormat* __fastcall
ShapeRangeDispT<T>::get_Line(void)
{
  Office_97::LineFormat* Line;
  this->get_Line((Office_97::LineFormat**)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_LockAspectRatio(Office_97::MsoTriState* LockAspectRatio/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LockAspectRatio /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShapeRangeDispT<T>::get_LockAspectRatio(void)
{
  Office_97::MsoTriState LockAspectRatio;
  this->get_LockAspectRatio((Office_97::MsoTriState*)&LockAspectRatio);
  return LockAspectRatio;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_LockAspectRatio(Office_97::MsoTriState LockAspectRatio/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockAspectRatio"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (int)LockAspectRatio /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Name(BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ShapeRangeDispT<T>::get_Name(void)
{
  BSTR Name;
  this->get_Name((BSTR*)&Name);
  return Name;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Name(BSTR Name/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Nodes(Office_97::ShapeNodes** Nodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ShapeNodes**)Nodes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ShapeNodes* __fastcall
ShapeRangeDispT<T>::get_Nodes(void)
{
  Office_97::ShapeNodes* Nodes;
  this->get_Nodes((Office_97::ShapeNodes**)&Nodes);
  return Nodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Rotation(float* Rotation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Rotation /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Rotation(void)
{
  float Rotation;
  this->get_Rotation((float*)&Rotation);
  return Rotation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Rotation(float Rotation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Rotation"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Rotation /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_PictureFormat(Office_97::PictureFormat** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PictureFormat"), DISPID(118));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::PictureFormat**)Picture /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::PictureFormat* __fastcall
ShapeRangeDispT<T>::get_PictureFormat(void)
{
  Office_97::PictureFormat* Picture;
  this->get_PictureFormat((Office_97::PictureFormat**)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Shadow(Office_97::ShadowFormat** Shadow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(119));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ShadowFormat**)Shadow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ShadowFormat* __fastcall
ShapeRangeDispT<T>::get_Shadow(void)
{
  Office_97::ShadowFormat* Shadow;
  this->get_Shadow((Office_97::ShadowFormat**)&Shadow);
  return Shadow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_TextEffect(Office_97::TextEffectFormat** TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextEffect"), DISPID(120));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::TextEffectFormat**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::TextEffectFormat* __fastcall
ShapeRangeDispT<T>::get_TextEffect(void)
{
  Office_97::TextEffectFormat* TextEffect;
  this->get_TextEffect((Office_97::TextEffectFormat**)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_TextFrame(Office_97::TextFrame** TextFrame/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextFrame"), DISPID(121));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::TextFrame**)TextFrame /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::TextFrame* __fastcall
ShapeRangeDispT<T>::get_TextFrame(void)
{
  Office_97::TextFrame* TextFrame;
  this->get_TextFrame((Office_97::TextFrame**)&TextFrame);
  return TextFrame;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ThreeD(Office_97::ThreeDFormat** ThreeD/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThreeD"), DISPID(122));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ThreeDFormat**)ThreeD /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ThreeDFormat* __fastcall
ShapeRangeDispT<T>::get_ThreeD(void)
{
  Office_97::ThreeDFormat* ThreeD;
  this->get_ThreeD((Office_97::ThreeDFormat**)&ThreeD);
  return ThreeD;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Top(float* Top/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Top /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Top(void)
{
  float Top;
  this->get_Top((float*)&Top);
  return Top;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Top(float Top/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Top /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Type(Office_97::MsoShapeType* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(124));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Type /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoShapeType __fastcall
ShapeRangeDispT<T>::get_Type(void)
{
  Office_97::MsoShapeType Type;
  this->get_Type((Office_97::MsoShapeType*)&Type);
  return Type;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_VerticalFlip(Office_97::MsoTriState* VerticalFlip/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalFlip"), DISPID(125));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)VerticalFlip /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShapeRangeDispT<T>::get_VerticalFlip(void)
{
  Office_97::MsoTriState VerticalFlip;
  this->get_VerticalFlip((Office_97::MsoTriState*)&VerticalFlip);
  return VerticalFlip;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Vertices(VARIANT* Vertices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Vertices"), DISPID(126));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Vertices /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ShapeRangeDispT<T>::get_Vertices(void)
{
  VARIANT Vertices;
  this->get_Vertices((VARIANT*)&Vertices);
  return Vertices;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ShapeRangeDispT<T>::get_Visible(void)
{
  Office_97::MsoTriState Visible;
  this->get_Visible((Office_97::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Visible(Office_97::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Width(float* Width/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Width /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ShapeRangeDispT<T>::get_Width(void)
{
  float Width;
  this->get_Width((float*)&Width);
  return Width;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::set_Width(float Width/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = Width /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_ZOrderPosition(int* ZOrderPosition/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderPosition"), DISPID(129));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ZOrderPosition /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapeRangeDispT<T>::get_ZOrderPosition(void)
{
  int ZOrderPosition;
  this->get_ZOrderPosition((int*)&ZOrderPosition);
  return ZOrderPosition;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapeRangeDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapeRangeDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapeRangeDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  Shapes
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapesDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Count(int* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ShapesDispT<T>::get_Count(void)
{
  int Count;
  this->get_Count((int*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::Item(VARIANT Index/*[in]*/, Office_97::Shape** Item/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Item /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::Item(VARIANT Index/*[in]*/)
{
  Office_97::Shape* Item;
  this->Item(Index, (Office_97::Shape**)&Item);
  return Item;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get__NewEnum(LPUNKNOWN* _NewEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(_NewEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ShapesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN _NewEnum;
  this->get__NewEnum((LPUNKNOWN*)&_NewEnum);
  return _NewEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddCallout(Office_97::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                           Office_97::Shape** Callout/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCallout"), DISPID(10));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Callout /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::AddCallout(Office_97::MsoCalloutType Type/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Office_97::Shape* Callout;
  this->AddCallout(Type, Left, Top, Width, Height, (Office_97::Shape**)&Callout);
  return Callout;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddConnector(Office_97::MsoConnectorType Type/*[in]*/, float BeginX/*[in]*/, 
                             float BeginY/*[in]*/, float EndX/*[in]*/, float EndY/*[in]*/, 
                             Office_97::Shape** Connector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddConnector"), DISPID(11));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = BeginX /*[VT_R4:0]*/;
  _args[3] = BeginY /*[VT_R4:0]*/;
  _args[4] = EndX /*[VT_R4:0]*/;
  _args[5] = EndY /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Connector /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::AddConnector(Office_97::MsoConnectorType Type/*[in]*/, float BeginX/*[in]*/, 
                             float BeginY/*[in]*/, float EndX/*[in]*/, float EndY/*[in]*/)
{
  Office_97::Shape* Connector;
  this->AddConnector(Type, BeginX, BeginY, EndX, EndY, (Office_97::Shape**)&Connector);
  return Connector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddCurve(VARIANT SafeArrayOfPoints/*[in]*/, Office_97::Shape** Curve/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddCurve"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = SafeArrayOfPoints /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Curve /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::AddCurve(VARIANT SafeArrayOfPoints/*[in]*/)
{
  Office_97::Shape* Curve;
  this->AddCurve(SafeArrayOfPoints, (Office_97::Shape**)&Curve);
  return Curve;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddLabel(Office_97::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                         Office_97::Shape** Label/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLabel"), DISPID(13));
  TAutoArgs<5> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Label /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::AddLabel(Office_97::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Office_97::Shape* Label;
  this->AddLabel(Orientation, Left, Top, Width, Height, (Office_97::Shape**)&Label);
  return Label;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                        float EndY/*[in]*/, Office_97::Shape** Line/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLine"), DISPID(14));
  TAutoArgs<4> _args;
  _args[1] = BeginX /*[VT_R4:0]*/;
  _args[2] = BeginY /*[VT_R4:0]*/;
  _args[3] = EndX /*[VT_R4:0]*/;
  _args[4] = EndY /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Line /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::AddLine(float BeginX/*[in]*/, float BeginY/*[in]*/, float EndX/*[in]*/, 
                        float EndY/*[in]*/)
{
  Office_97::Shape* Line;
  this->AddLine(BeginX, BeginY, EndX, EndY, (Office_97::Shape**)&Line);
  return Line;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddPicture(BSTR FileName/*[in]*/, Office_97::MsoTriState LinkToFile/*[in]*/, 
                           Office_97::MsoTriState SaveWithDocument/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                           Office_97::Shape** Picture/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPicture"), DISPID(15));
  TAutoArgs<7> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)LinkToFile /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)SaveWithDocument /*[VT_USERDEFINED:0]*/;
  _args[4] = Left /*[VT_R4:0]*/;
  _args[5] = Top /*[VT_R4:0]*/;
  _args[6] = Width /*[VT_R4:0]*/;
  _args[7] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Picture /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::AddPicture(BSTR FileName/*[in]*/, Office_97::MsoTriState LinkToFile/*[in]*/, 
                           Office_97::MsoTriState SaveWithDocument/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Office_97::Shape* Picture;
  this->AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, (Office_97::Shape**)&Picture);
  return Picture;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/, 
                            Office_97::Shape** Polyline/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddPolyline"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = SafeArrayOfPoints /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Polyline /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::AddPolyline(VARIANT SafeArrayOfPoints/*[in]*/)
{
  Office_97::Shape* Polyline;
  this->AddPolyline(SafeArrayOfPoints, (Office_97::Shape**)&Polyline);
  return Polyline;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddShape(Office_97::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                         Office_97::Shape** Shape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddShape"), DISPID(17));
  TAutoArgs<5> _args;
  _args[1] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Shape /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::AddShape(Office_97::MsoAutoShapeType Type/*[in]*/, float Left/*[in]*/, 
                         float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Office_97::Shape* Shape;
  this->AddShape(Type, Left, Top, Width, Height, (Office_97::Shape**)&Shape);
  return Shape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTextEffect(Office_97::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                              BSTR Text/*[in]*/, BSTR FontName/*[in]*/, float FontSize/*[in]*/, 
                              Office_97::MsoTriState FontBold/*[in]*/, 
                              Office_97::MsoTriState FontItalic/*[in]*/, float Left/*[in]*/, 
                              float Top/*[in]*/, Office_97::Shape** TextEffect/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTextEffect"), DISPID(18));
  TAutoArgs<8> _args;
  _args[1] = (int)PresetTextEffect /*[VT_USERDEFINED:0]*/;
  _args[2] = Text /*[VT_BSTR:0]*/;
  _args[3] = FontName /*[VT_BSTR:0]*/;
  _args[4] = FontSize /*[VT_R4:0]*/;
  _args[5] = (int)FontBold /*[VT_USERDEFINED:0]*/;
  _args[6] = (int)FontItalic /*[VT_USERDEFINED:0]*/;
  _args[7] = Left /*[VT_R4:0]*/;
  _args[8] = Top /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)TextEffect /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::AddTextEffect(Office_97::MsoPresetTextEffect PresetTextEffect/*[in]*/, 
                              BSTR Text/*[in]*/, BSTR FontName/*[in]*/, float FontSize/*[in]*/, 
                              Office_97::MsoTriState FontBold/*[in]*/, 
                              Office_97::MsoTriState FontItalic/*[in]*/, float Left/*[in]*/, 
                              float Top/*[in]*/)
{
  Office_97::Shape* TextEffect;
  this->AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, (Office_97::Shape**)&TextEffect);
  return TextEffect;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::AddTextbox(Office_97::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/, 
                           Office_97::Shape** Textbox/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddTextbox"), DISPID(19));
  TAutoArgs<5> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Textbox /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::AddTextbox(Office_97::MsoTextOrientation Orientation/*[in]*/, float Left/*[in]*/, 
                           float Top/*[in]*/, float Width/*[in]*/, float Height/*[in]*/)
{
  Office_97::Shape* Textbox;
  this->AddTextbox(Orientation, Left, Top, Width, Height, (Office_97::Shape**)&Textbox);
  return Textbox;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::BuildFreeform(Office_97::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                              float Y1/*[in]*/, 
                              Office_97::FreeformBuilder** FreeformBuilder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BuildFreeform"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = (int)EditingType /*[VT_USERDEFINED:0]*/;
  _args[2] = X1 /*[VT_R4:0]*/;
  _args[3] = Y1 /*[VT_R4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::FreeformBuilder**)FreeformBuilder /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::FreeformBuilder* __fastcall
ShapesDispT<T>::BuildFreeform(Office_97::MsoEditingType EditingType/*[in]*/, float X1/*[in]*/, 
                              float Y1/*[in]*/)
{
  Office_97::FreeformBuilder* FreeformBuilder;
  this->BuildFreeform(EditingType, X1, Y1, (Office_97::FreeformBuilder**)&FreeformBuilder);
  return FreeformBuilder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::Range(VARIANT Index/*[in]*/, Office_97::ShapeRange** Range/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Range"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ShapeRange**)Range /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::ShapeRange* __fastcall
ShapesDispT<T>::Range(VARIANT Index/*[in]*/)
{
  Office_97::ShapeRange* Range;
  this->Range(Index, (Office_97::ShapeRange**)&Range);
  return Range;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::SelectAll()
{
  _TDispID _dispid(*this, OLETEXT("SelectAll"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Background(Office_97::Shape** Background/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Background"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Background /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::get_Background(void)
{
  Office_97::Shape* Background;
  this->get_Background((Office_97::Shape**)&Background);
  return Background;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Default(Office_97::Shape** Default/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Default"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::Shape**)Default /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::Shape* __fastcall
ShapesDispT<T>::get_Default(void)
{
  Office_97::Shape* Default;
  this->get_Default((Office_97::Shape**)&Default);
  return Default;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ShapesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ShapesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ShapesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  TextEffectFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C031F-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextEffectFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::ToggleVerticalText()
{
  _TDispID _dispid(*this, OLETEXT("ToggleVerticalText"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Alignment(Office_97::MsoTextEffectAlignment* Alignment/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Alignment /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTextEffectAlignment __fastcall
TextEffectFormatDispT<T>::get_Alignment(void)
{
  Office_97::MsoTextEffectAlignment Alignment;
  this->get_Alignment((Office_97::MsoTextEffectAlignment*)&Alignment);
  return Alignment;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Alignment(Office_97::MsoTextEffectAlignment Alignment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (int)Alignment /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontBold(Office_97::MsoTriState* FontBold/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FontBold /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_FontBold(void)
{
  Office_97::MsoTriState FontBold;
  this->get_FontBold((Office_97::MsoTriState*)&FontBold);
  return FontBold;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontBold(Office_97::MsoTriState FontBold/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontBold"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int)FontBold /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontItalic(Office_97::MsoTriState* FontItalic/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FontItalic /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_FontItalic(void)
{
  Office_97::MsoTriState FontItalic;
  this->get_FontItalic((Office_97::MsoTriState*)&FontItalic);
  return FontItalic;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontItalic(Office_97::MsoTriState FontItalic/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontItalic"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)FontItalic /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontName(BSTR* FontName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextEffectFormatDispT<T>::get_FontName(void)
{
  BSTR FontName;
  this->get_FontName((BSTR*)&FontName);
  return FontName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontName(BSTR FontName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontName"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = FontName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_FontSize(float* FontSize/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FontSize /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextEffectFormatDispT<T>::get_FontSize(void)
{
  float FontSize;
  this->get_FontSize((float*)&FontSize);
  return FontSize;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_FontSize(float FontSize/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FontSize"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = FontSize /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_KernedPairs(Office_97::MsoTriState* KernedPairs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KernedPairs"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)KernedPairs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_KernedPairs(void)
{
  Office_97::MsoTriState KernedPairs;
  this->get_KernedPairs((Office_97::MsoTriState*)&KernedPairs);
  return KernedPairs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_KernedPairs(Office_97::MsoTriState KernedPairs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KernedPairs"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)KernedPairs /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_NormalizedHeight(Office_97::MsoTriState* NormalizedHeight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NormalizedHeight"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)NormalizedHeight /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_NormalizedHeight(void)
{
  Office_97::MsoTriState NormalizedHeight;
  this->get_NormalizedHeight((Office_97::MsoTriState*)&NormalizedHeight);
  return NormalizedHeight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_NormalizedHeight(Office_97::MsoTriState NormalizedHeight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NormalizedHeight"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)NormalizedHeight /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_PresetShape(Office_97::MsoPresetTextEffectShape* PresetShape/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetShape"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetShape /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPresetTextEffectShape __fastcall
TextEffectFormatDispT<T>::get_PresetShape(void)
{
  Office_97::MsoPresetTextEffectShape PresetShape;
  this->get_PresetShape((Office_97::MsoPresetTextEffectShape*)&PresetShape);
  return PresetShape;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_PresetShape(Office_97::MsoPresetTextEffectShape PresetShape/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetShape"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetShape /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_PresetTextEffect(Office_97::MsoPresetTextEffect* Preset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextEffect"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Preset /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPresetTextEffect __fastcall
TextEffectFormatDispT<T>::get_PresetTextEffect(void)
{
  Office_97::MsoPresetTextEffect Preset;
  this->get_PresetTextEffect((Office_97::MsoPresetTextEffect*)&Preset);
  return Preset;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_PresetTextEffect(Office_97::MsoPresetTextEffect Preset/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetTextEffect"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int)Preset /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_RotatedChars(Office_97::MsoTriState* RotatedChars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedChars"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)RotatedChars /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
TextEffectFormatDispT<T>::get_RotatedChars(void)
{
  Office_97::MsoTriState RotatedChars;
  this->get_RotatedChars((Office_97::MsoTriState*)&RotatedChars);
  return RotatedChars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_RotatedChars(Office_97::MsoTriState RotatedChars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotatedChars"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int)RotatedChars /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Text(BSTR* Text/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Text /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
TextEffectFormatDispT<T>::get_Text(void)
{
  BSTR Text;
  this->get_Text((BSTR*)&Text);
  return Text;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Text(BSTR Text/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Tracking(float* Tracking/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tracking"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Tracking /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextEffectFormatDispT<T>::get_Tracking(void)
{
  float Tracking;
  this->get_Tracking((float*)&Tracking);
  return Tracking;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::set_Tracking(float Tracking/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Tracking"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = Tracking /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextEffectFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextEffectFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextEffectFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  TextFrame
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0320-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextFrameDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginBottom(float* MarginBottom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginBottom"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginBottom /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginBottom(void)
{
  float MarginBottom;
  this->get_MarginBottom((float*)&MarginBottom);
  return MarginBottom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginBottom(float MarginBottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginBottom"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = MarginBottom /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginLeft(float* MarginLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginLeft"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginLeft /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginLeft(void)
{
  float MarginLeft;
  this->get_MarginLeft((float*)&MarginLeft);
  return MarginLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginLeft(float MarginLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginLeft"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = MarginLeft /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginRight(float* MarginRight/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginRight"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginRight /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginRight(void)
{
  float MarginRight;
  this->get_MarginRight((float*)&MarginRight);
  return MarginRight;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginRight(float MarginRight/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginRight"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = MarginRight /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_MarginTop(float* MarginTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginTop"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MarginTop /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
TextFrameDispT<T>::get_MarginTop(void)
{
  float MarginTop;
  this->get_MarginTop((float*)&MarginTop);
  return MarginTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_MarginTop(float MarginTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarginTop"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = MarginTop /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Orientation(Office_97::MsoTextOrientation* Orientation/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Orientation /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTextOrientation __fastcall
TextFrameDispT<T>::get_Orientation(void)
{
  Office_97::MsoTextOrientation Orientation;
  this->get_Orientation((Office_97::MsoTextOrientation*)&Orientation);
  return Orientation;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::set_Orientation(Office_97::MsoTextOrientation Orientation/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Orientation"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int)Orientation /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
TextFrameDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
TextFrameDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
TextFrameDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  ThreeDFormat
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0321-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Parent(LPDISPATCH* Parent/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Parent /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ThreeDFormatDispT<T>::get_Parent(void)
{
  LPDISPATCH Parent;
  this->get_Parent((LPDISPATCH*)&Parent);
  return Parent;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::IncrementRotationX(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotationX"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::IncrementRotationY(float Increment/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IncrementRotationY"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Increment /*[VT_R4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::ResetRotation()
{
  _TDispID _dispid(*this, OLETEXT("ResetRotation"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::SetThreeDFormat(Office_97::MsoPresetThreeDFormat PresetThreeDFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetThreeDFormat"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetThreeDFormat /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::SetExtrusionDirection(Office_97::MsoPresetExtrusionDirection PresetExtrusionDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetExtrusionDirection"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetExtrusionDirection /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Depth(float* Depth/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Depth"), DISPID(100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Depth /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_Depth(void)
{
  float Depth;
  this->get_Depth((float*)&Depth);
  return Depth;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Depth(float Depth/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Depth"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = Depth /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColor(Office_97::ColorFormat** ExtrusionColor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColor"), DISPID(101));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::ColorFormat**)ExtrusionColor /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::ColorFormat* __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColor(void)
{
  Office_97::ColorFormat* ExtrusionColor;
  this->get_ExtrusionColor((Office_97::ColorFormat**)&ExtrusionColor);
  return ExtrusionColor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColorType(Office_97::MsoExtrusionColorType* ExtrusionColorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColorType"), DISPID(102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ExtrusionColorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoExtrusionColorType __fastcall
ThreeDFormatDispT<T>::get_ExtrusionColorType(void)
{
  Office_97::MsoExtrusionColorType ExtrusionColorType;
  this->get_ExtrusionColorType((Office_97::MsoExtrusionColorType*)&ExtrusionColorType);
  return ExtrusionColorType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_ExtrusionColorType(Office_97::MsoExtrusionColorType ExtrusionColorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ExtrusionColorType"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (int)ExtrusionColorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Perspective(Office_97::MsoTriState* Perspective/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Perspective /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ThreeDFormatDispT<T>::get_Perspective(void)
{
  Office_97::MsoTriState Perspective;
  this->get_Perspective((Office_97::MsoTriState*)&Perspective);
  return Perspective;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Perspective(Office_97::MsoTriState Perspective/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Perspective"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int)Perspective /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetExtrusionDirection(Office_97::MsoPresetExtrusionDirection* PresetExtrusionDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetExtrusionDirection"), DISPID(104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetExtrusionDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPresetExtrusionDirection __fastcall
ThreeDFormatDispT<T>::get_PresetExtrusionDirection(void)
{
  Office_97::MsoPresetExtrusionDirection PresetExtrusionDirection;
  this->get_PresetExtrusionDirection((Office_97::MsoPresetExtrusionDirection*)&PresetExtrusionDirection);
  return PresetExtrusionDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetLightingDirection(Office_97::MsoPresetLightingDirection* PresetLightingDirection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingDirection"), DISPID(105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetLightingDirection /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPresetLightingDirection __fastcall
ThreeDFormatDispT<T>::get_PresetLightingDirection(void)
{
  Office_97::MsoPresetLightingDirection PresetLightingDirection;
  this->get_PresetLightingDirection((Office_97::MsoPresetLightingDirection*)&PresetLightingDirection);
  return PresetLightingDirection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetLightingDirection(Office_97::MsoPresetLightingDirection PresetLightingDirection/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingDirection"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetLightingDirection /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetLightingSoftness(Office_97::MsoPresetLightingSoftness* PresetLightingSoftness/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingSoftness"), DISPID(106));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetLightingSoftness /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPresetLightingSoftness __fastcall
ThreeDFormatDispT<T>::get_PresetLightingSoftness(void)
{
  Office_97::MsoPresetLightingSoftness PresetLightingSoftness;
  this->get_PresetLightingSoftness((Office_97::MsoPresetLightingSoftness*)&PresetLightingSoftness);
  return PresetLightingSoftness;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetLightingSoftness(Office_97::MsoPresetLightingSoftness PresetLightingSoftness/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetLightingSoftness"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetLightingSoftness /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetMaterial(Office_97::MsoPresetMaterial* PresetMaterial/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetMaterial"), DISPID(107));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetMaterial /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPresetMaterial __fastcall
ThreeDFormatDispT<T>::get_PresetMaterial(void)
{
  Office_97::MsoPresetMaterial PresetMaterial;
  this->get_PresetMaterial((Office_97::MsoPresetMaterial*)&PresetMaterial);
  return PresetMaterial;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_PresetMaterial(Office_97::MsoPresetMaterial PresetMaterial/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetMaterial"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = (int)PresetMaterial /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_PresetThreeDFormat(Office_97::MsoPresetThreeDFormat* PresetThreeDFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PresetThreeDFormat"), DISPID(108));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)PresetThreeDFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoPresetThreeDFormat __fastcall
ThreeDFormatDispT<T>::get_PresetThreeDFormat(void)
{
  Office_97::MsoPresetThreeDFormat PresetThreeDFormat;
  this->get_PresetThreeDFormat((Office_97::MsoPresetThreeDFormat*)&PresetThreeDFormat);
  return PresetThreeDFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_RotationX(float* RotationX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationX"), DISPID(109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RotationX /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_RotationX(void)
{
  float RotationX;
  this->get_RotationX((float*)&RotationX);
  return RotationX;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_RotationX(float RotationX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationX"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = RotationX /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_RotationY(float* RotationY/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationY"), DISPID(110));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(RotationY /*[VT_R4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> float __fastcall
ThreeDFormatDispT<T>::get_RotationY(void)
{
  float RotationY;
  this->get_RotationY((float*)&RotationY);
  return RotationY;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_RotationY(float RotationY/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotationY"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = RotationY /*[VT_R4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Visible(Office_97::MsoTriState* Visible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(111));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Visible /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoTriState __fastcall
ThreeDFormatDispT<T>::get_Visible(void)
{
  Office_97::MsoTriState Visible;
  this->get_Visible((Office_97::MsoTriState*)&Visible);
  return Visible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::set_Visible(Office_97::MsoTriState Visible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = (int)Visible /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ThreeDFormatDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThreeDFormatDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ThreeDFormatDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  Assistant
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0322-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AssistantDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::Move(int xLeft/*[in]*/, int yTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<2> _args;
  _args[1] = xLeft /*[VT_INT:0]*/;
  _args[2] = yTop /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Top(int pyTop/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<1> _args;
  _args[1] = pyTop /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Top(int* pyTop/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(1610809346));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pyTop /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AssistantDispT<T>::get_Top(void)
{
  int pyTop;
  this->get_Top((int*)&pyTop);
  return pyTop;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Left(int pxLeft/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(DISPID_UNKNOWN/*[1610809348]*/));
  TAutoArgs<1> _args;
  _args[1] = pxLeft /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Left(int* pxLeft/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(1610809348));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pxLeft /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
AssistantDispT<T>::get_Left(void)
{
  int pxLeft;
  this->get_Left((int*)&pxLeft);
  return pxLeft;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::Help()
{
  _TDispID _dispid(*this, OLETEXT("Help"), DISPID(DISPID_UNKNOWN/*[1610809350]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::StartWizard(VARIANT_BOOL On/*[in]*/, BSTR Callback/*[in]*/, long PrivateX/*[in]*/
                               , VARIANT Animation/*[in,opt]*/, VARIANT CustomTeaser/*[in,opt]*/, 
                               VARIANT Top/*[in,opt]*/, VARIANT Left/*[in,opt]*/, 
                               VARIANT Bottom/*[in,opt]*/, VARIANT Right/*[in,opt]*/, 
                               long* plWizID/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartWizard"), DISPID(DISPID_UNKNOWN/*[1610809351]*/));
  TAutoArgs<9> _args;
  _args[1] = On /*[VT_BOOL:0]*/;
  _args[2] = Callback /*[VT_BSTR:0]*/;
  _args[3] = PrivateX /*[VT_I4:0]*/;
  _args[4] = Animation /*[VT_VARIANT:0]*/;
  _args[5] = CustomTeaser /*[VT_VARIANT:0]*/;
  _args[6] = Top /*[VT_VARIANT:0]*/;
  _args[7] = Left /*[VT_VARIANT:0]*/;
  _args[8] = Bottom /*[VT_VARIANT:0]*/;
  _args[9] = Right /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(plWizID /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
AssistantDispT<T>::StartWizard(VARIANT_BOOL On/*[in]*/, BSTR Callback/*[in]*/, long PrivateX/*[in]*/, 
                               VARIANT Animation/*[in,opt]*/, VARIANT CustomTeaser/*[in,opt]*/, 
                               VARIANT Top/*[in,opt]*/, VARIANT Left/*[in,opt]*/, 
                               VARIANT Bottom/*[in,opt]*/, VARIANT Right/*[in,opt]*/)
{
  long plWizID;
  this->StartWizard(On, Callback, PrivateX, Animation, CustomTeaser, Top, Left, Bottom, Right, (long*)&plWizID);
  return plWizID;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::EndWizard(long WizardID/*[in]*/, VARIANT_BOOL varfSuccess/*[in]*/, 
                             VARIANT Animation/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndWizard"), DISPID(DISPID_UNKNOWN/*[1610809352]*/));
  TAutoArgs<3> _args;
  _args[1] = WizardID /*[VT_I4:0]*/;
  _args[2] = varfSuccess /*[VT_BOOL:0]*/;
  _args[3] = Animation /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::ActivateWizard(long WizardID/*[in]*/, Office_97::MsoWizardActType act/*[in]*/, 
                                  VARIANT Animation/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivateWizard"), DISPID(DISPID_UNKNOWN/*[1610809353]*/));
  TAutoArgs<3> _args;
  _args[1] = WizardID /*[VT_I4:0]*/;
  _args[2] = (int)act /*[VT_USERDEFINED:0]*/;
  _args[3] = Animation /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::ResetTips()
{
  _TDispID _dispid(*this, OLETEXT("ResetTips"), DISPID(DISPID_UNKNOWN/*[1610809354]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_NewBalloon(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewBalloon"), DISPID(DISPID_UNKNOWN/*[1610809355]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AssistantDispT<T>::get_NewBalloon(void)
{
  LPDISPATCH ppidisp;
  this->get_NewBalloon((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_BalloonError(Office_97::MsoBalloonErrorType* pbne/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BalloonError"), DISPID(DISPID_UNKNOWN/*[1610809356]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pbne /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoBalloonErrorType __fastcall
AssistantDispT<T>::get_BalloonError(void)
{
  Office_97::MsoBalloonErrorType pbne;
  this->get_BalloonError((Office_97::MsoBalloonErrorType*)&pbne);
  return pbne;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Visible(VARIANT_BOOL* pvarfVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(DISPID_UNKNOWN/*[1610809357]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pvarfVisible;
  this->get_Visible((VARIANT_BOOL*)&pvarfVisible);
  return pvarfVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Visible(VARIANT_BOOL pvarfVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(1610809357));
  TAutoArgs<1> _args;
  _args[1] = pvarfVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Animation(Office_97::MsoAnimationType* pfca/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animation"), DISPID(DISPID_UNKNOWN/*[1610809359]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pfca /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoAnimationType __fastcall
AssistantDispT<T>::get_Animation(void)
{
  Office_97::MsoAnimationType pfca;
  this->get_Animation((Office_97::MsoAnimationType*)&pfca);
  return pfca;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Animation(Office_97::MsoAnimationType pfca/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animation"), DISPID(1610809359));
  TAutoArgs<1> _args;
  _args[1] = (int)pfca /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Reduced(VARIANT_BOOL* pvarfReduced/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reduced"), DISPID(DISPID_UNKNOWN/*[1610809361]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfReduced /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_Reduced(void)
{
  VARIANT_BOOL pvarfReduced;
  this->get_Reduced((VARIANT_BOOL*)&pvarfReduced);
  return pvarfReduced;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Reduced(VARIANT_BOOL pvarfReduced/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Reduced"), DISPID(1610809361));
  TAutoArgs<1> _args;
  _args[1] = pvarfReduced /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_AssistWithHelp(VARIANT_BOOL pvarfAssistWithHelp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithHelp"), DISPID(DISPID_UNKNOWN/*[1610809363]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfAssistWithHelp /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_AssistWithHelp(VARIANT_BOOL* pvarfAssistWithHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithHelp"), DISPID(1610809363));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfAssistWithHelp /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_AssistWithHelp(void)
{
  VARIANT_BOOL pvarfAssistWithHelp;
  this->get_AssistWithHelp((VARIANT_BOOL*)&pvarfAssistWithHelp);
  return pvarfAssistWithHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_AssistWithWizards(VARIANT_BOOL pvarfAssistWithWizards/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithWizards"), DISPID(DISPID_UNKNOWN/*[1610809365]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfAssistWithWizards /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_AssistWithWizards(VARIANT_BOOL* pvarfAssistWithWizards/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithWizards"), DISPID(1610809365));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfAssistWithWizards /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_AssistWithWizards(void)
{
  VARIANT_BOOL pvarfAssistWithWizards;
  this->get_AssistWithWizards((VARIANT_BOOL*)&pvarfAssistWithWizards);
  return pvarfAssistWithWizards;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_AssistWithAlerts(VARIANT_BOOL pvarfAssistWithAlerts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithAlerts"), DISPID(DISPID_UNKNOWN/*[1610809367]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfAssistWithAlerts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_AssistWithAlerts(VARIANT_BOOL* pvarfAssistWithAlerts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AssistWithAlerts"), DISPID(1610809367));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfAssistWithAlerts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_AssistWithAlerts(void)
{
  VARIANT_BOOL pvarfAssistWithAlerts;
  this->get_AssistWithAlerts((VARIANT_BOOL*)&pvarfAssistWithAlerts);
  return pvarfAssistWithAlerts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_MoveWhenInTheWay(VARIANT_BOOL pvarfMove/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveWhenInTheWay"), DISPID(DISPID_UNKNOWN/*[1610809369]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfMove /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_MoveWhenInTheWay(VARIANT_BOOL* pvarfMove/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MoveWhenInTheWay"), DISPID(1610809369));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfMove /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_MoveWhenInTheWay(void)
{
  VARIANT_BOOL pvarfMove;
  this->get_MoveWhenInTheWay((VARIANT_BOOL*)&pvarfMove);
  return pvarfMove;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_Sounds(VARIANT_BOOL pvarfSounds/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sounds"), DISPID(DISPID_UNKNOWN/*[1610809371]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfSounds /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Sounds(VARIANT_BOOL* pvarfSounds/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sounds"), DISPID(1610809371));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfSounds /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_Sounds(void)
{
  VARIANT_BOOL pvarfSounds;
  this->get_Sounds((VARIANT_BOOL*)&pvarfSounds);
  return pvarfSounds;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_FeatureTips(VARIANT_BOOL pvarfFeatures/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeatureTips"), DISPID(DISPID_UNKNOWN/*[1610809373]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfFeatures /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_FeatureTips(VARIANT_BOOL* pvarfFeatures/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeatureTips"), DISPID(1610809373));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfFeatures /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_FeatureTips(void)
{
  VARIANT_BOOL pvarfFeatures;
  this->get_FeatureTips((VARIANT_BOOL*)&pvarfFeatures);
  return pvarfFeatures;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_MouseTips(VARIANT_BOOL pvarfMouse/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseTips"), DISPID(DISPID_UNKNOWN/*[1610809375]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfMouse /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_MouseTips(VARIANT_BOOL* pvarfMouse/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseTips"), DISPID(1610809375));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfMouse /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_MouseTips(void)
{
  VARIANT_BOOL pvarfMouse;
  this->get_MouseTips((VARIANT_BOOL*)&pvarfMouse);
  return pvarfMouse;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_KeyboardShortcutTips(VARIANT_BOOL pvarfKeyboardShortcuts/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardShortcutTips"), DISPID(DISPID_UNKNOWN/*[1610809377]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfKeyboardShortcuts /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_KeyboardShortcutTips(VARIANT_BOOL* pvarfKeyboardShortcuts/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("KeyboardShortcutTips"), DISPID(1610809377));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfKeyboardShortcuts /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_KeyboardShortcutTips(void)
{
  VARIANT_BOOL pvarfKeyboardShortcuts;
  this->get_KeyboardShortcutTips((VARIANT_BOOL*)&pvarfKeyboardShortcuts);
  return pvarfKeyboardShortcuts;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_HighPriorityTips(VARIANT_BOOL pvarfHighPriorityTips/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HighPriorityTips"), DISPID(DISPID_UNKNOWN/*[1610809379]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfHighPriorityTips /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_HighPriorityTips(VARIANT_BOOL* pvarfHighPriorityTips/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HighPriorityTips"), DISPID(1610809379));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfHighPriorityTips /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_HighPriorityTips(void)
{
  VARIANT_BOOL pvarfHighPriorityTips;
  this->get_HighPriorityTips((VARIANT_BOOL*)&pvarfHighPriorityTips);
  return pvarfHighPriorityTips;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_TipOfDay(VARIANT_BOOL pvarfTipOfDay/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TipOfDay"), DISPID(DISPID_UNKNOWN/*[1610809381]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfTipOfDay /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_TipOfDay(VARIANT_BOOL* pvarfTipOfDay/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TipOfDay"), DISPID(1610809381));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfTipOfDay /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_TipOfDay(void)
{
  VARIANT_BOOL pvarfTipOfDay;
  this->get_TipOfDay((VARIANT_BOOL*)&pvarfTipOfDay);
  return pvarfTipOfDay;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_GuessHelp(VARIANT_BOOL pvarfGuessHelp/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GuessHelp"), DISPID(DISPID_UNKNOWN/*[1610809383]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfGuessHelp /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_GuessHelp(VARIANT_BOOL* pvarfGuessHelp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GuessHelp"), DISPID(1610809383));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfGuessHelp /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_GuessHelp(void)
{
  VARIANT_BOOL pvarfGuessHelp;
  this->get_GuessHelp((VARIANT_BOOL*)&pvarfGuessHelp);
  return pvarfGuessHelp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_SearchWhenProgramming(VARIANT_BOOL pvarfSearchInProgram/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchWhenProgramming"), DISPID(DISPID_UNKNOWN/*[1610809385]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfSearchInProgram /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_SearchWhenProgramming(VARIANT_BOOL* pvarfSearchInProgram/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchWhenProgramming"), DISPID(1610809385));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfSearchInProgram /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
AssistantDispT<T>::get_SearchWhenProgramming(void)
{
  VARIANT_BOOL pvarfSearchInProgram;
  this->get_SearchWhenProgramming((VARIANT_BOOL*)&pvarfSearchInProgram);
  return pvarfSearchInProgram;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Item(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AssistantDispT<T>::get_Item(void)
{
  BSTR pbstrName;
  this->get_Item((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_FileName(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(DISPID_UNKNOWN/*[1610809388]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AssistantDispT<T>::get_FileName(void)
{
  BSTR pbstr;
  this->get_FileName((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::set_FileName(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(1610809388));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809390]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
AssistantDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
AssistantDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
AssistantDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
AssistantDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  Balloon
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0324-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Checkboxes(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checkboxes"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonDispT<T>::get_Checkboxes(void)
{
  LPDISPATCH ppidisp;
  this->get_Checkboxes((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Labels(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Labels"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonDispT<T>::get_Labels(void)
{
  LPDISPATCH ppidisp;
  this->get_Labels((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_BalloonType(Office_97::MsoBalloonType pbty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BalloonType"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pbty /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_BalloonType(Office_97::MsoBalloonType* pbty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BalloonType"), DISPID(1610809347));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pbty /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoBalloonType __fastcall
BalloonDispT<T>::get_BalloonType(void)
{
  Office_97::MsoBalloonType pbty;
  this->get_BalloonType((Office_97::MsoBalloonType*)&pbty);
  return pbty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Icon(Office_97::MsoIconType picn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(DISPID_UNKNOWN/*[1610809349]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)picn /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Icon(Office_97::MsoIconType* picn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Icon"), DISPID(1610809349));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)picn /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoIconType __fastcall
BalloonDispT<T>::get_Icon(void)
{
  Office_97::MsoIconType picn;
  this->get_Icon((Office_97::MsoIconType*)&picn);
  return picn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Heading(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Heading"), DISPID(DISPID_UNKNOWN/*[1610809351]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Heading(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Heading"), DISPID(1610809351));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonDispT<T>::get_Heading(void)
{
  BSTR pbstr;
  this->get_Heading((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Text(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610809353]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Text(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1610809353));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonDispT<T>::get_Text(void)
{
  BSTR pbstr;
  this->get_Text((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Mode(Office_97::MsoModeType pmd/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mode"), DISPID(DISPID_UNKNOWN/*[1610809355]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pmd /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Mode(Office_97::MsoModeType* pmd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Mode"), DISPID(1610809355));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pmd /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoModeType __fastcall
BalloonDispT<T>::get_Mode(void)
{
  Office_97::MsoModeType pmd;
  this->get_Mode((Office_97::MsoModeType*)&pmd);
  return pmd;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Animation(Office_97::MsoAnimationType pfca/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animation"), DISPID(DISPID_UNKNOWN/*[1610809357]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)pfca /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Animation(Office_97::MsoAnimationType* pfca/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Animation"), DISPID(1610809357));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pfca /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoAnimationType __fastcall
BalloonDispT<T>::get_Animation(void)
{
  Office_97::MsoAnimationType pfca;
  this->get_Animation((Office_97::MsoAnimationType*)&pfca);
  return pfca;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Button(Office_97::MsoButtonSetType psbs/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Button"), DISPID(DISPID_UNKNOWN/*[1610809359]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)psbs /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Button(Office_97::MsoButtonSetType* psbs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Button"), DISPID(1610809359));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)psbs /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoButtonSetType __fastcall
BalloonDispT<T>::get_Button(void)
{
  Office_97::MsoButtonSetType psbs;
  this->get_Button((Office_97::MsoButtonSetType*)&psbs);
  return psbs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Callback(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callback"), DISPID(DISPID_UNKNOWN/*[1610809361]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Callback(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Callback"), DISPID(1610809361));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonDispT<T>::get_Callback(void)
{
  BSTR pbstr;
  this->get_Callback((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::set_Private(long plPrivate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Private"), DISPID(DISPID_UNKNOWN/*[1610809363]*/));
  TAutoArgs<1> _args;
  _args[1] = plPrivate /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Private(long* plPrivate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Private"), DISPID(1610809363));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plPrivate /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonDispT<T>::get_Private(void)
{
  long plPrivate;
  this->get_Private((long*)&plPrivate);
  return plPrivate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::SetAvoidRectangle(int Left/*[in]*/, int Top/*[in]*/, int Right/*[in]*/, 
                                   int Bottom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAvoidRectangle"), DISPID(DISPID_UNKNOWN/*[1610809365]*/));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_INT:0]*/;
  _args[2] = Top /*[VT_INT:0]*/;
  _args[3] = Right /*[VT_INT:0]*/;
  _args[4] = Bottom /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809366]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::Show(Office_97::MsoBalloonButtonType* pibtn/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Show"), DISPID(DISPID_UNKNOWN/*[1610809367]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pibtn /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Office_97::MsoBalloonButtonType __fastcall
BalloonDispT<T>::Show(void)
{
  Office_97::MsoBalloonButtonType pibtn;
  this->Show((Office_97::MsoBalloonButtonType*)&pibtn);
  return pibtn;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(DISPID_UNKNOWN/*[1610809368]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  BalloonCheckboxes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0326-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonCheckboxesDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonCheckboxesDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Item(int Index/*[in]*/, LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonCheckboxesDispT<T>::get_Item(int Index/*[in]*/)
{
  LPDISPATCH ppidisp;
  this->get_Item(Index, (LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Count(int* pccbx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pccbx /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
BalloonCheckboxesDispT<T>::get_Count(void)
{
  int pccbx;
  this->get_Count((int*)&pccbx);
  return pccbx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::set_Count(int pccbx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1610809347));
  TAutoArgs<1> _args;
  _args[1] = pccbx /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
BalloonCheckboxesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonCheckboxesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonCheckboxesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  BalloonCheckbox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0328-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Item(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonCheckboxDispT<T>::get_Item(void)
{
  BSTR pbstrName;
  this->get_Item((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonCheckboxDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonCheckboxDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::set_Checked(VARIANT_BOOL pvarfChecked/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = pvarfChecked /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Checked(VARIANT_BOOL* pvarfChecked/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checked"), DISPID(1610809347));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvarfChecked /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
BalloonCheckboxDispT<T>::get_Checked(void)
{
  VARIANT_BOOL pvarfChecked;
  this->get_Checked((VARIANT_BOOL*)&pvarfChecked);
  return pvarfChecked;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::set_Text(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610809349]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Text(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1610809349));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonCheckboxDispT<T>::get_Text(void)
{
  BSTR pbstr;
  this->get_Text((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonCheckboxDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonCheckboxDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonCheckboxDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  BalloonLabels
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C032E-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonLabelsDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonLabelsDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Item(int Index/*[in]*/, LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonLabelsDispT<T>::get_Item(int Index/*[in]*/)
{
  LPDISPATCH ppidisp;
  this->get_Item(Index, (LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Count(int* pcwz/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pcwz /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
BalloonLabelsDispT<T>::get_Count(void)
{
  int pcwz;
  this->get_Count((int*)&pcwz);
  return pcwz;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::set_Count(int pcwz/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1610809347));
  TAutoArgs<1> _args;
  _args[1] = pcwz /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get__NewEnum(LPUNKNOWN* ppienum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppienum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
BalloonLabelsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppienum;
  this->get__NewEnum((LPUNKNOWN*)&ppienum);
  return ppienum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonLabelsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonLabelsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  BalloonLabel
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0330-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Item(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonLabelDispT<T>::get_Item(void)
{
  BSTR pbstrName;
  this->get_Item((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonLabelDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Parent(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(DISPID_UNKNOWN/*[1610809346]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonLabelDispT<T>::get_Parent(void)
{
  LPDISPATCH ppidisp;
  this->get_Parent((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::set_Text(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610809347]*/));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Text(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1610809347));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
BalloonLabelDispT<T>::get_Text(void)
{
  BSTR pbstr;
  this->get_Text((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
BalloonLabelDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
BalloonLabelDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
BalloonLabelDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  IFoundFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0338-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFoundFilesDispT<T>::get_Item(int Index/*[in]*/, BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFoundFilesDispT<T>::get_Item(int Index/*[in]*/)
{
  BSTR pbstr;
  this->get_Item(Index, (BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFoundFilesDispT<T>::get_Count(int* pCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pCount /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IFoundFilesDispT<T>::get_Count(void)
{
  int pCount;
  this->get_Count((int*)&pCount);
  return pCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFoundFilesDispT<T>::get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
IFoundFilesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunkEnum;
  this->get__NewEnum((LPUNKNOWN*)&ppunkEnum);
  return ppunkEnum;
}

// *********************************************************************//
// DispIntf:  IFind
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0337-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_SearchPath(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchPath"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_SearchPath(void)
{
  BSTR pbstr;
  this->get_SearchPath((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Name(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Name(void)
{
  BSTR pbstr;
  this->get_Name((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_SubDir(VARIANT_BOOL* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubDir"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFindDispT<T>::get_SubDir(void)
{
  VARIANT_BOOL retval;
  this->get_SubDir((VARIANT_BOOL*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Title(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Title(void)
{
  BSTR pbstr;
  this->get_Title((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Author(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Author"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Author(void)
{
  BSTR pbstr;
  this->get_Author((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Keywords(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Keywords"), DISPID(DISPID_UNKNOWN/*[1610743813]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Keywords(void)
{
  BSTR pbstr;
  this->get_Keywords((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Subject(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subject"), DISPID(DISPID_UNKNOWN/*[1610743814]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Subject(void)
{
  BSTR pbstr;
  this->get_Subject((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Options(Office_97::MsoFileFindOptions* penmOptions/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Options"), DISPID(DISPID_UNKNOWN/*[1610743815]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penmOptions /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoFileFindOptions __fastcall
IFindDispT<T>::get_Options(void)
{
  Office_97::MsoFileFindOptions penmOptions;
  this->get_Options((Office_97::MsoFileFindOptions*)&penmOptions);
  return penmOptions;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_MatchCase(VARIANT_BOOL* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchCase"), DISPID(DISPID_UNKNOWN/*[1610743816]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFindDispT<T>::get_MatchCase(void)
{
  VARIANT_BOOL retval;
  this->get_MatchCase((VARIANT_BOOL*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Text(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(DISPID_UNKNOWN/*[1610743817]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_Text(void)
{
  BSTR pbstr;
  this->get_Text((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_PatternMatch(VARIANT_BOOL* retval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PatternMatch"), DISPID(DISPID_UNKNOWN/*[1610743818]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(retval /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IFindDispT<T>::get_PatternMatch(void)
{
  VARIANT_BOOL retval;
  this->get_PatternMatch((VARIANT_BOOL*)&retval);
  return retval;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_DateSavedFrom(VARIANT* pdatSavedFrom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateSavedFrom"), DISPID(DISPID_UNKNOWN/*[1610743819]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdatSavedFrom /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IFindDispT<T>::get_DateSavedFrom(void)
{
  VARIANT pdatSavedFrom;
  this->get_DateSavedFrom((VARIANT*)&pdatSavedFrom);
  return pdatSavedFrom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_DateSavedTo(VARIANT* pdatSavedTo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateSavedTo"), DISPID(DISPID_UNKNOWN/*[1610743820]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdatSavedTo /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IFindDispT<T>::get_DateSavedTo(void)
{
  VARIANT pdatSavedTo;
  this->get_DateSavedTo((VARIANT*)&pdatSavedTo);
  return pdatSavedTo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_SavedBy(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SavedBy"), DISPID(DISPID_UNKNOWN/*[1610743821]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IFindDispT<T>::get_SavedBy(void)
{
  BSTR pbstr;
  this->get_SavedBy((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_DateCreatedFrom(VARIANT* pdatCreatedFrom/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateCreatedFrom"), DISPID(DISPID_UNKNOWN/*[1610743822]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdatCreatedFrom /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IFindDispT<T>::get_DateCreatedFrom(void)
{
  VARIANT pdatCreatedFrom;
  this->get_DateCreatedFrom((VARIANT*)&pdatCreatedFrom);
  return pdatCreatedFrom;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_DateCreatedTo(VARIANT* pdatCreatedTo/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateCreatedTo"), DISPID(DISPID_UNKNOWN/*[1610743823]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pdatCreatedTo /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
IFindDispT<T>::get_DateCreatedTo(void)
{
  VARIANT pdatCreatedTo;
  this->get_DateCreatedTo((VARIANT*)&pdatCreatedTo);
  return pdatCreatedTo;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_View(Office_97::MsoFileFindView* penmView/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(DISPID_UNKNOWN/*[1610743824]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penmView /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoFileFindView __fastcall
IFindDispT<T>::get_View(void)
{
  Office_97::MsoFileFindView penmView;
  this->get_View((Office_97::MsoFileFindView*)&penmView);
  return penmView;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_SortBy(Office_97::MsoFileFindSortBy* penmSortBy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortBy"), DISPID(DISPID_UNKNOWN/*[1610743825]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penmSortBy /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoFileFindSortBy __fastcall
IFindDispT<T>::get_SortBy(void)
{
  Office_97::MsoFileFindSortBy penmSortBy;
  this->get_SortBy((Office_97::MsoFileFindSortBy*)&penmSortBy);
  return penmSortBy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_ListBy(Office_97::MsoFileFindListBy* penmListBy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListBy"), DISPID(DISPID_UNKNOWN/*[1610743826]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)penmListBy /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoFileFindListBy __fastcall
IFindDispT<T>::get_ListBy(void)
{
  Office_97::MsoFileFindListBy penmListBy;
  this->get_ListBy((Office_97::MsoFileFindListBy*)&penmListBy);
  return penmListBy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_SelectedFile(int* pintSelectedFile/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedFile"), DISPID(DISPID_UNKNOWN/*[1610743827]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pintSelectedFile /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
IFindDispT<T>::get_SelectedFile(void)
{
  int pintSelectedFile;
  this->get_SelectedFile((int*)&pintSelectedFile);
  return pintSelectedFile;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_Results(Office_97::IFoundFiles** pdisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Results"), DISPID(DISPID_UNKNOWN/*[1610743828]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::IFoundFiles**)pdisp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::IFoundFiles* __fastcall
IFindDispT<T>::get_Results(void)
{
  Office_97::IFoundFiles* pdisp;
  this->get_Results((Office_97::IFoundFiles**)&pdisp);
  return pdisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::Show(int* pRows/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Show"), DISPID(DISPID_UNKNOWN/*[1610743829]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRows /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
IFindDispT<T>::Show(void)
{
  int pRows;
  this->Show((int*)&pRows);
  return pRows;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_SearchPath(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchPath"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Name(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1610743809));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_SubDir(VARIANT_BOOL retval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubDir"), DISPID(1610743810));
  TAutoArgs<1> _args;
  _args[1] = retval /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Title(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(1610743811));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Author(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Author"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Keywords(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Keywords"), DISPID(1610743813));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Subject(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subject"), DISPID(1610743814));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Options(Office_97::MsoFileFindOptions penmOptions/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Options"), DISPID(1610743815));
  TAutoArgs<1> _args;
  _args[1] = (int)penmOptions /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_MatchCase(VARIANT_BOOL retval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchCase"), DISPID(1610743816));
  TAutoArgs<1> _args;
  _args[1] = retval /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_Text(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(1610743817));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_PatternMatch(VARIANT_BOOL retval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PatternMatch"), DISPID(1610743818));
  TAutoArgs<1> _args;
  _args[1] = retval /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_DateSavedFrom(VARIANT pdatSavedFrom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateSavedFrom"), DISPID(1610743819));
  TAutoArgs<1> _args;
  _args[1] = pdatSavedFrom /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_DateSavedTo(VARIANT pdatSavedTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateSavedTo"), DISPID(1610743820));
  TAutoArgs<1> _args;
  _args[1] = pdatSavedTo /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_SavedBy(BSTR pbstr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SavedBy"), DISPID(1610743821));
  TAutoArgs<1> _args;
  _args[1] = pbstr /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_DateCreatedFrom(VARIANT pdatCreatedFrom/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateCreatedFrom"), DISPID(1610743822));
  TAutoArgs<1> _args;
  _args[1] = pdatCreatedFrom /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_DateCreatedTo(VARIANT pdatCreatedTo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DateCreatedTo"), DISPID(1610743823));
  TAutoArgs<1> _args;
  _args[1] = pdatCreatedTo /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_View(Office_97::MsoFileFindView penmView/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("View"), DISPID(1610743824));
  TAutoArgs<1> _args;
  _args[1] = (int)penmView /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_SortBy(Office_97::MsoFileFindSortBy penmSortBy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortBy"), DISPID(1610743825));
  TAutoArgs<1> _args;
  _args[1] = (int)penmSortBy /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_ListBy(Office_97::MsoFileFindListBy penmListBy/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListBy"), DISPID(1610743826));
  TAutoArgs<1> _args;
  _args[1] = (int)penmListBy /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_SelectedFile(int pintSelectedFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedFile"), DISPID(1610743827));
  TAutoArgs<1> _args;
  _args[1] = pintSelectedFile /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::Execute()
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(DISPID_UNKNOWN/*[1610743850]*/));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::Load(BSTR bstrQueryName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Load"), DISPID(DISPID_UNKNOWN/*[1610743851]*/));
  TAutoArgs<1> _args;
  _args[1] = bstrQueryName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::Save(BSTR bstrQueryName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Save"), DISPID(DISPID_UNKNOWN/*[1610743852]*/));
  TAutoArgs<1> _args;
  _args[1] = bstrQueryName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::Delete(BSTR bstrQueryName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610743853]*/));
  TAutoArgs<1> _args;
  _args[1] = bstrQueryName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::get_FileType(long* plFileType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileType"), DISPID(DISPID_UNKNOWN/*[1610743854]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plFileType /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IFindDispT<T>::get_FileType(void)
{
  long plFileType;
  this->get_FileType((long*)&plFileType);
  return plFileType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IFindDispT<T>::set_FileType(long plFileType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileType"), DISPID(1610743854));
  TAutoArgs<1> _args;
  _args[1] = plFileType /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  FoundFiles
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0331-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FoundFilesDispT<T>::get_Item(int Index/*[in]*/, BSTR* pbstrFile/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr(pbstrFile /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FoundFilesDispT<T>::get_Item(int Index/*[in]*/)
{
  BSTR pbstrFile;
  this->get_Item(Index, (BSTR*)&pbstrFile);
  return pbstrFile;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FoundFilesDispT<T>::get_Count(long* pc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FoundFilesDispT<T>::get_Count(void)
{
  long pc;
  this->get_Count((long*)&pc);
  return pc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FoundFilesDispT<T>::get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FoundFilesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunkEnum;
  this->get__NewEnum((LPUNKNOWN*)&ppunkEnum);
  return ppunkEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FoundFilesDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FoundFilesDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FoundFilesDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FoundFilesDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  PropertyTest
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {000C0333-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Name(BSTR* pbstrRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PropertyTestDispT<T>::get_Name(void)
{
  BSTR pbstrRetVal;
  this->get_Name((BSTR*)&pbstrRetVal);
  return pbstrRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Condition(Office_97::MsoCondition* pConditionRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Condition"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pConditionRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoCondition __fastcall
PropertyTestDispT<T>::get_Condition(void)
{
  Office_97::MsoCondition pConditionRetVal;
  this->get_Condition((Office_97::MsoCondition*)&pConditionRetVal);
  return pConditionRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Value(VARIANT* pvargRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvargRetVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PropertyTestDispT<T>::get_Value(void)
{
  VARIANT pvargRetVal;
  this->get_Value((VARIANT*)&pvargRetVal);
  return pvargRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_SecondValue(VARIANT* pvargRetVal2/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SecondValue"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvargRetVal2 /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PropertyTestDispT<T>::get_SecondValue(void)
{
  VARIANT pvargRetVal2;
  this->get_SecondValue((VARIANT*)&pvargRetVal2);
  return pvargRetVal2;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Connector(Office_97::MsoConnector* pConnector/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Connector"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pConnector /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoConnector __fastcall
PropertyTestDispT<T>::get_Connector(void)
{
  Office_97::MsoConnector pConnector;
  this->get_Connector((Office_97::MsoConnector*)&pConnector);
  return pConnector;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PropertyTestDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PropertyTestDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  PropertyTests
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0334-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::get_Item(int Index/*[in]*/, 
                                Office_97::PropertyTest** ppIDocProp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::PropertyTest**)ppIDocProp /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::PropertyTest* __fastcall
PropertyTestsDispT<T>::get_Item(int Index/*[in]*/)
{
  Office_97::PropertyTest* ppIDocProp;
  this->get_Item(Index, (Office_97::PropertyTest**)&ppIDocProp);
  return ppIDocProp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::get_Count(long* pc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pc /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PropertyTestsDispT<T>::get_Count(void)
{
  long pc;
  this->get_Count((long*)&pc);
  return pc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::Add(BSTR Name/*[in]*/, Office_97::MsoCondition Condition/*[in]*/, 
                           VARIANT Value/*[in,opt]*/, VARIANT SecondValue/*[in,opt]*/, 
                           Office_97::MsoConnector Connector/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(5));
  TAutoArgs<5> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)Condition /*[VT_USERDEFINED:0]*/;
  _args[3] = Value /*[VT_VARIANT:0]*/;
  _args[4] = SecondValue /*[VT_VARIANT:0]*/;
  _args[5] = (int)Connector /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::Remove(int Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_INT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::get__NewEnum(LPUNKNOWN* ppunkEnum/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkEnum /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PropertyTestsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppunkEnum;
  this->get__NewEnum((LPUNKNOWN*)&ppunkEnum);
  return ppunkEnum;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PropertyTestsDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertyTestsDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PropertyTestsDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

// *********************************************************************//
// DispIntf:  FileSearch
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {000C0332-0000-0000-C000-000000000046}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_SearchSubFolders(VARIANT_BOOL* SearchSubFoldersRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchSubFolders"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(SearchSubFoldersRetVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FileSearchDispT<T>::get_SearchSubFolders(void)
{
  VARIANT_BOOL SearchSubFoldersRetVal;
  this->get_SearchSubFolders((VARIANT_BOOL*)&SearchSubFoldersRetVal);
  return SearchSubFoldersRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_SearchSubFolders(VARIANT_BOOL SearchSubFoldersRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchSubFolders"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = SearchSubFoldersRetVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_MatchTextExactly(VARIANT_BOOL* MatchTextRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchTextExactly"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MatchTextRetVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FileSearchDispT<T>::get_MatchTextExactly(void)
{
  VARIANT_BOOL MatchTextRetVal;
  this->get_MatchTextExactly((VARIANT_BOOL*)&MatchTextRetVal);
  return MatchTextRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_MatchTextExactly(VARIANT_BOOL MatchTextRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchTextExactly"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = MatchTextRetVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_MatchAllWordForms(VARIANT_BOOL* MatchAllWordFormsRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchAllWordForms"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(MatchAllWordFormsRetVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
FileSearchDispT<T>::get_MatchAllWordForms(void)
{
  VARIANT_BOOL MatchAllWordFormsRetVal;
  this->get_MatchAllWordForms((VARIANT_BOOL*)&MatchAllWordFormsRetVal);
  return MatchAllWordFormsRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_MatchAllWordForms(VARIANT_BOOL MatchAllWordFormsRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MatchAllWordForms"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = MatchAllWordFormsRetVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_FileName(BSTR* FileNameRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FileNameRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileSearchDispT<T>::get_FileName(void)
{
  BSTR FileNameRetVal;
  this->get_FileName((BSTR*)&FileNameRetVal);
  return FileNameRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_FileName(BSTR FileNameRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileName"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FileNameRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_FileType(Office_97::MsoFileType* FileTypeRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileType"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)FileTypeRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoFileType __fastcall
FileSearchDispT<T>::get_FileType(void)
{
  Office_97::MsoFileType FileTypeRetVal;
  this->get_FileType((Office_97::MsoFileType*)&FileTypeRetVal);
  return FileTypeRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_FileType(Office_97::MsoFileType FileTypeRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileType"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)FileTypeRetVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_LastModified(Office_97::MsoLastModified* LastModifiedRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastModified"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)LastModifiedRetVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::MsoLastModified __fastcall
FileSearchDispT<T>::get_LastModified(void)
{
  Office_97::MsoLastModified LastModifiedRetVal;
  this->get_LastModified((Office_97::MsoLastModified*)&LastModifiedRetVal);
  return LastModifiedRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_LastModified(Office_97::MsoLastModified LastModifiedRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastModified"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)LastModifiedRetVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_TextOrProperty(BSTR* TextOrProperty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextOrProperty"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(TextOrProperty /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileSearchDispT<T>::get_TextOrProperty(void)
{
  BSTR TextOrProperty;
  this->get_TextOrProperty((BSTR*)&TextOrProperty);
  return TextOrProperty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_TextOrProperty(BSTR TextOrProperty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TextOrProperty"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = TextOrProperty /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_LookIn(BSTR* LookInRetVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LookIn"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(LookInRetVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FileSearchDispT<T>::get_LookIn(void)
{
  BSTR LookInRetVal;
  this->get_LookIn((BSTR*)&LookInRetVal);
  return LookInRetVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::set_LookIn(BSTR LookInRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LookIn"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = LookInRetVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::Execute(Office_97::MsoSortBy SortBy/*[in,def,opt]*/, 
                            Office_97::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                            VARIANT_BOOL AlwaysAccurate/*[in,def,opt]*/, int* pRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Execute"), DISPID(9));
  TAutoArgs<3> _args;
  _args[1] = (int)SortBy /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)SortOrder /*[VT_USERDEFINED:0]*/;
  _args[3] = AlwaysAccurate /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(pRet /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
FileSearchDispT<T>::Execute(Office_97::MsoSortBy SortBy/*[in,def,opt]*/, 
                            Office_97::MsoSortOrder SortOrder/*[in,def,opt]*/, 
                            VARIANT_BOOL AlwaysAccurate/*[in,def,opt]*/)
{
  int pRet;
  this->Execute(SortBy, SortOrder, AlwaysAccurate, (int*)&pRet);
  return pRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::NewSearch()
{
  _TDispID _dispid(*this, OLETEXT("NewSearch"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_FoundFiles(Office_97::FoundFiles** FoundFilesRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FoundFiles"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::FoundFiles**)FoundFilesRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::FoundFiles* __fastcall
FileSearchDispT<T>::get_FoundFiles(void)
{
  Office_97::FoundFiles* FoundFilesRet;
  this->get_FoundFiles((Office_97::FoundFiles**)&FoundFilesRet);
  return FoundFilesRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_PropertyTests(Office_97::PropertyTests** PropTestsRet/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PropertyTests"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_97::PropertyTests**)PropTestsRet /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_97::PropertyTests* __fastcall
FileSearchDispT<T>::get_PropertyTests(void)
{
  Office_97::PropertyTests* PropTestsRet;
  this->get_PropertyTests((Office_97::PropertyTests**)&PropTestsRet);
  return PropTestsRet;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_Application(LPDISPATCH* ppidisp/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(DISPID_UNKNOWN/*[1610743808]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppidisp /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
FileSearchDispT<T>::get_Application(void)
{
  LPDISPATCH ppidisp;
  this->get_Application((LPDISPATCH*)&ppidisp);
  return ppidisp;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
FileSearchDispT<T>::get_Creator(long* plCreator/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(DISPID_UNKNOWN/*[1610743809]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCreator /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FileSearchDispT<T>::get_Creator(void)
{
  long plCreator;
  this->get_Creator((long*)&plCreator);
  return plCreator;
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Office_97

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Office_97;
#endif

#pragma option pop

#endif // Office_97H
