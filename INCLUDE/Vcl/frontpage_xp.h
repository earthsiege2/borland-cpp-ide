// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.0.1.0.1.0  $
// File generated on 1/29/2002 1:29:48 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: c:\program files\microsoft office\office10\frontpg.exe (1)
// LIBID: {3824BCD5-7042-11CE-8E17-0020AF9F9648}
// LCID: 0
// Helpfile: c:\program files\microsoft office\office10\vbafpw10.chm
// HelpString: Microsoft FrontPage 5.0 Web Object Reference Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINNT\System32\stdole2.tlb)
//   (2) v5.0 FrontPageEditor, (C:\PROGRA~1\MICROS~4\Office10\FPEDITAX.DLL)
//   (3) v2.2 Office, (C:\Program Files\Common Files\Microsoft Shared\Office10\MSO.DLL)
//   (4) v5.3 VBIDE, (C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB)
// ************************************************************************ //
#ifndef   FrontPage_XPH
#define   FrontPage_XPH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "FrontPageEditor_XP.h"
#include "Office_XP.h"
#include "VBIDE_XP.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Frontpage_xp
{

// *********************************************************************//
// HelpString: Microsoft FrontPage 5.0 Web Object Reference Library
// Version:    5.0
// *********************************************************************//

/*   **********************************************************

  Type Library Options: 
  Generate C++ Import file
  Expose namespace with 'using'.
  Generate files for dependant type libraries
  Map HRESULT to safecall on dual interfaces
  Place warnings in imported files
  Generate IDE registration for component wrappers
  Generate dispinterfaces
  Generate CoClassCreator wrappers
  Generate C++Builder 4.0 event wrappers for servers
  Generate VCL component wrappers for servers
  Force use of a _TLB file
  Ignore [PreDefined] flag
  Ignore Standard Type Libraries
  Show Debug Output
  Place comments in imported files
   ******************************************************** */

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_FrontPage;
extern __declspec (package) const GUID GUID_FpThemeProperties;
extern __declspec (package) const GUID GUID_FpStructModType;
extern __declspec (package) const GUID GUID_FpWebViewMode;
extern __declspec (package) const GUID GUID_FpSharedBorders;
extern __declspec (package) const GUID GUID_FpWebDeleteFlags;
extern __declspec (package) const GUID GUID_FpWebPublishFlags;
extern __declspec (package) const GUID GUID_FpConnectionSpeed;
extern __declspec (package) const GUID GUID_FpURLComponent;
extern __declspec (package) const GUID GUID_FpWebOpenFlags;
extern __declspec (package) const GUID GUID_FpWebViewModeEx;
extern __declspec (package) const GUID GUID_FpWebSubView;
extern __declspec (package) const GUID GUID_FpCheckOutOption;
extern __declspec (package) const GUID GUID_FpListDesignSecurity;
extern __declspec (package) const GUID GUID_FpListEditSecurity;
extern __declspec (package) const GUID GUID_FpListReadSecurity;
extern __declspec (package) const GUID GUID_FpListType;
extern __declspec (package) const GUID GUID_FpFieldType;
extern __declspec (package) const GUID GUID_FpNumberFieldFormat;
extern __declspec (package) const GUID GUID_FpCurrencyFieldFormat;
extern __declspec (package) const GUID GUID_FpDateTimeFieldFormat;
extern __declspec (package) const GUID GUID_FpChoiceFieldFormat;
extern __declspec (package) const GUID GUID_FpURLFieldFormat;
extern __declspec (package) const GUID GUID_StringConstants;
extern __declspec (package) const GUID IID__IBaseFPObj;
extern __declspec (package) const GUID IID__Application;
extern __declspec (package) const GUID IID_PageWindow;
extern __declspec (package) const GUID IID_WebFile;
extern __declspec (package) const GUID IID_Properties;
extern __declspec (package) const GUID IID_MetaTags;
extern __declspec (package) const GUID IID_NavigationNode;
extern __declspec (package) const GUID IID_NavigationNodes;
extern __declspec (package) const GUID IID_Web;
extern __declspec (package) const GUID IID_WebWindow;
extern __declspec (package) const GUID IID_PageWindows;
extern __declspec (package) const GUID IID_WebFolder;
extern __declspec (package) const GUID IID_WebFiles;
extern __declspec (package) const GUID IID_WebFolders;
extern __declspec (package) const GUID IID__List;
extern __declspec (package) const GUID IID__ListFields;
extern __declspec (package) const GUID IID__ListField;
extern __declspec (package) const GUID IID_Themes;
extern __declspec (package) const GUID IID_Theme;
extern __declspec (package) const GUID IID_WebWindows;
extern __declspec (package) const GUID GUID_FpPageViewMode;
extern __declspec (package) const GUID IID__Lists;
extern __declspec (package) const GUID IID_SYSTEM;
extern __declspec (package) const GUID IID_Webs;
extern __declspec (package) const GUID IID__BasicList;
extern __declspec (package) const GUID IID__Survey;
extern __declspec (package) const GUID IID__DocumentLibrary;
extern __declspec (package) const GUID IID__ListFieldSingleLine;
extern __declspec (package) const GUID IID__ListFieldMultiLine;
extern __declspec (package) const GUID IID__ListFieldNumber;
extern __declspec (package) const GUID IID__ListFieldCurrency;
extern __declspec (package) const GUID IID__ListFieldDateTime;
extern __declspec (package) const GUID IID__ListFieldChoice;
extern __declspec (package) const GUID IID__ListFieldLookup;
extern __declspec (package) const GUID IID__ListFieldTrueFalse;
extern __declspec (package) const GUID IID__ListFieldURL;
extern __declspec (package) const GUID IID__ListFieldCounter;
extern __declspec (package) const GUID IID__ListFieldInteger;
extern __declspec (package) const GUID IID__ListFieldComputed;
extern __declspec (package) const GUID IID__ListFieldFile;
extern __declspec (package) const GUID DIID__IApplicationEvents;
extern __declspec (package) const GUID CLSID_App;
extern __declspec (package) const GUID DIID_IWebber;
extern __declspec (package) const GUID CLSID_CWebberAutomation;
extern __declspec (package) const GUID DIID_IPageEditor;
extern __declspec (package) const GUID CLSID_CAutoJack;
extern __declspec (package) const GUID IID_IExplorerWebs;
extern __declspec (package) const GUID CLSID_ExplorerWebs;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_webber_0249_0001;
extern __declspec (package) const GUID GUID_WebOpenFlags;
extern __declspec (package) const GUID IID_IExplorerWeb;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_webber_0249_0002;
extern __declspec (package) const GUID GUID_RequestDocumentsFlags;
extern __declspec (package) const GUID CLSID_ExplorerWeb;
extern __declspec (package) const GUID DIID__IPageWindowEvents;
extern __declspec (package) const GUID CLSID_PageWindowEx;
extern __declspec (package) const GUID DIID__IWebEvents;
extern __declspec (package) const GUID CLSID_WebEx;
extern __declspec (package) const GUID DIID__IWebWindowEvents;
extern __declspec (package) const GUID CLSID_WebWindowEx;
extern __declspec (package) const GUID CLSID_Lists;
extern __declspec (package) const GUID CLSID_List;
extern __declspec (package) const GUID CLSID_BasicList;
extern __declspec (package) const GUID CLSID_Survey;
extern __declspec (package) const GUID CLSID_DocumentLibrary;
extern __declspec (package) const GUID CLSID_ListFields;
extern __declspec (package) const GUID CLSID_ListField;
extern __declspec (package) const GUID CLSID_ListFieldSingleLine;
extern __declspec (package) const GUID CLSID_ListFieldMultiLine;
extern __declspec (package) const GUID CLSID_ListFieldNumber;
extern __declspec (package) const GUID CLSID_ListFieldCurrency;
extern __declspec (package) const GUID CLSID_ListFieldDateTime;
extern __declspec (package) const GUID CLSID_ListFieldChoice;
extern __declspec (package) const GUID CLSID_ListFieldLookup;
extern __declspec (package) const GUID CLSID_ListFieldTrueFalse;
extern __declspec (package) const GUID CLSID_ListFieldURL;
extern __declspec (package) const GUID CLSID_ListFieldCounter;
extern __declspec (package) const GUID CLSID_ListFieldInteger;
extern __declspec (package) const GUID CLSID_ListFieldComputed;
extern __declspec (package) const GUID CLSID_ListFieldFile;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      FpThemeProperties;
enum      FpStructModType;
enum      FpWebViewMode;
enum      FpSharedBorders;
enum      FpWebDeleteFlags;
enum      FpWebPublishFlags;
enum      FpConnectionSpeed;
enum      FpURLComponent;
enum      FpWebOpenFlags;
enum      FpWebViewModeEx;
enum      FpWebSubView;
enum      FpCheckOutOption;
enum      FpListDesignSecurity;
enum      FpListEditSecurity;
enum      FpListReadSecurity;
enum      FpListType;
enum      FpFieldType;
enum      FpNumberFieldFormat;
enum      FpCurrencyFieldFormat;
enum      FpDateTimeFieldFormat;
enum      FpChoiceFieldFormat;
enum      FpURLFieldFormat;
enum      FpPageViewMode;
enum      __MIDL___MIDL_itf_webber_0249_0001;
enum      __MIDL___MIDL_itf_webber_0249_0002;
interface DECLSPEC_UUID("{98241550-9C43-11D1-83CE-006097ABE675}") _IBaseFPObj;
typedef TComInterface<_IBaseFPObj, &IID__IBaseFPObj> _IBaseFPObjPtr;

interface DECLSPEC_UUID("{04DF1014-7007-11D1-83BC-006097ABE675}") _Application;
typedef TComInterface<_Application, &IID__Application> _ApplicationPtr;

interface DECLSPEC_UUID("{48FB4014-D3D0-11D1-83D7-006097ABE675}") PageWindow;
typedef TComInterface<PageWindow, &IID_PageWindow> PageWindowPtr;

interface DECLSPEC_UUID("{48FB4049-D3D0-11D1-83D7-006097ABE675}") WebFile;
typedef TComInterface<WebFile, &IID_WebFile> WebFilePtr;

interface DECLSPEC_UUID("{E67C7ADC-F4F5-11D1-B0E0-00C04FA30A8B}") Properties;
typedef TComInterface<Properties, &IID_Properties> PropertiesPtr;

interface DECLSPEC_UUID("{2FC94518-0413-11D2-B0E9-00C04FA30A8B}") MetaTags;
typedef TComInterface<MetaTags, &IID_MetaTags> MetaTagsPtr;

interface DECLSPEC_UUID("{C8905FB0-E5F2-11D1-B0DE-00C04FA30A8B}") NavigationNode;
typedef TComInterface<NavigationNode, &IID_NavigationNode> NavigationNodePtr;

interface DECLSPEC_UUID("{435789D4-E5DC-11D1-B0DE-00C04FA30A8B}") NavigationNodes;
typedef TComInterface<NavigationNodes, &IID_NavigationNodes> NavigationNodesPtr;

interface DECLSPEC_UUID("{95B21741-CA4A-11D1-83D5-006097ABE675}") Web;
typedef TComInterface<Web, &IID_Web> WebPtr;

interface DECLSPEC_UUID("{6B735741-FA41-11D1-83DC-006097ABE675}") WebWindow;
typedef TComInterface<WebWindow, &IID_WebWindow> WebWindowPtr;

interface DECLSPEC_UUID("{48FB4042-D3D0-11D1-83D7-006097ABE675}") PageWindows;
typedef TComInterface<PageWindows, &IID_PageWindows> PageWindowsPtr;

interface DECLSPEC_UUID("{48FB404D-D3D0-11D1-83D7-006097ABE675}") WebFolder;
typedef TComInterface<WebFolder, &IID_WebFolder> WebFolderPtr;

interface DECLSPEC_UUID("{48FB404F-D3D0-11D1-83D7-006097ABE675}") WebFiles;
typedef TComInterface<WebFiles, &IID_WebFiles> WebFilesPtr;

interface DECLSPEC_UUID("{48FB4015-D3D0-11D1-83D7-006097ABE675}") WebFolders;
typedef TComInterface<WebFolders, &IID_WebFolders> WebFoldersPtr;

interface DECLSPEC_UUID("{46D9B474-C22B-11D3-8746-00C04F79E87D}") _List;
typedef TComInterface<_List, &IID__List> _ListPtr;

interface DECLSPEC_UUID("{46D9B475-C22B-11D3-8746-00C04F79E87D}") _ListFields;
typedef TComInterface<_ListFields, &IID__ListFields> _ListFieldsPtr;

interface DECLSPEC_UUID("{46D9B476-C22B-11D3-8746-00C04F79E87D}") _ListField;
typedef TComInterface<_ListField, &IID__ListField> _ListFieldPtr;

interface DECLSPEC_UUID("{48FB4046-D3D0-11D1-83D7-006097ABE675}") Themes;
typedef TComInterface<Themes, &IID_Themes> ThemesPtr;

interface DECLSPEC_UUID("{48FB4044-D3D0-11D1-83D7-006097ABE675}") Theme;
typedef TComInterface<Theme, &IID_Theme> ThemePtr;

interface DECLSPEC_UUID("{6B735742-FA41-11D1-83DC-006097ABE675}") WebWindows;
typedef TComInterface<WebWindows, &IID_WebWindows> WebWindowsPtr;

interface DECLSPEC_UUID("{46D9B473-C22B-11D3-8746-00C04F79E87D}") _Lists;
typedef TComInterface<_Lists, &IID__Lists> _ListsPtr;

interface DECLSPEC_UUID("{731EC3E0-9CC2-11D1-83CE-006097ABE675}") SYSTEM;
typedef TComInterface<SYSTEM, &IID_SYSTEM> SYSTEMPtr;

interface DECLSPEC_UUID("{AAAA22E0-C834-11D1-83D4-006097ABE675}") Webs;
typedef TComInterface<Webs, &IID_Webs> WebsPtr;

interface DECLSPEC_UUID("{46D9B494-C22B-11D3-8746-00C04F79E87D}") _BasicList;
typedef TComInterface<_BasicList, &IID__BasicList> _BasicListPtr;

interface DECLSPEC_UUID("{46D9B495-C22B-11D3-8746-00C04F79E87D}") _Survey;
typedef TComInterface<_Survey, &IID__Survey> _SurveyPtr;

interface DECLSPEC_UUID("{46D9B481-C22B-11D3-8746-00C04F79E87D}") _DocumentLibrary;
typedef TComInterface<_DocumentLibrary, &IID__DocumentLibrary> _DocumentLibraryPtr;

interface DECLSPEC_UUID("{46D9B477-C22B-11D3-8746-00C04F79E87D}") _ListFieldSingleLine;
typedef TComInterface<_ListFieldSingleLine, &IID__ListFieldSingleLine> _ListFieldSingleLinePtr;

interface DECLSPEC_UUID("{46D9B478-C22B-11D3-8746-00C04F79E87D}") _ListFieldMultiLine;
typedef TComInterface<_ListFieldMultiLine, &IID__ListFieldMultiLine> _ListFieldMultiLinePtr;

interface DECLSPEC_UUID("{46D9B479-C22B-11D3-8746-00C04F79E87D}") _ListFieldNumber;
typedef TComInterface<_ListFieldNumber, &IID__ListFieldNumber> _ListFieldNumberPtr;

interface DECLSPEC_UUID("{46D9B47A-C22B-11D3-8746-00C04F79E87D}") _ListFieldCurrency;
typedef TComInterface<_ListFieldCurrency, &IID__ListFieldCurrency> _ListFieldCurrencyPtr;

interface DECLSPEC_UUID("{46D9B47B-C22B-11D3-8746-00C04F79E87D}") _ListFieldDateTime;
typedef TComInterface<_ListFieldDateTime, &IID__ListFieldDateTime> _ListFieldDateTimePtr;

interface DECLSPEC_UUID("{46D9B47C-C22B-11D3-8746-00C04F79E87D}") _ListFieldChoice;
typedef TComInterface<_ListFieldChoice, &IID__ListFieldChoice> _ListFieldChoicePtr;

interface DECLSPEC_UUID("{46D9B47D-C22B-11D3-8746-00C04F79E87D}") _ListFieldLookup;
typedef TComInterface<_ListFieldLookup, &IID__ListFieldLookup> _ListFieldLookupPtr;

interface DECLSPEC_UUID("{46D9B47E-C22B-11D3-8746-00C04F79E87D}") _ListFieldTrueFalse;
typedef TComInterface<_ListFieldTrueFalse, &IID__ListFieldTrueFalse> _ListFieldTrueFalsePtr;

interface DECLSPEC_UUID("{46D9B47F-C22B-11D3-8746-00C04F79E87D}") _ListFieldURL;
typedef TComInterface<_ListFieldURL, &IID__ListFieldURL> _ListFieldURLPtr;

interface DECLSPEC_UUID("{46D9B49D-C22B-11D3-8746-00C04F79E87D}") _ListFieldCounter;
typedef TComInterface<_ListFieldCounter, &IID__ListFieldCounter> _ListFieldCounterPtr;

interface DECLSPEC_UUID("{46D9B496-C22B-11D3-8746-00C04F79E87D}") _ListFieldInteger;
typedef TComInterface<_ListFieldInteger, &IID__ListFieldInteger> _ListFieldIntegerPtr;

interface DECLSPEC_UUID("{46D9B497-C22B-11D3-8746-00C04F79E87D}") _ListFieldComputed;
typedef TComInterface<_ListFieldComputed, &IID__ListFieldComputed> _ListFieldComputedPtr;

interface DECLSPEC_UUID("{46D9B498-C22B-11D3-8746-00C04F79E87D}") _ListFieldFile;
typedef TComInterface<_ListFieldFile, &IID__ListFieldFile> _ListFieldFilePtr;

interface DECLSPEC_UUID("{F5D15700-E9D8-11D1-B0DF-00C04FA30A8B}") _IApplicationEvents;
typedef TComInterface<_IApplicationEvents, &DIID__IApplicationEvents> _IApplicationEventsPtr;

interface DECLSPEC_UUID("{8BBD4A72-661D-11CF-A3C4-00A024184692}") IWebber;
typedef TComInterface<IWebber, &DIID_IWebber> IWebberPtr;

interface DECLSPEC_UUID("{8BBD4A7B-661D-11CF-A3C4-00A024184692}") IPageEditor;
typedef TComInterface<IPageEditor, &DIID_IPageEditor> IPageEditorPtr;

interface DECLSPEC_UUID("{9B5D039F-8DDB-11D1-A220-00A0C9055E81}") IExplorerWebs;
typedef TComInterface<IExplorerWebs, &IID_IExplorerWebs> IExplorerWebsPtr;

interface DECLSPEC_UUID("{9B5D03A1-8DDB-11D1-A220-00A0C9055E81}") IExplorerWeb;
typedef TComInterface<IExplorerWeb, &IID_IExplorerWeb> IExplorerWebPtr;

interface DECLSPEC_UUID("{B6B97A3C-4B04-11D3-9FE7-00C04F79E87D}") _IPageWindowEvents;
typedef TComInterface<_IPageWindowEvents, &DIID__IPageWindowEvents> _IPageWindowEventsPtr;

interface DECLSPEC_UUID("{9389CD3A-9318-11D3-9F96-005004AE6A5C}") _IWebEvents;
typedef TComInterface<_IWebEvents, &DIID__IWebEvents> _IWebEventsPtr;

interface DECLSPEC_UUID("{71EA4320-A214-11D3-9FA5-005004AE6A5C}") _IWebWindowEvents;
typedef TComInterface<_IWebWindowEvents, &DIID__IWebWindowEvents> _IWebWindowEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _Application App;
typedef _ApplicationPtr AppPtr;
typedef IWebber CWebberAutomation;
typedef IWebberPtr CWebberAutomationPtr;
typedef IPageEditor CAutoJack;
typedef IPageEditorPtr CAutoJackPtr;
typedef IExplorerWebs ExplorerWebs;
typedef IExplorerWebsPtr ExplorerWebsPtr;
typedef IExplorerWeb ExplorerWeb;
typedef IExplorerWebPtr ExplorerWebPtr;
typedef PageWindow PageWindowEx;
typedef PageWindowPtr PageWindowExPtr;
typedef Web WebEx;
typedef WebPtr WebExPtr;
typedef WebWindow WebWindowEx;
typedef WebWindowPtr WebWindowExPtr;
typedef _Lists Lists;
typedef _ListsPtr ListsPtr;
typedef _List List;
typedef _ListPtr ListPtr;
typedef _BasicList BasicList;
typedef _BasicListPtr BasicListPtr;
typedef _Survey Survey;
typedef _SurveyPtr SurveyPtr;
typedef _DocumentLibrary DocumentLibrary;
typedef _DocumentLibraryPtr DocumentLibraryPtr;
typedef _ListFields ListFields;
typedef _ListFieldsPtr ListFieldsPtr;
typedef _ListField ListField;
typedef _ListFieldPtr ListFieldPtr;
typedef _ListFieldSingleLine ListFieldSingleLine;
typedef _ListFieldSingleLinePtr ListFieldSingleLinePtr;
typedef _ListFieldMultiLine ListFieldMultiLine;
typedef _ListFieldMultiLinePtr ListFieldMultiLinePtr;
typedef _ListFieldNumber ListFieldNumber;
typedef _ListFieldNumberPtr ListFieldNumberPtr;
typedef _ListFieldCurrency ListFieldCurrency;
typedef _ListFieldCurrencyPtr ListFieldCurrencyPtr;
typedef _ListFieldDateTime ListFieldDateTime;
typedef _ListFieldDateTimePtr ListFieldDateTimePtr;
typedef _ListFieldChoice ListFieldChoice;
typedef _ListFieldChoicePtr ListFieldChoicePtr;
typedef _ListFieldLookup ListFieldLookup;
typedef _ListFieldLookupPtr ListFieldLookupPtr;
typedef _ListFieldTrueFalse ListFieldTrueFalse;
typedef _ListFieldTrueFalsePtr ListFieldTrueFalsePtr;
typedef _ListFieldURL ListFieldURL;
typedef _ListFieldURLPtr ListFieldURLPtr;
typedef _ListFieldCounter ListFieldCounter;
typedef _ListFieldCounterPtr ListFieldCounterPtr;
typedef _ListFieldInteger ListFieldInteger;
typedef _ListFieldIntegerPtr ListFieldIntegerPtr;
typedef _ListFieldComputed ListFieldComputed;
typedef _ListFieldComputedPtr ListFieldComputedPtr;
typedef _ListFieldFile ListFieldFile;
typedef _ListFieldFilePtr ListFieldFilePtr;

#define LIBID_OF_App (&LIBID_FrontPage)
#define LIBID_OF_CWebberAutomation (&LIBID_FrontPage)
#define LIBID_OF_CAutoJack (&LIBID_FrontPage)
#define LIBID_OF_ExplorerWebs (&LIBID_FrontPage)
#define LIBID_OF_ExplorerWeb (&LIBID_FrontPage)
#define LIBID_OF_PageWindowEx (&LIBID_FrontPage)
#define LIBID_OF_WebEx (&LIBID_FrontPage)
#define LIBID_OF_WebWindowEx (&LIBID_FrontPage)
#define LIBID_OF_Lists (&LIBID_FrontPage)
#define LIBID_OF_List (&LIBID_FrontPage)
#define LIBID_OF_BasicList (&LIBID_FrontPage)
#define LIBID_OF_Survey (&LIBID_FrontPage)
#define LIBID_OF_DocumentLibrary (&LIBID_FrontPage)
#define LIBID_OF_ListFields (&LIBID_FrontPage)
#define LIBID_OF_ListField (&LIBID_FrontPage)
#define LIBID_OF_ListFieldSingleLine (&LIBID_FrontPage)
#define LIBID_OF_ListFieldMultiLine (&LIBID_FrontPage)
#define LIBID_OF_ListFieldNumber (&LIBID_FrontPage)
#define LIBID_OF_ListFieldCurrency (&LIBID_FrontPage)
#define LIBID_OF_ListFieldDateTime (&LIBID_FrontPage)
#define LIBID_OF_ListFieldChoice (&LIBID_FrontPage)
#define LIBID_OF_ListFieldLookup (&LIBID_FrontPage)
#define LIBID_OF_ListFieldTrueFalse (&LIBID_FrontPage)
#define LIBID_OF_ListFieldURL (&LIBID_FrontPage)
#define LIBID_OF_ListFieldCounter (&LIBID_FrontPage)
#define LIBID_OF_ListFieldInteger (&LIBID_FrontPage)
#define LIBID_OF_ListFieldComputed (&LIBID_FrontPage)
#define LIBID_OF_ListFieldFile (&LIBID_FrontPage)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef Frontpage_xp::__MIDL___MIDL_itf_webber_0249_0001 WebOpenFlags;
typedef Frontpage_xp::__MIDL___MIDL_itf_webber_0249_0002 RequestDocumentsFlags;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum FpThemeProperties
{
  fpThemeNormalColors = 0, 
  fpThemeNormalGraphics = 0, 
  fpThemeNoBackgroundImage = 0, 
  fpThemeNoCSS = 0, 
  fpThemeActiveGraphics = 16, 
  fpThemeBackgroundImage = 1, 
  fpThemeVividColors = 256, 
  fpThemeCSS = 4096, 
  fpThemePropertiesAll = 4369, 
  fpThemePropertiesNone = 0, 
  fpThemeDefaultSettings = 16777216, 
  fpThemeName = 33554432
} FpThemeProperties;

typedef enum FpStructModType
{
  fpStructBaseOnSibling = 0, 
  fpStructLeftmostChild = 1, 
  fpStructRightmostChild = 2
} FpStructModType;

typedef enum FpWebViewMode
{
  fpWebViewLinks = 0, 
  fpWebViewFolders = 1, 
  fpWebViewStructure = 2, 
  fpWebViewPage = 3, 
  fpWebViewAllFiles = 4, 
  fpWebViewTodo = 5, 
  fpWebViewBrokenLinks = 6, 
  fpWebViewSiteSummary = 7
} FpWebViewMode;

typedef enum FpSharedBorders
{
  fpBorderTop = 1, 
  fpBorderLeft = 2, 
  fpBorderRight = 4, 
  fpBorderBottom = 8, 
  fpBorderAll = 255, 
  _fpBorderNone = 0
} FpSharedBorders;

typedef enum FpWebDeleteFlags
{
  fpDeleteEntireWeb = 0, 
  fpDeleteFrontPageInfoFromWeb = 1
} FpWebDeleteFlags;

typedef enum FpWebPublishFlags
{
  fpPublishNone = 0, 
  fpPublishIncremental = 1, 
  fpPublishAddToExistingWeb = 2, 
  fpPublishCopySubwebs = 4, 
  fpPublishLogInTempDir = 8, 
  fpPublishNoDeleteUnmatched = 16, 
  fpPublishUseLastPublishTime = 32, 
  fpPublishCopyAllFiles = 64
} FpWebPublishFlags;

typedef enum FpConnectionSpeed
{
  fpConnect144 = 0, 
  fpConnect288 = 1, 
  fpConnect56K = 2, 
  fpConnectISDN = 3, 
  fpConnectT1 = 4, 
  fpConnectT3 = 5
} FpConnectionSpeed;

typedef enum FpURLComponent
{
  fpURLComponentScheme = 1, 
  fpURLComponentUserName = 2, 
  fpURLComponentPassword = 4, 
  fpURLComponentServer = 8, 
  fpURLComponentPort = 16, 
  fpURLComponentPath = 32, 
  fpURLComponentFileName = 64, 
  fpURLComponentFileExtension = 128, 
  fpURLComponentBookmark = 256, 
  fpURLComponentQuery = 512
} FpURLComponent;

typedef enum FpWebOpenFlags
{
  fpOpenInWindow = 0, 
  fpOpenNoWindow = 2
} FpWebOpenFlags;

typedef enum FpWebViewModeEx
{
  fpWebViewExLinks = 0, 
  fpWebViewExFolders = 1, 
  fpWebViewExNavigation = 2, 
  fpWebViewExPage = 3, 
  fpWebViewExAllFiles = 4, 
  fpWebViewExTodo = 5, 
  fpWebViewExBrokenLinks = 6, 
  fpWebViewExSiteSummary = 7, 
  fpWebViewExOlderFiles = 8, 
  fpWebViewExRecentlyAddedFiles = 9, 
  fpWebViewExRecentlyChangedFiles = 10, 
  fpWebViewExSlowPages = 11, 
  fpWebViewExUnlinkedFiles = 12, 
  fpWebViewExAssignedTo = 13, 
  fpWebViewExReviewStatus = 14, 
  fpWebViewExPublishStatus = 15, 
  fpWebViewExCheckoutStatus = 16, 
  fpWebViewExCategories = 17, 
  fpWebViewExComponentErrors = 18, 
  fpWebViewExDailyPageHits = 19, 
  fpWebViewExWeeklyPageHits = 20, 
  fpWebViewExMonthlyPageHits = 21, 
  fpWebViewExDailySummary = 22, 
  fpWebViewExWeeklySummary = 23, 
  fpWebViewExMonthlySummary = 24, 
  fpWebViewExReferringDomains = 25, 
  fpWebViewExReferringURLs = 26, 
  fpWebViewExSearchStrings = 27, 
  fpWebViewExOsTypes = 28, 
  fpWebViewExBrowserTypes = 29, 
  fpWebViewExVisitingUsers = 30, 
  fpWebViewExUsageSummary = 31
} FpWebViewModeEx;

typedef enum FpWebSubView
{
  fpWebSubViewNone = 0, 
  fpWebSubViewFolders = 1, 
  fpWebSubViewNavigation = 2
} FpWebSubView;

typedef enum FpCheckOutOption
{
  fpCheckOutPromptUser = 0, 
  fpCheckOut = 1, 
  fpCheckOutReadOnly = 2, 
  fpCheckOutCancel = 3
} FpCheckOutOption;

typedef enum FpListDesignSecurity
{
  fpListDesignSecurityEveryone = 0, 
  fpListDesignSecurityCreator = 1
} FpListDesignSecurity;

typedef enum FpListEditSecurity
{
  fpListEditSecurityAll = 0, 
  fpListEditSecurityOnlyOwn = 1, 
  fpListEditSecurityNone = 2
} FpListEditSecurity;

typedef enum FpListReadSecurity
{
  fpListReadSecurityAll = 0, 
  fpListReadSecurityOnlyOwn = 1
} FpListReadSecurity;

typedef enum FpListType
{
  fpListTypeBasicList = 0, 
  fpListTypeSurvey = 1, 
  fpListTypeDocumentLibrary = 2
} FpListType;

typedef enum FpFieldType
{
  fpFieldSingleLine = 0, 
  fpFieldMultiLine = 1, 
  fpFieldNumber = 2, 
  fpFieldCurrency = 3, 
  fpFieldDateTime = 4, 
  fpFieldChoice = 5, 
  fpFieldLookup = 6, 
  fpFieldTrueFalse = 7, 
  fpFieldURL = 8, 
  fpFieldCounter = 9, 
  fpFieldInteger = 10, 
  fpFieldComputed = 11, 
  fpFieldFile = 12
} FpFieldType;

typedef enum FpNumberFieldFormat
{
  fpNumberFieldAuto = 0xFFFFFFFF, 
  fpNumberFieldInteger = 0, 
  fpNumberFieldOneDecimal = 1, 
  fpNumberFieldTwoDecimals = 2, 
  fpNumberFieldThreeDecimals = 3, 
  fpNumberFieldFourDecimals = 4, 
  fpNumberFieldFiveDecimals = 5
} FpNumberFieldFormat;

typedef enum FpCurrencyFieldFormat
{
  fpCurrencyFieldArgentina = 11274, 
  fpCurrencyFieldAustralia = 3081, 
  fpCurrencyFieldAustria = 3079, 
  fpCurrencyFieldBelgiumFB = 2060, 
  fpCurrencyFieldBelgiumBF = 2067, 
  fpCurrencyFieldBolivia = 16394, 
  fpCurrencyFieldBrazil = 1046, 
  fpCurrencyFieldCanada = 4105, 
  fpCurrencyFieldCanadaF = 3084, 
  fpCurrencyFieldChile = 13322, 
  fpCurrencyFieldColombia = 9226, 
  fpCurrencyFieldCostaRica = 5130, 
  fpCurrencyFieldCzech = 1029, 
  fpCurrencyFieldDenmark = 1030, 
  fpCurrencyFieldDominicanRepublic = 7178, 
  fpCurrencyFieldEcuador = 12298, 
  fpCurrencyFieldElSalvador = 17418, 
  fpCurrencyFieldEuro = 0xFFFFFFFF, 
  fpCurrencyFieldEuroPostfix = 0xFFFFFFFE, 
  fpCurrencyFieldFinland = 1035, 
  fpCurrencyFieldFrance = 1036, 
  fpCurrencyFieldGermany = 1031, 
  fpCurrencyFieldGreece = 1032, 
  fpCurrencyFieldGuatemala = 4106, 
  fpCurrencyFieldHonduras = 18442, 
  fpCurrencyFieldHongKong = 3076, 
  fpCurrencyFieldHungary = 1038, 
  fpCurrencyFieldIreland = 6153, 
  fpCurrencyFieldItaly = 1040, 
  fpCurrencyFieldJapan = 1041, 
  fpCurrencyFieldKorea = 1042, 
  fpCurrencyFieldMexico = 2058, 
  fpCurrencyFieldNetherlands = 1043, 
  fpCurrencyFieldNewZealand = 5129, 
  fpCurrencyFieldNicaragua = 19466, 
  fpCurrencyFieldNorway = 1044, 
  fpCurrencyFieldPanama = 6154, 
  fpCurrencyFieldParaguay = 15370, 
  fpCurrencyFieldPRChina = 2052, 
  fpCurrencyFieldPeru = 10250, 
  fpCurrencyFieldPoland = 1045, 
  fpCurrencyFieldPortugal = 2070, 
  fpCurrencyFieldRussia = 1049, 
  fpCurrencyFieldSingapore = 4100, 
  fpCurrencyFieldSlovakia = 1051, 
  fpCurrencyFieldSlovenia = 1060, 
  fpCurrencyFieldSouthAfrica = 7177, 
  fpCurrencyFieldSpain = 1034, 
  fpCurrencyFieldSweden = 1053, 
  fpCurrencyFieldSwitzerland = 2055, 
  fpCurrencyFieldTaiwan = 1028, 
  fpCurrencyFieldTurkey = 1055, 
  fpCurrencyFieldUnitedKingdom = 2057, 
  fpCurrencyFieldUnitedStates = 1033, 
  fpCurrencyFieldUruguay = 14346, 
  fpCurrencyFieldVenezuela = 8202
} FpCurrencyFieldFormat;

typedef enum FpDateTimeFieldFormat
{
  fpDateTimeFieldDateAndTime = 0, 
  fpDateTimeFieldDateOnly = 1
} FpDateTimeFieldFormat;

typedef enum FpChoiceFieldFormat
{
  fpChoiceFieldDropdown = 0, 
  fpChoiceFieldRadioButtons = 1
} FpChoiceFieldFormat;

typedef enum FpURLFieldFormat
{
  fpURLFieldLink = 0, 
  fpURLFieldImage = 1
} FpURLFieldFormat;

typedef enum FpPageViewMode
{
  fpPageViewDefault = 0, 
  fpPageViewNormal = 1, 
  fpPageViewHtml = 2, 
  fpPageViewNoFrames = 4, 
  fpPageViewPreview = 8, 
  fpPageViewNoWindow = 128
} FpPageViewMode;

typedef enum __MIDL___MIDL_itf_webber_0249_0001
{
  eOpenInNewWindow = 0, 
  eOpenInCurrentWindow = 1, 
  eOpenNoWindow = 2
} __MIDL___MIDL_itf_webber_0249_0001;

typedef enum __MIDL___MIDL_itf_webber_0249_0002
{
  eRequestGet = 0, 
  eRequestForEdit = 1, 
  eRequestFromFPSE = 2, 
  eRequestFromFPSEIfWebOpen = 3
} __MIDL___MIDL_itf_webber_0249_0002;

// *********************************************************************//
// Interface: _IBaseFPObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {98241550-9C43-11D1-83CE-006097ABE675}
// *********************************************************************//
interface _IBaseFPObj  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Parent(LPDISPATCH* pVal/*[out,retval]*/) = 0; // [-2147418104]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::_Application* __fastcall get_Application(void)
  {
    Frontpage_xp::_Application* pVal;
    OLECHECK(this->get_Application((Frontpage_xp::_Application**)&pVal));
    return pVal;
  }

  LPDISPATCH __fastcall get_Parent(void)
  {
    LPDISPATCH pVal;
    OLECHECK(this->get_Parent((LPDISPATCH*)&pVal));
    return pVal;
  }


  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Application
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {04DF1014-7007-11D1-83BC-006097ABE675}
// *********************************************************************//
interface _Application  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Application(Frontpage_xp::_Application** ppVal/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocument** ppVal/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_ActivePageWindow(Frontpage_xp::PageWindow** pVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWeb(Frontpage_xp::Web** pVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWebWindow(Frontpage_xp::WebWindow** pVal/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_AnswerWizard(Office_xp::AnswerWizard** ppVal/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_Build(BSTR* pVal/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_COMAddIns(Office_xp::COMAddIns** ppVal/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_CommandBars(Office_xp::CommandBars** ppVal/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_FileSearch(Office_xp::FileSearch** ppVal/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_LanguageSettings(Office_xp::LanguageSettings** ppVal/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_OrganizationName(BSTR* pVal/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_System(Frontpage_xp::SYSTEM** pVal/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_Themes(Frontpage_xp::Themes** pVal/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_UserName(BSTR* pVal/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_UserName(BSTR pVal/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* pVal/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_Webs(Frontpage_xp::Webs** pVal/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_WebWindows(Frontpage_xp::WebWindows** pVal/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_ProductCode(BSTR* ProductCode/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE LocatePage(BSTR DocumentUrl/*[in]*/, 
                                               Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/, 
                                               Frontpage_xp::PageWindow** ppObj/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/, 
                                            BSTR* pbzAbsUrl/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/, 
                                            BSTR* pbzRelUrl/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE Quit(void) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE Run(BSTR MacroName/*[in]*/, 
                                        LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                                        VARIANT* Run/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Assistant(Office_xp::Assistant** ppVal/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed* pConnectionSpeed/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed pConnectionSpeed/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_OlderFile(long* plDays/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_OlderFile(long plDays/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_RecentFile(long* plDays/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE set_RecentFile(long plDays/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_SlowPage(long* plSeconds/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE set_SlowPage(long plSeconds/*[in]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE OnTime(VARIANT* When/*[in]*/, BSTR Name/*[in]*/, 
                                           VARIANT* Tolerance/*[in,opt]*/= TNoParam()) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE ParseURL(BSTR Url/*[in]*/, 
                                             Frontpage_xp::FpURLComponent URLComponent/*[in]*/, 
                                             BSTR* pbzRelUrl/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/, 
                                                   Office_xp::FileDialog** ppVal/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE get_VBE(Vbide_xp::VBE** ppVal/*[out,retval]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_MonthsShown(long* plMonths/*[out,retval]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE set_MonthsShown(long plMonths/*[in]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE get_NewPageorWeb(Office_xp::NewFile** ppVal/*[out,retval]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE get_ShowStartupDialog(VARIANT_BOOL* pfShowAtStartup/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE set_ShowStartupDialog(VARIANT_BOOL pfShowAtStartup/*[in]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocument** ppVal/*[out,retval]*/) = 0; // [41]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::_Application* __fastcall get_Application(void)
  {
    Frontpage_xp::_Application* ppVal;
    OLECHECK(this->get_Application((Frontpage_xp::_Application**)&ppVal));
    return ppVal;
  }

  Frontpageeditor_xp::IHTMLDocument* __fastcall get__deprecated_ActiveDocument(void)
  {
    Frontpageeditor_xp::IHTMLDocument* ppVal;
    OLECHECK(this->get__deprecated_ActiveDocument((Frontpageeditor_xp::IHTMLDocument**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::PageWindow* __fastcall get_ActivePageWindow(void)
  {
    Frontpage_xp::PageWindow* pVal;
    OLECHECK(this->get_ActivePageWindow((Frontpage_xp::PageWindow**)&pVal));
    return pVal;
  }

  Frontpage_xp::Web* __fastcall get_ActiveWeb(void)
  {
    Frontpage_xp::Web* pVal;
    OLECHECK(this->get_ActiveWeb((Frontpage_xp::Web**)&pVal));
    return pVal;
  }

  Frontpage_xp::WebWindow* __fastcall get_ActiveWebWindow(void)
  {
    Frontpage_xp::WebWindow* pVal;
    OLECHECK(this->get_ActiveWebWindow((Frontpage_xp::WebWindow**)&pVal));
    return pVal;
  }

  Office_xp::AnswerWizard* __fastcall get_AnswerWizard(void)
  {
    Office_xp::AnswerWizard* ppVal;
    OLECHECK(this->get_AnswerWizard((Office_xp::AnswerWizard**)&ppVal));
    return ppVal;
  }

  BSTR __fastcall get_Build(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Build((BSTR*)&pVal));
    return pVal;
  }

  Office_xp::COMAddIns* __fastcall get_COMAddIns(void)
  {
    Office_xp::COMAddIns* ppVal;
    OLECHECK(this->get_COMAddIns((Office_xp::COMAddIns**)&ppVal));
    return ppVal;
  }

  Office_xp::CommandBars* __fastcall get_CommandBars(void)
  {
    Office_xp::CommandBars* ppVal;
    OLECHECK(this->get_CommandBars((Office_xp::CommandBars**)&ppVal));
    return ppVal;
  }

  Office_xp::FileSearch* __fastcall get_FileSearch(void)
  {
    Office_xp::FileSearch* ppVal;
    OLECHECK(this->get_FileSearch((Office_xp::FileSearch**)&ppVal));
    return ppVal;
  }

  Office_xp::LanguageSettings* __fastcall get_LanguageSettings(void)
  {
    Office_xp::LanguageSettings* ppVal;
    OLECHECK(this->get_LanguageSettings((Office_xp::LanguageSettings**)&ppVal));
    return ppVal;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Name((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_OrganizationName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_OrganizationName((BSTR*)&pVal));
    return pVal;
  }

  Frontpage_xp::SYSTEM* __fastcall get_System(void)
  {
    Frontpage_xp::SYSTEM* pVal;
    OLECHECK(this->get_System((Frontpage_xp::SYSTEM**)&pVal));
    return pVal;
  }

  Frontpage_xp::Themes* __fastcall get_Themes(void)
  {
    Frontpage_xp::Themes* pVal;
    OLECHECK(this->get_Themes((Frontpage_xp::Themes**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_UserName(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_UserName((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Version((BSTR*)&pVal));
    return pVal;
  }

  Frontpage_xp::Webs* __fastcall get_Webs(void)
  {
    Frontpage_xp::Webs* pVal;
    OLECHECK(this->get_Webs((Frontpage_xp::Webs**)&pVal));
    return pVal;
  }

  Frontpage_xp::WebWindows* __fastcall get_WebWindows(void)
  {
    Frontpage_xp::WebWindows* pVal;
    OLECHECK(this->get_WebWindows((Frontpage_xp::WebWindows**)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ProductCode(void)
  {
    BSTR ProductCode = 0;
    OLECHECK(this->get_ProductCode((BSTR*)&ProductCode));
    return ProductCode;
  }

  Frontpage_xp::PageWindow* __fastcall LocatePage(BSTR DocumentUrl/*[in]*/, 
                                                  Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/)
  {
    Frontpage_xp::PageWindow* ppObj;
    OLECHECK(this->LocatePage(DocumentUrl, ViewMode, (Frontpage_xp::PageWindow**)&ppObj));
    return ppObj;
  }

  BSTR __fastcall MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/)
  {
    BSTR pbzAbsUrl = 0;
    OLECHECK(this->MakeAbs(UrlBase, Url, (BSTR*)&pbzAbsUrl));
    return pbzAbsUrl;
  }

  BSTR __fastcall MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/)
  {
    BSTR pbzRelUrl = 0;
    OLECHECK(this->MakeRel(UrlBase, Url, (BSTR*)&pbzRelUrl));
    return pbzRelUrl;
  }

  VARIANT __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/)
  {
    VARIANT Run;
    OLECHECK(this->Run(MacroName, safeArrayOfParams, (VARIANT*)&Run));
    return Run;
  }

  Office_xp::Assistant* __fastcall get_Assistant(void)
  {
    Office_xp::Assistant* ppVal;
    OLECHECK(this->get_Assistant((Office_xp::Assistant**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::FpConnectionSpeed __fastcall get_ConnectionSpeed(void)
  {
    Frontpage_xp::FpConnectionSpeed pConnectionSpeed;
    OLECHECK(this->get_ConnectionSpeed((Frontpage_xp::FpConnectionSpeed*)&pConnectionSpeed));
    return pConnectionSpeed;
  }

  long __fastcall get_OlderFile(void)
  {
    long plDays;
    OLECHECK(this->get_OlderFile((long*)&plDays));
    return plDays;
  }

  long __fastcall get_RecentFile(void)
  {
    long plDays;
    OLECHECK(this->get_RecentFile((long*)&plDays));
    return plDays;
  }

  long __fastcall get_SlowPage(void)
  {
    long plSeconds;
    OLECHECK(this->get_SlowPage((long*)&plSeconds));
    return plSeconds;
  }

  BSTR __fastcall ParseURL(BSTR Url/*[in]*/, Frontpage_xp::FpURLComponent URLComponent/*[in]*/)
  {
    BSTR pbzRelUrl = 0;
    OLECHECK(this->ParseURL(Url, URLComponent, (BSTR*)&pbzRelUrl));
    return pbzRelUrl;
  }

  Office_xp::FileDialog* __fastcall get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/)
  {
    Office_xp::FileDialog* ppVal;
    OLECHECK(this->get_FileDialog(DialogType, (Office_xp::FileDialog**)&ppVal));
    return ppVal;
  }

  Vbide_xp::VBE* __fastcall get_VBE(void)
  {
    Vbide_xp::VBE* ppVal;
    OLECHECK(this->get_VBE((Vbide_xp::VBE**)&ppVal));
    return ppVal;
  }

  long __fastcall get_MonthsShown(void)
  {
    long plMonths;
    OLECHECK(this->get_MonthsShown((long*)&plMonths));
    return plMonths;
  }

  Office_xp::NewFile* __fastcall get_NewPageorWeb(void)
  {
    Office_xp::NewFile* ppVal;
    OLECHECK(this->get_NewPageorWeb((Office_xp::NewFile**)&ppVal));
    return ppVal;
  }

  VARIANT_BOOL __fastcall get_ShowStartupDialog(void)
  {
    VARIANT_BOOL pfShowAtStartup;
    OLECHECK(this->get_ShowStartupDialog((VARIANT_BOOL*)&pfShowAtStartup));
    return pfShowAtStartup;
  }

  Frontpageeditor_xp::DispFPHTMLDocument* __fastcall get_ActiveDocument(void)
  {
    Frontpageeditor_xp::DispFPHTMLDocument* ppVal;
    OLECHECK(this->get_ActiveDocument((Frontpageeditor_xp::DispFPHTMLDocument**)&ppVal));
    return ppVal;
  }


  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   Frontpageeditor_xp::IHTMLDocument* _deprecated_ActiveDocument = {read = get__deprecated_ActiveDocument};
  __property   Frontpage_xp::PageWindow* ActivePageWindow = {read = get_ActivePageWindow};
  __property   Frontpage_xp::Web* ActiveWeb = {read = get_ActiveWeb};
  __property   Frontpage_xp::WebWindow* ActiveWebWindow = {read = get_ActiveWebWindow};
  __property   Office_xp::AnswerWizard* AnswerWizard = {read = get_AnswerWizard};
  __property   BSTR            Build = {read = get_Build};
  __property   Office_xp::COMAddIns* COMAddIns = {read = get_COMAddIns};
  __property   Office_xp::CommandBars* CommandBars = {read = get_CommandBars};
  __property   Office_xp::FileSearch* FileSearch = {read = get_FileSearch};
  __property   Office_xp::LanguageSettings* LanguageSettings = {read = get_LanguageSettings};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            OrganizationName = {read = get_OrganizationName};
  __property   Frontpage_xp::SYSTEM* System = {read = get_System};
  __property   Frontpage_xp::Themes* Themes = {read = get_Themes};
  __property   BSTR            UserName = {read = get_UserName};
  __property   BSTR            Version = {read = get_Version};
  __property   Frontpage_xp::Webs* Webs = {read = get_Webs};
  __property   Frontpage_xp::WebWindows* WebWindows = {read = get_WebWindows};
  __property   BSTR            ProductCode = {read = get_ProductCode};
  __property   Office_xp::Assistant* Assistant = {read = get_Assistant};
  __property   Frontpage_xp::FpConnectionSpeed ConnectionSpeed = {read = get_ConnectionSpeed, write = set_ConnectionSpeed};
  __property   long            OlderFile = {read = get_OlderFile, write = set_OlderFile};
  __property   long            RecentFile = {read = get_RecentFile, write = set_RecentFile};
  __property   long            SlowPage = {read = get_SlowPage, write = set_SlowPage};
  __property   Vbide_xp::VBE*  VBE = {read = get_VBE};
  __property   long            MonthsShown = {read = get_MonthsShown, write = set_MonthsShown};
  __property   Office_xp::NewFile* NewPageorWeb = {read = get_NewPageorWeb};
  __property   VARIANT_BOOL    ShowStartupDialog = {read = get_ShowStartupDialog, write = set_ShowStartupDialog};
  __property   Frontpageeditor_xp::DispFPHTMLDocument* ActiveDocument = {read = get_ActiveDocument};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4014-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
interface PageWindow  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocument** ppDocObj/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveFrameWindow(Frontpageeditor_xp::IHTMLWindow2** ppDocObj/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pszCaption/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get__deprecated_Document(Frontpageeditor_xp::IHTMLDocument** ppDocObj/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_File(Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_FrameWindow(Frontpageeditor_xp::IHTMLWindow2** ppFrameWindowObj/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_IsDirty(VARIANT_BOOL* pfIsDirty/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/, 
                                                        VARIANT* ppv/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_ViewMode(Frontpage_xp::FpPageViewMode* pviewMode/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_ViewMode(Frontpage_xp::FpPageViewMode pviewMode/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pfIsWindowVisible/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE ApplyTheme(BSTR ThemeName/*[in]*/, 
                                               Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE Close(VARIANT_BOOL ForceSave/*[in,def,opt]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE Refresh(VARIANT_BOOL SaveChanges/*[in,def,opt]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE Save(VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE SaveAs(BSTR DestinationUrl/*[in]*/, 
                                           VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_PreviewDocument(Frontpageeditor_xp::IHTMLDocument** ppIEDoc/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocument** ppDocObj/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_Document(Frontpageeditor_xp::DispFPHTMLDocument** ppDocObj/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_IsDirty(VARIANT_BOOL pfIsDirty/*[in]*/) = 0; // [9]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpageeditor_xp::IHTMLDocument* __fastcall get__deprecated_ActiveDocument(void)
  {
    Frontpageeditor_xp::IHTMLDocument* ppDocObj;
    OLECHECK(this->get__deprecated_ActiveDocument((Frontpageeditor_xp::IHTMLDocument**)&ppDocObj));
    return ppDocObj;
  }

  Frontpageeditor_xp::IHTMLWindow2* __fastcall get_ActiveFrameWindow(void)
  {
    Frontpageeditor_xp::IHTMLWindow2* ppDocObj;
    OLECHECK(this->get_ActiveFrameWindow((Frontpageeditor_xp::IHTMLWindow2**)&ppDocObj));
    return ppDocObj;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pszCaption = 0;
    OLECHECK(this->get_Caption((BSTR*)&pszCaption));
    return pszCaption;
  }

  Frontpageeditor_xp::IHTMLDocument* __fastcall get__deprecated_Document(void)
  {
    Frontpageeditor_xp::IHTMLDocument* ppDocObj;
    OLECHECK(this->get__deprecated_Document((Frontpageeditor_xp::IHTMLDocument**)&ppDocObj));
    return ppDocObj;
  }

  Frontpage_xp::WebFile* __fastcall get_File(void)
  {
    Frontpage_xp::WebFile* ppFileObj;
    OLECHECK(this->get_File((Frontpage_xp::WebFile**)&ppFileObj));
    return ppFileObj;
  }

  Frontpageeditor_xp::IHTMLWindow2* __fastcall get_FrameWindow(void)
  {
    Frontpageeditor_xp::IHTMLWindow2* ppFrameWindowObj;
    OLECHECK(this->get_FrameWindow((Frontpageeditor_xp::IHTMLWindow2**)&ppFrameWindowObj));
    return ppFrameWindowObj;
  }

  VARIANT_BOOL __fastcall get_IsDirty(void)
  {
    VARIANT_BOOL pfIsDirty;
    OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&pfIsDirty));
    return pfIsDirty;
  }

  VARIANT __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/)
  {
    VARIANT ppv;
    OLECHECK(this->get_ThemeProperties(PropertyIndex, (VARIANT*)&ppv));
    return ppv;
  }

  Frontpage_xp::FpPageViewMode __fastcall get_ViewMode(void)
  {
    Frontpage_xp::FpPageViewMode pviewMode;
    OLECHECK(this->get_ViewMode((Frontpage_xp::FpPageViewMode*)&pviewMode));
    return pviewMode;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pfIsWindowVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pfIsWindowVisible));
    return pfIsWindowVisible;
  }

  Frontpage_xp::Web* __fastcall get_Web(void)
  {
    Frontpage_xp::Web* ppVal;
    OLECHECK(this->get_Web((Frontpage_xp::Web**)&ppVal));
    return ppVal;
  }

  Frontpageeditor_xp::IHTMLDocument* __fastcall get_PreviewDocument(void)
  {
    Frontpageeditor_xp::IHTMLDocument* ppIEDoc;
    OLECHECK(this->get_PreviewDocument((Frontpageeditor_xp::IHTMLDocument**)&ppIEDoc));
    return ppIEDoc;
  }

  Frontpageeditor_xp::DispFPHTMLDocument* __fastcall get_ActiveDocument(void)
  {
    Frontpageeditor_xp::DispFPHTMLDocument* ppDocObj;
    OLECHECK(this->get_ActiveDocument((Frontpageeditor_xp::DispFPHTMLDocument**)&ppDocObj));
    return ppDocObj;
  }

  Frontpageeditor_xp::DispFPHTMLDocument* __fastcall get_Document(void)
  {
    Frontpageeditor_xp::DispFPHTMLDocument* ppDocObj;
    OLECHECK(this->get_Document((Frontpageeditor_xp::DispFPHTMLDocument**)&ppDocObj));
    return ppDocObj;
  }


  __property   Frontpageeditor_xp::IHTMLDocument* _deprecated_ActiveDocument = {read = get__deprecated_ActiveDocument};
  __property   Frontpageeditor_xp::IHTMLWindow2* ActiveFrameWindow = {read = get_ActiveFrameWindow};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Frontpageeditor_xp::IHTMLDocument* _deprecated_Document = {read = get__deprecated_Document};
  __property   Frontpage_xp::WebFile* File = {read = get_File};
  __property   Frontpageeditor_xp::IHTMLWindow2* FrameWindow = {read = get_FrameWindow};
  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   Frontpage_xp::FpPageViewMode ViewMode = {read = get_ViewMode, write = set_ViewMode};
  __property   VARIANT_BOOL    Visible = {read = get_Visible};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   Frontpageeditor_xp::IHTMLDocument* PreviewDocument = {read = get_PreviewDocument};
  __property   Frontpageeditor_xp::DispFPHTMLDocument* ActiveDocument = {read = get_ActiveDocument};
  __property   Frontpageeditor_xp::DispFPHTMLDocument* Document = {read = get_Document};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WebFile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4049-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
interface WebFile  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Creator(BSTR* pbzFileCreatorProgId/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_CheckedoutBy(BSTR* pbzFileCheckedOutBy/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Extension(BSTR* pbzFileExtension/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_IsOpen(VARIANT_BOOL* pfIsOpenInEditor/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Frontpage_xp::Properties** ppProperties/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_MetaTags(Frontpage_xp::MetaTags** ppProperties/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbzFileBaseName/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_NavigationNode(Frontpage_xp::NavigationNode** ppNavigationNode/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                                                      VARIANT* ppv/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                                                      VARIANT* ppv/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/, 
                                                        VARIANT* ppv/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_Title(BSTR* pbzTitle/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_Title(BSTR pbzTitle/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_Url(BSTR* pbzUrl/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE ApplyTheme(BSTR ThemeName/*[in]*/, 
                                               Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE Checkin(BSTR Comment/*[in,def,opt]*/, 
                                            VARIANT_BOOL KeepCheckedout/*[in,def,opt]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE Checkout(VARIANT_BOOL ForceCheckout/*[in,def,opt]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE Copy(BSTR DestinationUrl/*[in]*/, 
                                         VARIANT_BOOL Unused/*[in,def,opt]*/, 
                                         VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Edit(Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/, 
                                         Frontpage_xp::PageWindow** ppPageObject/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE Move(BSTR DestinationUrl/*[in]*/, 
                                         VARIANT_BOOL UpdateLinks/*[in,def,opt]*/, 
                                         VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Open(void) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE UndoCheckout(void) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_IsOrphan(VARIANT_BOOL* pIsOrphan/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_DownloadTime(long* plSeconds/*[out,retval]*/) = 0; // [26]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Creator(void)
  {
    BSTR pbzFileCreatorProgId = 0;
    OLECHECK(this->get_Creator((BSTR*)&pbzFileCreatorProgId));
    return pbzFileCreatorProgId;
  }

  BSTR __fastcall get_CheckedoutBy(void)
  {
    BSTR pbzFileCheckedOutBy = 0;
    OLECHECK(this->get_CheckedoutBy((BSTR*)&pbzFileCheckedOutBy));
    return pbzFileCheckedOutBy;
  }

  BSTR __fastcall get_Extension(void)
  {
    BSTR pbzFileExtension = 0;
    OLECHECK(this->get_Extension((BSTR*)&pbzFileExtension));
    return pbzFileExtension;
  }

  VARIANT_BOOL __fastcall get_IsOpen(void)
  {
    VARIANT_BOOL pfIsOpenInEditor;
    OLECHECK(this->get_IsOpen((VARIANT_BOOL*)&pfIsOpenInEditor));
    return pfIsOpenInEditor;
  }

  Frontpage_xp::Properties* __fastcall get_Properties(void)
  {
    Frontpage_xp::Properties* ppProperties;
    OLECHECK(this->get_Properties((Frontpage_xp::Properties**)&ppProperties));
    return ppProperties;
  }

  Frontpage_xp::MetaTags* __fastcall get_MetaTags(void)
  {
    Frontpage_xp::MetaTags* ppProperties;
    OLECHECK(this->get_MetaTags((Frontpage_xp::MetaTags**)&ppProperties));
    return ppProperties;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbzFileBaseName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbzFileBaseName));
    return pbzFileBaseName;
  }

  Frontpage_xp::NavigationNode* __fastcall get_NavigationNode(void)
  {
    Frontpage_xp::NavigationNode* ppNavigationNode;
    OLECHECK(this->get_NavigationNode((Frontpage_xp::NavigationNode**)&ppNavigationNode));
    return ppNavigationNode;
  }

  VARIANT __fastcall get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/)
  {
    VARIANT ppv;
    OLECHECK(this->get_SharedBorders(BorderIndex, (VARIANT*)&ppv));
    return ppv;
  }

  VARIANT __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/)
  {
    VARIANT ppv;
    OLECHECK(this->get_ThemeProperties(PropertyIndex, (VARIANT*)&ppv));
    return ppv;
  }

  BSTR __fastcall get_Title(void)
  {
    BSTR pbzTitle = 0;
    OLECHECK(this->get_Title((BSTR*)&pbzTitle));
    return pbzTitle;
  }

  BSTR __fastcall get_Url(void)
  {
    BSTR pbzUrl = 0;
    OLECHECK(this->get_Url((BSTR*)&pbzUrl));
    return pbzUrl;
  }

  Frontpage_xp::Web* __fastcall get_Web(void)
  {
    Frontpage_xp::Web* ppVal;
    OLECHECK(this->get_Web((Frontpage_xp::Web**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::PageWindow* __fastcall Edit(Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/)
  {
    Frontpage_xp::PageWindow* ppPageObject;
    OLECHECK(this->Edit(ViewMode, (Frontpage_xp::PageWindow**)&ppPageObject));
    return ppPageObject;
  }

  VARIANT_BOOL __fastcall get_IsOrphan(void)
  {
    VARIANT_BOOL pIsOrphan;
    OLECHECK(this->get_IsOrphan((VARIANT_BOOL*)&pIsOrphan));
    return pIsOrphan;
  }

  long __fastcall get_DownloadTime(void)
  {
    long plSeconds;
    OLECHECK(this->get_DownloadTime((long*)&plSeconds));
    return plSeconds;
  }


  __property   BSTR            Creator = {read = get_Creator};
  __property   BSTR            CheckedoutBy = {read = get_CheckedoutBy};
  __property   BSTR            Extension = {read = get_Extension};
  __property   VARIANT_BOOL    IsOpen = {read = get_IsOpen};
  __property   Frontpage_xp::Properties* Properties = {read = get_Properties};
  __property   Frontpage_xp::MetaTags* MetaTags = {read = get_MetaTags};
  __property   BSTR            Name = {read = get_Name};
  __property   Frontpage_xp::NavigationNode* NavigationNode = {read = get_NavigationNode};
  __property   BSTR            Title = {read = get_Title};
  __property   BSTR            Url = {read = get_Url};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   VARIANT_BOOL    IsOrphan = {read = get_IsOrphan};
  __property   long            DownloadTime = {read = get_DownloadTime};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Properties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E67C7ADC-F4F5-11D1-B0E0-00C04FA30A8B}
// *********************************************************************//
interface Properties  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(BSTR PropertyKey/*[in]*/, 
                                             VARIANT* ppvtVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Item(BSTR PropertyKey/*[in]*/, VARIANT* ppvtVal/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR PropertyKey/*[in]*/, VARIANT* PropertyValue/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Delete(BSTR PropertyKey) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE ApplyChanges(void) = 0; // [6]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  VARIANT __fastcall get_Item(BSTR PropertyKey/*[in]*/)
  {
    VARIANT ppvtVal;
    OLECHECK(this->get_Item(PropertyKey, (VARIANT*)&ppvtVal));
    return ppvtVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: MetaTags
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2FC94518-0413-11D2-B0E9-00C04FA30A8B}
// *********************************************************************//
interface MetaTags  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(BSTR PropertyKey/*[in]*/, 
                                             VARIANT* PropertyValue/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  VARIANT __fastcall get_Item(BSTR PropertyKey/*[in]*/)
  {
    VARIANT PropertyValue;
    OLECHECK(this->get_Item(PropertyKey, (VARIANT*)&PropertyValue));
    return PropertyValue;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: NavigationNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8905FB0-E5F2-11D1-B0DE-00C04FA30A8B}
// *********************************************************************//
interface NavigationNode  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Children(Frontpage_xp::NavigationNodes** ppNodesChildren/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_File(Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Home(Frontpage_xp::NavigationNode** ppHomeNavigationNode/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Label(BSTR* pbzNavViewNodeLabel/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_Label(BSTR pbzNavViewNodeLabel/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_Url(BSTR* pbzUrl/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Next(Frontpage_xp::NavigationNode** ppNavigationNode/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Prev(Frontpage_xp::NavigationNode** ppNavigationNode/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_Web(Frontpage_xp::Web** ppWebObject/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Move(Frontpage_xp::NavigationNodes* NodeCollection/*[in]*/, 
                                         VARIANT* NewLeftSibling/*[in,opt]*/, 
                                         Frontpage_xp::NavigationNode** ppStruct/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_InNavBars(VARIANT_BOOL* pbInNavBars/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_InNavBars(VARIANT_BOOL pbInNavBars/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_SubTree(Frontpage_xp::NavigationNodes** ppNodesSubTree/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_IsLinkBar(VARIANT_BOOL* pbIsLinkBar/*[out,retval]*/) = 0; // [14]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::NavigationNodes* __fastcall get_Children(void)
  {
    Frontpage_xp::NavigationNodes* ppNodesChildren;
    OLECHECK(this->get_Children((Frontpage_xp::NavigationNodes**)&ppNodesChildren));
    return ppNodesChildren;
  }

  Frontpage_xp::WebFile* __fastcall get_File(void)
  {
    Frontpage_xp::WebFile* ppFileObj;
    OLECHECK(this->get_File((Frontpage_xp::WebFile**)&ppFileObj));
    return ppFileObj;
  }

  Frontpage_xp::NavigationNode* __fastcall get_Home(void)
  {
    Frontpage_xp::NavigationNode* ppHomeNavigationNode;
    OLECHECK(this->get_Home((Frontpage_xp::NavigationNode**)&ppHomeNavigationNode));
    return ppHomeNavigationNode;
  }

  BSTR __fastcall get_Label(void)
  {
    BSTR pbzNavViewNodeLabel = 0;
    OLECHECK(this->get_Label((BSTR*)&pbzNavViewNodeLabel));
    return pbzNavViewNodeLabel;
  }

  BSTR __fastcall get_Url(void)
  {
    BSTR pbzUrl = 0;
    OLECHECK(this->get_Url((BSTR*)&pbzUrl));
    return pbzUrl;
  }

  Frontpage_xp::NavigationNode* __fastcall get_Next(void)
  {
    Frontpage_xp::NavigationNode* ppNavigationNode;
    OLECHECK(this->get_Next((Frontpage_xp::NavigationNode**)&ppNavigationNode));
    return ppNavigationNode;
  }

  Frontpage_xp::NavigationNode* __fastcall get_Prev(void)
  {
    Frontpage_xp::NavigationNode* ppNavigationNode;
    OLECHECK(this->get_Prev((Frontpage_xp::NavigationNode**)&ppNavigationNode));
    return ppNavigationNode;
  }

  Frontpage_xp::Web* __fastcall get_Web(void)
  {
    Frontpage_xp::Web* ppWebObject;
    OLECHECK(this->get_Web((Frontpage_xp::Web**)&ppWebObject));
    return ppWebObject;
  }

  Frontpage_xp::NavigationNode* __fastcall Move(Frontpage_xp::NavigationNodes* NodeCollection/*[in]*/, 
                                                VARIANT* NewLeftSibling/*[in,opt]*/= TNoParam())
  {
    Frontpage_xp::NavigationNode* ppStruct;
    OLECHECK(this->Move(NodeCollection, NewLeftSibling, (Frontpage_xp::NavigationNode**)&ppStruct));
    return ppStruct;
  }

  VARIANT_BOOL __fastcall get_InNavBars(void)
  {
    VARIANT_BOOL pbInNavBars;
    OLECHECK(this->get_InNavBars((VARIANT_BOOL*)&pbInNavBars));
    return pbInNavBars;
  }

  Frontpage_xp::NavigationNodes* __fastcall get_SubTree(void)
  {
    Frontpage_xp::NavigationNodes* ppNodesSubTree;
    OLECHECK(this->get_SubTree((Frontpage_xp::NavigationNodes**)&ppNodesSubTree));
    return ppNodesSubTree;
  }

  VARIANT_BOOL __fastcall get_IsLinkBar(void)
  {
    VARIANT_BOOL pbIsLinkBar;
    OLECHECK(this->get_IsLinkBar((VARIANT_BOOL*)&pbIsLinkBar));
    return pbIsLinkBar;
  }


  __property   Frontpage_xp::NavigationNodes* Children = {read = get_Children};
  __property   Frontpage_xp::WebFile* File = {read = get_File};
  __property   Frontpage_xp::NavigationNode* Home = {read = get_Home};
  __property   BSTR            Label = {read = get_Label};
  __property   BSTR            Url = {read = get_Url};
  __property   Frontpage_xp::NavigationNode* Next = {read = get_Next};
  __property   Frontpage_xp::NavigationNode* Prev = {read = get_Prev};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   VARIANT_BOOL    InNavBars = {read = get_InNavBars, write = set_InNavBars};
  __property   Frontpage_xp::NavigationNodes* SubTree = {read = get_SubTree};
  __property   VARIANT_BOOL    IsLinkBar = {read = get_IsLinkBar};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: NavigationNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {435789D4-E5DC-11D1-B0DE-00C04FA30A8B}
// *********************************************************************//
interface NavigationNodes  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Frontpage_xp::NavigationNode** ppVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Url/*[in]*/, BSTR NodeLabel/*[in]*/, 
                                        Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                                        VARIANT* LeftSibling/*[in,opt]*/, 
                                        Frontpage_xp::NavigationNode** ppStruct/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT* Index/*[in,opt]*/= TNoParam()) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE AddLinkBar(BSTR NodeLabel/*[in]*/, 
                                               Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                                               VARIANT* LeftSibling/*[in,opt]*/, 
                                               Frontpage_xp::NavigationNode** ppStruct/*[out,retval]*/) = 0; // [6]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  Frontpage_xp::NavigationNode* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Frontpage_xp::NavigationNode* ppVal;
    OLECHECK(this->get_Item(Index, (Frontpage_xp::NavigationNode**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::NavigationNode* __fastcall Add(BSTR Url/*[in]*/, BSTR NodeLabel/*[in]*/, 
                                               Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                                               VARIANT* LeftSibling/*[in,opt]*/= TNoParam())
  {
    Frontpage_xp::NavigationNode* ppStruct;
    OLECHECK(this->Add(Url, NodeLabel, ModificationType, LeftSibling, (Frontpage_xp::NavigationNode**)&ppStruct));
    return ppStruct;
  }

  Frontpage_xp::NavigationNode* __fastcall AddLinkBar(BSTR NodeLabel/*[in]*/, 
                                                      Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                                                      VARIANT* LeftSibling/*[in,opt]*/= TNoParam())
  {
    Frontpage_xp::NavigationNode* ppStruct;
    OLECHECK(this->AddLinkBar(NodeLabel, ModificationType, LeftSibling, (Frontpage_xp::NavigationNode**)&ppStruct));
    return ppStruct;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Web
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {95B21741-CA4A-11D1-83D5-006097ABE675}
// *********************************************************************//
interface Web  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWebWindow(Frontpage_xp::WebWindow** ppActiveWebWindow/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_AllowsLongFilenames(VARIANT_BOOL* pbAllowLongFileNames/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_RootNavigationNode(Frontpage_xp::NavigationNode** ppRootNavigationNode/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_HomeNavigationNode(Frontpage_xp::NavigationNode** ppRootNavigationNode/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_IsUnderRevisionControl(VARIANT_BOOL* pbIsUnderRCS/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Frontpage_xp::Properties** ppProps/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_RevisionControlProject(BSTR* pbzRCSProjectName/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_RevisionControlProject(BSTR pbzRCSProjectName/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_RootFolder(Frontpage_xp::WebFolder** ppRootFolder/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                                                      VARIANT* ppv/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                                                      VARIANT* ppv/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/, 
                                                        VARIANT* ppv/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_Themes(Frontpage_xp::Themes** ppThemesInWeb/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_Title(BSTR* szWebTitle/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_Title(BSTR szWebTitle/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_Url(BSTR* szWebUrl/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_WebWindows(Frontpage_xp::WebWindows** ppVal/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE ApplyTheme(BSTR ThemeName/*[in]*/, 
                                               Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE CancelRequests(void) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Delete(Frontpage_xp::FpWebDeleteFlags WebDeleteFlags/*[in,def,opt]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE LocateFile(BSTR FileUrl/*[in]*/, 
                                               Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE LocateFolder(BSTR FolderUrl/*[in]*/, 
                                                 Frontpage_xp::WebFolder** ppFolderObj/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE LocatePage(BSTR FileUrl/*[in]*/, 
                                               Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/, 
                                               Frontpage_xp::PageWindow** ppObj/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE Publish(BSTR DestinationUrl/*[in]*/, 
                                            Frontpage_xp::FpWebPublishFlags PublishFlags/*[in,def,opt]*/, 
                                            BSTR UserName/*[in,def,opt]*/, 
                                            BSTR Password/*[in,def,opt]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE RecalcHyperlinks(void) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE Refresh(VARIANT_BOOL FetchAll/*[in,def,opt]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE ApplyNavigationStructure(void) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_IsHiddenFoldersEnabled(VARIANT_BOOL* pbIsHiddenFoldersEnabled/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_IsHiddenFoldersEnabled(VARIANT_BOOL pbIsHiddenFoldersEnabled/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_AllFiles(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_AllFolders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE get_AllNavigationNodes(Frontpage_xp::NavigationNodes** ppNodes/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE ApplyTemplate(BSTR TemplateDir/*[in]*/, 
                                                  VARIANT_BOOL fOverWrite/*[in,def,opt]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_Lists(Frontpage_xp::_Lists** ppLists/*[out,retval]*/) = 0; // [34]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::WebWindow* __fastcall get_ActiveWebWindow(void)
  {
    Frontpage_xp::WebWindow* ppActiveWebWindow;
    OLECHECK(this->get_ActiveWebWindow((Frontpage_xp::WebWindow**)&ppActiveWebWindow));
    return ppActiveWebWindow;
  }

  VARIANT_BOOL __fastcall get_AllowsLongFilenames(void)
  {
    VARIANT_BOOL pbAllowLongFileNames;
    OLECHECK(this->get_AllowsLongFilenames((VARIANT_BOOL*)&pbAllowLongFileNames));
    return pbAllowLongFileNames;
  }

  Frontpage_xp::NavigationNode* __fastcall get_RootNavigationNode(void)
  {
    Frontpage_xp::NavigationNode* ppRootNavigationNode;
    OLECHECK(this->get_RootNavigationNode((Frontpage_xp::NavigationNode**)&ppRootNavigationNode));
    return ppRootNavigationNode;
  }

  Frontpage_xp::NavigationNode* __fastcall get_HomeNavigationNode(void)
  {
    Frontpage_xp::NavigationNode* ppRootNavigationNode;
    OLECHECK(this->get_HomeNavigationNode((Frontpage_xp::NavigationNode**)&ppRootNavigationNode));
    return ppRootNavigationNode;
  }

  VARIANT_BOOL __fastcall get_IsUnderRevisionControl(void)
  {
    VARIANT_BOOL pbIsUnderRCS;
    OLECHECK(this->get_IsUnderRevisionControl((VARIANT_BOOL*)&pbIsUnderRCS));
    return pbIsUnderRCS;
  }

  Frontpage_xp::Properties* __fastcall get_Properties(void)
  {
    Frontpage_xp::Properties* ppProps;
    OLECHECK(this->get_Properties((Frontpage_xp::Properties**)&ppProps));
    return ppProps;
  }

  BSTR __fastcall get_RevisionControlProject(void)
  {
    BSTR pbzRCSProjectName = 0;
    OLECHECK(this->get_RevisionControlProject((BSTR*)&pbzRCSProjectName));
    return pbzRCSProjectName;
  }

  Frontpage_xp::WebFolder* __fastcall get_RootFolder(void)
  {
    Frontpage_xp::WebFolder* ppRootFolder;
    OLECHECK(this->get_RootFolder((Frontpage_xp::WebFolder**)&ppRootFolder));
    return ppRootFolder;
  }

  VARIANT __fastcall get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/)
  {
    VARIANT ppv;
    OLECHECK(this->get_SharedBorders(BorderIndex, (VARIANT*)&ppv));
    return ppv;
  }

  VARIANT __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/)
  {
    VARIANT ppv;
    OLECHECK(this->get_ThemeProperties(PropertyIndex, (VARIANT*)&ppv));
    return ppv;
  }

  Frontpage_xp::Themes* __fastcall get_Themes(void)
  {
    Frontpage_xp::Themes* ppThemesInWeb;
    OLECHECK(this->get_Themes((Frontpage_xp::Themes**)&ppThemesInWeb));
    return ppThemesInWeb;
  }

  BSTR __fastcall get_Title(void)
  {
    BSTR szWebTitle = 0;
    OLECHECK(this->get_Title((BSTR*)&szWebTitle));
    return szWebTitle;
  }

  BSTR __fastcall get_Url(void)
  {
    BSTR szWebUrl = 0;
    OLECHECK(this->get_Url((BSTR*)&szWebUrl));
    return szWebUrl;
  }

  Frontpage_xp::WebWindows* __fastcall get_WebWindows(void)
  {
    Frontpage_xp::WebWindows* ppVal;
    OLECHECK(this->get_WebWindows((Frontpage_xp::WebWindows**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::WebFile* __fastcall LocateFile(BSTR FileUrl/*[in]*/)
  {
    Frontpage_xp::WebFile* ppFileObj;
    OLECHECK(this->LocateFile(FileUrl, (Frontpage_xp::WebFile**)&ppFileObj));
    return ppFileObj;
  }

  Frontpage_xp::WebFolder* __fastcall LocateFolder(BSTR FolderUrl/*[in]*/)
  {
    Frontpage_xp::WebFolder* ppFolderObj;
    OLECHECK(this->LocateFolder(FolderUrl, (Frontpage_xp::WebFolder**)&ppFolderObj));
    return ppFolderObj;
  }

  Frontpage_xp::PageWindow* __fastcall LocatePage(BSTR FileUrl/*[in]*/, 
                                                  Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/)
  {
    Frontpage_xp::PageWindow* ppObj;
    OLECHECK(this->LocatePage(FileUrl, ViewMode, (Frontpage_xp::PageWindow**)&ppObj));
    return ppObj;
  }

  VARIANT_BOOL __fastcall get_IsHiddenFoldersEnabled(void)
  {
    VARIANT_BOOL pbIsHiddenFoldersEnabled;
    OLECHECK(this->get_IsHiddenFoldersEnabled((VARIANT_BOOL*)&pbIsHiddenFoldersEnabled));
    return pbIsHiddenFoldersEnabled;
  }

  Frontpage_xp::WebFiles* __fastcall get_AllFiles(void)
  {
    Frontpage_xp::WebFiles* ppFilesCollection;
    OLECHECK(this->get_AllFiles((Frontpage_xp::WebFiles**)&ppFilesCollection));
    return ppFilesCollection;
  }

  Frontpage_xp::WebFolders* __fastcall get_AllFolders(void)
  {
    Frontpage_xp::WebFolders* ppFoldersCollection;
    OLECHECK(this->get_AllFolders((Frontpage_xp::WebFolders**)&ppFoldersCollection));
    return ppFoldersCollection;
  }

  Frontpage_xp::NavigationNodes* __fastcall get_AllNavigationNodes(void)
  {
    Frontpage_xp::NavigationNodes* ppNodes;
    OLECHECK(this->get_AllNavigationNodes((Frontpage_xp::NavigationNodes**)&ppNodes));
    return ppNodes;
  }

  Frontpage_xp::_Lists* __fastcall get_Lists(void)
  {
    Frontpage_xp::_Lists* ppLists;
    OLECHECK(this->get_Lists((Frontpage_xp::_Lists**)&ppLists));
    return ppLists;
  }


  __property   Frontpage_xp::WebWindow* ActiveWebWindow = {read = get_ActiveWebWindow};
  __property   VARIANT_BOOL    AllowsLongFilenames = {read = get_AllowsLongFilenames};
  __property   Frontpage_xp::NavigationNode* RootNavigationNode = {read = get_RootNavigationNode};
  __property   Frontpage_xp::NavigationNode* HomeNavigationNode = {read = get_HomeNavigationNode};
  __property   VARIANT_BOOL    IsUnderRevisionControl = {read = get_IsUnderRevisionControl};
  __property   Frontpage_xp::Properties* Properties = {read = get_Properties};
  __property   BSTR            RevisionControlProject = {read = get_RevisionControlProject};
  __property   Frontpage_xp::WebFolder* RootFolder = {read = get_RootFolder};
  __property   Frontpage_xp::Themes* Themes = {read = get_Themes};
  __property   BSTR            Title = {read = get_Title};
  __property   BSTR            Url = {read = get_Url};
  __property   Frontpage_xp::WebWindows* WebWindows = {read = get_WebWindows};
  __property   VARIANT_BOOL    IsHiddenFoldersEnabled = {read = get_IsHiddenFoldersEnabled, write = set_IsHiddenFoldersEnabled};
  __property   Frontpage_xp::WebFiles* AllFiles = {read = get_AllFiles};
  __property   Frontpage_xp::WebFolders* AllFolders = {read = get_AllFolders};
  __property   Frontpage_xp::NavigationNodes* AllNavigationNodes = {read = get_AllNavigationNodes};
  __property   Frontpage_xp::_Lists* Lists = {read = get_Lists};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WebWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6B735741-FA41-11D1-83DC-006097ABE675}
// *********************************************************************//
interface WebWindow  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActivePageWindow(Frontpage_xp::PageWindow** ppVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Caption(BSTR* pVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_PageWindows(Frontpage_xp::PageWindows** ppVal/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_ViewMode(Frontpage_xp::FpWebViewMode* pviewMode/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_ViewMode(Frontpage_xp::FpWebViewMode pviewMode/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* pfIsWindowVisible/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL pfIsWindowVisible/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_SelectedFiles(LPSAFEARRAY* psa/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_SelectedFolders(LPSAFEARRAY* psa/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Activate(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_ViewModeEx(Frontpage_xp::FpWebViewModeEx* pviewModeEx/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_ViewModeEx(Frontpage_xp::FpWebViewModeEx pviewModeEx/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE VerifyAllLinks(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE SaveReport(Frontpage_xp::FpWebViewModeEx reportviewModeEx/*[in]*/, 
                                               BSTR DestinationUrl/*[in]*/, BSTR Title/*[in]*/, 
                                               VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_SubViewMode(Frontpage_xp::FpWebSubView* pSubView/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_SubViewMode(Frontpage_xp::FpWebSubView pSubView/*[in]*/) = 0; // [16]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::PageWindow* __fastcall get_ActivePageWindow(void)
  {
    Frontpage_xp::PageWindow* ppVal;
    OLECHECK(this->get_ActivePageWindow((Frontpage_xp::PageWindow**)&ppVal));
    return ppVal;
  }

  BSTR __fastcall get_Caption(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Caption((BSTR*)&pVal));
    return pVal;
  }

  Frontpage_xp::Web* __fastcall get_Web(void)
  {
    Frontpage_xp::Web* ppVal;
    OLECHECK(this->get_Web((Frontpage_xp::Web**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::PageWindows* __fastcall get_PageWindows(void)
  {
    Frontpage_xp::PageWindows* ppVal;
    OLECHECK(this->get_PageWindows((Frontpage_xp::PageWindows**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::FpWebViewMode __fastcall get_ViewMode(void)
  {
    Frontpage_xp::FpWebViewMode pviewMode;
    OLECHECK(this->get_ViewMode((Frontpage_xp::FpWebViewMode*)&pviewMode));
    return pviewMode;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL pfIsWindowVisible;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&pfIsWindowVisible));
    return pfIsWindowVisible;
  }

  LPSAFEARRAY __fastcall get_SelectedFiles(void)
  {
    LPSAFEARRAY psa;
    OLECHECK(this->get_SelectedFiles((LPSAFEARRAY*)&psa));
    return psa;
  }

  LPSAFEARRAY __fastcall get_SelectedFolders(void)
  {
    LPSAFEARRAY psa;
    OLECHECK(this->get_SelectedFolders((LPSAFEARRAY*)&psa));
    return psa;
  }

  Frontpage_xp::FpWebViewModeEx __fastcall get_ViewModeEx(void)
  {
    Frontpage_xp::FpWebViewModeEx pviewModeEx;
    OLECHECK(this->get_ViewModeEx((Frontpage_xp::FpWebViewModeEx*)&pviewModeEx));
    return pviewModeEx;
  }

  Frontpage_xp::FpWebSubView __fastcall get_SubViewMode(void)
  {
    Frontpage_xp::FpWebSubView pSubView;
    OLECHECK(this->get_SubViewMode((Frontpage_xp::FpWebSubView*)&pSubView));
    return pSubView;
  }


  __property   Frontpage_xp::PageWindow* ActivePageWindow = {read = get_ActivePageWindow};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   Frontpage_xp::PageWindows* PageWindows = {read = get_PageWindows};
  __property   Frontpage_xp::FpWebViewMode ViewMode = {read = get_ViewMode, write = set_ViewMode};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   Frontpage_xp::FpWebViewModeEx ViewModeEx = {read = get_ViewModeEx, write = set_ViewModeEx};
  __property   Frontpage_xp::FpWebSubView SubViewMode = {read = get_SubViewMode, write = set_SubViewMode};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: PageWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4042-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
interface PageWindows  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Frontpage_xp::PageWindow** ppVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR FileUrl/*[in,def,opt]*/, 
                                        Frontpage_xp::PageWindow** ppVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Close(VARIANT* Index/*[in,opt]*/, 
                                          VARIANT_BOOL ForceSave/*[in,def,opt]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  Frontpage_xp::PageWindow* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Frontpage_xp::PageWindow* ppVal;
    OLECHECK(this->get_Item(Index, (Frontpage_xp::PageWindow**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::PageWindow* __fastcall Add(BSTR FileUrl/*[in,def,opt]*/)
  {
    Frontpage_xp::PageWindow* ppVal;
    OLECHECK(this->Add(FileUrl, (Frontpage_xp::PageWindow**)&ppVal));
    return ppVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WebFolder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB404D-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
interface WebFolder  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Files(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Folders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_IsExecutable(VARIANT_BOOL* pfIsExecutable/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_IsExecutable(VARIANT_BOOL pfIsExecutable/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_IsReadable(VARIANT_BOOL* pfIsReadable/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_IsReadable(VARIANT_BOOL pfIsReadable/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_IsRoot(VARIANT_BOOL* pfIsRootFolder/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_IsWeb(VARIANT_BOOL* pvfIsSubweb/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_IsWritable(VARIANT_BOOL* pfIsWritable/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbzFolderName/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Frontpage_xp::Properties** ppProps/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Url(BSTR* pbzFolderUrl/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE Copy(BSTR DestinationUrl/*[in]*/, 
                                         VARIANT_BOOL Unused/*[in,def,opt]*/, 
                                         VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE MakeWeb(BSTR UserName/*[in,def,opt]*/, 
                                            BSTR Password/*[in,def,opt]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE RemoveWeb(BSTR UserName/*[in,def,opt]*/, 
                                              BSTR Password/*[in,def,opt]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE Move(BSTR DestinationUrl/*[in]*/, 
                                         VARIANT_BOOL UpdateLinks/*[in,def,opt]*/, 
                                         VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_AllFiles(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_AllFolders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_List(Frontpage_xp::_List** ppList/*[out,retval]*/) = 0; // [21]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::WebFiles* __fastcall get_Files(void)
  {
    Frontpage_xp::WebFiles* ppFilesCollection;
    OLECHECK(this->get_Files((Frontpage_xp::WebFiles**)&ppFilesCollection));
    return ppFilesCollection;
  }

  Frontpage_xp::WebFolders* __fastcall get_Folders(void)
  {
    Frontpage_xp::WebFolders* ppFoldersCollection;
    OLECHECK(this->get_Folders((Frontpage_xp::WebFolders**)&ppFoldersCollection));
    return ppFoldersCollection;
  }

  VARIANT_BOOL __fastcall get_IsExecutable(void)
  {
    VARIANT_BOOL pfIsExecutable;
    OLECHECK(this->get_IsExecutable((VARIANT_BOOL*)&pfIsExecutable));
    return pfIsExecutable;
  }

  VARIANT_BOOL __fastcall get_IsReadable(void)
  {
    VARIANT_BOOL pfIsReadable;
    OLECHECK(this->get_IsReadable((VARIANT_BOOL*)&pfIsReadable));
    return pfIsReadable;
  }

  VARIANT_BOOL __fastcall get_IsRoot(void)
  {
    VARIANT_BOOL pfIsRootFolder;
    OLECHECK(this->get_IsRoot((VARIANT_BOOL*)&pfIsRootFolder));
    return pfIsRootFolder;
  }

  VARIANT_BOOL __fastcall get_IsWeb(void)
  {
    VARIANT_BOOL pvfIsSubweb;
    OLECHECK(this->get_IsWeb((VARIANT_BOOL*)&pvfIsSubweb));
    return pvfIsSubweb;
  }

  VARIANT_BOOL __fastcall get_IsWritable(void)
  {
    VARIANT_BOOL pfIsWritable;
    OLECHECK(this->get_IsWritable((VARIANT_BOOL*)&pfIsWritable));
    return pfIsWritable;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbzFolderName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbzFolderName));
    return pbzFolderName;
  }

  Frontpage_xp::Properties* __fastcall get_Properties(void)
  {
    Frontpage_xp::Properties* ppProps;
    OLECHECK(this->get_Properties((Frontpage_xp::Properties**)&ppProps));
    return ppProps;
  }

  BSTR __fastcall get_Url(void)
  {
    BSTR pbzFolderUrl = 0;
    OLECHECK(this->get_Url((BSTR*)&pbzFolderUrl));
    return pbzFolderUrl;
  }

  Frontpage_xp::Web* __fastcall get_Web(void)
  {
    Frontpage_xp::Web* ppVal;
    OLECHECK(this->get_Web((Frontpage_xp::Web**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::WebFiles* __fastcall get_AllFiles(void)
  {
    Frontpage_xp::WebFiles* ppFilesCollection;
    OLECHECK(this->get_AllFiles((Frontpage_xp::WebFiles**)&ppFilesCollection));
    return ppFilesCollection;
  }

  Frontpage_xp::WebFolders* __fastcall get_AllFolders(void)
  {
    Frontpage_xp::WebFolders* ppFoldersCollection;
    OLECHECK(this->get_AllFolders((Frontpage_xp::WebFolders**)&ppFoldersCollection));
    return ppFoldersCollection;
  }

  Frontpage_xp::_List* __fastcall get_List(void)
  {
    Frontpage_xp::_List* ppList;
    OLECHECK(this->get_List((Frontpage_xp::_List**)&ppList));
    return ppList;
  }


  __property   Frontpage_xp::WebFiles* Files = {read = get_Files};
  __property   Frontpage_xp::WebFolders* Folders = {read = get_Folders};
  __property   VARIANT_BOOL    IsExecutable = {read = get_IsExecutable, write = set_IsExecutable};
  __property   VARIANT_BOOL    IsReadable = {read = get_IsReadable, write = set_IsReadable};
  __property   VARIANT_BOOL    IsRoot = {read = get_IsRoot};
  __property   VARIANT_BOOL    IsWeb = {read = get_IsWeb};
  __property   VARIANT_BOOL    IsWritable = {read = get_IsWritable};
  __property   BSTR            Name = {read = get_Name};
  __property   Frontpage_xp::Properties* Properties = {read = get_Properties};
  __property   BSTR            Url = {read = get_Url};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   Frontpage_xp::WebFiles* AllFiles = {read = get_AllFiles};
  __property   Frontpage_xp::WebFolders* AllFolders = {read = get_AllFolders};
  __property   Frontpage_xp::_List* List = {read = get_List};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WebFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB404F-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
interface WebFiles  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Frontpage_xp::WebFile** ppVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR FileUrl/*[in]*/, 
                                        VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/, 
                                        Frontpage_xp::WebFile** ppVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE ApplyTheme(BSTR ThemeName/*[in]*/, 
                                               Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT* Index/*[in]*/) = 0; // [6]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  Frontpage_xp::WebFile* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Frontpage_xp::WebFile* ppVal;
    OLECHECK(this->get_Item(Index, (Frontpage_xp::WebFile**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::WebFile* __fastcall Add(BSTR FileUrl/*[in]*/, 
                                        VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
  {
    Frontpage_xp::WebFile* ppVal;
    OLECHECK(this->Add(FileUrl, ForceOverwrite, (Frontpage_xp::WebFile**)&ppVal));
    return ppVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WebFolders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4015-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
interface WebFolders  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Frontpage_xp::WebFolder** ppVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR FolderUrl/*[in]*/, 
                                        Frontpage_xp::WebFolder** ppVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT* Index/*[in]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  Frontpage_xp::WebFolder* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Frontpage_xp::WebFolder* ppVal;
    OLECHECK(this->get_Item(Index, (Frontpage_xp::WebFolder**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::WebFolder* __fastcall Add(BSTR FolderUrl/*[in]*/)
  {
    Frontpage_xp::WebFolder* ppVal;
    OLECHECK(this->Add(FolderUrl, (Frontpage_xp::WebFolder**)&ppVal));
    return ppVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _List
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B474-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _List  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstrName/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pbstrDescription/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pbstrDescription/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_EditForm(BSTR pbstrEditForm/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_NewForm(BSTR pbstrNewForm/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE ApplyChanges(void) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE Reserved1(void) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE Reserved2(void) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE Reserved3(void) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE Reserved4(void) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE Reserved5(void) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE Reserved6(void) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE Reserved7(void) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE Reserved8(void) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE Reserved9(void) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE Reserved10(void) = 0; // [25]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pbstrDescription = 0;
    OLECHECK(this->get_Description((BSTR*)&pbstrDescription));
    return pbstrDescription;
  }

  Frontpage_xp::_ListFields* __fastcall get_Fields(void)
  {
    Frontpage_xp::_ListFields* ppListFields;
    OLECHECK(this->get_Fields((Frontpage_xp::_ListFields**)&ppListFields));
    return ppListFields;
  }

  Frontpage_xp::WebFolder* __fastcall get_Folder(void)
  {
    Frontpage_xp::WebFolder* ppWebFolder;
    OLECHECK(this->get_Folder((Frontpage_xp::WebFolder**)&ppWebFolder));
    return ppWebFolder;
  }

  BSTR __fastcall get_DefaultViewPage(void)
  {
    BSTR pbstrViewPage = 0;
    OLECHECK(this->get_DefaultViewPage((BSTR*)&pbstrViewPage));
    return pbstrViewPage;
  }

  BSTR __fastcall get_DisplayForm(void)
  {
    BSTR pbstrDisplayForm = 0;
    OLECHECK(this->get_DisplayForm((BSTR*)&pbstrDisplayForm));
    return pbstrDisplayForm;
  }

  BSTR __fastcall get_EditForm(void)
  {
    BSTR pbstrEditForm = 0;
    OLECHECK(this->get_EditForm((BSTR*)&pbstrEditForm));
    return pbstrEditForm;
  }

  BSTR __fastcall get_NewForm(void)
  {
    BSTR pbstrNewForm = 0;
    OLECHECK(this->get_NewForm((BSTR*)&pbstrNewForm));
    return pbstrNewForm;
  }

  Frontpage_xp::FpListDesignSecurity __fastcall get_DesignSecurity(void)
  {
    Frontpage_xp::FpListDesignSecurity peDesignSecurity;
    OLECHECK(this->get_DesignSecurity((Frontpage_xp::FpListDesignSecurity*)&peDesignSecurity));
    return peDesignSecurity;
  }

  Frontpage_xp::FpListType __fastcall get_Type(void)
  {
    Frontpage_xp::FpListType peListType;
    OLECHECK(this->get_Type((Frontpage_xp::FpListType*)&peListType));
    return peListType;
  }

  Frontpage_xp::Web* __fastcall get_Web(void)
  {
    Frontpage_xp::Web* pWeb;
    OLECHECK(this->get_Web((Frontpage_xp::Web**)&pWeb));
    return pWeb;
  }

  VARIANT_BOOL __fastcall get_ReadOnly(void)
  {
    VARIANT_BOOL pReadOnly;
    OLECHECK(this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly));
    return pReadOnly;
  }

  LPSAFEARRAY __fastcall get_ViewPages(void)
  {
    LPSAFEARRAY ppsaViewPages;
    OLECHECK(this->get_ViewPages((LPSAFEARRAY*)&ppsaViewPages));
    return ppsaViewPages;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::_ListFields* Fields = {read = get_Fields};
  __property   Frontpage_xp::WebFolder* Folder = {read = get_Folder};
  __property   BSTR            DefaultViewPage = {read = get_DefaultViewPage};
  __property   BSTR            DisplayForm = {read = get_DisplayForm};
  __property   BSTR            EditForm = {read = get_EditForm};
  __property   BSTR            NewForm = {read = get_NewForm};
  __property   Frontpage_xp::FpListDesignSecurity DesignSecurity = {read = get_DesignSecurity, write = set_DesignSecurity};
  __property   Frontpage_xp::FpListType Type = {read = get_Type};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B475-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFields  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             LPDISPATCH* ppVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, BSTR Description/*[in,def,opt]*/, 
                                        Frontpage_xp::FpFieldType FieldType/*[in,def,opt]*/, 
                                        VARIANT_BOOL Required/*[in,def,opt]*/, 
                                        Frontpage_xp::_ListField* pLookupField/*[in,def,opt]*/, 
                                        VARIANT* DefaultValue/*[in,opt]*/, 
                                        Frontpage_xp::_ListField** ppVal/*[out,retval]*/) = 0; // [4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  LPDISPATCH __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    LPDISPATCH ppVal;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&ppVal));
    return ppVal;
  }

  Frontpage_xp::_ListField* __fastcall Add(BSTR Name/*[in]*/, BSTR Description/*[in,def,opt]*/, 
                                           Frontpage_xp::FpFieldType FieldType/*[in,def,opt]*/, 
                                           VARIANT_BOOL Required/*[in,def,opt]*/, 
                                           Frontpage_xp::_ListField* pLookupField/*[in,def,opt]*/, 
                                           VARIANT* DefaultValue/*[in,opt]*/= TNoParam())
  {
    Frontpage_xp::_ListField* ppVal;
    OLECHECK(this->Add(Name, Description, FieldType, Required, pLookupField, DefaultValue, (Frontpage_xp::_ListField**)&ppVal));
    return ppVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B476-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListField  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstrName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Name(BSTR pbstrName/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Description(BSTR* pbstrDescription/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_Description(BSTR pbstrDescription/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE Delete(void) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE Reserved1(void) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE Reserved2(void) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE Reserved3(void) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE Reserved4(void) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE Reserved5(void) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE Reserved6(void) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE Reserved7(void) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE Reserved8(void) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE Reserved9(void) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE Reserved10(void) = 0; // [17]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstrName = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstrName));
    return pbstrName;
  }

  BSTR __fastcall get_Description(void)
  {
    BSTR pbstrDescription = 0;
    OLECHECK(this->get_Description((BSTR*)&pbstrDescription));
    return pbstrDescription;
  }

  Frontpage_xp::FpFieldType __fastcall get_Type(void)
  {
    Frontpage_xp::FpFieldType pType;
    OLECHECK(this->get_Type((Frontpage_xp::FpFieldType*)&pType));
    return pType;
  }

  VARIANT_BOOL __fastcall get_ReadOnly(void)
  {
    VARIANT_BOOL pReadOnly;
    OLECHECK(this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly));
    return pReadOnly;
  }

  Frontpage_xp::Web* __fastcall get_Web(void)
  {
    Frontpage_xp::Web* pWeb;
    OLECHECK(this->get_Web((Frontpage_xp::Web**)&pWeb));
    return pWeb;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Themes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4046-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
interface Themes  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Frontpage_xp::Theme** ppVal/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  Frontpage_xp::Theme* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Frontpage_xp::Theme* ppVal;
    OLECHECK(this->get_Item(Index, (Frontpage_xp::Theme**)&ppVal));
    return ppVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Theme
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4044-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
interface Theme  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Format(BSTR* pszThemeFormat/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pszDirName/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Label(BSTR* pszLongThemeName/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* pszThemeVersion/*[out,retval]*/) = 0; // [6]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Format(void)
  {
    BSTR pszThemeFormat = 0;
    OLECHECK(this->get_Format((BSTR*)&pszThemeFormat));
    return pszThemeFormat;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pszDirName = 0;
    OLECHECK(this->get_Name((BSTR*)&pszDirName));
    return pszDirName;
  }

  BSTR __fastcall get_Label(void)
  {
    BSTR pszLongThemeName = 0;
    OLECHECK(this->get_Label((BSTR*)&pszLongThemeName));
    return pszLongThemeName;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR pszThemeVersion = 0;
    OLECHECK(this->get_Version((BSTR*)&pszThemeVersion));
    return pszThemeVersion;
  }


  __property   BSTR            Format = {read = get_Format};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Label = {read = get_Label};
  __property   BSTR            Version = {read = get_Version};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: WebWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6B735742-FA41-11D1-83DC-006097ABE675}
// *********************************************************************//
interface WebWindows  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Frontpage_xp::WebWindow** ppVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Close(VARIANT* Index/*[in,opt]*/= TNoParam()) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Add(Frontpage_xp::FpWebViewModeEx ViewModeEx/*[in]*/, 
                                        Frontpage_xp::WebWindow** ppVal/*[out,retval]*/) = 0; // [5]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  Frontpage_xp::WebWindow* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Frontpage_xp::WebWindow* ppVal;
    OLECHECK(this->get_Item(Index, (Frontpage_xp::WebWindow**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::WebWindow* __fastcall Add(Frontpage_xp::FpWebViewModeEx ViewModeEx/*[in]*/)
  {
    Frontpage_xp::WebWindow* ppVal;
    OLECHECK(this->Add(ViewModeEx, (Frontpage_xp::WebWindow**)&ppVal));
    return ppVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Lists
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B473-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _Lists  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             LPDISPATCH* ppVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR Name/*[in]*/, BSTR ParentFolder/*[in,def,opt]*/, 
                                        Frontpage_xp::FpListType ListType/*[in,def,opt]*/, 
                                        BSTR Description/*[in,def,opt]*/, 
                                        Frontpage_xp::_List** ppVal/*[out,retval]*/) = 0; // [4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  LPDISPATCH __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    LPDISPATCH ppVal;
    OLECHECK(this->get_Item(Index, (LPDISPATCH*)&ppVal));
    return ppVal;
  }

  Frontpage_xp::_List* __fastcall Add(BSTR Name/*[in]*/, BSTR ParentFolder/*[in,def,opt]*/, 
                                      Frontpage_xp::FpListType ListType/*[in,def,opt]*/, 
                                      BSTR Description/*[in,def,opt]*/)
  {
    Frontpage_xp::_List* ppVal;
    OLECHECK(this->Add(Name, ParentFolder, ListType, Description, (Frontpage_xp::_List**)&ppVal));
    return ppVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SYSTEM
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {731EC3E0-9CC2-11D1-83CE-006097ABE675}
// *********************************************************************//
interface SYSTEM  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Build(BSTR* pVal/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Version(BSTR* pVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_OperatingSystem(BSTR* pVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_HorizontalResolution(long* plVal/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalResolution(long* plVal/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_LanguageDesignation(BSTR* pVal/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_ProfileString(BSTR RegistrySection, BSTR RegistryKey, 
                                                      BSTR* pVal/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_ProfileString(BSTR RegistrySection, BSTR RegistryKey, 
                                                      BSTR pVal/*[in]*/) = 0; // [9]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Build(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Build((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_Version(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Version((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_OperatingSystem(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_OperatingSystem((BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_HorizontalResolution(void)
  {
    long plVal;
    OLECHECK(this->get_HorizontalResolution((long*)&plVal));
    return plVal;
  }

  long __fastcall get_VerticalResolution(void)
  {
    long plVal;
    OLECHECK(this->get_VerticalResolution((long*)&plVal));
    return plVal;
  }

  BSTR __fastcall get_LanguageDesignation(void)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_LanguageDesignation((BSTR*)&pVal));
    return pVal;
  }

  BSTR __fastcall get_ProfileString(BSTR RegistrySection, BSTR RegistryKey)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_ProfileString(RegistrySection, RegistryKey, (BSTR*)&pVal));
    return pVal;
  }


  __property   BSTR            Build = {read = get_Build};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            OperatingSystem = {read = get_OperatingSystem};
  __property   long            HorizontalResolution = {read = get_HorizontalResolution};
  __property   long            VerticalResolution = {read = get_VerticalResolution};
  __property   BSTR            LanguageDesignation = {read = get_LanguageDesignation};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Webs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AAAA22E0-C834-11D1-83D4-006097ABE675}
// *********************************************************************//
interface Webs  : public Frontpage_xp::_IBaseFPObj
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(VARIANT* plCount/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT* Index/*[in]*/, 
                                             Frontpage_xp::Web** ppVal/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE _deprecated_Add(BSTR WebUrl/*[in]*/, 
                                                    BSTR UserName/*[in,def,opt]*/, 
                                                    BSTR Password/*[in,def,opt]*/, 
                                                    Frontpage_xp::Web** ppVal/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT* Index/*[in]*/, 
                                           Frontpage_xp::FpWebDeleteFlags WebDeleteFlags/*[in,def,opt]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE _deprecated_Open(BSTR szWebUrl/*[in]*/, 
                                                     BSTR UserName/*[in,def,opt]*/, 
                                                     BSTR Password/*[in,def,opt]*/, 
                                                     Frontpage_xp::Web** ppVal/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE Add(BSTR WebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                                        BSTR Password/*[in,def,opt]*/, 
                                        Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/, 
                                        Frontpage_xp::Web** ppVal/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE Open(BSTR szWebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                                         BSTR Password/*[in,def,opt]*/, 
                                         Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/, 
                                         Frontpage_xp::Web** ppVal/*[out,retval]*/) = 0; // [10]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Count(void)
  {
    VARIANT plCount;
    OLECHECK(this->get_Count((VARIANT*)&plCount));
    return plCount;
  }

  LPUNKNOWN __fastcall get__NewEnum(void)
  {
    LPUNKNOWN ppVal;
    OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
    return ppVal;
  }

  Frontpage_xp::Web* __fastcall get_Item(VARIANT* Index/*[in]*/)
  {
    Frontpage_xp::Web* ppVal;
    OLECHECK(this->get_Item(Index, (Frontpage_xp::Web**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::Web* __fastcall _deprecated_Add(BSTR WebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                                                BSTR Password/*[in,def,opt]*/)
  {
    Frontpage_xp::Web* ppVal;
    OLECHECK(this->_deprecated_Add(WebUrl, UserName, Password, (Frontpage_xp::Web**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::Web* __fastcall _deprecated_Open(BSTR szWebUrl/*[in]*/, 
                                                 BSTR UserName/*[in,def,opt]*/, 
                                                 BSTR Password/*[in,def,opt]*/)
  {
    Frontpage_xp::Web* ppVal;
    OLECHECK(this->_deprecated_Open(szWebUrl, UserName, Password, (Frontpage_xp::Web**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::Web* __fastcall Add(BSTR WebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                                    BSTR Password/*[in,def,opt]*/, 
                                    Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/)
  {
    Frontpage_xp::Web* ppVal;
    OLECHECK(this->Add(WebUrl, UserName, Password, WebOpenFlags, (Frontpage_xp::Web**)&ppVal));
    return ppVal;
  }

  Frontpage_xp::Web* __fastcall Open(BSTR szWebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                                     BSTR Password/*[in,def,opt]*/, 
                                     Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/)
  {
    Frontpage_xp::Web* ppVal;
    OLECHECK(this->Open(szWebUrl, UserName, Password, WebOpenFlags, (Frontpage_xp::Web**)&ppVal));
    return ppVal;
  }


  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _BasicList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B494-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _BasicList  : public Frontpage_xp::_List
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_EditSecurity(Frontpage_xp::FpListEditSecurity* peEditSecurity/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_EditSecurity(Frontpage_xp::FpListEditSecurity peEditSecurity/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_ReadSecurity(Frontpage_xp::FpListReadSecurity* peReadSecurity/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ReadSecurity(Frontpage_xp::FpListReadSecurity peReadSecurity/*[in]*/) = 0; // [27]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::FpListEditSecurity __fastcall get_EditSecurity(void)
  {
    Frontpage_xp::FpListEditSecurity peEditSecurity;
    OLECHECK(this->get_EditSecurity((Frontpage_xp::FpListEditSecurity*)&peEditSecurity));
    return peEditSecurity;
  }

  Frontpage_xp::FpListReadSecurity __fastcall get_ReadSecurity(void)
  {
    Frontpage_xp::FpListReadSecurity peReadSecurity;
    OLECHECK(this->get_ReadSecurity((Frontpage_xp::FpListReadSecurity*)&peReadSecurity));
    return peReadSecurity;
  }


  __property   Frontpage_xp::FpListEditSecurity EditSecurity = {read = get_EditSecurity, write = set_EditSecurity};
  __property   Frontpage_xp::FpListReadSecurity ReadSecurity = {read = get_ReadSecurity, write = set_ReadSecurity};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Survey
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B495-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _Survey  : public Frontpage_xp::_List
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_EditSecurity(Frontpage_xp::FpListEditSecurity* peEditSecurity/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_EditSecurity(Frontpage_xp::FpListEditSecurity peEditSecurity/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_ReadSecurity(Frontpage_xp::FpListReadSecurity* peReadSecurity/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_ReadSecurity(Frontpage_xp::FpListReadSecurity peReadSecurity/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_ShowUserNamesInResults(VARIANT_BOOL* pShowUserNames/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_ShowUserNamesInResults(VARIANT_BOOL pShowUserNames/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_AllowMultipleResponses(VARIANT_BOOL* pAllowMultipleResponses/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_AllowMultipleResponses(VARIANT_BOOL pAllowMultipleResponses/*[in]*/) = 0; // [29]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::FpListEditSecurity __fastcall get_EditSecurity(void)
  {
    Frontpage_xp::FpListEditSecurity peEditSecurity;
    OLECHECK(this->get_EditSecurity((Frontpage_xp::FpListEditSecurity*)&peEditSecurity));
    return peEditSecurity;
  }

  Frontpage_xp::FpListReadSecurity __fastcall get_ReadSecurity(void)
  {
    Frontpage_xp::FpListReadSecurity peReadSecurity;
    OLECHECK(this->get_ReadSecurity((Frontpage_xp::FpListReadSecurity*)&peReadSecurity));
    return peReadSecurity;
  }

  VARIANT_BOOL __fastcall get_ShowUserNamesInResults(void)
  {
    VARIANT_BOOL pShowUserNames;
    OLECHECK(this->get_ShowUserNamesInResults((VARIANT_BOOL*)&pShowUserNames));
    return pShowUserNames;
  }

  VARIANT_BOOL __fastcall get_AllowMultipleResponses(void)
  {
    VARIANT_BOOL pAllowMultipleResponses;
    OLECHECK(this->get_AllowMultipleResponses((VARIANT_BOOL*)&pAllowMultipleResponses));
    return pAllowMultipleResponses;
  }


  __property   Frontpage_xp::FpListEditSecurity EditSecurity = {read = get_EditSecurity, write = set_EditSecurity};
  __property   Frontpage_xp::FpListReadSecurity ReadSecurity = {read = get_ReadSecurity, write = set_ReadSecurity};
  __property   VARIANT_BOOL    ShowUserNamesInResults = {read = get_ShowUserNamesInResults, write = set_ShowUserNamesInResults};
  __property   VARIANT_BOOL    AllowMultipleResponses = {read = get_AllowMultipleResponses, write = set_AllowMultipleResponses};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DocumentLibrary
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B481-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _DocumentLibrary  : public Frontpage_xp::_List
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Template(BSTR* pbstrTemplate/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_Template(BSTR pbstrTemplate/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_FileDialogViewPage(BSTR* pbstrViewPage/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_FileDialogViewPage(BSTR pbstrViewPage/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_FileSaveForm(BSTR* pbstrSaveForm/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_FileSaveForm(BSTR pbstrSaveForm/*[in]*/) = 0; // [28]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Template(void)
  {
    BSTR pbstrTemplate = 0;
    OLECHECK(this->get_Template((BSTR*)&pbstrTemplate));
    return pbstrTemplate;
  }

  BSTR __fastcall get_FileDialogViewPage(void)
  {
    BSTR pbstrViewPage = 0;
    OLECHECK(this->get_FileDialogViewPage((BSTR*)&pbstrViewPage));
    return pbstrViewPage;
  }

  BSTR __fastcall get_FileSaveForm(void)
  {
    BSTR pbstrSaveForm = 0;
    OLECHECK(this->get_FileSaveForm((BSTR*)&pbstrSaveForm));
    return pbstrSaveForm;
  }


  __property   BSTR            Template = {read = get_Template};
  __property   BSTR            FileDialogViewPage = {read = get_FileDialogViewPage};
  __property   BSTR            FileSaveForm = {read = get_FileSaveForm};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldSingleLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B477-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldSingleLine  : public Frontpage_xp::_ListField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_MaxLength(long* plMaxLength/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_MaxLength(long plMaxLength/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_Required(VARIANT_BOOL pRequired/*[in]*/) = 0; // [21]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_MaxLength(void)
  {
    long plMaxLength;
    OLECHECK(this->get_MaxLength((long*)&plMaxLength));
    return plMaxLength;
  }

  VARIANT __fastcall get_DefaultValue(void)
  {
    VARIANT pvDefaultValue;
    OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
    return pvDefaultValue;
  }

  VARIANT_BOOL __fastcall get_Required(void)
  {
    VARIANT_BOOL pRequired;
    OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
    return pRequired;
  }


  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldMultiLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B478-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldMultiLine  : public Frontpage_xp::_ListField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_NumberOfLines(long* plNumberOfLines/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_NumberOfLines(long plNumberOfLines/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_Required(VARIANT_BOOL pRequired/*[in]*/) = 0; // [21]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_NumberOfLines(void)
  {
    long plNumberOfLines;
    OLECHECK(this->get_NumberOfLines((long*)&plNumberOfLines));
    return plNumberOfLines;
  }

  VARIANT __fastcall get_DefaultValue(void)
  {
    VARIANT pvDefaultValue;
    OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
    return pvDefaultValue;
  }

  VARIANT_BOOL __fastcall get_Required(void)
  {
    VARIANT_BOOL pRequired;
    OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
    return pRequired;
  }


  __property   long            NumberOfLines = {read = get_NumberOfLines, write = set_NumberOfLines};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldNumber
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B479-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldNumber  : public Frontpage_xp::_ListField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DisplayFormat(Frontpage_xp::FpNumberFieldFormat* pFormat/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayFormat(Frontpage_xp::FpNumberFieldFormat pFormat/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_ShowAsPercentage(VARIANT_BOOL* pShowAsPercentage/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_ShowAsPercentage(VARIANT_BOOL pShowAsPercentage/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_MinimumValue(VARIANT* pvMinimumValue/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_MinimumValue(VARIANT* pvMinimumValue/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_MaximumValue(VARIANT* pvMaximumValue/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_MaximumValue(VARIANT* pvMaximumValue/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_Required(VARIANT_BOOL pRequired/*[in]*/) = 0; // [24]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::FpNumberFieldFormat __fastcall get_DisplayFormat(void)
  {
    Frontpage_xp::FpNumberFieldFormat pFormat;
    OLECHECK(this->get_DisplayFormat((Frontpage_xp::FpNumberFieldFormat*)&pFormat));
    return pFormat;
  }

  VARIANT_BOOL __fastcall get_ShowAsPercentage(void)
  {
    VARIANT_BOOL pShowAsPercentage;
    OLECHECK(this->get_ShowAsPercentage((VARIANT_BOOL*)&pShowAsPercentage));
    return pShowAsPercentage;
  }

  VARIANT __fastcall get_MinimumValue(void)
  {
    VARIANT pvMinimumValue;
    OLECHECK(this->get_MinimumValue((VARIANT*)&pvMinimumValue));
    return pvMinimumValue;
  }

  VARIANT __fastcall get_MaximumValue(void)
  {
    VARIANT pvMaximumValue;
    OLECHECK(this->get_MaximumValue((VARIANT*)&pvMaximumValue));
    return pvMaximumValue;
  }

  VARIANT __fastcall get_DefaultValue(void)
  {
    VARIANT pvDefaultValue;
    OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
    return pvDefaultValue;
  }

  VARIANT_BOOL __fastcall get_Required(void)
  {
    VARIANT_BOOL pRequired;
    OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
    return pRequired;
  }


  __property   Frontpage_xp::FpNumberFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   VARIANT_BOOL    ShowAsPercentage = {read = get_ShowAsPercentage, write = set_ShowAsPercentage};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldCurrency
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47A-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldCurrency  : public Frontpage_xp::_ListField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DisplayFormat(Frontpage_xp::FpNumberFieldFormat* pFormat/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayFormat(Frontpage_xp::FpNumberFieldFormat pFormat/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_Currency(Frontpage_xp::FpCurrencyFieldFormat* peCurrency/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_Currency(Frontpage_xp::FpCurrencyFieldFormat peCurrency/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_MinimumValue(VARIANT* pvMinimumValue/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_MinimumValue(VARIANT* pvMinimumValue/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_MaximumValue(VARIANT* pvMaximumValue/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_MaximumValue(VARIANT* pvMaximumValue/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_Required(VARIANT_BOOL pRequired/*[in]*/) = 0; // [24]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::FpNumberFieldFormat __fastcall get_DisplayFormat(void)
  {
    Frontpage_xp::FpNumberFieldFormat pFormat;
    OLECHECK(this->get_DisplayFormat((Frontpage_xp::FpNumberFieldFormat*)&pFormat));
    return pFormat;
  }

  Frontpage_xp::FpCurrencyFieldFormat __fastcall get_Currency(void)
  {
    Frontpage_xp::FpCurrencyFieldFormat peCurrency;
    OLECHECK(this->get_Currency((Frontpage_xp::FpCurrencyFieldFormat*)&peCurrency));
    return peCurrency;
  }

  VARIANT __fastcall get_MinimumValue(void)
  {
    VARIANT pvMinimumValue;
    OLECHECK(this->get_MinimumValue((VARIANT*)&pvMinimumValue));
    return pvMinimumValue;
  }

  VARIANT __fastcall get_MaximumValue(void)
  {
    VARIANT pvMaximumValue;
    OLECHECK(this->get_MaximumValue((VARIANT*)&pvMaximumValue));
    return pvMaximumValue;
  }

  VARIANT __fastcall get_DefaultValue(void)
  {
    VARIANT pvDefaultValue;
    OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
    return pvDefaultValue;
  }

  VARIANT_BOOL __fastcall get_Required(void)
  {
    VARIANT_BOOL pRequired;
    OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
    return pRequired;
  }


  __property   Frontpage_xp::FpNumberFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   Frontpage_xp::FpCurrencyFieldFormat Currency = {read = get_Currency, write = set_Currency};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldDateTime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47B-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldDateTime  : public Frontpage_xp::_ListField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DisplayFormat(Frontpage_xp::FpDateTimeFieldFormat* pFormat/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayFormat(Frontpage_xp::FpDateTimeFieldFormat pFormat/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_Required(VARIANT_BOOL pRequired/*[in]*/) = 0; // [21]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::FpDateTimeFieldFormat __fastcall get_DisplayFormat(void)
  {
    Frontpage_xp::FpDateTimeFieldFormat pFormat;
    OLECHECK(this->get_DisplayFormat((Frontpage_xp::FpDateTimeFieldFormat*)&pFormat));
    return pFormat;
  }

  VARIANT __fastcall get_DefaultValue(void)
  {
    VARIANT pvDefaultValue;
    OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
    return pvDefaultValue;
  }

  VARIANT_BOOL __fastcall get_Required(void)
  {
    VARIANT_BOOL pRequired;
    OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
    return pRequired;
  }


  __property   Frontpage_xp::FpDateTimeFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldChoice
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47C-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldChoice  : public Frontpage_xp::_ListField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DisplayFormat(Frontpage_xp::FpChoiceFieldFormat* pFormat/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayFormat(Frontpage_xp::FpChoiceFieldFormat pFormat/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_Choices(LPSAFEARRAY* ppsaChoices/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE SetChoices(LPSAFEARRAY* ppsaChoices/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE AddChoice(BSTR Text/*[in]*/, long Index/*[in,def,opt]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE RemoveChoice(long Index/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE ClearChoices(void) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_Required(VARIANT_BOOL pRequired/*[in]*/) = 0; // [26]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::FpChoiceFieldFormat __fastcall get_DisplayFormat(void)
  {
    Frontpage_xp::FpChoiceFieldFormat pFormat;
    OLECHECK(this->get_DisplayFormat((Frontpage_xp::FpChoiceFieldFormat*)&pFormat));
    return pFormat;
  }

  LPSAFEARRAY __fastcall get_Choices(void)
  {
    LPSAFEARRAY ppsaChoices;
    OLECHECK(this->get_Choices((LPSAFEARRAY*)&ppsaChoices));
    return ppsaChoices;
  }

  VARIANT __fastcall get_DefaultValue(void)
  {
    VARIANT pvDefaultValue;
    OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
    return pvDefaultValue;
  }

  VARIANT_BOOL __fastcall get_Required(void)
  {
    VARIANT_BOOL pRequired;
    OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
    return pRequired;
  }


  __property   Frontpage_xp::FpChoiceFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldLookup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47D-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldLookup  : public Frontpage_xp::_ListField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_LookupField(Frontpage_xp::_ListField** ppField/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_LookupField(Frontpage_xp::_ListField* ppField/*[in]*/) = 0; // [19]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::_ListField* __fastcall get_LookupField(void)
  {
    Frontpage_xp::_ListField* ppField;
    OLECHECK(this->get_LookupField((Frontpage_xp::_ListField**)&ppField));
    return ppField;
  }


  __property   Frontpage_xp::_ListField* LookupField = {read = get_LookupField, write = set_LookupField};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldTrueFalse
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47E-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldTrueFalse  : public Frontpage_xp::_ListField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/) = 0; // [19]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_DefaultValue(void)
  {
    VARIANT pvDefaultValue;
    OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
    return pvDefaultValue;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldURL
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47F-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldURL  : public Frontpage_xp::_ListField
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DisplayFormat(Frontpage_xp::FpURLFieldFormat* pFormat/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_DisplayFormat(Frontpage_xp::FpURLFieldFormat pFormat/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultText(BSTR* pbstrDefaultText/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultText(BSTR pbstrDefaultText/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_Required(VARIANT_BOOL pRequired/*[in]*/) = 0; // [22]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::FpURLFieldFormat __fastcall get_DisplayFormat(void)
  {
    Frontpage_xp::FpURLFieldFormat pFormat;
    OLECHECK(this->get_DisplayFormat((Frontpage_xp::FpURLFieldFormat*)&pFormat));
    return pFormat;
  }

  BSTR __fastcall get_DefaultText(void)
  {
    BSTR pbstrDefaultText = 0;
    OLECHECK(this->get_DefaultText((BSTR*)&pbstrDefaultText));
    return pbstrDefaultText;
  }

  VARIANT __fastcall get_DefaultValue(void)
  {
    VARIANT pvDefaultValue;
    OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
    return pvDefaultValue;
  }

  VARIANT_BOOL __fastcall get_Required(void)
  {
    VARIANT_BOOL pRequired;
    OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
    return pRequired;
  }


  __property   Frontpage_xp::FpURLFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   BSTR            DefaultText = {read = get_DefaultText};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldCounter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B49D-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldCounter  : public Frontpage_xp::_ListField
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldInteger
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B496-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldInteger  : public Frontpage_xp::_ListField
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldComputed
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B497-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldComputed  : public Frontpage_xp::_ListField
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ListFieldFile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B498-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
interface _ListFieldFile  : public Frontpage_xp::_ListField
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IApplicationEvents
// Flags:     (4096) Dispatchable
// GUID:      {F5D15700-E9D8-11D1-B0DF-00C04FA30A8B}
// *********************************************************************//
interface _IApplicationEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall OnWebNew(Frontpage_xp::Web* pWeb/*[in]*/)
  {
    _TDispID _dispid(/* OnWebNew */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnWebOpen(Frontpage_xp::Web* pWeb/*[in]*/)
  {
    _TDispID _dispid(/* OnWebOpen */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnWebClose(Frontpage_xp::Web* pWeb/*[in]*/, 
                                             VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnWebClose */ DISPID(3));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
    _args[2] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnBeforeWebPublish(Frontpage_xp::Web* pWeb/*[in]*/, 
                                                     BSTR* Destination/*[in]*/, 
                                                     VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnBeforeWebPublish */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
    _args[2] = Destination /*[VT_BSTR:1]*/;
    _args[3] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnAfterWebPublish(Frontpage_xp::Web* pWeb/*[in]*/, 
                                                    VARIANT_BOOL* Success/*[in]*/)
  {
    _TDispID _dispid(/* OnAfterWebPublish */ DISPID(5));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
    _args[2] = Success /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnPageNew(Frontpage_xp::PageWindow* pPage/*[in]*/)
  {
    _TDispID _dispid(/* OnPageNew */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnPageOpen(Frontpage_xp::PageWindow* pPage/*[in]*/)
  {
    _TDispID _dispid(/* OnPageOpen */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnPageClose(Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                              VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnPageClose */ DISPID(8));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
    _args[2] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnBeforePageSave(Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                                   VARIANT_BOOL* SaveAsUI/*[in]*/, 
                                                   VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnBeforePageSave */ DISPID(9));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
    _args[2] = SaveAsUI /*[VT_BOOL:1]*/;
    _args[3] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnAfterPageSave(Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                                  VARIANT_BOOL* Success/*[in]*/)
  {
    _TDispID _dispid(/* OnAfterPageSave */ DISPID(10));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
    _args[2] = Success /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall WindowActivate(Frontpage_xp::WebWindow* pWebWindow/*[in]*/)
  {
    _TDispID _dispid(/* WindowActivate */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall WindowDeactivate(Frontpage_xp::WebWindow* pWebWindow/*[in]*/)
  {
    _TDispID _dispid(/* WindowDeactivate */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnBeforeWebWindowViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/
                                                              , 
                                                              Frontpage_xp::FpWebViewModeEx TargetView/*[in]*/
                                                              , VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnBeforeWebWindowViewChange */ DISPID(13));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)TargetView /*[VT_USERDEFINED:0]*/;
    _args[3] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnAfterWebWindowViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/)
  {
    _TDispID _dispid(/* OnAfterWebWindowViewChange */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnRecalculateHyperlinks(Frontpage_xp::Web* pWeb/*[in]*/, 
                                                          VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnRecalculateHyperlinks */ DISPID(15));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
    _args[2] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnBeforePageWindowViewChange(Frontpage_xp::PageWindow* pPage/*[in]*/
                                                               , 
                                                               Frontpage_xp::FpPageViewMode TargetView/*[in]*/
                                                               , VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnBeforePageWindowViewChange */ DISPID(16));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)TargetView /*[VT_USERDEFINED:0]*/;
    _args[3] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnAfterPageWindowViewChange(Frontpage_xp::PageWindow* pPage/*[in]*/)
  {
    _TDispID _dispid(/* OnAfterPageWindowViewChange */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnPageWindowActivate(Frontpage_xp::PageWindow* pPage/*[in]*/)
  {
    _TDispID _dispid(/* OnPageWindowActivate */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnWebFileCheckOut(Frontpage_xp::Web* pWeb/*[in]*/, 
                                                    Frontpage_xp::WebFile* pFile/*[in]*/, 
                                                    VARIANT_BOOL* CheckedOut/*[in]*/, 
                                                    Frontpage_xp::FpCheckOutOption* pCheckOutOption/*[in]*/)
  {
    _TDispID _dispid(/* OnWebFileCheckOut */ DISPID(19));
    TAutoArgs<4> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Frontpage_xp::WebFile*)pFile /*[VT_USERDEFINED:1]*/;
    _args[3] = CheckedOut /*[VT_BOOL:1]*/;
    _args[4] = (int*)pCheckOutOption /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnBeforeWebWindowSubViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/
                                                                 , 
                                                                 Frontpage_xp::FpWebSubView TargetSubView/*[in]*/
                                                                 , VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnBeforeWebWindowSubViewChange */ DISPID(20));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)TargetSubView /*[VT_USERDEFINED:0]*/;
    _args[3] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnAfterWebWindowSubViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/)
  {
    _TDispID _dispid(/* OnAfterWebWindowSubViewChange */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IWebber
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BBD4A72-661D-11CF-A3C4-00A024184692}
// *********************************************************************//
interface IWebber : public TDispWrapper<IDispatch>
{
  long /*[VT_I4:0]*/ __fastcall vtiCreateWeb(BSTR szServerURL, BSTR szWebName)
  {
    _TDispID _dispid(/* vtiCreateWeb */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = szServerURL /*[VT_BSTR:0]*/;
    _args[2] = szWebName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall vtiRefreshWebFromServer()
  {
    _TDispID _dispid(/* vtiRefreshWebFromServer */ DISPID(2));
    OleProcedure(_dispid);
  }

  long /*[VT_I4:0]*/ __fastcall vtiPutDocument(BSTR szFileName, BSTR szURL, long bBlockingRequest)
  {
    _TDispID _dispid(/* vtiPutDocument */ DISPID(3));
    TAutoArgs<3> _args;
    _args[1] = szFileName /*[VT_BSTR:0]*/;
    _args[2] = szURL /*[VT_BSTR:0]*/;
    _args[3] = bBlockingRequest /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiPutWebMetaInfo(BSTR szNameValuePairs)
  {
    _TDispID _dispid(/* vtiPutWebMetaInfo */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = szNameValuePairs /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall vtiSetWebRecalcDependencies(long bRecalcOn)
  {
    _TDispID _dispid(/* vtiSetWebRecalcDependencies */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = bRecalcOn /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetWebPageMetaInfo(BSTR szURL, BSTR szKeyName)
  {
    _TDispID _dispid(/* vtiGetWebPageMetaInfo */ DISPID(6));
    TAutoArgs<2> _args;
    _args[1] = szURL /*[VT_BSTR:0]*/;
    _args[2] = szKeyName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiRemoveWebPages(BSTR pszPageList)
  {
    _TDispID _dispid(/* vtiRemoveWebPages */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = pszPageList /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiEditForToDoList(BSTR szURL, BSTR szCookie, long lKey)
  {
    _TDispID _dispid(/* vtiEditForToDoList */ DISPID(8));
    TAutoArgs<3> _args;
    _args[1] = szURL /*[VT_BSTR:0]*/;
    _args[2] = szCookie /*[VT_BSTR:0]*/;
    _args[3] = lKey /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall vtiBringToTop()
  {
    _TDispID _dispid(/* vtiBringToTop */ DISPID(9));
    OleProcedure(_dispid);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetWebTitle()
  {
    _TDispID _dispid(/* vtiGetWebTitle */ DISPID(11));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetWebURL()
  {
    _TDispID _dispid(/* vtiGetWebURL */ DISPID(12));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall vtiPromptOpenWeb()
  {
    _TDispID _dispid(/* vtiPromptOpenWeb */ DISPID(13));
    OleProcedure(_dispid);
  }

  long /*[VT_I4:0]*/ __fastcall vtiRemoveWeb(BSTR szWebName)
  {
    _TDispID _dispid(/* vtiRemoveWeb */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = szWebName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiIsPageInWeb(BSTR szURL)
  {
    _TDispID _dispid(/* vtiIsPageInWeb */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = szURL /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetWebMetaInfo(BSTR szKey)
  {
    _TDispID _dispid(/* vtiGetWebMetaInfo */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = szKey /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetPageList(long lType)
  {
    _TDispID _dispid(/* vtiGetPageList */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = lType /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiPutDocuments(BSTR szFileList, BSTR szUrlList)
  {
    _TDispID _dispid(/* vtiPutDocuments */ DISPID(19));
    TAutoArgs<2> _args;
    _args[1] = szFileList /*[VT_BSTR:0]*/;
    _args[2] = szUrlList /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall vtiCancelRequests()
  {
    _TDispID _dispid(/* vtiCancelRequests */ DISPID(20));
    OleProcedure(_dispid);
  }

  long /*[VT_I4:0]*/ __fastcall vtiOpenWeb(BSTR pszServer, BSTR pszWebName, BSTR pszUser)
  {
    _TDispID _dispid(/* vtiOpenWeb */ DISPID(21));
    TAutoArgs<3> _args;
    _args[1] = pszServer /*[VT_BSTR:0]*/;
    _args[2] = pszWebName /*[VT_BSTR:0]*/;
    _args[3] = pszUser /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiEditWebPage(BSTR pszPageURL)
  {
    _TDispID _dispid(/* vtiEditWebPage */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = pszPageURL /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiPutWebPageMetaInfo(BSTR pszURL, BSTR pszNameValuePairs)
  {
    _TDispID _dispid(/* vtiPutWebPageMetaInfo */ DISPID(23));
    TAutoArgs<2> _args;
    _args[1] = pszURL /*[VT_BSTR:0]*/;
    _args[2] = pszNameValuePairs /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiGetDocToFile(BSTR pszURL, BSTR pszFilename)
  {
    _TDispID _dispid(/* vtiGetDocToFile */ DISPID(24));
    TAutoArgs<2> _args;
    _args[1] = pszURL /*[VT_BSTR:0]*/;
    _args[2] = pszFilename /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetBotsList(long* bNewBotsList)
  {
    _TDispID _dispid(/* vtiGetBotsList */ DISPID(25));
    TAutoArgs<1> _args;
    _args[1] = bNewBotsList /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetBotModule(BSTR pszBotDir, BSTR pszBotModule)
  {
    _TDispID _dispid(/* vtiGetBotModule */ DISPID(26));
    TAutoArgs<2> _args;
    _args[1] = pszBotDir /*[VT_BSTR:0]*/;
    _args[2] = pszBotModule /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiCreateFolder(BSTR pszFolderUrl)
  {
    _TDispID _dispid(/* vtiCreateFolder */ DISPID(27));
    TAutoArgs<1> _args;
    _args[1] = pszFolderUrl /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetFoldersList(BSTR pszParentFolderUrl)
  {
    _TDispID _dispid(/* vtiGetFoldersList */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = pszParentFolderUrl /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetPagesInFolder(BSTR pszFolderUrl, long lType)
  {
    _TDispID _dispid(/* vtiGetPagesInFolder */ DISPID(29));
    TAutoArgs<2> _args;
    _args[1] = pszFolderUrl /*[VT_BSTR:0]*/;
    _args[2] = lType /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiEditNextPageWithAction(BSTR prevURL)
  {
    _TDispID _dispid(/* vtiEditNextPageWithAction */ DISPID(30));
    TAutoArgs<1> _args;
    _args[1] = prevURL /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiEditImage(BSTR szFileName, BSTR szURL)
  {
    _TDispID _dispid(/* vtiEditImage */ DISPID(31));
    TAutoArgs<2> _args;
    _args[1] = szFileName /*[VT_BSTR:0]*/;
    _args[2] = szURL /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiPutDocumentDTM(BSTR szFileName, BSTR szURL, 
                                                  long lDateTimeModified, long bBlockingRequest)
  {
    _TDispID _dispid(/* vtiPutDocumentDTM */ DISPID(32));
    TAutoArgs<4> _args;
    _args[1] = szFileName /*[VT_BSTR:0]*/;
    _args[2] = szURL /*[VT_BSTR:0]*/;
    _args[3] = lDateTimeModified /*[VT_I4:0]*/;
    _args[4] = bBlockingRequest /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtigetbotslistex(long* bNewBotsList)
  {
    _TDispID _dispid(/* vtigetbotslistex */ DISPID(33));
    TAutoArgs<1> _args;
    _args[1] = bNewBotsList /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiOpenWebWithPassword(BSTR pszServer, BSTR pszWebName, BSTR pszUser
                                                       , BSTR pszPassword)
  {
    _TDispID _dispid(/* vtiOpenWebWithPassword */ DISPID(34));
    TAutoArgs<4> _args;
    _args[1] = pszServer /*[VT_BSTR:0]*/;
    _args[2] = pszWebName /*[VT_BSTR:0]*/;
    _args[3] = pszUser /*[VT_BSTR:0]*/;
    _args[4] = pszPassword /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiListWebs(BSTR pszServer, BSTR pszUser, BSTR pszPassword)
  {
    _TDispID _dispid(/* vtiListWebs */ DISPID(35));
    TAutoArgs<3> _args;
    _args[1] = pszServer /*[VT_BSTR:0]*/;
    _args[2] = pszUser /*[VT_BSTR:0]*/;
    _args[3] = pszPassword /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall vtiDisableErrorDialogs(long bYesNo)
  {
    _TDispID _dispid(/* vtiDisableErrorDialogs */ DISPID(36));
    TAutoArgs<1> _args;
    _args[1] = bYesNo /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall vtiQuit()
  {
    _TDispID _dispid(/* vtiQuit */ DISPID(37));
    OleProcedure(_dispid);
  }

  long /*[VT_I4:0]*/ __fastcall vtiPublishWeb(BSTR pszServerUrl, BSTR pszWebName, long dwFlags, 
                                              BSTR pszUser, BSTR pszPassword)
  {
    _TDispID _dispid(/* vtiPublishWeb */ DISPID(38));
    TAutoArgs<5> _args;
    _args[1] = pszServerUrl /*[VT_BSTR:0]*/;
    _args[2] = pszWebName /*[VT_BSTR:0]*/;
    _args[3] = dwFlags /*[VT_I4:0]*/;
    _args[4] = pszUser /*[VT_BSTR:0]*/;
    _args[5] = pszPassword /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiImportExternallyEditedFiles()
  {
    _TDispID _dispid(/* vtiImportExternallyEditedFiles */ DISPID(39));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiRenameDocument(BSTR pszURL, BSTR pszNewURL, long bUpdateBacklinks
                                                  , long bIsFolder, long bCopy, long bForceOverwrite)
  {
    _TDispID _dispid(/* vtiRenameDocument */ DISPID(40));
    TAutoArgs<6> _args;
    _args[1] = pszURL /*[VT_BSTR:0]*/;
    _args[2] = pszNewURL /*[VT_BSTR:0]*/;
    _args[3] = bUpdateBacklinks /*[VT_I4:0]*/;
    _args[4] = bIsFolder /*[VT_I4:0]*/;
    _args[5] = bCopy /*[VT_I4:0]*/;
    _args[6] = bForceOverwrite /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiIsFeatureSupported(BSTR pszFeature)
  {
    _TDispID _dispid(/* vtiIsFeatureSupported */ DISPID(41));
    TAutoArgs<1> _args;
    _args[1] = pszFeature /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiListThemes()
  {
    _TDispID _dispid(/* vtiListThemes */ DISPID(42));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiApplyTheme(BSTR pszName, long dParams, BSTR fileList)
  {
    _TDispID _dispid(/* vtiApplyTheme */ DISPID(43));
    TAutoArgs<3> _args;
    _args[1] = pszName /*[VT_BSTR:0]*/;
    _args[2] = dParams /*[VT_I4:0]*/;
    _args[3] = fileList /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetTheme(BSTR pszThemeDirName, BSTR pszLocThemesDir)
  {
    _TDispID _dispid(/* vtiGetTheme */ DISPID(44));
    TAutoArgs<2> _args;
    _args[1] = pszThemeDirName /*[VT_BSTR:0]*/;
    _args[2] = pszLocThemesDir /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiPutTheme(BSTR pszThemeDirName, BSTR pszThemeVersion, 
                                            BSTR pszFileList, BSTR pszLocThemesDir)
  {
    _TDispID _dispid(/* vtiPutTheme */ DISPID(45));
    TAutoArgs<4> _args;
    _args[1] = pszThemeDirName /*[VT_BSTR:0]*/;
    _args[2] = pszThemeVersion /*[VT_BSTR:0]*/;
    _args[3] = pszFileList /*[VT_BSTR:0]*/;
    _args[4] = pszLocThemesDir /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiPutWebStructure(BSTR pszModifications)
  {
    _TDispID _dispid(/* vtiPutWebStructure */ DISPID(55));
    TAutoArgs<1> _args;
    _args[1] = pszModifications /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetWebStructureRelations(BSTR pszURL, long lRelationType)
  {
    _TDispID _dispid(/* vtiGetWebStructureRelations */ DISPID(56));
    TAutoArgs<2> _args;
    _args[1] = pszURL /*[VT_BSTR:0]*/;
    _args[2] = lRelationType /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiReturnDBWRoot(BSTR pszFileURL)
  {
    _TDispID _dispid(/* vtiReturnDBWRoot */ DISPID(57));
    TAutoArgs<1> _args;
    _args[1] = pszFileURL /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiMakeThemeFresh(BSTR pszWebUrl, BSTR pszThemeName, 
                                                  long bAllowUpload, long bAllowDownload)
  {
    _TDispID _dispid(/* vtiMakeThemeFresh */ DISPID(58));
    TAutoArgs<4> _args;
    _args[1] = pszWebUrl /*[VT_BSTR:0]*/;
    _args[2] = pszThemeName /*[VT_BSTR:0]*/;
    _args[3] = bAllowUpload /*[VT_I4:0]*/;
    _args[4] = bAllowDownload /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiSetCurrentView(long nViewID, long bTransferSelection, long nFlags)
  {
    _TDispID _dispid(/* vtiSetCurrentView */ DISPID(59));
    TAutoArgs<3> _args;
    _args[1] = nViewID /*[VT_I4:0]*/;
    _args[2] = bTransferSelection /*[VT_I4:0]*/;
    _args[3] = nFlags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiIsFolderInWeb(BSTR pszFolderUrl)
  {
    _TDispID _dispid(/* vtiIsFolderInWeb */ DISPID(60));
    TAutoArgs<1> _args;
    _args[1] = pszFolderUrl /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiSetFolderOptions(BSTR pszFolder, long bExecutable, long bReadable)
  {
    _TDispID _dispid(/* vtiSetFolderOptions */ DISPID(61));
    TAutoArgs<3> _args;
    _args[1] = pszFolder /*[VT_BSTR:0]*/;
    _args[2] = bExecutable /*[VT_I4:0]*/;
    _args[3] = bReadable /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiPutGlobalThemeDoc(BSTR pszRemoteDir, BSTR pszThemeFile, 
                                                     BSTR pszWebRel, long bRunListUrls)
  {
    _TDispID _dispid(/* vtiPutGlobalThemeDoc */ DISPID(64));
    TAutoArgs<4> _args;
    _args[1] = pszRemoteDir /*[VT_BSTR:0]*/;
    _args[2] = pszThemeFile /*[VT_BSTR:0]*/;
    _args[3] = pszWebRel /*[VT_BSTR:0]*/;
    _args[4] = bRunListUrls /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiRefreshThemeList()
  {
    _TDispID _dispid(/* vtiRefreshThemeList */ DISPID(65));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiSetEditor(BSTR szType, BSTR szName, BSTR szCommand)
  {
    _TDispID _dispid(/* vtiSetEditor */ DISPID(66));
    TAutoArgs<3> _args;
    _args[1] = szType /*[VT_BSTR:0]*/;
    _args[2] = szName /*[VT_BSTR:0]*/;
    _args[3] = szCommand /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiListDataSources(long lType, BSTR* pszSources, BSTR* pszAttrs)
  {
    _TDispID _dispid(/* vtiListDataSources */ DISPID(67));
    TAutoArgs<3> _args;
    _args[1] = lType /*[VT_I4:0]*/;
    _args[2] = pszSources /*[VT_BSTR:1]*/;
    _args[3] = pszAttrs /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiGetDatabaseSchema(BSTR pszConnStr, long lFlags, BSTR* pszSchema)
  {
    _TDispID _dispid(/* vtiGetDatabaseSchema */ DISPID(68));
    TAutoArgs<3> _args;
    _args[1] = pszConnStr /*[VT_BSTR:0]*/;
    _args[2] = lFlags /*[VT_I4:0]*/;
    _args[3] = pszSchema /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiListRecordSources(BSTR pszConnStr, long lType, BSTR* sources, 
                                                     BSTR* attrs)
  {
    _TDispID _dispid(/* vtiListRecordSources */ DISPID(69));
    TAutoArgs<4> _args;
    _args[1] = pszConnStr /*[VT_BSTR:0]*/;
    _args[2] = lType /*[VT_I4:0]*/;
    _args[3] = sources /*[VT_BSTR:1]*/;
    _args[4] = attrs /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiGetRecordSourceSchema(BSTR pszConnStr, BSTR pszRecordSource, 
                                                         BSTR* pszSchema)
  {
    _TDispID _dispid(/* vtiGetRecordSourceSchema */ DISPID(70));
    TAutoArgs<3> _args;
    _args[1] = pszConnStr /*[VT_BSTR:0]*/;
    _args[2] = pszRecordSource /*[VT_BSTR:0]*/;
    _args[3] = pszSchema /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiGetQuerySchema(BSTR pszConnStr, BSTR pszSQL, long lFlags, 
                                                  BSTR* pszSchema)
  {
    _TDispID _dispid(/* vtiGetQuerySchema */ DISPID(71));
    TAutoArgs<4> _args;
    _args[1] = pszConnStr /*[VT_BSTR:0]*/;
    _args[2] = pszSQL /*[VT_BSTR:0]*/;
    _args[3] = lFlags /*[VT_I4:0]*/;
    _args[4] = pszSchema /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiListDrivers(long lType, BSTR* drivers, BSTR* attrs)
  {
    _TDispID _dispid(/* vtiListDrivers */ DISPID(72));
    TAutoArgs<3> _args;
    _args[1] = lType /*[VT_I4:0]*/;
    _args[2] = drivers /*[VT_BSTR:1]*/;
    _args[3] = attrs /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiListDataConnections(BSTR* bstrNames, BSTR* bstrConnStrs)
  {
    _TDispID _dispid(/* vtiListDataConnections */ DISPID(73));
    TAutoArgs<2> _args;
    _args[1] = bstrNames /*[VT_BSTR:1]*/;
    _args[2] = bstrConnStrs /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiSetDataConnections(BSTR names, BSTR attrs)
  {
    _TDispID _dispid(/* vtiSetDataConnections */ DISPID(74));
    TAutoArgs<2> _args;
    _args[1] = names /*[VT_BSTR:0]*/;
    _args[2] = attrs /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiWebSettingsDlg(long flags)
  {
    _TDispID _dispid(/* vtiWebSettingsDlg */ DISPID(75));
    TAutoArgs<1> _args;
    _args[1] = flags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


};
// *********************************************************************//
// Interface: IPageEditor
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BBD4A7B-661D-11CF-A3C4-00A024184692}
// *********************************************************************//
interface IPageEditor : public TDispWrapper<IDispatch>
{
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall vtiOpenWebPage(BSTR szFileName, BSTR szURL, 
                                                           BSTR szWebUrl, BSTR szWebTitle)
  {
    _TDispID _dispid(/* vtiOpenWebPage */ DISPID(1));
    TAutoArgs<4> _args;
    _args[1] = szFileName /*[VT_BSTR:0]*/;
    _args[2] = szURL /*[VT_BSTR:0]*/;
    _args[3] = szWebUrl /*[VT_BSTR:0]*/;
    _args[4] = szWebTitle /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiQueryWebPage(BSTR szURL, BSTR szWebUrl)
  {
    _TDispID _dispid(/* vtiQueryWebPage */ DISPID(3));
    TAutoArgs<2> _args;
    _args[1] = szURL /*[VT_BSTR:0]*/;
    _args[2] = szWebUrl /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall vtiBringToTop()
  {
    _TDispID _dispid(/* vtiBringToTop */ DISPID(4));
    OleProcedure(_dispid);
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall vtiNewWebPage(BSTR szURL, BSTR szWebUrl, BSTR szWebTitle)
  {
    _TDispID _dispid(/* vtiNewWebPage */ DISPID(5));
    TAutoArgs<3> _args;
    _args[1] = szURL /*[VT_BSTR:0]*/;
    _args[2] = szWebUrl /*[VT_BSTR:0]*/;
    _args[3] = szWebTitle /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiBringPageToTop(BSTR szURL, BSTR szWebUrl, BSTR szCookie, 
                                                  long toDoTaskId)
  {
    _TDispID _dispid(/* vtiBringPageToTop */ DISPID(6));
    TAutoArgs<4> _args;
    _args[1] = szURL /*[VT_BSTR:0]*/;
    _args[2] = szWebUrl /*[VT_BSTR:0]*/;
    _args[3] = szCookie /*[VT_BSTR:0]*/;
    _args[4] = toDoTaskId /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiListOpenDocs()
  {
    _TDispID _dispid(/* vtiListOpenDocs */ DISPID(12));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall vtiRefreshDocument(BSTR szPageUrl, BSTR szWebUrl)
  {
    _TDispID _dispid(/* vtiRefreshDocument */ DISPID(16));
    TAutoArgs<2> _args;
    _args[1] = szPageUrl /*[VT_BSTR:0]*/;
    _args[2] = szWebUrl /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetBookmarkList(BSTR pszPageURL, BSTR pszWebUrl)
  {
    _TDispID _dispid(/* vtiGetBookmarkList */ DISPID(17));
    TAutoArgs<2> _args;
    _args[1] = pszPageURL /*[VT_BSTR:0]*/;
    _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiScrollToBookmark(BSTR pszPageURL, BSTR pszWebUrl, 
                                                    BSTR pszBookmark)
  {
    _TDispID _dispid(/* vtiScrollToBookmark */ DISPID(18));
    TAutoArgs<3> _args;
    _args[1] = pszPageURL /*[VT_BSTR:0]*/;
    _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
    _args[3] = pszBookmark /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiInsertFile(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszFile)
  {
    _TDispID _dispid(/* vtiInsertFile */ DISPID(19));
    TAutoArgs<3> _args;
    _args[1] = pszPageURL /*[VT_BSTR:0]*/;
    _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
    _args[3] = pszFile /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiInsertImage(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszFile)
  {
    _TDispID _dispid(/* vtiInsertImage */ DISPID(20));
    TAutoArgs<3> _args;
    _args[1] = pszPageURL /*[VT_BSTR:0]*/;
    _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
    _args[3] = pszFile /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetTopPageUrl()
  {
    _TDispID _dispid(/* vtiGetTopPageUrl */ DISPID(21));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiInsertHTML(BSTR pszHTML)
  {
    _TDispID _dispid(/* vtiInsertHTML */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = pszHTML /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void /*[VT_VOID:0]*/ __fastcall vtiPaste()
  {
    _TDispID _dispid(/* vtiPaste */ DISPID(23));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall vtiQuit()
  {
    _TDispID _dispid(/* vtiQuit */ DISPID(24));
    OleProcedure(_dispid);
  }

  long /*[VT_I4:0]*/ __fastcall vtiSetMetaTag(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszKey, 
                                              BSTR pszValue, long lIndex, long flags)
  {
    _TDispID _dispid(/* vtiSetMetaTag */ DISPID(26));
    TAutoArgs<6> _args;
    _args[1] = pszPageURL /*[VT_BSTR:0]*/;
    _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
    _args[3] = pszKey /*[VT_BSTR:0]*/;
    _args[4] = pszValue /*[VT_BSTR:0]*/;
    _args[5] = lIndex /*[VT_I4:0]*/;
    _args[6] = flags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiListMetaTags(BSTR pszPageURL, BSTR pszWebUrl, long flags)
  {
    _TDispID _dispid(/* vtiListMetaTags */ DISPID(27));
    TAutoArgs<3> _args;
    _args[1] = pszPageURL /*[VT_BSTR:0]*/;
    _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
    _args[3] = flags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiDeleteMetaTag(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszKey, 
                                                 long lIndex, long flags)
  {
    _TDispID _dispid(/* vtiDeleteMetaTag */ DISPID(28));
    TAutoArgs<5> _args;
    _args[1] = pszPageURL /*[VT_BSTR:0]*/;
    _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
    _args[3] = pszKey /*[VT_BSTR:0]*/;
    _args[4] = lIndex /*[VT_I4:0]*/;
    _args[5] = flags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetMetaTag(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszKey, 
                                                long lIndex, long flags)
  {
    _TDispID _dispid(/* vtiGetMetaTag */ DISPID(29));
    TAutoArgs<5> _args;
    _args[1] = pszPageURL /*[VT_BSTR:0]*/;
    _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
    _args[3] = pszKey /*[VT_BSTR:0]*/;
    _args[4] = lIndex /*[VT_I4:0]*/;
    _args[5] = flags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long /*[VT_I4:0]*/ __fastcall vtiQueryWebPageEx(BSTR szURL, BSTR szWebUrl, long* bDirty, 
                                                  long* bWritable)
  {
    _TDispID _dispid(/* vtiQueryWebPageEx */ DISPID(30));
    TAutoArgs<4> _args;
    _args[1] = szURL /*[VT_BSTR:0]*/;
    _args[2] = szWebUrl /*[VT_BSTR:0]*/;
    _args[3] = bDirty /*[VT_I4:1]*/;
    _args[4] = bWritable /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


};
// *********************************************************************//
// Interface: IExplorerWebs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9B5D039F-8DDB-11D1-A220-00A0C9055E81}
// *********************************************************************//
interface IExplorerWebs  : public IDispatch
{
public:
  // [1] method CreateWeb
  virtual HRESULT STDMETHODCALLTYPE CreateWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                              Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                              Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/) = 0;
  // [2] method OpenWeb
  virtual HRESULT STDMETHODCALLTYPE OpenWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                            BSTR user/*[in]*/, 
                                            Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                            Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/) = 0;
  // [3] method OpenWebWithPassword
  virtual HRESULT STDMETHODCALLTYPE OpenWebWithPassword(BSTR server/*[in]*/, BSTR webName/*[in]*/, 
                                                        BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                                        Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                                        Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/) = 0;
  // [4] method BringToTop
  virtual HRESULT STDMETHODCALLTYPE BringToTop(void) = 0;
  // [5] method PromptOpenWeb
  virtual HRESULT STDMETHODCALLTYPE PromptOpenWeb(long inCurrentWindow/*[in]*/, 
                                                  Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/) = 0;
  // [6] method RemoveWeb
  virtual HRESULT STDMETHODCALLTYPE RemoveWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/) = 0;
  // [7] method SetEditor
  virtual HRESULT STDMETHODCALLTYPE SetEditor(BSTR Type/*[in]*/, BSTR Name/*[in]*/, 
                                              BSTR command/*[in]*/) = 0;
  // [8] method DisableErrorDialogs
  virtual HRESULT STDMETHODCALLTYPE DisableErrorDialogs(long bYesNo/*[in]*/) = 0;
  // [9] method Quit
  virtual HRESULT STDMETHODCALLTYPE Quit(void) = 0;
  // [10] method ListOpenWebs
  virtual HRESULT STDMETHODCALLTYPE ListOpenWebs(BSTR* Webs/*[out,retval]*/) = 0;
  // [11] method GetOpenWeb
  virtual HRESULT STDMETHODCALLTYPE GetOpenWeb(BSTR WebUrl/*[in]*/, 
                                               Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/) = 0;
  // [12] method EditWebPage
  virtual HRESULT STDMETHODCALLTYPE EditWebPage(BSTR Url) = 0;
  // [13] method GetThemePaths
  virtual HRESULT STDMETHODCALLTYPE GetThemePaths(BSTR* themePaths/*[out]*/, 
                                                  BSTR* customThemePath/*[out]*/) = 0;
  // [14] method ParseUrl
  virtual HRESULT STDMETHODCALLTYPE ParseURL(BSTR Url/*[in]*/, BSTR* serverUrl/*[out]*/, 
                                             BSTR* webName/*[out]*/, BSTR* pageUrl/*[out]*/) = 0;
  // [15] method CreateWebWithPassword
  virtual HRESULT STDMETHODCALLTYPE CreateWebWithPassword(BSTR serverUrl/*[in]*/, 
                                                          BSTR webName/*[in]*/, BSTR user/*[in]*/, 
                                                          BSTR Password/*[in]*/, 
                                                          Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                                          Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/) = 0;
  // [16] method GetThemePath
  virtual HRESULT STDMETHODCALLTYPE GetThemePath(BSTR ThemeName/*[in]*/, BSTR* themePath/*[out]*/) = 0;
  // [17] method NewWindow
  virtual HRESULT STDMETHODCALLTYPE NewWindow(void) = 0;
  // [18] method EditInFrontPage
  virtual HRESULT STDMETHODCALLTYPE EditInFrontPage(BSTR Url, 
                                                    Frontpage_xp::RequestDocumentsFlags flags) = 0;
  // [19] method GetMSOHInstance
  virtual HRESULT STDMETHODCALLTYPE GetMSOHInstace(long* hInstPtr/*[out]*/) = 0;
  // [20] method NextPane
  virtual HRESULT STDMETHODCALLTYPE NextPane(void) = 0;
  // [21] method GetIMsoToolbarSet
  virtual HRESULT STDMETHODCALLTYPE GetIMsoToolbarSet(long* ppITlbSet/*[out]*/) = 0;
  // [22] method GetIMsoTFC
  virtual HRESULT STDMETHODCALLTYPE GetIMsoTFC(long* pitfc/*[out,retval]*/) = 0;
  // [23] method GetIMsoOOUI
  virtual HRESULT STDMETHODCALLTYPE GetIMsoOOUI(long* pitfc/*[out,retval]*/) = 0;
  // [24] method ShowClipboard
  virtual HRESULT STDMETHODCALLTYPE ShowClipboard(void) = 0;
  // [25] method StartMarker
  virtual HRESULT STDMETHODCALLTYPE StartMarker(long lBeginMarker/*[in]*/, long lEndMarker/*[in]*/) = 0;
  // [26] method EndMarker
  virtual HRESULT STDMETHODCALLTYPE EndMarker(long lEndMarker/*[in]*/) = 0;
  // [27] method GetDocToFile
  virtual HRESULT STDMETHODCALLTYPE GetDocToFile(BSTR Url/*[in]*/, BSTR filename/*[in]*/) = 0;
  // [28] method GetDocToFile
  virtual HRESULT STDMETHODCALLTYPE GetDocuments(BSTR fileList/*[in]*/, BSTR urlList/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Frontpage_xp::IExplorerWeb* __fastcall CreateWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                                   Frontpage_xp::WebOpenFlags oflag/*[in]*/)
  {
    Frontpage_xp::IExplorerWeb* Web;
    OLECHECK(this->CreateWeb(serverUrl, webName, oflag, (Frontpage_xp::IExplorerWeb**)&Web));
    return Web;
  }

  Frontpage_xp::IExplorerWeb* __fastcall OpenWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                                 BSTR user/*[in]*/, 
                                                 Frontpage_xp::WebOpenFlags oflag/*[in]*/)
  {
    Frontpage_xp::IExplorerWeb* Web;
    OLECHECK(this->OpenWeb(serverUrl, webName, user, oflag, (Frontpage_xp::IExplorerWeb**)&Web));
    return Web;
  }

  Frontpage_xp::IExplorerWeb* __fastcall OpenWebWithPassword(BSTR server/*[in]*/, 
                                                             BSTR webName/*[in]*/, BSTR user/*[in]*/, 
                                                             BSTR Password/*[in]*/, 
                                                             Frontpage_xp::WebOpenFlags oflag/*[in]*/)
  {
    Frontpage_xp::IExplorerWeb* Web;
    OLECHECK(this->OpenWebWithPassword(server, webName, user, Password, oflag, (Frontpage_xp::IExplorerWeb**)&Web));
    return Web;
  }

  Frontpage_xp::IExplorerWeb* __fastcall PromptOpenWeb(long inCurrentWindow/*[in]*/)
  {
    Frontpage_xp::IExplorerWeb* Web;
    OLECHECK(this->PromptOpenWeb(inCurrentWindow, (Frontpage_xp::IExplorerWeb**)&Web));
    return Web;
  }

  BSTR __fastcall ListOpenWebs(void)
  {
    BSTR Webs = 0;
    OLECHECK(this->ListOpenWebs((BSTR*)&Webs));
    return Webs;
  }

  Frontpage_xp::IExplorerWeb* __fastcall GetOpenWeb(BSTR WebUrl/*[in]*/)
  {
    Frontpage_xp::IExplorerWeb* Web;
    OLECHECK(this->GetOpenWeb(WebUrl, (Frontpage_xp::IExplorerWeb**)&Web));
    return Web;
  }

  Frontpage_xp::IExplorerWeb* __fastcall CreateWebWithPassword(BSTR serverUrl/*[in]*/, 
                                                               BSTR webName/*[in]*/, 
                                                               BSTR user/*[in]*/, 
                                                               BSTR Password/*[in]*/, 
                                                               Frontpage_xp::WebOpenFlags oflag/*[in]*/)
  {
    Frontpage_xp::IExplorerWeb* Web;
    OLECHECK(this->CreateWebWithPassword(serverUrl, webName, user, Password, oflag, (Frontpage_xp::IExplorerWeb**)&Web));
    return Web;
  }

  long __fastcall GetIMsoTFC(void)
  {
    long pitfc;
    OLECHECK(this->GetIMsoTFC((long*)&pitfc));
    return pitfc;
  }

  long __fastcall GetIMsoOOUI(void)
  {
    long pitfc;
    OLECHECK(this->GetIMsoOOUI((long*)&pitfc));
    return pitfc;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IExplorerWeb
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9B5D03A1-8DDB-11D1-A220-00A0C9055E81}
// *********************************************************************//
interface IExplorerWeb  : public IDispatch
{
public:
  // [1] method RefreshWebFromServer
  virtual HRESULT STDMETHODCALLTYPE RefreshWebFromServer(void) = 0;
  // [2] method SetWebRecalcDependencies
  virtual HRESULT STDMETHODCALLTYPE SetWebRecalcDependencies(long bRecalcOn) = 0;
  // [3] method GetWebTitle
  virtual HRESULT STDMETHODCALLTYPE GetWebTitle(BSTR* Title/*[out,retval]*/) = 0;
  // [4] method GetWebURL
  virtual HRESULT STDMETHODCALLTYPE GetWebURL(BSTR* WebUrl/*[out,retval]*/) = 0;
  // [5] method PutWebMetaInfo
  virtual HRESULT STDMETHODCALLTYPE PutWebMetaInfo(BSTR nameValuePairs) = 0;
  // [6] method GetWebMetaInfo
  virtual HRESULT STDMETHODCALLTYPE GetWebMetaInfo(BSTR key, BSTR* value/*[out,retval]*/) = 0;
  // [7] method ImportExternallyEditedFiles
  virtual HRESULT STDMETHODCALLTYPE ImportExternallyEditedFiles(void) = 0;
  // [8] method IsFeatureSupported
  virtual HRESULT STDMETHODCALLTYPE IsFeatureSupported(BSTR feature, long* value/*[out,retval]*/) = 0;
  // [9] method ReturnDBWRoot
  virtual HRESULT STDMETHODCALLTYPE ReturnDBWRoot(BSTR FileUrl, BSTR* rootUrl/*[out,retval]*/) = 0;
  // [10] method CancelRequests
  virtual HRESULT STDMETHODCALLTYPE CancelRequests(void) = 0;
  // [11] method BringToTop
  virtual HRESULT STDMETHODCALLTYPE BringToTop(void) = 0;
  // [12] method SetCurrentView
  virtual HRESULT STDMETHODCALLTYPE SetCurrentView(long nViewID, long bTransferSelection, 
                                                   long nFlags) = 0;
  // [13] method PublishWeb
  virtual HRESULT STDMETHODCALLTYPE PublishWeb(BSTR serverUrl, BSTR webName, long dwFlags, BSTR user, 
                                               BSTR Password) = 0;
  // [14] method RemoveWeb
  virtual HRESULT STDMETHODCALLTYPE RemoveWeb(BSTR webName) = 0;
  // [15] method GetBotModule
  virtual HRESULT STDMETHODCALLTYPE GetBotModule(BSTR botDir, BSTR botModule, 
                                                 BSTR* Url/*[out,retval]*/) = 0;
  // [16] method GetBotsList
  virtual HRESULT STDMETHODCALLTYPE GetBotsList(long* bNewBotsList/*[out]*/, 
                                                BSTR* botList/*[out,retval]*/) = 0;
  // [17] method GetBotsListEx
  virtual HRESULT STDMETHODCALLTYPE GetBotsListEx(long* bNewBotsList/*[out]*/, 
                                                  BSTR* botList/*[out,retval]*/) = 0;
  // [18] method ListThemes
  virtual HRESULT STDMETHODCALLTYPE ListThemes(BSTR* Themes/*[out,retval]*/) = 0;
  // [19] method RefreshThemeList
  virtual HRESULT STDMETHODCALLTYPE RefreshThemeList(void) = 0;
  // [20] method MakeThemeFresh
  virtual HRESULT STDMETHODCALLTYPE MakeThemeFresh(BSTR ThemeName, long bAllowUpload, 
                                                   long bAllowDownload) = 0;
  // [21] method ApplyTheme
  virtual HRESULT STDMETHODCALLTYPE ApplyTheme(BSTR Name, long lParams, BSTR fileList) = 0;
  // [22] method GetTheme
  virtual HRESULT STDMETHODCALLTYPE GetTheme(BSTR themeDirName, BSTR locThemesDir, 
                                             BSTR* fileList/*[out,retval]*/) = 0;
  // [23] method PutTheme
  virtual HRESULT STDMETHODCALLTYPE PutTheme(BSTR themeDirName, BSTR themeVersion, BSTR fileList, 
                                             BSTR locThemesDir) = 0;
  // [24] method PutGlobalThemeDoc
  virtual HRESULT STDMETHODCALLTYPE PutGlobalThemeDoc(BSTR themeFile, BSTR webRelUrl) = 0;
  // [25] method PutWebStructure
  virtual HRESULT STDMETHODCALLTYPE PutWebStructure(BSTR structureAdds) = 0;
  // [26] method GetWebStructureRelations
  virtual HRESULT STDMETHODCALLTYPE GetWebStructureRelations(BSTR Url, long lRelationType, 
                                                             BSTR* structure/*[out,retval]*/) = 0;
  // [27] method CreateFolder
  virtual HRESULT STDMETHODCALLTYPE CreateFolder(BSTR Url) = 0;
  // [28] method GetFoldersList
  virtual HRESULT STDMETHODCALLTYPE GetFoldersList(BSTR parentFolderUrl, 
                                                   BSTR* folderList/*[out,retval]*/) = 0;
  // [29] method GetPagesInFolder
  virtual HRESULT STDMETHODCALLTYPE GetPagesInFolder(BSTR FolderUrl, long lType, 
                                                     BSTR* pageList/*[out,retval]*/) = 0;
  // [30] method GetSubWebsInFolder
  virtual HRESULT STDMETHODCALLTYPE GetSubWebsInFolder(BSTR FolderUrl, 
                                                       BSTR* subWebList/*[out,retval]*/) = 0;
  // [31] method IsFolderInWeb
  virtual HRESULT STDMETHODCALLTYPE IsFolderInWeb(BSTR FolderUrl, long* inWeb/*[out,retval]*/) = 0;
  // [32] method SetFolderOptions
  virtual HRESULT STDMETHODCALLTYPE SetFolderOptions(BSTR Folder, long bExecutable, long bReadable) = 0;
  // [33] method IsPageInWeb
  virtual HRESULT STDMETHODCALLTYPE IsPageInWeb(BSTR szURL, long* inWeb/*[out,retval]*/) = 0;
  // [36] method GetDocToFile
  virtual HRESULT STDMETHODCALLTYPE GetDocToFile(BSTR Url, BSTR filename) = 0;
  // [37] method PutDocuments
  virtual HRESULT STDMETHODCALLTYPE PutDocuments(BSTR fileList, BSTR urlList, long bForceOverwrite, 
                                                 long* lDTM, long* newDTM, BSTR metaInfo) = 0;
  // [38] method PutDocument
  virtual HRESULT STDMETHODCALLTYPE PutDocument(BSTR filename, BSTR Url, long bBlockingRequest, 
                                                long bForceOverwrite) = 0;
  // [39] method PutDocumentDTM
  virtual HRESULT STDMETHODCALLTYPE PutDocumentDTM(BSTR filename, BSTR Url, long lDateTimeModified, 
                                                   long bBlockingRequest, long bForceOverwrite, 
                                                   BSTR nameValuePairs, long* newDTM/*[out,retval]*/) = 0;
  // [40] method GetWebPageMetaInfo
  virtual HRESULT STDMETHODCALLTYPE GetWebPageMetaInfo(BSTR Url, BSTR keyName, 
                                                       BSTR* value/*[out,retval]*/) = 0;
  // [41] method PutWebPageMetaInfo
  virtual HRESULT STDMETHODCALLTYPE PutWebPageMetaInfo(BSTR Url, BSTR nameValuePairs) = 0;
  // [42] method RemoveWebPages
  virtual HRESULT STDMETHODCALLTYPE RemoveWebPages(BSTR pageList) = 0;
  // [43] method EditForToDoList
  virtual HRESULT STDMETHODCALLTYPE EditForToDoList(BSTR Url, BSTR szCookie, long lKey) = 0;
  // [44] method EditWebPage
  virtual HRESULT STDMETHODCALLTYPE EditWebPage(BSTR Url) = 0;
  // [45] method EditNextPageWithAction
  virtual HRESULT STDMETHODCALLTYPE EditNextPageWithAction(BSTR prevURL, 
                                                           long* status/*[out,retval]*/) = 0;
  // [46] method EditImage
  virtual HRESULT STDMETHODCALLTYPE EditImage(BSTR filename, BSTR Url) = 0;
  // [47] method RenameDocument
  virtual HRESULT STDMETHODCALLTYPE RenameDocument(BSTR Url, BSTR newUrl, long bUpdateBacklinks, 
                                                   long bIsFolder, long bCopy, long bForceOverwrite) = 0;
  // [48] method NewPage
  virtual HRESULT STDMETHODCALLTYPE NewPage(BSTR Url, BSTR templateFile) = 0;
  // [49] method EditInFrontPage
  virtual HRESULT STDMETHODCALLTYPE EditInFrontPage(BSTR Url) = 0;
  // [50] method AddTask
  virtual HRESULT STDMETHODCALLTYPE AddTask(BSTR taskName, short priority, BSTR createdBy, BSTR Url, 
                                            BSTR cookie, BSTR Comment) = 0;
  // [51] method AddTaskAskUser
  virtual HRESULT STDMETHODCALLTYPE AddTaskAskUser(BSTR taskName, short priority, BSTR createdBy, 
                                                   BSTR Url, BSTR cookie, BSTR Comment) = 0;
  // [52] method CompletedTask
  virtual HRESULT STDMETHODCALLTYPE CompletedTask(long taskId) = 0;
  // [53] method CompletedTaskByUrl
  virtual HRESULT STDMETHODCALLTYPE CompletedTaskByUrl(BSTR Url, BSTR cookie) = 0;
  // [54] method WorkedOnTask
  virtual HRESULT STDMETHODCALLTYPE WorkedOnTask(long taskId) = 0;
  // [55] method WorkedOnTaskByUrl
  virtual HRESULT STDMETHODCALLTYPE WorkedOnTaskByUrl(BSTR Url, BSTR cookie) = 0;
  // [56] method GetTaskName
  virtual HRESULT STDMETHODCALLTYPE GetTaskName(long taskId, BSTR* taskName/*[out,retval]*/) = 0;
  // [57] method GetActiveCount
  virtual HRESULT STDMETHODCALLTYPE GetActiveCount(long* Count/*[out,retval]*/) = 0;
  // [58] method DisableErrorDialogs
  virtual HRESULT STDMETHODCALLTYPE DisableErrorDialogs(long bYesNo/*[in]*/) = 0;
  // [59] method ListDataSources
  virtual HRESULT STDMETHODCALLTYPE ListDataSources(long lType, BSTR* sourceList/*[out]*/, 
                                                    BSTR* attrList/*[out]*/) = 0;
  // [60] method GetDatabaseSchema
  virtual HRESULT STDMETHODCALLTYPE GetDatabaseSchema(BSTR szConnStr, long lFlags, 
                                                      BSTR* pszSchema/*[out]*/) = 0;
  // [61] method ListRecordSources
  virtual HRESULT STDMETHODCALLTYPE ListRecordSources(BSTR szConnStr, long lType, 
                                                      BSTR* sources/*[out]*/, BSTR* attrs/*[out]*/) = 0;
  // [62] method GetRecordSourceSchema
  virtual HRESULT STDMETHODCALLTYPE GetRecordSourceSchema(BSTR szConnStr, BSTR szRecordSource, 
                                                          BSTR* pszSchema/*[out]*/) = 0;
  // [63] method GetQuerySchema
  virtual HRESULT STDMETHODCALLTYPE GetQuerySchema(BSTR szConnStr, BSTR szSQL, long lFlags, 
                                                   BSTR* pszSchema/*[out]*/) = 0;
  // [64] method ListDrivers
  virtual HRESULT STDMETHODCALLTYPE ListDrivers(long lType, BSTR* drivers/*[out]*/, 
                                                BSTR* attrs/*[out]*/) = 0;
  // [65] method ListDataConnections
  virtual HRESULT STDMETHODCALLTYPE ListDataConnections(BSTR* pszNames/*[out]*/, 
                                                        BSTR* pszConnStrs/*[out]*/) = 0;
  // [66] method SetDataConnections
  virtual HRESULT STDMETHODCALLTYPE SetDataConnections(BSTR names, BSTR attrs) = 0;
  // [67] method WebSettingsDlg
  virtual HRESULT STDMETHODCALLTYPE WebSettingsDlg(long flags, long* retcode/*[out,retval]*/) = 0;
  // [68] method ApplyBorder
  virtual HRESULT STDMETHODCALLTYPE ApplyBorder(BSTR newBorders, long bNavTop, long bNavLeft, 
                                                long bNavRight, long topChanged, long leftChanged, 
                                                long rightChanged, long bApplyToWeb) = 0;
  // [69] method GetPageList
  virtual HRESULT STDMETHODCALLTYPE GetPageList(long lType, BSTR* pageList/*[out,retval]*/) = 0;
  // [70] method GetWebObject
  virtual HRESULT STDMETHODCALLTYPE GetWOMWeb(Frontpage_xp::Web** pWebObject/*[out,retval]*/) = 0;
  // [71] method RemoveDocument
  virtual HRESULT STDMETHODCALLTYPE RemoveDocuments(BSTR Url, long bBlockingRequest) = 0;
  // [72] method GetWebNavStructure
  virtual HRESULT STDMETHODCALLTYPE GetWebNavStructure(LPUNKNOWN* pNavStructure/*[out]*/) = 0;
  // [73] method GetWebPageBackLinkCount
  virtual HRESULT STDMETHODCALLTYPE GetWebPageBackLinkCount(BSTR Url, long* Count/*[out,retval]*/) = 0;
  // [74] method GetNextBackLink
  virtual HRESULT STDMETHODCALLTYPE GetNextBackLink(BSTR Url, long* pos, BSTR* link/*[out,retval]*/) = 0;
  // [75] method GetOwsLists
  virtual HRESULT STDMETHODCALLTYPE GetOwsLists(LPUNKNOWN* pOwsLists/*[out]*/) = 0;
  // [76] method UpdateSharedBorderMetaInfo
  virtual HRESULT STDMETHODCALLTYPE UpdateSharedBorderMetaInfo(void) = 0;
  // [77] method RequestDocuments
  virtual HRESULT STDMETHODCALLTYPE RequestDocuments(BSTR urlList, LPUNKNOWN downloadStatus, 
                                                     unsigned_long flags) = 0;
  // [78] method RequestBatchRendering
  virtual HRESULT STDMETHODCALLTYPE RequestBatchRendering(unsigned_long dwID/*[in]*/, 
                                                          LPSAFEARRAY* ppsaParams/*[in]*/, 
                                                          LPUNKNOWN pStatusCB/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall GetWebTitle(void)
  {
    BSTR Title = 0;
    OLECHECK(this->GetWebTitle((BSTR*)&Title));
    return Title;
  }

  BSTR __fastcall GetWebURL(void)
  {
    BSTR WebUrl = 0;
    OLECHECK(this->GetWebURL((BSTR*)&WebUrl));
    return WebUrl;
  }

  BSTR __fastcall GetWebMetaInfo(BSTR key)
  {
    BSTR value = 0;
    OLECHECK(this->GetWebMetaInfo(key, (BSTR*)&value));
    return value;
  }

  long __fastcall IsFeatureSupported(BSTR feature)
  {
    long value;
    OLECHECK(this->IsFeatureSupported(feature, (long*)&value));
    return value;
  }

  BSTR __fastcall ReturnDBWRoot(BSTR FileUrl)
  {
    BSTR rootUrl = 0;
    OLECHECK(this->ReturnDBWRoot(FileUrl, (BSTR*)&rootUrl));
    return rootUrl;
  }

  BSTR __fastcall GetBotModule(BSTR botDir, BSTR botModule)
  {
    BSTR Url = 0;
    OLECHECK(this->GetBotModule(botDir, botModule, (BSTR*)&Url));
    return Url;
  }

  BSTR __fastcall GetBotsList(long* bNewBotsList/*[out]*/)
  {
    BSTR botList = 0;
    OLECHECK(this->GetBotsList(bNewBotsList, (BSTR*)&botList));
    return botList;
  }

  BSTR __fastcall GetBotsListEx(long* bNewBotsList/*[out]*/)
  {
    BSTR botList = 0;
    OLECHECK(this->GetBotsListEx(bNewBotsList, (BSTR*)&botList));
    return botList;
  }

  BSTR __fastcall ListThemes(void)
  {
    BSTR Themes = 0;
    OLECHECK(this->ListThemes((BSTR*)&Themes));
    return Themes;
  }

  BSTR __fastcall GetTheme(BSTR themeDirName, BSTR locThemesDir)
  {
    BSTR fileList = 0;
    OLECHECK(this->GetTheme(themeDirName, locThemesDir, (BSTR*)&fileList));
    return fileList;
  }

  BSTR __fastcall GetWebStructureRelations(BSTR Url, long lRelationType)
  {
    BSTR structure = 0;
    OLECHECK(this->GetWebStructureRelations(Url, lRelationType, (BSTR*)&structure));
    return structure;
  }

  BSTR __fastcall GetFoldersList(BSTR parentFolderUrl)
  {
    BSTR folderList = 0;
    OLECHECK(this->GetFoldersList(parentFolderUrl, (BSTR*)&folderList));
    return folderList;
  }

  BSTR __fastcall GetPagesInFolder(BSTR FolderUrl, long lType)
  {
    BSTR pageList = 0;
    OLECHECK(this->GetPagesInFolder(FolderUrl, lType, (BSTR*)&pageList));
    return pageList;
  }

  BSTR __fastcall GetSubWebsInFolder(BSTR FolderUrl)
  {
    BSTR subWebList = 0;
    OLECHECK(this->GetSubWebsInFolder(FolderUrl, (BSTR*)&subWebList));
    return subWebList;
  }

  long __fastcall IsFolderInWeb(BSTR FolderUrl)
  {
    long inWeb;
    OLECHECK(this->IsFolderInWeb(FolderUrl, (long*)&inWeb));
    return inWeb;
  }

  long __fastcall IsPageInWeb(BSTR szURL)
  {
    long inWeb;
    OLECHECK(this->IsPageInWeb(szURL, (long*)&inWeb));
    return inWeb;
  }

  long __fastcall PutDocumentDTM(BSTR filename, BSTR Url, long lDateTimeModified, 
                                 long bBlockingRequest, long bForceOverwrite, BSTR nameValuePairs)
  {
    long newDTM;
    OLECHECK(this->PutDocumentDTM(filename, Url, lDateTimeModified, bBlockingRequest, 
                                  bForceOverwrite, nameValuePairs, (long*)&newDTM));
    return newDTM;
  }

  BSTR __fastcall GetWebPageMetaInfo(BSTR Url, BSTR keyName)
  {
    BSTR value = 0;
    OLECHECK(this->GetWebPageMetaInfo(Url, keyName, (BSTR*)&value));
    return value;
  }

  long __fastcall EditNextPageWithAction(BSTR prevURL)
  {
    long status;
    OLECHECK(this->EditNextPageWithAction(prevURL, (long*)&status));
    return status;
  }

  BSTR __fastcall GetTaskName(long taskId)
  {
    BSTR taskName = 0;
    OLECHECK(this->GetTaskName(taskId, (BSTR*)&taskName));
    return taskName;
  }

  long __fastcall GetActiveCount(void)
  {
    long Count;
    OLECHECK(this->GetActiveCount((long*)&Count));
    return Count;
  }

  long __fastcall WebSettingsDlg(long flags)
  {
    long retcode;
    OLECHECK(this->WebSettingsDlg(flags, (long*)&retcode));
    return retcode;
  }

  BSTR __fastcall GetPageList(long lType)
  {
    BSTR pageList = 0;
    OLECHECK(this->GetPageList(lType, (BSTR*)&pageList));
    return pageList;
  }

  Frontpage_xp::Web* __fastcall GetWOMWeb(void)
  {
    Frontpage_xp::Web* pWebObject;
    OLECHECK(this->GetWOMWeb((Frontpage_xp::Web**)&pWebObject));
    return pWebObject;
  }

  long __fastcall GetWebPageBackLinkCount(BSTR Url)
  {
    long Count;
    OLECHECK(this->GetWebPageBackLinkCount(Url, (long*)&Count));
    return Count;
  }

  BSTR __fastcall GetNextBackLink(BSTR Url, long* pos)
  {
    BSTR link = 0;
    OLECHECK(this->GetNextBackLink(Url, pos, (BSTR*)&link));
    return link;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IPageWindowEvents
// Flags:     (4096) Dispatchable
// GUID:      {B6B97A3C-4B04-11D3-9FE7-00C04F79E87D}
// *********************************************************************//
interface _IPageWindowEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall OnClose(VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnClose */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnBeforeSave(VARIANT_BOOL* SaveAsUI/*[in]*/, 
                                               VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnBeforeSave */ DISPID(2));
    TAutoArgs<2> _args;
    _args[1] = SaveAsUI /*[VT_BOOL:1]*/;
    _args[2] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnAfterSave(VARIANT_BOOL* Success/*[in]*/)
  {
    _TDispID _dispid(/* OnAfterSave */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Success /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnBeforeViewChange(Frontpage_xp::FpPageViewMode TargetView/*[in]*/
                                                     , VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnBeforeViewChange */ DISPID(4));
    TAutoArgs<2> _args;
    _args[1] = (int)TargetView /*[VT_USERDEFINED:0]*/;
    _args[2] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnAfterViewChange()
  {
    _TDispID _dispid(/* OnAfterViewChange */ DISPID(5));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OnActivate()
  {
    _TDispID _dispid(/* OnActivate */ DISPID(6));
    OleProcedure(_dispid);
  }


};
// *********************************************************************//
// Interface: _IWebEvents
// Flags:     (4096) Dispatchable
// GUID:      {9389CD3A-9318-11D3-9F96-005004AE6A5C}
// *********************************************************************//
interface _IWebEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall OnBeforePublish(BSTR* Destination/*[in]*/, 
                                                  VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnBeforePublish */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = Destination /*[VT_BSTR:1]*/;
    _args[2] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnAfterPublish(VARIANT_BOOL* Success/*[in]*/)
  {
    _TDispID _dispid(/* OnAfterPublish */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Success /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnRecalculateHyperlinks(VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnRecalculateHyperlinks */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnWebFileCheckOut(Frontpage_xp::WebFile* pFile/*[in]*/, 
                                                    VARIANT_BOOL* CheckedOut/*[in]*/, 
                                                    Frontpage_xp::FpCheckOutOption* pCheckOutOption/*[in]*/)
  {
    _TDispID _dispid(/* OnWebFileCheckOut */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Frontpage_xp::WebFile*)pFile /*[VT_USERDEFINED:1]*/;
    _args[2] = CheckedOut /*[VT_BOOL:1]*/;
    _args[3] = (int*)pCheckOutOption /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnClose(VARIANT_BOOL* pCancel/*[in]*/)
  {
    _TDispID _dispid(/* OnClose */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = pCancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: _IWebWindowEvents
// Flags:     (4096) Dispatchable
// GUID:      {71EA4320-A214-11D3-9FA5-005004AE6A5C}
// *********************************************************************//
interface _IWebWindowEvents : public TDispWrapper<IDispatch>
{
  void /*[VT_VOID:0]*/ __fastcall OnBeforeViewChange(Frontpage_xp::FpWebViewModeEx TargetView/*[in]*/
                                                     , VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnBeforeViewChange */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = (int)TargetView /*[VT_USERDEFINED:0]*/;
    _args[2] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnAfterViewChange()
  {
    _TDispID _dispid(/* OnAfterViewChange */ DISPID(2));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OnActivate()
  {
    _TDispID _dispid(/* OnActivate */ DISPID(3));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OnDeactivate()
  {
    _TDispID _dispid(/* OnDeactivate */ DISPID(4));
    OleProcedure(_dispid);
  }

  void /*[VT_VOID:0]*/ __fastcall OnBeforeSubViewChange(Frontpage_xp::FpWebSubView TargetSubView/*[in]*/
                                                        , VARIANT_BOOL* Cancel/*[in]*/)
  {
    _TDispID _dispid(/* OnBeforeSubViewChange */ DISPID(5));
    TAutoArgs<2> _args;
    _args[1] = (int)TargetSubView /*[VT_USERDEFINED:0]*/;
    _args[2] = Cancel /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void /*[VT_VOID:0]*/ __fastcall OnAfterSubViewChange()
  {
    _TDispID _dispid(/* OnAfterSubViewChange */ DISPID(6));
    OleProcedure(_dispid);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<_IBaseFPObj>  TCOM_IBaseFPObj;

// *********************************************************************//
// DispIntf:  _IBaseFPObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {98241550-9C43-11D1-83CE-006097ABE675}
// *********************************************************************//
template<class T>
class _IBaseFPObjDispT : public TAutoDriver<_IBaseFPObj>
{
public:
  _IBaseFPObjDispT(){}

  _IBaseFPObjDispT(_IBaseFPObj *pintf)
  {
    TAutoDriver<_IBaseFPObj>::Bind(pintf, false);
  }

  _IBaseFPObjDispT(_IBaseFPObjPtr pintf)
  {
    TAutoDriver<_IBaseFPObj>::Bind(pintf, true);
  }

  _IBaseFPObjDispT& operator=(_IBaseFPObj *pintf)
  {
    TAutoDriver<_IBaseFPObj>::Bind(pintf, false);
    return *this;
  }

  _IBaseFPObjDispT& operator=(_IBaseFPObjPtr pintf)
  {
    TAutoDriver<_IBaseFPObj>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _IBaseFPObjDispT<_IBaseFPObj> _IBaseFPObjDisp;

// *********************************************************************//
// SmartIntf: TCOM_Application
// Interface: _Application
// *********************************************************************//
template <class T /* _Application */ >
class TCOM_ApplicationT : public TComInterface<_Application>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ApplicationT() {}
  TCOM_ApplicationT(_Application *intf, bool addRef = false) : TComInterface<_Application>(intf, addRef) {}
  TCOM_ApplicationT(const TCOM_ApplicationT& src) : TComInterface<_Application>(src) {}
  TCOM_ApplicationT& operator=(const TCOM_ApplicationT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Application(Frontpage_xp::_Application** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_Application(Frontpage_xp::_ApplicationPtr* ppVal/*[out,retval]*/);
  Frontpage_xp::_ApplicationPtr __fastcall get_Application(void);
  HRESULT         __fastcall get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocument** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocumentPtr* ppVal/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLDocumentPtr __fastcall get__deprecated_ActiveDocument(void);
  HRESULT         __fastcall get_ActivePageWindow(Frontpage_xp::PageWindow** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ActivePageWindow(Frontpage_xp::PageWindowPtr* pVal/*[out,retval]*/);
  Frontpage_xp::PageWindowPtr __fastcall get_ActivePageWindow(void);
  HRESULT         __fastcall get_ActiveWeb(Frontpage_xp::Web** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveWeb(Frontpage_xp::WebPtr* pVal/*[out,retval]*/);
  Frontpage_xp::WebPtr __fastcall get_ActiveWeb(void);
  HRESULT         __fastcall get_ActiveWebWindow(Frontpage_xp::WebWindow** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveWebWindow(Frontpage_xp::WebWindowPtr* pVal/*[out,retval]*/);
  Frontpage_xp::WebWindowPtr __fastcall get_ActiveWebWindow(void);
  HRESULT         __fastcall get_AnswerWizard(Office_xp::AnswerWizard** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_AnswerWizard(Office_xp::AnswerWizardPtr* ppVal/*[out,retval]*/);
  Office_xp::AnswerWizardPtr __fastcall get_AnswerWizard(void);
  HRESULT         __fastcall get_Build(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Build(void);
  HRESULT         __fastcall get_COMAddIns(Office_xp::COMAddIns** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_COMAddIns(Office_xp::COMAddInsPtr* ppVal/*[out,retval]*/);
  Office_xp::COMAddInsPtr __fastcall get_COMAddIns(void);
  HRESULT         __fastcall get_CommandBars(Office_xp::CommandBars** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_CommandBars(Office_xp::CommandBarsPtr* ppVal/*[out,retval]*/);
  Office_xp::CommandBarsPtr __fastcall get_CommandBars(void);
  HRESULT         __fastcall get_FileSearch(Office_xp::FileSearch** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_FileSearch(Office_xp::FileSearchPtr* ppVal/*[out,retval]*/);
  Office_xp::FileSearchPtr __fastcall get_FileSearch(void);
  HRESULT         __fastcall get_LanguageSettings(Office_xp::LanguageSettings** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_LanguageSettings(Office_xp::LanguageSettingsPtr* ppVal/*[out,retval]*/);
  Office_xp::LanguageSettingsPtr __fastcall get_LanguageSettings(void);
  HRESULT         __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_OrganizationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OrganizationName(void);
  HRESULT         __fastcall get_System(Frontpage_xp::SYSTEM** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_System(Frontpage_xp::SYSTEMPtr* pVal/*[out,retval]*/);
  Frontpage_xp::SYSTEMPtr __fastcall get_System(void);
  HRESULT         __fastcall get_Themes(Frontpage_xp::Themes** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Themes(Frontpage_xp::ThemesPtr* pVal/*[out,retval]*/);
  Frontpage_xp::ThemesPtr __fastcall get_Themes(void);
  HRESULT         __fastcall get_UserName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT         __fastcall set_UserName(BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_Version(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT         __fastcall get_Webs(Frontpage_xp::Webs** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_Webs(Frontpage_xp::WebsPtr* pVal/*[out,retval]*/);
  Frontpage_xp::WebsPtr __fastcall get_Webs(void);
  HRESULT         __fastcall get_WebWindows(Frontpage_xp::WebWindows** pVal/*[out,retval]*/);
  HRESULT         __fastcall get_WebWindows(Frontpage_xp::WebWindowsPtr* pVal/*[out,retval]*/);
  Frontpage_xp::WebWindowsPtr __fastcall get_WebWindows(void);
  HRESULT         __fastcall get_ProductCode(BSTR* ProductCode/*[out,retval]*/);
  BSTR            __fastcall get_ProductCode(void);
  HRESULT         __fastcall LocatePage(BSTR DocumentUrl/*[in]*/, 
                                        Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/, 
                                        Frontpage_xp::PageWindow** ppObj/*[out,retval]*/);
  Frontpage_xp::PageWindow* __fastcall LocatePage(BSTR DocumentUrl/*[in]*/, 
                                                  Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/);
  HRESULT         __fastcall MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/, 
                                     BSTR* pbzAbsUrl/*[out,retval]*/);
  BSTR            __fastcall MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/);
  HRESULT         __fastcall MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/, 
                                     BSTR* pbzRelUrl/*[out,retval]*/);
  BSTR            __fastcall MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/);
  HRESULT         __fastcall Quit(void);
  HRESULT         __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                                 VARIANT* Run/*[out,retval]*/);
  VARIANT         __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/);
  HRESULT         __fastcall get_Assistant(Office_xp::Assistant** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_Assistant(Office_xp::AssistantPtr* ppVal/*[out,retval]*/);
  Office_xp::AssistantPtr __fastcall get_Assistant(void);
  HRESULT         __fastcall get_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed* pConnectionSpeed/*[out,retval]*/);
  Frontpage_xp::FpConnectionSpeed __fastcall get_ConnectionSpeed(void);
  HRESULT         __fastcall set_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed pConnectionSpeed/*[in]*/);
  HRESULT         __fastcall get_OlderFile(long* plDays/*[out,retval]*/);
  long            __fastcall get_OlderFile(void);
  HRESULT         __fastcall set_OlderFile(long plDays/*[in]*/);
  HRESULT         __fastcall get_RecentFile(long* plDays/*[out,retval]*/);
  long            __fastcall get_RecentFile(void);
  HRESULT         __fastcall set_RecentFile(long plDays/*[in]*/);
  HRESULT         __fastcall get_SlowPage(long* plSeconds/*[out,retval]*/);
  long            __fastcall get_SlowPage(void);
  HRESULT         __fastcall set_SlowPage(long plSeconds/*[in]*/);
  HRESULT         __fastcall OnTime(VARIANT* When/*[in]*/, BSTR Name/*[in]*/, 
                                    VARIANT* Tolerance/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall ParseURL(BSTR Url/*[in]*/, 
                                      Frontpage_xp::FpURLComponent URLComponent/*[in]*/, 
                                      BSTR* pbzRelUrl/*[out,retval]*/);
  BSTR            __fastcall ParseURL(BSTR Url/*[in]*/, 
                                      Frontpage_xp::FpURLComponent URLComponent/*[in]*/);
  HRESULT         __fastcall get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/, 
                                            Office_xp::FileDialog** ppVal/*[out,retval]*/);
  Office_xp::FileDialog* __fastcall get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/);
  HRESULT         __fastcall get_VBE(Vbide_xp::VBE** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_VBE(Vbide_xp::VBEPtr* ppVal/*[out,retval]*/);
  Vbide_xp::VBEPtr __fastcall get_VBE(void);
  HRESULT         __fastcall get_MonthsShown(long* plMonths/*[out,retval]*/);
  long            __fastcall get_MonthsShown(void);
  HRESULT         __fastcall set_MonthsShown(long plMonths/*[in]*/);
  HRESULT         __fastcall get_NewPageorWeb(Office_xp::NewFile** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_NewPageorWeb(Office_xp::NewFilePtr* ppVal/*[out,retval]*/);
  Office_xp::NewFilePtr __fastcall get_NewPageorWeb(void);
  HRESULT         __fastcall get_ShowStartupDialog(VARIANT_BOOL* pfShowAtStartup/*[out,retval]*/);
  HRESULT         __fastcall get_ShowStartupDialog(TOLEBOOL* pfShowAtStartup/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowStartupDialog(void);
  HRESULT         __fastcall set_ShowStartupDialog(VARIANT_BOOL pfShowAtStartup/*[in]*/);
  HRESULT         __fastcall set_ShowStartupDialog(TOLEBOOL pfShowAtStartup/*[in]*/);
  HRESULT         __fastcall get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocument** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocumentPtr* ppVal/*[out,retval]*/);
  Frontpageeditor_xp::DispFPHTMLDocumentPtr __fastcall get_ActiveDocument(void);

  __property   Frontpage_xp::_ApplicationPtr Application = {read = get_Application};
  __property   Frontpageeditor_xp::IHTMLDocumentPtr _deprecated_ActiveDocument = {read = get__deprecated_ActiveDocument};
  __property   Frontpage_xp::PageWindowPtr ActivePageWindow = {read = get_ActivePageWindow};
  __property   Frontpage_xp::WebPtr ActiveWeb = {read = get_ActiveWeb};
  __property   Frontpage_xp::WebWindowPtr ActiveWebWindow = {read = get_ActiveWebWindow};
  __property   Office_xp::AnswerWizardPtr AnswerWizard = {read = get_AnswerWizard};
  __property   BSTR            Build = {read = get_Build};
  __property   Office_xp::COMAddInsPtr COMAddIns = {read = get_COMAddIns};
  __property   Office_xp::CommandBarsPtr CommandBars = {read = get_CommandBars};
  __property   Office_xp::FileSearchPtr FileSearch = {read = get_FileSearch};
  __property   Office_xp::LanguageSettingsPtr LanguageSettings = {read = get_LanguageSettings};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            OrganizationName = {read = get_OrganizationName};
  __property   Frontpage_xp::SYSTEMPtr System = {read = get_System};
  __property   Frontpage_xp::ThemesPtr Themes = {read = get_Themes};
  __property   BSTR            UserName = {read = get_UserName};
  __property   BSTR            Version = {read = get_Version};
  __property   Frontpage_xp::WebsPtr Webs = {read = get_Webs};
  __property   Frontpage_xp::WebWindowsPtr WebWindows = {read = get_WebWindows};
  __property   BSTR            ProductCode = {read = get_ProductCode};
  __property   Office_xp::AssistantPtr Assistant = {read = get_Assistant};
  __property   Frontpage_xp::FpConnectionSpeed ConnectionSpeed = {read = get_ConnectionSpeed, write = set_ConnectionSpeed};
  __property   long            OlderFile = {read = get_OlderFile, write = set_OlderFile};
  __property   long            RecentFile = {read = get_RecentFile, write = set_RecentFile};
  __property   long            SlowPage = {read = get_SlowPage, write = set_SlowPage};
  __property   Vbide_xp::VBEPtr VBE = {read = get_VBE};
  __property   long            MonthsShown = {read = get_MonthsShown, write = set_MonthsShown};
  __property   Office_xp::NewFilePtr NewPageorWeb = {read = get_NewPageorWeb};
  __property   TOLEBOOL        ShowStartupDialog = {read = get_ShowStartupDialog, write = set_ShowStartupDialog};
  __property   Frontpageeditor_xp::DispFPHTMLDocumentPtr ActiveDocument = {read = get_ActiveDocument};
};
typedef TCOM_ApplicationT<_Application> TCOM_Application;

// *********************************************************************//
// DispIntf:  _Application
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {04DF1014-7007-11D1-83BC-006097ABE675}
// *********************************************************************//
template<class T>
class _ApplicationDispT : public TAutoDriver<_Application>
{
public:
  _ApplicationDispT(){}

  _ApplicationDispT(_Application *pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, false);
  }

  _ApplicationDispT(_ApplicationPtr pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, true);
  }

  _ApplicationDispT& operator=(_Application *pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, false);
    return *this;
  }

  _ApplicationDispT& operator=(_ApplicationPtr pintf)
  {
    TAutoDriver<_Application>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_App));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_App);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** ppVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocument** ppVal/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLDocument* __fastcall get__deprecated_ActiveDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePageWindow(Frontpage_xp::PageWindow** pVal/*[out,retval]*/);
  Frontpage_xp::PageWindow* __fastcall get_ActivePageWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveWeb(Frontpage_xp::Web** pVal/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_ActiveWeb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveWebWindow(Frontpage_xp::WebWindow** pVal/*[out,retval]*/);
  Frontpage_xp::WebWindow* __fastcall get_ActiveWebWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AnswerWizard(Office_xp::AnswerWizard** ppVal/*[out,retval]*/);
  Office_xp::AnswerWizard* __fastcall get_AnswerWizard(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Build(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Build(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_COMAddIns(Office_xp::COMAddIns** ppVal/*[out,retval]*/);
  Office_xp::COMAddIns* __fastcall get_COMAddIns(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CommandBars(Office_xp::CommandBars** ppVal/*[out,retval]*/);
  Office_xp::CommandBars* __fastcall get_CommandBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileSearch(Office_xp::FileSearch** ppVal/*[out,retval]*/);
  Office_xp::FileSearch* __fastcall get_FileSearch(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguageSettings(Office_xp::LanguageSettings** ppVal/*[out,retval]*/);
  Office_xp::LanguageSettings* __fastcall get_LanguageSettings(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OrganizationName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OrganizationName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_System(Frontpage_xp::SYSTEM** pVal/*[out,retval]*/);
  Frontpage_xp::SYSTEM* __fastcall get_System(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Themes(Frontpage_xp::Themes** pVal/*[out,retval]*/);
  Frontpage_xp::Themes* __fastcall get_Themes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_UserName(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_UserName(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_UserName(BSTR pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Webs(Frontpage_xp::Webs** pVal/*[out,retval]*/);
  Frontpage_xp::Webs* __fastcall get_Webs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WebWindows(Frontpage_xp::WebWindows** pVal/*[out,retval]*/);
  Frontpage_xp::WebWindows* __fastcall get_WebWindows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProductCode(BSTR* ProductCode/*[out,retval]*/);
  BSTR            __fastcall get_ProductCode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LocatePage(BSTR DocumentUrl/*[in]*/, 
                                                   Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/
                                                   , 
                                                   Frontpage_xp::PageWindow** ppObj/*[out,retval]*/);
  Frontpage_xp::PageWindow* __fastcall LocatePage(BSTR DocumentUrl/*[in]*/, 
                                                  Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/, 
                                                BSTR* pbzAbsUrl/*[out,retval]*/);
  BSTR            __fastcall MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/, 
                                                BSTR* pbzRelUrl/*[out,retval]*/);
  BSTR            __fastcall MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Quit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Run(BSTR MacroName/*[in]*/, 
                                            LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                                            VARIANT* Run/*[out,retval]*/);
  VARIANT         __fastcall Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Assistant(Office_xp::Assistant** ppVal/*[out,retval]*/);
  Office_xp::Assistant* __fastcall get_Assistant(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed* pConnectionSpeed/*[out,retval]*/);
  Frontpage_xp::FpConnectionSpeed __fastcall get_ConnectionSpeed(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed pConnectionSpeed/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OlderFile(long* plDays/*[out,retval]*/);
  long            __fastcall get_OlderFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_OlderFile(long plDays/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RecentFile(long* plDays/*[out,retval]*/);
  long            __fastcall get_RecentFile(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RecentFile(long plDays/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SlowPage(long* plSeconds/*[out,retval]*/);
  long            __fastcall get_SlowPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SlowPage(long plSeconds/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OnTime(VARIANT* When/*[in]*/, BSTR Name/*[in]*/, 
                                               VARIANT* Tolerance/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ParseURL(BSTR Url/*[in]*/, 
                                                 Frontpage_xp::FpURLComponent URLComponent/*[in]*/, 
                                                 BSTR* pbzRelUrl/*[out,retval]*/);
  BSTR            __fastcall ParseURL(BSTR Url/*[in]*/, 
                                      Frontpage_xp::FpURLComponent URLComponent/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/
                                                       , 
                                                       Office_xp::FileDialog** ppVal/*[out,retval]*/);
  Office_xp::FileDialog* __fastcall get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VBE(Vbide_xp::VBE** ppVal/*[out,retval]*/);
  Vbide_xp::VBE*  __fastcall get_VBE(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MonthsShown(long* plMonths/*[out,retval]*/);
  long            __fastcall get_MonthsShown(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MonthsShown(long plMonths/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewPageorWeb(Office_xp::NewFile** ppVal/*[out,retval]*/);
  Office_xp::NewFile* __fastcall get_NewPageorWeb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowStartupDialog(VARIANT_BOOL* pfShowAtStartup/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowStartupDialog(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowStartupDialog(VARIANT_BOOL pfShowAtStartup/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocument** ppVal/*[out,retval]*/);
  Frontpageeditor_xp::DispFPHTMLDocument* __fastcall get_ActiveDocument(void);

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   Frontpageeditor_xp::IHTMLDocument* _deprecated_ActiveDocument = {read = get__deprecated_ActiveDocument};
  __property   Frontpage_xp::PageWindow* ActivePageWindow = {read = get_ActivePageWindow};
  __property   Frontpage_xp::Web* ActiveWeb = {read = get_ActiveWeb};
  __property   Frontpage_xp::WebWindow* ActiveWebWindow = {read = get_ActiveWebWindow};
  __property   Office_xp::AnswerWizard* AnswerWizard = {read = get_AnswerWizard};
  __property   BSTR            Build = {read = get_Build};
  __property   Office_xp::COMAddIns* COMAddIns = {read = get_COMAddIns};
  __property   Office_xp::CommandBars* CommandBars = {read = get_CommandBars};
  __property   Office_xp::FileSearch* FileSearch = {read = get_FileSearch};
  __property   Office_xp::LanguageSettings* LanguageSettings = {read = get_LanguageSettings};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            OrganizationName = {read = get_OrganizationName};
  __property   Frontpage_xp::SYSTEM* System = {read = get_System};
  __property   Frontpage_xp::Themes* Themes = {read = get_Themes};
  __property   BSTR            UserName = {read = get_UserName};
  __property   BSTR            Version = {read = get_Version};
  __property   Frontpage_xp::Webs* Webs = {read = get_Webs};
  __property   Frontpage_xp::WebWindows* WebWindows = {read = get_WebWindows};
  __property   BSTR            ProductCode = {read = get_ProductCode};
  __property   Office_xp::Assistant* Assistant = {read = get_Assistant};
  __property   Frontpage_xp::FpConnectionSpeed ConnectionSpeed = {read = get_ConnectionSpeed, write = set_ConnectionSpeed};
  __property   long            OlderFile = {read = get_OlderFile, write = set_OlderFile};
  __property   long            RecentFile = {read = get_RecentFile, write = set_RecentFile};
  __property   long            SlowPage = {read = get_SlowPage, write = set_SlowPage};
  __property   Vbide_xp::VBE*  VBE = {read = get_VBE};
  __property   long            MonthsShown = {read = get_MonthsShown, write = set_MonthsShown};
  __property   Office_xp::NewFile* NewPageorWeb = {read = get_NewPageorWeb};
  __property   VARIANT_BOOL    ShowStartupDialog = {read = get_ShowStartupDialog, write = set_ShowStartupDialog};
  __property   Frontpageeditor_xp::DispFPHTMLDocument* ActiveDocument = {read = get_ActiveDocument};
};
typedef _ApplicationDispT<_Application> _ApplicationDisp;

// *********************************************************************//
// SmartIntf: TCOMPageWindow
// Interface: PageWindow
// *********************************************************************//
template <class T /* PageWindow */ >
class TCOMPageWindowT : public TComInterface<PageWindow>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMPageWindowT() {}
  TCOMPageWindowT(PageWindow *intf, bool addRef = false) : TComInterface<PageWindow>(intf, addRef) {}
  TCOMPageWindowT(const TCOMPageWindowT& src) : TComInterface<PageWindow>(src) {}
  TCOMPageWindowT& operator=(const TCOMPageWindowT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocument** ppDocObj/*[out,retval]*/);
  HRESULT         __fastcall get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocumentPtr* ppDocObj/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLDocumentPtr __fastcall get__deprecated_ActiveDocument(void);
  HRESULT         __fastcall get_ActiveFrameWindow(Frontpageeditor_xp::IHTMLWindow2** ppDocObj/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveFrameWindow(Frontpageeditor_xp::IHTMLWindow2Ptr* ppDocObj/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLWindow2Ptr __fastcall get_ActiveFrameWindow(void);
  HRESULT         __fastcall get_Caption(BSTR* pszCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall get__deprecated_Document(Frontpageeditor_xp::IHTMLDocument** ppDocObj/*[out,retval]*/);
  HRESULT         __fastcall get__deprecated_Document(Frontpageeditor_xp::IHTMLDocumentPtr* ppDocObj/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLDocumentPtr __fastcall get__deprecated_Document(void);
  HRESULT         __fastcall get_File(Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/);
  HRESULT         __fastcall get_File(Frontpage_xp::WebFilePtr* ppFileObj/*[out,retval]*/);
  Frontpage_xp::WebFilePtr __fastcall get_File(void);
  HRESULT         __fastcall get_FrameWindow(Frontpageeditor_xp::IHTMLWindow2** ppFrameWindowObj/*[out,retval]*/);
  HRESULT         __fastcall get_FrameWindow(Frontpageeditor_xp::IHTMLWindow2Ptr* ppFrameWindowObj/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLWindow2Ptr __fastcall get_FrameWindow(void);
  HRESULT         __fastcall get_IsDirty(VARIANT_BOOL* pfIsDirty/*[out,retval]*/);
  HRESULT         __fastcall get_IsDirty(TOLEBOOL* pfIsDirty/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsDirty(void);
  HRESULT         __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/, 
                                                 VARIANT* ppv/*[out,retval]*/);
  VARIANT         __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/);
  HRESULT         __fastcall get_ViewMode(Frontpage_xp::FpPageViewMode* pviewMode/*[out,retval]*/);
  Frontpage_xp::FpPageViewMode __fastcall get_ViewMode(void);
  HRESULT         __fastcall set_ViewMode(Frontpage_xp::FpPageViewMode pviewMode/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pfIsWindowVisible/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pfIsWindowVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_Web(Frontpage_xp::WebPtr* ppVal/*[out,retval]*/);
  Frontpage_xp::WebPtr __fastcall get_Web(void);
  HRESULT         __fastcall ApplyTheme(BSTR ThemeName/*[in]*/, 
                                        Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/);
  HRESULT         __fastcall Close(VARIANT_BOOL ForceSave/*[in,def,opt]*/);
  HRESULT         __fastcall Refresh(VARIANT_BOOL SaveChanges/*[in,def,opt]*/);
  HRESULT         __fastcall Save(VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT         __fastcall SaveAs(BSTR DestinationUrl/*[in]*/, 
                                    VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT         __fastcall Activate(void);
  HRESULT         __fastcall get_PreviewDocument(Frontpageeditor_xp::IHTMLDocument** ppIEDoc/*[out,retval]*/);
  HRESULT         __fastcall get_PreviewDocument(Frontpageeditor_xp::IHTMLDocumentPtr* ppIEDoc/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLDocumentPtr __fastcall get_PreviewDocument(void);
  HRESULT         __fastcall get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocument** ppDocObj/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocumentPtr* ppDocObj/*[out,retval]*/);
  Frontpageeditor_xp::DispFPHTMLDocumentPtr __fastcall get_ActiveDocument(void);
  HRESULT         __fastcall get_Document(Frontpageeditor_xp::DispFPHTMLDocument** ppDocObj/*[out,retval]*/);
  HRESULT         __fastcall get_Document(Frontpageeditor_xp::DispFPHTMLDocumentPtr* ppDocObj/*[out,retval]*/);
  Frontpageeditor_xp::DispFPHTMLDocumentPtr __fastcall get_Document(void);
  HRESULT         __fastcall set_IsDirty(VARIANT_BOOL pfIsDirty/*[in]*/);
  HRESULT         __fastcall set_IsDirty(TOLEBOOL pfIsDirty/*[in]*/);

  __property   Frontpageeditor_xp::IHTMLDocumentPtr _deprecated_ActiveDocument = {read = get__deprecated_ActiveDocument};
  __property   Frontpageeditor_xp::IHTMLWindow2Ptr ActiveFrameWindow = {read = get_ActiveFrameWindow};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Frontpageeditor_xp::IHTMLDocumentPtr _deprecated_Document = {read = get__deprecated_Document};
  __property   Frontpage_xp::WebFilePtr File = {read = get_File};
  __property   Frontpageeditor_xp::IHTMLWindow2Ptr FrameWindow = {read = get_FrameWindow};
  __property   TOLEBOOL        IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   Frontpage_xp::FpPageViewMode ViewMode = {read = get_ViewMode, write = set_ViewMode};
  __property   TOLEBOOL        Visible = {read = get_Visible};
  __property   Frontpage_xp::WebPtr Web = {read = get_Web};
  __property   Frontpageeditor_xp::IHTMLDocumentPtr PreviewDocument = {read = get_PreviewDocument};
  __property   Frontpageeditor_xp::DispFPHTMLDocumentPtr ActiveDocument = {read = get_ActiveDocument};
  __property   Frontpageeditor_xp::DispFPHTMLDocumentPtr Document = {read = get_Document};
};
typedef TCOMPageWindowT<PageWindow> TCOMPageWindow;

// *********************************************************************//
// DispIntf:  PageWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4014-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template<class T>
class PageWindowDispT : public TAutoDriver<PageWindow>
{
public:
  PageWindowDispT(){}

  PageWindowDispT(PageWindow *pintf)
  {
    TAutoDriver<PageWindow>::Bind(pintf, false);
  }

  PageWindowDispT(PageWindowPtr pintf)
  {
    TAutoDriver<PageWindow>::Bind(pintf, true);
  }

  PageWindowDispT& operator=(PageWindow *pintf)
  {
    TAutoDriver<PageWindow>::Bind(pintf, false);
    return *this;
  }

  PageWindowDispT& operator=(PageWindowPtr pintf)
  {
    TAutoDriver<PageWindow>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PageWindowEx));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PageWindowEx);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocument** ppDocObj/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLDocument* __fastcall get__deprecated_ActiveDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveFrameWindow(Frontpageeditor_xp::IHTMLWindow2** ppDocObj/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLWindow2* __fastcall get_ActiveFrameWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pszCaption/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__deprecated_Document(Frontpageeditor_xp::IHTMLDocument** ppDocObj/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLDocument* __fastcall get__deprecated_Document(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_File(Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/);
  Frontpage_xp::WebFile* __fastcall get_File(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FrameWindow(Frontpageeditor_xp::IHTMLWindow2** ppFrameWindowObj/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLWindow2* __fastcall get_FrameWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsDirty(VARIANT_BOOL* pfIsDirty/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDirty(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/
                                                            , VARIANT* ppv/*[out,retval]*/);
  VARIANT         __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewMode(Frontpage_xp::FpPageViewMode* pviewMode/*[out,retval]*/);
  Frontpage_xp::FpPageViewMode __fastcall get_ViewMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ViewMode(Frontpage_xp::FpPageViewMode pviewMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pfIsWindowVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyTheme(BSTR ThemeName/*[in]*/, 
                                                   Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close(VARIANT_BOOL ForceSave/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh(VARIANT_BOOL SaveChanges/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Save(VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveAs(BSTR DestinationUrl/*[in]*/, 
                                               VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PreviewDocument(Frontpageeditor_xp::IHTMLDocument** ppIEDoc/*[out,retval]*/);
  Frontpageeditor_xp::IHTMLDocument* __fastcall get_PreviewDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocument** ppDocObj/*[out,retval]*/);
  Frontpageeditor_xp::DispFPHTMLDocument* __fastcall get_ActiveDocument(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Document(Frontpageeditor_xp::DispFPHTMLDocument** ppDocObj/*[out,retval]*/);
  Frontpageeditor_xp::DispFPHTMLDocument* __fastcall get_Document(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsDirty(VARIANT_BOOL pfIsDirty/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpageeditor_xp::IHTMLDocument* _deprecated_ActiveDocument = {read = get__deprecated_ActiveDocument};
  __property   Frontpageeditor_xp::IHTMLWindow2* ActiveFrameWindow = {read = get_ActiveFrameWindow};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Frontpageeditor_xp::IHTMLDocument* _deprecated_Document = {read = get__deprecated_Document};
  __property   Frontpage_xp::WebFile* File = {read = get_File};
  __property   Frontpageeditor_xp::IHTMLWindow2* FrameWindow = {read = get_FrameWindow};
  __property   VARIANT_BOOL    IsDirty = {read = get_IsDirty, write = set_IsDirty};
  __property   Frontpage_xp::FpPageViewMode ViewMode = {read = get_ViewMode, write = set_ViewMode};
  __property   VARIANT_BOOL    Visible = {read = get_Visible};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   Frontpageeditor_xp::IHTMLDocument* PreviewDocument = {read = get_PreviewDocument};
  __property   Frontpageeditor_xp::DispFPHTMLDocument* ActiveDocument = {read = get_ActiveDocument};
  __property   Frontpageeditor_xp::DispFPHTMLDocument* Document = {read = get_Document};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef PageWindowDispT<PageWindow> PageWindowDisp;

typedef TComInterface<WebFile>  TCOMWebFile;

// *********************************************************************//
// DispIntf:  WebFile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4049-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template<class T>
class WebFileDispT : public TAutoDriver<WebFile>
{
public:
  WebFileDispT(){}

  WebFileDispT(WebFile *pintf)
  {
    TAutoDriver<WebFile>::Bind(pintf, false);
  }

  WebFileDispT(WebFilePtr pintf)
  {
    TAutoDriver<WebFile>::Bind(pintf, true);
  }

  WebFileDispT& operator=(WebFile *pintf)
  {
    TAutoDriver<WebFile>::Bind(pintf, false);
    return *this;
  }

  WebFileDispT& operator=(WebFilePtr pintf)
  {
    TAutoDriver<WebFile>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Creator(BSTR* pbzFileCreatorProgId/*[out,retval]*/);
  BSTR            __fastcall get_Creator(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_CheckedoutBy(BSTR* pbzFileCheckedOutBy/*[out,retval]*/);
  BSTR            __fastcall get_CheckedoutBy(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Extension(BSTR* pbzFileExtension/*[out,retval]*/);
  BSTR            __fastcall get_Extension(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsOpen(VARIANT_BOOL* pfIsOpenInEditor/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsOpen(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Frontpage_xp::Properties** ppProperties/*[out,retval]*/);
  Frontpage_xp::Properties* __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MetaTags(Frontpage_xp::MetaTags** ppProperties/*[out,retval]*/);
  Frontpage_xp::MetaTags* __fastcall get_MetaTags(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbzFileBaseName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NavigationNode(Frontpage_xp::NavigationNode** ppNavigationNode/*[out,retval]*/);
  Frontpage_xp::NavigationNode* __fastcall get_NavigationNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/
                                                          , VARIANT* ppv/*[out,retval]*/);
  VARIANT         __fastcall get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/
                                                          , VARIANT* ppv/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/
                                                            , VARIANT* ppv/*[out,retval]*/);
  VARIANT         __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Title(BSTR* pbzTitle/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Title(BSTR pbzTitle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Url(BSTR* pbzUrl/*[out,retval]*/);
  BSTR            __fastcall get_Url(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyTheme(BSTR ThemeName/*[in]*/, 
                                                   Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Checkin(BSTR Comment/*[in,def,opt]*/, 
                                                VARIANT_BOOL KeepCheckedout/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Checkout(VARIANT_BOOL ForceCheckout/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(BSTR DestinationUrl/*[in]*/, 
                                             VARIANT_BOOL Unused/*[in,def,opt]*/, 
                                             VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Edit(Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/, 
                                             Frontpage_xp::PageWindow** ppPageObject/*[out,retval]*/);
  Frontpage_xp::PageWindow* __fastcall Edit(Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(BSTR DestinationUrl/*[in]*/, 
                                             VARIANT_BOOL UpdateLinks/*[in,def,opt]*/, 
                                             VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Open();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UndoCheckout();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsOrphan(VARIANT_BOOL* pIsOrphan/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsOrphan(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DownloadTime(long* plSeconds/*[out,retval]*/);
  long            __fastcall get_DownloadTime(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   BSTR            Creator = {read = get_Creator};
  __property   BSTR            CheckedoutBy = {read = get_CheckedoutBy};
  __property   BSTR            Extension = {read = get_Extension};
  __property   VARIANT_BOOL    IsOpen = {read = get_IsOpen};
  __property   Frontpage_xp::Properties* Properties = {read = get_Properties};
  __property   Frontpage_xp::MetaTags* MetaTags = {read = get_MetaTags};
  __property   BSTR            Name = {read = get_Name};
  __property   Frontpage_xp::NavigationNode* NavigationNode = {read = get_NavigationNode};
  __property   BSTR            Title = {read = get_Title};
  __property   BSTR            Url = {read = get_Url};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   VARIANT_BOOL    IsOrphan = {read = get_IsOrphan};
  __property   long            DownloadTime = {read = get_DownloadTime};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef WebFileDispT<WebFile> WebFileDisp;

typedef TComInterface<Properties>  TCOMProperties;

// *********************************************************************//
// DispIntf:  Properties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E67C7ADC-F4F5-11D1-B0E0-00C04FA30A8B}
// *********************************************************************//
template<class T>
class PropertiesDispT : public TAutoDriver<Properties>
{
public:
  PropertiesDispT(){}

  PropertiesDispT(Properties *pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, false);
  }

  PropertiesDispT(PropertiesPtr pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, true);
  }

  PropertiesDispT& operator=(Properties *pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, false);
    return *this;
  }

  PropertiesDispT& operator=(PropertiesPtr pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(BSTR PropertyKey/*[in]*/, 
                                                 VARIANT* ppvtVal/*[out,retval]*/);
  VARIANT         __fastcall get_Item(BSTR PropertyKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Item(BSTR PropertyKey/*[in]*/, VARIANT* ppvtVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR PropertyKey/*[in]*/, VARIANT* PropertyValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(BSTR PropertyKey);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyChanges();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef PropertiesDispT<Properties> PropertiesDisp;

typedef TComInterface<MetaTags>  TCOMMetaTags;

// *********************************************************************//
// DispIntf:  MetaTags
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2FC94518-0413-11D2-B0E9-00C04FA30A8B}
// *********************************************************************//
template<class T>
class MetaTagsDispT : public TAutoDriver<MetaTags>
{
public:
  MetaTagsDispT(){}

  MetaTagsDispT(MetaTags *pintf)
  {
    TAutoDriver<MetaTags>::Bind(pintf, false);
  }

  MetaTagsDispT(MetaTagsPtr pintf)
  {
    TAutoDriver<MetaTags>::Bind(pintf, true);
  }

  MetaTagsDispT& operator=(MetaTags *pintf)
  {
    TAutoDriver<MetaTags>::Bind(pintf, false);
    return *this;
  }

  MetaTagsDispT& operator=(MetaTagsPtr pintf)
  {
    TAutoDriver<MetaTags>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(BSTR PropertyKey/*[in]*/, 
                                                 VARIANT* PropertyValue/*[out,retval]*/);
  VARIANT         __fastcall get_Item(BSTR PropertyKey/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef MetaTagsDispT<MetaTags> MetaTagsDisp;

typedef TComInterface<NavigationNode>  TCOMNavigationNode;

// *********************************************************************//
// DispIntf:  NavigationNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8905FB0-E5F2-11D1-B0DE-00C04FA30A8B}
// *********************************************************************//
template<class T>
class NavigationNodeDispT : public TAutoDriver<NavigationNode>
{
public:
  NavigationNodeDispT(){}

  NavigationNodeDispT(NavigationNode *pintf)
  {
    TAutoDriver<NavigationNode>::Bind(pintf, false);
  }

  NavigationNodeDispT(NavigationNodePtr pintf)
  {
    TAutoDriver<NavigationNode>::Bind(pintf, true);
  }

  NavigationNodeDispT& operator=(NavigationNode *pintf)
  {
    TAutoDriver<NavigationNode>::Bind(pintf, false);
    return *this;
  }

  NavigationNodeDispT& operator=(NavigationNodePtr pintf)
  {
    TAutoDriver<NavigationNode>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Children(Frontpage_xp::NavigationNodes** ppNodesChildren/*[out,retval]*/);
  Frontpage_xp::NavigationNodes* __fastcall get_Children(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_File(Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/);
  Frontpage_xp::WebFile* __fastcall get_File(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Home(Frontpage_xp::NavigationNode** ppHomeNavigationNode/*[out,retval]*/);
  Frontpage_xp::NavigationNode* __fastcall get_Home(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* pbzNavViewNodeLabel/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Label(BSTR pbzNavViewNodeLabel/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Url(BSTR* pbzUrl/*[out,retval]*/);
  BSTR            __fastcall get_Url(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Next(Frontpage_xp::NavigationNode** ppNavigationNode/*[out,retval]*/);
  Frontpage_xp::NavigationNode* __fastcall get_Next(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Prev(Frontpage_xp::NavigationNode** ppNavigationNode/*[out,retval]*/);
  Frontpage_xp::NavigationNode* __fastcall get_Prev(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** ppWebObject/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(Frontpage_xp::NavigationNodes* NodeCollection/*[in]*/, 
                                             VARIANT* NewLeftSibling/*[in,opt]*/, 
                                             Frontpage_xp::NavigationNode** ppStruct/*[out,retval]*/);
  Frontpage_xp::NavigationNode* __fastcall Move(Frontpage_xp::NavigationNodes* NodeCollection/*[in]*/, 
                                                VARIANT* NewLeftSibling/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_InNavBars(VARIANT_BOOL* pbInNavBars/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InNavBars(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_InNavBars(VARIANT_BOOL pbInNavBars/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubTree(Frontpage_xp::NavigationNodes** ppNodesSubTree/*[out,retval]*/);
  Frontpage_xp::NavigationNodes* __fastcall get_SubTree(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsLinkBar(VARIANT_BOOL* pbIsLinkBar/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsLinkBar(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::NavigationNodes* Children = {read = get_Children};
  __property   Frontpage_xp::WebFile* File = {read = get_File};
  __property   Frontpage_xp::NavigationNode* Home = {read = get_Home};
  __property   BSTR            Label = {read = get_Label};
  __property   BSTR            Url = {read = get_Url};
  __property   Frontpage_xp::NavigationNode* Next = {read = get_Next};
  __property   Frontpage_xp::NavigationNode* Prev = {read = get_Prev};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   VARIANT_BOOL    InNavBars = {read = get_InNavBars, write = set_InNavBars};
  __property   Frontpage_xp::NavigationNodes* SubTree = {read = get_SubTree};
  __property   VARIANT_BOOL    IsLinkBar = {read = get_IsLinkBar};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef NavigationNodeDispT<NavigationNode> NavigationNodeDisp;

typedef TComInterface<NavigationNodes>  TCOMNavigationNodes;

// *********************************************************************//
// DispIntf:  NavigationNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {435789D4-E5DC-11D1-B0DE-00C04FA30A8B}
// *********************************************************************//
template<class T>
class NavigationNodesDispT : public TAutoDriver<NavigationNodes>
{
public:
  NavigationNodesDispT(){}

  NavigationNodesDispT(NavigationNodes *pintf)
  {
    TAutoDriver<NavigationNodes>::Bind(pintf, false);
  }

  NavigationNodesDispT(NavigationNodesPtr pintf)
  {
    TAutoDriver<NavigationNodes>::Bind(pintf, true);
  }

  NavigationNodesDispT& operator=(NavigationNodes *pintf)
  {
    TAutoDriver<NavigationNodes>::Bind(pintf, false);
    return *this;
  }

  NavigationNodesDispT& operator=(NavigationNodesPtr pintf)
  {
    TAutoDriver<NavigationNodes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Frontpage_xp::NavigationNode** ppVal/*[out,retval]*/);
  Frontpage_xp::NavigationNode* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Url/*[in]*/, BSTR NodeLabel/*[in]*/, 
                                            Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                                            VARIANT* LeftSibling/*[in,opt]*/, 
                                            Frontpage_xp::NavigationNode** ppStruct/*[out,retval]*/);
  Frontpage_xp::NavigationNode* __fastcall Add(BSTR Url/*[in]*/, BSTR NodeLabel/*[in]*/, 
                                               Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                                               VARIANT* LeftSibling/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT* Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddLinkBar(BSTR NodeLabel/*[in]*/, 
                                                   Frontpage_xp::FpStructModType ModificationType/*[in]*/
                                                   , VARIANT* LeftSibling/*[in,opt]*/, 
                                                   Frontpage_xp::NavigationNode** ppStruct/*[out,retval]*/);
  Frontpage_xp::NavigationNode* __fastcall AddLinkBar(BSTR NodeLabel/*[in]*/, 
                                                      Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                                                      VARIANT* LeftSibling/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef NavigationNodesDispT<NavigationNodes> NavigationNodesDisp;

// *********************************************************************//
// SmartIntf: TCOMWeb
// Interface: Web
// *********************************************************************//
template <class T /* Web */ >
class TCOMWebT : public TComInterface<Web>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMWebT() {}
  TCOMWebT(Web *intf, bool addRef = false) : TComInterface<Web>(intf, addRef) {}
  TCOMWebT(const TCOMWebT& src) : TComInterface<Web>(src) {}
  TCOMWebT& operator=(const TCOMWebT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ActiveWebWindow(Frontpage_xp::WebWindow** ppActiveWebWindow/*[out,retval]*/);
  HRESULT         __fastcall get_ActiveWebWindow(Frontpage_xp::WebWindowPtr* ppActiveWebWindow/*[out,retval]*/);
  Frontpage_xp::WebWindowPtr __fastcall get_ActiveWebWindow(void);
  HRESULT         __fastcall get_AllowsLongFilenames(VARIANT_BOOL* pbAllowLongFileNames/*[out,retval]*/);
  HRESULT         __fastcall get_AllowsLongFilenames(TOLEBOOL* pbAllowLongFileNames/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowsLongFilenames(void);
  HRESULT         __fastcall get_RootNavigationNode(Frontpage_xp::NavigationNode** ppRootNavigationNode/*[out,retval]*/);
  HRESULT         __fastcall get_RootNavigationNode(Frontpage_xp::NavigationNodePtr* ppRootNavigationNode/*[out,retval]*/);
  Frontpage_xp::NavigationNodePtr __fastcall get_RootNavigationNode(void);
  HRESULT         __fastcall get_HomeNavigationNode(Frontpage_xp::NavigationNode** ppRootNavigationNode/*[out,retval]*/);
  HRESULT         __fastcall get_HomeNavigationNode(Frontpage_xp::NavigationNodePtr* ppRootNavigationNode/*[out,retval]*/);
  Frontpage_xp::NavigationNodePtr __fastcall get_HomeNavigationNode(void);
  HRESULT         __fastcall get_IsUnderRevisionControl(VARIANT_BOOL* pbIsUnderRCS/*[out,retval]*/);
  HRESULT         __fastcall get_IsUnderRevisionControl(TOLEBOOL* pbIsUnderRCS/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsUnderRevisionControl(void);
  HRESULT         __fastcall get_Properties(Frontpage_xp::Properties** ppProps/*[out,retval]*/);
  HRESULT         __fastcall get_Properties(Frontpage_xp::PropertiesPtr* ppProps/*[out,retval]*/);
  Frontpage_xp::PropertiesPtr __fastcall get_Properties(void);
  HRESULT         __fastcall get_RevisionControlProject(BSTR* pbzRCSProjectName/*[out,retval]*/);
  BSTR            __fastcall get_RevisionControlProject(void);
  HRESULT         __fastcall set_RevisionControlProject(BSTR pbzRCSProjectName/*[in]*/);
  HRESULT         __fastcall get_RootFolder(Frontpage_xp::WebFolder** ppRootFolder/*[out,retval]*/);
  HRESULT         __fastcall get_RootFolder(Frontpage_xp::WebFolderPtr* ppRootFolder/*[out,retval]*/);
  Frontpage_xp::WebFolderPtr __fastcall get_RootFolder(void);
  HRESULT         __fastcall get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                                               VARIANT* ppv/*[out,retval]*/);
  VARIANT         __fastcall get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/);
  HRESULT         __fastcall set_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                                               VARIANT* ppv/*[in]*/);
  HRESULT         __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/, 
                                                 VARIANT* ppv/*[out,retval]*/);
  VARIANT         __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/);
  HRESULT         __fastcall get_Themes(Frontpage_xp::Themes** ppThemesInWeb/*[out,retval]*/);
  HRESULT         __fastcall get_Themes(Frontpage_xp::ThemesPtr* ppThemesInWeb/*[out,retval]*/);
  Frontpage_xp::ThemesPtr __fastcall get_Themes(void);
  HRESULT         __fastcall get_Title(BSTR* szWebTitle/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT         __fastcall set_Title(BSTR szWebTitle/*[in]*/);
  HRESULT         __fastcall get_Url(BSTR* szWebUrl/*[out,retval]*/);
  BSTR            __fastcall get_Url(void);
  HRESULT         __fastcall get_WebWindows(Frontpage_xp::WebWindows** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_WebWindows(Frontpage_xp::WebWindowsPtr* ppVal/*[out,retval]*/);
  Frontpage_xp::WebWindowsPtr __fastcall get_WebWindows(void);
  HRESULT         __fastcall Activate(void);
  HRESULT         __fastcall ApplyTheme(BSTR ThemeName/*[in]*/, 
                                        Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/);
  HRESULT         __fastcall CancelRequests(void);
  HRESULT         __fastcall Close(void);
  HRESULT         __fastcall Delete(Frontpage_xp::FpWebDeleteFlags WebDeleteFlags/*[in,def,opt]*/);
  HRESULT         __fastcall LocateFile(BSTR FileUrl/*[in]*/, 
                                        Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/);
  Frontpage_xp::WebFile* __fastcall LocateFile(BSTR FileUrl/*[in]*/);
  HRESULT         __fastcall LocateFolder(BSTR FolderUrl/*[in]*/, 
                                          Frontpage_xp::WebFolder** ppFolderObj/*[out,retval]*/);
  Frontpage_xp::WebFolder* __fastcall LocateFolder(BSTR FolderUrl/*[in]*/);
  HRESULT         __fastcall LocatePage(BSTR FileUrl/*[in]*/, 
                                        Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/, 
                                        Frontpage_xp::PageWindow** ppObj/*[out,retval]*/);
  Frontpage_xp::PageWindow* __fastcall LocatePage(BSTR FileUrl/*[in]*/, 
                                                  Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/);
  HRESULT         __fastcall Publish(BSTR DestinationUrl/*[in]*/, 
                                     Frontpage_xp::FpWebPublishFlags PublishFlags/*[in,def,opt]*/, 
                                     BSTR UserName/*[in,def,opt]*/, BSTR Password/*[in,def,opt]*/);
  HRESULT         __fastcall RecalcHyperlinks(void);
  HRESULT         __fastcall Refresh(VARIANT_BOOL FetchAll/*[in,def,opt]*/);
  HRESULT         __fastcall ApplyNavigationStructure(void);
  HRESULT         __fastcall get_IsHiddenFoldersEnabled(VARIANT_BOOL* pbIsHiddenFoldersEnabled/*[out,retval]*/);
  HRESULT         __fastcall get_IsHiddenFoldersEnabled(TOLEBOOL* pbIsHiddenFoldersEnabled/*[out,retval]*/);
  TOLEBOOL        __fastcall get_IsHiddenFoldersEnabled(void);
  HRESULT         __fastcall set_IsHiddenFoldersEnabled(VARIANT_BOOL pbIsHiddenFoldersEnabled/*[in]*/);
  HRESULT         __fastcall set_IsHiddenFoldersEnabled(TOLEBOOL pbIsHiddenFoldersEnabled/*[in]*/);
  HRESULT         __fastcall get_AllFiles(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/);
  HRESULT         __fastcall get_AllFiles(Frontpage_xp::WebFilesPtr* ppFilesCollection/*[out,retval]*/);
  Frontpage_xp::WebFilesPtr __fastcall get_AllFiles(void);
  HRESULT         __fastcall get_AllFolders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/);
  HRESULT         __fastcall get_AllFolders(Frontpage_xp::WebFoldersPtr* ppFoldersCollection/*[out,retval]*/);
  Frontpage_xp::WebFoldersPtr __fastcall get_AllFolders(void);
  HRESULT         __fastcall get_AllNavigationNodes(Frontpage_xp::NavigationNodes** ppNodes/*[out,retval]*/);
  HRESULT         __fastcall get_AllNavigationNodes(Frontpage_xp::NavigationNodesPtr* ppNodes/*[out,retval]*/);
  Frontpage_xp::NavigationNodesPtr __fastcall get_AllNavigationNodes(void);
  HRESULT         __fastcall ApplyTemplate(BSTR TemplateDir/*[in]*/, 
                                           VARIANT_BOOL fOverWrite/*[in,def,opt]*/);
  HRESULT         __fastcall get_Lists(Frontpage_xp::_Lists** ppLists/*[out,retval]*/);
  HRESULT         __fastcall get_Lists(Frontpage_xp::_ListsPtr* ppLists/*[out,retval]*/);
  Frontpage_xp::_ListsPtr __fastcall get_Lists(void);

  __property   Frontpage_xp::WebWindowPtr ActiveWebWindow = {read = get_ActiveWebWindow};
  __property   TOLEBOOL        AllowsLongFilenames = {read = get_AllowsLongFilenames};
  __property   Frontpage_xp::NavigationNodePtr RootNavigationNode = {read = get_RootNavigationNode};
  __property   Frontpage_xp::NavigationNodePtr HomeNavigationNode = {read = get_HomeNavigationNode};
  __property   TOLEBOOL        IsUnderRevisionControl = {read = get_IsUnderRevisionControl};
  __property   Frontpage_xp::PropertiesPtr Properties = {read = get_Properties};
  __property   BSTR            RevisionControlProject = {read = get_RevisionControlProject};
  __property   Frontpage_xp::WebFolderPtr RootFolder = {read = get_RootFolder};
  __property   Frontpage_xp::ThemesPtr Themes = {read = get_Themes};
  __property   BSTR            Title = {read = get_Title};
  __property   BSTR            Url = {read = get_Url};
  __property   Frontpage_xp::WebWindowsPtr WebWindows = {read = get_WebWindows};
  __property   TOLEBOOL        IsHiddenFoldersEnabled = {read = get_IsHiddenFoldersEnabled, write = set_IsHiddenFoldersEnabled};
  __property   Frontpage_xp::WebFilesPtr AllFiles = {read = get_AllFiles};
  __property   Frontpage_xp::WebFoldersPtr AllFolders = {read = get_AllFolders};
  __property   Frontpage_xp::NavigationNodesPtr AllNavigationNodes = {read = get_AllNavigationNodes};
  __property   Frontpage_xp::_ListsPtr Lists = {read = get_Lists};
};
typedef TCOMWebT<Web> TCOMWeb;

// *********************************************************************//
// DispIntf:  Web
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {95B21741-CA4A-11D1-83D5-006097ABE675}
// *********************************************************************//
template<class T>
class WebDispT : public TAutoDriver<Web>
{
public:
  WebDispT(){}

  WebDispT(Web *pintf)
  {
    TAutoDriver<Web>::Bind(pintf, false);
  }

  WebDispT(WebPtr pintf)
  {
    TAutoDriver<Web>::Bind(pintf, true);
  }

  WebDispT& operator=(Web *pintf)
  {
    TAutoDriver<Web>::Bind(pintf, false);
    return *this;
  }

  WebDispT& operator=(WebPtr pintf)
  {
    TAutoDriver<Web>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WebEx));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WebEx);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActiveWebWindow(Frontpage_xp::WebWindow** ppActiveWebWindow/*[out,retval]*/);
  Frontpage_xp::WebWindow* __fastcall get_ActiveWebWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowsLongFilenames(VARIANT_BOOL* pbAllowLongFileNames/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowsLongFilenames(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RootNavigationNode(Frontpage_xp::NavigationNode** ppRootNavigationNode/*[out,retval]*/);
  Frontpage_xp::NavigationNode* __fastcall get_RootNavigationNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HomeNavigationNode(Frontpage_xp::NavigationNode** ppRootNavigationNode/*[out,retval]*/);
  Frontpage_xp::NavigationNode* __fastcall get_HomeNavigationNode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsUnderRevisionControl(VARIANT_BOOL* pbIsUnderRCS/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsUnderRevisionControl(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Frontpage_xp::Properties** ppProps/*[out,retval]*/);
  Frontpage_xp::Properties* __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RevisionControlProject(BSTR* pbzRCSProjectName/*[out,retval]*/);
  BSTR            __fastcall get_RevisionControlProject(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_RevisionControlProject(BSTR pbzRCSProjectName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_RootFolder(Frontpage_xp::WebFolder** ppRootFolder/*[out,retval]*/);
  Frontpage_xp::WebFolder* __fastcall get_RootFolder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/
                                                          , VARIANT* ppv/*[out,retval]*/);
  VARIANT         __fastcall get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/
                                                          , VARIANT* ppv/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/
                                                            , VARIANT* ppv/*[out,retval]*/);
  VARIANT         __fastcall get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Themes(Frontpage_xp::Themes** ppThemesInWeb/*[out,retval]*/);
  Frontpage_xp::Themes* __fastcall get_Themes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Title(BSTR* szWebTitle/*[out,retval]*/);
  BSTR            __fastcall get_Title(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Title(BSTR szWebTitle/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Url(BSTR* szWebUrl/*[out,retval]*/);
  BSTR            __fastcall get_Url(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_WebWindows(Frontpage_xp::WebWindows** ppVal/*[out,retval]*/);
  Frontpage_xp::WebWindows* __fastcall get_WebWindows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyTheme(BSTR ThemeName/*[in]*/, 
                                                   Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CancelRequests();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(Frontpage_xp::FpWebDeleteFlags WebDeleteFlags/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LocateFile(BSTR FileUrl/*[in]*/, 
                                                   Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/);
  Frontpage_xp::WebFile* __fastcall LocateFile(BSTR FileUrl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LocateFolder(BSTR FolderUrl/*[in]*/, 
                                                     Frontpage_xp::WebFolder** ppFolderObj/*[out,retval]*/);
  Frontpage_xp::WebFolder* __fastcall LocateFolder(BSTR FolderUrl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall LocatePage(BSTR FileUrl/*[in]*/, 
                                                   Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/
                                                   , 
                                                   Frontpage_xp::PageWindow** ppObj/*[out,retval]*/);
  Frontpage_xp::PageWindow* __fastcall LocatePage(BSTR FileUrl/*[in]*/, 
                                                  Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Publish(BSTR DestinationUrl/*[in]*/, 
                                                Frontpage_xp::FpWebPublishFlags PublishFlags/*[in,def,opt]*/
                                                , BSTR UserName/*[in,def,opt]*/, 
                                                BSTR Password/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RecalcHyperlinks();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Refresh(VARIANT_BOOL FetchAll/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyNavigationStructure();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsHiddenFoldersEnabled(VARIANT_BOOL* pbIsHiddenFoldersEnabled/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsHiddenFoldersEnabled(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsHiddenFoldersEnabled(VARIANT_BOOL pbIsHiddenFoldersEnabled/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllFiles(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/);
  Frontpage_xp::WebFiles* __fastcall get_AllFiles(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllFolders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/);
  Frontpage_xp::WebFolders* __fastcall get_AllFolders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllNavigationNodes(Frontpage_xp::NavigationNodes** ppNodes/*[out,retval]*/);
  Frontpage_xp::NavigationNodes* __fastcall get_AllNavigationNodes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyTemplate(BSTR TemplateDir/*[in]*/, 
                                                      VARIANT_BOOL fOverWrite/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Lists(Frontpage_xp::_Lists** ppLists/*[out,retval]*/);
  Frontpage_xp::_Lists* __fastcall get_Lists(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::WebWindow* ActiveWebWindow = {read = get_ActiveWebWindow};
  __property   VARIANT_BOOL    AllowsLongFilenames = {read = get_AllowsLongFilenames};
  __property   Frontpage_xp::NavigationNode* RootNavigationNode = {read = get_RootNavigationNode};
  __property   Frontpage_xp::NavigationNode* HomeNavigationNode = {read = get_HomeNavigationNode};
  __property   VARIANT_BOOL    IsUnderRevisionControl = {read = get_IsUnderRevisionControl};
  __property   Frontpage_xp::Properties* Properties = {read = get_Properties};
  __property   BSTR            RevisionControlProject = {read = get_RevisionControlProject};
  __property   Frontpage_xp::WebFolder* RootFolder = {read = get_RootFolder};
  __property   Frontpage_xp::Themes* Themes = {read = get_Themes};
  __property   BSTR            Title = {read = get_Title};
  __property   BSTR            Url = {read = get_Url};
  __property   Frontpage_xp::WebWindows* WebWindows = {read = get_WebWindows};
  __property   VARIANT_BOOL    IsHiddenFoldersEnabled = {read = get_IsHiddenFoldersEnabled, write = set_IsHiddenFoldersEnabled};
  __property   Frontpage_xp::WebFiles* AllFiles = {read = get_AllFiles};
  __property   Frontpage_xp::WebFolders* AllFolders = {read = get_AllFolders};
  __property   Frontpage_xp::NavigationNodes* AllNavigationNodes = {read = get_AllNavigationNodes};
  __property   Frontpage_xp::_Lists* Lists = {read = get_Lists};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef WebDispT<Web> WebDisp;

// *********************************************************************//
// SmartIntf: TCOMWebWindow
// Interface: WebWindow
// *********************************************************************//
template <class T /* WebWindow */ >
class TCOMWebWindowT : public TComInterface<WebWindow>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMWebWindowT() {}
  TCOMWebWindowT(WebWindow *intf, bool addRef = false) : TComInterface<WebWindow>(intf, addRef) {}
  TCOMWebWindowT(const TCOMWebWindowT& src) : TComInterface<WebWindow>(src) {}
  TCOMWebWindowT& operator=(const TCOMWebWindowT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ActivePageWindow(Frontpage_xp::PageWindow** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_ActivePageWindow(Frontpage_xp::PageWindowPtr* ppVal/*[out,retval]*/);
  Frontpage_xp::PageWindowPtr __fastcall get_ActivePageWindow(void);
  HRESULT         __fastcall get_Caption(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT         __fastcall get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_Web(Frontpage_xp::WebPtr* ppVal/*[out,retval]*/);
  Frontpage_xp::WebPtr __fastcall get_Web(void);
  HRESULT         __fastcall get_PageWindows(Frontpage_xp::PageWindows** ppVal/*[out,retval]*/);
  HRESULT         __fastcall get_PageWindows(Frontpage_xp::PageWindowsPtr* ppVal/*[out,retval]*/);
  Frontpage_xp::PageWindowsPtr __fastcall get_PageWindows(void);
  HRESULT         __fastcall get_ViewMode(Frontpage_xp::FpWebViewMode* pviewMode/*[out,retval]*/);
  Frontpage_xp::FpWebViewMode __fastcall get_ViewMode(void);
  HRESULT         __fastcall set_ViewMode(Frontpage_xp::FpWebViewMode pviewMode/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* pfIsWindowVisible/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* pfIsWindowVisible/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL pfIsWindowVisible/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL pfIsWindowVisible/*[in]*/);
  HRESULT         __fastcall get_SelectedFiles(LPSAFEARRAY* psa/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_SelectedFiles(void);
  HRESULT         __fastcall get_SelectedFolders(LPSAFEARRAY* psa/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_SelectedFolders(void);
  HRESULT         __fastcall Activate(void);
  HRESULT         __fastcall Close(void);
  HRESULT         __fastcall get_ViewModeEx(Frontpage_xp::FpWebViewModeEx* pviewModeEx/*[out,retval]*/);
  Frontpage_xp::FpWebViewModeEx __fastcall get_ViewModeEx(void);
  HRESULT         __fastcall set_ViewModeEx(Frontpage_xp::FpWebViewModeEx pviewModeEx/*[in]*/);
  HRESULT         __fastcall VerifyAllLinks(void);
  HRESULT         __fastcall SaveReport(Frontpage_xp::FpWebViewModeEx reportviewModeEx/*[in]*/, 
                                        BSTR DestinationUrl/*[in]*/, BSTR Title/*[in]*/, 
                                        VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT         __fastcall get_SubViewMode(Frontpage_xp::FpWebSubView* pSubView/*[out,retval]*/);
  Frontpage_xp::FpWebSubView __fastcall get_SubViewMode(void);
  HRESULT         __fastcall set_SubViewMode(Frontpage_xp::FpWebSubView pSubView/*[in]*/);

  __property   Frontpage_xp::PageWindowPtr ActivePageWindow = {read = get_ActivePageWindow};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Frontpage_xp::WebPtr Web = {read = get_Web};
  __property   Frontpage_xp::PageWindowsPtr PageWindows = {read = get_PageWindows};
  __property   Frontpage_xp::FpWebViewMode ViewMode = {read = get_ViewMode, write = set_ViewMode};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   Frontpage_xp::FpWebViewModeEx ViewModeEx = {read = get_ViewModeEx, write = set_ViewModeEx};
  __property   Frontpage_xp::FpWebSubView SubViewMode = {read = get_SubViewMode, write = set_SubViewMode};
};
typedef TCOMWebWindowT<WebWindow> TCOMWebWindow;

// *********************************************************************//
// DispIntf:  WebWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6B735741-FA41-11D1-83DC-006097ABE675}
// *********************************************************************//
template<class T>
class WebWindowDispT : public TAutoDriver<WebWindow>
{
public:
  WebWindowDispT(){}

  WebWindowDispT(WebWindow *pintf)
  {
    TAutoDriver<WebWindow>::Bind(pintf, false);
  }

  WebWindowDispT(WebWindowPtr pintf)
  {
    TAutoDriver<WebWindow>::Bind(pintf, true);
  }

  WebWindowDispT& operator=(WebWindow *pintf)
  {
    TAutoDriver<WebWindow>::Bind(pintf, false);
    return *this;
  }

  WebWindowDispT& operator=(WebWindowPtr pintf)
  {
    TAutoDriver<WebWindow>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_WebWindowEx));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_WebWindowEx);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ActivePageWindow(Frontpage_xp::PageWindow** ppVal/*[out,retval]*/);
  Frontpage_xp::PageWindow* __fastcall get_ActivePageWindow(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Caption(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Caption(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_PageWindows(Frontpage_xp::PageWindows** ppVal/*[out,retval]*/);
  Frontpage_xp::PageWindows* __fastcall get_PageWindows(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewMode(Frontpage_xp::FpWebViewMode* pviewMode/*[out,retval]*/);
  Frontpage_xp::FpWebViewMode __fastcall get_ViewMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ViewMode(Frontpage_xp::FpWebViewMode pviewMode/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Visible(VARIANT_BOOL* pfIsWindowVisible/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Visible(VARIANT_BOOL pfIsWindowVisible/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedFiles(LPSAFEARRAY* psa/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_SelectedFiles(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SelectedFolders(LPSAFEARRAY* psa/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_SelectedFolders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Activate();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewModeEx(Frontpage_xp::FpWebViewModeEx* pviewModeEx/*[out,retval]*/);
  Frontpage_xp::FpWebViewModeEx __fastcall get_ViewModeEx(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ViewModeEx(Frontpage_xp::FpWebViewModeEx pviewModeEx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall VerifyAllLinks();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SaveReport(Frontpage_xp::FpWebViewModeEx reportviewModeEx/*[in]*/
                                                   , BSTR DestinationUrl/*[in]*/, BSTR Title/*[in]*/
                                                   , VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_SubViewMode(Frontpage_xp::FpWebSubView* pSubView/*[out,retval]*/);
  Frontpage_xp::FpWebSubView __fastcall get_SubViewMode(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_SubViewMode(Frontpage_xp::FpWebSubView pSubView/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::PageWindow* ActivePageWindow = {read = get_ActivePageWindow};
  __property   BSTR            Caption = {read = get_Caption};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   Frontpage_xp::PageWindows* PageWindows = {read = get_PageWindows};
  __property   Frontpage_xp::FpWebViewMode ViewMode = {read = get_ViewMode, write = set_ViewMode};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   Frontpage_xp::FpWebViewModeEx ViewModeEx = {read = get_ViewModeEx, write = set_ViewModeEx};
  __property   Frontpage_xp::FpWebSubView SubViewMode = {read = get_SubViewMode, write = set_SubViewMode};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef WebWindowDispT<WebWindow> WebWindowDisp;

typedef TComInterface<PageWindows>  TCOMPageWindows;

// *********************************************************************//
// DispIntf:  PageWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4042-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template<class T>
class PageWindowsDispT : public TAutoDriver<PageWindows>
{
public:
  PageWindowsDispT(){}

  PageWindowsDispT(PageWindows *pintf)
  {
    TAutoDriver<PageWindows>::Bind(pintf, false);
  }

  PageWindowsDispT(PageWindowsPtr pintf)
  {
    TAutoDriver<PageWindows>::Bind(pintf, true);
  }

  PageWindowsDispT& operator=(PageWindows *pintf)
  {
    TAutoDriver<PageWindows>::Bind(pintf, false);
    return *this;
  }

  PageWindowsDispT& operator=(PageWindowsPtr pintf)
  {
    TAutoDriver<PageWindows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Frontpage_xp::PageWindow** ppVal/*[out,retval]*/);
  Frontpage_xp::PageWindow* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR FileUrl/*[in,def,opt]*/, 
                                            Frontpage_xp::PageWindow** ppVal/*[out,retval]*/);
  Frontpage_xp::PageWindow* __fastcall Add(BSTR FileUrl/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close(VARIANT* Index/*[in,opt]*/, 
                                              VARIANT_BOOL ForceSave/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef PageWindowsDispT<PageWindows> PageWindowsDisp;

typedef TComInterface<WebFolder>  TCOMWebFolder;

// *********************************************************************//
// DispIntf:  WebFolder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB404D-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template<class T>
class WebFolderDispT : public TAutoDriver<WebFolder>
{
public:
  WebFolderDispT(){}

  WebFolderDispT(WebFolder *pintf)
  {
    TAutoDriver<WebFolder>::Bind(pintf, false);
  }

  WebFolderDispT(WebFolderPtr pintf)
  {
    TAutoDriver<WebFolder>::Bind(pintf, true);
  }

  WebFolderDispT& operator=(WebFolder *pintf)
  {
    TAutoDriver<WebFolder>::Bind(pintf, false);
    return *this;
  }

  WebFolderDispT& operator=(WebFolderPtr pintf)
  {
    TAutoDriver<WebFolder>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Files(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/);
  Frontpage_xp::WebFiles* __fastcall get_Files(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Folders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/);
  Frontpage_xp::WebFolders* __fastcall get_Folders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsExecutable(VARIANT_BOOL* pfIsExecutable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsExecutable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsExecutable(VARIANT_BOOL pfIsExecutable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsReadable(VARIANT_BOOL* pfIsReadable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsReadable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_IsReadable(VARIANT_BOOL pfIsReadable/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsRoot(VARIANT_BOOL* pfIsRootFolder/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsRoot(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsWeb(VARIANT_BOOL* pvfIsSubweb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsWeb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_IsWritable(VARIANT_BOOL* pfIsWritable/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsWritable(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbzFolderName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Properties(Frontpage_xp::Properties** ppProps/*[out,retval]*/);
  Frontpage_xp::Properties* __fastcall get_Properties(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Url(BSTR* pbzFolderUrl/*[out,retval]*/);
  BSTR            __fastcall get_Url(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Copy(BSTR DestinationUrl/*[in]*/, 
                                             VARIANT_BOOL Unused/*[in,def,opt]*/, 
                                             VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MakeWeb(BSTR UserName/*[in,def,opt]*/, 
                                                BSTR Password/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveWeb(BSTR UserName/*[in,def,opt]*/, 
                                                  BSTR Password/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Move(BSTR DestinationUrl/*[in]*/, 
                                             VARIANT_BOOL UpdateLinks/*[in,def,opt]*/, 
                                             VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllFiles(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/);
  Frontpage_xp::WebFiles* __fastcall get_AllFiles(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllFolders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/);
  Frontpage_xp::WebFolders* __fastcall get_AllFolders(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_List(Frontpage_xp::_List** ppList/*[out,retval]*/);
  Frontpage_xp::_List* __fastcall get_List(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::WebFiles* Files = {read = get_Files};
  __property   Frontpage_xp::WebFolders* Folders = {read = get_Folders};
  __property   VARIANT_BOOL    IsExecutable = {read = get_IsExecutable, write = set_IsExecutable};
  __property   VARIANT_BOOL    IsReadable = {read = get_IsReadable, write = set_IsReadable};
  __property   VARIANT_BOOL    IsRoot = {read = get_IsRoot};
  __property   VARIANT_BOOL    IsWeb = {read = get_IsWeb};
  __property   VARIANT_BOOL    IsWritable = {read = get_IsWritable};
  __property   BSTR            Name = {read = get_Name};
  __property   Frontpage_xp::Properties* Properties = {read = get_Properties};
  __property   BSTR            Url = {read = get_Url};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   Frontpage_xp::WebFiles* AllFiles = {read = get_AllFiles};
  __property   Frontpage_xp::WebFolders* AllFolders = {read = get_AllFolders};
  __property   Frontpage_xp::_List* List = {read = get_List};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef WebFolderDispT<WebFolder> WebFolderDisp;

typedef TComInterface<WebFiles>  TCOMWebFiles;

// *********************************************************************//
// DispIntf:  WebFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB404F-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template<class T>
class WebFilesDispT : public TAutoDriver<WebFiles>
{
public:
  WebFilesDispT(){}

  WebFilesDispT(WebFiles *pintf)
  {
    TAutoDriver<WebFiles>::Bind(pintf, false);
  }

  WebFilesDispT(WebFilesPtr pintf)
  {
    TAutoDriver<WebFiles>::Bind(pintf, true);
  }

  WebFilesDispT& operator=(WebFiles *pintf)
  {
    TAutoDriver<WebFiles>::Bind(pintf, false);
    return *this;
  }

  WebFilesDispT& operator=(WebFilesPtr pintf)
  {
    TAutoDriver<WebFiles>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Frontpage_xp::WebFile** ppVal/*[out,retval]*/);
  Frontpage_xp::WebFile* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR FileUrl/*[in]*/, 
                                            VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/, 
                                            Frontpage_xp::WebFile** ppVal/*[out,retval]*/);
  Frontpage_xp::WebFile* __fastcall Add(BSTR FileUrl/*[in]*/, 
                                        VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyTheme(BSTR ThemeName/*[in]*/, 
                                                   Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef WebFilesDispT<WebFiles> WebFilesDisp;

typedef TComInterface<WebFolders>  TCOMWebFolders;

// *********************************************************************//
// DispIntf:  WebFolders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4015-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template<class T>
class WebFoldersDispT : public TAutoDriver<WebFolders>
{
public:
  WebFoldersDispT(){}

  WebFoldersDispT(WebFolders *pintf)
  {
    TAutoDriver<WebFolders>::Bind(pintf, false);
  }

  WebFoldersDispT(WebFoldersPtr pintf)
  {
    TAutoDriver<WebFolders>::Bind(pintf, true);
  }

  WebFoldersDispT& operator=(WebFolders *pintf)
  {
    TAutoDriver<WebFolders>::Bind(pintf, false);
    return *this;
  }

  WebFoldersDispT& operator=(WebFoldersPtr pintf)
  {
    TAutoDriver<WebFolders>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Frontpage_xp::WebFolder** ppVal/*[out,retval]*/);
  Frontpage_xp::WebFolder* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR FolderUrl/*[in]*/, 
                                            Frontpage_xp::WebFolder** ppVal/*[out,retval]*/);
  Frontpage_xp::WebFolder* __fastcall Add(BSTR FolderUrl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef WebFoldersDispT<WebFolders> WebFoldersDisp;

// *********************************************************************//
// SmartIntf: TCOM_List
// Interface: _List
// *********************************************************************//
template <class T /* _List */ >
class TCOM_ListT : public TComInterface<_List>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListT() {}
  TCOM_ListT(_List *intf, bool addRef = false) : TComInterface<_List>(intf, addRef) {}
  TCOM_ListT(const TCOM_ListT& src) : TComInterface<_List>(src) {}
  TCOM_ListT& operator=(const TCOM_ListT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT         __fastcall get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/);
  HRESULT         __fastcall get_Fields(Frontpage_xp::_ListFieldsPtr* ppListFields/*[out,retval]*/);
  Frontpage_xp::_ListFieldsPtr __fastcall get_Fields(void);
  HRESULT         __fastcall get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/);
  HRESULT         __fastcall get_Folder(Frontpage_xp::WebFolderPtr* ppWebFolder/*[out,retval]*/);
  Frontpage_xp::WebFolderPtr __fastcall get_Folder(void);
  HRESULT         __fastcall get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/);
  BSTR            __fastcall get_DefaultViewPage(void);
  HRESULT         __fastcall set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/);
  HRESULT         __fastcall get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/);
  BSTR            __fastcall get_DisplayForm(void);
  HRESULT         __fastcall set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/);
  HRESULT         __fastcall get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/);
  BSTR            __fastcall get_EditForm(void);
  HRESULT         __fastcall set_EditForm(BSTR pbstrEditForm/*[in]*/);
  HRESULT         __fastcall get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/);
  BSTR            __fastcall get_NewForm(void);
  HRESULT         __fastcall set_NewForm(BSTR pbstrNewForm/*[in]*/);
  HRESULT         __fastcall get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/);
  Frontpage_xp::FpListDesignSecurity __fastcall get_DesignSecurity(void);
  HRESULT         __fastcall set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/);
  HRESULT         __fastcall get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/);
  Frontpage_xp::FpListType __fastcall get_Type(void);
  HRESULT         __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  HRESULT         __fastcall get_Web(Frontpage_xp::WebPtr* pWeb/*[out,retval]*/);
  Frontpage_xp::WebPtr __fastcall get_Web(void);
  HRESULT         __fastcall ApplyChanges(void);
  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  HRESULT         __fastcall get_ReadOnly(TOLEBOOL* pReadOnly/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ReadOnly(void);
  HRESULT         __fastcall get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_ViewPages(void);
  HRESULT         __fastcall Reserved1(void);
  HRESULT         __fastcall Reserved2(void);
  HRESULT         __fastcall Reserved3(void);
  HRESULT         __fastcall Reserved4(void);
  HRESULT         __fastcall Reserved5(void);
  HRESULT         __fastcall Reserved6(void);
  HRESULT         __fastcall Reserved7(void);
  HRESULT         __fastcall Reserved8(void);
  HRESULT         __fastcall Reserved9(void);
  HRESULT         __fastcall Reserved10(void);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::_ListFieldsPtr Fields = {read = get_Fields};
  __property   Frontpage_xp::WebFolderPtr Folder = {read = get_Folder};
  __property   BSTR            DefaultViewPage = {read = get_DefaultViewPage};
  __property   BSTR            DisplayForm = {read = get_DisplayForm};
  __property   BSTR            EditForm = {read = get_EditForm};
  __property   BSTR            NewForm = {read = get_NewForm};
  __property   Frontpage_xp::FpListDesignSecurity DesignSecurity = {read = get_DesignSecurity, write = set_DesignSecurity};
  __property   Frontpage_xp::FpListType Type = {read = get_Type};
  __property   Frontpage_xp::WebPtr Web = {read = get_Web};
  __property   TOLEBOOL        ReadOnly = {read = get_ReadOnly};
};
typedef TCOM_ListT<_List> TCOM_List;

// *********************************************************************//
// DispIntf:  _List
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B474-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListDispT : public TAutoDriver<_List>
{
public:
  _ListDispT(){}

  _ListDispT(_List *pintf)
  {
    TAutoDriver<_List>::Bind(pintf, false);
  }

  _ListDispT(_ListPtr pintf)
  {
    TAutoDriver<_List>::Bind(pintf, true);
  }

  _ListDispT& operator=(_List *pintf)
  {
    TAutoDriver<_List>::Bind(pintf, false);
    return *this;
  }

  _ListDispT& operator=(_ListPtr pintf)
  {
    TAutoDriver<_List>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_List));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_List);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/);
  Frontpage_xp::_ListFields* __fastcall get_Fields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/);
  Frontpage_xp::WebFolder* __fastcall get_Folder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/);
  BSTR            __fastcall get_DefaultViewPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/);
  BSTR            __fastcall get_DisplayForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/);
  BSTR            __fastcall get_EditForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EditForm(BSTR pbstrEditForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/);
  BSTR            __fastcall get_NewForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NewForm(BSTR pbstrNewForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/);
  Frontpage_xp::FpListDesignSecurity __fastcall get_DesignSecurity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/);
  Frontpage_xp::FpListType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyChanges();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_ViewPages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::_ListFields* Fields = {read = get_Fields};
  __property   Frontpage_xp::WebFolder* Folder = {read = get_Folder};
  __property   BSTR            DefaultViewPage = {read = get_DefaultViewPage};
  __property   BSTR            DisplayForm = {read = get_DisplayForm};
  __property   BSTR            EditForm = {read = get_EditForm};
  __property   BSTR            NewForm = {read = get_NewForm};
  __property   Frontpage_xp::FpListDesignSecurity DesignSecurity = {read = get_DesignSecurity, write = set_DesignSecurity};
  __property   Frontpage_xp::FpListType Type = {read = get_Type};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListDispT<_List> _ListDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFields
// Interface: _ListFields
// *********************************************************************//
template <class T /* _ListFields */ >
class TCOM_ListFieldsT : public TComInterface<_ListFields>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldsT() {}
  TCOM_ListFieldsT(_ListFields *intf, bool addRef = false) : TComInterface<_ListFields>(intf, addRef) {}
  TCOM_ListFieldsT(const TCOM_ListFieldsT& src) : TComInterface<_ListFields>(src) {}
  TCOM_ListFieldsT& operator=(const TCOM_ListFieldsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, LPDISPATCH* ppVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, BSTR Description/*[in,def,opt]*/, 
                                 Frontpage_xp::FpFieldType FieldType/*[in,def,opt]*/, 
                                 VARIANT_BOOL Required/*[in,def,opt]*/, 
                                 Frontpage_xp::_ListField* pLookupField/*[in,def,opt]*/, 
                                 VARIANT* DefaultValue/*[in,opt]*/, 
                                 Frontpage_xp::_ListField** ppVal/*[out,retval]*/);
  Frontpage_xp::_ListField* __fastcall Add(BSTR Name/*[in]*/, BSTR Description/*[in,def,opt]*/, 
                                           Frontpage_xp::FpFieldType FieldType/*[in,def,opt]*/, 
                                           VARIANT_BOOL Required/*[in,def,opt]*/, 
                                           Frontpage_xp::_ListField* pLookupField/*[in,def,opt]*/, 
                                           VARIANT* DefaultValue/*[in,opt]*/= TNoParam());

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOM_ListFieldsT<_ListFields> TCOM_ListFields;

// *********************************************************************//
// DispIntf:  _ListFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B475-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldsDispT : public TAutoDriver<_ListFields>
{
public:
  _ListFieldsDispT(){}

  _ListFieldsDispT(_ListFields *pintf)
  {
    TAutoDriver<_ListFields>::Bind(pintf, false);
  }

  _ListFieldsDispT(_ListFieldsPtr pintf)
  {
    TAutoDriver<_ListFields>::Bind(pintf, true);
  }

  _ListFieldsDispT& operator=(_ListFields *pintf)
  {
    TAutoDriver<_ListFields>::Bind(pintf, false);
    return *this;
  }

  _ListFieldsDispT& operator=(_ListFieldsPtr pintf)
  {
    TAutoDriver<_ListFields>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFields));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFields);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 LPDISPATCH* ppVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, BSTR Description/*[in,def,opt]*/, 
                                            Frontpage_xp::FpFieldType FieldType/*[in,def,opt]*/, 
                                            VARIANT_BOOL Required/*[in,def,opt]*/, 
                                            Frontpage_xp::_ListField* pLookupField/*[in,def,opt]*/, 
                                            VARIANT* DefaultValue/*[in,opt]*/, 
                                            Frontpage_xp::_ListField** ppVal/*[out,retval]*/);
  Frontpage_xp::_ListField* __fastcall Add(BSTR Name/*[in]*/, BSTR Description/*[in,def,opt]*/, 
                                           Frontpage_xp::FpFieldType FieldType/*[in,def,opt]*/, 
                                           VARIANT_BOOL Required/*[in,def,opt]*/, 
                                           Frontpage_xp::_ListField* pLookupField/*[in,def,opt]*/, 
                                           VARIANT* DefaultValue/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldsDispT<_ListFields> _ListFieldsDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListField
// Interface: _ListField
// *********************************************************************//
template <class T /* _ListField */ >
class TCOM_ListFieldT : public TComInterface<_ListField>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldT() {}
  TCOM_ListFieldT(_ListField *intf, bool addRef = false) : TComInterface<_ListField>(intf, addRef) {}
  TCOM_ListFieldT(const TCOM_ListFieldT& src) : TComInterface<_ListField>(src) {}
  TCOM_ListFieldT& operator=(const TCOM_ListFieldT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT         __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT         __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT         __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT         __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  HRESULT         __fastcall get_ReadOnly(TOLEBOOL* pReadOnly/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ReadOnly(void);
  HRESULT         __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  HRESULT         __fastcall get_Web(Frontpage_xp::WebPtr* pWeb/*[out,retval]*/);
  Frontpage_xp::WebPtr __fastcall get_Web(void);
  HRESULT         __fastcall Delete(void);
  HRESULT         __fastcall Reserved1(void);
  HRESULT         __fastcall Reserved2(void);
  HRESULT         __fastcall Reserved3(void);
  HRESULT         __fastcall Reserved4(void);
  HRESULT         __fastcall Reserved5(void);
  HRESULT         __fastcall Reserved6(void);
  HRESULT         __fastcall Reserved7(void);
  HRESULT         __fastcall Reserved8(void);
  HRESULT         __fastcall Reserved9(void);
  HRESULT         __fastcall Reserved10(void);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   TOLEBOOL        ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::WebPtr Web = {read = get_Web};
};
typedef TCOM_ListFieldT<_ListField> TCOM_ListField;

// *********************************************************************//
// DispIntf:  _ListField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B476-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldDispT : public TAutoDriver<_ListField>
{
public:
  _ListFieldDispT(){}

  _ListFieldDispT(_ListField *pintf)
  {
    TAutoDriver<_ListField>::Bind(pintf, false);
  }

  _ListFieldDispT(_ListFieldPtr pintf)
  {
    TAutoDriver<_ListField>::Bind(pintf, true);
  }

  _ListFieldDispT& operator=(_ListField *pintf)
  {
    TAutoDriver<_ListField>::Bind(pintf, false);
    return *this;
  }

  _ListFieldDispT& operator=(_ListFieldPtr pintf)
  {
    TAutoDriver<_ListField>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListField));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListField);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldDispT<_ListField> _ListFieldDisp;

typedef TComInterface<Themes>  TCOMThemes;

// *********************************************************************//
// DispIntf:  Themes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4046-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template<class T>
class ThemesDispT : public TAutoDriver<Themes>
{
public:
  ThemesDispT(){}

  ThemesDispT(Themes *pintf)
  {
    TAutoDriver<Themes>::Bind(pintf, false);
  }

  ThemesDispT(ThemesPtr pintf)
  {
    TAutoDriver<Themes>::Bind(pintf, true);
  }

  ThemesDispT& operator=(Themes *pintf)
  {
    TAutoDriver<Themes>::Bind(pintf, false);
    return *this;
  }

  ThemesDispT& operator=(ThemesPtr pintf)
  {
    TAutoDriver<Themes>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Frontpage_xp::Theme** ppVal/*[out,retval]*/);
  Frontpage_xp::Theme* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef ThemesDispT<Themes> ThemesDisp;

typedef TComInterface<Theme>  TCOMTheme;

// *********************************************************************//
// DispIntf:  Theme
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4044-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template<class T>
class ThemeDispT : public TAutoDriver<Theme>
{
public:
  ThemeDispT(){}

  ThemeDispT(Theme *pintf)
  {
    TAutoDriver<Theme>::Bind(pintf, false);
  }

  ThemeDispT(ThemePtr pintf)
  {
    TAutoDriver<Theme>::Bind(pintf, true);
  }

  ThemeDispT& operator=(Theme *pintf)
  {
    TAutoDriver<Theme>::Bind(pintf, false);
    return *this;
  }

  ThemeDispT& operator=(ThemePtr pintf)
  {
    TAutoDriver<Theme>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Format(BSTR* pszThemeFormat/*[out,retval]*/);
  BSTR            __fastcall get_Format(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pszDirName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Label(BSTR* pszLongThemeName/*[out,retval]*/);
  BSTR            __fastcall get_Label(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* pszThemeVersion/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   BSTR            Format = {read = get_Format};
  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Label = {read = get_Label};
  __property   BSTR            Version = {read = get_Version};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef ThemeDispT<Theme> ThemeDisp;

typedef TComInterface<WebWindows>  TCOMWebWindows;

// *********************************************************************//
// DispIntf:  WebWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6B735742-FA41-11D1-83DC-006097ABE675}
// *********************************************************************//
template<class T>
class WebWindowsDispT : public TAutoDriver<WebWindows>
{
public:
  WebWindowsDispT(){}

  WebWindowsDispT(WebWindows *pintf)
  {
    TAutoDriver<WebWindows>::Bind(pintf, false);
  }

  WebWindowsDispT(WebWindowsPtr pintf)
  {
    TAutoDriver<WebWindows>::Bind(pintf, true);
  }

  WebWindowsDispT& operator=(WebWindows *pintf)
  {
    TAutoDriver<WebWindows>::Bind(pintf, false);
    return *this;
  }

  WebWindowsDispT& operator=(WebWindowsPtr pintf)
  {
    TAutoDriver<WebWindows>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Frontpage_xp::WebWindow** ppVal/*[out,retval]*/);
  Frontpage_xp::WebWindow* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Close(VARIANT* Index/*[in,opt]*/= TNoParam());
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(Frontpage_xp::FpWebViewModeEx ViewModeEx/*[in]*/, 
                                            Frontpage_xp::WebWindow** ppVal/*[out,retval]*/);
  Frontpage_xp::WebWindow* __fastcall Add(Frontpage_xp::FpWebViewModeEx ViewModeEx/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef WebWindowsDispT<WebWindows> WebWindowsDisp;

// *********************************************************************//
// SmartIntf: TCOM_Lists
// Interface: _Lists
// *********************************************************************//
template <class T /* _Lists */ >
class TCOM_ListsT : public TComInterface<_Lists>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListsT() {}
  TCOM_ListsT(_Lists *intf, bool addRef = false) : TComInterface<_Lists>(intf, addRef) {}
  TCOM_ListsT(const TCOM_ListsT& src) : TComInterface<_Lists>(src) {}
  TCOM_ListsT& operator=(const TCOM_ListsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT         __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT         __fastcall get_Item(VARIANT* Index/*[in]*/, LPDISPATCH* ppVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT         __fastcall Add(BSTR Name/*[in]*/, BSTR ParentFolder/*[in,def,opt]*/, 
                                 Frontpage_xp::FpListType ListType/*[in,def,opt]*/, 
                                 BSTR Description/*[in,def,opt]*/, 
                                 Frontpage_xp::_List** ppVal/*[out,retval]*/);
  Frontpage_xp::_List* __fastcall Add(BSTR Name/*[in]*/, BSTR ParentFolder/*[in,def,opt]*/, 
                                      Frontpage_xp::FpListType ListType/*[in,def,opt]*/, 
                                      BSTR Description/*[in,def,opt]*/);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};
};
typedef TCOM_ListsT<_Lists> TCOM_Lists;

// *********************************************************************//
// DispIntf:  _Lists
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B473-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListsDispT : public TAutoDriver<_Lists>
{
public:
  _ListsDispT(){}

  _ListsDispT(_Lists *pintf)
  {
    TAutoDriver<_Lists>::Bind(pintf, false);
  }

  _ListsDispT(_ListsPtr pintf)
  {
    TAutoDriver<_Lists>::Bind(pintf, true);
  }

  _ListsDispT& operator=(_Lists *pintf)
  {
    TAutoDriver<_Lists>::Bind(pintf, false);
    return *this;
  }

  _ListsDispT& operator=(_ListsPtr pintf)
  {
    TAutoDriver<_Lists>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Lists));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Lists);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 LPDISPATCH* ppVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR Name/*[in]*/, BSTR ParentFolder/*[in,def,opt]*/, 
                                            Frontpage_xp::FpListType ListType/*[in,def,opt]*/, 
                                            BSTR Description/*[in,def,opt]*/, 
                                            Frontpage_xp::_List** ppVal/*[out,retval]*/);
  Frontpage_xp::_List* __fastcall Add(BSTR Name/*[in]*/, BSTR ParentFolder/*[in,def,opt]*/, 
                                      Frontpage_xp::FpListType ListType/*[in,def,opt]*/, 
                                      BSTR Description/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListsDispT<_Lists> _ListsDisp;

typedef TComInterface<SYSTEM>  TCOMSYSTEM;

// *********************************************************************//
// DispIntf:  System
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {731EC3E0-9CC2-11D1-83CE-006097ABE675}
// *********************************************************************//
template<class T>
class SYSTEMDispT : public TAutoDriver<SYSTEM>
{
public:
  SYSTEMDispT(){}

  SYSTEMDispT(SYSTEM *pintf)
  {
    TAutoDriver<SYSTEM>::Bind(pintf, false);
  }

  SYSTEMDispT(SYSTEMPtr pintf)
  {
    TAutoDriver<SYSTEM>::Bind(pintf, true);
  }

  SYSTEMDispT& operator=(SYSTEM *pintf)
  {
    TAutoDriver<SYSTEM>::Bind(pintf, false);
    return *this;
  }

  SYSTEMDispT& operator=(SYSTEMPtr pintf)
  {
    TAutoDriver<SYSTEM>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Build(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Build(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Version(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Version(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_OperatingSystem(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_OperatingSystem(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_HorizontalResolution(long* plVal/*[out,retval]*/);
  long            __fastcall get_HorizontalResolution(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_VerticalResolution(long* plVal/*[out,retval]*/);
  long            __fastcall get_VerticalResolution(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LanguageDesignation(BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_LanguageDesignation(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ProfileString(BSTR RegistrySection, BSTR RegistryKey, 
                                                          BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_ProfileString(BSTR RegistrySection, BSTR RegistryKey);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ProfileString(BSTR RegistrySection, BSTR RegistryKey, 
                                                          BSTR pVal/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   BSTR            Build = {read = get_Build};
  __property   BSTR            Version = {read = get_Version};
  __property   BSTR            OperatingSystem = {read = get_OperatingSystem};
  __property   long            HorizontalResolution = {read = get_HorizontalResolution};
  __property   long            VerticalResolution = {read = get_VerticalResolution};
  __property   BSTR            LanguageDesignation = {read = get_LanguageDesignation};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef SYSTEMDispT<SYSTEM> SYSTEMDisp;

typedef TComInterface<Webs>  TCOMWebs;

// *********************************************************************//
// DispIntf:  Webs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AAAA22E0-C834-11D1-83D4-006097ABE675}
// *********************************************************************//
template<class T>
class WebsDispT : public TAutoDriver<Webs>
{
public:
  WebsDispT(){}

  WebsDispT(Webs *pintf)
  {
    TAutoDriver<Webs>::Bind(pintf, false);
  }

  WebsDispT(WebsPtr pintf)
  {
    TAutoDriver<Webs>::Bind(pintf, true);
  }

  WebsDispT& operator=(Webs *pintf)
  {
    TAutoDriver<Webs>::Bind(pintf, false);
    return *this;
  }

  WebsDispT& operator=(WebsPtr pintf)
  {
    TAutoDriver<Webs>::Bind(pintf, true);
    return *this;
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Count(VARIANT* plCount/*[out,retval]*/);
  VARIANT         __fastcall get_Count(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/);
  LPUNKNOWN       __fastcall get__NewEnum(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Item(VARIANT* Index/*[in]*/, 
                                                 Frontpage_xp::Web** ppVal/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Item(VARIANT* Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _deprecated_Add(BSTR WebUrl/*[in]*/, 
                                                        BSTR UserName/*[in,def,opt]*/, 
                                                        BSTR Password/*[in,def,opt]*/, 
                                                        Frontpage_xp::Web** ppVal/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall _deprecated_Add(BSTR WebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                                                BSTR Password/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete(VARIANT* Index/*[in]*/, 
                                               Frontpage_xp::FpWebDeleteFlags WebDeleteFlags/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall _deprecated_Open(BSTR szWebUrl/*[in]*/, 
                                                         BSTR UserName/*[in,def,opt]*/, 
                                                         BSTR Password/*[in,def,opt]*/, 
                                                         Frontpage_xp::Web** ppVal/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall _deprecated_Open(BSTR szWebUrl/*[in]*/, 
                                                 BSTR UserName/*[in,def,opt]*/, 
                                                 BSTR Password/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Add(BSTR WebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                                            BSTR Password/*[in,def,opt]*/, 
                                            Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/
                                            , Frontpage_xp::Web** ppVal/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall Add(BSTR WebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                                    BSTR Password/*[in,def,opt]*/, 
                                    Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Open(BSTR szWebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                                             BSTR Password/*[in,def,opt]*/, 
                                             Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/
                                             , Frontpage_xp::Web** ppVal/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall Open(BSTR szWebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                                     BSTR Password/*[in,def,opt]*/, 
                                     Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   LPUNKNOWN       _NewEnum = {read = get__NewEnum};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef WebsDispT<Webs> WebsDisp;

// *********************************************************************//
// SmartIntf: TCOM_BasicList
// Interface: _BasicList
// *********************************************************************//
template <class T /* _BasicList */ >
class TCOM_BasicListT : public TComInterface<_BasicList>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_BasicListT() {}
  TCOM_BasicListT(_BasicList *intf, bool addRef = false) : TComInterface<_BasicList>(intf, addRef) {}
  TCOM_BasicListT(const TCOM_BasicListT& src) : TComInterface<_BasicList>(src) {}
  TCOM_BasicListT& operator=(const TCOM_BasicListT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_EditSecurity(Frontpage_xp::FpListEditSecurity* peEditSecurity/*[out,retval]*/);
  Frontpage_xp::FpListEditSecurity __fastcall get_EditSecurity(void);
  HRESULT         __fastcall set_EditSecurity(Frontpage_xp::FpListEditSecurity peEditSecurity/*[in]*/);
  HRESULT         __fastcall get_ReadSecurity(Frontpage_xp::FpListReadSecurity* peReadSecurity/*[out,retval]*/);
  Frontpage_xp::FpListReadSecurity __fastcall get_ReadSecurity(void);
  HRESULT         __fastcall set_ReadSecurity(Frontpage_xp::FpListReadSecurity peReadSecurity/*[in]*/);

  __property   Frontpage_xp::FpListEditSecurity EditSecurity = {read = get_EditSecurity, write = set_EditSecurity};
  __property   Frontpage_xp::FpListReadSecurity ReadSecurity = {read = get_ReadSecurity, write = set_ReadSecurity};
};
typedef TCOM_BasicListT<_BasicList> TCOM_BasicList;

// *********************************************************************//
// DispIntf:  _BasicList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B494-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _BasicListDispT : public TAutoDriver<_BasicList>
{
public:
  _BasicListDispT(){}

  _BasicListDispT(_BasicList *pintf)
  {
    TAutoDriver<_BasicList>::Bind(pintf, false);
  }

  _BasicListDispT(_BasicListPtr pintf)
  {
    TAutoDriver<_BasicList>::Bind(pintf, true);
  }

  _BasicListDispT& operator=(_BasicList *pintf)
  {
    TAutoDriver<_BasicList>::Bind(pintf, false);
    return *this;
  }

  _BasicListDispT& operator=(_BasicListPtr pintf)
  {
    TAutoDriver<_BasicList>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_BasicList));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_BasicList);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditSecurity(Frontpage_xp::FpListEditSecurity* peEditSecurity/*[out,retval]*/);
  Frontpage_xp::FpListEditSecurity __fastcall get_EditSecurity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EditSecurity(Frontpage_xp::FpListEditSecurity peEditSecurity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadSecurity(Frontpage_xp::FpListReadSecurity* peReadSecurity/*[out,retval]*/);
  Frontpage_xp::FpListReadSecurity __fastcall get_ReadSecurity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReadSecurity(Frontpage_xp::FpListReadSecurity peReadSecurity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/);
  Frontpage_xp::_ListFields* __fastcall get_Fields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/);
  Frontpage_xp::WebFolder* __fastcall get_Folder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/);
  BSTR            __fastcall get_DefaultViewPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/);
  BSTR            __fastcall get_DisplayForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/);
  BSTR            __fastcall get_EditForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EditForm(BSTR pbstrEditForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/);
  BSTR            __fastcall get_NewForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NewForm(BSTR pbstrNewForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/);
  Frontpage_xp::FpListDesignSecurity __fastcall get_DesignSecurity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/);
  Frontpage_xp::FpListType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyChanges();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_ViewPages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::FpListEditSecurity EditSecurity = {read = get_EditSecurity, write = set_EditSecurity};
  __property   Frontpage_xp::FpListReadSecurity ReadSecurity = {read = get_ReadSecurity, write = set_ReadSecurity};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::_ListFields* Fields = {read = get_Fields};
  __property   Frontpage_xp::WebFolder* Folder = {read = get_Folder};
  __property   BSTR            DefaultViewPage = {read = get_DefaultViewPage};
  __property   BSTR            DisplayForm = {read = get_DisplayForm};
  __property   BSTR            EditForm = {read = get_EditForm};
  __property   BSTR            NewForm = {read = get_NewForm};
  __property   Frontpage_xp::FpListDesignSecurity DesignSecurity = {read = get_DesignSecurity, write = set_DesignSecurity};
  __property   Frontpage_xp::FpListType Type = {read = get_Type};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _BasicListDispT<_BasicList> _BasicListDisp;

// *********************************************************************//
// SmartIntf: TCOM_Survey
// Interface: _Survey
// *********************************************************************//
template <class T /* _Survey */ >
class TCOM_SurveyT : public TComInterface<_Survey>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_SurveyT() {}
  TCOM_SurveyT(_Survey *intf, bool addRef = false) : TComInterface<_Survey>(intf, addRef) {}
  TCOM_SurveyT(const TCOM_SurveyT& src) : TComInterface<_Survey>(src) {}
  TCOM_SurveyT& operator=(const TCOM_SurveyT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_EditSecurity(Frontpage_xp::FpListEditSecurity* peEditSecurity/*[out,retval]*/);
  Frontpage_xp::FpListEditSecurity __fastcall get_EditSecurity(void);
  HRESULT         __fastcall set_EditSecurity(Frontpage_xp::FpListEditSecurity peEditSecurity/*[in]*/);
  HRESULT         __fastcall get_ReadSecurity(Frontpage_xp::FpListReadSecurity* peReadSecurity/*[out,retval]*/);
  Frontpage_xp::FpListReadSecurity __fastcall get_ReadSecurity(void);
  HRESULT         __fastcall set_ReadSecurity(Frontpage_xp::FpListReadSecurity peReadSecurity/*[in]*/);
  HRESULT         __fastcall get_ShowUserNamesInResults(VARIANT_BOOL* pShowUserNames/*[out,retval]*/);
  HRESULT         __fastcall get_ShowUserNamesInResults(TOLEBOOL* pShowUserNames/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowUserNamesInResults(void);
  HRESULT         __fastcall set_ShowUserNamesInResults(VARIANT_BOOL pShowUserNames/*[in]*/);
  HRESULT         __fastcall set_ShowUserNamesInResults(TOLEBOOL pShowUserNames/*[in]*/);
  HRESULT         __fastcall get_AllowMultipleResponses(VARIANT_BOOL* pAllowMultipleResponses/*[out,retval]*/);
  HRESULT         __fastcall get_AllowMultipleResponses(TOLEBOOL* pAllowMultipleResponses/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AllowMultipleResponses(void);
  HRESULT         __fastcall set_AllowMultipleResponses(VARIANT_BOOL pAllowMultipleResponses/*[in]*/);
  HRESULT         __fastcall set_AllowMultipleResponses(TOLEBOOL pAllowMultipleResponses/*[in]*/);

  __property   Frontpage_xp::FpListEditSecurity EditSecurity = {read = get_EditSecurity, write = set_EditSecurity};
  __property   Frontpage_xp::FpListReadSecurity ReadSecurity = {read = get_ReadSecurity, write = set_ReadSecurity};
  __property   TOLEBOOL        ShowUserNamesInResults = {read = get_ShowUserNamesInResults, write = set_ShowUserNamesInResults};
  __property   TOLEBOOL        AllowMultipleResponses = {read = get_AllowMultipleResponses, write = set_AllowMultipleResponses};
};
typedef TCOM_SurveyT<_Survey> TCOM_Survey;

// *********************************************************************//
// DispIntf:  _Survey
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B495-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _SurveyDispT : public TAutoDriver<_Survey>
{
public:
  _SurveyDispT(){}

  _SurveyDispT(_Survey *pintf)
  {
    TAutoDriver<_Survey>::Bind(pintf, false);
  }

  _SurveyDispT(_SurveyPtr pintf)
  {
    TAutoDriver<_Survey>::Bind(pintf, true);
  }

  _SurveyDispT& operator=(_Survey *pintf)
  {
    TAutoDriver<_Survey>::Bind(pintf, false);
    return *this;
  }

  _SurveyDispT& operator=(_SurveyPtr pintf)
  {
    TAutoDriver<_Survey>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Survey));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Survey);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditSecurity(Frontpage_xp::FpListEditSecurity* peEditSecurity/*[out,retval]*/);
  Frontpage_xp::FpListEditSecurity __fastcall get_EditSecurity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EditSecurity(Frontpage_xp::FpListEditSecurity peEditSecurity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadSecurity(Frontpage_xp::FpListReadSecurity* peReadSecurity/*[out,retval]*/);
  Frontpage_xp::FpListReadSecurity __fastcall get_ReadSecurity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ReadSecurity(Frontpage_xp::FpListReadSecurity peReadSecurity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowUserNamesInResults(VARIANT_BOOL* pShowUserNames/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowUserNamesInResults(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowUserNamesInResults(VARIANT_BOOL pShowUserNames/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_AllowMultipleResponses(VARIANT_BOOL* pAllowMultipleResponses/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AllowMultipleResponses(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_AllowMultipleResponses(VARIANT_BOOL pAllowMultipleResponses/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/);
  Frontpage_xp::_ListFields* __fastcall get_Fields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/);
  Frontpage_xp::WebFolder* __fastcall get_Folder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/);
  BSTR            __fastcall get_DefaultViewPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/);
  BSTR            __fastcall get_DisplayForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/);
  BSTR            __fastcall get_EditForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EditForm(BSTR pbstrEditForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/);
  BSTR            __fastcall get_NewForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NewForm(BSTR pbstrNewForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/);
  Frontpage_xp::FpListDesignSecurity __fastcall get_DesignSecurity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/);
  Frontpage_xp::FpListType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyChanges();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_ViewPages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::FpListEditSecurity EditSecurity = {read = get_EditSecurity, write = set_EditSecurity};
  __property   Frontpage_xp::FpListReadSecurity ReadSecurity = {read = get_ReadSecurity, write = set_ReadSecurity};
  __property   VARIANT_BOOL    ShowUserNamesInResults = {read = get_ShowUserNamesInResults, write = set_ShowUserNamesInResults};
  __property   VARIANT_BOOL    AllowMultipleResponses = {read = get_AllowMultipleResponses, write = set_AllowMultipleResponses};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::_ListFields* Fields = {read = get_Fields};
  __property   Frontpage_xp::WebFolder* Folder = {read = get_Folder};
  __property   BSTR            DefaultViewPage = {read = get_DefaultViewPage};
  __property   BSTR            DisplayForm = {read = get_DisplayForm};
  __property   BSTR            EditForm = {read = get_EditForm};
  __property   BSTR            NewForm = {read = get_NewForm};
  __property   Frontpage_xp::FpListDesignSecurity DesignSecurity = {read = get_DesignSecurity, write = set_DesignSecurity};
  __property   Frontpage_xp::FpListType Type = {read = get_Type};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _SurveyDispT<_Survey> _SurveyDisp;

// *********************************************************************//
// SmartIntf: TCOM_DocumentLibrary
// Interface: _DocumentLibrary
// *********************************************************************//
template <class T /* _DocumentLibrary */ >
class TCOM_DocumentLibraryT : public TComInterface<_DocumentLibrary>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_DocumentLibraryT() {}
  TCOM_DocumentLibraryT(_DocumentLibrary *intf, bool addRef = false) : TComInterface<_DocumentLibrary>(intf, addRef) {}
  TCOM_DocumentLibraryT(const TCOM_DocumentLibraryT& src) : TComInterface<_DocumentLibrary>(src) {}
  TCOM_DocumentLibraryT& operator=(const TCOM_DocumentLibraryT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Template(BSTR* pbstrTemplate/*[out,retval]*/);
  BSTR            __fastcall get_Template(void);
  HRESULT         __fastcall set_Template(BSTR pbstrTemplate/*[in]*/);
  HRESULT         __fastcall get_FileDialogViewPage(BSTR* pbstrViewPage/*[out,retval]*/);
  BSTR            __fastcall get_FileDialogViewPage(void);
  HRESULT         __fastcall set_FileDialogViewPage(BSTR pbstrViewPage/*[in]*/);
  HRESULT         __fastcall get_FileSaveForm(BSTR* pbstrSaveForm/*[out,retval]*/);
  BSTR            __fastcall get_FileSaveForm(void);
  HRESULT         __fastcall set_FileSaveForm(BSTR pbstrSaveForm/*[in]*/);

  __property   BSTR            Template = {read = get_Template};
  __property   BSTR            FileDialogViewPage = {read = get_FileDialogViewPage};
  __property   BSTR            FileSaveForm = {read = get_FileSaveForm};
};
typedef TCOM_DocumentLibraryT<_DocumentLibrary> TCOM_DocumentLibrary;

// *********************************************************************//
// DispIntf:  _DocumentLibrary
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B481-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _DocumentLibraryDispT : public TAutoDriver<_DocumentLibrary>
{
public:
  _DocumentLibraryDispT(){}

  _DocumentLibraryDispT(_DocumentLibrary *pintf)
  {
    TAutoDriver<_DocumentLibrary>::Bind(pintf, false);
  }

  _DocumentLibraryDispT(_DocumentLibraryPtr pintf)
  {
    TAutoDriver<_DocumentLibrary>::Bind(pintf, true);
  }

  _DocumentLibraryDispT& operator=(_DocumentLibrary *pintf)
  {
    TAutoDriver<_DocumentLibrary>::Bind(pintf, false);
    return *this;
  }

  _DocumentLibraryDispT& operator=(_DocumentLibraryPtr pintf)
  {
    TAutoDriver<_DocumentLibrary>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_DocumentLibrary));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_DocumentLibrary);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Template(BSTR* pbstrTemplate/*[out,retval]*/);
  BSTR            __fastcall get_Template(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Template(BSTR pbstrTemplate/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileDialogViewPage(BSTR* pbstrViewPage/*[out,retval]*/);
  BSTR            __fastcall get_FileDialogViewPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileDialogViewPage(BSTR pbstrViewPage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_FileSaveForm(BSTR* pbstrSaveForm/*[out,retval]*/);
  BSTR            __fastcall get_FileSaveForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_FileSaveForm(BSTR pbstrSaveForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/);
  Frontpage_xp::_ListFields* __fastcall get_Fields(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/);
  Frontpage_xp::WebFolder* __fastcall get_Folder(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/);
  BSTR            __fastcall get_DefaultViewPage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/);
  BSTR            __fastcall get_DisplayForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/);
  BSTR            __fastcall get_EditForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_EditForm(BSTR pbstrEditForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/);
  BSTR            __fastcall get_NewForm(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NewForm(BSTR pbstrNewForm/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/);
  Frontpage_xp::FpListDesignSecurity __fastcall get_DesignSecurity(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/);
  Frontpage_xp::FpListType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyChanges();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_ViewPages(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   BSTR            Template = {read = get_Template};
  __property   BSTR            FileDialogViewPage = {read = get_FileDialogViewPage};
  __property   BSTR            FileSaveForm = {read = get_FileSaveForm};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::_ListFields* Fields = {read = get_Fields};
  __property   Frontpage_xp::WebFolder* Folder = {read = get_Folder};
  __property   BSTR            DefaultViewPage = {read = get_DefaultViewPage};
  __property   BSTR            DisplayForm = {read = get_DisplayForm};
  __property   BSTR            EditForm = {read = get_EditForm};
  __property   BSTR            NewForm = {read = get_NewForm};
  __property   Frontpage_xp::FpListDesignSecurity DesignSecurity = {read = get_DesignSecurity, write = set_DesignSecurity};
  __property   Frontpage_xp::FpListType Type = {read = get_Type};
  __property   Frontpage_xp::Web* Web = {read = get_Web};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _DocumentLibraryDispT<_DocumentLibrary> _DocumentLibraryDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldSingleLine
// Interface: _ListFieldSingleLine
// *********************************************************************//
template <class T /* _ListFieldSingleLine */ >
class TCOM_ListFieldSingleLineT : public TComInterface<_ListFieldSingleLine>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldSingleLineT() {}
  TCOM_ListFieldSingleLineT(_ListFieldSingleLine *intf, bool addRef = false) : TComInterface<_ListFieldSingleLine>(intf, addRef) {}
  TCOM_ListFieldSingleLineT(const TCOM_ListFieldSingleLineT& src) : TComInterface<_ListFieldSingleLine>(src) {}
  TCOM_ListFieldSingleLineT& operator=(const TCOM_ListFieldSingleLineT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_MaxLength(long* plMaxLength/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT         __fastcall set_MaxLength(long plMaxLength/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT         __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  HRESULT         __fastcall get_Required(TOLEBOOL* pRequired/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Required(void);
  HRESULT         __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT         __fastcall set_Required(TOLEBOOL pRequired/*[in]*/);

  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   TOLEBOOL        Required = {read = get_Required, write = set_Required};
};
typedef TCOM_ListFieldSingleLineT<_ListFieldSingleLine> TCOM_ListFieldSingleLine;

// *********************************************************************//
// DispIntf:  _ListFieldSingleLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B477-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldSingleLineDispT : public TAutoDriver<_ListFieldSingleLine>
{
public:
  _ListFieldSingleLineDispT(){}

  _ListFieldSingleLineDispT(_ListFieldSingleLine *pintf)
  {
    TAutoDriver<_ListFieldSingleLine>::Bind(pintf, false);
  }

  _ListFieldSingleLineDispT(_ListFieldSingleLinePtr pintf)
  {
    TAutoDriver<_ListFieldSingleLine>::Bind(pintf, true);
  }

  _ListFieldSingleLineDispT& operator=(_ListFieldSingleLine *pintf)
  {
    TAutoDriver<_ListFieldSingleLine>::Bind(pintf, false);
    return *this;
  }

  _ListFieldSingleLineDispT& operator=(_ListFieldSingleLinePtr pintf)
  {
    TAutoDriver<_ListFieldSingleLine>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldSingleLine));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldSingleLine);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaxLength(long* plMaxLength/*[out,retval]*/);
  long            __fastcall get_MaxLength(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaxLength(long plMaxLength/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Required(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   long            MaxLength = {read = get_MaxLength, write = set_MaxLength};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldSingleLineDispT<_ListFieldSingleLine> _ListFieldSingleLineDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldMultiLine
// Interface: _ListFieldMultiLine
// *********************************************************************//
template <class T /* _ListFieldMultiLine */ >
class TCOM_ListFieldMultiLineT : public TComInterface<_ListFieldMultiLine>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldMultiLineT() {}
  TCOM_ListFieldMultiLineT(_ListFieldMultiLine *intf, bool addRef = false) : TComInterface<_ListFieldMultiLine>(intf, addRef) {}
  TCOM_ListFieldMultiLineT(const TCOM_ListFieldMultiLineT& src) : TComInterface<_ListFieldMultiLine>(src) {}
  TCOM_ListFieldMultiLineT& operator=(const TCOM_ListFieldMultiLineT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_NumberOfLines(long* plNumberOfLines/*[out,retval]*/);
  long            __fastcall get_NumberOfLines(void);
  HRESULT         __fastcall set_NumberOfLines(long plNumberOfLines/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT         __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  HRESULT         __fastcall get_Required(TOLEBOOL* pRequired/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Required(void);
  HRESULT         __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT         __fastcall set_Required(TOLEBOOL pRequired/*[in]*/);

  __property   long            NumberOfLines = {read = get_NumberOfLines, write = set_NumberOfLines};
  __property   TOLEBOOL        Required = {read = get_Required, write = set_Required};
};
typedef TCOM_ListFieldMultiLineT<_ListFieldMultiLine> TCOM_ListFieldMultiLine;

// *********************************************************************//
// DispIntf:  _ListFieldMultiLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B478-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldMultiLineDispT : public TAutoDriver<_ListFieldMultiLine>
{
public:
  _ListFieldMultiLineDispT(){}

  _ListFieldMultiLineDispT(_ListFieldMultiLine *pintf)
  {
    TAutoDriver<_ListFieldMultiLine>::Bind(pintf, false);
  }

  _ListFieldMultiLineDispT(_ListFieldMultiLinePtr pintf)
  {
    TAutoDriver<_ListFieldMultiLine>::Bind(pintf, true);
  }

  _ListFieldMultiLineDispT& operator=(_ListFieldMultiLine *pintf)
  {
    TAutoDriver<_ListFieldMultiLine>::Bind(pintf, false);
    return *this;
  }

  _ListFieldMultiLineDispT& operator=(_ListFieldMultiLinePtr pintf)
  {
    TAutoDriver<_ListFieldMultiLine>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldMultiLine));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldMultiLine);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_NumberOfLines(long* plNumberOfLines/*[out,retval]*/);
  long            __fastcall get_NumberOfLines(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_NumberOfLines(long plNumberOfLines/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Required(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   long            NumberOfLines = {read = get_NumberOfLines, write = set_NumberOfLines};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldMultiLineDispT<_ListFieldMultiLine> _ListFieldMultiLineDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldNumber
// Interface: _ListFieldNumber
// *********************************************************************//
template <class T /* _ListFieldNumber */ >
class TCOM_ListFieldNumberT : public TComInterface<_ListFieldNumber>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldNumberT() {}
  TCOM_ListFieldNumberT(_ListFieldNumber *intf, bool addRef = false) : TComInterface<_ListFieldNumber>(intf, addRef) {}
  TCOM_ListFieldNumberT(const TCOM_ListFieldNumberT& src) : TComInterface<_ListFieldNumber>(src) {}
  TCOM_ListFieldNumberT& operator=(const TCOM_ListFieldNumberT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_DisplayFormat(Frontpage_xp::FpNumberFieldFormat* pFormat/*[out,retval]*/);
  Frontpage_xp::FpNumberFieldFormat __fastcall get_DisplayFormat(void);
  HRESULT         __fastcall set_DisplayFormat(Frontpage_xp::FpNumberFieldFormat pFormat/*[in]*/);
  HRESULT         __fastcall get_ShowAsPercentage(VARIANT_BOOL* pShowAsPercentage/*[out,retval]*/);
  HRESULT         __fastcall get_ShowAsPercentage(TOLEBOOL* pShowAsPercentage/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShowAsPercentage(void);
  HRESULT         __fastcall set_ShowAsPercentage(VARIANT_BOOL pShowAsPercentage/*[in]*/);
  HRESULT         __fastcall set_ShowAsPercentage(TOLEBOOL pShowAsPercentage/*[in]*/);
  HRESULT         __fastcall get_MinimumValue(VARIANT* pvMinimumValue/*[out,retval]*/);
  VARIANT         __fastcall get_MinimumValue(void);
  HRESULT         __fastcall set_MinimumValue(VARIANT* pvMinimumValue/*[in]*/);
  HRESULT         __fastcall get_MaximumValue(VARIANT* pvMaximumValue/*[out,retval]*/);
  VARIANT         __fastcall get_MaximumValue(void);
  HRESULT         __fastcall set_MaximumValue(VARIANT* pvMaximumValue/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT         __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  HRESULT         __fastcall get_Required(TOLEBOOL* pRequired/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Required(void);
  HRESULT         __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT         __fastcall set_Required(TOLEBOOL pRequired/*[in]*/);

  __property   Frontpage_xp::FpNumberFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   TOLEBOOL        ShowAsPercentage = {read = get_ShowAsPercentage, write = set_ShowAsPercentage};
  __property   TOLEBOOL        Required = {read = get_Required, write = set_Required};
};
typedef TCOM_ListFieldNumberT<_ListFieldNumber> TCOM_ListFieldNumber;

// *********************************************************************//
// DispIntf:  _ListFieldNumber
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B479-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldNumberDispT : public TAutoDriver<_ListFieldNumber>
{
public:
  _ListFieldNumberDispT(){}

  _ListFieldNumberDispT(_ListFieldNumber *pintf)
  {
    TAutoDriver<_ListFieldNumber>::Bind(pintf, false);
  }

  _ListFieldNumberDispT(_ListFieldNumberPtr pintf)
  {
    TAutoDriver<_ListFieldNumber>::Bind(pintf, true);
  }

  _ListFieldNumberDispT& operator=(_ListFieldNumber *pintf)
  {
    TAutoDriver<_ListFieldNumber>::Bind(pintf, false);
    return *this;
  }

  _ListFieldNumberDispT& operator=(_ListFieldNumberPtr pintf)
  {
    TAutoDriver<_ListFieldNumber>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldNumber));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldNumber);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayFormat(Frontpage_xp::FpNumberFieldFormat* pFormat/*[out,retval]*/);
  Frontpage_xp::FpNumberFieldFormat __fastcall get_DisplayFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayFormat(Frontpage_xp::FpNumberFieldFormat pFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ShowAsPercentage(VARIANT_BOOL* pShowAsPercentage/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShowAsPercentage(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_ShowAsPercentage(VARIANT_BOOL pShowAsPercentage/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinimumValue(VARIANT* pvMinimumValue/*[out,retval]*/);
  VARIANT         __fastcall get_MinimumValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinimumValue(VARIANT* pvMinimumValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaximumValue(VARIANT* pvMaximumValue/*[out,retval]*/);
  VARIANT         __fastcall get_MaximumValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaximumValue(VARIANT* pvMaximumValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Required(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::FpNumberFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   VARIANT_BOOL    ShowAsPercentage = {read = get_ShowAsPercentage, write = set_ShowAsPercentage};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldNumberDispT<_ListFieldNumber> _ListFieldNumberDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldCurrency
// Interface: _ListFieldCurrency
// *********************************************************************//
template <class T /* _ListFieldCurrency */ >
class TCOM_ListFieldCurrencyT : public TComInterface<_ListFieldCurrency>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldCurrencyT() {}
  TCOM_ListFieldCurrencyT(_ListFieldCurrency *intf, bool addRef = false) : TComInterface<_ListFieldCurrency>(intf, addRef) {}
  TCOM_ListFieldCurrencyT(const TCOM_ListFieldCurrencyT& src) : TComInterface<_ListFieldCurrency>(src) {}
  TCOM_ListFieldCurrencyT& operator=(const TCOM_ListFieldCurrencyT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_DisplayFormat(Frontpage_xp::FpNumberFieldFormat* pFormat/*[out,retval]*/);
  Frontpage_xp::FpNumberFieldFormat __fastcall get_DisplayFormat(void);
  HRESULT         __fastcall set_DisplayFormat(Frontpage_xp::FpNumberFieldFormat pFormat/*[in]*/);
  HRESULT         __fastcall get_Currency(Frontpage_xp::FpCurrencyFieldFormat* peCurrency/*[out,retval]*/);
  Frontpage_xp::FpCurrencyFieldFormat __fastcall get_Currency(void);
  HRESULT         __fastcall set_Currency(Frontpage_xp::FpCurrencyFieldFormat peCurrency/*[in]*/);
  HRESULT         __fastcall get_MinimumValue(VARIANT* pvMinimumValue/*[out,retval]*/);
  VARIANT         __fastcall get_MinimumValue(void);
  HRESULT         __fastcall set_MinimumValue(VARIANT* pvMinimumValue/*[in]*/);
  HRESULT         __fastcall get_MaximumValue(VARIANT* pvMaximumValue/*[out,retval]*/);
  VARIANT         __fastcall get_MaximumValue(void);
  HRESULT         __fastcall set_MaximumValue(VARIANT* pvMaximumValue/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT         __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  HRESULT         __fastcall get_Required(TOLEBOOL* pRequired/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Required(void);
  HRESULT         __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT         __fastcall set_Required(TOLEBOOL pRequired/*[in]*/);

  __property   Frontpage_xp::FpNumberFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   Frontpage_xp::FpCurrencyFieldFormat Currency = {read = get_Currency, write = set_Currency};
  __property   TOLEBOOL        Required = {read = get_Required, write = set_Required};
};
typedef TCOM_ListFieldCurrencyT<_ListFieldCurrency> TCOM_ListFieldCurrency;

// *********************************************************************//
// DispIntf:  _ListFieldCurrency
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47A-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldCurrencyDispT : public TAutoDriver<_ListFieldCurrency>
{
public:
  _ListFieldCurrencyDispT(){}

  _ListFieldCurrencyDispT(_ListFieldCurrency *pintf)
  {
    TAutoDriver<_ListFieldCurrency>::Bind(pintf, false);
  }

  _ListFieldCurrencyDispT(_ListFieldCurrencyPtr pintf)
  {
    TAutoDriver<_ListFieldCurrency>::Bind(pintf, true);
  }

  _ListFieldCurrencyDispT& operator=(_ListFieldCurrency *pintf)
  {
    TAutoDriver<_ListFieldCurrency>::Bind(pintf, false);
    return *this;
  }

  _ListFieldCurrencyDispT& operator=(_ListFieldCurrencyPtr pintf)
  {
    TAutoDriver<_ListFieldCurrency>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldCurrency));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldCurrency);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayFormat(Frontpage_xp::FpNumberFieldFormat* pFormat/*[out,retval]*/);
  Frontpage_xp::FpNumberFieldFormat __fastcall get_DisplayFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayFormat(Frontpage_xp::FpNumberFieldFormat pFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Currency(Frontpage_xp::FpCurrencyFieldFormat* peCurrency/*[out,retval]*/);
  Frontpage_xp::FpCurrencyFieldFormat __fastcall get_Currency(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Currency(Frontpage_xp::FpCurrencyFieldFormat peCurrency/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MinimumValue(VARIANT* pvMinimumValue/*[out,retval]*/);
  VARIANT         __fastcall get_MinimumValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MinimumValue(VARIANT* pvMinimumValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_MaximumValue(VARIANT* pvMaximumValue/*[out,retval]*/);
  VARIANT         __fastcall get_MaximumValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_MaximumValue(VARIANT* pvMaximumValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Required(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::FpNumberFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   Frontpage_xp::FpCurrencyFieldFormat Currency = {read = get_Currency, write = set_Currency};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldCurrencyDispT<_ListFieldCurrency> _ListFieldCurrencyDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldDateTime
// Interface: _ListFieldDateTime
// *********************************************************************//
template <class T /* _ListFieldDateTime */ >
class TCOM_ListFieldDateTimeT : public TComInterface<_ListFieldDateTime>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldDateTimeT() {}
  TCOM_ListFieldDateTimeT(_ListFieldDateTime *intf, bool addRef = false) : TComInterface<_ListFieldDateTime>(intf, addRef) {}
  TCOM_ListFieldDateTimeT(const TCOM_ListFieldDateTimeT& src) : TComInterface<_ListFieldDateTime>(src) {}
  TCOM_ListFieldDateTimeT& operator=(const TCOM_ListFieldDateTimeT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_DisplayFormat(Frontpage_xp::FpDateTimeFieldFormat* pFormat/*[out,retval]*/);
  Frontpage_xp::FpDateTimeFieldFormat __fastcall get_DisplayFormat(void);
  HRESULT         __fastcall set_DisplayFormat(Frontpage_xp::FpDateTimeFieldFormat pFormat/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT         __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  HRESULT         __fastcall get_Required(TOLEBOOL* pRequired/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Required(void);
  HRESULT         __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT         __fastcall set_Required(TOLEBOOL pRequired/*[in]*/);

  __property   Frontpage_xp::FpDateTimeFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   TOLEBOOL        Required = {read = get_Required, write = set_Required};
};
typedef TCOM_ListFieldDateTimeT<_ListFieldDateTime> TCOM_ListFieldDateTime;

// *********************************************************************//
// DispIntf:  _ListFieldDateTime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47B-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldDateTimeDispT : public TAutoDriver<_ListFieldDateTime>
{
public:
  _ListFieldDateTimeDispT(){}

  _ListFieldDateTimeDispT(_ListFieldDateTime *pintf)
  {
    TAutoDriver<_ListFieldDateTime>::Bind(pintf, false);
  }

  _ListFieldDateTimeDispT(_ListFieldDateTimePtr pintf)
  {
    TAutoDriver<_ListFieldDateTime>::Bind(pintf, true);
  }

  _ListFieldDateTimeDispT& operator=(_ListFieldDateTime *pintf)
  {
    TAutoDriver<_ListFieldDateTime>::Bind(pintf, false);
    return *this;
  }

  _ListFieldDateTimeDispT& operator=(_ListFieldDateTimePtr pintf)
  {
    TAutoDriver<_ListFieldDateTime>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldDateTime));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldDateTime);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayFormat(Frontpage_xp::FpDateTimeFieldFormat* pFormat/*[out,retval]*/);
  Frontpage_xp::FpDateTimeFieldFormat __fastcall get_DisplayFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayFormat(Frontpage_xp::FpDateTimeFieldFormat pFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Required(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::FpDateTimeFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldDateTimeDispT<_ListFieldDateTime> _ListFieldDateTimeDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldChoice
// Interface: _ListFieldChoice
// *********************************************************************//
template <class T /* _ListFieldChoice */ >
class TCOM_ListFieldChoiceT : public TComInterface<_ListFieldChoice>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldChoiceT() {}
  TCOM_ListFieldChoiceT(_ListFieldChoice *intf, bool addRef = false) : TComInterface<_ListFieldChoice>(intf, addRef) {}
  TCOM_ListFieldChoiceT(const TCOM_ListFieldChoiceT& src) : TComInterface<_ListFieldChoice>(src) {}
  TCOM_ListFieldChoiceT& operator=(const TCOM_ListFieldChoiceT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_DisplayFormat(Frontpage_xp::FpChoiceFieldFormat* pFormat/*[out,retval]*/);
  Frontpage_xp::FpChoiceFieldFormat __fastcall get_DisplayFormat(void);
  HRESULT         __fastcall set_DisplayFormat(Frontpage_xp::FpChoiceFieldFormat pFormat/*[in]*/);
  HRESULT         __fastcall get_Choices(LPSAFEARRAY* ppsaChoices/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_Choices(void);
  HRESULT         __fastcall SetChoices(LPSAFEARRAY* ppsaChoices/*[in]*/);
  HRESULT         __fastcall AddChoice(BSTR Text/*[in]*/, long Index/*[in,def,opt]*/);
  HRESULT         __fastcall RemoveChoice(long Index/*[in]*/);
  HRESULT         __fastcall ClearChoices(void);
  HRESULT         __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT         __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  HRESULT         __fastcall get_Required(TOLEBOOL* pRequired/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Required(void);
  HRESULT         __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT         __fastcall set_Required(TOLEBOOL pRequired/*[in]*/);

  __property   Frontpage_xp::FpChoiceFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   TOLEBOOL        Required = {read = get_Required, write = set_Required};
};
typedef TCOM_ListFieldChoiceT<_ListFieldChoice> TCOM_ListFieldChoice;

// *********************************************************************//
// DispIntf:  _ListFieldChoice
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47C-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldChoiceDispT : public TAutoDriver<_ListFieldChoice>
{
public:
  _ListFieldChoiceDispT(){}

  _ListFieldChoiceDispT(_ListFieldChoice *pintf)
  {
    TAutoDriver<_ListFieldChoice>::Bind(pintf, false);
  }

  _ListFieldChoiceDispT(_ListFieldChoicePtr pintf)
  {
    TAutoDriver<_ListFieldChoice>::Bind(pintf, true);
  }

  _ListFieldChoiceDispT& operator=(_ListFieldChoice *pintf)
  {
    TAutoDriver<_ListFieldChoice>::Bind(pintf, false);
    return *this;
  }

  _ListFieldChoiceDispT& operator=(_ListFieldChoicePtr pintf)
  {
    TAutoDriver<_ListFieldChoice>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldChoice));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldChoice);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayFormat(Frontpage_xp::FpChoiceFieldFormat* pFormat/*[out,retval]*/);
  Frontpage_xp::FpChoiceFieldFormat __fastcall get_DisplayFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayFormat(Frontpage_xp::FpChoiceFieldFormat pFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Choices(LPSAFEARRAY* ppsaChoices/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_Choices(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetChoices(LPSAFEARRAY* ppsaChoices/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddChoice(BSTR Text/*[in]*/, long Index/*[in,def,opt]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveChoice(long Index/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ClearChoices();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Required(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::FpChoiceFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldChoiceDispT<_ListFieldChoice> _ListFieldChoiceDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldLookup
// Interface: _ListFieldLookup
// *********************************************************************//
template <class T /* _ListFieldLookup */ >
class TCOM_ListFieldLookupT : public TComInterface<_ListFieldLookup>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldLookupT() {}
  TCOM_ListFieldLookupT(_ListFieldLookup *intf, bool addRef = false) : TComInterface<_ListFieldLookup>(intf, addRef) {}
  TCOM_ListFieldLookupT(const TCOM_ListFieldLookupT& src) : TComInterface<_ListFieldLookup>(src) {}
  TCOM_ListFieldLookupT& operator=(const TCOM_ListFieldLookupT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_LookupField(Frontpage_xp::_ListField** ppField/*[out,retval]*/);
  HRESULT         __fastcall get_LookupField(Frontpage_xp::_ListFieldPtr* ppField/*[out,retval]*/);
  Frontpage_xp::_ListFieldPtr __fastcall get_LookupField(void);
  HRESULT         __fastcall set_LookupField(Frontpage_xp::_ListField* ppField/*[in]*/);
  HRESULT         __fastcall set_LookupField(Frontpage_xp::_ListFieldPtr ppField/*[in]*/);

  __property   Frontpage_xp::_ListFieldPtr LookupField = {read = get_LookupField, write = set_LookupField};
};
typedef TCOM_ListFieldLookupT<_ListFieldLookup> TCOM_ListFieldLookup;

// *********************************************************************//
// DispIntf:  _ListFieldLookup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47D-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldLookupDispT : public TAutoDriver<_ListFieldLookup>
{
public:
  _ListFieldLookupDispT(){}

  _ListFieldLookupDispT(_ListFieldLookup *pintf)
  {
    TAutoDriver<_ListFieldLookup>::Bind(pintf, false);
  }

  _ListFieldLookupDispT(_ListFieldLookupPtr pintf)
  {
    TAutoDriver<_ListFieldLookup>::Bind(pintf, true);
  }

  _ListFieldLookupDispT& operator=(_ListFieldLookup *pintf)
  {
    TAutoDriver<_ListFieldLookup>::Bind(pintf, false);
    return *this;
  }

  _ListFieldLookupDispT& operator=(_ListFieldLookupPtr pintf)
  {
    TAutoDriver<_ListFieldLookup>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldLookup));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldLookup);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_LookupField(Frontpage_xp::_ListField** ppField/*[out,retval]*/);
  Frontpage_xp::_ListField* __fastcall get_LookupField(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_LookupField(Frontpage_xp::_ListField* ppField/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::_ListField* LookupField = {read = get_LookupField, write = set_LookupField};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldLookupDispT<_ListFieldLookup> _ListFieldLookupDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldTrueFalse
// Interface: _ListFieldTrueFalse
// *********************************************************************//
template <class T /* _ListFieldTrueFalse */ >
class TCOM_ListFieldTrueFalseT : public TComInterface<_ListFieldTrueFalse>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldTrueFalseT() {}
  TCOM_ListFieldTrueFalseT(_ListFieldTrueFalse *intf, bool addRef = false) : TComInterface<_ListFieldTrueFalse>(intf, addRef) {}
  TCOM_ListFieldTrueFalseT(const TCOM_ListFieldTrueFalseT& src) : TComInterface<_ListFieldTrueFalse>(src) {}
  TCOM_ListFieldTrueFalseT& operator=(const TCOM_ListFieldTrueFalseT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);

};
typedef TCOM_ListFieldTrueFalseT<_ListFieldTrueFalse> TCOM_ListFieldTrueFalse;

// *********************************************************************//
// DispIntf:  _ListFieldTrueFalse
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47E-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldTrueFalseDispT : public TAutoDriver<_ListFieldTrueFalse>
{
public:
  _ListFieldTrueFalseDispT(){}

  _ListFieldTrueFalseDispT(_ListFieldTrueFalse *pintf)
  {
    TAutoDriver<_ListFieldTrueFalse>::Bind(pintf, false);
  }

  _ListFieldTrueFalseDispT(_ListFieldTrueFalsePtr pintf)
  {
    TAutoDriver<_ListFieldTrueFalse>::Bind(pintf, true);
  }

  _ListFieldTrueFalseDispT& operator=(_ListFieldTrueFalse *pintf)
  {
    TAutoDriver<_ListFieldTrueFalse>::Bind(pintf, false);
    return *this;
  }

  _ListFieldTrueFalseDispT& operator=(_ListFieldTrueFalsePtr pintf)
  {
    TAutoDriver<_ListFieldTrueFalse>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldTrueFalse));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldTrueFalse);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldTrueFalseDispT<_ListFieldTrueFalse> _ListFieldTrueFalseDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldURL
// Interface: _ListFieldURL
// *********************************************************************//
template <class T /* _ListFieldURL */ >
class TCOM_ListFieldURLT : public TComInterface<_ListFieldURL>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldURLT() {}
  TCOM_ListFieldURLT(_ListFieldURL *intf, bool addRef = false) : TComInterface<_ListFieldURL>(intf, addRef) {}
  TCOM_ListFieldURLT(const TCOM_ListFieldURLT& src) : TComInterface<_ListFieldURL>(src) {}
  TCOM_ListFieldURLT& operator=(const TCOM_ListFieldURLT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_DisplayFormat(Frontpage_xp::FpURLFieldFormat* pFormat/*[out,retval]*/);
  Frontpage_xp::FpURLFieldFormat __fastcall get_DisplayFormat(void);
  HRESULT         __fastcall set_DisplayFormat(Frontpage_xp::FpURLFieldFormat pFormat/*[in]*/);
  HRESULT         __fastcall get_DefaultText(BSTR* pbstrDefaultText/*[out,retval]*/);
  BSTR            __fastcall get_DefaultText(void);
  HRESULT         __fastcall set_DefaultText(BSTR pbstrDefaultText/*[in]*/);
  HRESULT         __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT         __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT         __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  HRESULT         __fastcall get_Required(TOLEBOOL* pRequired/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Required(void);
  HRESULT         __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT         __fastcall set_Required(TOLEBOOL pRequired/*[in]*/);

  __property   Frontpage_xp::FpURLFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   BSTR            DefaultText = {read = get_DefaultText};
  __property   TOLEBOOL        Required = {read = get_Required, write = set_Required};
};
typedef TCOM_ListFieldURLT<_ListFieldURL> TCOM_ListFieldURL;

// *********************************************************************//
// DispIntf:  _ListFieldURL
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47F-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldURLDispT : public TAutoDriver<_ListFieldURL>
{
public:
  _ListFieldURLDispT(){}

  _ListFieldURLDispT(_ListFieldURL *pintf)
  {
    TAutoDriver<_ListFieldURL>::Bind(pintf, false);
  }

  _ListFieldURLDispT(_ListFieldURLPtr pintf)
  {
    TAutoDriver<_ListFieldURL>::Bind(pintf, true);
  }

  _ListFieldURLDispT& operator=(_ListFieldURL *pintf)
  {
    TAutoDriver<_ListFieldURL>::Bind(pintf, false);
    return *this;
  }

  _ListFieldURLDispT& operator=(_ListFieldURLPtr pintf)
  {
    TAutoDriver<_ListFieldURL>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldURL));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldURL);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DisplayFormat(Frontpage_xp::FpURLFieldFormat* pFormat/*[out,retval]*/);
  Frontpage_xp::FpURLFieldFormat __fastcall get_DisplayFormat(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DisplayFormat(Frontpage_xp::FpURLFieldFormat pFormat/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultText(BSTR* pbstrDefaultText/*[out,retval]*/);
  BSTR            __fastcall get_DefaultText(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultText(BSTR pbstrDefaultText/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/);
  VARIANT         __fastcall get_DefaultValue(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Required(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Required(VARIANT_BOOL pRequired/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);

  __property   Frontpage_xp::FpURLFieldFormat DisplayFormat = {read = get_DisplayFormat, write = set_DisplayFormat};
  __property   BSTR            DefaultText = {read = get_DefaultText};
  __property   VARIANT_BOOL    Required = {read = get_Required, write = set_Required};

  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldURLDispT<_ListFieldURL> _ListFieldURLDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldCounter
// Interface: _ListFieldCounter
// *********************************************************************//
template <class T /* _ListFieldCounter */ >
class TCOM_ListFieldCounterT : public TComInterface<_ListFieldCounter>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldCounterT() {}
  TCOM_ListFieldCounterT(_ListFieldCounter *intf, bool addRef = false) : TComInterface<_ListFieldCounter>(intf, addRef) {}
  TCOM_ListFieldCounterT(const TCOM_ListFieldCounterT& src) : TComInterface<_ListFieldCounter>(src) {}
  TCOM_ListFieldCounterT& operator=(const TCOM_ListFieldCounterT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ListFieldCounterT<_ListFieldCounter> TCOM_ListFieldCounter;

// *********************************************************************//
// DispIntf:  _ListFieldCounter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B49D-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldCounterDispT : public TAutoDriver<_ListFieldCounter>
{
public:
  _ListFieldCounterDispT(){}

  _ListFieldCounterDispT(_ListFieldCounter *pintf)
  {
    TAutoDriver<_ListFieldCounter>::Bind(pintf, false);
  }

  _ListFieldCounterDispT(_ListFieldCounterPtr pintf)
  {
    TAutoDriver<_ListFieldCounter>::Bind(pintf, true);
  }

  _ListFieldCounterDispT& operator=(_ListFieldCounter *pintf)
  {
    TAutoDriver<_ListFieldCounter>::Bind(pintf, false);
    return *this;
  }

  _ListFieldCounterDispT& operator=(_ListFieldCounterPtr pintf)
  {
    TAutoDriver<_ListFieldCounter>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldCounter));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldCounter);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldCounterDispT<_ListFieldCounter> _ListFieldCounterDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldInteger
// Interface: _ListFieldInteger
// *********************************************************************//
template <class T /* _ListFieldInteger */ >
class TCOM_ListFieldIntegerT : public TComInterface<_ListFieldInteger>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldIntegerT() {}
  TCOM_ListFieldIntegerT(_ListFieldInteger *intf, bool addRef = false) : TComInterface<_ListFieldInteger>(intf, addRef) {}
  TCOM_ListFieldIntegerT(const TCOM_ListFieldIntegerT& src) : TComInterface<_ListFieldInteger>(src) {}
  TCOM_ListFieldIntegerT& operator=(const TCOM_ListFieldIntegerT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ListFieldIntegerT<_ListFieldInteger> TCOM_ListFieldInteger;

// *********************************************************************//
// DispIntf:  _ListFieldInteger
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B496-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldIntegerDispT : public TAutoDriver<_ListFieldInteger>
{
public:
  _ListFieldIntegerDispT(){}

  _ListFieldIntegerDispT(_ListFieldInteger *pintf)
  {
    TAutoDriver<_ListFieldInteger>::Bind(pintf, false);
  }

  _ListFieldIntegerDispT(_ListFieldIntegerPtr pintf)
  {
    TAutoDriver<_ListFieldInteger>::Bind(pintf, true);
  }

  _ListFieldIntegerDispT& operator=(_ListFieldInteger *pintf)
  {
    TAutoDriver<_ListFieldInteger>::Bind(pintf, false);
    return *this;
  }

  _ListFieldIntegerDispT& operator=(_ListFieldIntegerPtr pintf)
  {
    TAutoDriver<_ListFieldInteger>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldInteger));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldInteger);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldIntegerDispT<_ListFieldInteger> _ListFieldIntegerDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldComputed
// Interface: _ListFieldComputed
// *********************************************************************//
template <class T /* _ListFieldComputed */ >
class TCOM_ListFieldComputedT : public TComInterface<_ListFieldComputed>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldComputedT() {}
  TCOM_ListFieldComputedT(_ListFieldComputed *intf, bool addRef = false) : TComInterface<_ListFieldComputed>(intf, addRef) {}
  TCOM_ListFieldComputedT(const TCOM_ListFieldComputedT& src) : TComInterface<_ListFieldComputed>(src) {}
  TCOM_ListFieldComputedT& operator=(const TCOM_ListFieldComputedT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ListFieldComputedT<_ListFieldComputed> TCOM_ListFieldComputed;

// *********************************************************************//
// DispIntf:  _ListFieldComputed
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B497-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldComputedDispT : public TAutoDriver<_ListFieldComputed>
{
public:
  _ListFieldComputedDispT(){}

  _ListFieldComputedDispT(_ListFieldComputed *pintf)
  {
    TAutoDriver<_ListFieldComputed>::Bind(pintf, false);
  }

  _ListFieldComputedDispT(_ListFieldComputedPtr pintf)
  {
    TAutoDriver<_ListFieldComputed>::Bind(pintf, true);
  }

  _ListFieldComputedDispT& operator=(_ListFieldComputed *pintf)
  {
    TAutoDriver<_ListFieldComputed>::Bind(pintf, false);
    return *this;
  }

  _ListFieldComputedDispT& operator=(_ListFieldComputedPtr pintf)
  {
    TAutoDriver<_ListFieldComputed>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldComputed));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldComputed);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldComputedDispT<_ListFieldComputed> _ListFieldComputedDisp;

// *********************************************************************//
// SmartIntf: TCOM_ListFieldFile
// Interface: _ListFieldFile
// *********************************************************************//
template <class T /* _ListFieldFile */ >
class TCOM_ListFieldFileT : public TComInterface<_ListFieldFile>, public TComInterfaceBase<IUnknown>
{
public:
  TCOM_ListFieldFileT() {}
  TCOM_ListFieldFileT(_ListFieldFile *intf, bool addRef = false) : TComInterface<_ListFieldFile>(intf, addRef) {}
  TCOM_ListFieldFileT(const TCOM_ListFieldFileT& src) : TComInterface<_ListFieldFile>(src) {}
  TCOM_ListFieldFileT& operator=(const TCOM_ListFieldFileT& src) { Bind(src, true); return *this;}


};
typedef TCOM_ListFieldFileT<_ListFieldFile> TCOM_ListFieldFile;

// *********************************************************************//
// DispIntf:  _ListFieldFile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B498-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template<class T>
class _ListFieldFileDispT : public TAutoDriver<_ListFieldFile>
{
public:
  _ListFieldFileDispT(){}

  _ListFieldFileDispT(_ListFieldFile *pintf)
  {
    TAutoDriver<_ListFieldFile>::Bind(pintf, false);
  }

  _ListFieldFileDispT(_ListFieldFilePtr pintf)
  {
    TAutoDriver<_ListFieldFile>::Bind(pintf, true);
  }

  _ListFieldFileDispT& operator=(_ListFieldFile *pintf)
  {
    TAutoDriver<_ListFieldFile>::Bind(pintf, false);
    return *this;
  }

  _ListFieldFileDispT& operator=(_ListFieldFilePtr pintf)
  {
    TAutoDriver<_ListFieldFile>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ListFieldFile));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ListFieldFile);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Name(BSTR* pbstrName/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Name(BSTR pbstrName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Description(BSTR* pbstrDescription/*[out,retval]*/);
  BSTR            __fastcall get_Description(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall set_Description(BSTR pbstrDescription/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/);
  Frontpage_xp::FpFieldType __fastcall get_Type(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ReadOnly(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall get_Web(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Delete();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved1();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved2();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved3();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved4();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved5();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved6();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved7();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved8();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved9();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Reserved10();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/);
  Frontpage_xp::_Application* __fastcall get_Application(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall get_Parent(LPDISPATCH* pVal/*[out,retval]*/);
  LPDISPATCH      __fastcall get_Parent(void);


  __property   BSTR            Name = {read = get_Name};
  __property   BSTR            Description = {read = get_Description};
  __property   Frontpage_xp::FpFieldType Type = {read = get_Type};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly};
  __property   Frontpage_xp::Web* Web = {read = get_Web};

  __property   Frontpage_xp::_Application* Application = {read = get_Application};
  __property   LPDISPATCH      Parent = {read = get_Parent};
};
typedef _ListFieldFileDispT<_ListFieldFile> _ListFieldFileDisp;

// *********************************************************************//
// DispIntf:  _IApplicationEvents
// Flags:     (4096) Dispatchable
// GUID:      {F5D15700-E9D8-11D1-B0DF-00C04FA30A8B}
// *********************************************************************//
template <class T>
class _IApplicationEventsDispT : public TAutoDriver<_IApplicationEvents>
{
public:
  _IApplicationEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall OnWebNew(Frontpage_xp::Web* pWeb/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnWebOpen(Frontpage_xp::Web* pWeb/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnWebClose(Frontpage_xp::Web* pWeb/*[in]*/, 
                                             VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnBeforeWebPublish(Frontpage_xp::Web* pWeb/*[in]*/, 
                                                     BSTR* Destination/*[in]*/, 
                                                     VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnAfterWebPublish(Frontpage_xp::Web* pWeb/*[in]*/, 
                                                    VARIANT_BOOL* Success/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnPageNew(Frontpage_xp::PageWindow* pPage/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnPageOpen(Frontpage_xp::PageWindow* pPage/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnPageClose(Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                              VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnBeforePageSave(Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                                   VARIANT_BOOL* SaveAsUI/*[in]*/, 
                                                   VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnAfterPageSave(Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                                  VARIANT_BOOL* Success/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall WindowActivate(Frontpage_xp::WebWindow* pWebWindow/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall WindowDeactivate(Frontpage_xp::WebWindow* pWebWindow/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnBeforeWebWindowViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/
                                                              , 
                                                              Frontpage_xp::FpWebViewModeEx TargetView/*[in]*/
                                                              , VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnAfterWebWindowViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnRecalculateHyperlinks(Frontpage_xp::Web* pWeb/*[in]*/, 
                                                          VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnBeforePageWindowViewChange(Frontpage_xp::PageWindow* pPage/*[in]*/
                                                               , 
                                                               Frontpage_xp::FpPageViewMode TargetView/*[in]*/
                                                               , VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnAfterPageWindowViewChange(Frontpage_xp::PageWindow* pPage/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnPageWindowActivate(Frontpage_xp::PageWindow* pPage/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnWebFileCheckOut(Frontpage_xp::Web* pWeb/*[in]*/, 
                                                    Frontpage_xp::WebFile* pFile/*[in]*/, 
                                                    VARIANT_BOOL* CheckedOut/*[in]*/, 
                                                    Frontpage_xp::FpCheckOutOption* pCheckOutOption/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnBeforeWebWindowSubViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/
                                                                 , 
                                                                 Frontpage_xp::FpWebSubView TargetSubView/*[in]*/
                                                                 , VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnAfterWebWindowSubViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/);

};
typedef _IApplicationEventsDispT<_IApplicationEvents> _IApplicationEventsDisp;

// *********************************************************************//
// DispIntf:  IWebber
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BBD4A72-661D-11CF-A3C4-00A024184692}
// *********************************************************************//
template<class T>
class IWebberDispT : public TAutoDriver<IWebber>
{
public:
  IWebberDispT(){}

  IWebberDispT(IWebber *pintf)
  {
    TAutoDriver<IWebber>::Bind(pintf, false);
  }

  IWebberDispT(IWebberPtr pintf)
  {
    TAutoDriver<IWebber>::Bind(pintf, true);
  }

  IWebberDispT& operator=(IWebber *pintf)
  {
    TAutoDriver<IWebber>::Bind(pintf, false);
    return *this;
  }

  IWebberDispT& operator=(IWebberPtr pintf)
  {
    TAutoDriver<IWebber>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CWebberAutomation));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CWebberAutomation);
  }

  long /*[VT_I4:0]*/ __fastcall vtiCreateWeb(BSTR szServerURL, BSTR szWebName);
  void /*[VT_VOID:0]*/ __fastcall vtiRefreshWebFromServer();
  long /*[VT_I4:0]*/ __fastcall vtiPutDocument(BSTR szFileName, BSTR szURL, long bBlockingRequest);
  long /*[VT_I4:0]*/ __fastcall vtiPutWebMetaInfo(BSTR szNameValuePairs);
  void /*[VT_VOID:0]*/ __fastcall vtiSetWebRecalcDependencies(long bRecalcOn);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetWebPageMetaInfo(BSTR szURL, BSTR szKeyName);
  long /*[VT_I4:0]*/ __fastcall vtiRemoveWebPages(BSTR pszPageList);
  long /*[VT_I4:0]*/ __fastcall vtiEditForToDoList(BSTR szURL, BSTR szCookie, long lKey);
  void /*[VT_VOID:0]*/ __fastcall vtiBringToTop();
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetWebTitle();
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetWebURL();
  void /*[VT_VOID:0]*/ __fastcall vtiPromptOpenWeb();
  long /*[VT_I4:0]*/ __fastcall vtiRemoveWeb(BSTR szWebName);
  long /*[VT_I4:0]*/ __fastcall vtiIsPageInWeb(BSTR szURL);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetWebMetaInfo(BSTR szKey);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetPageList(long lType);
  long /*[VT_I4:0]*/ __fastcall vtiPutDocuments(BSTR szFileList, BSTR szUrlList);
  void /*[VT_VOID:0]*/ __fastcall vtiCancelRequests();
  long /*[VT_I4:0]*/ __fastcall vtiOpenWeb(BSTR pszServer, BSTR pszWebName, BSTR pszUser);
  long /*[VT_I4:0]*/ __fastcall vtiEditWebPage(BSTR pszPageURL);
  long /*[VT_I4:0]*/ __fastcall vtiPutWebPageMetaInfo(BSTR pszURL, BSTR pszNameValuePairs);
  long /*[VT_I4:0]*/ __fastcall vtiGetDocToFile(BSTR pszURL, BSTR pszFilename);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetBotsList(long* bNewBotsList);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetBotModule(BSTR pszBotDir, BSTR pszBotModule);
  long /*[VT_I4:0]*/ __fastcall vtiCreateFolder(BSTR pszFolderUrl);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetFoldersList(BSTR pszParentFolderUrl);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetPagesInFolder(BSTR pszFolderUrl, long lType);
  long /*[VT_I4:0]*/ __fastcall vtiEditNextPageWithAction(BSTR prevURL);
  long /*[VT_I4:0]*/ __fastcall vtiEditImage(BSTR szFileName, BSTR szURL);
  long /*[VT_I4:0]*/ __fastcall vtiPutDocumentDTM(BSTR szFileName, BSTR szURL, 
                                                  long lDateTimeModified, long bBlockingRequest);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtigetbotslistex(long* bNewBotsList);
  long /*[VT_I4:0]*/ __fastcall vtiOpenWebWithPassword(BSTR pszServer, BSTR pszWebName, BSTR pszUser
                                                       , BSTR pszPassword);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiListWebs(BSTR pszServer, BSTR pszUser, BSTR pszPassword);
  void /*[VT_VOID:0]*/ __fastcall vtiDisableErrorDialogs(long bYesNo);
  void /*[VT_VOID:0]*/ __fastcall vtiQuit();
  long /*[VT_I4:0]*/ __fastcall vtiPublishWeb(BSTR pszServerUrl, BSTR pszWebName, long dwFlags, 
                                              BSTR pszUser, BSTR pszPassword);
  long /*[VT_I4:0]*/ __fastcall vtiImportExternallyEditedFiles();
  long /*[VT_I4:0]*/ __fastcall vtiRenameDocument(BSTR pszURL, BSTR pszNewURL, long bUpdateBacklinks
                                                  , long bIsFolder, long bCopy, long bForceOverwrite);
  long /*[VT_I4:0]*/ __fastcall vtiIsFeatureSupported(BSTR pszFeature);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiListThemes();
  long /*[VT_I4:0]*/ __fastcall vtiApplyTheme(BSTR pszName, long dParams, BSTR fileList);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetTheme(BSTR pszThemeDirName, BSTR pszLocThemesDir);
  long /*[VT_I4:0]*/ __fastcall vtiPutTheme(BSTR pszThemeDirName, BSTR pszThemeVersion, 
                                            BSTR pszFileList, BSTR pszLocThemesDir);
  long /*[VT_I4:0]*/ __fastcall vtiPutWebStructure(BSTR pszModifications);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetWebStructureRelations(BSTR pszURL, long lRelationType);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiReturnDBWRoot(BSTR pszFileURL);
  long /*[VT_I4:0]*/ __fastcall vtiMakeThemeFresh(BSTR pszWebUrl, BSTR pszThemeName, 
                                                  long bAllowUpload, long bAllowDownload);
  long /*[VT_I4:0]*/ __fastcall vtiSetCurrentView(long nViewID, long bTransferSelection, long nFlags);
  long /*[VT_I4:0]*/ __fastcall vtiIsFolderInWeb(BSTR pszFolderUrl);
  long /*[VT_I4:0]*/ __fastcall vtiSetFolderOptions(BSTR pszFolder, long bExecutable, long bReadable);
  long /*[VT_I4:0]*/ __fastcall vtiPutGlobalThemeDoc(BSTR pszRemoteDir, BSTR pszThemeFile, 
                                                     BSTR pszWebRel, long bRunListUrls);
  long /*[VT_I4:0]*/ __fastcall vtiRefreshThemeList();
  long /*[VT_I4:0]*/ __fastcall vtiSetEditor(BSTR szType, BSTR szName, BSTR szCommand);
  long /*[VT_I4:0]*/ __fastcall vtiListDataSources(long lType, BSTR* pszSources, BSTR* pszAttrs);
  long /*[VT_I4:0]*/ __fastcall vtiGetDatabaseSchema(BSTR pszConnStr, long lFlags, BSTR* pszSchema);
  long /*[VT_I4:0]*/ __fastcall vtiListRecordSources(BSTR pszConnStr, long lType, BSTR* sources, 
                                                     BSTR* attrs);
  long /*[VT_I4:0]*/ __fastcall vtiGetRecordSourceSchema(BSTR pszConnStr, BSTR pszRecordSource, 
                                                         BSTR* pszSchema);
  long /*[VT_I4:0]*/ __fastcall vtiGetQuerySchema(BSTR pszConnStr, BSTR pszSQL, long lFlags, 
                                                  BSTR* pszSchema);
  long /*[VT_I4:0]*/ __fastcall vtiListDrivers(long lType, BSTR* drivers, BSTR* attrs);
  long /*[VT_I4:0]*/ __fastcall vtiListDataConnections(BSTR* bstrNames, BSTR* bstrConnStrs);
  long /*[VT_I4:0]*/ __fastcall vtiSetDataConnections(BSTR names, BSTR attrs);
  long /*[VT_I4:0]*/ __fastcall vtiWebSettingsDlg(long flags);

};
typedef IWebberDispT<IWebber> IWebberDisp;

// *********************************************************************//
// DispIntf:  IPageEditor
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BBD4A7B-661D-11CF-A3C4-00A024184692}
// *********************************************************************//
template<class T>
class IPageEditorDispT : public TAutoDriver<IPageEditor>
{
public:
  IPageEditorDispT(){}

  IPageEditorDispT(IPageEditor *pintf)
  {
    TAutoDriver<IPageEditor>::Bind(pintf, false);
  }

  IPageEditorDispT(IPageEditorPtr pintf)
  {
    TAutoDriver<IPageEditor>::Bind(pintf, true);
  }

  IPageEditorDispT& operator=(IPageEditor *pintf)
  {
    TAutoDriver<IPageEditor>::Bind(pintf, false);
    return *this;
  }

  IPageEditorDispT& operator=(IPageEditorPtr pintf)
  {
    TAutoDriver<IPageEditor>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CAutoJack));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CAutoJack);
  }

  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall vtiOpenWebPage(BSTR szFileName, BSTR szURL, 
                                                           BSTR szWebUrl, BSTR szWebTitle);
  long /*[VT_I4:0]*/ __fastcall vtiQueryWebPage(BSTR szURL, BSTR szWebUrl);
  void /*[VT_VOID:0]*/ __fastcall vtiBringToTop();
  LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall vtiNewWebPage(BSTR szURL, BSTR szWebUrl, BSTR szWebTitle);
  long /*[VT_I4:0]*/ __fastcall vtiBringPageToTop(BSTR szURL, BSTR szWebUrl, BSTR szCookie, 
                                                  long toDoTaskId);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiListOpenDocs();
  void /*[VT_VOID:0]*/ __fastcall vtiRefreshDocument(BSTR szPageUrl, BSTR szWebUrl);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetBookmarkList(BSTR pszPageURL, BSTR pszWebUrl);
  long /*[VT_I4:0]*/ __fastcall vtiScrollToBookmark(BSTR pszPageURL, BSTR pszWebUrl, 
                                                    BSTR pszBookmark);
  long /*[VT_I4:0]*/ __fastcall vtiInsertFile(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszFile);
  long /*[VT_I4:0]*/ __fastcall vtiInsertImage(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszFile);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetTopPageUrl();
  long /*[VT_I4:0]*/ __fastcall vtiInsertHTML(BSTR pszHTML);
  void /*[VT_VOID:0]*/ __fastcall vtiPaste();
  void /*[VT_VOID:0]*/ __fastcall vtiQuit();
  long /*[VT_I4:0]*/ __fastcall vtiSetMetaTag(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszKey, 
                                              BSTR pszValue, long lIndex, long flags);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiListMetaTags(BSTR pszPageURL, BSTR pszWebUrl, long flags);
  long /*[VT_I4:0]*/ __fastcall vtiDeleteMetaTag(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszKey, 
                                                 long lIndex, long flags);
  BSTR /*[VT_BSTR:0]*/ __fastcall vtiGetMetaTag(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszKey, 
                                                long lIndex, long flags);
  long /*[VT_I4:0]*/ __fastcall vtiQueryWebPageEx(BSTR szURL, BSTR szWebUrl, long* bDirty, 
                                                  long* bWritable);

};
typedef IPageEditorDispT<IPageEditor> IPageEditorDisp;

// *********************************************************************//
// SmartIntf: TCOMIExplorerWebs
// Interface: IExplorerWebs
// *********************************************************************//
template <class T /* IExplorerWebs */ >
class TCOMIExplorerWebsT : public TComInterface<IExplorerWebs>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIExplorerWebsT() {}
  TCOMIExplorerWebsT(IExplorerWebs *intf, bool addRef = false) : TComInterface<IExplorerWebs>(intf, addRef) {}
  TCOMIExplorerWebsT(const TCOMIExplorerWebsT& src) : TComInterface<IExplorerWebs>(src) {}
  TCOMIExplorerWebsT& operator=(const TCOMIExplorerWebsT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall CreateWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                       Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                       Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall CreateWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                                   Frontpage_xp::WebOpenFlags oflag/*[in]*/);
  HRESULT         __fastcall OpenWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, BSTR user/*[in]*/, 
                                     Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                     Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall OpenWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                                 BSTR user/*[in]*/, 
                                                 Frontpage_xp::WebOpenFlags oflag/*[in]*/);
  HRESULT         __fastcall OpenWebWithPassword(BSTR server/*[in]*/, BSTR webName/*[in]*/, 
                                                 BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                                 Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                                 Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall OpenWebWithPassword(BSTR server/*[in]*/, 
                                                             BSTR webName/*[in]*/, BSTR user/*[in]*/, 
                                                             BSTR Password/*[in]*/, 
                                                             Frontpage_xp::WebOpenFlags oflag/*[in]*/);
  HRESULT         __fastcall BringToTop(void);
  HRESULT         __fastcall PromptOpenWeb(long inCurrentWindow/*[in]*/, 
                                           Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall PromptOpenWeb(long inCurrentWindow/*[in]*/);
  HRESULT         __fastcall RemoveWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/);
  HRESULT         __fastcall SetEditor(BSTR Type/*[in]*/, BSTR Name/*[in]*/, BSTR command/*[in]*/);
  HRESULT         __fastcall DisableErrorDialogs(long bYesNo/*[in]*/);
  HRESULT         __fastcall Quit(void);
  HRESULT         __fastcall ListOpenWebs(BSTR* Webs/*[out,retval]*/);
  BSTR            __fastcall ListOpenWebs(void);
  HRESULT         __fastcall GetOpenWeb(BSTR WebUrl/*[in]*/, 
                                        Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall GetOpenWeb(BSTR WebUrl/*[in]*/);
  HRESULT         __fastcall EditWebPage(BSTR Url);
  HRESULT         __fastcall GetThemePaths(BSTR* themePaths/*[out]*/, BSTR* customThemePath/*[out]*/);
  HRESULT         __fastcall ParseURL(BSTR Url/*[in]*/, BSTR* serverUrl/*[out]*/, 
                                      BSTR* webName/*[out]*/, BSTR* pageUrl/*[out]*/);
  HRESULT         __fastcall CreateWebWithPassword(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                                   BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                                   Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                                   Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall CreateWebWithPassword(BSTR serverUrl/*[in]*/, 
                                                               BSTR webName/*[in]*/, 
                                                               BSTR user/*[in]*/, 
                                                               BSTR Password/*[in]*/, 
                                                               Frontpage_xp::WebOpenFlags oflag/*[in]*/);
  HRESULT         __fastcall GetThemePath(BSTR ThemeName/*[in]*/, BSTR* themePath/*[out]*/);
  HRESULT         __fastcall NewWindow(void);
  HRESULT         __fastcall EditInFrontPage(BSTR Url, Frontpage_xp::RequestDocumentsFlags flags);
  HRESULT         __fastcall GetMSOHInstace(long* hInstPtr/*[out]*/);
  HRESULT         __fastcall NextPane(void);
  HRESULT         __fastcall GetIMsoToolbarSet(long* ppITlbSet/*[out]*/);
  HRESULT         __fastcall GetIMsoTFC(long* pitfc/*[out,retval]*/);
  long            __fastcall GetIMsoTFC(void);
  HRESULT         __fastcall GetIMsoOOUI(long* pitfc/*[out,retval]*/);
  long            __fastcall GetIMsoOOUI(void);
  HRESULT         __fastcall ShowClipboard(void);
  HRESULT         __fastcall StartMarker(long lBeginMarker/*[in]*/, long lEndMarker/*[in]*/);
  HRESULT         __fastcall EndMarker(long lEndMarker/*[in]*/);
  HRESULT         __fastcall GetDocToFile(BSTR Url/*[in]*/, BSTR filename/*[in]*/);
  HRESULT         __fastcall GetDocuments(BSTR fileList/*[in]*/, BSTR urlList/*[in]*/);

};
typedef TCOMIExplorerWebsT<IExplorerWebs> TCOMIExplorerWebs;

// *********************************************************************//
// DispIntf:  IExplorerWebs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9B5D039F-8DDB-11D1-A220-00A0C9055E81}
// *********************************************************************//
template<class T>
class IExplorerWebsDispT : public TAutoDriver<IExplorerWebs>
{
public:
  IExplorerWebsDispT(){}

  IExplorerWebsDispT(IExplorerWebs *pintf)
  {
    TAutoDriver<IExplorerWebs>::Bind(pintf, false);
  }

  IExplorerWebsDispT(IExplorerWebsPtr pintf)
  {
    TAutoDriver<IExplorerWebs>::Bind(pintf, true);
  }

  IExplorerWebsDispT& operator=(IExplorerWebs *pintf)
  {
    TAutoDriver<IExplorerWebs>::Bind(pintf, false);
    return *this;
  }

  IExplorerWebsDispT& operator=(IExplorerWebsPtr pintf)
  {
    TAutoDriver<IExplorerWebs>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ExplorerWebs));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ExplorerWebs);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                                  Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                                  Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall CreateWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                                   Frontpage_xp::WebOpenFlags oflag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OpenWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                                BSTR user/*[in]*/, 
                                                Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                                Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall OpenWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                                 BSTR user/*[in]*/, 
                                                 Frontpage_xp::WebOpenFlags oflag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall OpenWebWithPassword(BSTR server/*[in]*/, 
                                                            BSTR webName/*[in]*/, BSTR user/*[in]*/
                                                            , BSTR Password/*[in]*/, 
                                                            Frontpage_xp::WebOpenFlags oflag/*[in]*/
                                                            , 
                                                            Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall OpenWebWithPassword(BSTR server/*[in]*/, 
                                                             BSTR webName/*[in]*/, BSTR user/*[in]*/, 
                                                             BSTR Password/*[in]*/, 
                                                             Frontpage_xp::WebOpenFlags oflag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BringToTop();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PromptOpenWeb(long inCurrentWindow/*[in]*/, 
                                                      Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall PromptOpenWeb(long inCurrentWindow/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetEditor(BSTR Type/*[in]*/, BSTR Name/*[in]*/, 
                                                  BSTR command/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DisableErrorDialogs(long bYesNo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall Quit();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ListOpenWebs(BSTR* Webs/*[out,retval]*/);
  BSTR            __fastcall ListOpenWebs(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetOpenWeb(BSTR WebUrl/*[in]*/, 
                                                   Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall GetOpenWeb(BSTR WebUrl/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EditWebPage(BSTR Url);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetThemePaths(BSTR* themePaths/*[out]*/, 
                                                      BSTR* customThemePath/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ParseURL(BSTR Url/*[in]*/, BSTR* serverUrl/*[out]*/, 
                                                 BSTR* webName/*[out]*/, BSTR* pageUrl/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateWebWithPassword(BSTR serverUrl/*[in]*/, 
                                                              BSTR webName/*[in]*/, 
                                                              BSTR user/*[in]*/, 
                                                              BSTR Password/*[in]*/, 
                                                              Frontpage_xp::WebOpenFlags oflag/*[in]*/
                                                              , 
                                                              Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/);
  Frontpage_xp::IExplorerWeb* __fastcall CreateWebWithPassword(BSTR serverUrl/*[in]*/, 
                                                               BSTR webName/*[in]*/, 
                                                               BSTR user/*[in]*/, 
                                                               BSTR Password/*[in]*/, 
                                                               Frontpage_xp::WebOpenFlags oflag/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetThemePath(BSTR ThemeName/*[in]*/, 
                                                     BSTR* themePath/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewWindow();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EditInFrontPage(BSTR Url, 
                                                        Frontpage_xp::RequestDocumentsFlags flags);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetMSOHInstace(long* hInstPtr/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NextPane();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetIMsoToolbarSet(long* ppITlbSet/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetIMsoTFC(long* pitfc/*[out,retval]*/);
  long            __fastcall GetIMsoTFC(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetIMsoOOUI(long* pitfc/*[out,retval]*/);
  long            __fastcall GetIMsoOOUI(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ShowClipboard();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall StartMarker(long lBeginMarker/*[in]*/, 
                                                    long lEndMarker/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EndMarker(long lEndMarker/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDocToFile(BSTR Url/*[in]*/, BSTR filename/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDocuments(BSTR fileList/*[in]*/, BSTR urlList/*[in]*/);

};
typedef IExplorerWebsDispT<IExplorerWebs> IExplorerWebsDisp;

// *********************************************************************//
// SmartIntf: TCOMIExplorerWeb
// Interface: IExplorerWeb
// *********************************************************************//
template <class T /* IExplorerWeb */ >
class TCOMIExplorerWebT : public TComInterface<IExplorerWeb>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIExplorerWebT() {}
  TCOMIExplorerWebT(IExplorerWeb *intf, bool addRef = false) : TComInterface<IExplorerWeb>(intf, addRef) {}
  TCOMIExplorerWebT(const TCOMIExplorerWebT& src) : TComInterface<IExplorerWeb>(src) {}
  TCOMIExplorerWebT& operator=(const TCOMIExplorerWebT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall RefreshWebFromServer(void);
  HRESULT         __fastcall SetWebRecalcDependencies(long bRecalcOn);
  HRESULT         __fastcall GetWebTitle(BSTR* Title/*[out,retval]*/);
  BSTR            __fastcall GetWebTitle(void);
  HRESULT         __fastcall GetWebURL(BSTR* WebUrl/*[out,retval]*/);
  BSTR            __fastcall GetWebURL(void);
  HRESULT         __fastcall PutWebMetaInfo(BSTR nameValuePairs);
  HRESULT         __fastcall GetWebMetaInfo(BSTR key, BSTR* value/*[out,retval]*/);
  BSTR            __fastcall GetWebMetaInfo(BSTR key);
  HRESULT         __fastcall ImportExternallyEditedFiles(void);
  HRESULT         __fastcall IsFeatureSupported(BSTR feature, long* value/*[out,retval]*/);
  long            __fastcall IsFeatureSupported(BSTR feature);
  HRESULT         __fastcall ReturnDBWRoot(BSTR FileUrl, BSTR* rootUrl/*[out,retval]*/);
  BSTR            __fastcall ReturnDBWRoot(BSTR FileUrl);
  HRESULT         __fastcall CancelRequests(void);
  HRESULT         __fastcall BringToTop(void);
  HRESULT         __fastcall SetCurrentView(long nViewID, long bTransferSelection, long nFlags);
  HRESULT         __fastcall PublishWeb(BSTR serverUrl, BSTR webName, long dwFlags, BSTR user, 
                                        BSTR Password);
  HRESULT         __fastcall RemoveWeb(BSTR webName);
  HRESULT         __fastcall GetBotModule(BSTR botDir, BSTR botModule, BSTR* Url/*[out,retval]*/);
  BSTR            __fastcall GetBotModule(BSTR botDir, BSTR botModule);
  HRESULT         __fastcall GetBotsList(long* bNewBotsList/*[out]*/, BSTR* botList/*[out,retval]*/);
  BSTR            __fastcall GetBotsList(long* bNewBotsList/*[out]*/);
  HRESULT         __fastcall GetBotsListEx(long* bNewBotsList/*[out]*/, 
                                           BSTR* botList/*[out,retval]*/);
  BSTR            __fastcall GetBotsListEx(long* bNewBotsList/*[out]*/);
  HRESULT         __fastcall ListThemes(BSTR* Themes/*[out,retval]*/);
  BSTR            __fastcall ListThemes(void);
  HRESULT         __fastcall RefreshThemeList(void);
  HRESULT         __fastcall MakeThemeFresh(BSTR ThemeName, long bAllowUpload, long bAllowDownload);
  HRESULT         __fastcall ApplyTheme(BSTR Name, long lParams, BSTR fileList);
  HRESULT         __fastcall GetTheme(BSTR themeDirName, BSTR locThemesDir, 
                                      BSTR* fileList/*[out,retval]*/);
  BSTR            __fastcall GetTheme(BSTR themeDirName, BSTR locThemesDir);
  HRESULT         __fastcall PutTheme(BSTR themeDirName, BSTR themeVersion, BSTR fileList, 
                                      BSTR locThemesDir);
  HRESULT         __fastcall PutGlobalThemeDoc(BSTR themeFile, BSTR webRelUrl);
  HRESULT         __fastcall PutWebStructure(BSTR structureAdds);
  HRESULT         __fastcall GetWebStructureRelations(BSTR Url, long lRelationType, 
                                                      BSTR* structure/*[out,retval]*/);
  BSTR            __fastcall GetWebStructureRelations(BSTR Url, long lRelationType);
  HRESULT         __fastcall CreateFolder(BSTR Url);
  HRESULT         __fastcall GetFoldersList(BSTR parentFolderUrl, BSTR* folderList/*[out,retval]*/);
  BSTR            __fastcall GetFoldersList(BSTR parentFolderUrl);
  HRESULT         __fastcall GetPagesInFolder(BSTR FolderUrl, long lType, 
                                              BSTR* pageList/*[out,retval]*/);
  BSTR            __fastcall GetPagesInFolder(BSTR FolderUrl, long lType);
  HRESULT         __fastcall GetSubWebsInFolder(BSTR FolderUrl, BSTR* subWebList/*[out,retval]*/);
  BSTR            __fastcall GetSubWebsInFolder(BSTR FolderUrl);
  HRESULT         __fastcall IsFolderInWeb(BSTR FolderUrl, long* inWeb/*[out,retval]*/);
  long            __fastcall IsFolderInWeb(BSTR FolderUrl);
  HRESULT         __fastcall SetFolderOptions(BSTR Folder, long bExecutable, long bReadable);
  HRESULT         __fastcall IsPageInWeb(BSTR szURL, long* inWeb/*[out,retval]*/);
  long            __fastcall IsPageInWeb(BSTR szURL);
  HRESULT         __fastcall GetDocToFile(BSTR Url, BSTR filename);
  HRESULT         __fastcall PutDocuments(BSTR fileList, BSTR urlList, long bForceOverwrite, 
                                          long* lDTM, long* newDTM, BSTR metaInfo);
  HRESULT         __fastcall PutDocument(BSTR filename, BSTR Url, long bBlockingRequest, 
                                         long bForceOverwrite);
  HRESULT         __fastcall PutDocumentDTM(BSTR filename, BSTR Url, long lDateTimeModified, 
                                            long bBlockingRequest, long bForceOverwrite, 
                                            BSTR nameValuePairs, long* newDTM/*[out,retval]*/);
  long            __fastcall PutDocumentDTM(BSTR filename, BSTR Url, long lDateTimeModified, 
                                            long bBlockingRequest, long bForceOverwrite, 
                                            BSTR nameValuePairs);
  HRESULT         __fastcall GetWebPageMetaInfo(BSTR Url, BSTR keyName, BSTR* value/*[out,retval]*/);
  BSTR            __fastcall GetWebPageMetaInfo(BSTR Url, BSTR keyName);
  HRESULT         __fastcall PutWebPageMetaInfo(BSTR Url, BSTR nameValuePairs);
  HRESULT         __fastcall RemoveWebPages(BSTR pageList);
  HRESULT         __fastcall EditForToDoList(BSTR Url, BSTR szCookie, long lKey);
  HRESULT         __fastcall EditWebPage(BSTR Url);
  HRESULT         __fastcall EditNextPageWithAction(BSTR prevURL, long* status/*[out,retval]*/);
  long            __fastcall EditNextPageWithAction(BSTR prevURL);
  HRESULT         __fastcall EditImage(BSTR filename, BSTR Url);
  HRESULT         __fastcall RenameDocument(BSTR Url, BSTR newUrl, long bUpdateBacklinks, 
                                            long bIsFolder, long bCopy, long bForceOverwrite);
  HRESULT         __fastcall NewPage(BSTR Url, BSTR templateFile);
  HRESULT         __fastcall EditInFrontPage(BSTR Url);
  HRESULT         __fastcall AddTask(BSTR taskName, short priority, BSTR createdBy, BSTR Url, 
                                     BSTR cookie, BSTR Comment);
  HRESULT         __fastcall AddTaskAskUser(BSTR taskName, short priority, BSTR createdBy, BSTR Url, 
                                            BSTR cookie, BSTR Comment);
  HRESULT         __fastcall CompletedTask(long taskId);
  HRESULT         __fastcall CompletedTaskByUrl(BSTR Url, BSTR cookie);
  HRESULT         __fastcall WorkedOnTask(long taskId);
  HRESULT         __fastcall WorkedOnTaskByUrl(BSTR Url, BSTR cookie);
  HRESULT         __fastcall GetTaskName(long taskId, BSTR* taskName/*[out,retval]*/);
  BSTR            __fastcall GetTaskName(long taskId);
  HRESULT         __fastcall GetActiveCount(long* Count/*[out,retval]*/);
  long            __fastcall GetActiveCount(void);
  HRESULT         __fastcall DisableErrorDialogs(long bYesNo/*[in]*/);
  HRESULT         __fastcall ListDataSources(long lType, BSTR* sourceList/*[out]*/, 
                                             BSTR* attrList/*[out]*/);
  HRESULT         __fastcall GetDatabaseSchema(BSTR szConnStr, long lFlags, BSTR* pszSchema/*[out]*/);
  HRESULT         __fastcall ListRecordSources(BSTR szConnStr, long lType, BSTR* sources/*[out]*/, 
                                               BSTR* attrs/*[out]*/);
  HRESULT         __fastcall GetRecordSourceSchema(BSTR szConnStr, BSTR szRecordSource, 
                                                   BSTR* pszSchema/*[out]*/);
  HRESULT         __fastcall GetQuerySchema(BSTR szConnStr, BSTR szSQL, long lFlags, 
                                            BSTR* pszSchema/*[out]*/);
  HRESULT         __fastcall ListDrivers(long lType, BSTR* drivers/*[out]*/, BSTR* attrs/*[out]*/);
  HRESULT         __fastcall ListDataConnections(BSTR* pszNames/*[out]*/, BSTR* pszConnStrs/*[out]*/);
  HRESULT         __fastcall SetDataConnections(BSTR names, BSTR attrs);
  HRESULT         __fastcall WebSettingsDlg(long flags, long* retcode/*[out,retval]*/);
  long            __fastcall WebSettingsDlg(long flags);
  HRESULT         __fastcall ApplyBorder(BSTR newBorders, long bNavTop, long bNavLeft, 
                                         long bNavRight, long topChanged, long leftChanged, 
                                         long rightChanged, long bApplyToWeb);
  HRESULT         __fastcall GetPageList(long lType, BSTR* pageList/*[out,retval]*/);
  BSTR            __fastcall GetPageList(long lType);
  HRESULT         __fastcall GetWOMWeb(Frontpage_xp::Web** pWebObject/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall GetWOMWeb(void);
  HRESULT         __fastcall RemoveDocuments(BSTR Url, long bBlockingRequest);
  HRESULT         __fastcall GetWebNavStructure(LPUNKNOWN* pNavStructure/*[out]*/);
  HRESULT         __fastcall GetWebPageBackLinkCount(BSTR Url, long* Count/*[out,retval]*/);
  long            __fastcall GetWebPageBackLinkCount(BSTR Url);
  HRESULT         __fastcall GetNextBackLink(BSTR Url, long* pos, BSTR* link/*[out,retval]*/);
  BSTR            __fastcall GetNextBackLink(BSTR Url, long* pos);
  HRESULT         __fastcall GetOwsLists(LPUNKNOWN* pOwsLists/*[out]*/);
  HRESULT         __fastcall UpdateSharedBorderMetaInfo(void);
  HRESULT         __fastcall RequestDocuments(BSTR urlList, LPUNKNOWN downloadStatus, 
                                              unsigned_long flags);
  HRESULT         __fastcall RequestBatchRendering(unsigned_long dwID/*[in]*/, 
                                                   LPSAFEARRAY* ppsaParams/*[in]*/, 
                                                   LPUNKNOWN pStatusCB/*[in]*/);

};
typedef TCOMIExplorerWebT<IExplorerWeb> TCOMIExplorerWeb;

// *********************************************************************//
// DispIntf:  IExplorerWeb
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9B5D03A1-8DDB-11D1-A220-00A0C9055E81}
// *********************************************************************//
template<class T>
class IExplorerWebDispT : public TAutoDriver<IExplorerWeb>
{
public:
  IExplorerWebDispT(){}

  IExplorerWebDispT(IExplorerWeb *pintf)
  {
    TAutoDriver<IExplorerWeb>::Bind(pintf, false);
  }

  IExplorerWebDispT(IExplorerWebPtr pintf)
  {
    TAutoDriver<IExplorerWeb>::Bind(pintf, true);
  }

  IExplorerWebDispT& operator=(IExplorerWeb *pintf)
  {
    TAutoDriver<IExplorerWeb>::Bind(pintf, false);
    return *this;
  }

  IExplorerWebDispT& operator=(IExplorerWebPtr pintf)
  {
    TAutoDriver<IExplorerWeb>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ExplorerWeb));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ExplorerWeb);
  }

  HRESULT /*[VT_HRESULT:0]*/ __fastcall RefreshWebFromServer();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetWebRecalcDependencies(long bRecalcOn);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetWebTitle(BSTR* Title/*[out,retval]*/);
  BSTR            __fastcall GetWebTitle(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetWebURL(BSTR* WebUrl/*[out,retval]*/);
  BSTR            __fastcall GetWebURL(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutWebMetaInfo(BSTR nameValuePairs);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetWebMetaInfo(BSTR key, BSTR* value/*[out,retval]*/);
  BSTR            __fastcall GetWebMetaInfo(BSTR key);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ImportExternallyEditedFiles();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsFeatureSupported(BSTR feature, long* value/*[out,retval]*/);
  long            __fastcall IsFeatureSupported(BSTR feature);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ReturnDBWRoot(BSTR FileUrl, BSTR* rootUrl/*[out,retval]*/);
  BSTR            __fastcall ReturnDBWRoot(BSTR FileUrl);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CancelRequests();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall BringToTop();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetCurrentView(long nViewID, long bTransferSelection, 
                                                       long nFlags);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PublishWeb(BSTR serverUrl, BSTR webName, long dwFlags, 
                                                   BSTR user, BSTR Password);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveWeb(BSTR webName);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetBotModule(BSTR botDir, BSTR botModule, 
                                                     BSTR* Url/*[out,retval]*/);
  BSTR            __fastcall GetBotModule(BSTR botDir, BSTR botModule);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetBotsList(long* bNewBotsList/*[out]*/, 
                                                    BSTR* botList/*[out,retval]*/);
  BSTR            __fastcall GetBotsList(long* bNewBotsList/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetBotsListEx(long* bNewBotsList/*[out]*/, 
                                                      BSTR* botList/*[out,retval]*/);
  BSTR            __fastcall GetBotsListEx(long* bNewBotsList/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ListThemes(BSTR* Themes/*[out,retval]*/);
  BSTR            __fastcall ListThemes(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RefreshThemeList();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall MakeThemeFresh(BSTR ThemeName, long bAllowUpload, 
                                                       long bAllowDownload);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyTheme(BSTR Name, long lParams, BSTR fileList);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetTheme(BSTR themeDirName, BSTR locThemesDir, 
                                                 BSTR* fileList/*[out,retval]*/);
  BSTR            __fastcall GetTheme(BSTR themeDirName, BSTR locThemesDir);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutTheme(BSTR themeDirName, BSTR themeVersion, BSTR fileList
                                                 , BSTR locThemesDir);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutGlobalThemeDoc(BSTR themeFile, BSTR webRelUrl);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutWebStructure(BSTR structureAdds);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetWebStructureRelations(BSTR Url, long lRelationType, 
                                                                 BSTR* structure/*[out,retval]*/);
  BSTR            __fastcall GetWebStructureRelations(BSTR Url, long lRelationType);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CreateFolder(BSTR Url);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetFoldersList(BSTR parentFolderUrl, 
                                                       BSTR* folderList/*[out,retval]*/);
  BSTR            __fastcall GetFoldersList(BSTR parentFolderUrl);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetPagesInFolder(BSTR FolderUrl, long lType, 
                                                         BSTR* pageList/*[out,retval]*/);
  BSTR            __fastcall GetPagesInFolder(BSTR FolderUrl, long lType);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetSubWebsInFolder(BSTR FolderUrl, 
                                                           BSTR* subWebList/*[out,retval]*/);
  BSTR            __fastcall GetSubWebsInFolder(BSTR FolderUrl);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsFolderInWeb(BSTR FolderUrl, long* inWeb/*[out,retval]*/);
  long            __fastcall IsFolderInWeb(BSTR FolderUrl);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetFolderOptions(BSTR Folder, long bExecutable, 
                                                         long bReadable);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall IsPageInWeb(BSTR szURL, long* inWeb/*[out,retval]*/);
  long            __fastcall IsPageInWeb(BSTR szURL);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDocToFile(BSTR Url, BSTR filename);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutDocuments(BSTR fileList, BSTR urlList, 
                                                     long bForceOverwrite, long* lDTM, long* newDTM
                                                     , BSTR metaInfo);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutDocument(BSTR filename, BSTR Url, long bBlockingRequest, 
                                                    long bForceOverwrite);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutDocumentDTM(BSTR filename, BSTR Url, 
                                                       long lDateTimeModified, long bBlockingRequest
                                                       , long bForceOverwrite, BSTR nameValuePairs, 
                                                       long* newDTM/*[out,retval]*/);
  long            __fastcall PutDocumentDTM(BSTR filename, BSTR Url, long lDateTimeModified, 
                                            long bBlockingRequest, long bForceOverwrite, 
                                            BSTR nameValuePairs);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetWebPageMetaInfo(BSTR Url, BSTR keyName, 
                                                           BSTR* value/*[out,retval]*/);
  BSTR            __fastcall GetWebPageMetaInfo(BSTR Url, BSTR keyName);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall PutWebPageMetaInfo(BSTR Url, BSTR nameValuePairs);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveWebPages(BSTR pageList);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EditForToDoList(BSTR Url, BSTR szCookie, long lKey);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EditWebPage(BSTR Url);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EditNextPageWithAction(BSTR prevURL, 
                                                               long* status/*[out,retval]*/);
  long            __fastcall EditNextPageWithAction(BSTR prevURL);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EditImage(BSTR filename, BSTR Url);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RenameDocument(BSTR Url, BSTR newUrl, long bUpdateBacklinks
                                                       , long bIsFolder, long bCopy, 
                                                       long bForceOverwrite);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall NewPage(BSTR Url, BSTR templateFile);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall EditInFrontPage(BSTR Url);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTask(BSTR taskName, short priority, BSTR createdBy, 
                                                BSTR Url, BSTR cookie, BSTR Comment);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall AddTaskAskUser(BSTR taskName, short priority, BSTR createdBy
                                                       , BSTR Url, BSTR cookie, BSTR Comment);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CompletedTask(long taskId);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall CompletedTaskByUrl(BSTR Url, BSTR cookie);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WorkedOnTask(long taskId);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WorkedOnTaskByUrl(BSTR Url, BSTR cookie);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetTaskName(long taskId, BSTR* taskName/*[out,retval]*/);
  BSTR            __fastcall GetTaskName(long taskId);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetActiveCount(long* Count/*[out,retval]*/);
  long            __fastcall GetActiveCount(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall DisableErrorDialogs(long bYesNo/*[in]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ListDataSources(long lType, BSTR* sourceList/*[out]*/, 
                                                        BSTR* attrList/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetDatabaseSchema(BSTR szConnStr, long lFlags, 
                                                          BSTR* pszSchema/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ListRecordSources(BSTR szConnStr, long lType, 
                                                          BSTR* sources/*[out]*/, 
                                                          BSTR* attrs/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetRecordSourceSchema(BSTR szConnStr, BSTR szRecordSource, 
                                                              BSTR* pszSchema/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetQuerySchema(BSTR szConnStr, BSTR szSQL, long lFlags, 
                                                       BSTR* pszSchema/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ListDrivers(long lType, BSTR* drivers/*[out]*/, 
                                                    BSTR* attrs/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ListDataConnections(BSTR* pszNames/*[out]*/, 
                                                            BSTR* pszConnStrs/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall SetDataConnections(BSTR names, BSTR attrs);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall WebSettingsDlg(long flags, long* retcode/*[out,retval]*/);
  long            __fastcall WebSettingsDlg(long flags);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall ApplyBorder(BSTR newBorders, long bNavTop, long bNavLeft, 
                                                    long bNavRight, long topChanged, 
                                                    long leftChanged, long rightChanged, 
                                                    long bApplyToWeb);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetPageList(long lType, BSTR* pageList/*[out,retval]*/);
  BSTR            __fastcall GetPageList(long lType);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetWOMWeb(Frontpage_xp::Web** pWebObject/*[out,retval]*/);
  Frontpage_xp::Web* __fastcall GetWOMWeb(void);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RemoveDocuments(BSTR Url, long bBlockingRequest);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetWebNavStructure(LPUNKNOWN* pNavStructure/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetWebPageBackLinkCount(BSTR Url, 
                                                                long* Count/*[out,retval]*/);
  long            __fastcall GetWebPageBackLinkCount(BSTR Url);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetNextBackLink(BSTR Url, long* pos, 
                                                        BSTR* link/*[out,retval]*/);
  BSTR            __fastcall GetNextBackLink(BSTR Url, long* pos);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall GetOwsLists(LPUNKNOWN* pOwsLists/*[out]*/);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall UpdateSharedBorderMetaInfo();
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RequestDocuments(BSTR urlList, LPUNKNOWN downloadStatus, 
                                                         unsigned_long flags);
  HRESULT /*[VT_HRESULT:0]*/ __fastcall RequestBatchRendering(unsigned_long dwID/*[in]*/, 
                                                              LPSAFEARRAY* ppsaParams/*[in]*/, 
                                                              LPUNKNOWN pStatusCB/*[in]*/);

};
typedef IExplorerWebDispT<IExplorerWeb> IExplorerWebDisp;

// *********************************************************************//
// DispIntf:  _IPageWindowEvents
// Flags:     (4096) Dispatchable
// GUID:      {B6B97A3C-4B04-11D3-9FE7-00C04F79E87D}
// *********************************************************************//
template <class T>
class _IPageWindowEventsDispT : public TAutoDriver<_IPageWindowEvents>
{
public:
  _IPageWindowEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall OnClose(VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnBeforeSave(VARIANT_BOOL* SaveAsUI/*[in]*/, 
                                               VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnAfterSave(VARIANT_BOOL* Success/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnBeforeViewChange(Frontpage_xp::FpPageViewMode TargetView/*[in]*/
                                                     , VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnAfterViewChange();
  void /*[VT_VOID:0]*/ __fastcall OnActivate();

};
typedef _IPageWindowEventsDispT<_IPageWindowEvents> _IPageWindowEventsDisp;

// *********************************************************************//
// DispIntf:  _IWebEvents
// Flags:     (4096) Dispatchable
// GUID:      {9389CD3A-9318-11D3-9F96-005004AE6A5C}
// *********************************************************************//
template <class T>
class _IWebEventsDispT : public TAutoDriver<_IWebEvents>
{
public:
  _IWebEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall OnBeforePublish(BSTR* Destination/*[in]*/, 
                                                  VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnAfterPublish(VARIANT_BOOL* Success/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnRecalculateHyperlinks(VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnWebFileCheckOut(Frontpage_xp::WebFile* pFile/*[in]*/, 
                                                    VARIANT_BOOL* CheckedOut/*[in]*/, 
                                                    Frontpage_xp::FpCheckOutOption* pCheckOutOption/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnClose(VARIANT_BOOL* pCancel/*[in]*/);

};
typedef _IWebEventsDispT<_IWebEvents> _IWebEventsDisp;

// *********************************************************************//
// DispIntf:  _IWebWindowEvents
// Flags:     (4096) Dispatchable
// GUID:      {71EA4320-A214-11D3-9FA5-005004AE6A5C}
// *********************************************************************//
template <class T>
class _IWebWindowEventsDispT : public TAutoDriver<_IWebWindowEvents>
{
public:
  _IWebWindowEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void /*[VT_VOID:0]*/ __fastcall OnBeforeViewChange(Frontpage_xp::FpWebViewModeEx TargetView/*[in]*/
                                                     , VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnAfterViewChange();
  void /*[VT_VOID:0]*/ __fastcall OnActivate();
  void /*[VT_VOID:0]*/ __fastcall OnDeactivate();
  void /*[VT_VOID:0]*/ __fastcall OnBeforeSubViewChange(Frontpage_xp::FpWebSubView TargetSubView/*[in]*/
                                                        , VARIANT_BOOL* Cancel/*[in]*/);
  void /*[VT_VOID:0]*/ __fastcall OnAfterSubViewChange();

};
typedef _IWebWindowEventsDispT<_IWebWindowEvents> _IWebWindowEventsDisp;

// *********************************************************************//
// DispIntf:  _IBaseFPObj
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {98241550-9C43-11D1-83CE-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IBaseFPObjDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_IBaseFPObjDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_IBaseFPObjDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_IBaseFPObjDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_Application
// Interface: _Application
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Application(Frontpage_xp::_Application** ppVal/*[out,retval]*/)
{
  return (*this)->get_Application(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Application(Frontpage_xp::_ApplicationPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_Application(_Application**)ppVal);
}

template <class T> Frontpage_xp::_ApplicationPtr __fastcall
TCOM_ApplicationT<T>::get_Application(void)
{
  Frontpage_xp::_Application* ppVal;
  OLECHECK(this->get_Application((Frontpage_xp::_Application**)&ppVal));
  return (Frontpage_xp::_ApplicationPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocument** ppVal/*[out,retval]*/)
{
  return (*this)->get__deprecated_ActiveDocument(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocumentPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get__deprecated_ActiveDocument(IHTMLDocument**)ppVal);
}

template <class T> Frontpageeditor_xp::IHTMLDocumentPtr __fastcall
TCOM_ApplicationT<T>::get__deprecated_ActiveDocument(void)
{
  Frontpageeditor_xp::IHTMLDocument* ppVal;
  OLECHECK(this->get__deprecated_ActiveDocument((Frontpageeditor_xp::IHTMLDocument**)&ppVal));
  return (Frontpageeditor_xp::IHTMLDocumentPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActivePageWindow(Frontpage_xp::PageWindow** pVal/*[out,retval]*/)
{
  return (*this)->get_ActivePageWindow(pVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActivePageWindow(Frontpage_xp::PageWindowPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ActivePageWindow(PageWindow**)pVal);
}

template <class T> Frontpage_xp::PageWindowPtr __fastcall
TCOM_ApplicationT<T>::get_ActivePageWindow(void)
{
  Frontpage_xp::PageWindow* pVal;
  OLECHECK(this->get_ActivePageWindow((Frontpage_xp::PageWindow**)&pVal));
  return (Frontpage_xp::PageWindowPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActiveWeb(Frontpage_xp::Web** pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveWeb(pVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActiveWeb(Frontpage_xp::WebPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveWeb(Web**)pVal);
}

template <class T> Frontpage_xp::WebPtr __fastcall
TCOM_ApplicationT<T>::get_ActiveWeb(void)
{
  Frontpage_xp::Web* pVal;
  OLECHECK(this->get_ActiveWeb((Frontpage_xp::Web**)&pVal));
  return (Frontpage_xp::WebPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActiveWebWindow(Frontpage_xp::WebWindow** pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveWebWindow(pVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActiveWebWindow(Frontpage_xp::WebWindowPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_ActiveWebWindow(WebWindow**)pVal);
}

template <class T> Frontpage_xp::WebWindowPtr __fastcall
TCOM_ApplicationT<T>::get_ActiveWebWindow(void)
{
  Frontpage_xp::WebWindow* pVal;
  OLECHECK(this->get_ActiveWebWindow((Frontpage_xp::WebWindow**)&pVal));
  return (Frontpage_xp::WebWindowPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AnswerWizard(Office_xp::AnswerWizard** ppVal/*[out,retval]*/)
{
  return (*this)->get_AnswerWizard(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_AnswerWizard(Office_xp::AnswerWizardPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_AnswerWizard(AnswerWizard**)ppVal);
}

template <class T> Office_xp::AnswerWizardPtr __fastcall
TCOM_ApplicationT<T>::get_AnswerWizard(void)
{
  Office_xp::AnswerWizard* ppVal;
  OLECHECK(this->get_AnswerWizard((Office_xp::AnswerWizard**)&ppVal));
  return (Office_xp::AnswerWizardPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Build(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Build(pVal);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Build(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Build((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_COMAddIns(Office_xp::COMAddIns** ppVal/*[out,retval]*/)
{
  return (*this)->get_COMAddIns(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_COMAddIns(Office_xp::COMAddInsPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_COMAddIns(COMAddIns**)ppVal);
}

template <class T> Office_xp::COMAddInsPtr __fastcall
TCOM_ApplicationT<T>::get_COMAddIns(void)
{
  Office_xp::COMAddIns* ppVal;
  OLECHECK(this->get_COMAddIns((Office_xp::COMAddIns**)&ppVal));
  return (Office_xp::COMAddInsPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_CommandBars(Office_xp::CommandBars** ppVal/*[out,retval]*/)
{
  return (*this)->get_CommandBars(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_CommandBars(Office_xp::CommandBarsPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_CommandBars(CommandBars**)ppVal);
}

template <class T> Office_xp::CommandBarsPtr __fastcall
TCOM_ApplicationT<T>::get_CommandBars(void)
{
  Office_xp::CommandBars* ppVal;
  OLECHECK(this->get_CommandBars((Office_xp::CommandBars**)&ppVal));
  return (Office_xp::CommandBarsPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileSearch(Office_xp::FileSearch** ppVal/*[out,retval]*/)
{
  return (*this)->get_FileSearch(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileSearch(Office_xp::FileSearchPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_FileSearch(FileSearch**)ppVal);
}

template <class T> Office_xp::FileSearchPtr __fastcall
TCOM_ApplicationT<T>::get_FileSearch(void)
{
  Office_xp::FileSearch* ppVal;
  OLECHECK(this->get_FileSearch((Office_xp::FileSearch**)&ppVal));
  return (Office_xp::FileSearchPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_LanguageSettings(Office_xp::LanguageSettings** ppVal/*[out,retval]*/)
{
  return (*this)->get_LanguageSettings(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_LanguageSettings(Office_xp::LanguageSettingsPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_LanguageSettings(LanguageSettings**)ppVal);
}

template <class T> Office_xp::LanguageSettingsPtr __fastcall
TCOM_ApplicationT<T>::get_LanguageSettings(void)
{
  Office_xp::LanguageSettings* ppVal;
  OLECHECK(this->get_LanguageSettings((Office_xp::LanguageSettings**)&ppVal));
  return (Office_xp::LanguageSettingsPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Name(pVal);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Name(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Name((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_OrganizationName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_OrganizationName(pVal);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_OrganizationName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_OrganizationName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_System(Frontpage_xp::SYSTEM** pVal/*[out,retval]*/)
{
  return (*this)->get_System(pVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_System(Frontpage_xp::SYSTEMPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_System(SYSTEM**)pVal);
}

template <class T> Frontpage_xp::SYSTEMPtr __fastcall
TCOM_ApplicationT<T>::get_System(void)
{
  Frontpage_xp::SYSTEM* pVal;
  OLECHECK(this->get_System((Frontpage_xp::SYSTEM**)&pVal));
  return (Frontpage_xp::SYSTEMPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Themes(Frontpage_xp::Themes** pVal/*[out,retval]*/)
{
  return (*this)->get_Themes(pVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Themes(Frontpage_xp::ThemesPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Themes(Themes**)pVal);
}

template <class T> Frontpage_xp::ThemesPtr __fastcall
TCOM_ApplicationT<T>::get_Themes(void)
{
  Frontpage_xp::Themes* pVal;
  OLECHECK(this->get_Themes((Frontpage_xp::Themes**)&pVal));
  return (Frontpage_xp::ThemesPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_UserName(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_UserName(pVal);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_UserName(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_UserName((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_UserName(BSTR pVal/*[in]*/)
{
  return (*this)->set_UserName(pVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Version(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Version(pVal);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_Version(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Version((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Webs(Frontpage_xp::Webs** pVal/*[out,retval]*/)
{
  return (*this)->get_Webs(pVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Webs(Frontpage_xp::WebsPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_Webs(Webs**)pVal);
}

template <class T> Frontpage_xp::WebsPtr __fastcall
TCOM_ApplicationT<T>::get_Webs(void)
{
  Frontpage_xp::Webs* pVal;
  OLECHECK(this->get_Webs((Frontpage_xp::Webs**)&pVal));
  return (Frontpage_xp::WebsPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_WebWindows(Frontpage_xp::WebWindows** pVal/*[out,retval]*/)
{
  return (*this)->get_WebWindows(pVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_WebWindows(Frontpage_xp::WebWindowsPtr* pVal/*[out,retval]*/)
{
  return (*this)->get_WebWindows(WebWindows**)pVal);
}

template <class T> Frontpage_xp::WebWindowsPtr __fastcall
TCOM_ApplicationT<T>::get_WebWindows(void)
{
  Frontpage_xp::WebWindows* pVal;
  OLECHECK(this->get_WebWindows((Frontpage_xp::WebWindows**)&pVal));
  return (Frontpage_xp::WebWindowsPtr)pVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ProductCode(BSTR* ProductCode/*[out,retval]*/)
{
  return (*this)->get_ProductCode(ProductCode);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::get_ProductCode(void)
{
  BSTR ProductCode = 0;
  OLECHECK(this->get_ProductCode((BSTR*)&ProductCode));
  return ProductCode;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::LocatePage(BSTR DocumentUrl/*[in]*/, 
                                 Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/, 
                                 Frontpage_xp::PageWindow** ppObj/*[out,retval]*/)
{
  return (*this)->LocatePage(DocumentUrl, ViewMode, ppObj);
}

template <class T> Frontpage_xp::PageWindow* __fastcall
TCOM_ApplicationT<T>::LocatePage(BSTR DocumentUrl/*[in]*/, 
                                 Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/)
{
  Frontpage_xp::PageWindow* ppObj;
  OLECHECK(this->LocatePage(, (Frontpage_xp::PageWindow**)&ppObj));
  return ppObj;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/, 
                              BSTR* pbzAbsUrl/*[out,retval]*/)
{
  return (*this)->MakeAbs(UrlBase, Url, pbzAbsUrl);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/)
{
  BSTR pbzAbsUrl = 0;
  OLECHECK(this->MakeAbs(, (BSTR*)&pbzAbsUrl));
  return pbzAbsUrl;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/, 
                              BSTR* pbzRelUrl/*[out,retval]*/)
{
  return (*this)->MakeRel(UrlBase, Url, pbzRelUrl);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/)
{
  BSTR pbzRelUrl = 0;
  OLECHECK(this->MakeRel(, (BSTR*)&pbzRelUrl));
  return pbzRelUrl;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Quit(void)
{
  return (*this)->Quit();
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                          VARIANT* Run/*[out,retval]*/)
{
  return (*this)->Run(MacroName, safeArrayOfParams, Run);
}

template <class T> VARIANT __fastcall
TCOM_ApplicationT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/)
{
  VARIANT Run;
  OLECHECK(this->Run(, (VARIANT*)&Run));
  return Run;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Assistant(Office_xp::Assistant** ppVal/*[out,retval]*/)
{
  return (*this)->get_Assistant(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_Assistant(Office_xp::AssistantPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_Assistant(Assistant**)ppVal);
}

template <class T> Office_xp::AssistantPtr __fastcall
TCOM_ApplicationT<T>::get_Assistant(void)
{
  Office_xp::Assistant* ppVal;
  OLECHECK(this->get_Assistant((Office_xp::Assistant**)&ppVal));
  return (Office_xp::AssistantPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed* pConnectionSpeed/*[out,retval]*/)
{
  return (*this)->get_ConnectionSpeed(pConnectionSpeed);
}

template <class T> Frontpage_xp::FpConnectionSpeed __fastcall
TCOM_ApplicationT<T>::get_ConnectionSpeed(void)
{
  Frontpage_xp::FpConnectionSpeed pConnectionSpeed;
  OLECHECK(this->get_ConnectionSpeed((Frontpage_xp::FpConnectionSpeed*)&pConnectionSpeed));
  return pConnectionSpeed;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed pConnectionSpeed/*[in]*/)
{
  return (*this)->set_ConnectionSpeed(pConnectionSpeed);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_OlderFile(long* plDays/*[out,retval]*/)
{
  return (*this)->get_OlderFile(plDays);
}

template <class T> long __fastcall
TCOM_ApplicationT<T>::get_OlderFile(void)
{
  long plDays;
  OLECHECK(this->get_OlderFile((long*)&plDays));
  return plDays;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_OlderFile(long plDays/*[in]*/)
{
  return (*this)->set_OlderFile(plDays);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_RecentFile(long* plDays/*[out,retval]*/)
{
  return (*this)->get_RecentFile(plDays);
}

template <class T> long __fastcall
TCOM_ApplicationT<T>::get_RecentFile(void)
{
  long plDays;
  OLECHECK(this->get_RecentFile((long*)&plDays));
  return plDays;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_RecentFile(long plDays/*[in]*/)
{
  return (*this)->set_RecentFile(plDays);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_SlowPage(long* plSeconds/*[out,retval]*/)
{
  return (*this)->get_SlowPage(plSeconds);
}

template <class T> long __fastcall
TCOM_ApplicationT<T>::get_SlowPage(void)
{
  long plSeconds;
  OLECHECK(this->get_SlowPage((long*)&plSeconds));
  return plSeconds;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_SlowPage(long plSeconds/*[in]*/)
{
  return (*this)->set_SlowPage(plSeconds);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::OnTime(VARIANT* When/*[in]*/, BSTR Name/*[in]*/, 
                             VARIANT* Tolerance/*[in,opt]*/)
{
  return (*this)->OnTime(When, Name, Tolerance);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::ParseURL(BSTR Url/*[in]*/, Frontpage_xp::FpURLComponent URLComponent/*[in]*/, 
                               BSTR* pbzRelUrl/*[out,retval]*/)
{
  return (*this)->ParseURL(Url, URLComponent, pbzRelUrl);
}

template <class T> BSTR __fastcall
TCOM_ApplicationT<T>::ParseURL(BSTR Url/*[in]*/, Frontpage_xp::FpURLComponent URLComponent/*[in]*/)
{
  BSTR pbzRelUrl = 0;
  OLECHECK(this->ParseURL(, (BSTR*)&pbzRelUrl));
  return pbzRelUrl;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/, 
                                     Office_xp::FileDialog** ppVal/*[out,retval]*/)
{
  return (*this)->get_FileDialog(DialogType, ppVal);
}

template <class T> Office_xp::FileDialog* __fastcall
TCOM_ApplicationT<T>::get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/)
{
  Office_xp::FileDialog* ppVal;
  OLECHECK(this->get_FileDialog(, (Office_xp::FileDialog**)&ppVal));
  return ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_VBE(Vbide_xp::VBE** ppVal/*[out,retval]*/)
{
  return (*this)->get_VBE(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_VBE(Vbide_xp::VBEPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_VBE(VBE**)ppVal);
}

template <class T> Vbide_xp::VBEPtr __fastcall
TCOM_ApplicationT<T>::get_VBE(void)
{
  Vbide_xp::VBE* ppVal;
  OLECHECK(this->get_VBE((Vbide_xp::VBE**)&ppVal));
  return (Vbide_xp::VBEPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_MonthsShown(long* plMonths/*[out,retval]*/)
{
  return (*this)->get_MonthsShown(plMonths);
}

template <class T> long __fastcall
TCOM_ApplicationT<T>::get_MonthsShown(void)
{
  long plMonths;
  OLECHECK(this->get_MonthsShown((long*)&plMonths));
  return plMonths;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_MonthsShown(long plMonths/*[in]*/)
{
  return (*this)->set_MonthsShown(plMonths);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_NewPageorWeb(Office_xp::NewFile** ppVal/*[out,retval]*/)
{
  return (*this)->get_NewPageorWeb(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_NewPageorWeb(Office_xp::NewFilePtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_NewPageorWeb(NewFile**)ppVal);
}

template <class T> Office_xp::NewFilePtr __fastcall
TCOM_ApplicationT<T>::get_NewPageorWeb(void)
{
  Office_xp::NewFile* ppVal;
  OLECHECK(this->get_NewPageorWeb((Office_xp::NewFile**)&ppVal));
  return (Office_xp::NewFilePtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ShowStartupDialog(VARIANT_BOOL* pfShowAtStartup/*[out,retval]*/)
{
  return (*this)->get_ShowStartupDialog(pfShowAtStartup);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ShowStartupDialog(TOLEBOOL* pfShowAtStartup/*[out,retval]*/)
{
  return (*this)->get_ShowStartupDialog(VARIANT_BOOL*)pfShowAtStartup);
}

template <class T> TOLEBOOL __fastcall
TCOM_ApplicationT<T>::get_ShowStartupDialog(void)
{
  VARIANT_BOOL pfShowAtStartup;
  OLECHECK(this->get_ShowStartupDialog((VARIANT_BOOL*)&pfShowAtStartup));
  return (TOLEBOOL)pfShowAtStartup;
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_ShowStartupDialog(VARIANT_BOOL pfShowAtStartup/*[in]*/)
{
  return (*this)->set_ShowStartupDialog(pfShowAtStartup);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::set_ShowStartupDialog(TOLEBOOL pfShowAtStartup/*[in]*/)
{
  return (*this)->set_ShowStartupDialog(VARIANT_BOOL)pfShowAtStartup);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocument** ppVal/*[out,retval]*/)
{
  return (*this)->get_ActiveDocument(ppVal);
}

template <class T> HRESULT __fastcall
TCOM_ApplicationT<T>::get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocumentPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_ActiveDocument(DispFPHTMLDocument**)ppVal);
}

template <class T> Frontpageeditor_xp::DispFPHTMLDocumentPtr __fastcall
TCOM_ApplicationT<T>::get_ActiveDocument(void)
{
  Frontpageeditor_xp::DispFPHTMLDocument* ppVal;
  OLECHECK(this->get_ActiveDocument((Frontpageeditor_xp::DispFPHTMLDocument**)&ppVal));
  return (Frontpageeditor_xp::DispFPHTMLDocumentPtr)ppVal;
}

// *********************************************************************//
// DispIntf:  _Application
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {04DF1014-7007-11D1-83BC-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Application(Frontpage_xp::_Application** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ApplicationDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* ppVal;
  this->get_Application((Frontpage_xp::_Application**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocument** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_deprecated_ActiveDocument"), DISPID(2));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpageeditor_xp::IHTMLDocument**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpageeditor_xp::IHTMLDocument* __fastcall
_ApplicationDispT<T>::get__deprecated_ActiveDocument(void)
{
  Frontpageeditor_xp::IHTMLDocument* ppVal;
  this->get__deprecated_ActiveDocument((Frontpageeditor_xp::IHTMLDocument**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ActivePageWindow(Frontpage_xp::PageWindow** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePageWindow"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::PageWindow**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::PageWindow* __fastcall
_ApplicationDispT<T>::get_ActivePageWindow(void)
{
  Frontpage_xp::PageWindow* pVal;
  this->get_ActivePageWindow((Frontpage_xp::PageWindow**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ActiveWeb(Frontpage_xp::Web** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveWeb"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ApplicationDispT<T>::get_ActiveWeb(void)
{
  Frontpage_xp::Web* pVal;
  this->get_ActiveWeb((Frontpage_xp::Web**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ActiveWebWindow(Frontpage_xp::WebWindow** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveWebWindow"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebWindow**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebWindow* __fastcall
_ApplicationDispT<T>::get_ActiveWebWindow(void)
{
  Frontpage_xp::WebWindow* pVal;
  this->get_ActiveWebWindow((Frontpage_xp::WebWindow**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_AnswerWizard(Office_xp::AnswerWizard** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AnswerWizard"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::AnswerWizard**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::AnswerWizard* __fastcall
_ApplicationDispT<T>::get_AnswerWizard(void)
{
  Office_xp::AnswerWizard* ppVal;
  this->get_AnswerWizard((Office_xp::AnswerWizard**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Build(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Build"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Build(void)
{
  BSTR pVal;
  this->get_Build((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_COMAddIns(Office_xp::COMAddIns** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("COMAddIns"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::COMAddIns**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::COMAddIns* __fastcall
_ApplicationDispT<T>::get_COMAddIns(void)
{
  Office_xp::COMAddIns* ppVal;
  this->get_COMAddIns((Office_xp::COMAddIns**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_CommandBars(Office_xp::CommandBars** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandBars"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::CommandBars**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::CommandBars* __fastcall
_ApplicationDispT<T>::get_CommandBars(void)
{
  Office_xp::CommandBars* ppVal;
  this->get_CommandBars((Office_xp::CommandBars**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_FileSearch(Office_xp::FileSearch** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileSearch"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::FileSearch**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::FileSearch* __fastcall
_ApplicationDispT<T>::get_FileSearch(void)
{
  Office_xp::FileSearch* ppVal;
  this->get_FileSearch((Office_xp::FileSearch**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_LanguageSettings(Office_xp::LanguageSettings** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageSettings"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::LanguageSettings**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::LanguageSettings* __fastcall
_ApplicationDispT<T>::get_LanguageSettings(void)
{
  Office_xp::LanguageSettings* ppVal;
  this->get_LanguageSettings((Office_xp::LanguageSettings**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Name(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Name(void)
{
  BSTR pVal;
  this->get_Name((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_OrganizationName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OrganizationName"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_OrganizationName(void)
{
  BSTR pVal;
  this->get_OrganizationName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_System(Frontpage_xp::SYSTEM** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("System"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::SYSTEM**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::SYSTEM* __fastcall
_ApplicationDispT<T>::get_System(void)
{
  Frontpage_xp::SYSTEM* pVal;
  this->get_System((Frontpage_xp::SYSTEM**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Themes(Frontpage_xp::Themes** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Themes"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Themes**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Themes* __fastcall
_ApplicationDispT<T>::get_Themes(void)
{
  Frontpage_xp::Themes* pVal;
  this->get_Themes((Frontpage_xp::Themes**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_UserName(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_UserName(void)
{
  BSTR pVal;
  this->get_UserName((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_UserName(BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UserName"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Version(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_Version(void)
{
  BSTR pVal;
  this->get_Version((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Webs(Frontpage_xp::Webs** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Webs"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Webs**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Webs* __fastcall
_ApplicationDispT<T>::get_Webs(void)
{
  Frontpage_xp::Webs* pVal;
  this->get_Webs((Frontpage_xp::Webs**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_WebWindows(Frontpage_xp::WebWindows** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WebWindows"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebWindows**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebWindows* __fastcall
_ApplicationDispT<T>::get_WebWindows(void)
{
  Frontpage_xp::WebWindows* pVal;
  this->get_WebWindows((Frontpage_xp::WebWindows**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ProductCode(BSTR* ProductCode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProductCode"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ProductCode /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::get_ProductCode(void)
{
  BSTR ProductCode;
  this->get_ProductCode((BSTR*)&ProductCode);
  return ProductCode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::LocatePage(BSTR DocumentUrl/*[in]*/, 
                                 Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/, 
                                 Frontpage_xp::PageWindow** ppObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LocatePage"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = DocumentUrl /*[VT_BSTR:0]*/;
  _args[2] = (int)ViewMode /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::PageWindow**)ppObj /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::PageWindow* __fastcall
_ApplicationDispT<T>::LocatePage(BSTR DocumentUrl/*[in]*/, 
                                 Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/)
{
  Frontpage_xp::PageWindow* ppObj;
  this->LocatePage(DocumentUrl, ViewMode, (Frontpage_xp::PageWindow**)&ppObj);
  return ppObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/, 
                              BSTR* pbzAbsUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MakeAbs"), DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = UrlBase /*[VT_VARIANT:1]*/;
  _args[2] = Url /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbzAbsUrl /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::MakeAbs(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/)
{
  BSTR pbzAbsUrl;
  this->MakeAbs(UrlBase, Url, (BSTR*)&pbzAbsUrl);
  return pbzAbsUrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/, 
                              BSTR* pbzRelUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MakeRel"), DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = UrlBase /*[VT_VARIANT:1]*/;
  _args[2] = Url /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pbzRelUrl /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::MakeRel(VARIANT* UrlBase/*[in]*/, BSTR Url/*[in]*/)
{
  BSTR pbzRelUrl;
  this->MakeRel(UrlBase, Url, (BSTR*)&pbzRelUrl);
  return pbzRelUrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Quit()
{
  _TDispID _dispid(*this, OLETEXT("Quit"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/, 
                          VARIANT* Run/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Run"), DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = MacroName /*[VT_BSTR:0]*/;
  _args[2] = safeArrayOfParams /*[VT_SAFEARRAY:1]*/;
  return OutRetValSetterPtr(Run /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ApplicationDispT<T>::Run(BSTR MacroName/*[in]*/, LPSAFEARRAY* safeArrayOfParams/*[in]*/)
{
  VARIANT Run;
  this->Run(MacroName, safeArrayOfParams, (VARIANT*)&Run);
  return Run;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_Assistant(Office_xp::Assistant** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Assistant"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::Assistant**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::Assistant* __fastcall
_ApplicationDispT<T>::get_Assistant(void)
{
  Office_xp::Assistant* ppVal;
  this->get_Assistant((Office_xp::Assistant**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed* pConnectionSpeed/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSpeed"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pConnectionSpeed /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpConnectionSpeed __fastcall
_ApplicationDispT<T>::get_ConnectionSpeed(void)
{
  Frontpage_xp::FpConnectionSpeed pConnectionSpeed;
  this->get_ConnectionSpeed((Frontpage_xp::FpConnectionSpeed*)&pConnectionSpeed);
  return pConnectionSpeed;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_ConnectionSpeed(Frontpage_xp::FpConnectionSpeed pConnectionSpeed/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConnectionSpeed"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (int)pConnectionSpeed /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_OlderFile(long* plDays/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OlderFile"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plDays /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ApplicationDispT<T>::get_OlderFile(void)
{
  long plDays;
  this->get_OlderFile((long*)&plDays);
  return plDays;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_OlderFile(long plDays/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OlderFile"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = plDays /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_RecentFile(long* plDays/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecentFile"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plDays /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ApplicationDispT<T>::get_RecentFile(void)
{
  long plDays;
  this->get_RecentFile((long*)&plDays);
  return plDays;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_RecentFile(long plDays/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecentFile"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = plDays /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_SlowPage(long* plSeconds/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlowPage"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plSeconds /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ApplicationDispT<T>::get_SlowPage(void)
{
  long plSeconds;
  this->get_SlowPage((long*)&plSeconds);
  return plSeconds;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_SlowPage(long plSeconds/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlowPage"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = plSeconds /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::OnTime(VARIANT* When/*[in]*/, BSTR Name/*[in]*/, 
                             VARIANT* Tolerance/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("OnTime"), DISPID(32));
  TAutoArgs<3> _args;
  _args[1] = When /*[VT_VARIANT:1]*/;
  _args[2] = Name /*[VT_BSTR:0]*/;
  _args[3] = Tolerance /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::ParseURL(BSTR Url/*[in]*/, Frontpage_xp::FpURLComponent URLComponent/*[in]*/, 
                               BSTR* pbzRelUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParseURL"), DISPID(33));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = (int)URLComponent /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pbzRelUrl /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
_ApplicationDispT<T>::ParseURL(BSTR Url/*[in]*/, Frontpage_xp::FpURLComponent URLComponent/*[in]*/)
{
  BSTR pbzRelUrl;
  this->ParseURL(Url, URLComponent, (BSTR*)&pbzRelUrl);
  return pbzRelUrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/, 
                                     Office_xp::FileDialog** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileDialog"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = (int)DialogType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::FileDialog**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::FileDialog* __fastcall
_ApplicationDispT<T>::get_FileDialog(Office_xp::MsoFileDialogType DialogType/*[in]*/)
{
  Office_xp::FileDialog* ppVal;
  this->get_FileDialog(DialogType, (Office_xp::FileDialog**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_VBE(Vbide_xp::VBE** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VBE"), DISPID(35));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Vbide_xp::VBE**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Vbide_xp::VBE* __fastcall
_ApplicationDispT<T>::get_VBE(void)
{
  Vbide_xp::VBE* ppVal;
  this->get_VBE((Vbide_xp::VBE**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_MonthsShown(long* plMonths/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MonthsShown"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMonths /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ApplicationDispT<T>::get_MonthsShown(void)
{
  long plMonths;
  this->get_MonthsShown((long*)&plMonths);
  return plMonths;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_MonthsShown(long plMonths/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MonthsShown"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = plMonths /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_NewPageorWeb(Office_xp::NewFile** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewPageorWeb"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Office_xp::NewFile**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Office_xp::NewFile* __fastcall
_ApplicationDispT<T>::get_NewPageorWeb(void)
{
  Office_xp::NewFile* ppVal;
  this->get_NewPageorWeb((Office_xp::NewFile**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ShowStartupDialog(VARIANT_BOOL* pfShowAtStartup/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStartupDialog"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfShowAtStartup /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ApplicationDispT<T>::get_ShowStartupDialog(void)
{
  VARIANT_BOOL pfShowAtStartup;
  this->get_ShowStartupDialog((VARIANT_BOOL*)&pfShowAtStartup);
  return pfShowAtStartup;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::set_ShowStartupDialog(VARIANT_BOOL pfShowAtStartup/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowStartupDialog"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = pfShowAtStartup /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ApplicationDispT<T>::get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocument** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveDocument"), DISPID(41));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpageeditor_xp::DispFPHTMLDocument**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpageeditor_xp::DispFPHTMLDocument* __fastcall
_ApplicationDispT<T>::get_ActiveDocument(void)
{
  Frontpageeditor_xp::DispFPHTMLDocument* ppVal;
  this->get_ActiveDocument((Frontpageeditor_xp::DispFPHTMLDocument**)&ppVal);
  return ppVal;
}

// *********************************************************************//
// SmartIntf: TCOMPageWindow
// Interface: PageWindow
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocument** ppDocObj/*[out,retval]*/)
{
  return (*this)->get__deprecated_ActiveDocument(ppDocObj);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocumentPtr* ppDocObj/*[out,retval]*/)
{
  return (*this)->get__deprecated_ActiveDocument(IHTMLDocument**)ppDocObj);
}

template <class T> Frontpageeditor_xp::IHTMLDocumentPtr __fastcall
TCOMPageWindowT<T>::get__deprecated_ActiveDocument(void)
{
  Frontpageeditor_xp::IHTMLDocument* ppDocObj;
  OLECHECK(this->get__deprecated_ActiveDocument((Frontpageeditor_xp::IHTMLDocument**)&ppDocObj));
  return (Frontpageeditor_xp::IHTMLDocumentPtr)ppDocObj;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_ActiveFrameWindow(Frontpageeditor_xp::IHTMLWindow2** ppDocObj/*[out,retval]*/)
{
  return (*this)->get_ActiveFrameWindow(ppDocObj);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_ActiveFrameWindow(Frontpageeditor_xp::IHTMLWindow2Ptr* ppDocObj/*[out,retval]*/)
{
  return (*this)->get_ActiveFrameWindow(IHTMLWindow2**)ppDocObj);
}

template <class T> Frontpageeditor_xp::IHTMLWindow2Ptr __fastcall
TCOMPageWindowT<T>::get_ActiveFrameWindow(void)
{
  Frontpageeditor_xp::IHTMLWindow2* ppDocObj;
  OLECHECK(this->get_ActiveFrameWindow((Frontpageeditor_xp::IHTMLWindow2**)&ppDocObj));
  return (Frontpageeditor_xp::IHTMLWindow2Ptr)ppDocObj;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_Caption(BSTR* pszCaption/*[out,retval]*/)
{
  return (*this)->get_Caption(pszCaption);
}

template <class T> BSTR __fastcall
TCOMPageWindowT<T>::get_Caption(void)
{
  BSTR pszCaption = 0;
  OLECHECK(this->get_Caption((BSTR*)&pszCaption));
  return pszCaption;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get__deprecated_Document(Frontpageeditor_xp::IHTMLDocument** ppDocObj/*[out,retval]*/)
{
  return (*this)->get__deprecated_Document(ppDocObj);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get__deprecated_Document(Frontpageeditor_xp::IHTMLDocumentPtr* ppDocObj/*[out,retval]*/)
{
  return (*this)->get__deprecated_Document(IHTMLDocument**)ppDocObj);
}

template <class T> Frontpageeditor_xp::IHTMLDocumentPtr __fastcall
TCOMPageWindowT<T>::get__deprecated_Document(void)
{
  Frontpageeditor_xp::IHTMLDocument* ppDocObj;
  OLECHECK(this->get__deprecated_Document((Frontpageeditor_xp::IHTMLDocument**)&ppDocObj));
  return (Frontpageeditor_xp::IHTMLDocumentPtr)ppDocObj;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_File(Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/)
{
  return (*this)->get_File(ppFileObj);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_File(Frontpage_xp::WebFilePtr* ppFileObj/*[out,retval]*/)
{
  return (*this)->get_File(WebFile**)ppFileObj);
}

template <class T> Frontpage_xp::WebFilePtr __fastcall
TCOMPageWindowT<T>::get_File(void)
{
  Frontpage_xp::WebFile* ppFileObj;
  OLECHECK(this->get_File((Frontpage_xp::WebFile**)&ppFileObj));
  return (Frontpage_xp::WebFilePtr)ppFileObj;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_FrameWindow(Frontpageeditor_xp::IHTMLWindow2** ppFrameWindowObj/*[out,retval]*/)
{
  return (*this)->get_FrameWindow(ppFrameWindowObj);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_FrameWindow(Frontpageeditor_xp::IHTMLWindow2Ptr* ppFrameWindowObj/*[out,retval]*/)
{
  return (*this)->get_FrameWindow(IHTMLWindow2**)ppFrameWindowObj);
}

template <class T> Frontpageeditor_xp::IHTMLWindow2Ptr __fastcall
TCOMPageWindowT<T>::get_FrameWindow(void)
{
  Frontpageeditor_xp::IHTMLWindow2* ppFrameWindowObj;
  OLECHECK(this->get_FrameWindow((Frontpageeditor_xp::IHTMLWindow2**)&ppFrameWindowObj));
  return (Frontpageeditor_xp::IHTMLWindow2Ptr)ppFrameWindowObj;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_IsDirty(VARIANT_BOOL* pfIsDirty/*[out,retval]*/)
{
  return (*this)->get_IsDirty(pfIsDirty);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_IsDirty(TOLEBOOL* pfIsDirty/*[out,retval]*/)
{
  return (*this)->get_IsDirty(VARIANT_BOOL*)pfIsDirty);
}

template <class T> TOLEBOOL __fastcall
TCOMPageWindowT<T>::get_IsDirty(void)
{
  VARIANT_BOOL pfIsDirty;
  OLECHECK(this->get_IsDirty((VARIANT_BOOL*)&pfIsDirty));
  return (TOLEBOOL)pfIsDirty;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/, 
                                        VARIANT* ppv/*[out,retval]*/)
{
  return (*this)->get_ThemeProperties(PropertyIndex, ppv);
}

template <class T> VARIANT __fastcall
TCOMPageWindowT<T>::get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/)
{
  VARIANT ppv;
  OLECHECK(this->get_ThemeProperties(, (VARIANT*)&ppv));
  return ppv;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_ViewMode(Frontpage_xp::FpPageViewMode* pviewMode/*[out,retval]*/)
{
  return (*this)->get_ViewMode(pviewMode);
}

template <class T> Frontpage_xp::FpPageViewMode __fastcall
TCOMPageWindowT<T>::get_ViewMode(void)
{
  Frontpage_xp::FpPageViewMode pviewMode;
  OLECHECK(this->get_ViewMode((Frontpage_xp::FpPageViewMode*)&pviewMode));
  return pviewMode;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::set_ViewMode(Frontpage_xp::FpPageViewMode pviewMode/*[in]*/)
{
  return (*this)->set_ViewMode(pviewMode);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_Visible(VARIANT_BOOL* pfIsWindowVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(pfIsWindowVisible);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_Visible(TOLEBOOL* pfIsWindowVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)pfIsWindowVisible);
}

template <class T> TOLEBOOL __fastcall
TCOMPageWindowT<T>::get_Visible(void)
{
  VARIANT_BOOL pfIsWindowVisible;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&pfIsWindowVisible));
  return (TOLEBOOL)pfIsWindowVisible;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  return (*this)->get_Web(ppVal);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_Web(Frontpage_xp::WebPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_Web(Web**)ppVal);
}

template <class T> Frontpage_xp::WebPtr __fastcall
TCOMPageWindowT<T>::get_Web(void)
{
  Frontpage_xp::Web* ppVal;
  OLECHECK(this->get_Web((Frontpage_xp::Web**)&ppVal));
  return (Frontpage_xp::WebPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::ApplyTheme(BSTR ThemeName/*[in]*/, 
                               Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/)
{
  return (*this)->ApplyTheme(ThemeName, ThemeProperties);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::Close(VARIANT_BOOL ForceSave/*[in,def,opt]*/)
{
  return (*this)->Close(ForceSave);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::Refresh(VARIANT_BOOL SaveChanges/*[in,def,opt]*/)
{
  return (*this)->Refresh(SaveChanges);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::Save(VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  return (*this)->Save(ForceOverwrite);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::SaveAs(BSTR DestinationUrl/*[in]*/, VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  return (*this)->SaveAs(DestinationUrl, ForceOverwrite);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::Activate(void)
{
  return (*this)->Activate();
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_PreviewDocument(Frontpageeditor_xp::IHTMLDocument** ppIEDoc/*[out,retval]*/)
{
  return (*this)->get_PreviewDocument(ppIEDoc);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_PreviewDocument(Frontpageeditor_xp::IHTMLDocumentPtr* ppIEDoc/*[out,retval]*/)
{
  return (*this)->get_PreviewDocument(IHTMLDocument**)ppIEDoc);
}

template <class T> Frontpageeditor_xp::IHTMLDocumentPtr __fastcall
TCOMPageWindowT<T>::get_PreviewDocument(void)
{
  Frontpageeditor_xp::IHTMLDocument* ppIEDoc;
  OLECHECK(this->get_PreviewDocument((Frontpageeditor_xp::IHTMLDocument**)&ppIEDoc));
  return (Frontpageeditor_xp::IHTMLDocumentPtr)ppIEDoc;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocument** ppDocObj/*[out,retval]*/)
{
  return (*this)->get_ActiveDocument(ppDocObj);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocumentPtr* ppDocObj/*[out,retval]*/)
{
  return (*this)->get_ActiveDocument(DispFPHTMLDocument**)ppDocObj);
}

template <class T> Frontpageeditor_xp::DispFPHTMLDocumentPtr __fastcall
TCOMPageWindowT<T>::get_ActiveDocument(void)
{
  Frontpageeditor_xp::DispFPHTMLDocument* ppDocObj;
  OLECHECK(this->get_ActiveDocument((Frontpageeditor_xp::DispFPHTMLDocument**)&ppDocObj));
  return (Frontpageeditor_xp::DispFPHTMLDocumentPtr)ppDocObj;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_Document(Frontpageeditor_xp::DispFPHTMLDocument** ppDocObj/*[out,retval]*/)
{
  return (*this)->get_Document(ppDocObj);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::get_Document(Frontpageeditor_xp::DispFPHTMLDocumentPtr* ppDocObj/*[out,retval]*/)
{
  return (*this)->get_Document(DispFPHTMLDocument**)ppDocObj);
}

template <class T> Frontpageeditor_xp::DispFPHTMLDocumentPtr __fastcall
TCOMPageWindowT<T>::get_Document(void)
{
  Frontpageeditor_xp::DispFPHTMLDocument* ppDocObj;
  OLECHECK(this->get_Document((Frontpageeditor_xp::DispFPHTMLDocument**)&ppDocObj));
  return (Frontpageeditor_xp::DispFPHTMLDocumentPtr)ppDocObj;
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::set_IsDirty(VARIANT_BOOL pfIsDirty/*[in]*/)
{
  return (*this)->set_IsDirty(pfIsDirty);
}

template <class T> HRESULT __fastcall
TCOMPageWindowT<T>::set_IsDirty(TOLEBOOL pfIsDirty/*[in]*/)
{
  return (*this)->set_IsDirty(VARIANT_BOOL)pfIsDirty);
}

// *********************************************************************//
// DispIntf:  PageWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4014-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get__deprecated_ActiveDocument(Frontpageeditor_xp::IHTMLDocument** ppDocObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_deprecated_ActiveDocument"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpageeditor_xp::IHTMLDocument**)ppDocObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpageeditor_xp::IHTMLDocument* __fastcall
PageWindowDispT<T>::get__deprecated_ActiveDocument(void)
{
  Frontpageeditor_xp::IHTMLDocument* ppDocObj;
  this->get__deprecated_ActiveDocument((Frontpageeditor_xp::IHTMLDocument**)&ppDocObj);
  return ppDocObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_ActiveFrameWindow(Frontpageeditor_xp::IHTMLWindow2** ppDocObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveFrameWindow"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpageeditor_xp::IHTMLWindow2**)ppDocObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpageeditor_xp::IHTMLWindow2* __fastcall
PageWindowDispT<T>::get_ActiveFrameWindow(void)
{
  Frontpageeditor_xp::IHTMLWindow2* ppDocObj;
  this->get_ActiveFrameWindow((Frontpageeditor_xp::IHTMLWindow2**)&ppDocObj);
  return ppDocObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_Caption(BSTR* pszCaption/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszCaption /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PageWindowDispT<T>::get_Caption(void)
{
  BSTR pszCaption;
  this->get_Caption((BSTR*)&pszCaption);
  return pszCaption;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get__deprecated_Document(Frontpageeditor_xp::IHTMLDocument** ppDocObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_deprecated_Document"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpageeditor_xp::IHTMLDocument**)ppDocObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpageeditor_xp::IHTMLDocument* __fastcall
PageWindowDispT<T>::get__deprecated_Document(void)
{
  Frontpageeditor_xp::IHTMLDocument* ppDocObj;
  this->get__deprecated_Document((Frontpageeditor_xp::IHTMLDocument**)&ppDocObj);
  return ppDocObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_File(Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("File"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFile**)ppFileObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFile* __fastcall
PageWindowDispT<T>::get_File(void)
{
  Frontpage_xp::WebFile* ppFileObj;
  this->get_File((Frontpage_xp::WebFile**)&ppFileObj);
  return ppFileObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_FrameWindow(Frontpageeditor_xp::IHTMLWindow2** ppFrameWindowObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameWindow"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpageeditor_xp::IHTMLWindow2**)ppFrameWindowObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpageeditor_xp::IHTMLWindow2* __fastcall
PageWindowDispT<T>::get_FrameWindow(void)
{
  Frontpageeditor_xp::IHTMLWindow2* ppFrameWindowObj;
  this->get_FrameWindow((Frontpageeditor_xp::IHTMLWindow2**)&ppFrameWindowObj);
  return ppFrameWindowObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_IsDirty(VARIANT_BOOL* pfIsDirty/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsDirty /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PageWindowDispT<T>::get_IsDirty(void)
{
  VARIANT_BOOL pfIsDirty;
  this->get_IsDirty((VARIANT_BOOL*)&pfIsDirty);
  return pfIsDirty;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/
                                        , VARIANT* ppv/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThemeProperties"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)PropertyIndex /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ppv /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PageWindowDispT<T>::get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/)
{
  VARIANT ppv;
  this->get_ThemeProperties(PropertyIndex, (VARIANT*)&ppv);
  return ppv;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_ViewMode(Frontpage_xp::FpPageViewMode* pviewMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewMode"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pviewMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpPageViewMode __fastcall
PageWindowDispT<T>::get_ViewMode(void)
{
  Frontpage_xp::FpPageViewMode pviewMode;
  this->get_ViewMode((Frontpage_xp::FpPageViewMode*)&pviewMode);
  return pviewMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::set_ViewMode(Frontpage_xp::FpPageViewMode pviewMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewMode"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)pviewMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_Visible(VARIANT_BOOL* pfIsWindowVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsWindowVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
PageWindowDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pfIsWindowVisible;
  this->get_Visible((VARIANT_BOOL*)&pfIsWindowVisible);
  return pfIsWindowVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
PageWindowDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* ppVal;
  this->get_Web((Frontpage_xp::Web**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::ApplyTheme(BSTR ThemeName/*[in]*/, 
                               Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyTheme"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = ThemeName /*[VT_BSTR:0]*/;
  _args[2] = (int)ThemeProperties /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::Close(VARIANT_BOOL ForceSave/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = ForceSave /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::Refresh(VARIANT_BOOL SaveChanges/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = SaveChanges /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::Save(VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Save"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = ForceOverwrite /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::SaveAs(BSTR DestinationUrl/*[in]*/, VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveAs"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = DestinationUrl /*[VT_BSTR:0]*/;
  _args[2] = ForceOverwrite /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_PreviewDocument(Frontpageeditor_xp::IHTMLDocument** ppIEDoc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PreviewDocument"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpageeditor_xp::IHTMLDocument**)ppIEDoc /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpageeditor_xp::IHTMLDocument* __fastcall
PageWindowDispT<T>::get_PreviewDocument(void)
{
  Frontpageeditor_xp::IHTMLDocument* ppIEDoc;
  this->get_PreviewDocument((Frontpageeditor_xp::IHTMLDocument**)&ppIEDoc);
  return ppIEDoc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_ActiveDocument(Frontpageeditor_xp::DispFPHTMLDocument** ppDocObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveDocument"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpageeditor_xp::DispFPHTMLDocument**)ppDocObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpageeditor_xp::DispFPHTMLDocument* __fastcall
PageWindowDispT<T>::get_ActiveDocument(void)
{
  Frontpageeditor_xp::DispFPHTMLDocument* ppDocObj;
  this->get_ActiveDocument((Frontpageeditor_xp::DispFPHTMLDocument**)&ppDocObj);
  return ppDocObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_Document(Frontpageeditor_xp::DispFPHTMLDocument** ppDocObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Document"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpageeditor_xp::DispFPHTMLDocument**)ppDocObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpageeditor_xp::DispFPHTMLDocument* __fastcall
PageWindowDispT<T>::get_Document(void)
{
  Frontpageeditor_xp::DispFPHTMLDocument* ppDocObj;
  this->get_Document((Frontpageeditor_xp::DispFPHTMLDocument**)&ppDocObj);
  return ppDocObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::set_IsDirty(VARIANT_BOOL pfIsDirty/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDirty"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pfIsDirty /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
PageWindowDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PageWindowDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  WebFile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4049-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_Creator(BSTR* pbzFileCreatorProgId/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Creator"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzFileCreatorProgId /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebFileDispT<T>::get_Creator(void)
{
  BSTR pbzFileCreatorProgId;
  this->get_Creator((BSTR*)&pbzFileCreatorProgId);
  return pbzFileCreatorProgId;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_CheckedoutBy(BSTR* pbzFileCheckedOutBy/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckedoutBy"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzFileCheckedOutBy /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebFileDispT<T>::get_CheckedoutBy(void)
{
  BSTR pbzFileCheckedOutBy;
  this->get_CheckedoutBy((BSTR*)&pbzFileCheckedOutBy);
  return pbzFileCheckedOutBy;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_Extension(BSTR* pbzFileExtension/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Extension"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzFileExtension /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebFileDispT<T>::get_Extension(void)
{
  BSTR pbzFileExtension;
  this->get_Extension((BSTR*)&pbzFileExtension);
  return pbzFileExtension;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_IsOpen(VARIANT_BOOL* pfIsOpenInEditor/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsOpen"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsOpenInEditor /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebFileDispT<T>::get_IsOpen(void)
{
  VARIANT_BOOL pfIsOpenInEditor;
  this->get_IsOpen((VARIANT_BOOL*)&pfIsOpenInEditor);
  return pfIsOpenInEditor;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_Properties(Frontpage_xp::Properties** ppProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Properties**)ppProperties /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Properties* __fastcall
WebFileDispT<T>::get_Properties(void)
{
  Frontpage_xp::Properties* ppProperties;
  this->get_Properties((Frontpage_xp::Properties**)&ppProperties);
  return ppProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_MetaTags(Frontpage_xp::MetaTags** ppProperties/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MetaTags"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::MetaTags**)ppProperties /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::MetaTags* __fastcall
WebFileDispT<T>::get_MetaTags(void)
{
  Frontpage_xp::MetaTags* ppProperties;
  this->get_MetaTags((Frontpage_xp::MetaTags**)&ppProperties);
  return ppProperties;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_Name(BSTR* pbzFileBaseName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzFileBaseName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebFileDispT<T>::get_Name(void)
{
  BSTR pbzFileBaseName;
  this->get_Name((BSTR*)&pbzFileBaseName);
  return pbzFileBaseName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_NavigationNode(Frontpage_xp::NavigationNode** ppNavigationNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NavigationNode"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNode**)ppNavigationNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNode* __fastcall
WebFileDispT<T>::get_NavigationNode(void)
{
  Frontpage_xp::NavigationNode* ppNavigationNode;
  this->get_NavigationNode((Frontpage_xp::NavigationNode**)&ppNavigationNode);
  return ppNavigationNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                                   VARIANT* ppv/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SharedBorders"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)BorderIndex /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ppv /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
WebFileDispT<T>::get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/)
{
  VARIANT ppv;
  this->get_SharedBorders(BorderIndex, (VARIANT*)&ppv);
  return ppv;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::set_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                                   VARIANT* ppv/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SharedBorders"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = (int)BorderIndex /*[VT_USERDEFINED:0]*/;
  _args[2] = ppv /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/, 
                                     VARIANT* ppv/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThemeProperties"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)PropertyIndex /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ppv /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
WebFileDispT<T>::get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/)
{
  VARIANT ppv;
  this->get_ThemeProperties(PropertyIndex, (VARIANT*)&ppv);
  return ppv;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_Title(BSTR* pbzTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzTitle /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebFileDispT<T>::get_Title(void)
{
  BSTR pbzTitle;
  this->get_Title((BSTR*)&pbzTitle);
  return pbzTitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::set_Title(BSTR pbzTitle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = pbzTitle /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_Url(BSTR* pbzUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Url"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzUrl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebFileDispT<T>::get_Url(void)
{
  BSTR pbzUrl;
  this->get_Url((BSTR*)&pbzUrl);
  return pbzUrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
WebFileDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* ppVal;
  this->get_Web((Frontpage_xp::Web**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::ApplyTheme(BSTR ThemeName/*[in]*/, 
                            Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyTheme"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = ThemeName /*[VT_BSTR:0]*/;
  _args[2] = (int)ThemeProperties /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::Checkin(BSTR Comment/*[in,def,opt]*/, VARIANT_BOOL KeepCheckedout/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checkin"), DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = Comment /*[VT_BSTR:0]*/;
  _args[2] = KeepCheckedout /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::Checkout(VARIANT_BOOL ForceCheckout/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Checkout"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = ForceCheckout /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::Copy(BSTR DestinationUrl/*[in]*/, VARIANT_BOOL Unused/*[in,def,opt]*/, 
                      VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(19));
  TAutoArgs<3> _args;
  _args[1] = DestinationUrl /*[VT_BSTR:0]*/;
  _args[2] = Unused /*[VT_BOOL:0]*/;
  _args[3] = ForceOverwrite /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::Edit(Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/, 
                      Frontpage_xp::PageWindow** ppPageObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Edit"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = (int)ViewMode /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::PageWindow**)ppPageObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::PageWindow* __fastcall
WebFileDispT<T>::Edit(Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/)
{
  Frontpage_xp::PageWindow* ppPageObject;
  this->Edit(ViewMode, (Frontpage_xp::PageWindow**)&ppPageObject);
  return ppPageObject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::Move(BSTR DestinationUrl/*[in]*/, VARIANT_BOOL UpdateLinks/*[in,def,opt]*/, 
                      VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(22));
  TAutoArgs<3> _args;
  _args[1] = DestinationUrl /*[VT_BSTR:0]*/;
  _args[2] = UpdateLinks /*[VT_BOOL:0]*/;
  _args[3] = ForceOverwrite /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::Open()
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(23));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::UndoCheckout()
{
  _TDispID _dispid(*this, OLETEXT("UndoCheckout"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_IsOrphan(VARIANT_BOOL* pIsOrphan/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsOrphan"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pIsOrphan /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebFileDispT<T>::get_IsOrphan(void)
{
  VARIANT_BOOL pIsOrphan;
  this->get_IsOrphan((VARIANT_BOOL*)&pIsOrphan);
  return pIsOrphan;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_DownloadTime(long* plSeconds/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadTime"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plSeconds /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
WebFileDispT<T>::get_DownloadTime(void)
{
  long plSeconds;
  this->get_DownloadTime((long*)&plSeconds);
  return plSeconds;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
WebFileDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFileDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WebFileDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  Properties
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {E67C7ADC-F4F5-11D1-B0E0-00C04FA30A8B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PropertiesDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PropertiesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::get_Item(BSTR PropertyKey/*[in]*/, VARIANT* ppvtVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = PropertyKey /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(ppvtVal /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PropertiesDispT<T>::get_Item(BSTR PropertyKey/*[in]*/)
{
  VARIANT ppvtVal;
  this->get_Item(PropertyKey, (VARIANT*)&ppvtVal);
  return ppvtVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::set_Item(BSTR PropertyKey/*[in]*/, VARIANT* ppvtVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = PropertyKey /*[VT_BSTR:0]*/;
  _args[2] = ppvtVal /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::Add(BSTR PropertyKey/*[in]*/, VARIANT* PropertyValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = PropertyKey /*[VT_BSTR:0]*/;
  _args[2] = PropertyValue /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::Delete(BSTR PropertyKey)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = PropertyKey /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::ApplyChanges()
{
  _TDispID _dispid(*this, OLETEXT("ApplyChanges"), DISPID(6));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
PropertiesDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PropertiesDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PropertiesDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  MetaTags
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {2FC94518-0413-11D2-B0E9-00C04FA30A8B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MetaTagsDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
MetaTagsDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MetaTagsDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
MetaTagsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MetaTagsDispT<T>::get_Item(BSTR PropertyKey/*[in]*/, VARIANT* PropertyValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = PropertyKey /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(PropertyValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
MetaTagsDispT<T>::get_Item(BSTR PropertyKey/*[in]*/)
{
  VARIANT PropertyValue;
  this->get_Item(PropertyKey, (VARIANT*)&PropertyValue);
  return PropertyValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MetaTagsDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
MetaTagsDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
MetaTagsDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
MetaTagsDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  NavigationNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8905FB0-E5F2-11D1-B0DE-00C04FA30A8B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_Children(Frontpage_xp::NavigationNodes** ppNodesChildren/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Children"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNodes**)ppNodesChildren /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNodes* __fastcall
NavigationNodeDispT<T>::get_Children(void)
{
  Frontpage_xp::NavigationNodes* ppNodesChildren;
  this->get_Children((Frontpage_xp::NavigationNodes**)&ppNodesChildren);
  return ppNodesChildren;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_File(Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("File"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFile**)ppFileObj /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFile* __fastcall
NavigationNodeDispT<T>::get_File(void)
{
  Frontpage_xp::WebFile* ppFileObj;
  this->get_File((Frontpage_xp::WebFile**)&ppFileObj);
  return ppFileObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_Home(Frontpage_xp::NavigationNode** ppHomeNavigationNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Home"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNode**)ppHomeNavigationNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNode* __fastcall
NavigationNodeDispT<T>::get_Home(void)
{
  Frontpage_xp::NavigationNode* ppHomeNavigationNode;
  this->get_Home((Frontpage_xp::NavigationNode**)&ppHomeNavigationNode);
  return ppHomeNavigationNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_Label(BSTR* pbzNavViewNodeLabel/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzNavViewNodeLabel /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
NavigationNodeDispT<T>::get_Label(void)
{
  BSTR pbzNavViewNodeLabel;
  this->get_Label((BSTR*)&pbzNavViewNodeLabel);
  return pbzNavViewNodeLabel;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::set_Label(BSTR pbzNavViewNodeLabel/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbzNavViewNodeLabel /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_Url(BSTR* pbzUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Url"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzUrl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
NavigationNodeDispT<T>::get_Url(void)
{
  BSTR pbzUrl;
  this->get_Url((BSTR*)&pbzUrl);
  return pbzUrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_Next(Frontpage_xp::NavigationNode** ppNavigationNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Next"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNode**)ppNavigationNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNode* __fastcall
NavigationNodeDispT<T>::get_Next(void)
{
  Frontpage_xp::NavigationNode* ppNavigationNode;
  this->get_Next((Frontpage_xp::NavigationNode**)&ppNavigationNode);
  return ppNavigationNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_Prev(Frontpage_xp::NavigationNode** ppNavigationNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Prev"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNode**)ppNavigationNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNode* __fastcall
NavigationNodeDispT<T>::get_Prev(void)
{
  Frontpage_xp::NavigationNode* ppNavigationNode;
  this->get_Prev((Frontpage_xp::NavigationNode**)&ppNavigationNode);
  return ppNavigationNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_Web(Frontpage_xp::Web** ppWebObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)ppWebObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
NavigationNodeDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* ppWebObject;
  this->get_Web((Frontpage_xp::Web**)&ppWebObject);
  return ppWebObject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::Move(Frontpage_xp::NavigationNodes* NodeCollection/*[in]*/, 
                             VARIANT* NewLeftSibling/*[in,opt]*/, 
                             Frontpage_xp::NavigationNode** ppStruct/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::NavigationNodes*)NodeCollection /*[VT_USERDEFINED:1]*/;
  _args[2] = NewLeftSibling /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNode**)ppStruct /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNode* __fastcall
NavigationNodeDispT<T>::Move(Frontpage_xp::NavigationNodes* NodeCollection/*[in]*/, 
                             VARIANT* NewLeftSibling/*[in,opt]*/)
{
  Frontpage_xp::NavigationNode* ppStruct;
  this->Move(NodeCollection, NewLeftSibling, (Frontpage_xp::NavigationNode**)&ppStruct);
  return ppStruct;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_InNavBars(VARIANT_BOOL* pbInNavBars/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InNavBars"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbInNavBars /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
NavigationNodeDispT<T>::get_InNavBars(void)
{
  VARIANT_BOOL pbInNavBars;
  this->get_InNavBars((VARIANT_BOOL*)&pbInNavBars);
  return pbInNavBars;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::set_InNavBars(VARIANT_BOOL pbInNavBars/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InNavBars"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = pbInNavBars /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_SubTree(Frontpage_xp::NavigationNodes** ppNodesSubTree/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubTree"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNodes**)ppNodesSubTree /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNodes* __fastcall
NavigationNodeDispT<T>::get_SubTree(void)
{
  Frontpage_xp::NavigationNodes* ppNodesSubTree;
  this->get_SubTree((Frontpage_xp::NavigationNodes**)&ppNodesSubTree);
  return ppNodesSubTree;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_IsLinkBar(VARIANT_BOOL* pbIsLinkBar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsLinkBar"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbIsLinkBar /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
NavigationNodeDispT<T>::get_IsLinkBar(void)
{
  VARIANT_BOOL pbIsLinkBar;
  this->get_IsLinkBar((VARIANT_BOOL*)&pbIsLinkBar);
  return pbIsLinkBar;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
NavigationNodeDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodeDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
NavigationNodeDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  NavigationNodes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {435789D4-E5DC-11D1-B0DE-00C04FA30A8B}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodesDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
NavigationNodesDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodesDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
NavigationNodesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodesDispT<T>::get_Item(VARIANT* Index/*[in]*/, 
                                  Frontpage_xp::NavigationNode** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNode**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNode* __fastcall
NavigationNodesDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Frontpage_xp::NavigationNode* ppVal;
  this->get_Item(Index, (Frontpage_xp::NavigationNode**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodesDispT<T>::Add(BSTR Url/*[in]*/, BSTR NodeLabel/*[in]*/, 
                             Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                             VARIANT* LeftSibling/*[in,opt]*/, 
                             Frontpage_xp::NavigationNode** ppStruct/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(4));
  TAutoArgs<4> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = NodeLabel /*[VT_BSTR:0]*/;
  _args[3] = (int)ModificationType /*[VT_USERDEFINED:0]*/;
  _args[4] = LeftSibling /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNode**)ppStruct /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNode* __fastcall
NavigationNodesDispT<T>::Add(BSTR Url/*[in]*/, BSTR NodeLabel/*[in]*/, 
                             Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                             VARIANT* LeftSibling/*[in,opt]*/)
{
  Frontpage_xp::NavigationNode* ppStruct;
  this->Add(Url, NodeLabel, ModificationType, LeftSibling, (Frontpage_xp::NavigationNode**)&ppStruct);
  return ppStruct;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodesDispT<T>::Delete(VARIANT* Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodesDispT<T>::AddLinkBar(BSTR NodeLabel/*[in]*/, 
                                    Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                                    VARIANT* LeftSibling/*[in,opt]*/, 
                                    Frontpage_xp::NavigationNode** ppStruct/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddLinkBar"), DISPID(6));
  TAutoArgs<3> _args;
  _args[1] = NodeLabel /*[VT_BSTR:0]*/;
  _args[2] = (int)ModificationType /*[VT_USERDEFINED:0]*/;
  _args[3] = LeftSibling /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNode**)ppStruct /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNode* __fastcall
NavigationNodesDispT<T>::AddLinkBar(BSTR NodeLabel/*[in]*/, 
                                    Frontpage_xp::FpStructModType ModificationType/*[in]*/, 
                                    VARIANT* LeftSibling/*[in,opt]*/)
{
  Frontpage_xp::NavigationNode* ppStruct;
  this->AddLinkBar(NodeLabel, ModificationType, LeftSibling, (Frontpage_xp::NavigationNode**)&ppStruct);
  return ppStruct;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodesDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
NavigationNodesDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
NavigationNodesDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
NavigationNodesDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMWeb
// Interface: Web
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMWebT<T>::get_ActiveWebWindow(Frontpage_xp::WebWindow** ppActiveWebWindow/*[out,retval]*/)
{
  return (*this)->get_ActiveWebWindow(ppActiveWebWindow);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_ActiveWebWindow(Frontpage_xp::WebWindowPtr* ppActiveWebWindow/*[out,retval]*/)
{
  return (*this)->get_ActiveWebWindow(WebWindow**)ppActiveWebWindow);
}

template <class T> Frontpage_xp::WebWindowPtr __fastcall
TCOMWebT<T>::get_ActiveWebWindow(void)
{
  Frontpage_xp::WebWindow* ppActiveWebWindow;
  OLECHECK(this->get_ActiveWebWindow((Frontpage_xp::WebWindow**)&ppActiveWebWindow));
  return (Frontpage_xp::WebWindowPtr)ppActiveWebWindow;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_AllowsLongFilenames(VARIANT_BOOL* pbAllowLongFileNames/*[out,retval]*/)
{
  return (*this)->get_AllowsLongFilenames(pbAllowLongFileNames);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_AllowsLongFilenames(TOLEBOOL* pbAllowLongFileNames/*[out,retval]*/)
{
  return (*this)->get_AllowsLongFilenames(VARIANT_BOOL*)pbAllowLongFileNames);
}

template <class T> TOLEBOOL __fastcall
TCOMWebT<T>::get_AllowsLongFilenames(void)
{
  VARIANT_BOOL pbAllowLongFileNames;
  OLECHECK(this->get_AllowsLongFilenames((VARIANT_BOOL*)&pbAllowLongFileNames));
  return (TOLEBOOL)pbAllowLongFileNames;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_RootNavigationNode(Frontpage_xp::NavigationNode** ppRootNavigationNode/*[out,retval]*/)
{
  return (*this)->get_RootNavigationNode(ppRootNavigationNode);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_RootNavigationNode(Frontpage_xp::NavigationNodePtr* ppRootNavigationNode/*[out,retval]*/)
{
  return (*this)->get_RootNavigationNode(NavigationNode**)ppRootNavigationNode);
}

template <class T> Frontpage_xp::NavigationNodePtr __fastcall
TCOMWebT<T>::get_RootNavigationNode(void)
{
  Frontpage_xp::NavigationNode* ppRootNavigationNode;
  OLECHECK(this->get_RootNavigationNode((Frontpage_xp::NavigationNode**)&ppRootNavigationNode));
  return (Frontpage_xp::NavigationNodePtr)ppRootNavigationNode;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_HomeNavigationNode(Frontpage_xp::NavigationNode** ppRootNavigationNode/*[out,retval]*/)
{
  return (*this)->get_HomeNavigationNode(ppRootNavigationNode);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_HomeNavigationNode(Frontpage_xp::NavigationNodePtr* ppRootNavigationNode/*[out,retval]*/)
{
  return (*this)->get_HomeNavigationNode(NavigationNode**)ppRootNavigationNode);
}

template <class T> Frontpage_xp::NavigationNodePtr __fastcall
TCOMWebT<T>::get_HomeNavigationNode(void)
{
  Frontpage_xp::NavigationNode* ppRootNavigationNode;
  OLECHECK(this->get_HomeNavigationNode((Frontpage_xp::NavigationNode**)&ppRootNavigationNode));
  return (Frontpage_xp::NavigationNodePtr)ppRootNavigationNode;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_IsUnderRevisionControl(VARIANT_BOOL* pbIsUnderRCS/*[out,retval]*/)
{
  return (*this)->get_IsUnderRevisionControl(pbIsUnderRCS);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_IsUnderRevisionControl(TOLEBOOL* pbIsUnderRCS/*[out,retval]*/)
{
  return (*this)->get_IsUnderRevisionControl(VARIANT_BOOL*)pbIsUnderRCS);
}

template <class T> TOLEBOOL __fastcall
TCOMWebT<T>::get_IsUnderRevisionControl(void)
{
  VARIANT_BOOL pbIsUnderRCS;
  OLECHECK(this->get_IsUnderRevisionControl((VARIANT_BOOL*)&pbIsUnderRCS));
  return (TOLEBOOL)pbIsUnderRCS;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_Properties(Frontpage_xp::Properties** ppProps/*[out,retval]*/)
{
  return (*this)->get_Properties(ppProps);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_Properties(Frontpage_xp::PropertiesPtr* ppProps/*[out,retval]*/)
{
  return (*this)->get_Properties(Properties**)ppProps);
}

template <class T> Frontpage_xp::PropertiesPtr __fastcall
TCOMWebT<T>::get_Properties(void)
{
  Frontpage_xp::Properties* ppProps;
  OLECHECK(this->get_Properties((Frontpage_xp::Properties**)&ppProps));
  return (Frontpage_xp::PropertiesPtr)ppProps;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_RevisionControlProject(BSTR* pbzRCSProjectName/*[out,retval]*/)
{
  return (*this)->get_RevisionControlProject(pbzRCSProjectName);
}

template <class T> BSTR __fastcall
TCOMWebT<T>::get_RevisionControlProject(void)
{
  BSTR pbzRCSProjectName = 0;
  OLECHECK(this->get_RevisionControlProject((BSTR*)&pbzRCSProjectName));
  return pbzRCSProjectName;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::set_RevisionControlProject(BSTR pbzRCSProjectName/*[in]*/)
{
  return (*this)->set_RevisionControlProject(pbzRCSProjectName);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_RootFolder(Frontpage_xp::WebFolder** ppRootFolder/*[out,retval]*/)
{
  return (*this)->get_RootFolder(ppRootFolder);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_RootFolder(Frontpage_xp::WebFolderPtr* ppRootFolder/*[out,retval]*/)
{
  return (*this)->get_RootFolder(WebFolder**)ppRootFolder);
}

template <class T> Frontpage_xp::WebFolderPtr __fastcall
TCOMWebT<T>::get_RootFolder(void)
{
  Frontpage_xp::WebFolder* ppRootFolder;
  OLECHECK(this->get_RootFolder((Frontpage_xp::WebFolder**)&ppRootFolder));
  return (Frontpage_xp::WebFolderPtr)ppRootFolder;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                               VARIANT* ppv/*[out,retval]*/)
{
  return (*this)->get_SharedBorders(BorderIndex, ppv);
}

template <class T> VARIANT __fastcall
TCOMWebT<T>::get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/)
{
  VARIANT ppv;
  OLECHECK(this->get_SharedBorders(, (VARIANT*)&ppv));
  return ppv;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::set_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                               VARIANT* ppv/*[in]*/)
{
  return (*this)->set_SharedBorders(BorderIndex, ppv);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/, 
                                 VARIANT* ppv/*[out,retval]*/)
{
  return (*this)->get_ThemeProperties(PropertyIndex, ppv);
}

template <class T> VARIANT __fastcall
TCOMWebT<T>::get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/)
{
  VARIANT ppv;
  OLECHECK(this->get_ThemeProperties(, (VARIANT*)&ppv));
  return ppv;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_Themes(Frontpage_xp::Themes** ppThemesInWeb/*[out,retval]*/)
{
  return (*this)->get_Themes(ppThemesInWeb);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_Themes(Frontpage_xp::ThemesPtr* ppThemesInWeb/*[out,retval]*/)
{
  return (*this)->get_Themes(Themes**)ppThemesInWeb);
}

template <class T> Frontpage_xp::ThemesPtr __fastcall
TCOMWebT<T>::get_Themes(void)
{
  Frontpage_xp::Themes* ppThemesInWeb;
  OLECHECK(this->get_Themes((Frontpage_xp::Themes**)&ppThemesInWeb));
  return (Frontpage_xp::ThemesPtr)ppThemesInWeb;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_Title(BSTR* szWebTitle/*[out,retval]*/)
{
  return (*this)->get_Title(szWebTitle);
}

template <class T> BSTR __fastcall
TCOMWebT<T>::get_Title(void)
{
  BSTR szWebTitle = 0;
  OLECHECK(this->get_Title((BSTR*)&szWebTitle));
  return szWebTitle;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::set_Title(BSTR szWebTitle/*[in]*/)
{
  return (*this)->set_Title(szWebTitle);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_Url(BSTR* szWebUrl/*[out,retval]*/)
{
  return (*this)->get_Url(szWebUrl);
}

template <class T> BSTR __fastcall
TCOMWebT<T>::get_Url(void)
{
  BSTR szWebUrl = 0;
  OLECHECK(this->get_Url((BSTR*)&szWebUrl));
  return szWebUrl;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_WebWindows(Frontpage_xp::WebWindows** ppVal/*[out,retval]*/)
{
  return (*this)->get_WebWindows(ppVal);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_WebWindows(Frontpage_xp::WebWindowsPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_WebWindows(WebWindows**)ppVal);
}

template <class T> Frontpage_xp::WebWindowsPtr __fastcall
TCOMWebT<T>::get_WebWindows(void)
{
  Frontpage_xp::WebWindows* ppVal;
  OLECHECK(this->get_WebWindows((Frontpage_xp::WebWindows**)&ppVal));
  return (Frontpage_xp::WebWindowsPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::Activate(void)
{
  return (*this)->Activate();
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::ApplyTheme(BSTR ThemeName/*[in]*/, 
                        Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/)
{
  return (*this)->ApplyTheme(ThemeName, ThemeProperties);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::CancelRequests(void)
{
  return (*this)->CancelRequests();
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::Close(void)
{
  return (*this)->Close();
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::Delete(Frontpage_xp::FpWebDeleteFlags WebDeleteFlags/*[in,def,opt]*/)
{
  return (*this)->Delete(WebDeleteFlags);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::LocateFile(BSTR FileUrl/*[in]*/, Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/)
{
  return (*this)->LocateFile(FileUrl, ppFileObj);
}

template <class T> Frontpage_xp::WebFile* __fastcall
TCOMWebT<T>::LocateFile(BSTR FileUrl/*[in]*/)
{
  Frontpage_xp::WebFile* ppFileObj;
  OLECHECK(this->LocateFile(, (Frontpage_xp::WebFile**)&ppFileObj));
  return ppFileObj;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::LocateFolder(BSTR FolderUrl/*[in]*/, 
                          Frontpage_xp::WebFolder** ppFolderObj/*[out,retval]*/)
{
  return (*this)->LocateFolder(FolderUrl, ppFolderObj);
}

template <class T> Frontpage_xp::WebFolder* __fastcall
TCOMWebT<T>::LocateFolder(BSTR FolderUrl/*[in]*/)
{
  Frontpage_xp::WebFolder* ppFolderObj;
  OLECHECK(this->LocateFolder(, (Frontpage_xp::WebFolder**)&ppFolderObj));
  return ppFolderObj;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::LocatePage(BSTR FileUrl/*[in]*/, Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/, 
                        Frontpage_xp::PageWindow** ppObj/*[out,retval]*/)
{
  return (*this)->LocatePage(FileUrl, ViewMode, ppObj);
}

template <class T> Frontpage_xp::PageWindow* __fastcall
TCOMWebT<T>::LocatePage(BSTR FileUrl/*[in]*/, Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/)
{
  Frontpage_xp::PageWindow* ppObj;
  OLECHECK(this->LocatePage(, (Frontpage_xp::PageWindow**)&ppObj));
  return ppObj;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::Publish(BSTR DestinationUrl/*[in]*/, 
                     Frontpage_xp::FpWebPublishFlags PublishFlags/*[in,def,opt]*/, 
                     BSTR UserName/*[in,def,opt]*/, BSTR Password/*[in,def,opt]*/)
{
  return (*this)->Publish(DestinationUrl, PublishFlags, UserName, Password);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::RecalcHyperlinks(void)
{
  return (*this)->RecalcHyperlinks();
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::Refresh(VARIANT_BOOL FetchAll/*[in,def,opt]*/)
{
  return (*this)->Refresh(FetchAll);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::ApplyNavigationStructure(void)
{
  return (*this)->ApplyNavigationStructure();
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_IsHiddenFoldersEnabled(VARIANT_BOOL* pbIsHiddenFoldersEnabled/*[out,retval]*/)
{
  return (*this)->get_IsHiddenFoldersEnabled(pbIsHiddenFoldersEnabled);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_IsHiddenFoldersEnabled(TOLEBOOL* pbIsHiddenFoldersEnabled/*[out,retval]*/)
{
  return (*this)->get_IsHiddenFoldersEnabled(VARIANT_BOOL*)pbIsHiddenFoldersEnabled);
}

template <class T> TOLEBOOL __fastcall
TCOMWebT<T>::get_IsHiddenFoldersEnabled(void)
{
  VARIANT_BOOL pbIsHiddenFoldersEnabled;
  OLECHECK(this->get_IsHiddenFoldersEnabled((VARIANT_BOOL*)&pbIsHiddenFoldersEnabled));
  return (TOLEBOOL)pbIsHiddenFoldersEnabled;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::set_IsHiddenFoldersEnabled(VARIANT_BOOL pbIsHiddenFoldersEnabled/*[in]*/)
{
  return (*this)->set_IsHiddenFoldersEnabled(pbIsHiddenFoldersEnabled);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::set_IsHiddenFoldersEnabled(TOLEBOOL pbIsHiddenFoldersEnabled/*[in]*/)
{
  return (*this)->set_IsHiddenFoldersEnabled(VARIANT_BOOL)pbIsHiddenFoldersEnabled);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_AllFiles(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/)
{
  return (*this)->get_AllFiles(ppFilesCollection);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_AllFiles(Frontpage_xp::WebFilesPtr* ppFilesCollection/*[out,retval]*/)
{
  return (*this)->get_AllFiles(WebFiles**)ppFilesCollection);
}

template <class T> Frontpage_xp::WebFilesPtr __fastcall
TCOMWebT<T>::get_AllFiles(void)
{
  Frontpage_xp::WebFiles* ppFilesCollection;
  OLECHECK(this->get_AllFiles((Frontpage_xp::WebFiles**)&ppFilesCollection));
  return (Frontpage_xp::WebFilesPtr)ppFilesCollection;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_AllFolders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/)
{
  return (*this)->get_AllFolders(ppFoldersCollection);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_AllFolders(Frontpage_xp::WebFoldersPtr* ppFoldersCollection/*[out,retval]*/)
{
  return (*this)->get_AllFolders(WebFolders**)ppFoldersCollection);
}

template <class T> Frontpage_xp::WebFoldersPtr __fastcall
TCOMWebT<T>::get_AllFolders(void)
{
  Frontpage_xp::WebFolders* ppFoldersCollection;
  OLECHECK(this->get_AllFolders((Frontpage_xp::WebFolders**)&ppFoldersCollection));
  return (Frontpage_xp::WebFoldersPtr)ppFoldersCollection;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_AllNavigationNodes(Frontpage_xp::NavigationNodes** ppNodes/*[out,retval]*/)
{
  return (*this)->get_AllNavigationNodes(ppNodes);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_AllNavigationNodes(Frontpage_xp::NavigationNodesPtr* ppNodes/*[out,retval]*/)
{
  return (*this)->get_AllNavigationNodes(NavigationNodes**)ppNodes);
}

template <class T> Frontpage_xp::NavigationNodesPtr __fastcall
TCOMWebT<T>::get_AllNavigationNodes(void)
{
  Frontpage_xp::NavigationNodes* ppNodes;
  OLECHECK(this->get_AllNavigationNodes((Frontpage_xp::NavigationNodes**)&ppNodes));
  return (Frontpage_xp::NavigationNodesPtr)ppNodes;
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::ApplyTemplate(BSTR TemplateDir/*[in]*/, VARIANT_BOOL fOverWrite/*[in,def,opt]*/)
{
  return (*this)->ApplyTemplate(TemplateDir, fOverWrite);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_Lists(Frontpage_xp::_Lists** ppLists/*[out,retval]*/)
{
  return (*this)->get_Lists(ppLists);
}

template <class T> HRESULT __fastcall
TCOMWebT<T>::get_Lists(Frontpage_xp::_ListsPtr* ppLists/*[out,retval]*/)
{
  return (*this)->get_Lists(_Lists**)ppLists);
}

template <class T> Frontpage_xp::_ListsPtr __fastcall
TCOMWebT<T>::get_Lists(void)
{
  Frontpage_xp::_Lists* ppLists;
  OLECHECK(this->get_Lists((Frontpage_xp::_Lists**)&ppLists));
  return (Frontpage_xp::_ListsPtr)ppLists;
}

// *********************************************************************//
// DispIntf:  Web
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {95B21741-CA4A-11D1-83D5-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_ActiveWebWindow(Frontpage_xp::WebWindow** ppActiveWebWindow/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveWebWindow"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebWindow**)ppActiveWebWindow /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebWindow* __fastcall
WebDispT<T>::get_ActiveWebWindow(void)
{
  Frontpage_xp::WebWindow* ppActiveWebWindow;
  this->get_ActiveWebWindow((Frontpage_xp::WebWindow**)&ppActiveWebWindow);
  return ppActiveWebWindow;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_AllowsLongFilenames(VARIANT_BOOL* pbAllowLongFileNames/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowsLongFilenames"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbAllowLongFileNames /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebDispT<T>::get_AllowsLongFilenames(void)
{
  VARIANT_BOOL pbAllowLongFileNames;
  this->get_AllowsLongFilenames((VARIANT_BOOL*)&pbAllowLongFileNames);
  return pbAllowLongFileNames;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_RootNavigationNode(Frontpage_xp::NavigationNode** ppRootNavigationNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RootNavigationNode"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNode**)ppRootNavigationNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNode* __fastcall
WebDispT<T>::get_RootNavigationNode(void)
{
  Frontpage_xp::NavigationNode* ppRootNavigationNode;
  this->get_RootNavigationNode((Frontpage_xp::NavigationNode**)&ppRootNavigationNode);
  return ppRootNavigationNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_HomeNavigationNode(Frontpage_xp::NavigationNode** ppRootNavigationNode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HomeNavigationNode"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNode**)ppRootNavigationNode /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNode* __fastcall
WebDispT<T>::get_HomeNavigationNode(void)
{
  Frontpage_xp::NavigationNode* ppRootNavigationNode;
  this->get_HomeNavigationNode((Frontpage_xp::NavigationNode**)&ppRootNavigationNode);
  return ppRootNavigationNode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_IsUnderRevisionControl(VARIANT_BOOL* pbIsUnderRCS/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsUnderRevisionControl"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbIsUnderRCS /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebDispT<T>::get_IsUnderRevisionControl(void)
{
  VARIANT_BOOL pbIsUnderRCS;
  this->get_IsUnderRevisionControl((VARIANT_BOOL*)&pbIsUnderRCS);
  return pbIsUnderRCS;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_Properties(Frontpage_xp::Properties** ppProps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Properties**)ppProps /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Properties* __fastcall
WebDispT<T>::get_Properties(void)
{
  Frontpage_xp::Properties* ppProps;
  this->get_Properties((Frontpage_xp::Properties**)&ppProps);
  return ppProps;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_RevisionControlProject(BSTR* pbzRCSProjectName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RevisionControlProject"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzRCSProjectName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebDispT<T>::get_RevisionControlProject(void)
{
  BSTR pbzRCSProjectName;
  this->get_RevisionControlProject((BSTR*)&pbzRCSProjectName);
  return pbzRCSProjectName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::set_RevisionControlProject(BSTR pbzRCSProjectName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RevisionControlProject"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pbzRCSProjectName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_RootFolder(Frontpage_xp::WebFolder** ppRootFolder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RootFolder"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolder**)ppRootFolder /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolder* __fastcall
WebDispT<T>::get_RootFolder(void)
{
  Frontpage_xp::WebFolder* ppRootFolder;
  this->get_RootFolder((Frontpage_xp::WebFolder**)&ppRootFolder);
  return ppRootFolder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                               VARIANT* ppv/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SharedBorders"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (int)BorderIndex /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ppv /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
WebDispT<T>::get_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/)
{
  VARIANT ppv;
  this->get_SharedBorders(BorderIndex, (VARIANT*)&ppv);
  return ppv;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::set_SharedBorders(Frontpage_xp::FpSharedBorders BorderIndex/*[in,def,opt]*/, 
                               VARIANT* ppv/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SharedBorders"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = (int)BorderIndex /*[VT_USERDEFINED:0]*/;
  _args[2] = ppv /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/, 
                                 VARIANT* ppv/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThemeProperties"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int)PropertyIndex /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(ppv /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
WebDispT<T>::get_ThemeProperties(Frontpage_xp::FpThemeProperties PropertyIndex/*[in,def,opt]*/)
{
  VARIANT ppv;
  this->get_ThemeProperties(PropertyIndex, (VARIANT*)&ppv);
  return ppv;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_Themes(Frontpage_xp::Themes** ppThemesInWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Themes"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Themes**)ppThemesInWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Themes* __fastcall
WebDispT<T>::get_Themes(void)
{
  Frontpage_xp::Themes* ppThemesInWeb;
  this->get_Themes((Frontpage_xp::Themes**)&ppThemesInWeb);
  return ppThemesInWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_Title(BSTR* szWebTitle/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(szWebTitle /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebDispT<T>::get_Title(void)
{
  BSTR szWebTitle;
  this->get_Title((BSTR*)&szWebTitle);
  return szWebTitle;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::set_Title(BSTR szWebTitle/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = szWebTitle /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_Url(BSTR* szWebUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Url"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(szWebUrl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebDispT<T>::get_Url(void)
{
  BSTR szWebUrl;
  this->get_Url((BSTR*)&szWebUrl);
  return szWebUrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_WebWindows(Frontpage_xp::WebWindows** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WebWindows"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebWindows**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebWindows* __fastcall
WebDispT<T>::get_WebWindows(void)
{
  Frontpage_xp::WebWindows* ppVal;
  this->get_WebWindows((Frontpage_xp::WebWindows**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::ApplyTheme(BSTR ThemeName/*[in]*/, 
                        Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyTheme"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = ThemeName /*[VT_BSTR:0]*/;
  _args[2] = (int)ThemeProperties /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::CancelRequests()
{
  _TDispID _dispid(*this, OLETEXT("CancelRequests"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::Delete(Frontpage_xp::FpWebDeleteFlags WebDeleteFlags/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = (int)WebDeleteFlags /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::LocateFile(BSTR FileUrl/*[in]*/, Frontpage_xp::WebFile** ppFileObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LocateFile"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = FileUrl /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFile**)ppFileObj /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::WebFile* __fastcall
WebDispT<T>::LocateFile(BSTR FileUrl/*[in]*/)
{
  Frontpage_xp::WebFile* ppFileObj;
  this->LocateFile(FileUrl, (Frontpage_xp::WebFile**)&ppFileObj);
  return ppFileObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::LocateFolder(BSTR FolderUrl/*[in]*/, 
                          Frontpage_xp::WebFolder** ppFolderObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LocateFolder"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = FolderUrl /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolder**)ppFolderObj /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolder* __fastcall
WebDispT<T>::LocateFolder(BSTR FolderUrl/*[in]*/)
{
  Frontpage_xp::WebFolder* ppFolderObj;
  this->LocateFolder(FolderUrl, (Frontpage_xp::WebFolder**)&ppFolderObj);
  return ppFolderObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::LocatePage(BSTR FileUrl/*[in]*/, Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/
                        , Frontpage_xp::PageWindow** ppObj/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LocatePage"), DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = FileUrl /*[VT_BSTR:0]*/;
  _args[2] = (int)ViewMode /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::PageWindow**)ppObj /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::PageWindow* __fastcall
WebDispT<T>::LocatePage(BSTR FileUrl/*[in]*/, Frontpage_xp::FpPageViewMode ViewMode/*[in,def,opt]*/)
{
  Frontpage_xp::PageWindow* ppObj;
  this->LocatePage(FileUrl, ViewMode, (Frontpage_xp::PageWindow**)&ppObj);
  return ppObj;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::Publish(BSTR DestinationUrl/*[in]*/, 
                     Frontpage_xp::FpWebPublishFlags PublishFlags/*[in,def,opt]*/, 
                     BSTR UserName/*[in,def,opt]*/, BSTR Password/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Publish"), DISPID(25));
  TAutoArgs<4> _args;
  _args[1] = DestinationUrl /*[VT_BSTR:0]*/;
  _args[2] = (int)PublishFlags /*[VT_USERDEFINED:0]*/;
  _args[3] = UserName /*[VT_BSTR:0]*/;
  _args[4] = Password /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::RecalcHyperlinks()
{
  _TDispID _dispid(*this, OLETEXT("RecalcHyperlinks"), DISPID(26));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::Refresh(VARIANT_BOOL FetchAll/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = FetchAll /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::ApplyNavigationStructure()
{
  _TDispID _dispid(*this, OLETEXT("ApplyNavigationStructure"), DISPID(28));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_IsHiddenFoldersEnabled(VARIANT_BOOL* pbIsHiddenFoldersEnabled/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsHiddenFoldersEnabled"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbIsHiddenFoldersEnabled /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebDispT<T>::get_IsHiddenFoldersEnabled(void)
{
  VARIANT_BOOL pbIsHiddenFoldersEnabled;
  this->get_IsHiddenFoldersEnabled((VARIANT_BOOL*)&pbIsHiddenFoldersEnabled);
  return pbIsHiddenFoldersEnabled;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::set_IsHiddenFoldersEnabled(VARIANT_BOOL pbIsHiddenFoldersEnabled/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsHiddenFoldersEnabled"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pbIsHiddenFoldersEnabled /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_AllFiles(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllFiles"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFiles**)ppFilesCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFiles* __fastcall
WebDispT<T>::get_AllFiles(void)
{
  Frontpage_xp::WebFiles* ppFilesCollection;
  this->get_AllFiles((Frontpage_xp::WebFiles**)&ppFilesCollection);
  return ppFilesCollection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_AllFolders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllFolders"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolders**)ppFoldersCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolders* __fastcall
WebDispT<T>::get_AllFolders(void)
{
  Frontpage_xp::WebFolders* ppFoldersCollection;
  this->get_AllFolders((Frontpage_xp::WebFolders**)&ppFoldersCollection);
  return ppFoldersCollection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_AllNavigationNodes(Frontpage_xp::NavigationNodes** ppNodes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllNavigationNodes"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::NavigationNodes**)ppNodes /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::NavigationNodes* __fastcall
WebDispT<T>::get_AllNavigationNodes(void)
{
  Frontpage_xp::NavigationNodes* ppNodes;
  this->get_AllNavigationNodes((Frontpage_xp::NavigationNodes**)&ppNodes);
  return ppNodes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::ApplyTemplate(BSTR TemplateDir/*[in]*/, VARIANT_BOOL fOverWrite/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyTemplate"), DISPID(33));
  TAutoArgs<2> _args;
  _args[1] = TemplateDir /*[VT_BSTR:0]*/;
  _args[2] = fOverWrite /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_Lists(Frontpage_xp::_Lists** ppLists/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Lists"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Lists**)ppLists /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Lists* __fastcall
WebDispT<T>::get_Lists(void)
{
  Frontpage_xp::_Lists* ppLists;
  this->get_Lists((Frontpage_xp::_Lists**)&ppLists);
  return ppLists;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
WebDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WebDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOMWebWindow
// Interface: WebWindow
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_ActivePageWindow(Frontpage_xp::PageWindow** ppVal/*[out,retval]*/)
{
  return (*this)->get_ActivePageWindow(ppVal);
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_ActivePageWindow(Frontpage_xp::PageWindowPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_ActivePageWindow(PageWindow**)ppVal);
}

template <class T> Frontpage_xp::PageWindowPtr __fastcall
TCOMWebWindowT<T>::get_ActivePageWindow(void)
{
  Frontpage_xp::PageWindow* ppVal;
  OLECHECK(this->get_ActivePageWindow((Frontpage_xp::PageWindow**)&ppVal));
  return (Frontpage_xp::PageWindowPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_Caption(BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Caption(pVal);
}

template <class T> BSTR __fastcall
TCOMWebWindowT<T>::get_Caption(void)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Caption((BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  return (*this)->get_Web(ppVal);
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_Web(Frontpage_xp::WebPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_Web(Web**)ppVal);
}

template <class T> Frontpage_xp::WebPtr __fastcall
TCOMWebWindowT<T>::get_Web(void)
{
  Frontpage_xp::Web* ppVal;
  OLECHECK(this->get_Web((Frontpage_xp::Web**)&ppVal));
  return (Frontpage_xp::WebPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_PageWindows(Frontpage_xp::PageWindows** ppVal/*[out,retval]*/)
{
  return (*this)->get_PageWindows(ppVal);
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_PageWindows(Frontpage_xp::PageWindowsPtr* ppVal/*[out,retval]*/)
{
  return (*this)->get_PageWindows(PageWindows**)ppVal);
}

template <class T> Frontpage_xp::PageWindowsPtr __fastcall
TCOMWebWindowT<T>::get_PageWindows(void)
{
  Frontpage_xp::PageWindows* ppVal;
  OLECHECK(this->get_PageWindows((Frontpage_xp::PageWindows**)&ppVal));
  return (Frontpage_xp::PageWindowsPtr)ppVal;
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_ViewMode(Frontpage_xp::FpWebViewMode* pviewMode/*[out,retval]*/)
{
  return (*this)->get_ViewMode(pviewMode);
}

template <class T> Frontpage_xp::FpWebViewMode __fastcall
TCOMWebWindowT<T>::get_ViewMode(void)
{
  Frontpage_xp::FpWebViewMode pviewMode;
  OLECHECK(this->get_ViewMode((Frontpage_xp::FpWebViewMode*)&pviewMode));
  return pviewMode;
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::set_ViewMode(Frontpage_xp::FpWebViewMode pviewMode/*[in]*/)
{
  return (*this)->set_ViewMode(pviewMode);
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_Visible(VARIANT_BOOL* pfIsWindowVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(pfIsWindowVisible);
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_Visible(TOLEBOOL* pfIsWindowVisible/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)pfIsWindowVisible);
}

template <class T> TOLEBOOL __fastcall
TCOMWebWindowT<T>::get_Visible(void)
{
  VARIANT_BOOL pfIsWindowVisible;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&pfIsWindowVisible));
  return (TOLEBOOL)pfIsWindowVisible;
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::set_Visible(VARIANT_BOOL pfIsWindowVisible/*[in]*/)
{
  return (*this)->set_Visible(pfIsWindowVisible);
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::set_Visible(TOLEBOOL pfIsWindowVisible/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)pfIsWindowVisible);
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_SelectedFiles(LPSAFEARRAY* psa/*[out,retval]*/)
{
  return (*this)->get_SelectedFiles(psa);
}

template <class T> LPSAFEARRAY __fastcall
TCOMWebWindowT<T>::get_SelectedFiles(void)
{
  LPSAFEARRAY psa;
  OLECHECK(this->get_SelectedFiles((LPSAFEARRAY*)&psa));
  return psa;
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_SelectedFolders(LPSAFEARRAY* psa/*[out,retval]*/)
{
  return (*this)->get_SelectedFolders(psa);
}

template <class T> LPSAFEARRAY __fastcall
TCOMWebWindowT<T>::get_SelectedFolders(void)
{
  LPSAFEARRAY psa;
  OLECHECK(this->get_SelectedFolders((LPSAFEARRAY*)&psa));
  return psa;
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::Activate(void)
{
  return (*this)->Activate();
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::Close(void)
{
  return (*this)->Close();
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_ViewModeEx(Frontpage_xp::FpWebViewModeEx* pviewModeEx/*[out,retval]*/)
{
  return (*this)->get_ViewModeEx(pviewModeEx);
}

template <class T> Frontpage_xp::FpWebViewModeEx __fastcall
TCOMWebWindowT<T>::get_ViewModeEx(void)
{
  Frontpage_xp::FpWebViewModeEx pviewModeEx;
  OLECHECK(this->get_ViewModeEx((Frontpage_xp::FpWebViewModeEx*)&pviewModeEx));
  return pviewModeEx;
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::set_ViewModeEx(Frontpage_xp::FpWebViewModeEx pviewModeEx/*[in]*/)
{
  return (*this)->set_ViewModeEx(pviewModeEx);
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::VerifyAllLinks(void)
{
  return (*this)->VerifyAllLinks();
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::SaveReport(Frontpage_xp::FpWebViewModeEx reportviewModeEx/*[in]*/, 
                              BSTR DestinationUrl/*[in]*/, BSTR Title/*[in]*/, 
                              VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  return (*this)->SaveReport(reportviewModeEx, DestinationUrl, Title, ForceOverwrite);
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::get_SubViewMode(Frontpage_xp::FpWebSubView* pSubView/*[out,retval]*/)
{
  return (*this)->get_SubViewMode(pSubView);
}

template <class T> Frontpage_xp::FpWebSubView __fastcall
TCOMWebWindowT<T>::get_SubViewMode(void)
{
  Frontpage_xp::FpWebSubView pSubView;
  OLECHECK(this->get_SubViewMode((Frontpage_xp::FpWebSubView*)&pSubView));
  return pSubView;
}

template <class T> HRESULT __fastcall
TCOMWebWindowT<T>::set_SubViewMode(Frontpage_xp::FpWebSubView pSubView/*[in]*/)
{
  return (*this)->set_SubViewMode(pSubView);
}

// *********************************************************************//
// DispIntf:  WebWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6B735741-FA41-11D1-83DC-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_ActivePageWindow(Frontpage_xp::PageWindow** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActivePageWindow"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::PageWindow**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::PageWindow* __fastcall
WebWindowDispT<T>::get_ActivePageWindow(void)
{
  Frontpage_xp::PageWindow* ppVal;
  this->get_ActivePageWindow((Frontpage_xp::PageWindow**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_Caption(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Caption"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebWindowDispT<T>::get_Caption(void)
{
  BSTR pVal;
  this->get_Caption((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
WebWindowDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* ppVal;
  this->get_Web((Frontpage_xp::Web**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_PageWindows(Frontpage_xp::PageWindows** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageWindows"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::PageWindows**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::PageWindows* __fastcall
WebWindowDispT<T>::get_PageWindows(void)
{
  Frontpage_xp::PageWindows* ppVal;
  this->get_PageWindows((Frontpage_xp::PageWindows**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_ViewMode(Frontpage_xp::FpWebViewMode* pviewMode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewMode"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pviewMode /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpWebViewMode __fastcall
WebWindowDispT<T>::get_ViewMode(void)
{
  Frontpage_xp::FpWebViewMode pviewMode;
  this->get_ViewMode((Frontpage_xp::FpWebViewMode*)&pviewMode);
  return pviewMode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::set_ViewMode(Frontpage_xp::FpWebViewMode pviewMode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewMode"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (int)pviewMode /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_Visible(VARIANT_BOOL* pfIsWindowVisible/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsWindowVisible /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebWindowDispT<T>::get_Visible(void)
{
  VARIANT_BOOL pfIsWindowVisible;
  this->get_Visible((VARIANT_BOOL*)&pfIsWindowVisible);
  return pfIsWindowVisible;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::set_Visible(VARIANT_BOOL pfIsWindowVisible/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pfIsWindowVisible /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_SelectedFiles(LPSAFEARRAY* psa/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedFiles"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psa /*[VT_SAFEARRAY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
WebWindowDispT<T>::get_SelectedFiles(void)
{
  LPSAFEARRAY psa;
  this->get_SelectedFiles((LPSAFEARRAY*)&psa);
  return psa;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_SelectedFolders(LPSAFEARRAY* psa/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectedFolders"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(psa /*[VT_SAFEARRAY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
WebWindowDispT<T>::get_SelectedFolders(void)
{
  LPSAFEARRAY psa;
  this->get_SelectedFolders((LPSAFEARRAY*)&psa);
  return psa;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::Activate()
{
  _TDispID _dispid(*this, OLETEXT("Activate"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_ViewModeEx(Frontpage_xp::FpWebViewModeEx* pviewModeEx/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewModeEx"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pviewModeEx /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpWebViewModeEx __fastcall
WebWindowDispT<T>::get_ViewModeEx(void)
{
  Frontpage_xp::FpWebViewModeEx pviewModeEx;
  this->get_ViewModeEx((Frontpage_xp::FpWebViewModeEx*)&pviewModeEx);
  return pviewModeEx;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::set_ViewModeEx(Frontpage_xp::FpWebViewModeEx pviewModeEx/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewModeEx"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (int)pviewModeEx /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::VerifyAllLinks()
{
  _TDispID _dispid(*this, OLETEXT("VerifyAllLinks"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::SaveReport(Frontpage_xp::FpWebViewModeEx reportviewModeEx/*[in]*/, 
                              BSTR DestinationUrl/*[in]*/, BSTR Title/*[in]*/, 
                              VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveReport"), DISPID(15));
  TAutoArgs<4> _args;
  _args[1] = (int)reportviewModeEx /*[VT_USERDEFINED:0]*/;
  _args[2] = DestinationUrl /*[VT_BSTR:0]*/;
  _args[3] = Title /*[VT_BSTR:0]*/;
  _args[4] = ForceOverwrite /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_SubViewMode(Frontpage_xp::FpWebSubView* pSubView/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubViewMode"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pSubView /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpWebSubView __fastcall
WebWindowDispT<T>::get_SubViewMode(void)
{
  Frontpage_xp::FpWebSubView pSubView;
  this->get_SubViewMode((Frontpage_xp::FpWebSubView*)&pSubView);
  return pSubView;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::set_SubViewMode(Frontpage_xp::FpWebSubView pSubView/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SubViewMode"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (int)pSubView /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
WebWindowDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WebWindowDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  PageWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4042-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowsDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PageWindowsDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowsDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PageWindowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowsDispT<T>::get_Item(VARIANT* Index/*[in]*/, 
                              Frontpage_xp::PageWindow** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::PageWindow**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::PageWindow* __fastcall
PageWindowsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Frontpage_xp::PageWindow* ppVal;
  this->get_Item(Index, (Frontpage_xp::PageWindow**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowsDispT<T>::Add(BSTR FileUrl/*[in,def,opt]*/, 
                         Frontpage_xp::PageWindow** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FileUrl /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::PageWindow**)ppVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::PageWindow* __fastcall
PageWindowsDispT<T>::Add(BSTR FileUrl/*[in,def,opt]*/)
{
  Frontpage_xp::PageWindow* ppVal;
  this->Add(FileUrl, (Frontpage_xp::PageWindow**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowsDispT<T>::Close(VARIANT* Index/*[in,opt]*/, VARIANT_BOOL ForceSave/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = ForceSave /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowsDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
PageWindowsDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
PageWindowsDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
PageWindowsDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  WebFolder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB404D-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_Files(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Files"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFiles**)ppFilesCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFiles* __fastcall
WebFolderDispT<T>::get_Files(void)
{
  Frontpage_xp::WebFiles* ppFilesCollection;
  this->get_Files((Frontpage_xp::WebFiles**)&ppFilesCollection);
  return ppFilesCollection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_Folders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Folders"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolders**)ppFoldersCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolders* __fastcall
WebFolderDispT<T>::get_Folders(void)
{
  Frontpage_xp::WebFolders* ppFoldersCollection;
  this->get_Folders((Frontpage_xp::WebFolders**)&ppFoldersCollection);
  return ppFoldersCollection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_IsExecutable(VARIANT_BOOL* pfIsExecutable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsExecutable"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsExecutable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebFolderDispT<T>::get_IsExecutable(void)
{
  VARIANT_BOOL pfIsExecutable;
  this->get_IsExecutable((VARIANT_BOOL*)&pfIsExecutable);
  return pfIsExecutable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::set_IsExecutable(VARIANT_BOOL pfIsExecutable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsExecutable"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pfIsExecutable /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_IsReadable(VARIANT_BOOL* pfIsReadable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsReadable"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsReadable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebFolderDispT<T>::get_IsReadable(void)
{
  VARIANT_BOOL pfIsReadable;
  this->get_IsReadable((VARIANT_BOOL*)&pfIsReadable);
  return pfIsReadable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::set_IsReadable(VARIANT_BOOL pfIsReadable/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsReadable"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pfIsReadable /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_IsRoot(VARIANT_BOOL* pfIsRootFolder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsRoot"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsRootFolder /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebFolderDispT<T>::get_IsRoot(void)
{
  VARIANT_BOOL pfIsRootFolder;
  this->get_IsRoot((VARIANT_BOOL*)&pfIsRootFolder);
  return pfIsRootFolder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_IsWeb(VARIANT_BOOL* pvfIsSubweb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsWeb"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvfIsSubweb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebFolderDispT<T>::get_IsWeb(void)
{
  VARIANT_BOOL pvfIsSubweb;
  this->get_IsWeb((VARIANT_BOOL*)&pvfIsSubweb);
  return pvfIsSubweb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_IsWritable(VARIANT_BOOL* pfIsWritable/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsWritable"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pfIsWritable /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
WebFolderDispT<T>::get_IsWritable(void)
{
  VARIANT_BOOL pfIsWritable;
  this->get_IsWritable((VARIANT_BOOL*)&pfIsWritable);
  return pfIsWritable;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_Name(BSTR* pbzFolderName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzFolderName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebFolderDispT<T>::get_Name(void)
{
  BSTR pbzFolderName;
  this->get_Name((BSTR*)&pbzFolderName);
  return pbzFolderName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_Properties(Frontpage_xp::Properties** ppProps/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Properties**)ppProps /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Properties* __fastcall
WebFolderDispT<T>::get_Properties(void)
{
  Frontpage_xp::Properties* ppProps;
  this->get_Properties((Frontpage_xp::Properties**)&ppProps);
  return ppProps;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_Url(BSTR* pbzFolderUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Url"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbzFolderUrl /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
WebFolderDispT<T>::get_Url(void)
{
  BSTR pbzFolderUrl;
  this->get_Url((BSTR*)&pbzFolderUrl);
  return pbzFolderUrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_Web(Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
WebFolderDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* ppVal;
  this->get_Web((Frontpage_xp::Web**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::Copy(BSTR DestinationUrl/*[in]*/, VARIANT_BOOL Unused/*[in,def,opt]*/, 
                        VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(14));
  TAutoArgs<3> _args;
  _args[1] = DestinationUrl /*[VT_BSTR:0]*/;
  _args[2] = Unused /*[VT_BOOL:0]*/;
  _args[3] = ForceOverwrite /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::MakeWeb(BSTR UserName/*[in,def,opt]*/, BSTR Password/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("MakeWeb"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = UserName /*[VT_BSTR:0]*/;
  _args[2] = Password /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::RemoveWeb(BSTR UserName/*[in,def,opt]*/, BSTR Password/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveWeb"), DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = UserName /*[VT_BSTR:0]*/;
  _args[2] = Password /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::Move(BSTR DestinationUrl/*[in]*/, VARIANT_BOOL UpdateLinks/*[in,def,opt]*/, 
                        VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(18));
  TAutoArgs<3> _args;
  _args[1] = DestinationUrl /*[VT_BSTR:0]*/;
  _args[2] = UpdateLinks /*[VT_BOOL:0]*/;
  _args[3] = ForceOverwrite /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_AllFiles(Frontpage_xp::WebFiles** ppFilesCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllFiles"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFiles**)ppFilesCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFiles* __fastcall
WebFolderDispT<T>::get_AllFiles(void)
{
  Frontpage_xp::WebFiles* ppFilesCollection;
  this->get_AllFiles((Frontpage_xp::WebFiles**)&ppFilesCollection);
  return ppFilesCollection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_AllFolders(Frontpage_xp::WebFolders** ppFoldersCollection/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllFolders"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolders**)ppFoldersCollection /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolders* __fastcall
WebFolderDispT<T>::get_AllFolders(void)
{
  Frontpage_xp::WebFolders* ppFoldersCollection;
  this->get_AllFolders((Frontpage_xp::WebFolders**)&ppFoldersCollection);
  return ppFoldersCollection;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_List(Frontpage_xp::_List** ppList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("List"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_List**)ppList /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_List* __fastcall
WebFolderDispT<T>::get_List(void)
{
  Frontpage_xp::_List* ppList;
  this->get_List((Frontpage_xp::_List**)&ppList);
  return ppList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
WebFolderDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFolderDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WebFolderDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  WebFiles
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB404F-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFilesDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
WebFilesDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFilesDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
WebFilesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFilesDispT<T>::get_Item(VARIANT* Index/*[in]*/, Frontpage_xp::WebFile** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFile**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFile* __fastcall
WebFilesDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Frontpage_xp::WebFile* ppVal;
  this->get_Item(Index, (Frontpage_xp::WebFile**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFilesDispT<T>::Add(BSTR FileUrl/*[in]*/, VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/, 
                      Frontpage_xp::WebFile** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = FileUrl /*[VT_BSTR:0]*/;
  _args[2] = ForceOverwrite /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFile**)ppVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::WebFile* __fastcall
WebFilesDispT<T>::Add(BSTR FileUrl/*[in]*/, VARIANT_BOOL ForceOverwrite/*[in,def,opt]*/)
{
  Frontpage_xp::WebFile* ppVal;
  this->Add(FileUrl, ForceOverwrite, (Frontpage_xp::WebFile**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFilesDispT<T>::ApplyTheme(BSTR ThemeName/*[in]*/, 
                             Frontpage_xp::FpThemeProperties ThemeProperties/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("ApplyTheme"), DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = ThemeName /*[VT_BSTR:0]*/;
  _args[2] = (int)ThemeProperties /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFilesDispT<T>::Delete(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFilesDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
WebFilesDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFilesDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WebFilesDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  WebFolders
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4015-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFoldersDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
WebFoldersDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFoldersDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
WebFoldersDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFoldersDispT<T>::get_Item(VARIANT* Index/*[in]*/, Frontpage_xp::WebFolder** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolder**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolder* __fastcall
WebFoldersDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Frontpage_xp::WebFolder* ppVal;
  this->get_Item(Index, (Frontpage_xp::WebFolder**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFoldersDispT<T>::Add(BSTR FolderUrl/*[in]*/, Frontpage_xp::WebFolder** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = FolderUrl /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolder**)ppVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolder* __fastcall
WebFoldersDispT<T>::Add(BSTR FolderUrl/*[in]*/)
{
  Frontpage_xp::WebFolder* ppVal;
  this->Add(FolderUrl, (Frontpage_xp::WebFolder**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFoldersDispT<T>::Delete(VARIANT* Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFoldersDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
WebFoldersDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebFoldersDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WebFoldersDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_List
// Interface: _List
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  return (*this)->get_Name(pbstrName);
}

template <class T> BSTR __fastcall
TCOM_ListT<T>::get_Name(void)
{
  BSTR pbstrName = 0;
  OLECHECK(this->get_Name((BSTR*)&pbstrName));
  return pbstrName;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  return (*this)->set_Name(pbstrName);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  return (*this)->get_Description(pbstrDescription);
}

template <class T> BSTR __fastcall
TCOM_ListT<T>::get_Description(void)
{
  BSTR pbstrDescription = 0;
  OLECHECK(this->get_Description((BSTR*)&pbstrDescription));
  return pbstrDescription;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  return (*this)->set_Description(pbstrDescription);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/)
{
  return (*this)->get_Fields(ppListFields);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_Fields(Frontpage_xp::_ListFieldsPtr* ppListFields/*[out,retval]*/)
{
  return (*this)->get_Fields(_ListFields**)ppListFields);
}

template <class T> Frontpage_xp::_ListFieldsPtr __fastcall
TCOM_ListT<T>::get_Fields(void)
{
  Frontpage_xp::_ListFields* ppListFields;
  OLECHECK(this->get_Fields((Frontpage_xp::_ListFields**)&ppListFields));
  return (Frontpage_xp::_ListFieldsPtr)ppListFields;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/)
{
  return (*this)->get_Folder(ppWebFolder);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_Folder(Frontpage_xp::WebFolderPtr* ppWebFolder/*[out,retval]*/)
{
  return (*this)->get_Folder(WebFolder**)ppWebFolder);
}

template <class T> Frontpage_xp::WebFolderPtr __fastcall
TCOM_ListT<T>::get_Folder(void)
{
  Frontpage_xp::WebFolder* ppWebFolder;
  OLECHECK(this->get_Folder((Frontpage_xp::WebFolder**)&ppWebFolder));
  return (Frontpage_xp::WebFolderPtr)ppWebFolder;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/)
{
  return (*this)->get_DefaultViewPage(pbstrViewPage);
}

template <class T> BSTR __fastcall
TCOM_ListT<T>::get_DefaultViewPage(void)
{
  BSTR pbstrViewPage = 0;
  OLECHECK(this->get_DefaultViewPage((BSTR*)&pbstrViewPage));
  return pbstrViewPage;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/)
{
  return (*this)->set_DefaultViewPage(pbstrViewPage);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/)
{
  return (*this)->get_DisplayForm(pbstrDisplayForm);
}

template <class T> BSTR __fastcall
TCOM_ListT<T>::get_DisplayForm(void)
{
  BSTR pbstrDisplayForm = 0;
  OLECHECK(this->get_DisplayForm((BSTR*)&pbstrDisplayForm));
  return pbstrDisplayForm;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/)
{
  return (*this)->set_DisplayForm(pbstrDisplayForm);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/)
{
  return (*this)->get_EditForm(pbstrEditForm);
}

template <class T> BSTR __fastcall
TCOM_ListT<T>::get_EditForm(void)
{
  BSTR pbstrEditForm = 0;
  OLECHECK(this->get_EditForm((BSTR*)&pbstrEditForm));
  return pbstrEditForm;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::set_EditForm(BSTR pbstrEditForm/*[in]*/)
{
  return (*this)->set_EditForm(pbstrEditForm);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/)
{
  return (*this)->get_NewForm(pbstrNewForm);
}

template <class T> BSTR __fastcall
TCOM_ListT<T>::get_NewForm(void)
{
  BSTR pbstrNewForm = 0;
  OLECHECK(this->get_NewForm((BSTR*)&pbstrNewForm));
  return pbstrNewForm;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::set_NewForm(BSTR pbstrNewForm/*[in]*/)
{
  return (*this)->set_NewForm(pbstrNewForm);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/)
{
  return (*this)->get_DesignSecurity(peDesignSecurity);
}

template <class T> Frontpage_xp::FpListDesignSecurity __fastcall
TCOM_ListT<T>::get_DesignSecurity(void)
{
  Frontpage_xp::FpListDesignSecurity peDesignSecurity;
  OLECHECK(this->get_DesignSecurity((Frontpage_xp::FpListDesignSecurity*)&peDesignSecurity));
  return peDesignSecurity;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/)
{
  return (*this)->set_DesignSecurity(peDesignSecurity);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/)
{
  return (*this)->get_Type(peListType);
}

template <class T> Frontpage_xp::FpListType __fastcall
TCOM_ListT<T>::get_Type(void)
{
  Frontpage_xp::FpListType peListType;
  OLECHECK(this->get_Type((Frontpage_xp::FpListType*)&peListType));
  return peListType;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  return (*this)->get_Web(pWeb);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_Web(Frontpage_xp::WebPtr* pWeb/*[out,retval]*/)
{
  return (*this)->get_Web(Web**)pWeb);
}

template <class T> Frontpage_xp::WebPtr __fastcall
TCOM_ListT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  OLECHECK(this->get_Web((Frontpage_xp::Web**)&pWeb));
  return (Frontpage_xp::WebPtr)pWeb;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::ApplyChanges(void)
{
  return (*this)->ApplyChanges();
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  return (*this)->get_ReadOnly(pReadOnly);
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_ReadOnly(TOLEBOOL* pReadOnly/*[out,retval]*/)
{
  return (*this)->get_ReadOnly(VARIANT_BOOL*)pReadOnly);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  OLECHECK(this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly));
  return (TOLEBOOL)pReadOnly;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/)
{
  return (*this)->get_ViewPages(ppsaViewPages);
}

template <class T> LPSAFEARRAY __fastcall
TCOM_ListT<T>::get_ViewPages(void)
{
  LPSAFEARRAY ppsaViewPages;
  OLECHECK(this->get_ViewPages((LPSAFEARRAY*)&ppsaViewPages));
  return ppsaViewPages;
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::Reserved1(void)
{
  return (*this)->Reserved1();
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::Reserved2(void)
{
  return (*this)->Reserved2();
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::Reserved3(void)
{
  return (*this)->Reserved3();
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::Reserved4(void)
{
  return (*this)->Reserved4();
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::Reserved5(void)
{
  return (*this)->Reserved5();
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::Reserved6(void)
{
  return (*this)->Reserved6();
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::Reserved7(void)
{
  return (*this)->Reserved7();
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::Reserved8(void)
{
  return (*this)->Reserved8();
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::Reserved9(void)
{
  return (*this)->Reserved9();
}

template <class T> HRESULT __fastcall
TCOM_ListT<T>::Reserved10(void)
{
  return (*this)->Reserved10();
}

// *********************************************************************//
// DispIntf:  _List
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B474-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_ListFields**)ppListFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_ListFields* __fastcall
_ListDispT<T>::get_Fields(void)
{
  Frontpage_xp::_ListFields* ppListFields;
  this->get_Fields((Frontpage_xp::_ListFields**)&ppListFields);
  return ppListFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Folder"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolder**)ppWebFolder /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolder* __fastcall
_ListDispT<T>::get_Folder(void)
{
  Frontpage_xp::WebFolder* ppWebFolder;
  this->get_Folder((Frontpage_xp::WebFolder**)&ppWebFolder);
  return ppWebFolder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultViewPage"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrViewPage /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListDispT<T>::get_DefaultViewPage(void)
{
  BSTR pbstrViewPage;
  this->get_DefaultViewPage((BSTR*)&pbstrViewPage);
  return pbstrViewPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultViewPage"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbstrViewPage /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForm"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDisplayForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListDispT<T>::get_DisplayForm(void)
{
  BSTR pbstrDisplayForm;
  this->get_DisplayForm((BSTR*)&pbstrDisplayForm);
  return pbstrDisplayForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForm"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pbstrDisplayForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditForm"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrEditForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListDispT<T>::get_EditForm(void)
{
  BSTR pbstrEditForm;
  this->get_EditForm((BSTR*)&pbstrEditForm);
  return pbstrEditForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::set_EditForm(BSTR pbstrEditForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditForm"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pbstrEditForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewForm"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrNewForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListDispT<T>::get_NewForm(void)
{
  BSTR pbstrNewForm;
  this->get_NewForm((BSTR*)&pbstrNewForm);
  return pbstrNewForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::set_NewForm(BSTR pbstrNewForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewForm"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pbstrNewForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignSecurity"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peDesignSecurity /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListDesignSecurity __fastcall
_ListDispT<T>::get_DesignSecurity(void)
{
  Frontpage_xp::FpListDesignSecurity peDesignSecurity;
  this->get_DesignSecurity((Frontpage_xp::FpListDesignSecurity*)&peDesignSecurity);
  return peDesignSecurity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignSecurity"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)peDesignSecurity /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peListType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListType __fastcall
_ListDispT<T>::get_Type(void)
{
  Frontpage_xp::FpListType peListType;
  this->get_Type((Frontpage_xp::FpListType*)&peListType);
  return peListType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::ApplyChanges()
{
  _TDispID _dispid(*this, OLETEXT("ApplyChanges"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewPages"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppsaViewPages /*[VT_SAFEARRAY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
_ListDispT<T>::get_ViewPages(void)
{
  LPSAFEARRAY ppsaViewPages;
  this->get_ViewPages((LPSAFEARRAY*)&ppsaViewPages);
  return ppsaViewPages;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(21));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(23));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(25));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFields
// Interface: _ListFields
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldsT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  return (*this)->get_Count(plCount);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldsT<T>::get_Count(void)
{
  VARIANT plCount;
  OLECHECK(this->get_Count((VARIANT*)&plCount));
  return plCount;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldsT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppVal);
}

template <class T> LPUNKNOWN __fastcall
TCOM_ListFieldsT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
  return ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldsT<T>::get_Item(VARIANT* Index/*[in]*/, LPDISPATCH* ppVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppVal);
}

template <class T> LPDISPATCH __fastcall
TCOM_ListFieldsT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  LPDISPATCH ppVal;
  OLECHECK(this->get_Item(, (LPDISPATCH*)&ppVal));
  return ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldsT<T>::Add(BSTR Name/*[in]*/, BSTR Description/*[in,def,opt]*/, 
                         Frontpage_xp::FpFieldType FieldType/*[in,def,opt]*/, 
                         VARIANT_BOOL Required/*[in,def,opt]*/, 
                         Frontpage_xp::_ListField* pLookupField/*[in,def,opt]*/, 
                         VARIANT* DefaultValue/*[in,opt]*/, 
                         Frontpage_xp::_ListField** ppVal/*[out,retval]*/)
{
  return (*this)->Add(Name, Description, FieldType, Required, pLookupField, DefaultValue, ppVal);
}

template <class T> Frontpage_xp::_ListField* __fastcall
TCOM_ListFieldsT<T>::Add(BSTR Name/*[in]*/, BSTR Description/*[in,def,opt]*/, 
                         Frontpage_xp::FpFieldType FieldType/*[in,def,opt]*/, 
                         VARIANT_BOOL Required/*[in,def,opt]*/, 
                         Frontpage_xp::_ListField* pLookupField/*[in,def,opt]*/, 
                         VARIANT* DefaultValue/*[in,opt]*/)
{
  Frontpage_xp::_ListField* ppVal;
  OLECHECK(this->Add(, (Frontpage_xp::_ListField**)&ppVal));
  return ppVal;
}

// *********************************************************************//
// DispIntf:  _ListFields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B475-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldsDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldsDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldsDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_ListFieldsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldsDispT<T>::get_Item(VARIANT* Index/*[in]*/, LPDISPATCH* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(ppVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  LPDISPATCH ppVal;
  this->get_Item(Index, (LPDISPATCH*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldsDispT<T>::Add(BSTR Name/*[in]*/, BSTR Description/*[in,def,opt]*/, 
                         Frontpage_xp::FpFieldType FieldType/*[in,def,opt]*/, 
                         VARIANT_BOOL Required/*[in,def,opt]*/, 
                         Frontpage_xp::_ListField* pLookupField/*[in,def,opt]*/, 
                         VARIANT* DefaultValue/*[in,opt]*/, 
                         Frontpage_xp::_ListField** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(4));
  TAutoArgs<6> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Description /*[VT_BSTR:0]*/;
  _args[3] = (int)FieldType /*[VT_USERDEFINED:0]*/;
  _args[4] = Required /*[VT_BOOL:0]*/;
  _args[5] = (LPDISPATCH)(Frontpage_xp::_ListField*)pLookupField /*[VT_USERDEFINED:1]*/;
  _args[6] = DefaultValue /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_ListField**)ppVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::_ListField* __fastcall
_ListFieldsDispT<T>::Add(BSTR Name/*[in]*/, BSTR Description/*[in,def,opt]*/, 
                         Frontpage_xp::FpFieldType FieldType/*[in,def,opt]*/, 
                         VARIANT_BOOL Required/*[in,def,opt]*/, 
                         Frontpage_xp::_ListField* pLookupField/*[in,def,opt]*/, 
                         VARIANT* DefaultValue/*[in,opt]*/)
{
  Frontpage_xp::_ListField* ppVal;
  this->Add(Name, Description, FieldType, Required, pLookupField, DefaultValue, (Frontpage_xp::_ListField**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldsDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldsDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldsDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldsDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListField
// Interface: _ListField
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  return (*this)->get_Name(pbstrName);
}

template <class T> BSTR __fastcall
TCOM_ListFieldT<T>::get_Name(void)
{
  BSTR pbstrName = 0;
  OLECHECK(this->get_Name((BSTR*)&pbstrName));
  return pbstrName;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  return (*this)->set_Name(pbstrName);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  return (*this)->get_Description(pbstrDescription);
}

template <class T> BSTR __fastcall
TCOM_ListFieldT<T>::get_Description(void)
{
  BSTR pbstrDescription = 0;
  OLECHECK(this->get_Description((BSTR*)&pbstrDescription));
  return pbstrDescription;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  return (*this)->set_Description(pbstrDescription);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  return (*this)->get_Type(pType);
}

template <class T> Frontpage_xp::FpFieldType __fastcall
TCOM_ListFieldT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  OLECHECK(this->get_Type((Frontpage_xp::FpFieldType*)&pType));
  return pType;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  return (*this)->get_ReadOnly(pReadOnly);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::get_ReadOnly(TOLEBOOL* pReadOnly/*[out,retval]*/)
{
  return (*this)->get_ReadOnly(VARIANT_BOOL*)pReadOnly);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListFieldT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  OLECHECK(this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly));
  return (TOLEBOOL)pReadOnly;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  return (*this)->get_Web(pWeb);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::get_Web(Frontpage_xp::WebPtr* pWeb/*[out,retval]*/)
{
  return (*this)->get_Web(Web**)pWeb);
}

template <class T> Frontpage_xp::WebPtr __fastcall
TCOM_ListFieldT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  OLECHECK(this->get_Web((Frontpage_xp::Web**)&pWeb));
  return (Frontpage_xp::WebPtr)pWeb;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Delete(void)
{
  return (*this)->Delete();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Reserved1(void)
{
  return (*this)->Reserved1();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Reserved2(void)
{
  return (*this)->Reserved2();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Reserved3(void)
{
  return (*this)->Reserved3();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Reserved4(void)
{
  return (*this)->Reserved4();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Reserved5(void)
{
  return (*this)->Reserved5();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Reserved6(void)
{
  return (*this)->Reserved6();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Reserved7(void)
{
  return (*this)->Reserved7();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Reserved8(void)
{
  return (*this)->Reserved8();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Reserved9(void)
{
  return (*this)->Reserved9();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldT<T>::Reserved10(void)
{
  return (*this)->Reserved10();
}

// *********************************************************************//
// DispIntf:  _ListField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B476-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  Themes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4046-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemesDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
ThemesDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemesDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
ThemesDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemesDispT<T>::get_Item(VARIANT* Index/*[in]*/, Frontpage_xp::Theme** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Theme**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Theme* __fastcall
ThemesDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Frontpage_xp::Theme* ppVal;
  this->get_Item(Index, (Frontpage_xp::Theme**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemesDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
ThemesDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemesDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ThemesDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  Theme
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48FB4044-D3D0-11D1-83D7-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemeDispT<T>::get_Format(BSTR* pszThemeFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Format"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszThemeFormat /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ThemeDispT<T>::get_Format(void)
{
  BSTR pszThemeFormat;
  this->get_Format((BSTR*)&pszThemeFormat);
  return pszThemeFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemeDispT<T>::get_Name(BSTR* pszDirName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszDirName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ThemeDispT<T>::get_Name(void)
{
  BSTR pszDirName;
  this->get_Name((BSTR*)&pszDirName);
  return pszDirName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemeDispT<T>::get_Label(BSTR* pszLongThemeName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Label"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszLongThemeName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ThemeDispT<T>::get_Label(void)
{
  BSTR pszLongThemeName;
  this->get_Label((BSTR*)&pszLongThemeName);
  return pszLongThemeName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemeDispT<T>::get_Version(BSTR* pszThemeVersion/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pszThemeVersion /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ThemeDispT<T>::get_Version(void)
{
  BSTR pszThemeVersion;
  this->get_Version((BSTR*)&pszThemeVersion);
  return pszThemeVersion;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemeDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
ThemeDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
ThemeDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
ThemeDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  WebWindows
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6B735742-FA41-11D1-83DC-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowsDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
WebWindowsDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowsDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
WebWindowsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowsDispT<T>::get_Item(VARIANT* Index/*[in]*/, Frontpage_xp::WebWindow** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebWindow**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebWindow* __fastcall
WebWindowsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Frontpage_xp::WebWindow* ppVal;
  this->get_Item(Index, (Frontpage_xp::WebWindow**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowsDispT<T>::Close(VARIANT* Index/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowsDispT<T>::Add(Frontpage_xp::FpWebViewModeEx ViewModeEx/*[in]*/, 
                        Frontpage_xp::WebWindow** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (int)ViewModeEx /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebWindow**)ppVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::WebWindow* __fastcall
WebWindowsDispT<T>::Add(Frontpage_xp::FpWebViewModeEx ViewModeEx/*[in]*/)
{
  Frontpage_xp::WebWindow* ppVal;
  this->Add(ViewModeEx, (Frontpage_xp::WebWindow**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowsDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
WebWindowsDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebWindowsDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WebWindowsDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_Lists
// Interface: _Lists
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListsT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  return (*this)->get_Count(plCount);
}

template <class T> VARIANT __fastcall
TCOM_ListsT<T>::get_Count(void)
{
  VARIANT plCount;
  OLECHECK(this->get_Count((VARIANT*)&plCount));
  return plCount;
}

template <class T> HRESULT __fastcall
TCOM_ListsT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  return (*this)->get__NewEnum(ppVal);
}

template <class T> LPUNKNOWN __fastcall
TCOM_ListsT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  OLECHECK(this->get__NewEnum((LPUNKNOWN*)&ppVal));
  return ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ListsT<T>::get_Item(VARIANT* Index/*[in]*/, LPDISPATCH* ppVal/*[out,retval]*/)
{
  return (*this)->get_Item(Index, ppVal);
}

template <class T> LPDISPATCH __fastcall
TCOM_ListsT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  LPDISPATCH ppVal;
  OLECHECK(this->get_Item(, (LPDISPATCH*)&ppVal));
  return ppVal;
}

template <class T> HRESULT __fastcall
TCOM_ListsT<T>::Add(BSTR Name/*[in]*/, BSTR ParentFolder/*[in,def,opt]*/, 
                    Frontpage_xp::FpListType ListType/*[in,def,opt]*/, 
                    BSTR Description/*[in,def,opt]*/, Frontpage_xp::_List** ppVal/*[out,retval]*/)
{
  return (*this)->Add(Name, ParentFolder, ListType, Description, ppVal);
}

template <class T> Frontpage_xp::_List* __fastcall
TCOM_ListsT<T>::Add(BSTR Name/*[in]*/, BSTR ParentFolder/*[in,def,opt]*/, 
                    Frontpage_xp::FpListType ListType/*[in,def,opt]*/, 
                    BSTR Description/*[in,def,opt]*/)
{
  Frontpage_xp::_List* ppVal;
  OLECHECK(this->Add(, (Frontpage_xp::_List**)&ppVal));
  return ppVal;
}

// *********************************************************************//
// DispIntf:  _Lists
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B473-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListsDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListsDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListsDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_ListsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListsDispT<T>::get_Item(VARIANT* Index/*[in]*/, LPDISPATCH* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr(ppVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  LPDISPATCH ppVal;
  this->get_Item(Index, (LPDISPATCH*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListsDispT<T>::Add(BSTR Name/*[in]*/, BSTR ParentFolder/*[in,def,opt]*/, 
                    Frontpage_xp::FpListType ListType/*[in,def,opt]*/, 
                    BSTR Description/*[in,def,opt]*/, Frontpage_xp::_List** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(4));
  TAutoArgs<4> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = ParentFolder /*[VT_BSTR:0]*/;
  _args[3] = (int)ListType /*[VT_USERDEFINED:0]*/;
  _args[4] = Description /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_List**)ppVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::_List* __fastcall
_ListsDispT<T>::Add(BSTR Name/*[in]*/, BSTR ParentFolder/*[in,def,opt]*/, 
                    Frontpage_xp::FpListType ListType/*[in,def,opt]*/, 
                    BSTR Description/*[in,def,opt]*/)
{
  Frontpage_xp::_List* ppVal;
  this->Add(Name, ParentFolder, ListType, Description, (Frontpage_xp::_List**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListsDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListsDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListsDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListsDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  System
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {731EC3E0-9CC2-11D1-83CE-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SYSTEMDispT<T>::get_Build(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Build"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SYSTEMDispT<T>::get_Build(void)
{
  BSTR pVal;
  this->get_Build((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SYSTEMDispT<T>::get_Version(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Version"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SYSTEMDispT<T>::get_Version(void)
{
  BSTR pVal;
  this->get_Version((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SYSTEMDispT<T>::get_OperatingSystem(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OperatingSystem"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SYSTEMDispT<T>::get_OperatingSystem(void)
{
  BSTR pVal;
  this->get_OperatingSystem((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SYSTEMDispT<T>::get_HorizontalResolution(long* plVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HorizontalResolution"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SYSTEMDispT<T>::get_HorizontalResolution(void)
{
  long plVal;
  this->get_HorizontalResolution((long*)&plVal);
  return plVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SYSTEMDispT<T>::get_VerticalResolution(long* plVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalResolution"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SYSTEMDispT<T>::get_VerticalResolution(void)
{
  long plVal;
  this->get_VerticalResolution((long*)&plVal);
  return plVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SYSTEMDispT<T>::get_LanguageDesignation(BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LanguageDesignation"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SYSTEMDispT<T>::get_LanguageDesignation(void)
{
  BSTR pVal;
  this->get_LanguageDesignation((BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SYSTEMDispT<T>::get_ProfileString(BSTR RegistrySection, BSTR RegistryKey, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProfileString"), DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = RegistrySection /*[VT_BSTR:0]*/;
  _args[2] = RegistryKey /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
SYSTEMDispT<T>::get_ProfileString(BSTR RegistrySection, BSTR RegistryKey)
{
  BSTR pVal;
  this->get_ProfileString(RegistrySection, RegistryKey, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SYSTEMDispT<T>::set_ProfileString(BSTR RegistrySection, BSTR RegistryKey, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProfileString"), DISPID(9));
  TAutoArgs<3> _args;
  _args[1] = RegistrySection /*[VT_BSTR:0]*/;
  _args[2] = RegistryKey /*[VT_BSTR:0]*/;
  _args[3] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SYSTEMDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
SYSTEMDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
SYSTEMDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
SYSTEMDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  Webs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AAAA22E0-C834-11D1-83D4-006097ABE675}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebsDispT<T>::get_Count(VARIANT* plCount/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plCount /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
WebsDispT<T>::get_Count(void)
{
  VARIANT plCount;
  this->get_Count((VARIANT*)&plCount);
  return plCount;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebsDispT<T>::get__NewEnum(LPUNKNOWN* ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppVal /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
WebsDispT<T>::get__NewEnum(void)
{
  LPUNKNOWN ppVal;
  this->get__NewEnum((LPUNKNOWN*)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebsDispT<T>::get_Item(VARIANT* Index/*[in]*/, Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)ppVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
WebsDispT<T>::get_Item(VARIANT* Index/*[in]*/)
{
  Frontpage_xp::Web* ppVal;
  this->get_Item(Index, (Frontpage_xp::Web**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebsDispT<T>::_deprecated_Add(BSTR WebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                              BSTR Password/*[in,def,opt]*/, 
                              Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_deprecated_Add"), DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = WebUrl /*[VT_BSTR:0]*/;
  _args[2] = UserName /*[VT_BSTR:0]*/;
  _args[3] = Password /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)ppVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
WebsDispT<T>::_deprecated_Add(BSTR WebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                              BSTR Password/*[in,def,opt]*/)
{
  Frontpage_xp::Web* ppVal;
  this->_deprecated_Add(WebUrl, UserName, Password, (Frontpage_xp::Web**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebsDispT<T>::Delete(VARIANT* Index/*[in]*/, 
                     Frontpage_xp::FpWebDeleteFlags WebDeleteFlags/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:1]*/;
  _args[2] = (int)WebDeleteFlags /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebsDispT<T>::_deprecated_Open(BSTR szWebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                               BSTR Password/*[in,def,opt]*/, 
                               Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_deprecated_Open"), DISPID(8));
  TAutoArgs<3> _args;
  _args[1] = szWebUrl /*[VT_BSTR:0]*/;
  _args[2] = UserName /*[VT_BSTR:0]*/;
  _args[3] = Password /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)ppVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
WebsDispT<T>::_deprecated_Open(BSTR szWebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                               BSTR Password/*[in,def,opt]*/)
{
  Frontpage_xp::Web* ppVal;
  this->_deprecated_Open(szWebUrl, UserName, Password, (Frontpage_xp::Web**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebsDispT<T>::Add(BSTR WebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, BSTR Password/*[in,def,opt]*/
                  , Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/, 
                  Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(9));
  TAutoArgs<4> _args;
  _args[1] = WebUrl /*[VT_BSTR:0]*/;
  _args[2] = UserName /*[VT_BSTR:0]*/;
  _args[3] = Password /*[VT_BSTR:0]*/;
  _args[4] = (int)WebOpenFlags /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)ppVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
WebsDispT<T>::Add(BSTR WebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, BSTR Password/*[in,def,opt]*/, 
                  Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/)
{
  Frontpage_xp::Web* ppVal;
  this->Add(WebUrl, UserName, Password, WebOpenFlags, (Frontpage_xp::Web**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebsDispT<T>::Open(BSTR szWebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                   BSTR Password/*[in,def,opt]*/, 
                   Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/, 
                   Frontpage_xp::Web** ppVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(10));
  TAutoArgs<4> _args;
  _args[1] = szWebUrl /*[VT_BSTR:0]*/;
  _args[2] = UserName /*[VT_BSTR:0]*/;
  _args[3] = Password /*[VT_BSTR:0]*/;
  _args[4] = (int)WebOpenFlags /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)ppVal /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
WebsDispT<T>::Open(BSTR szWebUrl/*[in]*/, BSTR UserName/*[in,def,opt]*/, 
                   BSTR Password/*[in,def,opt]*/, 
                   Frontpage_xp::FpWebOpenFlags WebOpenFlags/*[in,def,opt]*/)
{
  Frontpage_xp::Web* ppVal;
  this->Open(szWebUrl, UserName, Password, WebOpenFlags, (Frontpage_xp::Web**)&ppVal);
  return ppVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebsDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
WebsDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
WebsDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
WebsDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_BasicList
// Interface: _BasicList
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_BasicListT<T>::get_EditSecurity(Frontpage_xp::FpListEditSecurity* peEditSecurity/*[out,retval]*/)
{
  return (*this)->get_EditSecurity(peEditSecurity);
}

template <class T> Frontpage_xp::FpListEditSecurity __fastcall
TCOM_BasicListT<T>::get_EditSecurity(void)
{
  Frontpage_xp::FpListEditSecurity peEditSecurity;
  OLECHECK(this->get_EditSecurity((Frontpage_xp::FpListEditSecurity*)&peEditSecurity));
  return peEditSecurity;
}

template <class T> HRESULT __fastcall
TCOM_BasicListT<T>::set_EditSecurity(Frontpage_xp::FpListEditSecurity peEditSecurity/*[in]*/)
{
  return (*this)->set_EditSecurity(peEditSecurity);
}

template <class T> HRESULT __fastcall
TCOM_BasicListT<T>::get_ReadSecurity(Frontpage_xp::FpListReadSecurity* peReadSecurity/*[out,retval]*/)
{
  return (*this)->get_ReadSecurity(peReadSecurity);
}

template <class T> Frontpage_xp::FpListReadSecurity __fastcall
TCOM_BasicListT<T>::get_ReadSecurity(void)
{
  Frontpage_xp::FpListReadSecurity peReadSecurity;
  OLECHECK(this->get_ReadSecurity((Frontpage_xp::FpListReadSecurity*)&peReadSecurity));
  return peReadSecurity;
}

template <class T> HRESULT __fastcall
TCOM_BasicListT<T>::set_ReadSecurity(Frontpage_xp::FpListReadSecurity peReadSecurity/*[in]*/)
{
  return (*this)->set_ReadSecurity(peReadSecurity);
}

// *********************************************************************//
// DispIntf:  _BasicList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B494-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_EditSecurity(Frontpage_xp::FpListEditSecurity* peEditSecurity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditSecurity"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peEditSecurity /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListEditSecurity __fastcall
_BasicListDispT<T>::get_EditSecurity(void)
{
  Frontpage_xp::FpListEditSecurity peEditSecurity;
  this->get_EditSecurity((Frontpage_xp::FpListEditSecurity*)&peEditSecurity);
  return peEditSecurity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::set_EditSecurity(Frontpage_xp::FpListEditSecurity peEditSecurity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditSecurity"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = (int)peEditSecurity /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_ReadSecurity(Frontpage_xp::FpListReadSecurity* peReadSecurity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadSecurity"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peReadSecurity /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListReadSecurity __fastcall
_BasicListDispT<T>::get_ReadSecurity(void)
{
  Frontpage_xp::FpListReadSecurity peReadSecurity;
  this->get_ReadSecurity((Frontpage_xp::FpListReadSecurity*)&peReadSecurity);
  return peReadSecurity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::set_ReadSecurity(Frontpage_xp::FpListReadSecurity peReadSecurity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadSecurity"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = (int)peReadSecurity /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BasicListDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BasicListDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_ListFields**)ppListFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_ListFields* __fastcall
_BasicListDispT<T>::get_Fields(void)
{
  Frontpage_xp::_ListFields* ppListFields;
  this->get_Fields((Frontpage_xp::_ListFields**)&ppListFields);
  return ppListFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Folder"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolder**)ppWebFolder /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolder* __fastcall
_BasicListDispT<T>::get_Folder(void)
{
  Frontpage_xp::WebFolder* ppWebFolder;
  this->get_Folder((Frontpage_xp::WebFolder**)&ppWebFolder);
  return ppWebFolder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultViewPage"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrViewPage /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BasicListDispT<T>::get_DefaultViewPage(void)
{
  BSTR pbstrViewPage;
  this->get_DefaultViewPage((BSTR*)&pbstrViewPage);
  return pbstrViewPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultViewPage"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbstrViewPage /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForm"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDisplayForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BasicListDispT<T>::get_DisplayForm(void)
{
  BSTR pbstrDisplayForm;
  this->get_DisplayForm((BSTR*)&pbstrDisplayForm);
  return pbstrDisplayForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForm"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pbstrDisplayForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditForm"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrEditForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BasicListDispT<T>::get_EditForm(void)
{
  BSTR pbstrEditForm;
  this->get_EditForm((BSTR*)&pbstrEditForm);
  return pbstrEditForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::set_EditForm(BSTR pbstrEditForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditForm"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pbstrEditForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewForm"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrNewForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_BasicListDispT<T>::get_NewForm(void)
{
  BSTR pbstrNewForm;
  this->get_NewForm((BSTR*)&pbstrNewForm);
  return pbstrNewForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::set_NewForm(BSTR pbstrNewForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewForm"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pbstrNewForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignSecurity"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peDesignSecurity /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListDesignSecurity __fastcall
_BasicListDispT<T>::get_DesignSecurity(void)
{
  Frontpage_xp::FpListDesignSecurity peDesignSecurity;
  this->get_DesignSecurity((Frontpage_xp::FpListDesignSecurity*)&peDesignSecurity);
  return peDesignSecurity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignSecurity"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)peDesignSecurity /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peListType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListType __fastcall
_BasicListDispT<T>::get_Type(void)
{
  Frontpage_xp::FpListType peListType;
  this->get_Type((Frontpage_xp::FpListType*)&peListType);
  return peListType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_BasicListDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::ApplyChanges()
{
  _TDispID _dispid(*this, OLETEXT("ApplyChanges"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_BasicListDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewPages"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppsaViewPages /*[VT_SAFEARRAY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
_BasicListDispT<T>::get_ViewPages(void)
{
  LPSAFEARRAY ppsaViewPages;
  this->get_ViewPages((LPSAFEARRAY*)&ppsaViewPages);
  return ppsaViewPages;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(21));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(23));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(25));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_BasicListDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_BasicListDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_BasicListDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_Survey
// Interface: _Survey
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::get_EditSecurity(Frontpage_xp::FpListEditSecurity* peEditSecurity/*[out,retval]*/)
{
  return (*this)->get_EditSecurity(peEditSecurity);
}

template <class T> Frontpage_xp::FpListEditSecurity __fastcall
TCOM_SurveyT<T>::get_EditSecurity(void)
{
  Frontpage_xp::FpListEditSecurity peEditSecurity;
  OLECHECK(this->get_EditSecurity((Frontpage_xp::FpListEditSecurity*)&peEditSecurity));
  return peEditSecurity;
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::set_EditSecurity(Frontpage_xp::FpListEditSecurity peEditSecurity/*[in]*/)
{
  return (*this)->set_EditSecurity(peEditSecurity);
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::get_ReadSecurity(Frontpage_xp::FpListReadSecurity* peReadSecurity/*[out,retval]*/)
{
  return (*this)->get_ReadSecurity(peReadSecurity);
}

template <class T> Frontpage_xp::FpListReadSecurity __fastcall
TCOM_SurveyT<T>::get_ReadSecurity(void)
{
  Frontpage_xp::FpListReadSecurity peReadSecurity;
  OLECHECK(this->get_ReadSecurity((Frontpage_xp::FpListReadSecurity*)&peReadSecurity));
  return peReadSecurity;
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::set_ReadSecurity(Frontpage_xp::FpListReadSecurity peReadSecurity/*[in]*/)
{
  return (*this)->set_ReadSecurity(peReadSecurity);
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::get_ShowUserNamesInResults(VARIANT_BOOL* pShowUserNames/*[out,retval]*/)
{
  return (*this)->get_ShowUserNamesInResults(pShowUserNames);
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::get_ShowUserNamesInResults(TOLEBOOL* pShowUserNames/*[out,retval]*/)
{
  return (*this)->get_ShowUserNamesInResults(VARIANT_BOOL*)pShowUserNames);
}

template <class T> TOLEBOOL __fastcall
TCOM_SurveyT<T>::get_ShowUserNamesInResults(void)
{
  VARIANT_BOOL pShowUserNames;
  OLECHECK(this->get_ShowUserNamesInResults((VARIANT_BOOL*)&pShowUserNames));
  return (TOLEBOOL)pShowUserNames;
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::set_ShowUserNamesInResults(VARIANT_BOOL pShowUserNames/*[in]*/)
{
  return (*this)->set_ShowUserNamesInResults(pShowUserNames);
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::set_ShowUserNamesInResults(TOLEBOOL pShowUserNames/*[in]*/)
{
  return (*this)->set_ShowUserNamesInResults(VARIANT_BOOL)pShowUserNames);
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::get_AllowMultipleResponses(VARIANT_BOOL* pAllowMultipleResponses/*[out,retval]*/)
{
  return (*this)->get_AllowMultipleResponses(pAllowMultipleResponses);
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::get_AllowMultipleResponses(TOLEBOOL* pAllowMultipleResponses/*[out,retval]*/)
{
  return (*this)->get_AllowMultipleResponses(VARIANT_BOOL*)pAllowMultipleResponses);
}

template <class T> TOLEBOOL __fastcall
TCOM_SurveyT<T>::get_AllowMultipleResponses(void)
{
  VARIANT_BOOL pAllowMultipleResponses;
  OLECHECK(this->get_AllowMultipleResponses((VARIANT_BOOL*)&pAllowMultipleResponses));
  return (TOLEBOOL)pAllowMultipleResponses;
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::set_AllowMultipleResponses(VARIANT_BOOL pAllowMultipleResponses/*[in]*/)
{
  return (*this)->set_AllowMultipleResponses(pAllowMultipleResponses);
}

template <class T> HRESULT __fastcall
TCOM_SurveyT<T>::set_AllowMultipleResponses(TOLEBOOL pAllowMultipleResponses/*[in]*/)
{
  return (*this)->set_AllowMultipleResponses(VARIANT_BOOL)pAllowMultipleResponses);
}

// *********************************************************************//
// DispIntf:  _Survey
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B495-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_EditSecurity(Frontpage_xp::FpListEditSecurity* peEditSecurity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditSecurity"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peEditSecurity /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListEditSecurity __fastcall
_SurveyDispT<T>::get_EditSecurity(void)
{
  Frontpage_xp::FpListEditSecurity peEditSecurity;
  this->get_EditSecurity((Frontpage_xp::FpListEditSecurity*)&peEditSecurity);
  return peEditSecurity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_EditSecurity(Frontpage_xp::FpListEditSecurity peEditSecurity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditSecurity"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = (int)peEditSecurity /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_ReadSecurity(Frontpage_xp::FpListReadSecurity* peReadSecurity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadSecurity"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peReadSecurity /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListReadSecurity __fastcall
_SurveyDispT<T>::get_ReadSecurity(void)
{
  Frontpage_xp::FpListReadSecurity peReadSecurity;
  this->get_ReadSecurity((Frontpage_xp::FpListReadSecurity*)&peReadSecurity);
  return peReadSecurity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_ReadSecurity(Frontpage_xp::FpListReadSecurity peReadSecurity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadSecurity"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = (int)peReadSecurity /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_ShowUserNamesInResults(VARIANT_BOOL* pShowUserNames/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowUserNamesInResults"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pShowUserNames /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_SurveyDispT<T>::get_ShowUserNamesInResults(void)
{
  VARIANT_BOOL pShowUserNames;
  this->get_ShowUserNamesInResults((VARIANT_BOOL*)&pShowUserNames);
  return pShowUserNames;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_ShowUserNamesInResults(VARIANT_BOOL pShowUserNames/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowUserNamesInResults"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pShowUserNames /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_AllowMultipleResponses(VARIANT_BOOL* pAllowMultipleResponses/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowMultipleResponses"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pAllowMultipleResponses /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_SurveyDispT<T>::get_AllowMultipleResponses(void)
{
  VARIANT_BOOL pAllowMultipleResponses;
  this->get_AllowMultipleResponses((VARIANT_BOOL*)&pAllowMultipleResponses);
  return pAllowMultipleResponses;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_AllowMultipleResponses(VARIANT_BOOL pAllowMultipleResponses/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AllowMultipleResponses"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = pAllowMultipleResponses /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SurveyDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SurveyDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_ListFields**)ppListFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_ListFields* __fastcall
_SurveyDispT<T>::get_Fields(void)
{
  Frontpage_xp::_ListFields* ppListFields;
  this->get_Fields((Frontpage_xp::_ListFields**)&ppListFields);
  return ppListFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Folder"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolder**)ppWebFolder /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolder* __fastcall
_SurveyDispT<T>::get_Folder(void)
{
  Frontpage_xp::WebFolder* ppWebFolder;
  this->get_Folder((Frontpage_xp::WebFolder**)&ppWebFolder);
  return ppWebFolder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultViewPage"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrViewPage /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SurveyDispT<T>::get_DefaultViewPage(void)
{
  BSTR pbstrViewPage;
  this->get_DefaultViewPage((BSTR*)&pbstrViewPage);
  return pbstrViewPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultViewPage"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbstrViewPage /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForm"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDisplayForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SurveyDispT<T>::get_DisplayForm(void)
{
  BSTR pbstrDisplayForm;
  this->get_DisplayForm((BSTR*)&pbstrDisplayForm);
  return pbstrDisplayForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForm"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pbstrDisplayForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditForm"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrEditForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SurveyDispT<T>::get_EditForm(void)
{
  BSTR pbstrEditForm;
  this->get_EditForm((BSTR*)&pbstrEditForm);
  return pbstrEditForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_EditForm(BSTR pbstrEditForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditForm"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pbstrEditForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewForm"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrNewForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_SurveyDispT<T>::get_NewForm(void)
{
  BSTR pbstrNewForm;
  this->get_NewForm((BSTR*)&pbstrNewForm);
  return pbstrNewForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_NewForm(BSTR pbstrNewForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewForm"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pbstrNewForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignSecurity"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peDesignSecurity /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListDesignSecurity __fastcall
_SurveyDispT<T>::get_DesignSecurity(void)
{
  Frontpage_xp::FpListDesignSecurity peDesignSecurity;
  this->get_DesignSecurity((Frontpage_xp::FpListDesignSecurity*)&peDesignSecurity);
  return peDesignSecurity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignSecurity"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)peDesignSecurity /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peListType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListType __fastcall
_SurveyDispT<T>::get_Type(void)
{
  Frontpage_xp::FpListType peListType;
  this->get_Type((Frontpage_xp::FpListType*)&peListType);
  return peListType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_SurveyDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::ApplyChanges()
{
  _TDispID _dispid(*this, OLETEXT("ApplyChanges"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_SurveyDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewPages"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppsaViewPages /*[VT_SAFEARRAY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
_SurveyDispT<T>::get_ViewPages(void)
{
  LPSAFEARRAY ppsaViewPages;
  this->get_ViewPages((LPSAFEARRAY*)&ppsaViewPages);
  return ppsaViewPages;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(21));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(23));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(25));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_SurveyDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_SurveyDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_SurveyDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_DocumentLibrary
// Interface: _DocumentLibrary
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_DocumentLibraryT<T>::get_Template(BSTR* pbstrTemplate/*[out,retval]*/)
{
  return (*this)->get_Template(pbstrTemplate);
}

template <class T> BSTR __fastcall
TCOM_DocumentLibraryT<T>::get_Template(void)
{
  BSTR pbstrTemplate = 0;
  OLECHECK(this->get_Template((BSTR*)&pbstrTemplate));
  return pbstrTemplate;
}

template <class T> HRESULT __fastcall
TCOM_DocumentLibraryT<T>::set_Template(BSTR pbstrTemplate/*[in]*/)
{
  return (*this)->set_Template(pbstrTemplate);
}

template <class T> HRESULT __fastcall
TCOM_DocumentLibraryT<T>::get_FileDialogViewPage(BSTR* pbstrViewPage/*[out,retval]*/)
{
  return (*this)->get_FileDialogViewPage(pbstrViewPage);
}

template <class T> BSTR __fastcall
TCOM_DocumentLibraryT<T>::get_FileDialogViewPage(void)
{
  BSTR pbstrViewPage = 0;
  OLECHECK(this->get_FileDialogViewPage((BSTR*)&pbstrViewPage));
  return pbstrViewPage;
}

template <class T> HRESULT __fastcall
TCOM_DocumentLibraryT<T>::set_FileDialogViewPage(BSTR pbstrViewPage/*[in]*/)
{
  return (*this)->set_FileDialogViewPage(pbstrViewPage);
}

template <class T> HRESULT __fastcall
TCOM_DocumentLibraryT<T>::get_FileSaveForm(BSTR* pbstrSaveForm/*[out,retval]*/)
{
  return (*this)->get_FileSaveForm(pbstrSaveForm);
}

template <class T> BSTR __fastcall
TCOM_DocumentLibraryT<T>::get_FileSaveForm(void)
{
  BSTR pbstrSaveForm = 0;
  OLECHECK(this->get_FileSaveForm((BSTR*)&pbstrSaveForm));
  return pbstrSaveForm;
}

template <class T> HRESULT __fastcall
TCOM_DocumentLibraryT<T>::set_FileSaveForm(BSTR pbstrSaveForm/*[in]*/)
{
  return (*this)->set_FileSaveForm(pbstrSaveForm);
}

// *********************************************************************//
// DispIntf:  _DocumentLibrary
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B481-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_Template(BSTR* pbstrTemplate/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Template"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrTemplate /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_DocumentLibraryDispT<T>::get_Template(void)
{
  BSTR pbstrTemplate;
  this->get_Template((BSTR*)&pbstrTemplate);
  return pbstrTemplate;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::set_Template(BSTR pbstrTemplate/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Template"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pbstrTemplate /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_FileDialogViewPage(BSTR* pbstrViewPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileDialogViewPage"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrViewPage /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_DocumentLibraryDispT<T>::get_FileDialogViewPage(void)
{
  BSTR pbstrViewPage;
  this->get_FileDialogViewPage((BSTR*)&pbstrViewPage);
  return pbstrViewPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::set_FileDialogViewPage(BSTR pbstrViewPage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileDialogViewPage"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pbstrViewPage /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_FileSaveForm(BSTR* pbstrSaveForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileSaveForm"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrSaveForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_DocumentLibraryDispT<T>::get_FileSaveForm(void)
{
  BSTR pbstrSaveForm;
  this->get_FileSaveForm((BSTR*)&pbstrSaveForm);
  return pbstrSaveForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::set_FileSaveForm(BSTR pbstrSaveForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FileSaveForm"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pbstrSaveForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_DocumentLibraryDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_DocumentLibraryDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_Fields(Frontpage_xp::_ListFields** ppListFields/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_ListFields**)ppListFields /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_ListFields* __fastcall
_DocumentLibraryDispT<T>::get_Fields(void)
{
  Frontpage_xp::_ListFields* ppListFields;
  this->get_Fields((Frontpage_xp::_ListFields**)&ppListFields);
  return ppListFields;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_Folder(Frontpage_xp::WebFolder** ppWebFolder/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Folder"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::WebFolder**)ppWebFolder /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::WebFolder* __fastcall
_DocumentLibraryDispT<T>::get_Folder(void)
{
  Frontpage_xp::WebFolder* ppWebFolder;
  this->get_Folder((Frontpage_xp::WebFolder**)&ppWebFolder);
  return ppWebFolder;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_DefaultViewPage(BSTR* pbstrViewPage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultViewPage"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrViewPage /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_DocumentLibraryDispT<T>::get_DefaultViewPage(void)
{
  BSTR pbstrViewPage;
  this->get_DefaultViewPage((BSTR*)&pbstrViewPage);
  return pbstrViewPage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::set_DefaultViewPage(BSTR pbstrViewPage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultViewPage"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = pbstrViewPage /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_DisplayForm(BSTR* pbstrDisplayForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForm"), DISPID(7));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDisplayForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_DocumentLibraryDispT<T>::get_DisplayForm(void)
{
  BSTR pbstrDisplayForm;
  this->get_DisplayForm((BSTR*)&pbstrDisplayForm);
  return pbstrDisplayForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::set_DisplayForm(BSTR pbstrDisplayForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayForm"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pbstrDisplayForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_EditForm(BSTR* pbstrEditForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditForm"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrEditForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_DocumentLibraryDispT<T>::get_EditForm(void)
{
  BSTR pbstrEditForm;
  this->get_EditForm((BSTR*)&pbstrEditForm);
  return pbstrEditForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::set_EditForm(BSTR pbstrEditForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditForm"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = pbstrEditForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_NewForm(BSTR* pbstrNewForm/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewForm"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrNewForm /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_DocumentLibraryDispT<T>::get_NewForm(void)
{
  BSTR pbstrNewForm;
  this->get_NewForm((BSTR*)&pbstrNewForm);
  return pbstrNewForm;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::set_NewForm(BSTR pbstrNewForm/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NewForm"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = pbstrNewForm /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_DesignSecurity(Frontpage_xp::FpListDesignSecurity* peDesignSecurity/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignSecurity"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peDesignSecurity /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListDesignSecurity __fastcall
_DocumentLibraryDispT<T>::get_DesignSecurity(void)
{
  Frontpage_xp::FpListDesignSecurity peDesignSecurity;
  this->get_DesignSecurity((Frontpage_xp::FpListDesignSecurity*)&peDesignSecurity);
  return peDesignSecurity;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::set_DesignSecurity(Frontpage_xp::FpListDesignSecurity peDesignSecurity/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DesignSecurity"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = (int)peDesignSecurity /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_Type(Frontpage_xp::FpListType* peListType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peListType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpListType __fastcall
_DocumentLibraryDispT<T>::get_Type(void)
{
  Frontpage_xp::FpListType peListType;
  this->get_Type((Frontpage_xp::FpListType*)&peListType);
  return peListType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_DocumentLibraryDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::ApplyChanges()
{
  _TDispID _dispid(*this, OLETEXT("ApplyChanges"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_DocumentLibraryDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_ViewPages(LPSAFEARRAY* ppsaViewPages/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ViewPages"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppsaViewPages /*[VT_SAFEARRAY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
_DocumentLibraryDispT<T>::get_ViewPages(void)
{
  LPSAFEARRAY ppsaViewPages;
  this->get_ViewPages((LPSAFEARRAY*)&ppsaViewPages);
  return ppsaViewPages;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(18));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(21));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(22));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(23));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(25));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_DocumentLibraryDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_DocumentLibraryDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_DocumentLibraryDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldSingleLine
// Interface: _ListFieldSingleLine
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldSingleLineT<T>::get_MaxLength(long* plMaxLength/*[out,retval]*/)
{
  return (*this)->get_MaxLength(plMaxLength);
}

template <class T> long __fastcall
TCOM_ListFieldSingleLineT<T>::get_MaxLength(void)
{
  long plMaxLength;
  OLECHECK(this->get_MaxLength((long*)&plMaxLength));
  return plMaxLength;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldSingleLineT<T>::set_MaxLength(long plMaxLength/*[in]*/)
{
  return (*this)->set_MaxLength(plMaxLength);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldSingleLineT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pvDefaultValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldSingleLineT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
  return pvDefaultValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldSingleLineT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  return (*this)->set_DefaultValue(pvDefaultValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldSingleLineT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldSingleLineT<T>::get_Required(TOLEBOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(VARIANT_BOOL*)pRequired);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListFieldSingleLineT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
  return (TOLEBOOL)pRequired;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldSingleLineT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldSingleLineT<T>::set_Required(TOLEBOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(VARIANT_BOOL)pRequired);
}

// *********************************************************************//
// DispIntf:  _ListFieldSingleLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B477-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::get_MaxLength(long* plMaxLength/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMaxLength /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ListFieldSingleLineDispT<T>::get_MaxLength(void)
{
  long plMaxLength;
  this->get_MaxLength((long*)&plMaxLength);
  return plMaxLength;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::set_MaxLength(long plMaxLength/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxLength"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = plMaxLength /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvDefaultValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldSingleLineDispT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  this->get_DefaultValue((VARIANT*)&pvDefaultValue);
  return pvDefaultValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pvDefaultValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRequired /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldSingleLineDispT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  this->get_Required((VARIANT_BOOL*)&pRequired);
  return pRequired;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRequired /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldSingleLineDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldSingleLineDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldSingleLineDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldSingleLineDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldSingleLineDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldSingleLineDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldSingleLineDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldSingleLineDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldMultiLine
// Interface: _ListFieldMultiLine
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldMultiLineT<T>::get_NumberOfLines(long* plNumberOfLines/*[out,retval]*/)
{
  return (*this)->get_NumberOfLines(plNumberOfLines);
}

template <class T> long __fastcall
TCOM_ListFieldMultiLineT<T>::get_NumberOfLines(void)
{
  long plNumberOfLines;
  OLECHECK(this->get_NumberOfLines((long*)&plNumberOfLines));
  return plNumberOfLines;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldMultiLineT<T>::set_NumberOfLines(long plNumberOfLines/*[in]*/)
{
  return (*this)->set_NumberOfLines(plNumberOfLines);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldMultiLineT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pvDefaultValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldMultiLineT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
  return pvDefaultValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldMultiLineT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  return (*this)->set_DefaultValue(pvDefaultValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldMultiLineT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldMultiLineT<T>::get_Required(TOLEBOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(VARIANT_BOOL*)pRequired);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListFieldMultiLineT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
  return (TOLEBOOL)pRequired;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldMultiLineT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldMultiLineT<T>::set_Required(TOLEBOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(VARIANT_BOOL)pRequired);
}

// *********************************************************************//
// DispIntf:  _ListFieldMultiLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B478-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::get_NumberOfLines(long* plNumberOfLines/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberOfLines"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plNumberOfLines /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_ListFieldMultiLineDispT<T>::get_NumberOfLines(void)
{
  long plNumberOfLines;
  this->get_NumberOfLines((long*)&plNumberOfLines);
  return plNumberOfLines;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::set_NumberOfLines(long plNumberOfLines/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumberOfLines"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = plNumberOfLines /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvDefaultValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldMultiLineDispT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  this->get_DefaultValue((VARIANT*)&pvDefaultValue);
  return pvDefaultValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pvDefaultValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRequired /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldMultiLineDispT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  this->get_Required((VARIANT_BOOL*)&pRequired);
  return pRequired;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRequired /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldMultiLineDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldMultiLineDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldMultiLineDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldMultiLineDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldMultiLineDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldMultiLineDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldMultiLineDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldMultiLineDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldNumber
// Interface: _ListFieldNumber
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::get_DisplayFormat(Frontpage_xp::FpNumberFieldFormat* pFormat/*[out,retval]*/)
{
  return (*this)->get_DisplayFormat(pFormat);
}

template <class T> Frontpage_xp::FpNumberFieldFormat __fastcall
TCOM_ListFieldNumberT<T>::get_DisplayFormat(void)
{
  Frontpage_xp::FpNumberFieldFormat pFormat;
  OLECHECK(this->get_DisplayFormat((Frontpage_xp::FpNumberFieldFormat*)&pFormat));
  return pFormat;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::set_DisplayFormat(Frontpage_xp::FpNumberFieldFormat pFormat/*[in]*/)
{
  return (*this)->set_DisplayFormat(pFormat);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::get_ShowAsPercentage(VARIANT_BOOL* pShowAsPercentage/*[out,retval]*/)
{
  return (*this)->get_ShowAsPercentage(pShowAsPercentage);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::get_ShowAsPercentage(TOLEBOOL* pShowAsPercentage/*[out,retval]*/)
{
  return (*this)->get_ShowAsPercentage(VARIANT_BOOL*)pShowAsPercentage);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListFieldNumberT<T>::get_ShowAsPercentage(void)
{
  VARIANT_BOOL pShowAsPercentage;
  OLECHECK(this->get_ShowAsPercentage((VARIANT_BOOL*)&pShowAsPercentage));
  return (TOLEBOOL)pShowAsPercentage;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::set_ShowAsPercentage(VARIANT_BOOL pShowAsPercentage/*[in]*/)
{
  return (*this)->set_ShowAsPercentage(pShowAsPercentage);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::set_ShowAsPercentage(TOLEBOOL pShowAsPercentage/*[in]*/)
{
  return (*this)->set_ShowAsPercentage(VARIANT_BOOL)pShowAsPercentage);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::get_MinimumValue(VARIANT* pvMinimumValue/*[out,retval]*/)
{
  return (*this)->get_MinimumValue(pvMinimumValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldNumberT<T>::get_MinimumValue(void)
{
  VARIANT pvMinimumValue;
  OLECHECK(this->get_MinimumValue((VARIANT*)&pvMinimumValue));
  return pvMinimumValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::set_MinimumValue(VARIANT* pvMinimumValue/*[in]*/)
{
  return (*this)->set_MinimumValue(pvMinimumValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::get_MaximumValue(VARIANT* pvMaximumValue/*[out,retval]*/)
{
  return (*this)->get_MaximumValue(pvMaximumValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldNumberT<T>::get_MaximumValue(void)
{
  VARIANT pvMaximumValue;
  OLECHECK(this->get_MaximumValue((VARIANT*)&pvMaximumValue));
  return pvMaximumValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::set_MaximumValue(VARIANT* pvMaximumValue/*[in]*/)
{
  return (*this)->set_MaximumValue(pvMaximumValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pvDefaultValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldNumberT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
  return pvDefaultValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  return (*this)->set_DefaultValue(pvDefaultValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::get_Required(TOLEBOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(VARIANT_BOOL*)pRequired);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListFieldNumberT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
  return (TOLEBOOL)pRequired;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldNumberT<T>::set_Required(TOLEBOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(VARIANT_BOOL)pRequired);
}

// *********************************************************************//
// DispIntf:  _ListFieldNumber
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B479-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_DisplayFormat(Frontpage_xp::FpNumberFieldFormat* pFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFormat"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpNumberFieldFormat __fastcall
_ListFieldNumberDispT<T>::get_DisplayFormat(void)
{
  Frontpage_xp::FpNumberFieldFormat pFormat;
  this->get_DisplayFormat((Frontpage_xp::FpNumberFieldFormat*)&pFormat);
  return pFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::set_DisplayFormat(Frontpage_xp::FpNumberFieldFormat pFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFormat"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = (int)pFormat /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_ShowAsPercentage(VARIANT_BOOL* pShowAsPercentage/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAsPercentage"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pShowAsPercentage /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldNumberDispT<T>::get_ShowAsPercentage(void)
{
  VARIANT_BOOL pShowAsPercentage;
  this->get_ShowAsPercentage((VARIANT_BOOL*)&pShowAsPercentage);
  return pShowAsPercentage;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::set_ShowAsPercentage(VARIANT_BOOL pShowAsPercentage/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShowAsPercentage"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pShowAsPercentage /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_MinimumValue(VARIANT* pvMinimumValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinimumValue"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvMinimumValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldNumberDispT<T>::get_MinimumValue(void)
{
  VARIANT pvMinimumValue;
  this->get_MinimumValue((VARIANT*)&pvMinimumValue);
  return pvMinimumValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::set_MinimumValue(VARIANT* pvMinimumValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinimumValue"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pvMinimumValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_MaximumValue(VARIANT* pvMaximumValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximumValue"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvMaximumValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldNumberDispT<T>::get_MaximumValue(void)
{
  VARIANT pvMaximumValue;
  this->get_MaximumValue((VARIANT*)&pvMaximumValue);
  return pvMaximumValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::set_MaximumValue(VARIANT* pvMaximumValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximumValue"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pvMaximumValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvDefaultValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldNumberDispT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  this->get_DefaultValue((VARIANT*)&pvDefaultValue);
  return pvDefaultValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pvDefaultValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRequired /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldNumberDispT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  this->get_Required((VARIANT_BOOL*)&pRequired);
  return pRequired;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pRequired /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldNumberDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldNumberDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldNumberDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldNumberDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldNumberDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldNumberDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldNumberDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldNumberDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldCurrency
// Interface: _ListFieldCurrency
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::get_DisplayFormat(Frontpage_xp::FpNumberFieldFormat* pFormat/*[out,retval]*/)
{
  return (*this)->get_DisplayFormat(pFormat);
}

template <class T> Frontpage_xp::FpNumberFieldFormat __fastcall
TCOM_ListFieldCurrencyT<T>::get_DisplayFormat(void)
{
  Frontpage_xp::FpNumberFieldFormat pFormat;
  OLECHECK(this->get_DisplayFormat((Frontpage_xp::FpNumberFieldFormat*)&pFormat));
  return pFormat;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::set_DisplayFormat(Frontpage_xp::FpNumberFieldFormat pFormat/*[in]*/)
{
  return (*this)->set_DisplayFormat(pFormat);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::get_Currency(Frontpage_xp::FpCurrencyFieldFormat* peCurrency/*[out,retval]*/)
{
  return (*this)->get_Currency(peCurrency);
}

template <class T> Frontpage_xp::FpCurrencyFieldFormat __fastcall
TCOM_ListFieldCurrencyT<T>::get_Currency(void)
{
  Frontpage_xp::FpCurrencyFieldFormat peCurrency;
  OLECHECK(this->get_Currency((Frontpage_xp::FpCurrencyFieldFormat*)&peCurrency));
  return peCurrency;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::set_Currency(Frontpage_xp::FpCurrencyFieldFormat peCurrency/*[in]*/)
{
  return (*this)->set_Currency(peCurrency);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::get_MinimumValue(VARIANT* pvMinimumValue/*[out,retval]*/)
{
  return (*this)->get_MinimumValue(pvMinimumValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldCurrencyT<T>::get_MinimumValue(void)
{
  VARIANT pvMinimumValue;
  OLECHECK(this->get_MinimumValue((VARIANT*)&pvMinimumValue));
  return pvMinimumValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::set_MinimumValue(VARIANT* pvMinimumValue/*[in]*/)
{
  return (*this)->set_MinimumValue(pvMinimumValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::get_MaximumValue(VARIANT* pvMaximumValue/*[out,retval]*/)
{
  return (*this)->get_MaximumValue(pvMaximumValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldCurrencyT<T>::get_MaximumValue(void)
{
  VARIANT pvMaximumValue;
  OLECHECK(this->get_MaximumValue((VARIANT*)&pvMaximumValue));
  return pvMaximumValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::set_MaximumValue(VARIANT* pvMaximumValue/*[in]*/)
{
  return (*this)->set_MaximumValue(pvMaximumValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pvDefaultValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldCurrencyT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
  return pvDefaultValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  return (*this)->set_DefaultValue(pvDefaultValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::get_Required(TOLEBOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(VARIANT_BOOL*)pRequired);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListFieldCurrencyT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
  return (TOLEBOOL)pRequired;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldCurrencyT<T>::set_Required(TOLEBOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(VARIANT_BOOL)pRequired);
}

// *********************************************************************//
// DispIntf:  _ListFieldCurrency
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47A-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_DisplayFormat(Frontpage_xp::FpNumberFieldFormat* pFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFormat"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpNumberFieldFormat __fastcall
_ListFieldCurrencyDispT<T>::get_DisplayFormat(void)
{
  Frontpage_xp::FpNumberFieldFormat pFormat;
  this->get_DisplayFormat((Frontpage_xp::FpNumberFieldFormat*)&pFormat);
  return pFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::set_DisplayFormat(Frontpage_xp::FpNumberFieldFormat pFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFormat"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = (int)pFormat /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_Currency(Frontpage_xp::FpCurrencyFieldFormat* peCurrency/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peCurrency /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpCurrencyFieldFormat __fastcall
_ListFieldCurrencyDispT<T>::get_Currency(void)
{
  Frontpage_xp::FpCurrencyFieldFormat peCurrency;
  this->get_Currency((Frontpage_xp::FpCurrencyFieldFormat*)&peCurrency);
  return peCurrency;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::set_Currency(Frontpage_xp::FpCurrencyFieldFormat peCurrency/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Currency"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = (int)peCurrency /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_MinimumValue(VARIANT* pvMinimumValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinimumValue"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvMinimumValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldCurrencyDispT<T>::get_MinimumValue(void)
{
  VARIANT pvMinimumValue;
  this->get_MinimumValue((VARIANT*)&pvMinimumValue);
  return pvMinimumValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::set_MinimumValue(VARIANT* pvMinimumValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinimumValue"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pvMinimumValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_MaximumValue(VARIANT* pvMaximumValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximumValue"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvMaximumValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldCurrencyDispT<T>::get_MaximumValue(void)
{
  VARIANT pvMaximumValue;
  this->get_MaximumValue((VARIANT*)&pvMaximumValue);
  return pvMaximumValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::set_MaximumValue(VARIANT* pvMaximumValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaximumValue"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pvMaximumValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvDefaultValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldCurrencyDispT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  this->get_DefaultValue((VARIANT*)&pvDefaultValue);
  return pvDefaultValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = pvDefaultValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRequired /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldCurrencyDispT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  this->get_Required((VARIANT_BOOL*)&pRequired);
  return pRequired;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = pRequired /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldCurrencyDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldCurrencyDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldCurrencyDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldCurrencyDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldCurrencyDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldCurrencyDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCurrencyDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldCurrencyDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldDateTime
// Interface: _ListFieldDateTime
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldDateTimeT<T>::get_DisplayFormat(Frontpage_xp::FpDateTimeFieldFormat* pFormat/*[out,retval]*/)
{
  return (*this)->get_DisplayFormat(pFormat);
}

template <class T> Frontpage_xp::FpDateTimeFieldFormat __fastcall
TCOM_ListFieldDateTimeT<T>::get_DisplayFormat(void)
{
  Frontpage_xp::FpDateTimeFieldFormat pFormat;
  OLECHECK(this->get_DisplayFormat((Frontpage_xp::FpDateTimeFieldFormat*)&pFormat));
  return pFormat;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldDateTimeT<T>::set_DisplayFormat(Frontpage_xp::FpDateTimeFieldFormat pFormat/*[in]*/)
{
  return (*this)->set_DisplayFormat(pFormat);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldDateTimeT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pvDefaultValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldDateTimeT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
  return pvDefaultValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldDateTimeT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  return (*this)->set_DefaultValue(pvDefaultValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldDateTimeT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldDateTimeT<T>::get_Required(TOLEBOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(VARIANT_BOOL*)pRequired);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListFieldDateTimeT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
  return (TOLEBOOL)pRequired;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldDateTimeT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldDateTimeT<T>::set_Required(TOLEBOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(VARIANT_BOOL)pRequired);
}

// *********************************************************************//
// DispIntf:  _ListFieldDateTime
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47B-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::get_DisplayFormat(Frontpage_xp::FpDateTimeFieldFormat* pFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFormat"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpDateTimeFieldFormat __fastcall
_ListFieldDateTimeDispT<T>::get_DisplayFormat(void)
{
  Frontpage_xp::FpDateTimeFieldFormat pFormat;
  this->get_DisplayFormat((Frontpage_xp::FpDateTimeFieldFormat*)&pFormat);
  return pFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::set_DisplayFormat(Frontpage_xp::FpDateTimeFieldFormat pFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFormat"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = (int)pFormat /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvDefaultValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldDateTimeDispT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  this->get_DefaultValue((VARIANT*)&pvDefaultValue);
  return pvDefaultValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pvDefaultValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRequired /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldDateTimeDispT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  this->get_Required((VARIANT_BOOL*)&pRequired);
  return pRequired;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pRequired /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldDateTimeDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldDateTimeDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldDateTimeDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldDateTimeDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldDateTimeDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldDateTimeDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldDateTimeDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldDateTimeDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldChoice
// Interface: _ListFieldChoice
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::get_DisplayFormat(Frontpage_xp::FpChoiceFieldFormat* pFormat/*[out,retval]*/)
{
  return (*this)->get_DisplayFormat(pFormat);
}

template <class T> Frontpage_xp::FpChoiceFieldFormat __fastcall
TCOM_ListFieldChoiceT<T>::get_DisplayFormat(void)
{
  Frontpage_xp::FpChoiceFieldFormat pFormat;
  OLECHECK(this->get_DisplayFormat((Frontpage_xp::FpChoiceFieldFormat*)&pFormat));
  return pFormat;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::set_DisplayFormat(Frontpage_xp::FpChoiceFieldFormat pFormat/*[in]*/)
{
  return (*this)->set_DisplayFormat(pFormat);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::get_Choices(LPSAFEARRAY* ppsaChoices/*[out,retval]*/)
{
  return (*this)->get_Choices(ppsaChoices);
}

template <class T> LPSAFEARRAY __fastcall
TCOM_ListFieldChoiceT<T>::get_Choices(void)
{
  LPSAFEARRAY ppsaChoices;
  OLECHECK(this->get_Choices((LPSAFEARRAY*)&ppsaChoices));
  return ppsaChoices;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::SetChoices(LPSAFEARRAY* ppsaChoices/*[in]*/)
{
  return (*this)->SetChoices(ppsaChoices);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::AddChoice(BSTR Text/*[in]*/, long Index/*[in,def,opt]*/)
{
  return (*this)->AddChoice(Text, Index);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::RemoveChoice(long Index/*[in]*/)
{
  return (*this)->RemoveChoice(Index);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::ClearChoices(void)
{
  return (*this)->ClearChoices();
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pvDefaultValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldChoiceT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
  return pvDefaultValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  return (*this)->set_DefaultValue(pvDefaultValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::get_Required(TOLEBOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(VARIANT_BOOL*)pRequired);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListFieldChoiceT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
  return (TOLEBOOL)pRequired;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldChoiceT<T>::set_Required(TOLEBOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(VARIANT_BOOL)pRequired);
}

// *********************************************************************//
// DispIntf:  _ListFieldChoice
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47C-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_DisplayFormat(Frontpage_xp::FpChoiceFieldFormat* pFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFormat"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpChoiceFieldFormat __fastcall
_ListFieldChoiceDispT<T>::get_DisplayFormat(void)
{
  Frontpage_xp::FpChoiceFieldFormat pFormat;
  this->get_DisplayFormat((Frontpage_xp::FpChoiceFieldFormat*)&pFormat);
  return pFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::set_DisplayFormat(Frontpage_xp::FpChoiceFieldFormat pFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFormat"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = (int)pFormat /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_Choices(LPSAFEARRAY* ppsaChoices/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Choices"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppsaChoices /*[VT_SAFEARRAY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
_ListFieldChoiceDispT<T>::get_Choices(void)
{
  LPSAFEARRAY ppsaChoices;
  this->get_Choices((LPSAFEARRAY*)&ppsaChoices);
  return ppsaChoices;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::SetChoices(LPSAFEARRAY* ppsaChoices/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetChoices"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = ppsaChoices /*[VT_SAFEARRAY:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::AddChoice(BSTR Text/*[in]*/, long Index/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddChoice"), DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = Text /*[VT_BSTR:0]*/;
  _args[2] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::RemoveChoice(long Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveChoice"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::ClearChoices()
{
  _TDispID _dispid(*this, OLETEXT("ClearChoices"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvDefaultValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldChoiceDispT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  this->get_DefaultValue((VARIANT*)&pvDefaultValue);
  return pvDefaultValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = pvDefaultValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRequired /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldChoiceDispT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  this->get_Required((VARIANT_BOOL*)&pRequired);
  return pRequired;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = pRequired /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldChoiceDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldChoiceDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldChoiceDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldChoiceDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldChoiceDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldChoiceDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldChoiceDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldChoiceDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldLookup
// Interface: _ListFieldLookup
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldLookupT<T>::get_LookupField(Frontpage_xp::_ListField** ppField/*[out,retval]*/)
{
  return (*this)->get_LookupField(ppField);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldLookupT<T>::get_LookupField(Frontpage_xp::_ListFieldPtr* ppField/*[out,retval]*/)
{
  return (*this)->get_LookupField(_ListField**)ppField);
}

template <class T> Frontpage_xp::_ListFieldPtr __fastcall
TCOM_ListFieldLookupT<T>::get_LookupField(void)
{
  Frontpage_xp::_ListField* ppField;
  OLECHECK(this->get_LookupField((Frontpage_xp::_ListField**)&ppField));
  return (Frontpage_xp::_ListFieldPtr)ppField;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldLookupT<T>::set_LookupField(Frontpage_xp::_ListField* ppField/*[in]*/)
{
  return (*this)->set_LookupField(ppField);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldLookupT<T>::set_LookupField(Frontpage_xp::_ListFieldPtr ppField/*[in]*/)
{
  return (*this)->set_LookupField(_ListField*)ppField);
}

// *********************************************************************//
// DispIntf:  _ListFieldLookup
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47D-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::get_LookupField(Frontpage_xp::_ListField** ppField/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LookupField"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_ListField**)ppField /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_ListField* __fastcall
_ListFieldLookupDispT<T>::get_LookupField(void)
{
  Frontpage_xp::_ListField* ppField;
  this->get_LookupField((Frontpage_xp::_ListField**)&ppField);
  return ppField;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::set_LookupField(Frontpage_xp::_ListField* ppField/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LookupField"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::_ListField*)ppField /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldLookupDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldLookupDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldLookupDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldLookupDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldLookupDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldLookupDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldLookupDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldLookupDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldTrueFalse
// Interface: _ListFieldTrueFalse
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldTrueFalseT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pvDefaultValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldTrueFalseT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
  return pvDefaultValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldTrueFalseT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  return (*this)->set_DefaultValue(pvDefaultValue);
}

// *********************************************************************//
// DispIntf:  _ListFieldTrueFalse
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47E-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvDefaultValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldTrueFalseDispT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  this->get_DefaultValue((VARIANT*)&pvDefaultValue);
  return pvDefaultValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = pvDefaultValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldTrueFalseDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldTrueFalseDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldTrueFalseDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldTrueFalseDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldTrueFalseDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldTrueFalseDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldTrueFalseDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldTrueFalseDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldURL
// Interface: _ListFieldURL
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOM_ListFieldURLT<T>::get_DisplayFormat(Frontpage_xp::FpURLFieldFormat* pFormat/*[out,retval]*/)
{
  return (*this)->get_DisplayFormat(pFormat);
}

template <class T> Frontpage_xp::FpURLFieldFormat __fastcall
TCOM_ListFieldURLT<T>::get_DisplayFormat(void)
{
  Frontpage_xp::FpURLFieldFormat pFormat;
  OLECHECK(this->get_DisplayFormat((Frontpage_xp::FpURLFieldFormat*)&pFormat));
  return pFormat;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldURLT<T>::set_DisplayFormat(Frontpage_xp::FpURLFieldFormat pFormat/*[in]*/)
{
  return (*this)->set_DisplayFormat(pFormat);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldURLT<T>::get_DefaultText(BSTR* pbstrDefaultText/*[out,retval]*/)
{
  return (*this)->get_DefaultText(pbstrDefaultText);
}

template <class T> BSTR __fastcall
TCOM_ListFieldURLT<T>::get_DefaultText(void)
{
  BSTR pbstrDefaultText = 0;
  OLECHECK(this->get_DefaultText((BSTR*)&pbstrDefaultText));
  return pbstrDefaultText;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldURLT<T>::set_DefaultText(BSTR pbstrDefaultText/*[in]*/)
{
  return (*this)->set_DefaultText(pbstrDefaultText);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldURLT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  return (*this)->get_DefaultValue(pvDefaultValue);
}

template <class T> VARIANT __fastcall
TCOM_ListFieldURLT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  OLECHECK(this->get_DefaultValue((VARIANT*)&pvDefaultValue));
  return pvDefaultValue;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldURLT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  return (*this)->set_DefaultValue(pvDefaultValue);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldURLT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldURLT<T>::get_Required(TOLEBOOL* pRequired/*[out,retval]*/)
{
  return (*this)->get_Required(VARIANT_BOOL*)pRequired);
}

template <class T> TOLEBOOL __fastcall
TCOM_ListFieldURLT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  OLECHECK(this->get_Required((VARIANT_BOOL*)&pRequired));
  return (TOLEBOOL)pRequired;
}

template <class T> HRESULT __fastcall
TCOM_ListFieldURLT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(pRequired);
}

template <class T> HRESULT __fastcall
TCOM_ListFieldURLT<T>::set_Required(TOLEBOOL pRequired/*[in]*/)
{
  return (*this)->set_Required(VARIANT_BOOL)pRequired);
}

// *********************************************************************//
// DispIntf:  _ListFieldURL
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B47F-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_DisplayFormat(Frontpage_xp::FpURLFieldFormat* pFormat/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFormat"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pFormat /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpURLFieldFormat __fastcall
_ListFieldURLDispT<T>::get_DisplayFormat(void)
{
  Frontpage_xp::FpURLFieldFormat pFormat;
  this->get_DisplayFormat((Frontpage_xp::FpURLFieldFormat*)&pFormat);
  return pFormat;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::set_DisplayFormat(Frontpage_xp::FpURLFieldFormat pFormat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisplayFormat"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = (int)pFormat /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_DefaultText(BSTR* pbstrDefaultText/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultText"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDefaultText /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldURLDispT<T>::get_DefaultText(void)
{
  BSTR pbstrDefaultText;
  this->get_DefaultText((BSTR*)&pbstrDefaultText);
  return pbstrDefaultText;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::set_DefaultText(BSTR pbstrDefaultText/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultText"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = pbstrDefaultText /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_DefaultValue(VARIANT* pvDefaultValue/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvDefaultValue /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_ListFieldURLDispT<T>::get_DefaultValue(void)
{
  VARIANT pvDefaultValue;
  this->get_DefaultValue((VARIANT*)&pvDefaultValue);
  return pvDefaultValue;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::set_DefaultValue(VARIANT* pvDefaultValue/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultValue"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = pvDefaultValue /*[VT_VARIANT:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_Required(VARIANT_BOOL* pRequired/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pRequired /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldURLDispT<T>::get_Required(void)
{
  VARIANT_BOOL pRequired;
  this->get_Required((VARIANT_BOOL*)&pRequired);
  return pRequired;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::set_Required(VARIANT_BOOL pRequired/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Required"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pRequired /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldURLDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldURLDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldURLDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldURLDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldURLDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldURLDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldURLDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldURLDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldCounter
// Interface: _ListFieldCounter
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ListFieldCounter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B49D-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldCounterDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldCounterDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldCounterDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldCounterDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldCounterDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldCounterDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldCounterDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldCounterDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldInteger
// Interface: _ListFieldInteger
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ListFieldInteger
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B496-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldIntegerDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldIntegerDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldIntegerDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldIntegerDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldIntegerDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldIntegerDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldIntegerDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldIntegerDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldComputed
// Interface: _ListFieldComputed
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ListFieldComputed
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B497-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldComputedDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldComputedDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldComputedDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldComputedDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldComputedDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldComputedDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldComputedDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldComputedDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// SmartIntf: TCOM_ListFieldFile
// Interface: _ListFieldFile
// *********************************************************************//
// *********************************************************************//
// DispIntf:  _ListFieldFile
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {46D9B498-C22B-11D3-8746-00C04F79E87D}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::get_Name(BSTR* pbstrName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrName /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldFileDispT<T>::get_Name(void)
{
  BSTR pbstrName;
  this->get_Name((BSTR*)&pbstrName);
  return pbstrName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::set_Name(BSTR pbstrName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pbstrName /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::get_Description(BSTR* pbstrDescription/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDescription /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_ListFieldFileDispT<T>::get_Description(void)
{
  BSTR pbstrDescription;
  this->get_Description((BSTR*)&pbstrDescription);
  return pbstrDescription;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::set_Description(BSTR pbstrDescription/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Description"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = pbstrDescription /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::get_Type(Frontpage_xp::FpFieldType* pType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::FpFieldType __fastcall
_ListFieldFileDispT<T>::get_Type(void)
{
  Frontpage_xp::FpFieldType pType;
  this->get_Type((Frontpage_xp::FpFieldType*)&pType);
  return pType;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::get_ReadOnly(VARIANT_BOOL* pReadOnly/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(5));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pReadOnly /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_ListFieldFileDispT<T>::get_ReadOnly(void)
{
  VARIANT_BOOL pReadOnly;
  this->get_ReadOnly((VARIANT_BOOL*)&pReadOnly);
  return pReadOnly;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::get_Web(Frontpage_xp::Web** pWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Web"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWeb /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
_ListFieldFileDispT<T>::get_Web(void)
{
  Frontpage_xp::Web* pWeb;
  this->get_Web((Frontpage_xp::Web**)&pWeb);
  return pWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Delete()
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Reserved1()
{
  _TDispID _dispid(*this, OLETEXT("Reserved1"), DISPID(8));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Reserved2()
{
  _TDispID _dispid(*this, OLETEXT("Reserved2"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Reserved3()
{
  _TDispID _dispid(*this, OLETEXT("Reserved3"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Reserved4()
{
  _TDispID _dispid(*this, OLETEXT("Reserved4"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Reserved5()
{
  _TDispID _dispid(*this, OLETEXT("Reserved5"), DISPID(12));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Reserved6()
{
  _TDispID _dispid(*this, OLETEXT("Reserved6"), DISPID(13));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Reserved7()
{
  _TDispID _dispid(*this, OLETEXT("Reserved7"), DISPID(14));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Reserved8()
{
  _TDispID _dispid(*this, OLETEXT("Reserved8"), DISPID(15));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Reserved9()
{
  _TDispID _dispid(*this, OLETEXT("Reserved9"), DISPID(16));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::Reserved10()
{
  _TDispID _dispid(*this, OLETEXT("Reserved10"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::get_Application(Frontpage_xp::_Application** pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Application"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::_Application**)pVal /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Frontpage_xp::_Application* __fastcall
_ListFieldFileDispT<T>::get_Application(void)
{
  Frontpage_xp::_Application* pVal;
  this->get_Application((Frontpage_xp::_Application**)&pVal);
  return pVal;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
_ListFieldFileDispT<T>::get_Parent(LPDISPATCH* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Parent"), DISPID(-2147418104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_ListFieldFileDispT<T>::get_Parent(void)
{
  LPDISPATCH pVal;
  this->get_Parent((LPDISPATCH*)&pVal);
  return pVal;
}

// *********************************************************************//
// DispIntf:  _IApplicationEvents
// Flags:     (4096) Dispatchable
// GUID:      {F5D15700-E9D8-11D1-B0DF-00C04FA30A8B}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnWebNew(Frontpage_xp::Web* pWeb/*[in]*/)
{
  _TDispID _dispid(/* OnWebNew */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnWebOpen(Frontpage_xp::Web* pWeb/*[in]*/)
{
  _TDispID _dispid(/* OnWebOpen */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnWebClose(Frontpage_xp::Web* pWeb/*[in]*/, 
                                        VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnWebClose */ DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
  _args[2] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnBeforeWebPublish(Frontpage_xp::Web* pWeb/*[in]*/, 
                                                BSTR* Destination/*[in]*/, 
                                                VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnBeforeWebPublish */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
  _args[2] = Destination /*[VT_BSTR:1]*/;
  _args[3] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnAfterWebPublish(Frontpage_xp::Web* pWeb/*[in]*/, 
                                               VARIANT_BOOL* Success/*[in]*/)
{
  _TDispID _dispid(/* OnAfterWebPublish */ DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
  _args[2] = Success /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnPageNew(Frontpage_xp::PageWindow* pPage/*[in]*/)
{
  _TDispID _dispid(/* OnPageNew */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnPageOpen(Frontpage_xp::PageWindow* pPage/*[in]*/)
{
  _TDispID _dispid(/* OnPageOpen */ DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnPageClose(Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                         VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnPageClose */ DISPID(8));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
  _args[2] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnBeforePageSave(Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                              VARIANT_BOOL* SaveAsUI/*[in]*/, 
                                              VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnBeforePageSave */ DISPID(9));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
  _args[2] = SaveAsUI /*[VT_BOOL:1]*/;
  _args[3] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnAfterPageSave(Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                             VARIANT_BOOL* Success/*[in]*/)
{
  _TDispID _dispid(/* OnAfterPageSave */ DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
  _args[2] = Success /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::WindowActivate(Frontpage_xp::WebWindow* pWebWindow/*[in]*/)
{
  _TDispID _dispid(/* WindowActivate */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::WindowDeactivate(Frontpage_xp::WebWindow* pWebWindow/*[in]*/)
{
  _TDispID _dispid(/* WindowDeactivate */ DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnBeforeWebWindowViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/
                                                         , 
                                                         Frontpage_xp::FpWebViewModeEx TargetView/*[in]*/
                                                         , VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnBeforeWebWindowViewChange */ DISPID(13));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)TargetView /*[VT_USERDEFINED:0]*/;
  _args[3] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnAfterWebWindowViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/)
{
  _TDispID _dispid(/* OnAfterWebWindowViewChange */ DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnRecalculateHyperlinks(Frontpage_xp::Web* pWeb/*[in]*/, 
                                                     VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnRecalculateHyperlinks */ DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
  _args[2] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnBeforePageWindowViewChange(Frontpage_xp::PageWindow* pPage/*[in]*/, 
                                                          Frontpage_xp::FpPageViewMode TargetView/*[in]*/
                                                          , VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnBeforePageWindowViewChange */ DISPID(16));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)TargetView /*[VT_USERDEFINED:0]*/;
  _args[3] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnAfterPageWindowViewChange(Frontpage_xp::PageWindow* pPage/*[in]*/)
{
  _TDispID _dispid(/* OnAfterPageWindowViewChange */ DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnPageWindowActivate(Frontpage_xp::PageWindow* pPage/*[in]*/)
{
  _TDispID _dispid(/* OnPageWindowActivate */ DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::PageWindow*)pPage /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnWebFileCheckOut(Frontpage_xp::Web* pWeb/*[in]*/, 
                                               Frontpage_xp::WebFile* pFile/*[in]*/, 
                                               VARIANT_BOOL* CheckedOut/*[in]*/, 
                                               Frontpage_xp::FpCheckOutOption* pCheckOutOption/*[in]*/)
{
  _TDispID _dispid(/* OnWebFileCheckOut */ DISPID(19));
  TAutoArgs<4> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::Web*)pWeb /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Frontpage_xp::WebFile*)pFile /*[VT_USERDEFINED:1]*/;
  _args[3] = CheckedOut /*[VT_BOOL:1]*/;
  _args[4] = (int*)pCheckOutOption /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnBeforeWebWindowSubViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/
                                                            , 
                                                            Frontpage_xp::FpWebSubView TargetSubView/*[in]*/
                                                            , VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnBeforeWebWindowSubViewChange */ DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)TargetSubView /*[VT_USERDEFINED:0]*/;
  _args[3] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IApplicationEventsDispT<T>::OnAfterWebWindowSubViewChange(Frontpage_xp::WebWindow* pWebWindow/*[in]*/)
{
  _TDispID _dispid(/* OnAfterWebWindowSubViewChange */ DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::WebWindow*)pWebWindow /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  IWebber
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BBD4A72-661D-11CF-A3C4-00A024184692}
// *********************************************************************//
template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiCreateWeb(BSTR szServerURL, BSTR szWebName)
{
  _TDispID _dispid(*this, OLETEXT("vtiCreateWeb"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = szServerURL /*[VT_BSTR:0]*/;
  _args[2] = szWebName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IWebberDispT<T>::vtiRefreshWebFromServer()
{
  _TDispID _dispid(*this, OLETEXT("vtiRefreshWebFromServer"), DISPID(2));
  OleProcedure(_dispid);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiPutDocument(BSTR szFileName, BSTR szURL, long bBlockingRequest)
{
  _TDispID _dispid(*this, OLETEXT("vtiPutDocument"), DISPID(3));
  TAutoArgs<3> _args;
  _args[1] = szFileName /*[VT_BSTR:0]*/;
  _args[2] = szURL /*[VT_BSTR:0]*/;
  _args[3] = bBlockingRequest /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiPutWebMetaInfo(BSTR szNameValuePairs)
{
  _TDispID _dispid(*this, OLETEXT("vtiPutWebMetaInfo"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = szNameValuePairs /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IWebberDispT<T>::vtiSetWebRecalcDependencies(long bRecalcOn)
{
  _TDispID _dispid(*this, OLETEXT("vtiSetWebRecalcDependencies"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = bRecalcOn /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetWebPageMetaInfo(BSTR szURL, BSTR szKeyName)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetWebPageMetaInfo"), DISPID(6));
  TAutoArgs<2> _args;
  _args[1] = szURL /*[VT_BSTR:0]*/;
  _args[2] = szKeyName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiRemoveWebPages(BSTR pszPageList)
{
  _TDispID _dispid(*this, OLETEXT("vtiRemoveWebPages"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = pszPageList /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiEditForToDoList(BSTR szURL, BSTR szCookie, long lKey)
{
  _TDispID _dispid(*this, OLETEXT("vtiEditForToDoList"), DISPID(8));
  TAutoArgs<3> _args;
  _args[1] = szURL /*[VT_BSTR:0]*/;
  _args[2] = szCookie /*[VT_BSTR:0]*/;
  _args[3] = lKey /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IWebberDispT<T>::vtiBringToTop()
{
  _TDispID _dispid(*this, OLETEXT("vtiBringToTop"), DISPID(9));
  OleProcedure(_dispid);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetWebTitle()
{
  _TDispID _dispid(*this, OLETEXT("vtiGetWebTitle"), DISPID(11));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetWebURL()
{
  _TDispID _dispid(*this, OLETEXT("vtiGetWebURL"), DISPID(12));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IWebberDispT<T>::vtiPromptOpenWeb()
{
  _TDispID _dispid(*this, OLETEXT("vtiPromptOpenWeb"), DISPID(13));
  OleProcedure(_dispid);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiRemoveWeb(BSTR szWebName)
{
  _TDispID _dispid(*this, OLETEXT("vtiRemoveWeb"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = szWebName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiIsPageInWeb(BSTR szURL)
{
  _TDispID _dispid(*this, OLETEXT("vtiIsPageInWeb"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = szURL /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetWebMetaInfo(BSTR szKey)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetWebMetaInfo"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = szKey /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetPageList(long lType)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetPageList"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = lType /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiPutDocuments(BSTR szFileList, BSTR szUrlList)
{
  _TDispID _dispid(*this, OLETEXT("vtiPutDocuments"), DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = szFileList /*[VT_BSTR:0]*/;
  _args[2] = szUrlList /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IWebberDispT<T>::vtiCancelRequests()
{
  _TDispID _dispid(*this, OLETEXT("vtiCancelRequests"), DISPID(20));
  OleProcedure(_dispid);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiOpenWeb(BSTR pszServer, BSTR pszWebName, BSTR pszUser)
{
  _TDispID _dispid(*this, OLETEXT("vtiOpenWeb"), DISPID(21));
  TAutoArgs<3> _args;
  _args[1] = pszServer /*[VT_BSTR:0]*/;
  _args[2] = pszWebName /*[VT_BSTR:0]*/;
  _args[3] = pszUser /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiEditWebPage(BSTR pszPageURL)
{
  _TDispID _dispid(*this, OLETEXT("vtiEditWebPage"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pszPageURL /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiPutWebPageMetaInfo(BSTR pszURL, BSTR pszNameValuePairs)
{
  _TDispID _dispid(*this, OLETEXT("vtiPutWebPageMetaInfo"), DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = pszURL /*[VT_BSTR:0]*/;
  _args[2] = pszNameValuePairs /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiGetDocToFile(BSTR pszURL, BSTR pszFilename)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetDocToFile"), DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = pszURL /*[VT_BSTR:0]*/;
  _args[2] = pszFilename /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetBotsList(long* bNewBotsList)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetBotsList"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = bNewBotsList /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetBotModule(BSTR pszBotDir, BSTR pszBotModule)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetBotModule"), DISPID(26));
  TAutoArgs<2> _args;
  _args[1] = pszBotDir /*[VT_BSTR:0]*/;
  _args[2] = pszBotModule /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiCreateFolder(BSTR pszFolderUrl)
{
  _TDispID _dispid(*this, OLETEXT("vtiCreateFolder"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = pszFolderUrl /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetFoldersList(BSTR pszParentFolderUrl)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetFoldersList"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = pszParentFolderUrl /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetPagesInFolder(BSTR pszFolderUrl, long lType)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetPagesInFolder"), DISPID(29));
  TAutoArgs<2> _args;
  _args[1] = pszFolderUrl /*[VT_BSTR:0]*/;
  _args[2] = lType /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiEditNextPageWithAction(BSTR prevURL)
{
  _TDispID _dispid(*this, OLETEXT("vtiEditNextPageWithAction"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = prevURL /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiEditImage(BSTR szFileName, BSTR szURL)
{
  _TDispID _dispid(*this, OLETEXT("vtiEditImage"), DISPID(31));
  TAutoArgs<2> _args;
  _args[1] = szFileName /*[VT_BSTR:0]*/;
  _args[2] = szURL /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiPutDocumentDTM(BSTR szFileName, BSTR szURL, long lDateTimeModified, 
                                   long bBlockingRequest)
{
  _TDispID _dispid(*this, OLETEXT("vtiPutDocumentDTM"), DISPID(32));
  TAutoArgs<4> _args;
  _args[1] = szFileName /*[VT_BSTR:0]*/;
  _args[2] = szURL /*[VT_BSTR:0]*/;
  _args[3] = lDateTimeModified /*[VT_I4:0]*/;
  _args[4] = bBlockingRequest /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtigetbotslistex(long* bNewBotsList)
{
  _TDispID _dispid(*this, OLETEXT("vtigetbotslistex"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = bNewBotsList /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiOpenWebWithPassword(BSTR pszServer, BSTR pszWebName, BSTR pszUser, 
                                        BSTR pszPassword)
{
  _TDispID _dispid(*this, OLETEXT("vtiOpenWebWithPassword"), DISPID(34));
  TAutoArgs<4> _args;
  _args[1] = pszServer /*[VT_BSTR:0]*/;
  _args[2] = pszWebName /*[VT_BSTR:0]*/;
  _args[3] = pszUser /*[VT_BSTR:0]*/;
  _args[4] = pszPassword /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiListWebs(BSTR pszServer, BSTR pszUser, BSTR pszPassword)
{
  _TDispID _dispid(*this, OLETEXT("vtiListWebs"), DISPID(35));
  TAutoArgs<3> _args;
  _args[1] = pszServer /*[VT_BSTR:0]*/;
  _args[2] = pszUser /*[VT_BSTR:0]*/;
  _args[3] = pszPassword /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IWebberDispT<T>::vtiDisableErrorDialogs(long bYesNo)
{
  _TDispID _dispid(*this, OLETEXT("vtiDisableErrorDialogs"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = bYesNo /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IWebberDispT<T>::vtiQuit()
{
  _TDispID _dispid(*this, OLETEXT("vtiQuit"), DISPID(37));
  OleProcedure(_dispid);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiPublishWeb(BSTR pszServerUrl, BSTR pszWebName, long dwFlags, BSTR pszUser, 
                               BSTR pszPassword)
{
  _TDispID _dispid(*this, OLETEXT("vtiPublishWeb"), DISPID(38));
  TAutoArgs<5> _args;
  _args[1] = pszServerUrl /*[VT_BSTR:0]*/;
  _args[2] = pszWebName /*[VT_BSTR:0]*/;
  _args[3] = dwFlags /*[VT_I4:0]*/;
  _args[4] = pszUser /*[VT_BSTR:0]*/;
  _args[5] = pszPassword /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiImportExternallyEditedFiles()
{
  _TDispID _dispid(*this, OLETEXT("vtiImportExternallyEditedFiles"), DISPID(39));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiRenameDocument(BSTR pszURL, BSTR pszNewURL, long bUpdateBacklinks, 
                                   long bIsFolder, long bCopy, long bForceOverwrite)
{
  _TDispID _dispid(*this, OLETEXT("vtiRenameDocument"), DISPID(40));
  TAutoArgs<6> _args;
  _args[1] = pszURL /*[VT_BSTR:0]*/;
  _args[2] = pszNewURL /*[VT_BSTR:0]*/;
  _args[3] = bUpdateBacklinks /*[VT_I4:0]*/;
  _args[4] = bIsFolder /*[VT_I4:0]*/;
  _args[5] = bCopy /*[VT_I4:0]*/;
  _args[6] = bForceOverwrite /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiIsFeatureSupported(BSTR pszFeature)
{
  _TDispID _dispid(*this, OLETEXT("vtiIsFeatureSupported"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = pszFeature /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiListThemes()
{
  _TDispID _dispid(*this, OLETEXT("vtiListThemes"), DISPID(42));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiApplyTheme(BSTR pszName, long dParams, BSTR fileList)
{
  _TDispID _dispid(*this, OLETEXT("vtiApplyTheme"), DISPID(43));
  TAutoArgs<3> _args;
  _args[1] = pszName /*[VT_BSTR:0]*/;
  _args[2] = dParams /*[VT_I4:0]*/;
  _args[3] = fileList /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetTheme(BSTR pszThemeDirName, BSTR pszLocThemesDir)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetTheme"), DISPID(44));
  TAutoArgs<2> _args;
  _args[1] = pszThemeDirName /*[VT_BSTR:0]*/;
  _args[2] = pszLocThemesDir /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiPutTheme(BSTR pszThemeDirName, BSTR pszThemeVersion, BSTR pszFileList, 
                             BSTR pszLocThemesDir)
{
  _TDispID _dispid(*this, OLETEXT("vtiPutTheme"), DISPID(45));
  TAutoArgs<4> _args;
  _args[1] = pszThemeDirName /*[VT_BSTR:0]*/;
  _args[2] = pszThemeVersion /*[VT_BSTR:0]*/;
  _args[3] = pszFileList /*[VT_BSTR:0]*/;
  _args[4] = pszLocThemesDir /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiPutWebStructure(BSTR pszModifications)
{
  _TDispID _dispid(*this, OLETEXT("vtiPutWebStructure"), DISPID(55));
  TAutoArgs<1> _args;
  _args[1] = pszModifications /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiGetWebStructureRelations(BSTR pszURL, long lRelationType)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetWebStructureRelations"), DISPID(56));
  TAutoArgs<2> _args;
  _args[1] = pszURL /*[VT_BSTR:0]*/;
  _args[2] = lRelationType /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IWebberDispT<T>::vtiReturnDBWRoot(BSTR pszFileURL)
{
  _TDispID _dispid(*this, OLETEXT("vtiReturnDBWRoot"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = pszFileURL /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiMakeThemeFresh(BSTR pszWebUrl, BSTR pszThemeName, long bAllowUpload, 
                                   long bAllowDownload)
{
  _TDispID _dispid(*this, OLETEXT("vtiMakeThemeFresh"), DISPID(58));
  TAutoArgs<4> _args;
  _args[1] = pszWebUrl /*[VT_BSTR:0]*/;
  _args[2] = pszThemeName /*[VT_BSTR:0]*/;
  _args[3] = bAllowUpload /*[VT_I4:0]*/;
  _args[4] = bAllowDownload /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiSetCurrentView(long nViewID, long bTransferSelection, long nFlags)
{
  _TDispID _dispid(*this, OLETEXT("vtiSetCurrentView"), DISPID(59));
  TAutoArgs<3> _args;
  _args[1] = nViewID /*[VT_I4:0]*/;
  _args[2] = bTransferSelection /*[VT_I4:0]*/;
  _args[3] = nFlags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiIsFolderInWeb(BSTR pszFolderUrl)
{
  _TDispID _dispid(*this, OLETEXT("vtiIsFolderInWeb"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = pszFolderUrl /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiSetFolderOptions(BSTR pszFolder, long bExecutable, long bReadable)
{
  _TDispID _dispid(*this, OLETEXT("vtiSetFolderOptions"), DISPID(61));
  TAutoArgs<3> _args;
  _args[1] = pszFolder /*[VT_BSTR:0]*/;
  _args[2] = bExecutable /*[VT_I4:0]*/;
  _args[3] = bReadable /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiPutGlobalThemeDoc(BSTR pszRemoteDir, BSTR pszThemeFile, BSTR pszWebRel, 
                                      long bRunListUrls)
{
  _TDispID _dispid(*this, OLETEXT("vtiPutGlobalThemeDoc"), DISPID(64));
  TAutoArgs<4> _args;
  _args[1] = pszRemoteDir /*[VT_BSTR:0]*/;
  _args[2] = pszThemeFile /*[VT_BSTR:0]*/;
  _args[3] = pszWebRel /*[VT_BSTR:0]*/;
  _args[4] = bRunListUrls /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiRefreshThemeList()
{
  _TDispID _dispid(*this, OLETEXT("vtiRefreshThemeList"), DISPID(65));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiSetEditor(BSTR szType, BSTR szName, BSTR szCommand)
{
  _TDispID _dispid(*this, OLETEXT("vtiSetEditor"), DISPID(66));
  TAutoArgs<3> _args;
  _args[1] = szType /*[VT_BSTR:0]*/;
  _args[2] = szName /*[VT_BSTR:0]*/;
  _args[3] = szCommand /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiListDataSources(long lType, BSTR* pszSources, BSTR* pszAttrs)
{
  _TDispID _dispid(*this, OLETEXT("vtiListDataSources"), DISPID(67));
  TAutoArgs<3> _args;
  _args[1] = lType /*[VT_I4:0]*/;
  _args[2] = pszSources /*[VT_BSTR:1]*/;
  _args[3] = pszAttrs /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiGetDatabaseSchema(BSTR pszConnStr, long lFlags, BSTR* pszSchema)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetDatabaseSchema"), DISPID(68));
  TAutoArgs<3> _args;
  _args[1] = pszConnStr /*[VT_BSTR:0]*/;
  _args[2] = lFlags /*[VT_I4:0]*/;
  _args[3] = pszSchema /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiListRecordSources(BSTR pszConnStr, long lType, BSTR* sources, BSTR* attrs)
{
  _TDispID _dispid(*this, OLETEXT("vtiListRecordSources"), DISPID(69));
  TAutoArgs<4> _args;
  _args[1] = pszConnStr /*[VT_BSTR:0]*/;
  _args[2] = lType /*[VT_I4:0]*/;
  _args[3] = sources /*[VT_BSTR:1]*/;
  _args[4] = attrs /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiGetRecordSourceSchema(BSTR pszConnStr, BSTR pszRecordSource, BSTR* pszSchema)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetRecordSourceSchema"), DISPID(70));
  TAutoArgs<3> _args;
  _args[1] = pszConnStr /*[VT_BSTR:0]*/;
  _args[2] = pszRecordSource /*[VT_BSTR:0]*/;
  _args[3] = pszSchema /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiGetQuerySchema(BSTR pszConnStr, BSTR pszSQL, long lFlags, BSTR* pszSchema)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetQuerySchema"), DISPID(71));
  TAutoArgs<4> _args;
  _args[1] = pszConnStr /*[VT_BSTR:0]*/;
  _args[2] = pszSQL /*[VT_BSTR:0]*/;
  _args[3] = lFlags /*[VT_I4:0]*/;
  _args[4] = pszSchema /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiListDrivers(long lType, BSTR* drivers, BSTR* attrs)
{
  _TDispID _dispid(*this, OLETEXT("vtiListDrivers"), DISPID(72));
  TAutoArgs<3> _args;
  _args[1] = lType /*[VT_I4:0]*/;
  _args[2] = drivers /*[VT_BSTR:1]*/;
  _args[3] = attrs /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiListDataConnections(BSTR* bstrNames, BSTR* bstrConnStrs)
{
  _TDispID _dispid(*this, OLETEXT("vtiListDataConnections"), DISPID(73));
  TAutoArgs<2> _args;
  _args[1] = bstrNames /*[VT_BSTR:1]*/;
  _args[2] = bstrConnStrs /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiSetDataConnections(BSTR names, BSTR attrs)
{
  _TDispID _dispid(*this, OLETEXT("vtiSetDataConnections"), DISPID(74));
  TAutoArgs<2> _args;
  _args[1] = names /*[VT_BSTR:0]*/;
  _args[2] = attrs /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IWebberDispT<T>::vtiWebSettingsDlg(long flags)
{
  _TDispID _dispid(*this, OLETEXT("vtiWebSettingsDlg"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = flags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  IPageEditor
// Flags:     (4112) Hidden Dispatchable
// GUID:      {8BBD4A7B-661D-11CF-A3C4-00A024184692}
// *********************************************************************//
template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
IPageEditorDispT<T>::vtiOpenWebPage(BSTR szFileName, BSTR szURL, BSTR szWebUrl, BSTR szWebTitle)
{
  _TDispID _dispid(*this, OLETEXT("vtiOpenWebPage"), DISPID(1));
  TAutoArgs<4> _args;
  _args[1] = szFileName /*[VT_BSTR:0]*/;
  _args[2] = szURL /*[VT_BSTR:0]*/;
  _args[3] = szWebUrl /*[VT_BSTR:0]*/;
  _args[4] = szWebTitle /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IPageEditorDispT<T>::vtiQueryWebPage(BSTR szURL, BSTR szWebUrl)
{
  _TDispID _dispid(*this, OLETEXT("vtiQueryWebPage"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = szURL /*[VT_BSTR:0]*/;
  _args[2] = szWebUrl /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPageEditorDispT<T>::vtiBringToTop()
{
  _TDispID _dispid(*this, OLETEXT("vtiBringToTop"), DISPID(4));
  OleProcedure(_dispid);
}

template <class T> LPDISPATCH /*[VT_DISPATCH:0]*/ __fastcall
IPageEditorDispT<T>::vtiNewWebPage(BSTR szURL, BSTR szWebUrl, BSTR szWebTitle)
{
  _TDispID _dispid(*this, OLETEXT("vtiNewWebPage"), DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = szURL /*[VT_BSTR:0]*/;
  _args[2] = szWebUrl /*[VT_BSTR:0]*/;
  _args[3] = szWebTitle /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IPageEditorDispT<T>::vtiBringPageToTop(BSTR szURL, BSTR szWebUrl, BSTR szCookie, long toDoTaskId)
{
  _TDispID _dispid(*this, OLETEXT("vtiBringPageToTop"), DISPID(6));
  TAutoArgs<4> _args;
  _args[1] = szURL /*[VT_BSTR:0]*/;
  _args[2] = szWebUrl /*[VT_BSTR:0]*/;
  _args[3] = szCookie /*[VT_BSTR:0]*/;
  _args[4] = toDoTaskId /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IPageEditorDispT<T>::vtiListOpenDocs()
{
  _TDispID _dispid(*this, OLETEXT("vtiListOpenDocs"), DISPID(12));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPageEditorDispT<T>::vtiRefreshDocument(BSTR szPageUrl, BSTR szWebUrl)
{
  _TDispID _dispid(*this, OLETEXT("vtiRefreshDocument"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = szPageUrl /*[VT_BSTR:0]*/;
  _args[2] = szWebUrl /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IPageEditorDispT<T>::vtiGetBookmarkList(BSTR pszPageURL, BSTR pszWebUrl)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetBookmarkList"), DISPID(17));
  TAutoArgs<2> _args;
  _args[1] = pszPageURL /*[VT_BSTR:0]*/;
  _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IPageEditorDispT<T>::vtiScrollToBookmark(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszBookmark)
{
  _TDispID _dispid(*this, OLETEXT("vtiScrollToBookmark"), DISPID(18));
  TAutoArgs<3> _args;
  _args[1] = pszPageURL /*[VT_BSTR:0]*/;
  _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
  _args[3] = pszBookmark /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IPageEditorDispT<T>::vtiInsertFile(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszFile)
{
  _TDispID _dispid(*this, OLETEXT("vtiInsertFile"), DISPID(19));
  TAutoArgs<3> _args;
  _args[1] = pszPageURL /*[VT_BSTR:0]*/;
  _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
  _args[3] = pszFile /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IPageEditorDispT<T>::vtiInsertImage(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszFile)
{
  _TDispID _dispid(*this, OLETEXT("vtiInsertImage"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = pszPageURL /*[VT_BSTR:0]*/;
  _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
  _args[3] = pszFile /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IPageEditorDispT<T>::vtiGetTopPageUrl()
{
  _TDispID _dispid(*this, OLETEXT("vtiGetTopPageUrl"), DISPID(21));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IPageEditorDispT<T>::vtiInsertHTML(BSTR pszHTML)
{
  _TDispID _dispid(*this, OLETEXT("vtiInsertHTML"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = pszHTML /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPageEditorDispT<T>::vtiPaste()
{
  _TDispID _dispid(*this, OLETEXT("vtiPaste"), DISPID(23));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
IPageEditorDispT<T>::vtiQuit()
{
  _TDispID _dispid(*this, OLETEXT("vtiQuit"), DISPID(24));
  OleProcedure(_dispid);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IPageEditorDispT<T>::vtiSetMetaTag(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszKey, BSTR pszValue, 
                                   long lIndex, long flags)
{
  _TDispID _dispid(*this, OLETEXT("vtiSetMetaTag"), DISPID(26));
  TAutoArgs<6> _args;
  _args[1] = pszPageURL /*[VT_BSTR:0]*/;
  _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
  _args[3] = pszKey /*[VT_BSTR:0]*/;
  _args[4] = pszValue /*[VT_BSTR:0]*/;
  _args[5] = lIndex /*[VT_I4:0]*/;
  _args[6] = flags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IPageEditorDispT<T>::vtiListMetaTags(BSTR pszPageURL, BSTR pszWebUrl, long flags)
{
  _TDispID _dispid(*this, OLETEXT("vtiListMetaTags"), DISPID(27));
  TAutoArgs<3> _args;
  _args[1] = pszPageURL /*[VT_BSTR:0]*/;
  _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
  _args[3] = flags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IPageEditorDispT<T>::vtiDeleteMetaTag(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszKey, long lIndex, 
                                      long flags)
{
  _TDispID _dispid(*this, OLETEXT("vtiDeleteMetaTag"), DISPID(28));
  TAutoArgs<5> _args;
  _args[1] = pszPageURL /*[VT_BSTR:0]*/;
  _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
  _args[3] = pszKey /*[VT_BSTR:0]*/;
  _args[4] = lIndex /*[VT_I4:0]*/;
  _args[5] = flags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
IPageEditorDispT<T>::vtiGetMetaTag(BSTR pszPageURL, BSTR pszWebUrl, BSTR pszKey, long lIndex, 
                                   long flags)
{
  _TDispID _dispid(*this, OLETEXT("vtiGetMetaTag"), DISPID(29));
  TAutoArgs<5> _args;
  _args[1] = pszPageURL /*[VT_BSTR:0]*/;
  _args[2] = pszWebUrl /*[VT_BSTR:0]*/;
  _args[3] = pszKey /*[VT_BSTR:0]*/;
  _args[4] = lIndex /*[VT_I4:0]*/;
  _args[5] = flags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IPageEditorDispT<T>::vtiQueryWebPageEx(BSTR szURL, BSTR szWebUrl, long* bDirty, long* bWritable)
{
  _TDispID _dispid(*this, OLETEXT("vtiQueryWebPageEx"), DISPID(30));
  TAutoArgs<4> _args;
  _args[1] = szURL /*[VT_BSTR:0]*/;
  _args[2] = szWebUrl /*[VT_BSTR:0]*/;
  _args[3] = bDirty /*[VT_I4:1]*/;
  _args[4] = bWritable /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// SmartIntf: TCOMIExplorerWebs
// Interface: IExplorerWebs
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::CreateWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                 Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                 Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  return (*this)->CreateWeb(serverUrl, webName, oflag, Web);
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
TCOMIExplorerWebsT<T>::CreateWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                 Frontpage_xp::WebOpenFlags oflag/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  OLECHECK(this->CreateWeb(, (Frontpage_xp::IExplorerWeb**)&Web));
  return Web;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::OpenWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, BSTR user/*[in]*/, 
                               Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                               Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  return (*this)->OpenWeb(serverUrl, webName, user, oflag, Web);
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
TCOMIExplorerWebsT<T>::OpenWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, BSTR user/*[in]*/, 
                               Frontpage_xp::WebOpenFlags oflag/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  OLECHECK(this->OpenWeb(, (Frontpage_xp::IExplorerWeb**)&Web));
  return Web;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::OpenWebWithPassword(BSTR server/*[in]*/, BSTR webName/*[in]*/, 
                                           BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                           Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                           Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  return (*this)->OpenWebWithPassword(server, webName, user, Password, oflag, Web);
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
TCOMIExplorerWebsT<T>::OpenWebWithPassword(BSTR server/*[in]*/, BSTR webName/*[in]*/, 
                                           BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                           Frontpage_xp::WebOpenFlags oflag/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  OLECHECK(this->OpenWebWithPassword(, (Frontpage_xp::IExplorerWeb**)&Web));
  return Web;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::BringToTop(void)
{
  return (*this)->BringToTop();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::PromptOpenWeb(long inCurrentWindow/*[in]*/, 
                                     Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  return (*this)->PromptOpenWeb(inCurrentWindow, Web);
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
TCOMIExplorerWebsT<T>::PromptOpenWeb(long inCurrentWindow/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  OLECHECK(this->PromptOpenWeb(, (Frontpage_xp::IExplorerWeb**)&Web));
  return Web;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::RemoveWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/)
{
  return (*this)->RemoveWeb(serverUrl, webName);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::SetEditor(BSTR Type/*[in]*/, BSTR Name/*[in]*/, BSTR command/*[in]*/)
{
  return (*this)->SetEditor(Type, Name, command);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::DisableErrorDialogs(long bYesNo/*[in]*/)
{
  return (*this)->DisableErrorDialogs(bYesNo);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::Quit(void)
{
  return (*this)->Quit();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::ListOpenWebs(BSTR* Webs/*[out,retval]*/)
{
  return (*this)->ListOpenWebs(Webs);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebsT<T>::ListOpenWebs(void)
{
  BSTR Webs = 0;
  OLECHECK(this->ListOpenWebs((BSTR*)&Webs));
  return Webs;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::GetOpenWeb(BSTR WebUrl/*[in]*/, 
                                  Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  return (*this)->GetOpenWeb(WebUrl, Web);
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
TCOMIExplorerWebsT<T>::GetOpenWeb(BSTR WebUrl/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  OLECHECK(this->GetOpenWeb(, (Frontpage_xp::IExplorerWeb**)&Web));
  return Web;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::EditWebPage(BSTR Url)
{
  return (*this)->EditWebPage(Url);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::GetThemePaths(BSTR* themePaths/*[out]*/, BSTR* customThemePath/*[out]*/)
{
  return (*this)->GetThemePaths(themePaths, customThemePath);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::ParseURL(BSTR Url/*[in]*/, BSTR* serverUrl/*[out]*/, BSTR* webName/*[out]*/, 
                                BSTR* pageUrl/*[out]*/)
{
  return (*this)->ParseURL(Url, serverUrl, webName, pageUrl);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::CreateWebWithPassword(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                             BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                             Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                             Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  return (*this)->CreateWebWithPassword(serverUrl, webName, user, Password, oflag, Web);
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
TCOMIExplorerWebsT<T>::CreateWebWithPassword(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                             BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                             Frontpage_xp::WebOpenFlags oflag/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  OLECHECK(this->CreateWebWithPassword(, (Frontpage_xp::IExplorerWeb**)&Web));
  return Web;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::GetThemePath(BSTR ThemeName/*[in]*/, BSTR* themePath/*[out]*/)
{
  return (*this)->GetThemePath(ThemeName, themePath);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::NewWindow(void)
{
  return (*this)->NewWindow();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::EditInFrontPage(BSTR Url, Frontpage_xp::RequestDocumentsFlags flags)
{
  return (*this)->EditInFrontPage(Url, flags);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::GetMSOHInstace(long* hInstPtr/*[out]*/)
{
  return (*this)->GetMSOHInstace(hInstPtr);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::NextPane(void)
{
  return (*this)->NextPane();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::GetIMsoToolbarSet(long* ppITlbSet/*[out]*/)
{
  return (*this)->GetIMsoToolbarSet(ppITlbSet);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::GetIMsoTFC(long* pitfc/*[out,retval]*/)
{
  return (*this)->GetIMsoTFC(pitfc);
}

template <class T> long __fastcall
TCOMIExplorerWebsT<T>::GetIMsoTFC(void)
{
  long pitfc;
  OLECHECK(this->GetIMsoTFC((long*)&pitfc));
  return pitfc;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::GetIMsoOOUI(long* pitfc/*[out,retval]*/)
{
  return (*this)->GetIMsoOOUI(pitfc);
}

template <class T> long __fastcall
TCOMIExplorerWebsT<T>::GetIMsoOOUI(void)
{
  long pitfc;
  OLECHECK(this->GetIMsoOOUI((long*)&pitfc));
  return pitfc;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::ShowClipboard(void)
{
  return (*this)->ShowClipboard();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::StartMarker(long lBeginMarker/*[in]*/, long lEndMarker/*[in]*/)
{
  return (*this)->StartMarker(lBeginMarker, lEndMarker);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::EndMarker(long lEndMarker/*[in]*/)
{
  return (*this)->EndMarker(lEndMarker);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::GetDocToFile(BSTR Url/*[in]*/, BSTR filename/*[in]*/)
{
  return (*this)->GetDocToFile(Url, filename);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebsT<T>::GetDocuments(BSTR fileList/*[in]*/, BSTR urlList/*[in]*/)
{
  return (*this)->GetDocuments(fileList, urlList);
}

// *********************************************************************//
// DispIntf:  IExplorerWebs
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9B5D039F-8DDB-11D1-A220-00A0C9055E81}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::CreateWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                 Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                 Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateWeb"), DISPID(1));
  TAutoArgs<3> _args;
  _args[1] = serverUrl /*[VT_BSTR:0]*/;
  _args[2] = webName /*[VT_BSTR:0]*/;
  _args[3] = (int)oflag /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::IExplorerWeb**)Web /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
IExplorerWebsDispT<T>::CreateWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                 Frontpage_xp::WebOpenFlags oflag/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  this->CreateWeb(serverUrl, webName, oflag, (Frontpage_xp::IExplorerWeb**)&Web);
  return Web;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::OpenWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, BSTR user/*[in]*/, 
                               Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                               Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenWeb"), DISPID(2));
  TAutoArgs<4> _args;
  _args[1] = serverUrl /*[VT_BSTR:0]*/;
  _args[2] = webName /*[VT_BSTR:0]*/;
  _args[3] = user /*[VT_BSTR:0]*/;
  _args[4] = (int)oflag /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::IExplorerWeb**)Web /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
IExplorerWebsDispT<T>::OpenWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, BSTR user/*[in]*/, 
                               Frontpage_xp::WebOpenFlags oflag/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  this->OpenWeb(serverUrl, webName, user, oflag, (Frontpage_xp::IExplorerWeb**)&Web);
  return Web;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::OpenWebWithPassword(BSTR server/*[in]*/, BSTR webName/*[in]*/, 
                                           BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                           Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                           Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenWebWithPassword"), DISPID(3));
  TAutoArgs<5> _args;
  _args[1] = server /*[VT_BSTR:0]*/;
  _args[2] = webName /*[VT_BSTR:0]*/;
  _args[3] = user /*[VT_BSTR:0]*/;
  _args[4] = Password /*[VT_BSTR:0]*/;
  _args[5] = (int)oflag /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::IExplorerWeb**)Web /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
IExplorerWebsDispT<T>::OpenWebWithPassword(BSTR server/*[in]*/, BSTR webName/*[in]*/, 
                                           BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                           Frontpage_xp::WebOpenFlags oflag/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  this->OpenWebWithPassword(server, webName, user, Password, oflag, (Frontpage_xp::IExplorerWeb**)&Web);
  return Web;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::BringToTop()
{
  _TDispID _dispid(*this, OLETEXT("BringToTop"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::PromptOpenWeb(long inCurrentWindow/*[in]*/, 
                                     Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PromptOpenWeb"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = inCurrentWindow /*[VT_I4:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::IExplorerWeb**)Web /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
IExplorerWebsDispT<T>::PromptOpenWeb(long inCurrentWindow/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  this->PromptOpenWeb(inCurrentWindow, (Frontpage_xp::IExplorerWeb**)&Web);
  return Web;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::RemoveWeb(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveWeb"), DISPID(6));
  TAutoArgs<2> _args;
  _args[1] = serverUrl /*[VT_BSTR:0]*/;
  _args[2] = webName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::SetEditor(BSTR Type/*[in]*/, BSTR Name/*[in]*/, BSTR command/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetEditor"), DISPID(7));
  TAutoArgs<3> _args;
  _args[1] = Type /*[VT_BSTR:0]*/;
  _args[2] = Name /*[VT_BSTR:0]*/;
  _args[3] = command /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::DisableErrorDialogs(long bYesNo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableErrorDialogs"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = bYesNo /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::Quit()
{
  _TDispID _dispid(*this, OLETEXT("Quit"), DISPID(9));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::ListOpenWebs(BSTR* Webs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListOpenWebs"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Webs /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebsDispT<T>::ListOpenWebs(void)
{
  BSTR Webs;
  this->ListOpenWebs((BSTR*)&Webs);
  return Webs;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::GetOpenWeb(BSTR WebUrl/*[in]*/, 
                                  Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOpenWeb"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = WebUrl /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::IExplorerWeb**)Web /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
IExplorerWebsDispT<T>::GetOpenWeb(BSTR WebUrl/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  this->GetOpenWeb(WebUrl, (Frontpage_xp::IExplorerWeb**)&Web);
  return Web;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::EditWebPage(BSTR Url)
{
  _TDispID _dispid(*this, OLETEXT("EditWebPage"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::GetThemePaths(BSTR* themePaths/*[out]*/, BSTR* customThemePath/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetThemePaths"), DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = themePaths /*[VT_BSTR:1]*/;
  _args[2] = customThemePath /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::ParseURL(BSTR Url/*[in]*/, BSTR* serverUrl/*[out]*/, BSTR* webName/*[out]*/, 
                                BSTR* pageUrl/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParseURL"), DISPID(14));
  TAutoArgs<4> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = serverUrl /*[VT_BSTR:1]*/;
  _args[3] = webName /*[VT_BSTR:1]*/;
  _args[4] = pageUrl /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::CreateWebWithPassword(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                             BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                             Frontpage_xp::WebOpenFlags oflag/*[in]*/, 
                                             Frontpage_xp::IExplorerWeb** Web/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateWebWithPassword"), DISPID(15));
  TAutoArgs<5> _args;
  _args[1] = serverUrl /*[VT_BSTR:0]*/;
  _args[2] = webName /*[VT_BSTR:0]*/;
  _args[3] = user /*[VT_BSTR:0]*/;
  _args[4] = Password /*[VT_BSTR:0]*/;
  _args[5] = (int)oflag /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::IExplorerWeb**)Web /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::IExplorerWeb* __fastcall
IExplorerWebsDispT<T>::CreateWebWithPassword(BSTR serverUrl/*[in]*/, BSTR webName/*[in]*/, 
                                             BSTR user/*[in]*/, BSTR Password/*[in]*/, 
                                             Frontpage_xp::WebOpenFlags oflag/*[in]*/)
{
  Frontpage_xp::IExplorerWeb* Web;
  this->CreateWebWithPassword(serverUrl, webName, user, Password, oflag, (Frontpage_xp::IExplorerWeb**)&Web);
  return Web;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::GetThemePath(BSTR ThemeName/*[in]*/, BSTR* themePath/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetThemePath"), DISPID(16));
  TAutoArgs<2> _args;
  _args[1] = ThemeName /*[VT_BSTR:0]*/;
  _args[2] = themePath /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::NewWindow()
{
  _TDispID _dispid(*this, OLETEXT("NewWindow"), DISPID(17));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::EditInFrontPage(BSTR Url, Frontpage_xp::RequestDocumentsFlags flags)
{
  _TDispID _dispid(*this, OLETEXT("EditInFrontPage"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = (int)flags /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::GetMSOHInstace(long* hInstPtr/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMSOHInstace"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = hInstPtr /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::NextPane()
{
  _TDispID _dispid(*this, OLETEXT("NextPane"), DISPID(20));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::GetIMsoToolbarSet(long* ppITlbSet/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIMsoToolbarSet"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = ppITlbSet /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::GetIMsoTFC(long* pitfc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIMsoTFC"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pitfc /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IExplorerWebsDispT<T>::GetIMsoTFC(void)
{
  long pitfc;
  this->GetIMsoTFC((long*)&pitfc);
  return pitfc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::GetIMsoOOUI(long* pitfc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIMsoOOUI"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pitfc /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IExplorerWebsDispT<T>::GetIMsoOOUI(void)
{
  long pitfc;
  this->GetIMsoOOUI((long*)&pitfc);
  return pitfc;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::ShowClipboard()
{
  _TDispID _dispid(*this, OLETEXT("ShowClipboard"), DISPID(24));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::StartMarker(long lBeginMarker/*[in]*/, long lEndMarker/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartMarker"), DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = lBeginMarker /*[VT_I4:0]*/;
  _args[2] = lEndMarker /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::EndMarker(long lEndMarker/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("EndMarker"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = lEndMarker /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::GetDocToFile(BSTR Url/*[in]*/, BSTR filename/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDocToFile"), DISPID(27));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = filename /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebsDispT<T>::GetDocuments(BSTR fileList/*[in]*/, BSTR urlList/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDocuments"), DISPID(28));
  TAutoArgs<2> _args;
  _args[1] = fileList /*[VT_BSTR:0]*/;
  _args[2] = urlList /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIExplorerWeb
// Interface: IExplorerWeb
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::RefreshWebFromServer(void)
{
  return (*this)->RefreshWebFromServer();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::SetWebRecalcDependencies(long bRecalcOn)
{
  return (*this)->SetWebRecalcDependencies(bRecalcOn);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetWebTitle(BSTR* Title/*[out,retval]*/)
{
  return (*this)->GetWebTitle(Title);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetWebTitle(void)
{
  BSTR Title = 0;
  OLECHECK(this->GetWebTitle((BSTR*)&Title));
  return Title;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetWebURL(BSTR* WebUrl/*[out,retval]*/)
{
  return (*this)->GetWebURL(WebUrl);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetWebURL(void)
{
  BSTR WebUrl = 0;
  OLECHECK(this->GetWebURL((BSTR*)&WebUrl));
  return WebUrl;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::PutWebMetaInfo(BSTR nameValuePairs)
{
  return (*this)->PutWebMetaInfo(nameValuePairs);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetWebMetaInfo(BSTR key, BSTR* value/*[out,retval]*/)
{
  return (*this)->GetWebMetaInfo(key, value);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetWebMetaInfo(BSTR key)
{
  BSTR value = 0;
  OLECHECK(this->GetWebMetaInfo(, (BSTR*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::ImportExternallyEditedFiles(void)
{
  return (*this)->ImportExternallyEditedFiles();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::IsFeatureSupported(BSTR feature, long* value/*[out,retval]*/)
{
  return (*this)->IsFeatureSupported(feature, value);
}

template <class T> long __fastcall
TCOMIExplorerWebT<T>::IsFeatureSupported(BSTR feature)
{
  long value;
  OLECHECK(this->IsFeatureSupported(, (long*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::ReturnDBWRoot(BSTR FileUrl, BSTR* rootUrl/*[out,retval]*/)
{
  return (*this)->ReturnDBWRoot(FileUrl, rootUrl);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::ReturnDBWRoot(BSTR FileUrl)
{
  BSTR rootUrl = 0;
  OLECHECK(this->ReturnDBWRoot(, (BSTR*)&rootUrl));
  return rootUrl;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::CancelRequests(void)
{
  return (*this)->CancelRequests();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::BringToTop(void)
{
  return (*this)->BringToTop();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::SetCurrentView(long nViewID, long bTransferSelection, long nFlags)
{
  return (*this)->SetCurrentView(nViewID, bTransferSelection, nFlags);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::PublishWeb(BSTR serverUrl, BSTR webName, long dwFlags, BSTR user, 
                                 BSTR Password)
{
  return (*this)->PublishWeb(serverUrl, webName, dwFlags, user, Password);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::RemoveWeb(BSTR webName)
{
  return (*this)->RemoveWeb(webName);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetBotModule(BSTR botDir, BSTR botModule, BSTR* Url/*[out,retval]*/)
{
  return (*this)->GetBotModule(botDir, botModule, Url);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetBotModule(BSTR botDir, BSTR botModule)
{
  BSTR Url = 0;
  OLECHECK(this->GetBotModule(, (BSTR*)&Url));
  return Url;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetBotsList(long* bNewBotsList/*[out]*/, BSTR* botList/*[out,retval]*/)
{
  return (*this)->GetBotsList(bNewBotsList, botList);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetBotsList(long* bNewBotsList/*[out]*/)
{
  BSTR botList = 0;
  OLECHECK(this->GetBotsList(, (BSTR*)&botList));
  return botList;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetBotsListEx(long* bNewBotsList/*[out]*/, BSTR* botList/*[out,retval]*/)
{
  return (*this)->GetBotsListEx(bNewBotsList, botList);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetBotsListEx(long* bNewBotsList/*[out]*/)
{
  BSTR botList = 0;
  OLECHECK(this->GetBotsListEx(, (BSTR*)&botList));
  return botList;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::ListThemes(BSTR* Themes/*[out,retval]*/)
{
  return (*this)->ListThemes(Themes);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::ListThemes(void)
{
  BSTR Themes = 0;
  OLECHECK(this->ListThemes((BSTR*)&Themes));
  return Themes;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::RefreshThemeList(void)
{
  return (*this)->RefreshThemeList();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::MakeThemeFresh(BSTR ThemeName, long bAllowUpload, long bAllowDownload)
{
  return (*this)->MakeThemeFresh(ThemeName, bAllowUpload, bAllowDownload);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::ApplyTheme(BSTR Name, long lParams, BSTR fileList)
{
  return (*this)->ApplyTheme(Name, lParams, fileList);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetTheme(BSTR themeDirName, BSTR locThemesDir, BSTR* fileList/*[out,retval]*/)
{
  return (*this)->GetTheme(themeDirName, locThemesDir, fileList);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetTheme(BSTR themeDirName, BSTR locThemesDir)
{
  BSTR fileList = 0;
  OLECHECK(this->GetTheme(, (BSTR*)&fileList));
  return fileList;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::PutTheme(BSTR themeDirName, BSTR themeVersion, BSTR fileList, 
                               BSTR locThemesDir)
{
  return (*this)->PutTheme(themeDirName, themeVersion, fileList, locThemesDir);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::PutGlobalThemeDoc(BSTR themeFile, BSTR webRelUrl)
{
  return (*this)->PutGlobalThemeDoc(themeFile, webRelUrl);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::PutWebStructure(BSTR structureAdds)
{
  return (*this)->PutWebStructure(structureAdds);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetWebStructureRelations(BSTR Url, long lRelationType, 
                                               BSTR* structure/*[out,retval]*/)
{
  return (*this)->GetWebStructureRelations(Url, lRelationType, structure);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetWebStructureRelations(BSTR Url, long lRelationType)
{
  BSTR structure = 0;
  OLECHECK(this->GetWebStructureRelations(, (BSTR*)&structure));
  return structure;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::CreateFolder(BSTR Url)
{
  return (*this)->CreateFolder(Url);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetFoldersList(BSTR parentFolderUrl, BSTR* folderList/*[out,retval]*/)
{
  return (*this)->GetFoldersList(parentFolderUrl, folderList);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetFoldersList(BSTR parentFolderUrl)
{
  BSTR folderList = 0;
  OLECHECK(this->GetFoldersList(, (BSTR*)&folderList));
  return folderList;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetPagesInFolder(BSTR FolderUrl, long lType, BSTR* pageList/*[out,retval]*/)
{
  return (*this)->GetPagesInFolder(FolderUrl, lType, pageList);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetPagesInFolder(BSTR FolderUrl, long lType)
{
  BSTR pageList = 0;
  OLECHECK(this->GetPagesInFolder(, (BSTR*)&pageList));
  return pageList;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetSubWebsInFolder(BSTR FolderUrl, BSTR* subWebList/*[out,retval]*/)
{
  return (*this)->GetSubWebsInFolder(FolderUrl, subWebList);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetSubWebsInFolder(BSTR FolderUrl)
{
  BSTR subWebList = 0;
  OLECHECK(this->GetSubWebsInFolder(, (BSTR*)&subWebList));
  return subWebList;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::IsFolderInWeb(BSTR FolderUrl, long* inWeb/*[out,retval]*/)
{
  return (*this)->IsFolderInWeb(FolderUrl, inWeb);
}

template <class T> long __fastcall
TCOMIExplorerWebT<T>::IsFolderInWeb(BSTR FolderUrl)
{
  long inWeb;
  OLECHECK(this->IsFolderInWeb(, (long*)&inWeb));
  return inWeb;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::SetFolderOptions(BSTR Folder, long bExecutable, long bReadable)
{
  return (*this)->SetFolderOptions(Folder, bExecutable, bReadable);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::IsPageInWeb(BSTR szURL, long* inWeb/*[out,retval]*/)
{
  return (*this)->IsPageInWeb(szURL, inWeb);
}

template <class T> long __fastcall
TCOMIExplorerWebT<T>::IsPageInWeb(BSTR szURL)
{
  long inWeb;
  OLECHECK(this->IsPageInWeb(, (long*)&inWeb));
  return inWeb;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetDocToFile(BSTR Url, BSTR filename)
{
  return (*this)->GetDocToFile(Url, filename);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::PutDocuments(BSTR fileList, BSTR urlList, long bForceOverwrite, long* lDTM, 
                                   long* newDTM, BSTR metaInfo)
{
  return (*this)->PutDocuments(fileList, urlList, bForceOverwrite, lDTM, newDTM, metaInfo);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::PutDocument(BSTR filename, BSTR Url, long bBlockingRequest, 
                                  long bForceOverwrite)
{
  return (*this)->PutDocument(filename, Url, bBlockingRequest, bForceOverwrite);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::PutDocumentDTM(BSTR filename, BSTR Url, long lDateTimeModified, 
                                     long bBlockingRequest, long bForceOverwrite, 
                                     BSTR nameValuePairs, long* newDTM/*[out,retval]*/)
{
  return (*this)->PutDocumentDTM(filename, Url, lDateTimeModified, bBlockingRequest, bForceOverwrite, 
                                 nameValuePairs, newDTM);
}

template <class T> long __fastcall
TCOMIExplorerWebT<T>::PutDocumentDTM(BSTR filename, BSTR Url, long lDateTimeModified, 
                                     long bBlockingRequest, long bForceOverwrite, 
                                     BSTR nameValuePairs)
{
  long newDTM;
  OLECHECK(this->PutDocumentDTM(, (long*)&newDTM));
  return newDTM;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetWebPageMetaInfo(BSTR Url, BSTR keyName, BSTR* value/*[out,retval]*/)
{
  return (*this)->GetWebPageMetaInfo(Url, keyName, value);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetWebPageMetaInfo(BSTR Url, BSTR keyName)
{
  BSTR value = 0;
  OLECHECK(this->GetWebPageMetaInfo(, (BSTR*)&value));
  return value;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::PutWebPageMetaInfo(BSTR Url, BSTR nameValuePairs)
{
  return (*this)->PutWebPageMetaInfo(Url, nameValuePairs);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::RemoveWebPages(BSTR pageList)
{
  return (*this)->RemoveWebPages(pageList);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::EditForToDoList(BSTR Url, BSTR szCookie, long lKey)
{
  return (*this)->EditForToDoList(Url, szCookie, lKey);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::EditWebPage(BSTR Url)
{
  return (*this)->EditWebPage(Url);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::EditNextPageWithAction(BSTR prevURL, long* status/*[out,retval]*/)
{
  return (*this)->EditNextPageWithAction(prevURL, status);
}

template <class T> long __fastcall
TCOMIExplorerWebT<T>::EditNextPageWithAction(BSTR prevURL)
{
  long status;
  OLECHECK(this->EditNextPageWithAction(, (long*)&status));
  return status;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::EditImage(BSTR filename, BSTR Url)
{
  return (*this)->EditImage(filename, Url);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::RenameDocument(BSTR Url, BSTR newUrl, long bUpdateBacklinks, long bIsFolder, 
                                     long bCopy, long bForceOverwrite)
{
  return (*this)->RenameDocument(Url, newUrl, bUpdateBacklinks, bIsFolder, bCopy, bForceOverwrite);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::NewPage(BSTR Url, BSTR templateFile)
{
  return (*this)->NewPage(Url, templateFile);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::EditInFrontPage(BSTR Url)
{
  return (*this)->EditInFrontPage(Url);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::AddTask(BSTR taskName, short priority, BSTR createdBy, BSTR Url, BSTR cookie, 
                              BSTR Comment)
{
  return (*this)->AddTask(taskName, priority, createdBy, Url, cookie, Comment);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::AddTaskAskUser(BSTR taskName, short priority, BSTR createdBy, BSTR Url, 
                                     BSTR cookie, BSTR Comment)
{
  return (*this)->AddTaskAskUser(taskName, priority, createdBy, Url, cookie, Comment);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::CompletedTask(long taskId)
{
  return (*this)->CompletedTask(taskId);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::CompletedTaskByUrl(BSTR Url, BSTR cookie)
{
  return (*this)->CompletedTaskByUrl(Url, cookie);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::WorkedOnTask(long taskId)
{
  return (*this)->WorkedOnTask(taskId);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::WorkedOnTaskByUrl(BSTR Url, BSTR cookie)
{
  return (*this)->WorkedOnTaskByUrl(Url, cookie);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetTaskName(long taskId, BSTR* taskName/*[out,retval]*/)
{
  return (*this)->GetTaskName(taskId, taskName);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetTaskName(long taskId)
{
  BSTR taskName = 0;
  OLECHECK(this->GetTaskName(, (BSTR*)&taskName));
  return taskName;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetActiveCount(long* Count/*[out,retval]*/)
{
  return (*this)->GetActiveCount(Count);
}

template <class T> long __fastcall
TCOMIExplorerWebT<T>::GetActiveCount(void)
{
  long Count;
  OLECHECK(this->GetActiveCount((long*)&Count));
  return Count;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::DisableErrorDialogs(long bYesNo/*[in]*/)
{
  return (*this)->DisableErrorDialogs(bYesNo);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::ListDataSources(long lType, BSTR* sourceList/*[out]*/, BSTR* attrList/*[out]*/)
{
  return (*this)->ListDataSources(lType, sourceList, attrList);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetDatabaseSchema(BSTR szConnStr, long lFlags, BSTR* pszSchema/*[out]*/)
{
  return (*this)->GetDatabaseSchema(szConnStr, lFlags, pszSchema);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::ListRecordSources(BSTR szConnStr, long lType, BSTR* sources/*[out]*/, 
                                        BSTR* attrs/*[out]*/)
{
  return (*this)->ListRecordSources(szConnStr, lType, sources, attrs);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetRecordSourceSchema(BSTR szConnStr, BSTR szRecordSource, 
                                            BSTR* pszSchema/*[out]*/)
{
  return (*this)->GetRecordSourceSchema(szConnStr, szRecordSource, pszSchema);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetQuerySchema(BSTR szConnStr, BSTR szSQL, long lFlags, 
                                     BSTR* pszSchema/*[out]*/)
{
  return (*this)->GetQuerySchema(szConnStr, szSQL, lFlags, pszSchema);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::ListDrivers(long lType, BSTR* drivers/*[out]*/, BSTR* attrs/*[out]*/)
{
  return (*this)->ListDrivers(lType, drivers, attrs);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::ListDataConnections(BSTR* pszNames/*[out]*/, BSTR* pszConnStrs/*[out]*/)
{
  return (*this)->ListDataConnections(pszNames, pszConnStrs);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::SetDataConnections(BSTR names, BSTR attrs)
{
  return (*this)->SetDataConnections(names, attrs);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::WebSettingsDlg(long flags, long* retcode/*[out,retval]*/)
{
  return (*this)->WebSettingsDlg(flags, retcode);
}

template <class T> long __fastcall
TCOMIExplorerWebT<T>::WebSettingsDlg(long flags)
{
  long retcode;
  OLECHECK(this->WebSettingsDlg(, (long*)&retcode));
  return retcode;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::ApplyBorder(BSTR newBorders, long bNavTop, long bNavLeft, long bNavRight, 
                                  long topChanged, long leftChanged, long rightChanged, 
                                  long bApplyToWeb)
{
  return (*this)->ApplyBorder(newBorders, bNavTop, bNavLeft, bNavRight, topChanged, leftChanged, 
                              rightChanged, bApplyToWeb);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetPageList(long lType, BSTR* pageList/*[out,retval]*/)
{
  return (*this)->GetPageList(lType, pageList);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetPageList(long lType)
{
  BSTR pageList = 0;
  OLECHECK(this->GetPageList(, (BSTR*)&pageList));
  return pageList;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetWOMWeb(Frontpage_xp::Web** pWebObject/*[out,retval]*/)
{
  return (*this)->GetWOMWeb(pWebObject);
}

template <class T> Frontpage_xp::Web* __fastcall
TCOMIExplorerWebT<T>::GetWOMWeb(void)
{
  Frontpage_xp::Web* pWebObject;
  OLECHECK(this->GetWOMWeb((Frontpage_xp::Web**)&pWebObject));
  return pWebObject;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::RemoveDocuments(BSTR Url, long bBlockingRequest)
{
  return (*this)->RemoveDocuments(Url, bBlockingRequest);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetWebNavStructure(LPUNKNOWN* pNavStructure/*[out]*/)
{
  return (*this)->GetWebNavStructure(pNavStructure);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetWebPageBackLinkCount(BSTR Url, long* Count/*[out,retval]*/)
{
  return (*this)->GetWebPageBackLinkCount(Url, Count);
}

template <class T> long __fastcall
TCOMIExplorerWebT<T>::GetWebPageBackLinkCount(BSTR Url)
{
  long Count;
  OLECHECK(this->GetWebPageBackLinkCount(, (long*)&Count));
  return Count;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetNextBackLink(BSTR Url, long* pos, BSTR* link/*[out,retval]*/)
{
  return (*this)->GetNextBackLink(Url, pos, link);
}

template <class T> BSTR __fastcall
TCOMIExplorerWebT<T>::GetNextBackLink(BSTR Url, long* pos)
{
  BSTR link = 0;
  OLECHECK(this->GetNextBackLink(, (BSTR*)&link));
  return link;
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::GetOwsLists(LPUNKNOWN* pOwsLists/*[out]*/)
{
  return (*this)->GetOwsLists(pOwsLists);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::UpdateSharedBorderMetaInfo(void)
{
  return (*this)->UpdateSharedBorderMetaInfo();
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::RequestDocuments(BSTR urlList, LPUNKNOWN downloadStatus, unsigned_long flags)
{
  return (*this)->RequestDocuments(urlList, downloadStatus, flags);
}

template <class T> HRESULT __fastcall
TCOMIExplorerWebT<T>::RequestBatchRendering(unsigned_long dwID/*[in]*/, 
                                            LPSAFEARRAY* ppsaParams/*[in]*/, 
                                            LPUNKNOWN pStatusCB/*[in]*/)
{
  return (*this)->RequestBatchRendering(dwID, ppsaParams, pStatusCB);
}

// *********************************************************************//
// DispIntf:  IExplorerWeb
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9B5D03A1-8DDB-11D1-A220-00A0C9055E81}
// *********************************************************************//
template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::RefreshWebFromServer()
{
  _TDispID _dispid(*this, OLETEXT("RefreshWebFromServer"), DISPID(1));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::SetWebRecalcDependencies(long bRecalcOn)
{
  _TDispID _dispid(*this, OLETEXT("SetWebRecalcDependencies"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = bRecalcOn /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetWebTitle(BSTR* Title/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWebTitle"), DISPID(3));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Title /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetWebTitle(void)
{
  BSTR Title;
  this->GetWebTitle((BSTR*)&Title);
  return Title;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetWebURL(BSTR* WebUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWebURL"), DISPID(4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(WebUrl /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetWebURL(void)
{
  BSTR WebUrl;
  this->GetWebURL((BSTR*)&WebUrl);
  return WebUrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::PutWebMetaInfo(BSTR nameValuePairs)
{
  _TDispID _dispid(*this, OLETEXT("PutWebMetaInfo"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = nameValuePairs /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetWebMetaInfo(BSTR key, BSTR* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWebMetaInfo"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = key /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetWebMetaInfo(BSTR key)
{
  BSTR value;
  this->GetWebMetaInfo(key, (BSTR*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::ImportExternallyEditedFiles()
{
  _TDispID _dispid(*this, OLETEXT("ImportExternallyEditedFiles"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::IsFeatureSupported(BSTR feature, long* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsFeatureSupported"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = feature /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IExplorerWebDispT<T>::IsFeatureSupported(BSTR feature)
{
  long value;
  this->IsFeatureSupported(feature, (long*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::ReturnDBWRoot(BSTR FileUrl, BSTR* rootUrl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReturnDBWRoot"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = FileUrl /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(rootUrl /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::ReturnDBWRoot(BSTR FileUrl)
{
  BSTR rootUrl;
  this->ReturnDBWRoot(FileUrl, (BSTR*)&rootUrl);
  return rootUrl;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::CancelRequests()
{
  _TDispID _dispid(*this, OLETEXT("CancelRequests"), DISPID(10));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::BringToTop()
{
  _TDispID _dispid(*this, OLETEXT("BringToTop"), DISPID(11));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::SetCurrentView(long nViewID, long bTransferSelection, long nFlags)
{
  _TDispID _dispid(*this, OLETEXT("SetCurrentView"), DISPID(12));
  TAutoArgs<3> _args;
  _args[1] = nViewID /*[VT_I4:0]*/;
  _args[2] = bTransferSelection /*[VT_I4:0]*/;
  _args[3] = nFlags /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::PublishWeb(BSTR serverUrl, BSTR webName, long dwFlags, BSTR user, 
                                 BSTR Password)
{
  _TDispID _dispid(*this, OLETEXT("PublishWeb"), DISPID(13));
  TAutoArgs<5> _args;
  _args[1] = serverUrl /*[VT_BSTR:0]*/;
  _args[2] = webName /*[VT_BSTR:0]*/;
  _args[3] = dwFlags /*[VT_I4:0]*/;
  _args[4] = user /*[VT_BSTR:0]*/;
  _args[5] = Password /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::RemoveWeb(BSTR webName)
{
  _TDispID _dispid(*this, OLETEXT("RemoveWeb"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = webName /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetBotModule(BSTR botDir, BSTR botModule, BSTR* Url/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetBotModule"), DISPID(15));
  TAutoArgs<2> _args;
  _args[1] = botDir /*[VT_BSTR:0]*/;
  _args[2] = botModule /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Url /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetBotModule(BSTR botDir, BSTR botModule)
{
  BSTR Url;
  this->GetBotModule(botDir, botModule, (BSTR*)&Url);
  return Url;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetBotsList(long* bNewBotsList/*[out]*/, BSTR* botList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetBotsList"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = bNewBotsList /*[VT_I4:1]*/;
  return OutRetValSetterPtr(botList /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetBotsList(long* bNewBotsList/*[out]*/)
{
  BSTR botList;
  this->GetBotsList(bNewBotsList, (BSTR*)&botList);
  return botList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetBotsListEx(long* bNewBotsList/*[out]*/, BSTR* botList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetBotsListEx"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = bNewBotsList /*[VT_I4:1]*/;
  return OutRetValSetterPtr(botList /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetBotsListEx(long* bNewBotsList/*[out]*/)
{
  BSTR botList;
  this->GetBotsListEx(bNewBotsList, (BSTR*)&botList);
  return botList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::ListThemes(BSTR* Themes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListThemes"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Themes /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::ListThemes(void)
{
  BSTR Themes;
  this->ListThemes((BSTR*)&Themes);
  return Themes;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::RefreshThemeList()
{
  _TDispID _dispid(*this, OLETEXT("RefreshThemeList"), DISPID(19));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::MakeThemeFresh(BSTR ThemeName, long bAllowUpload, long bAllowDownload)
{
  _TDispID _dispid(*this, OLETEXT("MakeThemeFresh"), DISPID(20));
  TAutoArgs<3> _args;
  _args[1] = ThemeName /*[VT_BSTR:0]*/;
  _args[2] = bAllowUpload /*[VT_I4:0]*/;
  _args[3] = bAllowDownload /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::ApplyTheme(BSTR Name, long lParams, BSTR fileList)
{
  _TDispID _dispid(*this, OLETEXT("ApplyTheme"), DISPID(21));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = lParams /*[VT_I4:0]*/;
  _args[3] = fileList /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetTheme(BSTR themeDirName, BSTR locThemesDir, BSTR* fileList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTheme"), DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = themeDirName /*[VT_BSTR:0]*/;
  _args[2] = locThemesDir /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(fileList /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetTheme(BSTR themeDirName, BSTR locThemesDir)
{
  BSTR fileList;
  this->GetTheme(themeDirName, locThemesDir, (BSTR*)&fileList);
  return fileList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::PutTheme(BSTR themeDirName, BSTR themeVersion, BSTR fileList, 
                               BSTR locThemesDir)
{
  _TDispID _dispid(*this, OLETEXT("PutTheme"), DISPID(23));
  TAutoArgs<4> _args;
  _args[1] = themeDirName /*[VT_BSTR:0]*/;
  _args[2] = themeVersion /*[VT_BSTR:0]*/;
  _args[3] = fileList /*[VT_BSTR:0]*/;
  _args[4] = locThemesDir /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::PutGlobalThemeDoc(BSTR themeFile, BSTR webRelUrl)
{
  _TDispID _dispid(*this, OLETEXT("PutGlobalThemeDoc"), DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = themeFile /*[VT_BSTR:0]*/;
  _args[2] = webRelUrl /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::PutWebStructure(BSTR structureAdds)
{
  _TDispID _dispid(*this, OLETEXT("PutWebStructure"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = structureAdds /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetWebStructureRelations(BSTR Url, long lRelationType, 
                                               BSTR* structure/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWebStructureRelations"), DISPID(26));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = lRelationType /*[VT_I4:0]*/;
  return OutRetValSetterPtr(structure /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetWebStructureRelations(BSTR Url, long lRelationType)
{
  BSTR structure;
  this->GetWebStructureRelations(Url, lRelationType, (BSTR*)&structure);
  return structure;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::CreateFolder(BSTR Url)
{
  _TDispID _dispid(*this, OLETEXT("CreateFolder"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetFoldersList(BSTR parentFolderUrl, BSTR* folderList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFoldersList"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = parentFolderUrl /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(folderList /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetFoldersList(BSTR parentFolderUrl)
{
  BSTR folderList;
  this->GetFoldersList(parentFolderUrl, (BSTR*)&folderList);
  return folderList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetPagesInFolder(BSTR FolderUrl, long lType, BSTR* pageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPagesInFolder"), DISPID(29));
  TAutoArgs<2> _args;
  _args[1] = FolderUrl /*[VT_BSTR:0]*/;
  _args[2] = lType /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pageList /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetPagesInFolder(BSTR FolderUrl, long lType)
{
  BSTR pageList;
  this->GetPagesInFolder(FolderUrl, lType, (BSTR*)&pageList);
  return pageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetSubWebsInFolder(BSTR FolderUrl, BSTR* subWebList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSubWebsInFolder"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = FolderUrl /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(subWebList /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetSubWebsInFolder(BSTR FolderUrl)
{
  BSTR subWebList;
  this->GetSubWebsInFolder(FolderUrl, (BSTR*)&subWebList);
  return subWebList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::IsFolderInWeb(BSTR FolderUrl, long* inWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsFolderInWeb"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = FolderUrl /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(inWeb /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IExplorerWebDispT<T>::IsFolderInWeb(BSTR FolderUrl)
{
  long inWeb;
  this->IsFolderInWeb(FolderUrl, (long*)&inWeb);
  return inWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::SetFolderOptions(BSTR Folder, long bExecutable, long bReadable)
{
  _TDispID _dispid(*this, OLETEXT("SetFolderOptions"), DISPID(32));
  TAutoArgs<3> _args;
  _args[1] = Folder /*[VT_BSTR:0]*/;
  _args[2] = bExecutable /*[VT_I4:0]*/;
  _args[3] = bReadable /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::IsPageInWeb(BSTR szURL, long* inWeb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsPageInWeb"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = szURL /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(inWeb /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IExplorerWebDispT<T>::IsPageInWeb(BSTR szURL)
{
  long inWeb;
  this->IsPageInWeb(szURL, (long*)&inWeb);
  return inWeb;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetDocToFile(BSTR Url, BSTR filename)
{
  _TDispID _dispid(*this, OLETEXT("GetDocToFile"), DISPID(36));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = filename /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::PutDocuments(BSTR fileList, BSTR urlList, long bForceOverwrite, long* lDTM, 
                                   long* newDTM, BSTR metaInfo)
{
  _TDispID _dispid(*this, OLETEXT("PutDocuments"), DISPID(37));
  TAutoArgs<6> _args;
  _args[1] = fileList /*[VT_BSTR:0]*/;
  _args[2] = urlList /*[VT_BSTR:0]*/;
  _args[3] = bForceOverwrite /*[VT_I4:0]*/;
  _args[4] = lDTM /*[VT_I4:1]*/;
  _args[5] = newDTM /*[VT_I4:1]*/;
  _args[6] = metaInfo /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::PutDocument(BSTR filename, BSTR Url, long bBlockingRequest, 
                                  long bForceOverwrite)
{
  _TDispID _dispid(*this, OLETEXT("PutDocument"), DISPID(38));
  TAutoArgs<4> _args;
  _args[1] = filename /*[VT_BSTR:0]*/;
  _args[2] = Url /*[VT_BSTR:0]*/;
  _args[3] = bBlockingRequest /*[VT_I4:0]*/;
  _args[4] = bForceOverwrite /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::PutDocumentDTM(BSTR filename, BSTR Url, long lDateTimeModified, 
                                     long bBlockingRequest, long bForceOverwrite, 
                                     BSTR nameValuePairs, long* newDTM/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PutDocumentDTM"), DISPID(39));
  TAutoArgs<6> _args;
  _args[1] = filename /*[VT_BSTR:0]*/;
  _args[2] = Url /*[VT_BSTR:0]*/;
  _args[3] = lDateTimeModified /*[VT_I4:0]*/;
  _args[4] = bBlockingRequest /*[VT_I4:0]*/;
  _args[5] = bForceOverwrite /*[VT_I4:0]*/;
  _args[6] = nameValuePairs /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(newDTM /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IExplorerWebDispT<T>::PutDocumentDTM(BSTR filename, BSTR Url, long lDateTimeModified, 
                                     long bBlockingRequest, long bForceOverwrite, 
                                     BSTR nameValuePairs)
{
  long newDTM;
  this->PutDocumentDTM(filename, Url, lDateTimeModified, bBlockingRequest, bForceOverwrite, 
                       nameValuePairs, (long*)&newDTM);
  return newDTM;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetWebPageMetaInfo(BSTR Url, BSTR keyName, BSTR* value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWebPageMetaInfo"), DISPID(40));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = keyName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(value /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetWebPageMetaInfo(BSTR Url, BSTR keyName)
{
  BSTR value;
  this->GetWebPageMetaInfo(Url, keyName, (BSTR*)&value);
  return value;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::PutWebPageMetaInfo(BSTR Url, BSTR nameValuePairs)
{
  _TDispID _dispid(*this, OLETEXT("PutWebPageMetaInfo"), DISPID(41));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = nameValuePairs /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::RemoveWebPages(BSTR pageList)
{
  _TDispID _dispid(*this, OLETEXT("RemoveWebPages"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = pageList /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::EditForToDoList(BSTR Url, BSTR szCookie, long lKey)
{
  _TDispID _dispid(*this, OLETEXT("EditForToDoList"), DISPID(43));
  TAutoArgs<3> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = szCookie /*[VT_BSTR:0]*/;
  _args[3] = lKey /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::EditWebPage(BSTR Url)
{
  _TDispID _dispid(*this, OLETEXT("EditWebPage"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::EditNextPageWithAction(BSTR prevURL, long* status/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditNextPageWithAction"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = prevURL /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(status /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IExplorerWebDispT<T>::EditNextPageWithAction(BSTR prevURL)
{
  long status;
  this->EditNextPageWithAction(prevURL, (long*)&status);
  return status;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::EditImage(BSTR filename, BSTR Url)
{
  _TDispID _dispid(*this, OLETEXT("EditImage"), DISPID(46));
  TAutoArgs<2> _args;
  _args[1] = filename /*[VT_BSTR:0]*/;
  _args[2] = Url /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::RenameDocument(BSTR Url, BSTR newUrl, long bUpdateBacklinks, long bIsFolder, 
                                     long bCopy, long bForceOverwrite)
{
  _TDispID _dispid(*this, OLETEXT("RenameDocument"), DISPID(47));
  TAutoArgs<6> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = newUrl /*[VT_BSTR:0]*/;
  _args[3] = bUpdateBacklinks /*[VT_I4:0]*/;
  _args[4] = bIsFolder /*[VT_I4:0]*/;
  _args[5] = bCopy /*[VT_I4:0]*/;
  _args[6] = bForceOverwrite /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::NewPage(BSTR Url, BSTR templateFile)
{
  _TDispID _dispid(*this, OLETEXT("NewPage"), DISPID(48));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = templateFile /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::EditInFrontPage(BSTR Url)
{
  _TDispID _dispid(*this, OLETEXT("EditInFrontPage"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::AddTask(BSTR taskName, short priority, BSTR createdBy, BSTR Url, BSTR cookie, 
                              BSTR Comment)
{
  _TDispID _dispid(*this, OLETEXT("AddTask"), DISPID(50));
  TAutoArgs<6> _args;
  _args[1] = taskName /*[VT_BSTR:0]*/;
  _args[2] = priority /*[VT_I2:0]*/;
  _args[3] = createdBy /*[VT_BSTR:0]*/;
  _args[4] = Url /*[VT_BSTR:0]*/;
  _args[5] = cookie /*[VT_BSTR:0]*/;
  _args[6] = Comment /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::AddTaskAskUser(BSTR taskName, short priority, BSTR createdBy, BSTR Url, 
                                     BSTR cookie, BSTR Comment)
{
  _TDispID _dispid(*this, OLETEXT("AddTaskAskUser"), DISPID(51));
  TAutoArgs<6> _args;
  _args[1] = taskName /*[VT_BSTR:0]*/;
  _args[2] = priority /*[VT_I2:0]*/;
  _args[3] = createdBy /*[VT_BSTR:0]*/;
  _args[4] = Url /*[VT_BSTR:0]*/;
  _args[5] = cookie /*[VT_BSTR:0]*/;
  _args[6] = Comment /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::CompletedTask(long taskId)
{
  _TDispID _dispid(*this, OLETEXT("CompletedTask"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = taskId /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::CompletedTaskByUrl(BSTR Url, BSTR cookie)
{
  _TDispID _dispid(*this, OLETEXT("CompletedTaskByUrl"), DISPID(53));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = cookie /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::WorkedOnTask(long taskId)
{
  _TDispID _dispid(*this, OLETEXT("WorkedOnTask"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = taskId /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::WorkedOnTaskByUrl(BSTR Url, BSTR cookie)
{
  _TDispID _dispid(*this, OLETEXT("WorkedOnTaskByUrl"), DISPID(55));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = cookie /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetTaskName(long taskId, BSTR* taskName/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTaskName"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = taskId /*[VT_I4:0]*/;
  return OutRetValSetterPtr(taskName /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetTaskName(long taskId)
{
  BSTR taskName;
  this->GetTaskName(taskId, (BSTR*)&taskName);
  return taskName;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetActiveCount(long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetActiveCount"), DISPID(57));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IExplorerWebDispT<T>::GetActiveCount(void)
{
  long Count;
  this->GetActiveCount((long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::DisableErrorDialogs(long bYesNo/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DisableErrorDialogs"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = bYesNo /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::ListDataSources(long lType, BSTR* sourceList/*[out]*/, BSTR* attrList/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListDataSources"), DISPID(59));
  TAutoArgs<3> _args;
  _args[1] = lType /*[VT_I4:0]*/;
  _args[2] = sourceList /*[VT_BSTR:1]*/;
  _args[3] = attrList /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetDatabaseSchema(BSTR szConnStr, long lFlags, BSTR* pszSchema/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetDatabaseSchema"), DISPID(60));
  TAutoArgs<3> _args;
  _args[1] = szConnStr /*[VT_BSTR:0]*/;
  _args[2] = lFlags /*[VT_I4:0]*/;
  _args[3] = pszSchema /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::ListRecordSources(BSTR szConnStr, long lType, BSTR* sources/*[out]*/, 
                                        BSTR* attrs/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListRecordSources"), DISPID(61));
  TAutoArgs<4> _args;
  _args[1] = szConnStr /*[VT_BSTR:0]*/;
  _args[2] = lType /*[VT_I4:0]*/;
  _args[3] = sources /*[VT_BSTR:1]*/;
  _args[4] = attrs /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetRecordSourceSchema(BSTR szConnStr, BSTR szRecordSource, 
                                            BSTR* pszSchema/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRecordSourceSchema"), DISPID(62));
  TAutoArgs<3> _args;
  _args[1] = szConnStr /*[VT_BSTR:0]*/;
  _args[2] = szRecordSource /*[VT_BSTR:0]*/;
  _args[3] = pszSchema /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetQuerySchema(BSTR szConnStr, BSTR szSQL, long lFlags, 
                                     BSTR* pszSchema/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetQuerySchema"), DISPID(63));
  TAutoArgs<4> _args;
  _args[1] = szConnStr /*[VT_BSTR:0]*/;
  _args[2] = szSQL /*[VT_BSTR:0]*/;
  _args[3] = lFlags /*[VT_I4:0]*/;
  _args[4] = pszSchema /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::ListDrivers(long lType, BSTR* drivers/*[out]*/, BSTR* attrs/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListDrivers"), DISPID(64));
  TAutoArgs<3> _args;
  _args[1] = lType /*[VT_I4:0]*/;
  _args[2] = drivers /*[VT_BSTR:1]*/;
  _args[3] = attrs /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::ListDataConnections(BSTR* pszNames/*[out]*/, BSTR* pszConnStrs/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ListDataConnections"), DISPID(65));
  TAutoArgs<2> _args;
  _args[1] = pszNames /*[VT_BSTR:1]*/;
  _args[2] = pszConnStrs /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::SetDataConnections(BSTR names, BSTR attrs)
{
  _TDispID _dispid(*this, OLETEXT("SetDataConnections"), DISPID(66));
  TAutoArgs<2> _args;
  _args[1] = names /*[VT_BSTR:0]*/;
  _args[2] = attrs /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::WebSettingsDlg(long flags, long* retcode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("WebSettingsDlg"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = flags /*[VT_I4:0]*/;
  return OutRetValSetterPtr(retcode /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IExplorerWebDispT<T>::WebSettingsDlg(long flags)
{
  long retcode;
  this->WebSettingsDlg(flags, (long*)&retcode);
  return retcode;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::ApplyBorder(BSTR newBorders, long bNavTop, long bNavLeft, long bNavRight, 
                                  long topChanged, long leftChanged, long rightChanged, 
                                  long bApplyToWeb)
{
  _TDispID _dispid(*this, OLETEXT("ApplyBorder"), DISPID(68));
  TAutoArgs<8> _args;
  _args[1] = newBorders /*[VT_BSTR:0]*/;
  _args[2] = bNavTop /*[VT_I4:0]*/;
  _args[3] = bNavLeft /*[VT_I4:0]*/;
  _args[4] = bNavRight /*[VT_I4:0]*/;
  _args[5] = topChanged /*[VT_I4:0]*/;
  _args[6] = leftChanged /*[VT_I4:0]*/;
  _args[7] = rightChanged /*[VT_I4:0]*/;
  _args[8] = bApplyToWeb /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetPageList(long lType, BSTR* pageList/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPageList"), DISPID(69));
  TAutoArgs<1> _args;
  _args[1] = lType /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pageList /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetPageList(long lType)
{
  BSTR pageList;
  this->GetPageList(lType, (BSTR*)&pageList);
  return pageList;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetWOMWeb(Frontpage_xp::Web** pWebObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWOMWeb"), DISPID(70));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Frontpage_xp::Web**)pWebObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Frontpage_xp::Web* __fastcall
IExplorerWebDispT<T>::GetWOMWeb(void)
{
  Frontpage_xp::Web* pWebObject;
  this->GetWOMWeb((Frontpage_xp::Web**)&pWebObject);
  return pWebObject;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::RemoveDocuments(BSTR Url, long bBlockingRequest)
{
  _TDispID _dispid(*this, OLETEXT("RemoveDocuments"), DISPID(71));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = bBlockingRequest /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetWebNavStructure(LPUNKNOWN* pNavStructure/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWebNavStructure"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = pNavStructure /*[VT_UNKNOWN:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetWebPageBackLinkCount(BSTR Url, long* Count/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWebPageBackLinkCount"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Count /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IExplorerWebDispT<T>::GetWebPageBackLinkCount(BSTR Url)
{
  long Count;
  this->GetWebPageBackLinkCount(Url, (long*)&Count);
  return Count;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetNextBackLink(BSTR Url, long* pos, BSTR* link/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNextBackLink"), DISPID(74));
  TAutoArgs<2> _args;
  _args[1] = Url /*[VT_BSTR:0]*/;
  _args[2] = pos /*[VT_I4:1]*/;
  return OutRetValSetterPtr(link /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IExplorerWebDispT<T>::GetNextBackLink(BSTR Url, long* pos)
{
  BSTR link;
  this->GetNextBackLink(Url, pos, (BSTR*)&link);
  return link;
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::GetOwsLists(LPUNKNOWN* pOwsLists/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOwsLists"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = pOwsLists /*[VT_UNKNOWN:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::UpdateSharedBorderMetaInfo()
{
  _TDispID _dispid(*this, OLETEXT("UpdateSharedBorderMetaInfo"), DISPID(76));
  return OleFunction(_dispid);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::RequestDocuments(BSTR urlList, LPUNKNOWN downloadStatus, unsigned_long flags)
{
  _TDispID _dispid(*this, OLETEXT("RequestDocuments"), DISPID(77));
  TAutoArgs<3> _args;
  _args[1] = urlList /*[VT_BSTR:0]*/;
  _args[2] = downloadStatus /*[VT_UNKNOWN:0]*/;
  _args[3] = flags /*[VT_UI4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT /*[VT_HRESULT:0]*/ __fastcall
IExplorerWebDispT<T>::RequestBatchRendering(unsigned_long dwID/*[in]*/, 
                                            LPSAFEARRAY* ppsaParams/*[in]*/, 
                                            LPUNKNOWN pStatusCB/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RequestBatchRendering"), DISPID(78));
  TAutoArgs<3> _args;
  _args[1] = dwID /*[VT_UI4:0]*/;
  _args[2] = ppsaParams /*[VT_SAFEARRAY:1]*/;
  _args[3] = pStatusCB /*[VT_UNKNOWN:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _IPageWindowEvents
// Flags:     (4096) Dispatchable
// GUID:      {B6B97A3C-4B04-11D3-9FE7-00C04F79E87D}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_IPageWindowEventsDispT<T>::OnClose(VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnClose */ DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IPageWindowEventsDispT<T>::OnBeforeSave(VARIANT_BOOL* SaveAsUI/*[in]*/, 
                                         VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnBeforeSave */ DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = SaveAsUI /*[VT_BOOL:1]*/;
  _args[2] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IPageWindowEventsDispT<T>::OnAfterSave(VARIANT_BOOL* Success/*[in]*/)
{
  _TDispID _dispid(/* OnAfterSave */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Success /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IPageWindowEventsDispT<T>::OnBeforeViewChange(Frontpage_xp::FpPageViewMode TargetView/*[in]*/, 
                                               VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnBeforeViewChange */ DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = (int)TargetView /*[VT_USERDEFINED:0]*/;
  _args[2] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IPageWindowEventsDispT<T>::OnAfterViewChange()
{
  _TDispID _dispid(/* OnAfterViewChange */ DISPID(5));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IPageWindowEventsDispT<T>::OnActivate()
{
  _TDispID _dispid(/* OnActivate */ DISPID(6));
  OleProcedure(_dispid);
}

// *********************************************************************//
// DispIntf:  _IWebEvents
// Flags:     (4096) Dispatchable
// GUID:      {9389CD3A-9318-11D3-9F96-005004AE6A5C}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebEventsDispT<T>::OnBeforePublish(BSTR* Destination/*[in]*/, VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnBeforePublish */ DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = Destination /*[VT_BSTR:1]*/;
  _args[2] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebEventsDispT<T>::OnAfterPublish(VARIANT_BOOL* Success/*[in]*/)
{
  _TDispID _dispid(/* OnAfterPublish */ DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Success /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebEventsDispT<T>::OnRecalculateHyperlinks(VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnRecalculateHyperlinks */ DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebEventsDispT<T>::OnWebFileCheckOut(Frontpage_xp::WebFile* pFile/*[in]*/, 
                                       VARIANT_BOOL* CheckedOut/*[in]*/, 
                                       Frontpage_xp::FpCheckOutOption* pCheckOutOption/*[in]*/)
{
  _TDispID _dispid(/* OnWebFileCheckOut */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Frontpage_xp::WebFile*)pFile /*[VT_USERDEFINED:1]*/;
  _args[2] = CheckedOut /*[VT_BOOL:1]*/;
  _args[3] = (int*)pCheckOutOption /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebEventsDispT<T>::OnClose(VARIANT_BOOL* pCancel/*[in]*/)
{
  _TDispID _dispid(/* OnClose */ DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = pCancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _IWebWindowEvents
// Flags:     (4096) Dispatchable
// GUID:      {71EA4320-A214-11D3-9FA5-005004AE6A5C}
// *********************************************************************//
template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebWindowEventsDispT<T>::OnBeforeViewChange(Frontpage_xp::FpWebViewModeEx TargetView/*[in]*/, 
                                              VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnBeforeViewChange */ DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = (int)TargetView /*[VT_USERDEFINED:0]*/;
  _args[2] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebWindowEventsDispT<T>::OnAfterViewChange()
{
  _TDispID _dispid(/* OnAfterViewChange */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebWindowEventsDispT<T>::OnActivate()
{
  _TDispID _dispid(/* OnActivate */ DISPID(3));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebWindowEventsDispT<T>::OnDeactivate()
{
  _TDispID _dispid(/* OnDeactivate */ DISPID(4));
  OleProcedure(_dispid);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebWindowEventsDispT<T>::OnBeforeSubViewChange(Frontpage_xp::FpWebSubView TargetSubView/*[in]*/, 
                                                 VARIANT_BOOL* Cancel/*[in]*/)
{
  _TDispID _dispid(/* OnBeforeSubViewChange */ DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = (int)TargetSubView /*[VT_USERDEFINED:0]*/;
  _args[2] = Cancel /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void /*[VT_VOID:0]*/ __fastcall
_IWebWindowEventsDispT<T>::OnAfterSubViewChange()
{
  _TDispID _dispid(/* OnAfterSubViewChange */ DISPID(6));
  OleProcedure(_dispid);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : App
// Interface: TCOM_Application
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Application, _Application, &CLSID_App, &IID__Application> CoApp;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ExplorerWebs
// Interface: TCOMIExplorerWebs
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIExplorerWebs, IExplorerWebs, &CLSID_ExplorerWebs, &IID_IExplorerWebs> CoExplorerWebs;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ExplorerWeb
// Interface: TCOMIExplorerWeb
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIExplorerWeb, IExplorerWeb, &CLSID_ExplorerWeb, &IID_IExplorerWeb> CoExplorerWeb;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : PageWindowEx
// Interface: TCOMPageWindow
// *********************************************************************//
typedef TCoClassCreatorT<TCOMPageWindow, PageWindow, &CLSID_PageWindowEx, &IID_PageWindow> CoPageWindowEx;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WebEx
// Interface: TCOMWeb
// *********************************************************************//
typedef TCoClassCreatorT<TCOMWeb, Web, &CLSID_WebEx, &IID_Web> CoWebEx;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : WebWindowEx
// Interface: TCOMWebWindow
// *********************************************************************//
typedef TCoClassCreatorT<TCOMWebWindow, WebWindow, &CLSID_WebWindowEx, &IID_WebWindow> CoWebWindowEx;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Lists
// Interface: TCOM_Lists
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Lists, _Lists, &CLSID_Lists, &IID__Lists> CoLists;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : List
// Interface: TCOM_List
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_List, _List, &CLSID_List, &IID__List> CoList;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : BasicList
// Interface: TCOM_BasicList
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_BasicList, _BasicList, &CLSID_BasicList, &IID__BasicList> CoBasicList;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Survey
// Interface: TCOM_Survey
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_Survey, _Survey, &CLSID_Survey, &IID__Survey> CoSurvey;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : DocumentLibrary
// Interface: TCOM_DocumentLibrary
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_DocumentLibrary, _DocumentLibrary, &CLSID_DocumentLibrary, &IID__DocumentLibrary> CoDocumentLibrary;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFields
// Interface: TCOM_ListFields
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFields, _ListFields, &CLSID_ListFields, &IID__ListFields> CoListFields;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListField
// Interface: TCOM_ListField
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListField, _ListField, &CLSID_ListField, &IID__ListField> CoListField;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldSingleLine
// Interface: TCOM_ListFieldSingleLine
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldSingleLine, _ListFieldSingleLine, &CLSID_ListFieldSingleLine, &IID__ListFieldSingleLine> CoListFieldSingleLine;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldMultiLine
// Interface: TCOM_ListFieldMultiLine
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldMultiLine, _ListFieldMultiLine, &CLSID_ListFieldMultiLine, &IID__ListFieldMultiLine> CoListFieldMultiLine;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldNumber
// Interface: TCOM_ListFieldNumber
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldNumber, _ListFieldNumber, &CLSID_ListFieldNumber, &IID__ListFieldNumber> CoListFieldNumber;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldCurrency
// Interface: TCOM_ListFieldCurrency
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldCurrency, _ListFieldCurrency, &CLSID_ListFieldCurrency, &IID__ListFieldCurrency> CoListFieldCurrency;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldDateTime
// Interface: TCOM_ListFieldDateTime
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldDateTime, _ListFieldDateTime, &CLSID_ListFieldDateTime, &IID__ListFieldDateTime> CoListFieldDateTime;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldChoice
// Interface: TCOM_ListFieldChoice
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldChoice, _ListFieldChoice, &CLSID_ListFieldChoice, &IID__ListFieldChoice> CoListFieldChoice;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldLookup
// Interface: TCOM_ListFieldLookup
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldLookup, _ListFieldLookup, &CLSID_ListFieldLookup, &IID__ListFieldLookup> CoListFieldLookup;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldTrueFalse
// Interface: TCOM_ListFieldTrueFalse
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldTrueFalse, _ListFieldTrueFalse, &CLSID_ListFieldTrueFalse, &IID__ListFieldTrueFalse> CoListFieldTrueFalse;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldURL
// Interface: TCOM_ListFieldURL
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldURL, _ListFieldURL, &CLSID_ListFieldURL, &IID__ListFieldURL> CoListFieldURL;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldCounter
// Interface: TCOM_ListFieldCounter
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldCounter, _ListFieldCounter, &CLSID_ListFieldCounter, &IID__ListFieldCounter> CoListFieldCounter;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldInteger
// Interface: TCOM_ListFieldInteger
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldInteger, _ListFieldInteger, &CLSID_ListFieldInteger, &IID__ListFieldInteger> CoListFieldInteger;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldComputed
// Interface: TCOM_ListFieldComputed
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldComputed, _ListFieldComputed, &CLSID_ListFieldComputed, &IID__ListFieldComputed> CoListFieldComputed;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ListFieldFile
// Interface: TCOM_ListFieldFile
// *********************************************************************//
typedef TCoClassCreatorT<TCOM_ListFieldFile, _ListFieldFile, &CLSID_ListFieldFile, &IID__ListFieldFile> CoListFieldFile;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : App
// Event Interface : _IApplicationEvents
// *********************************************************************//
template <class T>
class TEvents_App : public IConnectionPointImpl<T,
                                                 &DIID__IApplicationEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_OnWebNew(Frontpage_xp::Web* pWeb);
  void            Fire_OnWebOpen(Frontpage_xp::Web* pWeb);
  void            Fire_OnWebClose(Frontpage_xp::Web* pWeb, VARIANT_BOOL* Cancel);
  void            Fire_OnBeforeWebPublish(Frontpage_xp::Web* pWeb, BSTR* Destination, 
                                          VARIANT_BOOL* Cancel);
  void            Fire_OnAfterWebPublish(Frontpage_xp::Web* pWeb, VARIANT_BOOL* Success);
  void            Fire_OnPageNew(Frontpage_xp::PageWindow* pPage);
  void            Fire_OnPageOpen(Frontpage_xp::PageWindow* pPage);
  void            Fire_OnPageClose(Frontpage_xp::PageWindow* pPage, VARIANT_BOOL* Cancel);
  void            Fire_OnBeforePageSave(Frontpage_xp::PageWindow* pPage, VARIANT_BOOL* SaveAsUI, 
                                        VARIANT_BOOL* Cancel);
  void            Fire_OnAfterPageSave(Frontpage_xp::PageWindow* pPage, VARIANT_BOOL* Success);
  void            Fire_WindowActivate(Frontpage_xp::WebWindow* pWebWindow);
  void            Fire_WindowDeactivate(Frontpage_xp::WebWindow* pWebWindow);
  void            Fire_OnBeforeWebWindowViewChange(Frontpage_xp::WebWindow* pWebWindow, 
                                                   Frontpage_xp::FpWebViewModeEx TargetView, 
                                                   VARIANT_BOOL* Cancel);
  void            Fire_OnAfterWebWindowViewChange(Frontpage_xp::WebWindow* pWebWindow);
  void            Fire_OnRecalculateHyperlinks(Frontpage_xp::Web* pWeb, VARIANT_BOOL* Cancel);
  void            Fire_OnBeforePageWindowViewChange(Frontpage_xp::PageWindow* pPage, 
                                                    Frontpage_xp::FpPageViewMode TargetView, 
                                                    VARIANT_BOOL* Cancel);
  void            Fire_OnAfterPageWindowViewChange(Frontpage_xp::PageWindow* pPage);
  void            Fire_OnPageWindowActivate(Frontpage_xp::PageWindow* pPage);
  void            Fire_OnWebFileCheckOut(Frontpage_xp::Web* pWeb, Frontpage_xp::WebFile* pFile, 
                                         VARIANT_BOOL* CheckedOut, 
                                         Frontpage_xp::FpCheckOutOption* pCheckOutOption);
  void            Fire_OnBeforeWebWindowSubViewChange(Frontpage_xp::WebWindow* pWebWindow, 
                                                      Frontpage_xp::FpWebSubView TargetSubView, 
                                                      VARIANT_BOOL* Cancel);
  void            Fire_OnAfterWebWindowSubViewChange(Frontpage_xp::WebWindow* pWebWindow);
protected:
  _IApplicationEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_App<T>::Fire_OnWebNew(Frontpage_xp::Web* pWeb)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWebNew(pWeb);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnWebOpen(Frontpage_xp::Web* pWeb)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWebOpen(pWeb);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnWebClose(Frontpage_xp::Web* pWeb, VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWebClose(pWeb, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnBeforeWebPublish(Frontpage_xp::Web* pWeb, BSTR* Destination, 
                                        VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeforeWebPublish(pWeb, Destination, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnAfterWebPublish(Frontpage_xp::Web* pWeb, VARIANT_BOOL* Success)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAfterWebPublish(pWeb, Success);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnPageNew(Frontpage_xp::PageWindow* pPage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPageNew(pPage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnPageOpen(Frontpage_xp::PageWindow* pPage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPageOpen(pPage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnPageClose(Frontpage_xp::PageWindow* pPage, VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPageClose(pPage, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnBeforePageSave(Frontpage_xp::PageWindow* pPage, VARIANT_BOOL* SaveAsUI, 
                                      VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeforePageSave(pPage, SaveAsUI, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnAfterPageSave(Frontpage_xp::PageWindow* pPage, VARIANT_BOOL* Success)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAfterPageSave(pPage, Success);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_WindowActivate(Frontpage_xp::WebWindow* pWebWindow)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.WindowActivate(pWebWindow);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_WindowDeactivate(Frontpage_xp::WebWindow* pWebWindow)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.WindowDeactivate(pWebWindow);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnBeforeWebWindowViewChange(Frontpage_xp::WebWindow* pWebWindow, 
                                                 Frontpage_xp::FpWebViewModeEx TargetView, 
                                                 VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeforeWebWindowViewChange(pWebWindow, TargetView, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnAfterWebWindowViewChange(Frontpage_xp::WebWindow* pWebWindow)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAfterWebWindowViewChange(pWebWindow);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnRecalculateHyperlinks(Frontpage_xp::Web* pWeb, VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRecalculateHyperlinks(pWeb, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnBeforePageWindowViewChange(Frontpage_xp::PageWindow* pPage, 
                                                  Frontpage_xp::FpPageViewMode TargetView, 
                                                  VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeforePageWindowViewChange(pPage, TargetView, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnAfterPageWindowViewChange(Frontpage_xp::PageWindow* pPage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAfterPageWindowViewChange(pPage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnPageWindowActivate(Frontpage_xp::PageWindow* pPage)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPageWindowActivate(pPage);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnWebFileCheckOut(Frontpage_xp::Web* pWeb, Frontpage_xp::WebFile* pFile, 
                                       VARIANT_BOOL* CheckedOut, 
                                       Frontpage_xp::FpCheckOutOption* pCheckOutOption)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWebFileCheckOut(pWeb, pFile, CheckedOut, pCheckOutOption);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnBeforeWebWindowSubViewChange(Frontpage_xp::WebWindow* pWebWindow, 
                                                    Frontpage_xp::FpWebSubView TargetSubView, 
                                                    VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeforeWebWindowSubViewChange(pWebWindow, TargetSubView, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_App<T>::Fire_OnAfterWebWindowSubViewChange(Frontpage_xp::WebWindow* pWebWindow)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAfterWebWindowSubViewChange(pWebWindow);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PageWindowEx
// Event Interface : _IPageWindowEvents
// *********************************************************************//
template <class T>
class TEvents_PageWindowEx : public IConnectionPointImpl<T,
                                                 &DIID__IPageWindowEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_OnClose(VARIANT_BOOL* Cancel);
  void            Fire_OnBeforeSave(VARIANT_BOOL* SaveAsUI, VARIANT_BOOL* Cancel);
  void            Fire_OnAfterSave(VARIANT_BOOL* Success);
  void            Fire_OnBeforeViewChange(Frontpage_xp::FpPageViewMode TargetView, 
                                          VARIANT_BOOL* Cancel);
  void            Fire_OnAfterViewChange(void);
  void            Fire_OnActivate(void);
protected:
  _IPageWindowEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_PageWindowEx<T>::Fire_OnClose(VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClose(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageWindowEx<T>::Fire_OnBeforeSave(VARIANT_BOOL* SaveAsUI, VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeforeSave(SaveAsUI, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageWindowEx<T>::Fire_OnAfterSave(VARIANT_BOOL* Success)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAfterSave(Success);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageWindowEx<T>::Fire_OnBeforeViewChange(Frontpage_xp::FpPageViewMode TargetView, 
                                                 VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeforeViewChange(TargetView, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageWindowEx<T>::Fire_OnAfterViewChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAfterViewChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_PageWindowEx<T>::Fire_OnActivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnActivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WebEx
// Event Interface : _IWebEvents
// *********************************************************************//
template <class T>
class TEvents_WebEx : public IConnectionPointImpl<T,
                                                 &DIID__IWebEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_OnBeforePublish(BSTR* Destination, VARIANT_BOOL* Cancel);
  void            Fire_OnAfterPublish(VARIANT_BOOL* Success);
  void            Fire_OnRecalculateHyperlinks(VARIANT_BOOL* Cancel);
  void            Fire_OnWebFileCheckOut(Frontpage_xp::WebFile* pFile, VARIANT_BOOL* CheckedOut, 
                                         Frontpage_xp::FpCheckOutOption* pCheckOutOption);
  void            Fire_OnClose(VARIANT_BOOL* pCancel);
protected:
  _IWebEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_WebEx<T>::Fire_OnBeforePublish(BSTR* Destination, VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeforePublish(Destination, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WebEx<T>::Fire_OnAfterPublish(VARIANT_BOOL* Success)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAfterPublish(Success);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WebEx<T>::Fire_OnRecalculateHyperlinks(VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRecalculateHyperlinks(Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WebEx<T>::Fire_OnWebFileCheckOut(Frontpage_xp::WebFile* pFile, VARIANT_BOOL* CheckedOut, 
                                         Frontpage_xp::FpCheckOutOption* pCheckOutOption)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnWebFileCheckOut(pFile, CheckedOut, pCheckOutOption);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WebEx<T>::Fire_OnClose(VARIANT_BOOL* pCancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClose(pCancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : WebWindowEx
// Event Interface : _IWebWindowEvents
// *********************************************************************//
template <class T>
class TEvents_WebWindowEx : public IConnectionPointImpl<T,
                                                 &DIID__IWebWindowEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_OnBeforeViewChange(Frontpage_xp::FpWebViewModeEx TargetView, 
                                          VARIANT_BOOL* Cancel);
  void            Fire_OnAfterViewChange(void);
  void            Fire_OnActivate(void);
  void            Fire_OnDeactivate(void);
  void            Fire_OnBeforeSubViewChange(Frontpage_xp::FpWebSubView TargetSubView, 
                                             VARIANT_BOOL* Cancel);
  void            Fire_OnAfterSubViewChange(void);
protected:
  _IWebWindowEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_WebWindowEx<T>::Fire_OnBeforeViewChange(Frontpage_xp::FpWebViewModeEx TargetView, 
                                                VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeforeViewChange(TargetView, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WebWindowEx<T>::Fire_OnAfterViewChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAfterViewChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WebWindowEx<T>::Fire_OnActivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnActivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WebWindowEx<T>::Fire_OnDeactivate(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDeactivate();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WebWindowEx<T>::Fire_OnBeforeSubViewChange(Frontpage_xp::FpWebSubView TargetSubView, 
                                                   VARIANT_BOOL* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnBeforeSubViewChange(TargetSubView, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_WebWindowEx<T>::Fire_OnAfterSubViewChange(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnAfterSubViewChange();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Frontpage_xp

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Frontpage_xp;
#endif

#pragma option pop

#endif // FrontPage_XPH
